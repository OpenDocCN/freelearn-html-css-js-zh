- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Sequelize and ORM in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sequelize 和 Node.js 中 ORM 的简介
- en: Managing database drivers, managing schematics, maintaining a business’ workflow,
    and validating data can be daunting for any programmer. Along with perpetually
    changing business requirements, organizing the business logic into database models
    can be cumbersome. This usually entails the programmer finding all applicable
    references and updating queries manually. This could be an expensive operation
    for both the project and the programmer; without proper testing, the modifications
    could result in errors within the application or erroneous logic, leaving the
    programmer, the business, and the customer in a state of confusion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 管理数据库驱动程序、管理模式、维护业务流程以及验证数据可能对任何程序员来说都是一项艰巨的任务。随着业务需求的不断变化，将业务逻辑组织到数据库模型中可能会变得繁琐。这通常意味着程序员需要找到所有适用的引用并手动更新查询。这可能对项目和程序员来说都是一项昂贵的操作；如果没有适当的测试，修改可能会导致应用程序中的错误或错误的逻辑，使程序员、业务和客户陷入混乱的状态。
- en: This book will help guide you through the process of installing, building, maintaining,
    upgrading, extending, querying, and applying database schematics using an **object-relational
    mapping** (**ORM**) framework in a Node.js application using the Node.js runtime
    environment. The book can be read from start to finish in a sequential manner,
    or if you are more experienced, you can read the chapters that interest you directly.
    Each chapter complements the previous chapter since we will be creating an entire
    application from scratch. However, more experienced programmers can skip between
    chapters with the understanding that there may be “gaps” within their data model
    and what is shown within the chapter. The concepts and methodologies taught in
    each chapter, regardless of your data’s structure, will still be applicable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将指导您通过在 Node.js 运行时环境中使用 Node.js 运行环境，通过对象关系映射（**ORM**）框架安装、构建、维护、升级、扩展、查询和应用数据库模式的过程。您可以从头到尾顺序阅读本书，如果您更有经验，可以直接阅读您感兴趣的部分章节。由于我们将从头开始创建整个应用程序，因此每个章节都是相互补充的。然而，更有经验的程序员可以在章节之间跳转，理解到他们的数据模型和章节中展示的内容之间可能存在“差距”。无论您的数据结构如何，每个章节中教授的概念和方法都将适用。
- en: The goal of this chapter is to help you become familiar with what Sequelize
    is and which capabilities are offered to you from using Sequelize. We will go
    over the necessary prerequisite steps for installing applicable libraries, frameworks,
    runtime engines, and **database management systems** (**DBMS**). By the end of
    this chapter, you will have acquired the knowledge and skillset of installing,
    configuring, and running an application, under the Node.js runtime with Sequelize,
    from scratch.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是帮助您熟悉 Sequelize 是什么以及使用 Sequelize 提供了哪些功能。我们将介绍安装相关库、框架、运行时引擎和**数据库管理系统**（**DBMS**）的必要先决步骤。到本章结束时，您将获得在
    Node.js 运行时下使用 Sequelize 从零开始安装、配置和运行应用程序的知识和技能集。
- en: 'The first chapter of this book will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一章将涵盖以下主题：
- en: Introducing Sequelize
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Sequelize
- en: Advantages of using Sequelize over other alternatives
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sequelize 而不是其他替代方案的优势
- en: Installing the necessary applications, frameworks, and tools to help get you
    started
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装必要的应用程序、框架和工具以帮助您入门
- en: Configuring Sequelize within an Express application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Express 应用程序中配置 Sequelize
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we embark on our journey of developing an application with Sequelize,
    there are a few prerequisites. We will need to install the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Sequelize 开发应用程序的旅程之前，有一些先决条件。我们需要安装以下内容：
- en: A DBMS such as MySQL
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数据库管理系统，如 MySQL
- en: The Node.js runtime library
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 运行时库
- en: 'A few Node.js packages: Sequelize, Express, and a MySQL driver'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个 Node.js 包：Sequelize、Express 和一个 MySQL 驱动
- en: Introducing Sequelize
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Sequelize
- en: '**Sequelize** (also known as **SequelizeJS**) is an ORM framework that helps
    connect and correspond your Node.js application to a database. Sequelize has been
    in development since 2010 by Sascha Depold and is used extensively within *Fortune
    100* companies. Throughout the years, the framework has grown to nearly 25,000
    *stargazers* on GitHub, with over 900 contributors, and is used by over 300,000
    open sourced projects. Sequelize has been *battle-tested* for performance and
    security for over a decade and has performed without issues for major retail stores
    and web agencies (such as Walmart and Bitnami) even during their highest traffic
    times of the year.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sequelize**（也称为**SequelizeJS**）是一个ORM框架，它帮助将Node.js应用程序连接并对应到数据库。Sequelize自2010年起由Sascha
    Depold开发，并在*财富100强*公司中得到广泛使用。多年来，该框架在GitHub上已拥有近25,000个*星标*，超过900位贡献者，并被300,000多个开源项目使用。Sequelize在性能和安全方面经过了超过十年的实战考验，即使在一年中流量最高的时段，也为主要零售店和网络机构（如沃尔玛和Bitnami）提供了无问题的服务。'
- en: What started out as a master’s thesis turned into a major integral building
    block of Node.js’ ecosystem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最初只是一个硕士论文的项目，最终成为了Node.js生态系统的一个主要组成部分。
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An ORM is a methodology of associating database structures and information using
    **object-oriented** (**OO**) decorations and patterns. An ORM’s purpose is to
    help alleviate the differences between DBMSs and to offer some form of abstraction
    for querying and manipulating data more ergonomically. Typically, an ORM will
    also come with helper functions to help manage the state of connections, pre-validation
    of data, and workflows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ORM（对象关系映射）是一种使用**面向对象**（**OO**）装饰和模式将数据库结构和信息关联起来的方法。ORM的目的在于帮助缓解DBMS之间的差异，并提供一种形式上的抽象，以便更人性地查询和操作数据。通常，ORM还会附带一些辅助函数，以帮助管理连接状态、数据预验证和工作流程。
- en: 'The framework follows a **promise-based** approach, which allows programmers
    to invoke data asynchronously. The promise-based approach offers a more convenient
    way of managing returned values, or errors, within your application without waiting
    for the result(s) to return immediately. To learn more about promises and how
    to program with them, refer to the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架遵循**基于Promise**的方法，允许程序员异步调用数据。基于Promise的方法提供了一种更方便的方式来管理应用程序中返回的值或错误，而无需等待结果立即返回。要了解更多关于Promise及其编程方法的信息，请参阅以下链接：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)。
- en: What is asynchronous?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是异步？
- en: Think of asynchronous as a way to perform tasks without having to wait for a
    response before continuing on with another task. When you text message someone,
    you do not have to wait for their response in order to continue with your day.
    After you send a message, you usually would not warrant any attention to the correspondence
    until you receive a signal that there was a response or that the message had failed
    to send.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将异步视为一种无需等待响应即可继续执行其他任务的方式。当你给某人发短信时，你不必等待他们的回复就可以继续你的日常生活。发送消息后，你通常不会关注通信，直到你收到有回复或消息发送失败的信号。
- en: 'Currently, Sequelize supports the following DBMSs: MySQL, MariaDB, Postgres,
    **Microsoft SQL Server** (**MSSQL**), Snowflake, **Database 2** (**DB2**), and
    SQLite. An ORM offers more than just a connector to your database. ORMs often
    offer features such as the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Sequelize支持以下数据库管理系统：MySQL、MariaDB、Postgres、**Microsoft SQL Server**（**MSSQL**）、Snowflake、**Database
    2**（**DB2**）和SQLite。ORM不仅提供数据库的连接器，通常还提供以下功能：
- en: Tooling for migrating schemas and data
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于迁移模式和数据的工具
- en: Adapter/plugin support
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配器/插件支持
- en: Connection pooling
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接池
- en: Eager loading of data
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据预加载
- en: Managed transactions
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理事务
- en: Now that we understand *what* Sequelize is and its basic capabilities, we will
    go over *why* we should use an ORM such as Sequelize over alternative methods
    such as **data access objects** (**DAOs**) or querying the database directly.
    Some of the advantageous capabilities include being able to handle and organize
    queries within transactions or migrating schematic changes to a database.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Sequelize是什么以及其基本功能，我们将探讨为什么我们应该使用Sequelize这样的ORM而不是像**数据访问对象**（**DAOs**）或直接查询数据库这样的替代方法。其中一些有利的特性包括能够在事务中处理和组织查询，或将模式更改迁移到数据库。
- en: Advantages of using Sequelize over other alternatives
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sequelize 相比其他替代方案的优势
- en: There are many alternative ways of querying the database from your application.
    There are ORMs, DAOs, raw database drivers, and so on. Each methodology has its
    pros and cons and caters to different programming styles and conventions. Typically,
    those who favor *convention over configuration* tend to gravitate toward ORMs,
    while those who favor configuration tend to use DAO frameworks or raw database
    drivers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的应用程序查询数据库有许多替代方法。有 ORM、DAO、原始数据库驱动程序等等。每种方法都有其优缺点，并满足不同的编程风格和约定。通常，那些喜欢*约定胜于配置*的人倾向于使用
    ORM，而那些喜欢配置的人则倾向于使用 DAO 框架或原始数据库驱动程序。
- en: An ORM can handle data validation, similar to DAOs, with additional features
    such as reading and writing from a database using a driver. With ORMs, you would
    not need to manage query statements manually, which could save you time over the
    DAO or raw connection methods.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 可以处理数据验证，类似于 DAO，具有从数据库使用驱动程序读取和写入的附加功能。使用 ORM，您不需要手动管理查询语句，这可能会比 DAO 或原始连接方法节省您的时间。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An ORM is not mutually exclusive to DAOs. You can think of DAOs as being explicit
    as opposed to being implicit and presumptuous. A DAO only provides an *interface*
    for your data. It does not involve how/where you read or write the data (the database
    driver), nor will it concern itself with the data’s integrity unless the application
    manually invokes some form of data validation outside of the DAO’s scope.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 并非与 DAO 互斥。您可以将 DAO 视为是显式的，而不是隐式和假设性的。DAO 只提供数据的一个*接口*。它不涉及您如何/在哪里读取或写入数据（数据库驱动程序），也不会关心数据完整性，除非应用程序在
    DAO 范围之外手动调用某种形式的数据验证。
- en: 'When using an ORM such as Sequelize, you will have the following features without
    any additional code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用如 Sequelize 这样的 ORM 时，您将获得以下功能而无需任何额外代码：
- en: Transaction handling
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务处理
- en: Connection pooling
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接池
- en: Model/data validation
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型/数据验证
- en: Data integrity (outside of DBMS’ scope of **foreign keys** (**FKs**), unique
    constraints, and so on)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据完整性（超出 DBMS 的**外键**（**FKs**）、唯一约束等范围）
- en: Eager loading
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预加载
- en: Schematic migration and cascading
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形迁移和级联
- en: Optimistic locking
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乐观锁定
- en: Using a DAO or a raw database driver will forfeit these features, and you will
    have to build these solutions yourself. Using an ORM such as Sequelize will help
    you build your project with more efficiency and efficacy.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DAO 或原始数据库驱动程序将放弃这些功能，您将不得不自己构建这些解决方案。使用如 Sequelize 这样的 ORM 将帮助您更高效、更有效地构建项目。
- en: So far, we have covered the *what* and *why* for Sequelize; now, we will be
    going over the *how* for installing the necessary prerequisites for our application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了 Sequelize 的*是什么*和*为什么*；现在，我们将介绍安装应用程序所需必要先决条件的*如何*。
- en: Installing the necessary applications, frameworks, and tools to help get you
    started
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装必要的应用程序、框架和工具以帮助您开始
- en: 'Our application will require customers to view information from a centralized
    source, and we will need to capture information that they have entered into our
    database. Usually, customers can either view your product/services via an application
    that they install on their machine or they can use a browser to visit our website.
    Node.js is a good choice for building web applications, which is what we’ll be
    building throughout this book, due to its **central processing unit** (**CPU**)-bound
    limitations and ease of context switching between *frontend development* (what
    is displayed to the end user) and *backend development* (what the end user does
    not see but still invokes) owing to Node.js being JavaScript. We will need to
    install the following applications/programs in order to get started:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将要求客户从集中式来源查看信息，并且我们需要捕获他们输入到我们数据库中的信息。通常，客户可以通过安装在他们机器上的应用程序查看您的产品/服务，或者他们可以使用浏览器访问我们的网站。Node.js
    是构建网络应用程序的一个好选择，因为本书将围绕它展开，这得益于其**中央处理单元**（**CPU**）限制以及在前端开发（向最终用户显示的内容）和后端开发（最终用户看不到但仍然调用的内容）之间轻松切换上下文的能力，因为
    Node.js 是 JavaScript。为了开始，我们需要安装以下应用程序/程序：
- en: A DBMS (we will be installing MySQL)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DBMS（我们将安装 MySQL）
- en: Node.js runtime
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 运行时
- en: Sequelize and Express
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sequelize 和 Express
- en: Installing MySQL
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 MySQL
- en: 'This next section will go over the installation process for MySQL on three
    different operating system distributions: Microsoft Windows, macOS, and Linux.
    MySQL was chosen due to the ease of installation (no need to mess with configurations
    or **access-control lists** (**ACLs**)). Do not let those points discourage you
    from using a different database. For the most part, Sequelize will be able to
    gracefully translate from one DBMS to another, and the majority of this book will
    use common/standard **Structured Query Language** (**SQL**) methods.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将介绍在三种不同的操作系统发行版上安装 MySQL 的过程：Microsoft Windows、macOS 和 Linux。MySQL 被选择是因为其安装简单（无需配置或**访问控制列表**（**ACLs**））。不要让这些点阻止您使用不同的数据库。就大部分而言，Sequelize
    应该能够优雅地将一个 DBMS 转换为另一个，本书的大部分内容将使用通用/标准的**结构化查询语言**（**SQL**）方法。
- en: Windows
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: 'The MySQL installer for Microsoft Windows can be found here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Windows 的 MySQL 安装程序可在此处找到：
- en: '[https://dev.mysql.com/downloads/mysql/5.7.xhtml](https://dev.mysql.com/downloads/mysql/5.7.xhtml)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/downloads/mysql/5.7.xhtml](https://dev.mysql.com/downloads/mysql/5.7.xhtml)'
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The default `8.0.26`. This book uses version `5.7`, but other versions of MySQL
    should still work appropriately as long as the Node.js MySQL driver is compatible
    with that version.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认版本为 `8.0.26`。本书使用版本 `5.7`，但只要 Node.js MySQL 驱动程序与该版本兼容，MySQL 的其他版本也应能适当工作。
- en: 'Once we are finished downloading and opening the installer application, you
    will be greeted with the **Choosing a Setup Type** screen. We will want to select
    the **Developer Default** and **Install all products** options, as illustrated
    in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并打开安装程序应用程序后，您将看到**选择安装类型**屏幕。我们将想要选择**开发者默认**和**安装所有产品**选项，如图所示：
- en: '![ Figure 1.1 – Windows MySQL Installer: Choosing a Setup Type ](img/Figure_1.1_B17841.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Windows MySQL 安装程序：选择安装类型](img/Figure_1.1_B17841.jpg)'
- en: 'Figure 1.1 – Windows MySQL Installer: Choosing a Setup Type'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Windows MySQL 安装程序：选择安装类型
- en: 'If you have Python or Visual Studio installed on your computer, you may be
    greeted with a **Check Requirements** step (see *Figure 1.2*). If you are using
    Visual Studio as your **integrated development environment** (**IDE**), then you
    may install the necessary products, but it is not a requirement. Throughout your
    projects, you may come across a utility that is written in Python that interacts
    with your database (for example, most data science-related libraries/frameworks).
    By selecting the **Connector/Python** option shown in the following screenshot,
    we can avoid potential headaches in the future:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机上已安装 Python 或 Visual Studio，您可能会遇到一个**检查要求**步骤（见 *图 1.2*）。如果您使用 Visual
    Studio 作为您的**集成开发环境**（**IDE**），则可以安装必要的软件产品，但这不是必需的。在整个项目过程中，您可能会遇到用 Python 编写的工具，这些工具与您的数据库进行交互（例如，大多数与数据科学相关的库/框架）。通过选择以下屏幕截图所示的**Connector/Python**选项，我们可以避免未来可能出现的潜在问题：
- en: '![Figure 1.2 – Windows MySQL Installer: Check Requirements ](img/Figure_1.2_B17841.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Windows MySQL 安装程序：检查要求](img/Figure_1.2_B17841.jpg)'
- en: 'Figure 1.2 – Windows MySQL Installer: Check Requirements'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Windows MySQL 安装程序：检查要求
- en: 'The next section should be the **Download** step. The main products that we
    will be required for the contents of this book are listed here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个步骤应该是**下载**步骤。本书内容所需的主要产品列在这里：
- en: '**MySQL Server**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL 服务器**'
- en: '**MySQL Workbench** (for a **graphical user interface** (**GUI**) to our database)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL Workbench**（用于数据库的**图形用户界面**（**GUI**））'
- en: '**MySQL Shell**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL Shell**'
- en: 'You can see the aforementioned products in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到上述产品：
- en: '![Figure 1.3 – Windows MySQL Installer: Download ](img/Figure_1.3_B17841.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – Windows MySQL 安装程序：下载](img/Figure_1.3_B17841.jpg)'
- en: 'Figure 1.3 – Windows MySQL Installer: Download'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – Windows MySQL 安装程序：下载
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are new to MySQL, it may be a good idea to download the **MySQL Documentation**
    and **Samples and Examples** packages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 MySQL 的新用户，下载**MySQL 文档**和**示例和示例**包可能是个好主意。
- en: 'After we have finished downloading our packages, we will be entering our configuration
    details for each applicable selected product (for example, **MySQL Server** and
    **Samples and Examples**). For the majority of the configuration settings, we
    will be using the default values; however, there will be some steps that will
    require your intervention. You can see an overview of this in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成下载我们的软件包后，我们将为每个适用的选定产品（例如，**MySQL 服务器** 和 **示例和示例**）输入我们的配置详细信息。对于大多数配置设置，我们将使用默认值；然而，将有一些步骤需要您的干预。您可以在以下屏幕截图中查看此概述：
- en: '![Figure 1.4 – Windows MySQL Installer: Type and Networking ](img/Figure_1.4_B17841.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Windows MySQL 安装程序：类型和网络](img/Figure_1.4_B17841.jpg)'
- en: 'Figure 1.4 – Windows MySQL Installer: Type and Networking'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Windows MySQL 安装程序：类型和网络
- en: 'From the **MySQL Server** configuration wizard, we will want the following
    settings (as shown in *Figure 1.4*):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **MySQL 服务器** 配置向导中，我们希望以下设置（如图 *图 1.4* 所示）：
- en: '**Config Type**: **Development Computer**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置类型**：**开发计算机**'
- en: '**TCP/IP**: Checked'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP/IP**：已勾选'
- en: '`3306`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3306`'
- en: '**Open Windows Firewall port for network access**: Optional'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开 Windows 防火墙端口以进行网络访问**：可选'
- en: 'The next part of the MySQL Server configuration step is to declare your MySQL
    root password and user accounts. Make sure to keep this information in a safe
    place in case you run into administration issues throughout your projects. If
    you forget the MySQL root password, there are several methods for resetting the
    password, as explained here: [https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml](https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 服务器配置步骤的下一部分是声明您的 MySQL 根密码和用户账户。请确保将此信息保存在安全的地方，以防在项目过程中遇到管理问题。如果您忘记了
    MySQL 根密码，有几种方法可以重置密码，如以下所述：[https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml](https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml)。
- en: 'For setting up a MySQL user account with a role, you will be greeted with the
    following **Accounts and Roles** screen:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于设置具有角色的 MySQL 用户账户，您将看到以下 **账户和角色** 屏幕：
- en: '![Figure 1.5 – Windows MySQL Installer: Accounts and Roles ](img/Figure_1.5_B17841.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Windows MySQL 安装程序：账户和角色](img/Figure_1.5_B17841.jpg)'
- en: 'Figure 1.5 – Windows MySQL Installer: Accounts and Roles'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Windows MySQL 安装程序：账户和角色
- en: Within the **MySQL User Accounts** section, you will need to click on the **Add
    User** button (near the right side of the window, as shown in *Figure 1.5*) and
    type in a username and password that you will memorize for when we initialize
    our Node.js application. When you are finished adding the appropriate root password
    and MySQL user account(s), we can proceed to the next step.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **MySQL 用户账户** 部分中，您需要点击 **添加用户** 按钮（如图 *图 1.5* 所示，位于窗口右侧附近）并输入一个您将记住的用户名和密码，以便我们在初始化
    Node.js 应用程序时使用。当您完成添加适当的根密码和 MySQL 用户账户后，我们可以继续下一步。
- en: 'Next, the installation process will offer a **Configure MySQL Server as a Windows
    Service** option, as illustrated in the following screenshot. **Windows Service**
    is a **process control system** (**PCS**) that will also orchestrate background
    processes (in the Unix/Linux world, these are referred to as *daemons*):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装过程将提供一个 **将 MySQL 服务器配置为 Windows 服务** 选项，如图中所示。**Windows 服务** 是一个 **进程控制系统**（**PCS**），它还将编排后台进程（在
    Unix/Linux 世界中，这些被称为 *daemons*）：
- en: '![Figure 1.6 – Windows MySQL Installer: Windows Service ](img/Figure_1.6_B17841.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Windows MySQL 安装程序：Windows 服务](img/Figure_1.6_B17841.jpg)'
- en: 'Figure 1.6 – Windows MySQL Installer: Windows Service'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Windows MySQL 安装程序：Windows 服务
- en: 'We will want to ensure the following parameters are configured (as shown in
    *Figure 1.6*):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望确保以下参数已配置（如图 *图 1.6* 所示）：
- en: '**Configure MySQL Server as a Windows Service**: Checked'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将 MySQL 服务器配置为 Windows 服务**：已勾选'
- en: '**Start the MySQL Server at System Startup**: Checked'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在系统启动时启动 MySQL 服务器**：已勾选'
- en: '**Standard System Account** selected under the **Run Windows Service as...**
    section'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 **运行 Windows 服务作为...** 部分下选择 **标准系统账户**'
- en: Click on **Next >** to apply our configurations for the MySQL server. If you
    selected additional packages to install earlier, you may be prompted with additional
    screens asking for more configuration settings and parameters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **下一步 >** 以应用 MySQL 服务器的配置。如果您之前选择了要安装的附加软件包，您可能会遇到额外的屏幕，要求您提供更多的配置设置和参数。
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: If you selected the **MySQL Router** package from the previous section, the
    installation process will ask you for information on how you would like to set
    up a cluster environment. It is not recommended to install this package unless
    you are a database administrator or you are setting up a production environment.
    Simply uncheck the **Bootstrap MySQL Router for use with InnoDB cluster** option
    and click **Finish** to proceed without installing MySQL under a cluster environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在上一节中选择了**MySQL 路由器**包，安装过程将要求您提供有关您如何设置集群环境的信息。除非您是数据库管理员或您正在设置生产环境，否则不建议安装此包。只需取消选择**为
    InnoDB 集群启动 MySQL 路由器**选项，然后点击**完成**以在不安装 MySQL 集群环境的情况下继续。
- en: 'If the **Samples and Examples** package was selected for installation, we will
    be prompted with a screen that will allow us to enter our MySQL username and password.
    You may use your *root credentials* for the username and password input fields
    and click on the **Next >** button to continue. An overview of the screen is provided
    in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了安装**示例和示例**包，我们将看到一个屏幕，允许我们输入我们的 MySQL 用户名和密码。您可以使用您的**root 凭证**作为用户名和密码输入字段的输入，并点击**下一步
    >**按钮继续。屏幕的概述如下截图所示：
- en: '![Figure 1.7 – Windows MySQL Installer: Connect To Server ](img/Figure_1.7_B17841.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – Windows MySQL 安装程序：连接到服务器](img/Figure_1.7_B17841.jpg)'
- en: 'Figure 1.7 – Windows MySQL Installer: Connect To Server'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – Windows MySQL 安装程序：连接到服务器
- en: macOS
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: There are a couple of ways to install MySQL on a macOS machine. The first way
    is to download and install MySQL from a **Disk iMaGe** (**DMG**) file, while another
    method is by using a package manager such as Homebrew. We will explore both options.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 MySQL 有几种方法。第一种是从**磁盘镜像**（**DMG**）文件下载并安装 MySQL，另一种方法是使用包管理器，如 Homebrew。我们将探讨这两种选项。
- en: Installing from disk image
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从磁盘镜像安装
- en: 'You can find the appropriate disk image from the following URL: [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/)
    (x86 for Intel CPUs and **Advanced RISC Machine** (**ARM**) for M1 CPUs).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下 URL 找到适当的磁盘镜像：[https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/)（x86
    用于英特尔 CPU，**高级精简指令集**（**ARM**）用于 M1 CPU）。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you cannot find version 5.7 for MySQL, you will find the appropriate DMG
    file from MySQL’s archive link: [https://downloads.mysql.com/archives/community](https://downloads.mysql.com/archives/community).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您找不到 MySQL 的 5.7 版本，您可以从 MySQL 的存档链接中找到适当的 DMG 文件：[https://downloads.mysql.com/archives/community](https://downloads.mysql.com/archives/community)。
- en: However, the macOS installation packages may not be available to download for
    the most recent 5.7 versions. At the time of writing this book, versions 5.7.34,
    5.7.33, and 5.7.32 are not available as a DMG package (5.7.31 is available to
    download). Any applicable 5.7 version should be compatible with this book’s instructions
    and installation procedures.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，macOS 安装包可能无法下载最新 5.7 版本。在撰写本书时，版本 5.7.34、5.7.33 和 5.7.32 作为 DMG 包不可用（5.7.31
    可以下载）。任何适用的 5.7 版本都应与本书的说明和安装程序兼容。
- en: If you are asked about installing a preference panel throughout the installation
    process, we recommend you do so. Otherwise, we will need to consult the **Installing
    a MySQL Launch Daemon** page, located at [https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装过程中被要求安装偏好面板，我们建议您这样做。否则，我们需要查阅位于[https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml)的**安装
    MySQL 启动守护进程**页面。
- en: 'After downloading and opening the DMG file, we will want to open the **package**
    (**pkg**) file, which will start our installation process. Depending on your macOS
    version, you may be prompted with a **“[package name]” can’t be opened because
    Apple cannot check it for malicious software** screen, as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并打开 DMG 文件后，我们将想要打开**包**（**pkg**）文件，这将启动我们的安装过程。根据您的 macOS 版本，您可能会看到一个**“[包名]”无法打开，因为苹果无法检查其恶意软件**的屏幕，如下所示：
- en: '![Figure 1.8 – Apple cannot identify the package for maliciousness ](img/Figure_1.8_B17841.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 苹果无法识别该包的恶意性](img/Figure_1.8_B17841.jpg)'
- en: Figure 1.8 – Apple cannot identify the package for maliciousness
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 苹果无法识别该包的恶意性
- en: 'If this is the case for you, go to **Apple** | **Security & Privacy**, and
    the window should have an **Open Anyway** button next to **“mysql….pkg” was blocked
    from use because it is not from an identified developer.**, as shown in the following
    screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这种情况适用于你，请转到**苹果** | **安全与隐私**，窗口中应该在**“mysql….pkg”由于不是来自已识别的开发者而被阻止使用**旁边有一个**“无论如何打开”**按钮，如下面的屏幕截图所示：
- en: '![Figure 1.9 – Bypassing unidentified package installations ](img/Figure_1.9_B17841.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 绕过未识别的软件包安装](img/Figure_1.9_B17841.jpg)'
- en: Figure 1.9 – Bypassing unidentified package installations
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 绕过未识别的软件包安装
- en: 'Once the installation package opens again, you may be prompted with another
    alert from Apple. Click on **Open** to continue with the installation process.
    After continuing and reading the **software license agreement** (**SLA**), you
    may select the default installation location. Clicking on **Install** may prompt
    for your administrative password, as illustrated in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装包再次打开，你可能会收到来自苹果的另一个警告。点击**打开**以继续安装过程。在继续并阅读**软件许可协议**（**SLA**）后，你可以选择默认的安装位置。点击**安装**可能会提示输入你的管理员密码，如下面的屏幕截图所示：
- en: '![Figure 1.10 – MySQL installation asking for administrative permission ](img/Figure_1.10_B17841.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – MySQL安装请求管理员权限](img/Figure_1.10_B17841.jpg)'
- en: Figure 1.10 – MySQL installation asking for administrative permission
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – MySQL安装请求管理员权限
- en: 'Once the MySQL installer finishes, an alert dialog will appear with a temporary
    password. An example is shown in the following screenshot. Make sure to take note
    of the temporary password for when we log in to the MySQL server:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦MySQL安装程序完成，将出现一个带有临时密码的警告对话框。以下是一个示例。确保在登录MySQL服务器时记下临时密码：
- en: '![Figure 1.11 – MySQL installation providing a temporary root password ](img/Figure_1.11_B17841.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – MySQL安装提供临时root密码](img/Figure_1.11_B17841.jpg)'
- en: Figure 1.11 – MySQL installation providing a temporary root password
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – MySQL安装提供临时root密码
- en: Installing from Homebrew
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从Homebrew安装
- en: 'Using Homebrew over traditional package installers can help keep your packages
    up to date without manual intervention, along with validating package installations
    and binaries. To install MySQL through Homebrew, we will need to install Homebrew
    on our local machine. Within the terminal (located in **Applications** > **Utilities**),
    simply type in the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Homebrew而不是传统的软件包安装程序可以帮助你保持软件包更新，无需手动干预，同时验证软件包安装和二进制文件。要通过Homebrew安装MySQL，我们需要在我们的本地机器上安装Homebrew。在终端（位于**应用程序**
    > **实用工具**）中，只需输入以下命令：
- en: '[PRE0]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is always a good idea to double-check an external script’s contents before
    running commands from it. A web page can redirect to anywhere, including malicious
    scripts that could lead to data breaches or something more nefarious.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行外部脚本命令之前，总是检查脚本内容是一个好主意。一个网页可以重定向到任何地方，包括可能导致数据泄露或更恶劣的恶意脚本。
- en: 'When installing Homebrew, you may come across the following message:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Homebrew时，你可能会遇到以下消息：
- en: '[PRE1]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see an illustration of this in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的屏幕截图中看到这个示例：
- en: '![Figure 1.12 – Installing Homebrew on macOS ](img/Figure_1.12_B17841.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图1.12 – 在macOS上安装Homebrew](img/Figure_1.12_B17841.jpg)'
- en: Figure 1.12 – Installing Homebrew on macOS
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 – 在macOS上安装Homebrew
- en: You can either enter in your password here or before installing Homebrew, run
    `sudo <anything>` (for example, `sudo ls`), enter in your password, and then run
    the installation command. The user must have administrator access before continuing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里输入密码，或者在安装Homebrew之前运行`sudo <anything>`（例如，`sudo ls`），输入密码，然后运行安装命令。用户在继续之前必须具有管理员访问权限。
- en: 'For this book, we will install MySQL version 5.7\. Other versions of MySQL
    should be compatible with the book’s code base, as previously noted. To install
    version 5.7 explicitly, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将安装MySQL版本5.7。如前所述，MySQL的其他版本应该与本书的代码库兼容。要明确安装5.7版本，请运行以下命令：
- en: '[PRE2]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There may be additional steps and commands to run in order to set up your instance
    properly, as illustrated in the following screenshot. The book’s contents will
    not require library/header files for compilation, nor for `pkg-config` to be configured.
    As a general rule, it is recommended to run `mysql_secure_installation` and go
    through the prompts for adding a root password, but it is not a requirement:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确设置你的实例，可能需要运行额外的步骤和命令，如下面的屏幕截图所示。本书的内容不需要库/头文件进行编译，也不需要配置 `pkg-config`。一般来说，建议运行
    `mysql_secure_installation` 并按照提示添加根密码，但这不是必需的：
- en: '![Figure 1.13 – Installing MySQL with Homebrew on macOS ](img/Figure_1.13_B17841.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 在 macOS 上使用 Homebrew 安装 MySQL](img/Figure_1.13_B17841.jpg)'
- en: Figure 1.13 – Installing MySQL with Homebrew on macOS
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 在 macOS 上使用 Homebrew 安装 MySQL
- en: 'Next, we will need a way to manage our MySQL service. There are two options
    available to us, as outlined here:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种管理我们的 MySQL 服务的方法。这里概述了两种可供选择的方法：
- en: 'Manually create launch daemon configuration files. More information on how
    this can be achieved is available here: [https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml).'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动创建启动守护进程配置文件。有关如何实现此操作的更多信息，请参阅此处：[https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml)。
- en: 'We can use a Homebrew extension known as `services` to manage launch configurations
    automatically by executing the following command:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用一个名为 `services` 的 Homebrew 扩展，通过执行以下命令来自动管理启动配置：
- en: '[PRE3]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to start the MySQL service, we need to run the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动 MySQL 服务，我们需要运行以下命令：
- en: '[PRE4]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you prefer a GUI version of managing your services, there is an application
    called `brew-services-menubar` that can be installed via Homebrew’s Cask extension,
    as shown in the following code snippet:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用图形界面来管理你的服务，有一个名为 `brew-services-menubar` 的应用程序可以通过 Homebrew 的 Cask
    扩展安装，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you prefer to use a GUI when interfacing/querying databases, there is a
    free application called Sequel Pro that is available for downloading here:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢在交互或查询数据库时使用图形界面，有一个名为 Sequel Pro 的免费应用程序可供下载，链接如下：
- en: '[http://www.sequelpro.com/](http://www.sequelpro.com/)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.sequelpro.com/](http://www.sequelpro.com/)'
- en: Linux
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: 'There are numerous distributions of Linux; for this book, we will be using
    Ubuntu (any Debian distribution should be applicable with the same commands).
    If you are using a different distribution, please refer to this page for instructions
    on how to install MySQL for your operating system: [https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml](https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 有许多发行版；对于本书，我们将使用 Ubuntu（任何 Debian 发行版都应适用，使用相同的命令）。如果你使用的是不同的发行版，请参考此页面获取如何为你的操作系统安装
    MySQL 的说明：[https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml](https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml)。
- en: 'Within the terminal, run the following commands (these are also shown in the
    screenshot that follows):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令（这些命令也在下面的屏幕截图中有显示）：
- en: '[PRE6]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 1.14 – Installing MySQL Server on Ubuntu ](img/Figure_1.14_B17841.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – 在 Ubuntu 上安装 MySQL 服务器](img/Figure_1.14_B17841.jpg)'
- en: Figure 1.14 – Installing MySQL Server on Ubuntu
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 在 Ubuntu 上安装 MySQL 服务器
- en: After MySQL has finished its installation, we will need to initialize a database
    to store all of our model’s schemas and information. Some ORMs and DBMSs will
    refer to databases as “schemas” (not to be confused with a model’s schema, which
    is referred to as “attributes” in Sequelize specifically).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 安装完成后，我们需要初始化一个数据库来存储我们所有模型的结构和信息。一些 ORM 和 DBMS 将数据库称为“模式”（不要与模型模式混淆，在
    Sequelize 中被称为“属性”）。
- en: Creating a database
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Now that we have finished installing the MySQL DBMS engine on our local machine,
    we can start creating a database with some tables. Before creating tables, we
    will need to go over the various types of MySQL engines. Luckily for us, the following
    is applicable to all operating systems in the same way.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们本地机器上完成了 MySQL 数据库管理系统引擎的安装，我们可以开始创建一些表来构建数据库。在创建表之前，我们需要了解 MySQL 的各种引擎类型。幸运的是，以下内容适用于所有操作系统：
- en: 'By default, MySQL will create an InnoDB database type (or, in MySQL terms,
    engine). Database engines are associated with the database’s table on MySQL (and
    not the entire database itself). This is useful when you know the trade-offs between
    a read-heavy table with no constraints (for example, news articles) and a write-heavy
    table (for example, a chatroom). For the sake of brevity, we will go over the
    main three database engines, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL 将创建 InnoDB 数据库类型（或在 MySQL 术语中，引擎）。数据库引擎与 MySQL 中的数据库表相关联（而不是整个数据库）。当你知道在无约束的读取密集型表（例如，新闻文章）和写入密集型表（例如，聊天室）之间的权衡时，这非常有用。为了简洁起见，我们将简要介绍以下三个主要数据库引擎：
- en: '**InnoDB**: A database engine with transactional queries and FK support. Transactional
    queries are useful for executing a query, or several queries, with atomicity.
    We will go into further details about transactions and FKs in a later chapter.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InnoDB**：一个具有事务查询和 FK 支持的数据库引擎。事务查询对于执行一个查询，或多个查询，并保证原子性非常有用。我们将在后面的章节中进一步详细介绍事务和
    FK。'
- en: '**MyISAM**: If the majority of your database’s operations are read-related
    and you do not require any data constraints, this would be a preferred database
    engine to use.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MyISAM**：如果你的数据库操作主要是读取相关且你不需要任何数据约束，那么这将是一个首选的数据库引擎。'
- en: '**HEAP**: The data stored within these tables is contained within the machine’s
    memory. This database engine is useful if you had to query against temporary data
    quickly. MySQL will not manage memory allocations for you, so it is important
    to remember to delete tables when they are no longer in use (and that the data
    fits into the machine’s available memory).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HEAP**：这些表中的数据存储在机器的内存中。如果你需要快速查询临时数据，这个数据库引擎非常有用。MySQL 不会为你管理内存分配，因此记住在不再使用表时删除它们（并且数据适合机器的可用内存）非常重要。'
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can always check your local MySQL server’s default engine type by entering
    the following command within a MySQL client: `SELECT @@default_storage_engine;`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 MySQL 客户端中输入以下命令来检查你本地 MySQL 服务器的默认引擎类型：`SELECT @@default_storage_engine;`。
- en: You may skip this section and use the Sequelize `db:create` command, as long
    as the applicable MySQL user has the appropriate permissions. For the intent of
    becoming familiar with the terminal, we will create the database using command
    lines, as shown in the next screenshot.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以跳过这一节并使用 Sequelize 的 `db:create` 命令，只要相应的 MySQL 用户具有适当的权限。为了熟悉终端，我们将使用命令行创建数据库，如下一截图所示。
- en: 'Log in to the MySQL server with the following command (you may be prompted
    to enter in a password, or the additional `-p` parameter is required to enter
    in a password):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令登录到 MySQL 服务器（你可能需要输入密码，或者需要额外的 `-p` 参数来输入密码）：
- en: '[PRE7]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can create our database by executing the following SQL command within the
    MySQL client Command Prompt:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 MySQL 客户端命令提示符中执行以下 SQL 命令来创建我们的数据库：
- en: '[PRE8]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For Windows users
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户
- en: Most of these commands are executable via the Command Prompt or PowerShell applications.
    These applications can be accessed from the **Start** menu (for example, **Start**
    > **All Programs** > **Accessories** > **Windows PowerShell**).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些命令都可以通过命令提示符或 PowerShell 应用程序执行。这些应用程序可以通过 **开始** 菜单访问（例如，**开始** > **所有程序**
    > **附件** > **Windows PowerShell**）。
- en: '![Figure 1.15 – Creating a database ](img/Figure_1.15_B17841.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 创建数据库](img/Figure_1.15_B17841.jpg)'
- en: Figure 1.15 – Creating a database
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 创建数据库
- en: 'If you are using a Windows machine, you may use any terminal application of
    your choice (Command Prompt, PowerShell, and so on), or you can use MySQL Workbench,
    as shown in the following screenshot, which we installed in the previous section:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 机器，你可以使用任何你选择的终端应用程序（命令提示符、PowerShell 等），或者你可以使用 MySQL Workbench，如下面的截图所示，我们在上一节中已经安装了它：
- en: '![Figure 1.16 – MySQL Workbench: Creating a database ](img/Figure_1.16_B17841.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – MySQL Workbench：创建数据库](img/Figure_1.16_B17841.jpg)'
- en: 'Figure 1.16 – MySQL Workbench: Creating a database'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – MySQL Workbench：创建数据库
- en: Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To execute a query using MySQL Workbench, there is a *thunderbolt* icon within
    the query’s toolbar (the icon is usually next to the *save* icon). Your query’s
    results will appear at the bottom of your screen in the **Output** section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 MySQL Workbench 执行查询，查询工具栏中有一个 *闪电* 图标（图标通常在 *保存* 图标旁边）。你的查询结果将出现在屏幕底部的
    **输出** 部分。
- en: Installing Node.js
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: 'At the time of writing this book, the **long-term support** (**LTS**) version
    of Node.js is 16\. Throughout this book, we will be using this version of Node.js,
    but the code base should still execute without issues using other releases. All
    of the corresponding operating system installations of Node.js can be found here:
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Node.js的**长期支持**（**LTS**）版本是16。在本书中，我们将使用这个版本的Node.js，但代码库应该仍然可以使用其他版本无问题执行。所有相应的操作系统安装的Node.js都可以在这里找到：[https://nodejs.org/en/download/](https://nodejs.org/en/download/)。
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If the LTS version of Node.js is no longer version 16 and you want to use the
    same version as this book, you can download previous Node.js versions here: [https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Node.js的长期支持（LTS）版本不再是16，而您想使用本书中相同的版本，您可以从这里下载以前的Node.js版本：[https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/)。
- en: For managing multiple Node.js versions on one machine, there is an application
    called **Node Version Manager** (**NVM**) that can handle and maintain several
    versions of Node.js on the same machine. For more information, you can visit their
    repository at [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在一台机器上管理多个Node.js版本，有一个名为**Node版本管理器**（**NVM**）的应用程序可以处理和维护同一台机器上的多个Node.js版本。有关更多信息，您可以访问他们的仓库：[https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)。
- en: Windows
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: 'After we are done downloading and opening the Node.js Windows installer, we
    will be prompted with the following screen:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载并打开Node.js Windows安装程序后，我们将看到一个如下所示的屏幕提示：
- en: '![Figure 1.17 – Windows Node.js installer: Destination Folder ](img/Figure_1.17_B17841.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图1.17 – Windows Node.js安装程序：目标文件夹](img/Figure_1.17_B17841.jpg)'
- en: 'Figure 1.17 – Windows Node.js installer: Destination Folder'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17 – Windows Node.js安装程序：目标文件夹
- en: 'Clicking on **Next** will bring us to the **Custom Setup** step of the installation.
    Ensure that you are installing/configuring the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**将带我们进入安装的**自定义设置**步骤。请确保您正在安装/配置以下内容：
- en: '**Node.js runtime**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js运行时**'
- en: '**npm package manager**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**npm包管理器**'
- en: '**Add to PATH**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加到PATH**'
- en: 'You can see an overview of this screen here:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处查看此屏幕的概述：
- en: '![Figure 1.18 – Windows Node.js installer: Custom Setup ](img/Figure_1.18_B17841.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图1.18 – Windows Node.js安装程序：自定义设置](img/Figure_1.18_B17841.jpg)'
- en: 'Figure 1.18 – Windows Node.js installer: Custom Setup'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18 – Windows Node.js安装程序：自定义设置
- en: 'After the **Custom Setup** step, we will be brought to a **Tools for Native
    Modules** section. By default, the checkbox for installing the necessary tools
    is unchecked. For development purposes, we will want to make sure that the automatic
    installation option is checked, as depicted in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成**自定义设置**步骤后，我们将进入**原生模块工具**部分。默认情况下，安装必要工具的复选框未勾选。为了开发目的，我们希望确保自动安装选项已勾选，如下一截图所示：
- en: '![Figure 1.19 – Windows Node.js installer: Tools for Native Modules ](img/Figure_1.19_B17841.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图1.19 – Windows Node.js安装程序：原生模块工具](img/Figure_1.19_B17841.jpg)'
- en: 'Figure 1.19 – Windows Node.js installer: Tools for Native Modules'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19 – Windows Node.js安装程序：原生模块工具
- en: Selecting the automatic tool installation will prompt a PowerShell window to
    appear, as illustrated in the next screenshot, showing you the status of installation
    progress for Chocolatey, .NET packages, Python dependencies, and so on.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 选择自动工具安装将弹出一个PowerShell窗口，如下一张截图所示，显示Chocolatey、.NET包、Python依赖项等的安装进度。
- en: '![Figure 1.20 – Windows Node.js installation: additional tools ](img/Figure_1.20_B17841.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图1.20 – Windows Node.js安装：附加工具](img/Figure_1.20_B17841.jpg)'
- en: 'Figure 1.20 – Windows Node.js installation: additional tools'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20 – Windows Node.js安装：附加工具
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Chocolatey is a package manager for Microsoft’s Windows operating system. If
    you are familiar with the macOS environment, this would be similar to Homebrew
    or Apt on a Debian Linux distribution. For more information on Chocolatey, please
    refer to the following link: [https://chocolatey.org/](https://chocolatey.org/).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey是Microsoft Windows操作系统的包管理器。如果您熟悉macOS环境，这类似于Debian Linux发行版上的Homebrew或Apt。有关Chocolatey的更多信息，请参阅以下链接：[https://chocolatey.org/](https://chocolatey.org/)。
- en: macOS
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'You can install Node.js for macOS via its package image, which is located at
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/), or you can
    install it with Homebrew by running the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过其包镜像安装macOS上的Node.js，该镜像位于[https://nodejs.org/en/download/](https://nodejs.org/en/download/)，或者您可以通过运行以下命令使用Homebrew安装它：
- en: '[PRE9]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To confirm that your machine is using the correct “node” binary, we can always
    check the version by running the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认您的机器正在使用正确的“node”二进制文件，我们可以始终通过运行以下命令来检查版本：
- en: '[PRE10]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Linux
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: 'For Ubuntu/Debian Linux distributions, we can use a specific repository to
    install Node.js 14, as illustrated in the following code snippet:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu/Debian Linux发行版，我们可以使用特定的仓库来安装Node.js 14，如下面的代码片段所示：
- en: '[PRE11]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After the repository has been added, we can install Node.js and check the version,
    like so:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了仓库之后，我们可以安装Node.js并检查版本，如下所示：
- en: '[PRE12]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So far, we have finished installing MySQL as our DBMS, applicable package managers,
    and the Node.js runtime library; we can now begin to scaffold our project and
    install the necessary Node.js packages for Sequelize and Express.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了MySQL作为我们的数据库管理系统（DBMS）、适用的包管理器和Node.js运行时库的安装；现在我们可以开始搭建我们的项目，并安装Sequelize和Express所需的Node.js包。
- en: Configuring Sequelize within an Express application
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Express应用程序中配置Sequelize
- en: 'After we have installed our development tools and database, we can begin installing
    and configuring our application with Sequelize and **Express**. Express is a minimal
    web framework for Node.js runtime applications. Our Node.js application will use
    Sequelize to correspond with the database, and Express will relay those query
    results to the browser. More information on Express, along with a complete reference,
    can be found here: [https://expressjs.com](https://expressjs.com).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装了我们的开发工具和数据库之后，我们可以开始使用Sequelize和**Express**安装和配置我们的应用程序。Express是一个针对Node.js运行时应用程序的最小化网络框架。我们的Node.js应用程序将使用Sequelize与数据库进行通信，Express将把查询结果传递到浏览器。有关Express的更多信息以及完整的参考，请参阅此处：[https://expressjs.com](https://expressjs.com)。
- en: 'Within Command Prompt, PowerShell, or the terminal, enter the following commands
    for initializing our project:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符、PowerShell或终端中，输入以下命令以初始化我们的项目：
- en: '[PRE13]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will create a directory called `airline`; then, we will change our working
    directory to the `airline` folder, and we will run an initialization script from
    the `npm` command will create a `package.json` file that contains a bare configuration
    for npm to use on this project. After that, we will need to install the minimum
    required Node.js modules for our application, as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`airline`的目录；然后，我们将工作目录更改为`airline`文件夹，并从`npm`命令运行初始化脚本将创建一个`package.json`文件，该文件包含npm在此项目上使用的裸配置。之后，我们需要安装我们应用程序所需的最小Node.js模块，如下所示：
- en: '[PRE14]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is an online resource that you may refer to for a complete list of options
    for npm:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个在线资源，您可以参考它以获取npm的完整选项列表：
- en: '[https://docs.npmjs.com/cli/v7/commands](https://docs.npmjs.com/cli/v7/commands)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.npmjs.com/cli/v7/commands](https://docs.npmjs.com/cli/v7/commands)'
- en: 'Sequelize has a companion executable to help us initialize our project, manage
    updates to our schema, and handle database migrations. We can install it as a
    global (`--location=global`) binary within our userspace by entering the following
    command in our terminal:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize有一个伴随的可执行文件，可以帮助我们初始化项目、管理模式更新和处理数据库迁移。我们可以在我们的用户空间中将其作为全局（`--location=global`）二进制文件安装，通过在终端中输入以下命令：
- en: '[PRE15]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For a full list of commands available to you, the CLI has documentation built
    in that can be exposed using the `-h` or `--help` flags, as illustrated in the
    following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可用的完整命令列表，CLI内置了文档，可以使用`-h`或`--help`标志来暴露，如下面的截图所示：
- en: '![Figure 1.21 – Sequelize CLI installation and help guide ](img/Figure_1.21_B17841.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图1.21 – Sequelize CLI安装和帮助指南](img/Figure_1.21_B17841.jpg)'
- en: Figure 1.21 – Sequelize CLI installation and help guide
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21 – Sequelize CLI安装和帮助指南
- en: 'The next step is to initialize a generic template that Sequelize provides for
    us from the CLI. This will generate several directories for configuration, migration,
    seed, and model files. Here’s the code to do this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是初始化Sequelize为我们提供的通用模板。这将生成用于配置、迁移、种子和模型文件的几个目录。以下是执行此操作的代码：
- en: '[PRE16]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following list offers a brief explanation of the directories created by
    the CLI in our project’s directory:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表简要说明了CLI在我们项目目录中创建的目录：
- en: '`config`: A directory that contains a database connection configuration file
    in `sequelize-cli` tool uses this configuration file to migrate schema and data
    files, but these configuration settings could also be used for our Node.js application
    as well.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：一个包含数据库连接配置文件的目录，`sequelize-cli` 工具使用此配置文件来迁移模式和数据文件，但这些配置设置也可以用于我们的
    Node.js 应用程序。'
- en: '`migrations`: A directory containing Node.js files with instructions for Sequelize
    on how to scaffold your database’s schema and structure.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`migrations`：一个包含 Node.js 文件的目录，其中包含 Sequelize 的指令，用于构建数据库的模式和结构。'
- en: '`models`: A collection of Node.js files with Sequelize schema definitions.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models`：包含 Sequelize 模式定义的 Node.js 文件集合。'
- en: '`seeders`: Similar to the `migrations` directory but instead of defining our
    database’s schema, we will define our database’s data.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seeders`：类似于 `migrations` 目录，但不是定义我们的数据库模式，而是定义我们的数据库数据。'
- en: 'Now that we have the initial foundation of our application, we can edit our
    Sequelize configuration file located in `config/config.json`. Depending on which
    installation instructions you followed, the username and password values may be
    different than the book’s code base. The code is illustrated in the following
    snippet:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了应用程序的初始基础，我们可以编辑位于 `config/config.json` 中的 Sequelize 配置文件。根据您遵循的安装说明，用户名和密码值可能与本书的代码库不同。代码如下所示：
- en: '[PRE17]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you do not wish to keep usernames and passwords in a file (which is a good
    idea for production environments or version control repositories), there is an
    alternative form for the configuration file that can accept an environment key
    with a connection `mysql://root:password@127.0.0.1:3306/airline`), as illustrated
    in the following code snippet:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想将用户名和密码保存在文件中（这对于生产环境或版本控制仓库来说是个好主意），配置文件有另一种形式，可以接受一个带有连接 `mysql://root:password@127.0.0.1:3306/airline`
    的环境键，如下代码片段所示：
- en: '[PRE18]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we wanted to use the `development` configuration, our Node.js application
    would know to look for the connection parameters/URI from an environment variable
    called `DB_DEV_ENV` (you may use the same environment variable for any stage).
    For more options and configuration settings for the Sequelize CLI, refer to this
    resource: [https://github.com/sequelize/cli/blob/master/docs/README.md](https://github.com/sequelize/cli/blob/master/docs/README.md).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用 `development` 配置，我们的 Node.js 应用程序将知道从名为 `DB_DEV_ENV` 的环境变量中查找连接参数/URI（您可以使用相同的环境变量用于任何阶段）。有关
    Sequelize CLI 的更多选项和配置设置，请参阅此资源：[https://github.com/sequelize/cli/blob/master/docs/README.md](https://github.com/sequelize/cli/blob/master/docs/README.md)。
- en: Note
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can toggle between which environment you would like your application to
    be in by setting a `NODE_ENV` environment variable. The default value is `development`
    but if we wanted to use our `production` environment, we would set the environment
    like so: `NODE_ENV=production`.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过设置 `NODE_ENV` 环境变量在您希望应用程序所处的环境之间切换。默认值是 `development`，但如果我们想使用我们的 `production`
    环境，我们可以这样设置环境：`NODE_ENV=production`。
- en: Connecting Sequelize with Express
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Sequelize 与 Express 连接
- en: 'We can now begin building our Node.js application by creating an `index.js`
    file within the project’s directory and opening the file in our IDE of choice.
    Let us begin by typing in the following code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始构建我们的 Node.js 应用程序，通过在项目目录中创建一个 `index.js` 文件并在我们选择的 IDE 中打开该文件。让我们先输入以下代码：
- en: '[PRE19]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We begin by declaring our Express/web application variables (`express` and `app`)
    with the first two lines of the code. The next line is shorthand for invoking
    the `./models/index.js` file that was created by the Sequelize CLI from earlier
    (we will go into details of that file in the next chapter). The following line
    runs the Sequelize `sync()` command, which will synchronize your model definitions
    with a database by creating the necessary tables, indices, and so on. It will
    also establish associations/relations, execute sync-related hooks/events, and
    so on.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过代码的前两行声明我们的 Express/web 应用程序变量（`express` 和 `app`）。下一行是调用之前由 Sequelize
    CLI 创建的 `./models/index.js` 文件的快捷方式（我们将在下一章详细介绍该文件）。下一行运行 Sequelize 的 `sync()`
    命令，该命令将通过创建必要的表、索引等来同步您的模型定义与数据库。它还将建立关联/关系，执行与同步相关的钩子/事件等。
- en: 'The `sync()` command offers several options that are encapsulated within an
    object as the first parameter, as outlined here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync()` 命令提供了几个选项，这些选项作为第一个参数封装在一个对象中，如下所示：'
- en: '`force`: A Boolean value that will drop your database’s tables before re-creating
    them.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force`：一个布尔值，将在重新创建之前删除你的数据库表。'
- en: '`match`: A `force` option within a production environment.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match`：生产环境中的一个 `force` 选项。'
- en: '`logging`: A Boolean or function value. `true` (the default) will use `console.log`
    when executing queries for logging. `false` will disable entirely, and a function
    can be used to send logs and context to another adapter. This book will go into
    detail about this option in a later chapter.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging`：一个布尔值或函数值。`true`（默认值）在执行查询时使用 `console.log` 进行日志记录。`false` 将完全禁用，并且可以使用函数将日志和上下文发送到另一个适配器。本书将在后面的章节中详细介绍此选项。'
- en: '`schema`: A string value for defining which database to operate in. Useful
    for when you are using a DBMS such as Postgres, which allows you to separate tables
    by not only a database (which MySQL calls a “schema”) but also by a namespace
    (which Postgres calls “schema”).'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema`：一个字符串值，用于定义要操作的数据库。当使用允许通过数据库（MySQL称为“模式”）以及命名空间（Postgres称为“模式”）来分离表的数据管理系统（如Postgres）时很有用。'
- en: '`searchPath`: A string value to define the default `search_path` for Postgres
    databases only. This option will not pertain to this book’s code base or content.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`searchPath`：一个字符串值，用于定义仅适用于 Postgres 数据库的默认 `search_path`。此选项与本书的代码库或内容无关。'
- en: '`hooks`: A Boolean value (defaults to `true`) to execute several hooks/events
    that are related to sync events (`beforeSync`, `afterSync`, `beforeBulkSync`,
    and `afterBulkSync`). `false` will disable events from executing.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hooks`：一个布尔值（默认为 `true`），用于执行与同步事件相关的多个钩子/事件（`beforeSync`、`afterSync`、`beforeBulkSync`
    和 `afterBulkSync`）。设置为 `false` 将禁用事件的执行。'
- en: '`alter`: An object with the following parameter:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alter`：一个具有以下参数的对象：'
- en: '`drop`: A Boolean value that prevents any `drop` statements from being executed
    when Sequelize needs to run `ALTER` commands within the database.'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop`：一个布尔值，当 Sequelize 需要在数据库中运行 `ALTER` 命令时，防止执行任何 `drop` 语句。'
- en: 'You can define these options like so:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样定义这些选项：
- en: '[PRE20]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is *not* recommended by the Sequelize community to run the `force` option
    as `true` within a production environment. This could have unintentional consequences
    such as deleting vital customer/user information. The `force` option is for when
    you are still prototyping your application and want to start your application
    on a clean slate per iteration.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize 社区不建议在生产环境中将 `force` 选项设置为 `true`。这可能会产生意外的后果，例如删除重要的客户/用户信息。`force`
    选项用于当你还在原型化应用程序时，并希望每次迭代都从零开始启动应用程序。
- en: 'The next command, `app.get(...)`, instructs the Express framework to route
    the `"/"` (root) path of our web application to the scoped function (in this case,
    we are sending text back to the browser, as shown in *Figure 1.22*). After that,
    we start the Express server by calling `app.listen(...)`, which will tell our
    application to listen for `3000`, which can be accessed in our browser via `http://localhost:3000`
    or `http://127.0.0.1:3000`, depending on your network interface settings. For
    starting our application, we can run the following command within our terminal/PowerShell:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令，`app.get(...)`，指示 Express 框架将我们的 web 应用程序的根路径 `"/"` 路由到作用域函数（在这种情况下，我们向浏览器发送文本，如
    *图 1.22* 所示）。之后，我们通过调用 `app.listen(...)` 启动 Express 服务器，这将告诉我们的应用程序监听 `3000` 端口，可以通过
    `http://localhost:3000` 或 `http://127.0.0.1:3000` 访问，具体取决于你的网络接口设置。要启动我们的应用程序，我们可以在终端/PowerShell
    中运行以下命令：
- en: '[PRE21]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should see text displayed on your screen indicating the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在屏幕上看到以下显示的文本：
- en: Express has started
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express 已启动
- en: A SQL query was executed
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行了一个 SQL 查询
- en: The database has been synced
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库已同步
- en: Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Sequelize will automatically execute a `SELECT 1+1 AS result` query as a method
    for checking on the database connection’s health. Not all DBMSs offer a way of
    sending a `ping` packet to check whether a connection is successful or not.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize 将自动执行一个 `SELECT 1+1 AS result` 查询，作为检查数据库连接健康状态的方法。并非所有数据库管理系统（DBMS）都提供发送
    `ping` 数据包来检查连接是否成功的方法。
- en: 'Now, when you open your browser and visit the previously mentioned URL, you
    should see a page similar to what is shown here:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你打开浏览器并访问之前提到的 URL 时，你应该看到与这里显示的页面类似的页面：
- en: '![Figure 1.22 – Welcome page ](img/Figure_1.22_B17841.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22 – 欢迎页面](img/Figure_1.22_B17841.jpg)'
- en: Figure 1.22 – Welcome page
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22 – 欢迎页面
- en: 'Every time we make a change to our application, we will need to terminate our
    current process (*Ctrl* + *C*) within the terminal. This will send a `SIGINT`
    signal to the process, which will send an interrupt signal to the process in order
    to begin cleaning up and then exit/stop. To avoid having to restart our process
    manually after every change, we can install a separate process to help facilitate
    this for us called Nodemon (more information can be found here: [https://nodemon.io/](https://nodemon.io/)).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们对应用程序进行更改时，我们都需要在终端中终止当前进程（*Ctrl* + *C*）。这将向进程发送`SIGINT`信号，该信号将向进程发送中断信号，以便开始清理然后退出/停止。为了避免每次更改后都需要手动重新启动我们的进程，我们可以安装一个名为Nodemon的独立进程来帮助我们完成这项工作（更多信息请见：[https://nodemon.io/](https://nodemon.io/))。
- en: 'Nodemon may be installed as a global binary by running the following command:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令将Nodemon安装为全局二进制文件：
- en: '[PRE22]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can confirm if the installation was successful by typing in the following:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入以下内容来确认安装是否成功：
- en: '[PRE23]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This should start our Node.js application while simultaneously watching for
    changed files within our project’s directory. Once we have made a modification
    to the project, we should see Nodemon automatically restarting our process, as
    illustrated in the following screenshot:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会同时启动我们的Node.js应用程序并监视我们项目目录中的更改文件。一旦我们对项目进行了修改，我们应该看到Nodemon自动重启我们的进程，如下面的截图所示：
- en: '![Figure 1.23 – Nodemon automatically restarting the application ](img/Figure_1.23_B17841.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图1.23 – Nodemon自动重启应用程序](img/Figure_1.23_B17841.jpg)'
- en: Figure 1.23 – Nodemon automatically restarting the application
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23 – Nodemon自动重启应用程序
- en: 'The last step for this chapter is to make a few adjustments to our `package.json`
    file, as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一步是对我们的`package.json`文件进行一些调整，如下所示：
- en: 'Add `"private": true` under the `"name": "airline,"` line. This adjustment
    will prevent us (or anyone else on the team) from publishing our project to the
    public npm registry.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在`"name": "airline,"`行下添加`"private": true`。这个调整将防止我们（或团队中的任何人）将我们的项目发布到公共npm注册表。'
- en: 'Look for the `scripts` object and replace whatever content is there with `"start":
    "nodemon index.js"`. This will allow us to start our application by running the
    following command:'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '查找`scripts`对象，并将其中内容替换为`"start": "nodemon index.js"`。这样我们就可以通过运行以下命令来启动我们的应用程序：'
- en: '[PRE24]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The final `package.json` file should look similar to this:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`package.json`文件应类似于以下内容：
- en: '[PRE25]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the benefits of using an ORM and what Sequelize
    has to offer. We learned how to set up our development/local environment to run
    a DBMS (MySQL) and the Node.js runtime. We then scaffolded a project using npm
    and the Sequelize CLI and integrated the Sequelize library with the Express web
    framework.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用ORM的好处以及Sequelize能提供什么。我们学习了如何设置我们的开发/本地环境以运行DBMS（MySQL）和Node.js运行时。然后我们使用npm和Sequelize
    CLI构建了一个项目，并将Sequelize库与Express网络框架集成。
- en: In the next chapter, we will begin inserting data into our database and define
    Sequelize models.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始向我们的数据库中插入数据并定义Sequelize模型。
