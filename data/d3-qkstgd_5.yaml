- en: Creating a Bar Graph Using a Data File
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据文件创建条形图
- en: '**AJAX** stands for **Asynchronous JavaScript And XML**. Basically, what we
    can do is use JavaScript to load data into the page after it has loaded. This
    is a great way to generate a graph based on user interaction. In this chapter,
    we''ll use AJAX to build a bar graph. By the end of the chapter, you should be
    able to do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**AJAX** 代表 **Asynchronous JavaScript And XML**。基本上，我们可以使用 JavaScript 在页面加载后加载数据。这是一种根据用户交互生成图表的绝佳方式。在本章中，我们将使用
    AJAX 来构建条形图。到本章结束时，你应该能够做到以下事情：'
- en: Use AJAX to make an asynchronous call to an external data file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AJAX 对外部数据文件进行异步调用
- en: Create a bar graph
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建条形图
- en: 'The complete code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完整的代码可以在以下位置找到：[https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05)。
- en: Setting up our application
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的应用程序
- en: 'Let''s create our standard setup in `index.html`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `index.html` 中创建我们的标准设置：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now add the following code to `app.js`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到 `app.js` 中：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now add the following code to `app.css`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到 `app.css` 中：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is what we should have:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是我们应有的结果：
- en: '![](img/7dc454cf-35e3-4cc9-bda7-9bc5192a728e.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7dc454cf-35e3-4cc9-bda7-9bc5192a728e.png)'
- en: Creating an external file to hold our data
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个外部文件来保存我们的数据
- en: 'Let''s create a `data.json` file, which will hold fake data regarding how often
    job posts require certain skills. This should be the contents of the file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 `data.json` 文件，它将保存有关工作帖子需要某些技能频率的虚假数据。该文件的内容应该是这样的：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Making an AJAX request
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发起 AJAX 请求
- en: Now we're going to use JavaScript to make a request for some data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用 JavaScript 来请求一些数据。
- en: Writing the basic code
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写基本代码
- en: 'D3 has lots of different methods for making AJAX requests to files of different
    data types:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: D3 有许多不同的方法用于向不同数据类型的文件发起 AJAX 请求：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since our data is in JSON format, we''ll use the first kind of call. Add the
    following to the end of `app.js`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的数据是 JSON 格式，我们将使用第一种调用方式。将以下内容添加到 `app.js` 的末尾：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Handling file access
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件访问
- en: 'If you opened the `index.html` file in Chrome directly, instead of serving
    it on a web server, you''ll notice we''ve encountered an error. Check your developer
    console:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接在 Chrome 中打开了 `index.html` 文件，而不是通过 web 服务器提供服务，你会注意到我们遇到了一个错误。检查你的开发者控制台：
- en: '![](img/97d9f57d-79f0-4466-a747-686d85c3dbbd.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/97d9f57d-79f0-4466-a747-686d85c3dbbd.png)'
- en: 'The issue here is that web browsers are not supposed to make AJAX requests
    to files on your computer. If they could, this would be a huge security flaw because
    any website could access files on your computer. Let''s create a basic file server.
    To do this, you''ll need to `installNode.js` ([https://nodejs.org/en/](https://nodejs.org/en/)).
    Once that''s done, open your computer''s Terminal:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，网络浏览器不应该向你的电脑上的文件发起 AJAX 请求。如果它们可以这样做，这将是一个巨大的安全漏洞，因为任何网站都可以访问你的电脑上的文件。让我们创建一个基本的文件服务器。为此，你需要安装
    `Node.js` ([https://nodejs.org/en/](https://nodejs.org/en/))。一旦完成，打开你的电脑的终端：
- en: 'For Mac: command + *Space*, and then type `terminal` and hit Ent*er*.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Mac：按住 command + *Space*，然后输入 `terminal` 并按 *Enter*。
- en: 'For Windows: click Start, type `cmd`,and hit *Enter*.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows：点击开始，输入 `cmd` 并按 *Enter*。
- en: 'Next, type the following into your Terminal:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的终端中输入以下内容：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you get error messages, try this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到错误消息，尝试这样做：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This installs a basic `http-server` that was built using `Node.js`. To run
    it, use the Terminal to navigate to the directory where you saved your code (type
    `cd` to change folders in the Terminal) and run the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这安装了一个使用 `Node.js` 构建的 `http-server`。要运行它，使用终端导航到保存代码的目录（在终端中输入 `cd` 以更改文件夹）并运行以下命令：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see something such as this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的内容：
- en: '![](img/313081e8-4b43-4e47-8f9c-728a3748404d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/313081e8-4b43-4e47-8f9c-728a3748404d.png)'
- en: 'Now go to `http://localhost:8080/` in your browser. You should now see that
    your AJAX call is succeeding (if you have issues, hold down shift and hit the
    refresh button to force the browser to reload all files that may have been cached):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请在浏览器中访问 `http://localhost:8080/`。你应该现在能看到你的 AJAX 调用正在成功执行（如果你遇到问题，按住 shift
    键并点击刷新按钮，强制浏览器重新加载可能已被缓存的全部文件）：
- en: '![](img/84654d3a-5564-42b0-bf0e-ba156a9be601.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/84654d3a-5564-42b0-bf0e-ba156a9be601.png)'
- en: Using AJAX data to create SVG elements
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AJAX 数据创建 SVG 元素
- en: 'Now that our AJAX calls are succeeding, let''s start building our app. From
    here on out, it''s all basic JavaScript and D3\. Note that everything we''ll write
    for the rest of this lesson is done within the success callback of our AJAX request.
    In production, we might want to move this code elsewhere, but for now this is
    easier for learning. Let''s create some rectangles for our bar graph. The bottom
    of `app.js` (the callback to the AJAX request) should now look as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们AJAX调用成功，让我们开始构建我们的应用。从现在开始，我们将使用基本的JavaScript和D3。请注意，本节课剩余部分我们将要在AJAX请求的成功回调中编写代码。在生产环境中，我们可能希望将此代码移至其他位置，但为了学习，这样做更简单。让我们为条形图创建一些矩形。现在`app.js`（AJAX请求的回调）的底部应该如下所示：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our **Elements** tab in our dev tools should look something like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发工具中的**元素**标签页应该看起来像这样：
- en: '![](img/d312da58-cc1a-4bd8-ad7a-562469936047.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d312da58-cc1a-4bd8-ad7a-562469936047.png)'
- en: Adjusting the height and the width of the bars
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整条形的高度和宽度
- en: 'Let''s create a scale that maps the `count` property of each element in `data`
    to a visual height for the corresponding bar. We''ll use a linear scale. Remember
    to map `HEIGHT` of the graph to a very low data point and the top of the graph
    (`0` in the range) map to a very high data value. Add this code to the bottom
    of the AJAX callback:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个比例尺，将`data`中每个元素的`count`属性映射到相应条形的视觉高度。我们将使用线性比例尺。记住将图表的`HEIGHT`映射到非常低的数据点，并将图表的顶部（范围中的`0`）映射到非常高的数据值。将此代码添加到AJAX回调的底部：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We could use `d3.extent`, but we''re going to need the individual min values
    later on. Immediately after the previous code, let''s tell D3 to adjust the height
    of the rectangles using the `yScale`. Remember that the *y* axis is flipped. A
    low data value produces a high range value. But even though the range is high,
    the bar itself should be small. We''ll need to re-flip the values just for height
    so that a low data value produces a small bar and a high data value produces a
    large bar. To do this, let''s subtract whatever the range point is from `HEIGHT`
    of the graph. This way, if `yScale(datum.count)` produces, say, 500, the height
    of the bar will be 100\. We can use `yScale(datum.count)` normally when adjusting
    the position of the bars later. Add the following to the bottom of the AJAX callback:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`d3.extent`，但稍后我们需要单独的最小值。在上一段代码之后，让D3使用`yScale`调整矩形的高度。记住，*y*轴是反转的。低数据值产生高范围值。尽管范围很高，条形本身应该很小。我们需要仅对高度重新翻转值，以便低数据值产生小的条形，高数据值产生大的条形。为此，让我们从图表的`HEIGHT`中减去范围点。这样，如果`yScale(datum.count)`产生，比如说，500，条形的高度将是100。我们可以在调整条形位置时正常使用`yScale(datum.count)`。将以下内容添加到AJAX回调的底部：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now our rectangles have height, but no width:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的矩形有了高度，但没有宽度：
- en: '![](img/da5dc03c-ca41-4b9a-8a39-1ce0511855c8.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da5dc03c-ca41-4b9a-8a39-1ce0511855c8.png)'
- en: 'At the bottom of `app.css`, let''s give all our bars the same width:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.css`的底部，让我们给所有条形设置相同的宽度：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s what we should see in Chrome now:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该在Chrome中看到以下内容：
- en: '![](img/481f4a84-0d7f-4699-b9a3-51ade773989b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/481f4a84-0d7f-4699-b9a3-51ade773989b.png)'
- en: Adjusting the horizontal and the vertical placement of the bars
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整条形的水平和垂直位置
- en: 'Our bars all overlap one another at the moment. Let''s space them out by mapping
    *x*''s position to index in the data array. Add the following to the bottom of
    the AJAX callback:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的所有条形目前都相互重叠。让我们通过将*x*的位置映射到数据数组的索引来使它们分散。在AJAX回调的底部添加以下内容：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This maps indices in the array to horizontal range points. Chrome should look
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将数组中的索引映射到水平范围点。Chrome应该如下所示：
- en: '![](img/36de3793-9513-4a33-bbdb-630de03aae7e.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36de3793-9513-4a33-bbdb-630de03aae7e.png)'
- en: 'Now let''s move the bars so they grow from the bottom, as opposed to hanging
    from the top. Add the following to the end of the AJAX callback:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将条形移动，使它们从底部生长，而不是从顶部悬挂。将以下内容添加到AJAX回调的末尾：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using our `yScale` function, a high data value produces a low range value, which
    doesn't push a large bar down much. A low data point produces a high range value,
    which pushes a small bar down a lot.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的`yScale`函数，高数据值产生低范围值，这不会使大条形下降很多。低数据点产生高范围值，这会使小条形下降很多。
- en: 'Our last few bars don''t have any height, because we''ve mapped the minimum
    count property of our data to a visual range value of 0 in `yScale`. Let''s adjust
    the last line of this code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后几条形没有任何高度，因为我们已经将数据的最小计数属性映射到`yScale`中的视觉范围值0。让我们调整此代码的最后一行：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will change it to this code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将将其更改为以下代码：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now the domain minimum is one less than what''s actually in our data set. Domains
    with the original minimum are treated as higher values than what''s expected for
    the minimum of the graph. We get this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的域最小值比我们数据集中实际存在的值少一个。具有原始最小值的域被视为高于图形最小值预期的值。我们得到以下结果：
- en: '![](img/34cf9294-2787-496e-a9af-354d2f402d41.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34cf9294-2787-496e-a9af-354d2f402d41.png)'
- en: Making the width of the bars dynamic
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使条形宽度动态化
- en: 'Currently, our bars have a fixed width. No matter how many elements we have,
    they have a 15 px width. If we had more data elements, the bars could overlap.
    Let''s change this. Since each `rect` will be the same width, no matter what the
    data is, we can just assign `width` a computed value. Add the following to the
    end of the AJAX callback:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的条形宽度是固定的。无论我们有多少个元素，它们的宽度都是15 px。如果我们有更多的数据元素，条形可能会重叠。让我们改变这一点。由于每个`rect`的宽度都相同，无论数据如何，我们只需将`width`分配一个计算值即可。将以下代码添加到AJAX回调的末尾：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let''s adjust our `rect` CSS so our bars are more visible:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们调整我们的`rect` CSS，使我们的条形更明显：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be shown as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/fcf980d3-2e3e-486c-970f-3857c60f4bff.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcf980d3-2e3e-486c-970f-3857c60f4bff.png)'
- en: Changing the color of the bar based on data
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据数据更改条形颜色
- en: 'Right now, the bars are black. A linear scale will interpolate between colors,
    just like a regular number. Add the following to the end of the AJAX callback:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，条形是黑色的。线性比例尺将在颜色之间进行插值，就像常规数字一样。将以下代码添加到AJAX回调的末尾：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Notice that we calculate they Domain using `d3.extent` so that the real minimum
    of the data set is used to map `#00cc00`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用`d3.extent`来计算域，以便使用数据集的真实最小值来映射`#00cc00`：
- en: '![](img/df8c385d-d6d3-4b4e-ac5c-f5967e8fbcf9.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df8c385d-d6d3-4b4e-ac5c-f5967e8fbcf9.png)'
- en: Adding axes
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加轴
- en: 'The left axis is the same as shown in [Chapter 4](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml),
    *Making a Basic Scatter Plot Interactive*. Add this code to the bottom of the
    AJAX callback:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 左轴与[第4章](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml)中所示相同，*制作基本散点图交互式*。将以下代码添加到AJAX回调的底部：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To create the bottom axis, we need to be able to map strings to points on a
    domain. We''ll use a band scale for this, which just divides up the range into
    equal parts and maps it to an array of discrete values (values that can''t be
    interpolated, for example, strings). Add this code to the bottom of the AJAX callback:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建底部轴，我们需要能够将字符串映射到域上的点。我们将为此使用一个带状比例尺，它只是将范围分割成相等的部分，并将其映射到一个离散值数组（例如，不能插值的值）。将以下代码添加到AJAX回调的底部：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice we use `data.map()`. This is regular JavaScript that simply loops through
    an array and modifies each element based on the given function. It then returns
    the resulting array, leaving the original array in tact. In the previous example,
    `skillDomain` will be an array containing the various name properties of each
    of the data elements.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用了`data.map()`。这是常规JavaScript，它只是遍历一个数组并根据给定的函数修改每个元素。然后它返回结果数组，同时保持原始数组不变。在上一个例子中，`skillDomain`将是一个包含每个数据元素各种名称属性的数组。
- en: Once we have an array of each of the skills, we use this as the domain and map
    each skill to a point within the range. Remember the point in the range is created
    by dividing up the full range equally based on the number of elements in the domain.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了每个技能的数组，我们就使用它作为域，并将每个技能映射到范围内的一个点。记住，范围中的点是通过根据域中元素的数量将整个范围平均分割来创建的。
- en: 'Now that we have a scale that maps each skill text to a point in the *x* range,
    we can create the bottom axis as before. Add this code to the bottom of the AJAX
    callback:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个将每个技能文本映射到*x*范围内一个点的比例尺，我们可以像以前一样创建底部轴。将以下代码添加到AJAX回调的底部：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We still need to stop the `<svg>` element from clipping the axes. Change the
    CSS for `svg` in `app.css`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要停止`<svg>`元素裁剪轴。更改`app.css`中`svg`的CSS：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following is the result:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为结果：
- en: '![](img/2108ac7d-1a29-4a59-9aa0-614fbd3f03b9.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2108ac7d-1a29-4a59-9aa0-614fbd3f03b9.png)'
- en: 'The bottom axis text is all cluttered, though. Let''s add some CSS to bottom
    of `app.css` to fix this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 底部轴文本非常混乱。让我们在`app.css`的底部添加一些CSS来修复这个问题：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output will be shown as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/39695da5-7beb-4dd5-b2bb-9e4abbf9c456.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39695da5-7beb-4dd5-b2bb-9e4abbf9c456.png)'
- en: 'It''s rotated, but it''s rotated around the center of the element. Let''s add
    a line to what we just wrote, so it rotates around the start of the text:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它是旋转的，但它围绕元素的中心旋转。让我们在刚才写的代码中添加一行，使其围绕文本的起始位置旋转：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output will be shown as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/335c2fa0-84ba-41bc-bce3-25f6f32c5d46.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/335c2fa0-84ba-41bc-bce3-25f6f32c5d46.png)'
- en: 'Let''s move the graph to the right, so we can see the values for the left axis.
    Adjust our `svg` css code so it looks as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将图表移动到右边，这样我们就可以看到左侧轴的值。调整我们的 `svg` CSS 代码，使其看起来如下所示：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use AJAX to make an asynchronous request
    that will populate a bar graph. In [Chapter 6](aacc693a-f51f-4d50-832c-db2cd3af3b7f.xhtml),
    *Animating SVG Elements to Create an Interactive Pie Chart*, we'll create a pie
    chart that animates when you remove sections from it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 AJAX 来发送异步请求，以便填充条形图。在[第6章](aacc693a-f51f-4d50-832c-db2cd3af3b7f.xhtml)，“通过动画
    SVG 元素创建交互式饼图”，我们将创建一个当你从其中移除部分时动画显示的饼图。
