- en: Chapter 6. Level DB and NoSQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Level DB和NoSQL
- en: In this chapter, we will cover two variations of databases that can be used
    with Node.js; one provides a very lightweight and simple set of features, while
    the other gives us more flexibility and a general-purpose set of features. In
    this chapter, we are going to cover LevelDB and MongoDB
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍两种可以与Node.js一起使用的数据库变体；一种提供了非常轻量级和简单的功能集，而另一种则为我们提供了更灵活和通用的功能集。在本章中，我们将介绍LevelDB和MongoDB
- en: Level DB
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Level DB
- en: One of the great things with Node.js is that we use the same language for both
    the front and back end and the same goes for NoSQL databases. The majority of
    them support JSON right off the mark; this is great for anyone using Node.js as
    there is no time spent in making a relational model, turning it into a JSON-like
    structure, passing it to the browser, doing something with it, and reversing the
    process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的一个很棒的地方是我们在前端和后端都使用相同的语言，NoSQL数据库也是如此。它们中的大多数从一开始就支持JSON；这对于使用Node.js的任何人来说都很棒，因为不需要花时间制作关系模型，将其转换为类似JSON的结构，将其传递到浏览器，对其进行操作，然后再反转这个过程。
- en: With a database that supports JSON natively, you can get right down to business
    and play ball.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生支持JSON的数据库，您可以立即开始工作并投入使用。
- en: 'Google has provided us with a simple hook into a NoSQL database that can be
    installed and can be made ready to use with just one command:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Google为我们提供了一个简单的入口到一个可以安装并准备使用的NoSQL数据库，只需一个命令即可：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will see that this will install both `LevelDOWN` and `LevelUP`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到这将安装`LevelDOWN`和`LevelUP`。
- en: '`LevelDOWN` is the low-level binding to `LevelDB` and `LevelUP` is the simple
    wrapper around this.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`LevelDOWN`是`LevelDB`的低级绑定，`LevelUP`是对其的简单封装。'
- en: '`LevelDB` is very simple in terms of setup. Once it is installed, we just create
    an instance of `LevelUP` and pass it where we want our database to be stored:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`LevelDB`在设置方面非常简单。一旦安装完成，我们只需创建一个`LevelUP`实例，并将其传递到我们希望存储数据库的位置：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we have a fast and simple way to store data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种快速简单的存储数据的方法。
- en: 'As `LevelDB` is just a simple key/value store, it defaults to string keys and
    string values. This is useful if that''s all the information you wish to store.
    You can also use it as a simple cache store. It has a very simple API, at this
    stage we are only going to focus on four methods: `put`, `get`, `del`, and `createReadStream`;
    it''s pretty obvious what most of them do:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`LevelDB`只是一个简单的键/值存储，它默认使用字符串键和字符串值。如果这是您希望存储的所有信息，这是很有用的。您还可以将其用作简单的缓存存储。它有一个非常简单的API，此阶段我们只关注四种方法：`put`、`get`、`del`和`createReadStream`；大多数方法的作用都很明显：
- en: '| Method | Used for | Arguments |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用途 | 参数 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| put | inserting pairs | key, value, callback(error) |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| put | 插入键值对 | 键，值，回调函数（错误） |'
- en: '| get | fetching pairs | key, callback(error, value) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| get | 获取键值对 | 键，回调函数（错误，值） |'
- en: '| del | deleting pairs | key, callback(error) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| del | 删除键值对 | 键，回调函数（错误） |'
- en: '| createReadStream | fetching many pairs |   |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| createReadStream | 获取多个键值对 |   |'
- en: 'To insert data once we have created our database, all we need to do is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了数据库，要插入数据，我们只需要做以下操作：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we run the code, we will see that we inserted and retrieved our value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行代码，我们将看到我们插入并检索到了我们的值：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This isn''t our simple JSON structure; however, it''s just a string. To get
    our store to save JSON, all we need to do is to pass the value encoding as an
    option to the database, as shown:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我们简单的JSON结构；但是，它只是一个字符串。要使我们的存储保存JSON，我们只需要将值编码作为选项传递给数据库，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we can store JSON data:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以存储JSON数据：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, a string can be stored as JSON and we can still pass strings as a value
    and also retrieve it as such.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，字符串可以存储为JSON，我们仍然可以将字符串作为值传递，并且也可以检索它。
- en: 'Running this example will show the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例将显示以下内容：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we have the simple methods down and we can now move on to `createReadStream`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经掌握了简单的方法，现在我们可以继续使用`createReadStream`。
- en: 'This function returns an object that can be compared to Node.js built in `ReadableStream`.
    For each key/value pair in our database, it will emit a `data` event; it also
    emits other events, such as `error` and `end`. If `error` doesn''t have an event
    listener, then it will propagate, thereby killing your entire process (or domain),
    as shown:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个对象，可以与Node.js内置的`ReadableStream`进行比较。对于数据库中的每个键/值对，它将发出一个`data`事件；它还会发出其他事件，如`error`和`end`。如果`error`没有事件监听器，那么它将传播，从而终止整个进程（或域），如下所示：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running this example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we put more data in the database we will have multiple `data` events emitted:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数据库中放入更多数据，将会发出多个`data`事件：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: MongoDB
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: As you can see, databases with Node.js can be very simple. If we want something
    a bit more complete we can use another NoSQL database called **MongoDB** – another
    very popular document-based database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，使用Node.js的数据库可以非常简单。如果我们想要更完整的东西，我们可以使用另一个名为**MongoDB**的NoSQL数据库——另一个非常受欢迎的基于文档的数据库。
- en: For this set of examples, you can either use a hosted database using a provider
    such as MongoLab (they provide a free tier for development) or you can set up
    a database locally following the instructions at [http://docs.mongodb.org/manual/installation](http://docs.mongodb.org/manual/installation).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这组示例，您可以使用托管数据库，使用提供者如MongoLab（他们提供免费的开发层级），或者您可以按照[http://docs.mongodb.org/manual/installation](http://docs.mongodb.org/manual/installation)上的说明在本地设置数据库。
- en: We can continue once you have a database to connect to.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有一个要连接的数据库，我们就可以继续。
- en: 'MongoDB has several modules that can be used with Node.js, the most popular
    one is Mongoose; however, we will be using the core MongoDB module:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB有几个可以与Node.js一起使用的模块，最受欢迎的是Mongoose；但是，我们将使用核心的MongoDB模块：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To use our database, we first need to connect to it. We need to provide the
    client with a connection string, a generic URI with the protocol of `mongodb`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的数据库，我们首先需要连接到它。我们需要为客户端提供一个连接字符串，一个带有`mongodb`协议的通用URI。
- en: 'If you have a local mongo database running with no credentials you will use:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个本地的mongo数据库在没有凭据的情况下运行，您将使用：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The default port is `27017`, so you don't need to specify that; however, it
    is included for completeness.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认端口是`27017`，所以你不需要指定它；但是为了完整起见，它已经包含在内。
- en: 'If you are using MongoLab, they will provide you with a connection string;
    it should be in the format of:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用MongoLab，他们会提供给你一个连接字符串；它应该是这种格式：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Connecting to our database is actually pretty simple. All we need to do is
    provide the driver with a connection string and we get back a database:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到我们的数据库实际上非常简单。我们只需要提供驱动程序一个连接字符串，然后我们就可以得到一个数据库：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Each set of data in MongoDB is stored in a collection. Once we have a database
    we can fetch a collection to run the operations on:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB中的每组数据都存储在一个集合中。一旦我们有了数据库，我们就可以获取一个集合来运行操作：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In a collection, we have a few simple methods that hold lots of power, giving
    us a full CRUD "API".
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个集合中，我们有一些简单的方法，拥有很大的力量，为我们提供了一个完整的CRUD“API”。
- en: Each document in MongoDB has an id, which is an instance of `ObjectId`. The
    property they use for this id is `_id`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB中的每个文档都有一个ID，它是`ObjectId`的一个实例。他们用于此ID的属性是`_id`。
- en: 'To save a document we just need to call `save`, it accepts an object or an
    array of objects. A single object in a collection is referred to as a document:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存一个文档，我们只需要调用`save`，它接受一个对象或对象数组。集合中的单个对象称为文档：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we call the `save` function with a document that has an ID then the document
    will be updated rather than inserted:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用带有ID的文档调用`save`函数，那么该文档将被更新而不是插入：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we have documents in our database, we can query for them, as shown:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在数据库中有了文档，我们可以查询它们，如下所示：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If no callback is provided to `find` then it will return a cursor; this allows
    us to use methods such as `limit`, `sort`, and `toArray`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`find`没有提供回调函数，它将返回一个游标；这使我们能够使用`limit`、`sort`和`toArray`等方法。
- en: 'You can pass a query to `find` to limit what is returned. In order to find
    an object by its ID we need to use something, such as:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向`find`传递一个查询来限制返回的内容。为了通过其ID查找对象，我们需要使用类似于以下的东西：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can also filter it by any other property you might use:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过任何其他可能使用的属性进行过滤：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you have used SQL before, you must have noticed the lack of operators, such
    as `OR`, `AND`, or `NOT`. However, you don't need to worry because mongo provides
    many equivalents.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过SQL，你一定会注意到缺少操作符，比如`OR`、`AND`或`NOT`。但是，你不需要担心，因为mongo提供了许多等价物。
- en: 'You can see a complete list here: [http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到完整的列表：[http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/)。
- en: All operators are prefixed with the dollar sign, for example `$and`, `$or`,
    `$gt`, and `$lt`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作符都以美元符号开头，例如`$and`、`$or`、`$gt`和`$lt`。
- en: You can see the specific syntax to use these by looking at the documentation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看文档以查看使用这些的具体语法。
- en: 'To use an `$or` condition, you need to include it as if it is a property:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`$or`条件，你需要将其包含在其中，就好像它是一个属性一样：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using a database such as MongoDB gives us more power to retrieve our data and
    create a more feature full software.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如MongoDB这样的数据库使我们能够更有力地检索数据并创建更具功能的软件。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now we have places where we can store our data. On one end we have a simple
    key/value store that provides us with a super-convenient way to store data and
    on the other end we have a feature full database that provides us with a full
    set of query operators.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有可以存储数据的地方。一方面，我们有一个简单的键/值存储，为我们提供了一种非常方便的存储数据的方式；另一方面，我们有一个功能丰富的数据库，为我们提供了一整套查询操作符。
- en: Both these databases will help us in the next chapters as we move closer to
    creating our full stack application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个数据库将在接下来的章节中帮助我们，因为我们将更接近创建我们的全栈应用程序。
- en: In the next chapter we will cover `Socket.IO`, a real-time communication framework
    built on top of WebSockets.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍`Socket.IO`，这是一个建立在WebSockets之上的实时通信框架。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他使用都需要版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
