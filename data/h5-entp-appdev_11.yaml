- en: 'Chapter 11. Finishing Up: Debugging Your App'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 完成工作：调试您的应用
- en: The debugging process can require a considerable amount of time during the development
    process. There may be unforeseen behavior, edge cases, and even typos that need
    to be found and resolved. For that reason, it is necessary to optimize as much
    as possible and the most important first step is in selecting the right tools.
    Any development process has to involve testing and debugging; even if your application
    is working perfectly as expected you should execute test cases and analyze performance
    to ensure its integrity as you make it evolve and introduce new features. This
    chapter covers a series of tools for debugging and analyzing performance in your
    enterprise applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程在开发过程中可能需要相当多的时间。可能会有不可预见的行为、边缘情况，甚至需要找到并解决的错误。因此，尽可能优化是很重要的，而最重要的第一步是选择正确的工具。任何开发过程都必须涉及测试和调试；即使您的应用程序按预期完美运行，您也应该执行测试用例并分析性能，以确保在您使其发展和引入新功能时其完整性。本章涵盖了在企业应用程序中进行调试和分析性能的一系列工具。
- en: 'This chapter will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: What to look for
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要寻找什么
- en: Which tools to use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用哪些工具
- en: Playing with HTML and CSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转HTML和CSS
- en: Step by step with JavaScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript逐步进行
- en: Mobile debugging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动调试
- en: Web debugging proxies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web调试代理
- en: What to look for
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要寻找什么
- en: 'The debugging process on the client focuses on elements interpreted by a browser.
    Unless we are using an external plugin (like the Adobe Flash Player), we need
    to debug:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端调试过程集中在浏览器解释的元素上。除非我们使用外部插件（如Adobe Flash Player），否则我们需要调试：
- en: HTML to find incorrect styles or test changes in our tag structure
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML以查找不正确的样式或测试标签结构的更改
- en: CSS to verify correctness of styles or test changes on them
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS以验证样式的正确性或测试对其的更改
- en: JavaScript to validate code execution, find possible errors, or test changes
    in our code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript验证代码执行，查找可能的错误，或测试代码中的更改
- en: Additionally, we should test the load time of assets (`media`, `html`, `css`,
    and `js` files) and execution time of JavaScript (profiling).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还应该测试资源的加载时间（`media`、`html`、`css`和`js`文件）以及JavaScript的执行时间（性能分析）。
- en: Which tools to use
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用哪些工具
- en: 'Most modern browsers now provide tools for debugging web applications. Because
    cross-browser compatibility is important, we need to know how they work. In general,
    every debugger gives you the ability to do the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代浏览器现在都提供了调试Web应用程序的工具。由于跨浏览器兼容性很重要，我们需要了解它们是如何工作的。一般来说，每个调试器都提供以下功能：
- en: Inspect and modify HTML in real time and select visual elements on the page
    and show its equivalents in HTML code (**HTML** | **Elements**)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时检查和修改HTML，并在页面上选择视觉元素，显示其HTML代码的等效项（**HTML** | **元素**）
- en: Inspect and modify CSS in real time (**HTML** |**Elements** or **CSS** | **Resources**
    | **Style**)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时检查和修改CSS（**HTML** | **元素**或**CSS** | **资源** | **样式**）
- en: Inspect and modify (or declare) JavaScript in real time and create breakpoints
    to stop code execution and inspect step by step (**Console** | **Script** | **Sources**)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时检查和修改（或声明）JavaScript，并创建断点以停止代码执行并逐步检查（**控制台** | **脚本** | **源代码**）
- en: Analysis of loading time of each asset (**Network** | **Net** | **Timeline**
    | **Instrument**)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析每个资源的加载时间（**网络** | **Net** | **时间线** | **工具**）
- en: 'Let us take a look at some of the most popular browsers'' debugging tools:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些最受欢迎的浏览器调试工具：
- en: '![Which tools to use](img/5689_11_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![使用哪些工具](img/5689_11_02.jpg)'
- en: Firefox 15.0.1 Firebug (plugin)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 15.0.1 Firebug（插件）
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Firebug plugin is not installed by default on Firefox. You will need to
    go to [http://getfirebug.com/](http://getfirebug.com/) and click on **Install
    Firebug** from Firefox.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Firebug插件默认未安装在Firefox上。您需要访问[http://getfirebug.com/](http://getfirebug.com/)，并在Firefox中点击**安装Firebug**。
- en: '![Which tools to use](img/5689_11_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用哪些工具](img/5689_11_03.jpg)'
- en: Chrome 22.0.1229.79 Developer Tools
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 22.0.1229.79 开发者工具
- en: For our purposes and because it is one of the most robust tools, we are going
    to walk through the Firebug plugin for Firefox. Many of the same basic concepts
    (HTML inspection, script debugging, use of the console) exist in the developer
    tools provided in other browsers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，因为它是最稳健的工具之一，我们将介绍Firefox的Firebug插件。许多相同的基本概念（HTML检查、脚本调试、控制台的使用）存在于其他浏览器提供的开发者工具中。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many debugging tools available for Internet Explorer in particular.
    In addition to the Developer Tools included in Internet Explorer 8 and 9, there
    is DebugBar ([http://www.debugbar.com/](http://www.debugbar.com/)) and dynaTrace
    ([http://www.compuware.com/application-performance-management/ajax-performance-testing.html](http://www.compuware.com/application-performance-management/ajax-performance-testing.html)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Internet Explorer 来说，有许多调试工具可用。除了 Internet Explorer 8 和 9 中包含的开发者工具外，还有 DebugBar
    ([http://www.debugbar.com/](http://www.debugbar.com/)) 和 dynaTrace ([http://www.compuware.com/application-performance-management/ajax-performance-testing.html](http://www.compuware.com/application-performance-management/ajax-performance-testing.html))。
- en: Playing with HTML and CSS
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵 HTML 和 CSS
- en: 'In Firebug, you can explore your HTML DOM objects using the **HTML** tab:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Firebug 中，您可以使用**HTML**选项卡来探索您的 HTML DOM 对象：
- en: '![Playing with HTML and CSS](img/5689_11_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_05.jpg)'
- en: Hovering on each tag, it is possible to see its corresponding rendered element
    highlighted. If you decide to navigate through the rendered page, you can click
    on the Inspect button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在每个标签上，可以看到其对应的渲染元素被突出显示。如果您决定在渲染页面上导航，可以点击**检查**按钮。
- en: '![Playing with HTML and CSS](img/5689_11_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_06.jpg)'
- en: The Inspect button allows you to select areas of the rendered page to see the
    corresponding HTML code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查**按钮允许您选择渲染页面的区域以查看相应的 HTML 代码。'
- en: '![Playing with HTML and CSS](img/5689_11_07.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_07.jpg)'
- en: By clicking on **Edit**, it is possible to modify your HTML code within the
    browser itself. Of course, you are not modifying the page itself but rather the
    browser's local copy. The rendered page changes automatically as a result of the
    modifications. This is very useful in trying out changes to your HTML structure
    and getting instant feedback before implementing them in your code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**编辑**，可以在浏览器本身内修改您的 HTML 代码。当然，您并不是在修改页面本身，而是在修改浏览器的本地副本。渲染的页面会自动根据修改而改变。这在尝试修改
    HTML 结构并在代码中实现之前获得即时反馈非常有用。
- en: The right-hand side panel allows us to view styles of the DOM object selected,
    including references to the file and line number (in the right-hand side highlighted
    in blue). The **Style** tab groups the styles by priority; you can modify or create
    properties or modify selectors in this tab with a double-click.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的面板允许我们查看所选 DOM 对象的样式，包括对文件和行号的引用（在右侧以蓝色突出显示）。**样式**选项卡按优先级分组样式；您可以通过双击在此选项卡中修改或创建属性或修改选择器。
- en: '![Playing with HTML and CSS](img/5689_11_08.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_08.jpg)'
- en: '**Computed** lists the computed styles, which are a merger of browser, user,
    and author-applied styles where relative values are calculated. For example, if
    a `div` tag has a style of `width:50%`, and it is surrounded by a `div` set to
    `width:760px`, then the computed style will be `width:380px`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算样式**列出了计算样式，它是浏览器、用户和作者应用样式的合并，其中相对值被计算。例如，如果一个`div`标签的样式是`width:50%`，并且它被设置为`width:760px`的`div`包围，那么计算样式将是`width:380px`。'
- en: '![Playing with HTML and CSS](img/5689_11_09.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_09.jpg)'
- en: '**Layout** displays a graphic representation of the padding, border, and margin
    applied based on the CSS box model.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局**显示基于 CSS 盒模型应用的填充、边框和边距的图形表示。'
- en: '![Playing with HTML and CSS](img/5689_11_10.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_10.jpg)'
- en: '**DOM** shows the selected DOM''s object properties. There is a wealth of information
    here including the `document` object as a "browseable" tree and the ability to
    see the JavaScript global namespace to see which objects have been loaded.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOM**显示所选 DOM 的对象属性。这里有很多信息，包括作为“可浏览”树的`document`对象和查看 JavaScript 全局命名空间的能力，以查看哪些对象已被加载。'
- en: '![Playing with HTML and CSS](img/5689_11_11.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 HTML 和 CSS](img/5689_11_11.jpg)'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can use the **CSS** tab to modify your styles as they are in each `css`
    file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**CSS**选项卡来修改每个`css`文件中的样式。
- en: Step by step with JavaScript
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步步为营学习 JavaScript
- en: The **Script** tab allows you to inspect all JavaScript files used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本**选项卡允许您检查所有使用的 JavaScript 文件。'
- en: '![Step by step with JavaScript](img/5689_11_12.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![步步为营学习 JavaScript](img/5689_11_12.jpg)'
- en: After selecting the file that you wish to inspect, you can execute a step-by-step
    execution of your JavaScript code. Find the line where you want to stop and click
    on the line number to create a breakpoint. A graphic representing the breakpoint
    will appear.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择您要检查的文件后，您可以执行 JavaScript 代码的逐步执行。找到您想要停止的行，并点击行号以创建断点。一个表示断点的图形将出现。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Minified JavaScript files will generally show up as a single line when viewed
    in the **Script** tab. It is useful to include "unminified" files in debug versions
    of your page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在**脚本**标签中查看时，压缩后的JavaScript文件通常显示为单行。在页面的调试版本中包含“未压缩”文件是有用的。
- en: '![Step by step with JavaScript](img/5689_11_13.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![逐步使用JavaScript](img/5689_11_13.jpg)'
- en: Now refresh the browser and you will see how the execution stops on that line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在刷新浏览器，你将看到执行如何在该行停止。
- en: '![Step by step with JavaScript](img/5689_11_14.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![逐步使用JavaScript](img/5689_11_14.jpg)'
- en: The right-hand side panel will show you variables available in the present scope.
    You can use this to change variable values, input your own variables, or check
    expressions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的面板将显示当前作用域中可用的变量。你可以使用它来更改变量值，输入自己的变量，或检查表达式。
- en: '![Step by step with JavaScript](img/5689_11_15.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![逐步使用JavaScript](img/5689_11_15.jpg)'
- en: 'In the top-right corner you will find controls to continue code execution:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角，你可以找到继续代码执行的控制按钮：
- en: '![Step by step with JavaScript](img/5689_11_16.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![逐步使用JavaScript](img/5689_11_16.jpg)'
- en: The play symbol continues the code execution, the small yellow arrow pointing
    down continues execution to the next line and will enter a function if one is
    invoked, the large yellow arrow pointing down continues execution to the next
    line in the current execution context and passes over functions that are invoked,
    and the last yellow arrow steps out of a function. Of course, you can always hover
    over each button to get this information as there is usually a tool tip for each
    button. This allows you to control how you want to step through your code. You
    can stop by placing a breakpoint where you want to understand how a particular
    block of code is evaluating. You can then step through each line of code thereafter,
    executing method invocations you are not concerned about or stepping out entirely
    to a calling method. At each step, you can see what variables get set, what is
    available in the current scope, and really get a sense for what your code is doing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 播放符号继续代码执行，指向下的黄色小箭头继续执行到下一行，如果调用了一个函数，则会进入该函数，指向下的黄色大箭头继续执行到当前执行上下文中的下一行，跳过被调用的函数，最后一个黄色箭头则从函数中退出。当然，你可以始终将鼠标悬停在每个按钮上以获取这些信息，因为通常每个按钮都有一个工具提示。这允许你控制如何遍历你的代码。你可以在想要了解特定代码块如何评估的地方设置断点来停止执行。然后你可以逐行执行代码，执行你不需要关心的方法调用，或者完全退出到调用方法。在每一步，你都可以看到设置了哪些变量，当前作用域中有什么可用，真正地了解你的代码在做什么。
- en: JavaScript console
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript控制台
- en: 'The **Console** tab logs JavaScript errors, warnings, and Ajax calls. You can
    force your code to write to the console using the following in your JavaScript
    code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**标签记录JavaScript错误、警告和Ajax调用。你可以在JavaScript代码中使用以下方式强制代码写入控制台：'
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is particularly useful for writing messages out to understand how your
    code is executing. You can write debug statements to show particular variable
    values or just indicate that a specific block is executing. You can print objects
    too and inspect them in Firebug.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这特别有用，可以输出消息以了解代码的执行情况。你可以写入调试语句来显示特定变量的值，或者只是指示特定的代码块正在执行。你还可以打印对象并在Firebug中检查它们。
- en: The console object includes other useful debugging methods such as `info()`,
    `warn()`, and `error()` to give you more enhanced debugging feedback.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台对象包括其他有用的调试方法，如`info()`、`warn()`和`error()`，以提供更增强的调试反馈。
- en: '![JavaScript console](img/5689_11_17.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript控制台](img/5689_11_17.jpg)'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is good practice to remove or comment out all `console` calls in your code
    when you deploy to production as some browsers do not support it and will break
    and stop execution entirely. One solution for this is to create a script that
    removes these lines and include it in your build process. Oftentimes, such a script
    also packages and minifies your code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码部署到生产环境时，删除或注释掉所有`console`调用是一个好的实践，因为一些浏览器不支持它，这会导致执行中断并完全停止。一个解决方案是创建一个脚本，删除这些行，并将其包含在构建过程中。通常，这样的脚本还会打包和压缩你的代码。
- en: An interesting feature of the console is that it lets you write code and execute
    it in real time. You can find a prompt at the bottom that allows you to enter
    code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台的一个有趣特性是它允许你在实时环境中编写和执行代码。你可以在底部找到一个提示，允许你输入代码。
- en: 'Let us say you want to print all images inside the object with the `movies-near-me`
    ID, you can write this in your console:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要打印具有`movies-near-me` ID的对象中的所有图像，你可以在控制台中编写以下代码：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see the following result:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下结果：
- en: '![JavaScript console](img/5689_11_18.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript 控制台](img/5689_11_18.jpg)'
- en: Analyzing load times
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析加载时间
- en: The **Net** tab compiles all network calls including status, domain, file size,
    IP, and load time. You can use this section to verify where performance problems
    lie.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**选项卡编译了所有网络调用，包括状态、域名、文件大小、IP 和加载时间。您可以使用此部分来验证性能问题所在。'
- en: '![Analyzing load times](img/5689_11_19.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![分析加载时间](img/5689_11_19.jpg)'
- en: JavaScript profiling
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 性能分析
- en: The **Console** tab provides a profile tool to analyze performance of our JavaScript
    code. To execute a profile, click on the **Profile** button, then execute your
    JavaScript action (or refresh the page if you want to profile the main JavaScript
    execution) and click on the **Profile** button again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**选项卡提供了一个分析我们 JavaScript 代码性能的工具。要执行分析，请单击**分析**按钮，然后执行您的 JavaScript
    操作（或刷新页面以分析主要 JavaScript 执行），然后再次单击**分析**按钮。'
- en: '![JavaScript profiling](img/5689_11_20.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript 性能分析](img/5689_11_20.jpg)'
- en: No need to worry if the functions are registered as **anonymous**. The **File**
    field gives the exact line of code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数被注册为**匿名**，无需担心。**文件**字段给出了确切的代码行。
- en: Mobile debugging
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动调试
- en: Debugging HTML, CSS, and JavaScript can be painful in mobile web applications,
    particularly if we are using a touch device. Remote debugging provides a way to
    test your enterprise web applications in mobile devices using your desktop or
    laptop.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动网络应用程序中调试 HTML、CSS 和 JavaScript 可能会很痛苦，尤其是如果我们使用的是触摸设备。远程调试提供了一种使用您的桌面或笔记本电脑在移动设备上测试您的企业网络应用程序的方法。
- en: 'Chrome supports remote debugging via USB for Android devices: [https://developers.google.com/chrome/mobile/docs/debugging](https://developers.google.com/chrome/mobile/docs/debugging).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 支持通过 USB 为 Android 设备进行远程调试：[https://developers.google.com/chrome/mobile/docs/debugging](https://developers.google.com/chrome/mobile/docs/debugging)。
- en: 'Firefox 15 introduces remote debugging for Android too: [https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/](https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 15 也为 Android 引入了远程调试：[https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/](https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/)
- en: Previous to Version 6, iOS devices had a simple interface inside the device
    for debugging.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 6 之前，iOS 设备内部有一个简单的调试界面。
- en: '![Mobile debugging](img/5689_11_21.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![移动调试](img/5689_11_21.jpg)'
- en: 'Safari 6.0.1 (Mac only) and iOS 6 support remote debugging. To start remote
    debugging in any iOS 6:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Safari 6.0.1（仅限 Mac）和 iOS 6 支持远程调试。要在任何 iOS 6 中开始远程调试：
- en: In the device (iPhone, iPad, or iPod) go to **Settings** | **Safari** | **Advanced**
    and enable the **Web Inspector** option.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备（iPhone、iPad 或 iPod）中，转到**设置** | **Safari** | **高级**并启用**Web 检查器**选项。
- en: Open Safari in a Mac computer.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac 计算机上打开 Safari。
- en: Open the web application to debug using Safari in your iOS device.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的 iOS 设备上的 Safari 打开要调试的 Web 应用程序。
- en: Connect the device to your Mac computer using a USB cable.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 线缆将设备连接到您的 Mac 计算机。
- en: If you don't have the **Develop** menu item on Safari (Mac), open **Safari**
    | **Preferences** | **Advanced** and check **Show Develop menu in the menu bar**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在 Safari（Mac）中没有**开发**菜单项，请打开**Safari** | **偏好设置** | **高级**并勾选**在菜单栏中显示开发菜单**。
- en: '**Go to Develop** | **Device name** and then choose the **web application**.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**转到开发** | **设备名称** 然后选择 **Web 应用程序**。'
- en: You should now see a web inspector.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到一个网页检查器。
- en: There is also an online tool called JConsole, which allows you to remotely control
    and debug browsers in other windows and even devices. It works by giving you a
    script reference to include in the application you are debugging. It then provides
    a console to which you can send `console.log` messages and other debugging information.
    More information can be found at [http://jsconsole.com/remote-debugging.html](http://jsconsole.com/remote-debugging.html).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个名为 JConsole 的在线工具，允许您远程控制并调试其他窗口和设备中的浏览器。它通过为您提供要包含在您正在调试的应用程序中的脚本引用来实现。然后它提供了一个控制台，您可以在此发送
    `console.log` 消息和其他调试信息。更多信息可以在 [http://jsconsole.com/remote-debugging.html](http://jsconsole.com/remote-debugging.html)
    找到。
- en: Web debugging proxies
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 调试代理
- en: A proxy is a piece of hardware that acts as an intermediary between the client
    and server. Application of software proxies as a way to debug web applications
    is a widely used practice, the main purpose of which involves inspecting data
    from requests and viewing the server responses.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是一种充当客户端和服务器之间中间人的硬件设备。将软件代理作为调试网络应用程序的方法是一种广泛使用的做法，其主要目的涉及检查请求数据并查看服务器响应。
- en: On the Windows platform, we recommend Fiddler. It can be found at [http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/).
    If you are using a Mac, you can use Charles, which is found at [http://www.charlesproxy.com/](http://www.charlesproxy.com/).
    Both are web proxies that record the communication between server and client.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows平台上，我们推荐使用Fiddler。您可以在[http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/)找到它。如果您使用的是Mac，可以使用Charles，您可以在[http://www.charlesproxy.com/](http://www.charlesproxy.com/)找到它。两者都是Web代理，用于记录服务器和客户端之间的通信。
- en: 'Simply open the application, turn on the capture, and load your web application.
    Here you can see Charles capturing MovieNow requests:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地打开应用程序，开启捕获，并加载您的Web应用程序。在这里，您可以看到Charles正在捕获MovieNow请求：
- en: '![Web debugging proxies](img/5689_11_22.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Web调试代理](img/5689_11_22.jpg)'
- en: It is possible to simulate responses using proxies as well. For example, in
    Charles you can go to **Tools** and then **Map Local...** to use local files or
    services as the response to your application. You can use **Rewrite...** in the
    same menu to modify part of a response and send it back to your application. This
    is a valuable feature for testing edge cases.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代理模拟响应也是可能的。例如，在Charles中，您可以前往**工具**，然后选择**映射本地...**来使用本地文件或服务作为您应用程序的响应。您可以在同一菜单中使用**重写...**来修改响应的一部分并将其发送回您的应用程序。这对于测试边缘情况是一个非常有价值的功能。
- en: '![Web debugging proxies](img/5689_11_23.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Web调试代理](img/5689_11_23.jpg)'
- en: 'If you want to use Charles with an iOS device and carry out remote debugging,
    follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用Charles与iOS设备一起进行远程调试，请按照以下步骤操作：
- en: Get your Mac IP using the `ipconfig getifaddr en1.` command in Terminal.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端中的`ipconfig getifaddr en1.`命令获取您的Mac IP地址。
- en: Activate the option **Enable Mac OS X Proxy** in the **Proxy** menu.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**代理**菜单中激活**启用Mac OS X代理**选项。
- en: Connect your iOS device to the same network used by your Mac computer running
    Charles.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的iOS设备连接到运行Charles的Mac电脑使用的同一网络。
- en: In your iOS device, go to **Settings** | **Wi-Fi** and click on the blue arrow
    for your connection and in the **HTTP Proxy** section insert your Mac IP and the
    port used by Charles (by default it is 8888).
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的iOS设备上，前往**设置** | **Wi-Fi**，点击您连接的蓝色箭头，然后在**HTTP代理**部分输入您的Mac IP地址和Charles使用的端口号（默认为8888）。
- en: Go to Safari in your iOS device and navigate.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的iOS设备上的Safari中导航。
- en: A warning should show in Charles informing you that a new connection has been
    attempted. Click on **Allow**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Charles应该会显示一个警告，通知您已尝试建立新的连接。点击**允许**。
- en: Now you should be able to record your traffic.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该能够记录您的流量。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered useful debugging tools including mobile and web
    proxies as well as ways of manipulating HTML, CSS, and JavaScript in the browser
    in order to debug our applications. As developers, it is good practice for us
    to understand all the available options for debugging our code. While debugging
    errors that happen only in one browser, we must pay special attention to the technical
    restrictions and features of that browser because these limitations are often
    the cause. For example, complicated JavaScript code can be slow in browsers like
    Internet Explorer 7\. Using the tools available for that browser gives us insight
    into the internals of that browser and thus knowledge about preventing bugs in
    the future.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了有用的调试工具，包括移动和Web代理，以及如何在浏览器中操作HTML、CSS和JavaScript以调试我们的应用程序。作为开发者，了解所有可用的调试代码选项对我们来说是一种良好的实践。当调试仅在一个浏览器中发生的错误时，我们必须特别注意该浏览器的技术限制和功能，因为这些限制通常是原因。例如，复杂的JavaScript代码在像Internet
    Explorer 7这样的浏览器中可能会很慢。使用该浏览器提供的工具可以让我们深入了解该浏览器的内部结构，从而了解如何防止未来的错误。
- en: In the next chapter, we will go over testing tools and frameworks for enterprise
    application projects and the advantages of automated functional testing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍企业级应用程序项目的测试工具和框架，以及自动化功能测试的优势。
