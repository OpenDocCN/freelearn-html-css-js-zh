- en: Chapter 12. Basic Performance Tuning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章. 基本性能调优
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Scalable infrastructure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展基础设施
- en: Setting up database access for the master/slave configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置主/从配置的数据库访问
- en: Enabling JS and CSS minification
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用JS和CSS压缩
- en: Turning on the CDN host
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用CDN主机
- en: Disabling unused Liferay features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用未使用的Liferay功能
- en: JVM tuning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM调优
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the most important aspects of successful project realization is system
    performance. Everybody knows that Web users often face a long wait when downloading
    web pages. What is the tolerable waiting time for web page download? In our opinion,
    a comfortable response time should be less than 2 seconds. If users have to wait
    more than 4 seconds, they usually go away. Performance issues is the most difficult
    subject in a big data portal or intranet. System architecture affects performance.
    Portals with a lot of images, movies, and audio should have a different architecture
    compared to intranets, as these portals have a lot of users who log in very often
    at the same time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 成功项目实现最重要的方面之一是系统性能。众所周知，当下载网页时，Web用户经常会遇到长时间的等待。网页下载的容忍等待时间是多长？在我们看来，舒适的响应时间应该少于2秒。如果用户不得不等待超过4秒，他们通常会离开。性能问题是大数据门户或内部网中最难的主题。系统架构影响性能。拥有大量图像、电影和音频的门户网站与内部网相比应该有不同的架构，因为这些门户网站有大量用户同时登录。
- en: 'Fortunately, there are some general rules that help improve Liferay''s performance:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些通用规则可以帮助提高Liferay的性能：
- en: Scalable infrastructure with HTTP cache proxy
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有HTTP缓存代理的可扩展基础设施
- en: Fast database
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速数据库
- en: Appropriate Java settings, such as garbage collector engine or memory settings
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适当的Java设置，例如垃圾收集器引擎或内存设置
- en: Minimal number of included files, such as JS, CSS, images, and so on
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含的最小文件数量，如JS、CSS、图像等
- en: '**Content distribution** **network** (**CDN**) for static resources'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容分发** **网络** (**CDN**) 用于静态资源'
- en: Liferay Portal tuning, for instance, disabling unused filters, changing properties,
    and so on
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liferay门户调优，例如禁用未使用的过滤器、更改属性等
- en: Scalable infrastructure
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展基础设施
- en: Defining the architecture is the most important part of a successful installation.
    A good architecture should be fault-tolerant and have a high level of availability.
    To achieve this, it is necessary to cluster all the possible nodes, such as Tomcat
    nodes, search nodes, and so on. The second important thing is building a scalable
    infrastructure that lets us add new nodes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 定义架构是成功安装最重要的部分。一个好的架构应该是容错性的，并且具有高可用性。为了实现这一点，有必要将所有可能的节点，如Tomcat节点、搜索节点等，进行集群。第二重要的是构建一个可扩展的基础设施，使我们能够添加新的节点。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'In this recipe, we will try defining reference infrastructure, which can be
    used on production deployments. This type of infrastructure is used in our projects
    and works perfectly. The main parts of our environments are: squid cache, Apache
    servers with `mod_jk` module and software load balancers, Apache Tomcat Application
    Servers, Solr Cloud and Database server. The following image shows the most important
    parts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将尝试定义参考基础设施，这可以在生产部署中使用。这种类型的基础设施在我们的项目中使用，并且运行得非常好。我们环境的主要部分包括：squid缓存、带有`mod_jk`模块的Apache服务器和软件负载均衡器、Apache
    Tomcat应用服务器、Solr云和数据库服务器。以下图像显示了最重要的部分：
- en: '![How to do it…](img/image00378.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00378.jpeg)'
- en: Squid cache
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Squid缓存
- en: The first tier of our architecture is Squid cache ([http://www.squid-cache.org/](http://www.squid-cache.org/)).
    It is a caching proxy for the Web. It supports HTTP, HTTPS, and other protocols.
    It reduces the number of requests, which go to another tier, especially to the
    Liferay instance. Squid cache reads HTTP headers and decides whether a specific
    request can be cached and how long they can be cached. This option can be used
    for content that doesn't change frequently, such as images, CSS, JS, and so on.
    This kind of solution gives a noticeable boost to our application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们架构的第一层是Squid缓存([http://www.squid-cache.org/](http://www.squid-cache.org/))。它是一个Web缓存代理。它支持HTTP、HTTPS和其他协议。它减少了发送到另一层的请求数量，尤其是发送到Liferay实例的请求数量。Squid缓存读取HTTP头信息，并决定是否可以将特定请求缓存以及可以缓存多长时间。此选项可用于不经常更改的内容，如图像、CSS、JS等。这种解决方案对我们的应用程序提供了明显的提升。
- en: Apache web server and software load balancer
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache Web服务器和软件负载均衡器
- en: 'The next tier has Apache web server instances with a load balancer software.
    Each instance of the Apache server is connected with all Liferay nodes. This connection
    is established by the `mod_jk Tomcat-Apache` plugin ([https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html](https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html)).
    This plugin handles the communication between Tomcat and Apache using the AJP
    protocol. Every Apache server instance has a load balancer configuration. The
    most common load balancer configuration uses the `mod_jk` plugin. The configuration
    is placed in the `workers.properties` file in the `$APACHE_HOME/conf` directory.
    The following listing shows an example of the `mod_jk` and load balancer configuration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一层是带有负载均衡器软件的Apache网络服务器实例。每个Apache服务器实例都与所有Liferay节点连接。这种连接是通过`mod_jk Tomcat-Apache`插件([https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html](https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html))建立的。此插件通过AJP协议处理Tomcat和Apache之间的通信。每个Apache服务器实例都有一个负载均衡器配置。最常见的负载均衡器配置使用`mod_jk`插件。配置放在`$APACHE_HOME/conf`目录下的`workers.properties`文件中。以下列表显示了`mod_jk`和负载均衡器配置的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first line specifies a list of workers. In our example, there are three
    workers: `node1`, `node2`, and `loadbalancer`. Workers with names `node1` and
    `node2` describe connection with Liferay (host, port, and timeout definitions).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行指定了一个工作者列表。在我们的例子中，有三个工作者：`node1`、`node2`和`loadbalancer`。名为`node1`和`node2`的工作者描述了与Liferay的连接（主机、端口和超时定义）。
- en: 'The bold definition describes the load balancer configuration. It contains
    a list of workers (the `worker.loadbalancer.balance_workers` property), and specifies
    the sticky session policy and the number of retries if a request fails. Load balancer
    can be configured with the following two modes:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 粗体定义描述了负载均衡器配置。它包含一个工作者列表（`worker.loadbalancer.balance_workers`属性），并指定了请求失败时的粘性会话策略和重试次数。负载均衡器可以通过以下两种模式进行配置：
- en: '**Sticky session**: This distributes all the requests for a specific session
    to a specific Liferay Portal server node.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘性会话**：这会将特定会话的所有请求分配给特定的Liferay Portal服务器节点。'
- en: '**Session replication**: This provides a mechanism for session replication.
    From a business point of view, this is a great feature because it is failure-independent.
    If one of the nodes fail, load balancer decides to send the request to a different
    one. Users don''t see any difference.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话复制**：这提供了一种会话复制的机制。从业务角度来看，这是一个非常棒的功能，因为它不受故障影响。如果一个节点失败，负载均衡器会决定将请求发送到另一个节点。用户不会看到任何区别。'
- en: From the performance tuning point of view, the best option is sticky session,
    because it eliminates many requests compared to session replication. In other
    words, sticky session reduces traffic and saves resources.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从性能调优的角度来看，最佳选项是粘性会话，因为它与会话复制相比消除了许多请求。换句话说，粘性会话减少了流量并节省了资源。
- en: Apache Tomcat Application Server
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache Tomcat应用服务器
- en: This tier is the heart of the application, because in this tier, the Tomcat
    container, with our Liferay Portal instance, is placed. In a clustered environment,
    it is important to properly configure Liferay Portal, because all the components
    must have a dedicated configuration, such as sharing documents and media files,
    configuring the same access to the database, and configuring cache and search
    index replication.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层是应用程序的核心，因为在这一层，放置了带有我们的Liferay Portal实例的Tomcat容器。在集群环境中，正确配置Liferay Portal很重要，因为所有组件都必须有专门的配置，例如共享文档和媒体文件、配置对数据库的相同访问权限，以及配置缓存和搜索索引复制。
- en: 'If we use the Apache `mod_jk` module, it is important to set the `jvmRoute`
    identifier in every Apache Tomcat instance. To do this, place the following configuration
    in `${TOMCAT_HOME}/conf/server.xml`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用Apache的`mod_jk`模块，在每一个Apache Tomcat实例中设置`jvmRoute`标识符是很重要的。为此，将以下配置放在`${TOMCAT_HOME}/conf/server.xml`中：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To share documents and media files, we recommend that you use the glusterFS
    system ([http://www.gluster.org/](http://www.gluster.org/)), which shares documents
    and files between nodes. There are different ways to configure documents and media
    working in a clustered environment, which we described in the previous chapter.
    We will describe other configurations in the upcoming recipes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要共享文档和媒体文件，我们建议您使用glusterFS系统([http://www.gluster.org/](http://www.gluster.org/))，该系统在节点之间共享文档和文件。在集群环境中，配置文档和媒体文件有不同方式，我们已在上一章中描述。我们将在接下来的食谱中描述其他配置。
- en: Database server
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库服务器
- en: The database server tier is responsible for storing data on the database system.
    In a huge system, the database is usually one of the major bottlenecks, and database
    administrators often have a lot of problems with performance. In our projects,
    we generally use the MySQL database with master/slave configuration. The master
    database is responsible for writing, while the slave database is responsible for
    reading. Liferay provides out-of-the-box mechanisms that allow us to configure
    it. We will describe them in the upcoming recipes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器层负责在数据库系统中存储数据。在一个大型系统中，数据库通常是主要的瓶颈之一，数据库管理员经常在性能上遇到很多问题。在我们的项目中，我们通常使用具有主/从配置的
    MySQL 数据库。主数据库负责写入，而从数据库负责读取。Liferay 提供了开箱即用的机制，允许我们进行配置。我们将在接下来的菜谱中描述它们。
- en: Solr search engine server
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Solr 搜索引擎服务器
- en: The last tier is an Apache Solr search engine server ([http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)).
    Solr is highly reliable, scalable, and fault-tolerant, providing distributed indexing,
    replication and load-balanced querying, automated failover and recovery, centralized
    configuration, and more. These things are possible to configure if we install
    Apache Zookeeper ([https://zookeeper.apache.org/](https://zookeeper.apache.org/))
    and Apache Solr together. Zookeeper is a centralized service that maintains configuration
    information, naming, and provides distributed synchronization and group services,
    for instance, Apache Solr. Therefore, Apache Zookeeper can be installed as a cloud
    solution that can eliminate single point of failure. The Zookeeper server selects
    a Solr node, which is a master, and gives a token.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一层是一个 Apache Solr 搜索引擎服务器（[http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)）。Solr
    具有高度可靠性、可扩展性和容错性，提供分布式索引、复制和负载均衡查询、自动故障转移和恢复、集中式配置等功能。如果我们一起安装 Apache Zookeeper
    ([https://zookeeper.apache.org/](https://zookeeper.apache.org/)) 和 Apache Solr，这些功能都是可以配置的。Zookeeper
    是一个集中式服务，负责维护配置信息、命名并提供分布式同步和群组服务，例如 Apache Solr。因此，Apache Zookeeper 可以作为一个云解决方案安装，以消除单点故障。Zookeeper
    服务器选择一个 Solr 节点，即主节点，并分配一个令牌。
- en: See also
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For information on clustering and configuring the environment, refer to the
    following recipes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于集群和配置环境的更多信息，请参考以下菜谱：
- en: The *Integration with the Amazon S3 cloud* recipe from [Chapter 6](part0050.xhtml#aid-1FLS41
    "Chapter 6. Documents and Media in Liferay"), *Documents and Media in Liferay*
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自第6章（[part0050.xhtml#aid-1FLS41 "第6章. Liferay 中的文档和媒体"](part0050.xhtml#aid-1FLS41
    "第6章. Liferay 中的文档和媒体")）的 *与 Amazon S3 云集成* 菜单，*Liferay 中的文档和媒体*
- en: The *Solr installation and configuration* recipe from [Chapter 8](part0059.xhtml#aid-1O8H61
    "Chapter 8. Search and Content Presentation Tools"), *Search and Content Presentation
    Tools*
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自第8章（[part0059.xhtml#aid-1O8H61 "第8章. 搜索和内容展示工具"](part0059.xhtml#aid-1O8H61
    "第8章. 搜索和内容展示工具")）的 *Solr 安装和配置* 菜单，*搜索和内容展示工具*
- en: The *Clustering Liferay Portal and the Configuring Liferay with the SMTP server*
    recipes from [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick Tricks
    and Advanced Knowledge"), *Quick Tricks and Advanced Knowledge*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自第11章（[part0080.xhtml#aid-2C9D01 "第11章. 快速技巧和高级知识"](part0080.xhtml#aid-2C9D01
    "第11章. 快速技巧和高级知识")）的 *集群 Liferay 门户和配置 Liferay 与 SMTP 服务器* 菜单
- en: The *Setting up database access for the master/slave configuration* recipe from
    this chapter
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *设置主/从配置的数据库访问* 菜单
- en: Setting up database access for the master/slave configuration
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置主/从配置的数据库访问
- en: 'Liferay allows us to configure two different data sources: first for writing
    and second for reading. This configuration, in an easy way, allows users to split
    writing and reading requests. This type of configuration lets us build scalable
    and high-performance infrastructure.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 允许我们配置两个不同的数据源：一个用于写入，另一个用于读取。这种配置以简单的方式允许用户分离写入和读取请求。这种类型的配置使我们能够构建可扩展和高性能的基础设施。
- en: Getting ready…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作…
- en: As we mentioned at the beginning, we are focusing on Liferay configuration aspects.
    Our assumption is that you are ready to use database servers with master/slave
    replication. The MySql official documentation at [https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html](https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html)
    describes how to configure replication.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一开始提到的，我们专注于 Liferay 配置方面。我们的假设是您已经准备好使用具有主/从复制的数据库服务器。MySQL 官方文档在 [https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html](https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html)
    中描述了如何配置复制。
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In order to achieve our goal, open `portal-ext.properties` and configure the
    following settings:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，打开 `portal-ext.properties` 并配置以下设置：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step is to enable the Spring configuration, which contains settings
    to read/write data sources. Add the following property into `portal-ext.properties`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是启用 Spring 配置，其中包含读取/写入数据源的设置。将以下属性添加到 `portal-ext.properties` 文件中：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At the end, restart your application server. Make sure that database replication
    works correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重新启动您的应用程序服务器。确保数据库复制工作正常。
- en: How it works…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In our configuration, all write transactions will address the `jdbc.write.*`
    data source and read transactions will use the `jdbc.read.*` data source. In order
    to verify this configuration, follow these steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置中，所有写入事务都将针对 `jdbc.write.*` 数据源，而读取事务将使用 `jdbc.read.*` 数据源。为了验证此配置，请按照以下步骤操作：
- en: Shut down the master database instance (`jdbc.write`).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭主数据库实例 (`jdbc.write`)。
- en: Run your Liferay instance.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的 Liferay 实例。
- en: Try to browse Liferay Portal and upload a new content, such as an article or
    file.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试浏览 Liferay Portal 并上传新内容，例如文章或文件。
- en: In the `catalina.out` log file, there should be an appropriate error message.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `catalina.out` 日志文件中，应该有适当的错误消息。
- en: 'From a technical point of view, Liferay extends the `org.springframework.aop.TargetSource`
    Spring class, which can recognize whether the method contains a read or write
    operation. The rule is really simple: if a method on a service layer has the `@Transactional`
    annotation, then all queries go to the write data source. In other cases, queries
    go to the read data source.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，Liferay 扩展了 `org.springframework.aop.TargetSource` Spring 类，该类可以识别方法是否包含读取或写入操作。规则非常简单：如果服务层上的方法有
    `@Transactional` 注解，则所有查询都转到写入数据源。在其他情况下，查询转到读取数据源。
- en: There's more…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Some projects use Liferay with a lot of Portal instances. In this case, the
    term "Portal instances" means Liferay allows administrators to run more than one
    portal instance on a single server. Data for each portal instance can be kept
    separately from every other portal instance. This separation can be organized
    in the database tier. Each database node can store different types of data, depending
    on the portal instance. This separation is called database shard.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目使用 Liferay 与许多 Portal 实例。在这种情况下，术语“Portal 实例”意味着 Liferay 允许管理员在单个服务器上运行多个
    Portal 实例。每个 Portal 实例的数据可以与其他每个 Portal 实例分开保存。这种分离可以在数据库层组织。每个数据库节点可以存储不同类型的数据，具体取决于
    Portal 实例。这种分离称为数据库分片。
- en: 'Portal instance configuration allows us to choose the shard in which data will
    be stored. A database shard is a horizontal partition of data in a database. Each
    shard is held on a separate database server instance to spread the load. To configure
    sharding in Liferay, follow this instruction:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Portal 实例配置允许我们选择数据将存储在哪个分片。数据库分片是数据库中数据的水平分区。每个分片都存储在单独的数据库服务器实例上，以分散负载。要在
    Liferay 中配置分片，请遵循以下说明：
- en: 'In the `portal-ext.properties` file, specify an algorithm to select a new shard
    on portal instance creation. Use `ManualShardSelector` for shard selection via
    the web interface or round robin in other case. The round-robin algorithm evenly
    distributes the data between shards. A manual selector lets us assign each Liferay
    instance to the specific shard:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `portal-ext.properties` 文件中，指定一个算法，用于在创建 Portal 实例时选择新的分片。使用 `ManualShardSelector`
    通过 Web 界面进行分片选择，或在其他情况下使用轮询。轮询算法在分片之间均匀分配数据。手动选择器让我们可以将每个 Liferay 实例分配到特定的分片：
- en: '[PRE4]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, set your shard data sources:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置您的分片数据源：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The last thing is the `spring.configs` configuration, which should look like
    this:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个是 `spring.configs` 配置，其外观应如下所示：
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `<DEFAULT_CONFIGURATION>` placeholder keeps all the original `spring.configs`
    configurations, which are defined in the `portal.porperties` file.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<DEFAULT_CONFIGURATION>` 占位符保留所有原始的 `spring.configs` 配置，这些配置在 `portal.porperties`
    文件中定义。'
- en: Enabling JS and CSS minification
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 JS 和 CSS 压缩
- en: 'When your web page loads in a browser, the browser sends an HTTP request to
    the web server for the page in the URL. Then, as the HTML is delivered, the browser
    parses it and looks for additional requests for images, scripts, CSS, and so on.
    Every time it sees a request for a new element, it sends another HTTP request
    to the server. In order to decrease the number of additional requests, Liferay
    has the following ready-to-use mechanisms:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的网页在浏览器中加载时，浏览器会向 Web 服务器发送一个 HTTP 请求以获取 URL 中的页面。然后，随着 HTML 的传递，浏览器解析它并查找对图像、脚本、CSS
    等的附加请求。每次它看到对新元素的新请求时，都会向服务器发送另一个 HTTP 请求。为了减少附加请求的数量，Liferay 有以下现成的机制：
- en: Minifier (compressor) that allows you to compress and minify your JavaScript
    and CSS files
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许您压缩和精简 JavaScript 和 CSS 文件的 Minifier（压缩器）
- en: Merging JavaScript files to reduce the number of HTTP requests using `barebone.jsp`
    and `everything.jsp`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `barebone.jsp` 和 `everything.jsp` 合并 JavaScript 文件以减少 HTTP 请求
- en: Merging CSS files and images for faster loading
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并 CSS 文件和图像以加快加载
- en: Enabling Gzip compression
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Gzip 压缩
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To set Liferay''s fast-load mechanisms, set the following properties in the
    `portal-ext.properties` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 Liferay 的快速加载机制，请在 `portal-ext.properties` 文件中设置以下属性：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Additionally, if you use custom scripts, add them to the `javascript.barebone.files`
    and `javascript.everything.files` properties in the `portal-ext.properties` file.
    The last step is enabling Gzip compression. It is possible to do this by turning
    on the following property:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您使用自定义脚本，请将它们添加到 `portal-ext.properties` 文件中的 `javascript.barebone.files`
    和 `javascript.everything.files` 属性。最后一步是启用 Gzip 压缩。可以通过开启以下属性来实现：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A better option is delegating this responsibility to Apache server, because
    it reduces the number of requests in the Apache Tomcat server. To enable Gzip
    compression on Apache server, open `${APACHE_HOME}/conf/httpd.conf` and add the
    following configuration:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的选择是将此责任委托给 Apache 服务器，因为它减少了 Apache Tomcat 服务器中的请求数量。要在 Apache 服务器上启用 Gzip
    压缩，打开 `${APACHE_HOME}/conf/httpd.conf` 并添加以下配置：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make sure that the `deflate` module is enabled. Look for the following line:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已启用 `deflate` 模块。查找以下行：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we were concentrating on reducing the number of requests and
    decreasing the size of the response. Liferay combines JS files into one file and
    stores it in the application server''s `temp` directory. On the page, the link
    to this file for unauthenticated users looks as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们专注于减少请求数量和减小响应大小。Liferay 将 JS 文件合并成一个文件，并存储在应用服务器的 `temp` 目录中。对于未认证用户，该文件在页面上的链接如下所示：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For authenticated users, it is very similar. Instead of `barebone.jsp`, there
    is the `everything.jsp` file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于认证用户，非常相似。而不是 `barebone.jsp`，有 `everything.jsp` 文件。
- en: If we dig deep inside the generated HTML source code, there are links to CSS
    files with the `minifierType=css` parameters. This parameter turns on file minification,
    which reduces the size of a file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们深入查看生成的 HTML 源代码，会发现带有 `minifierType=css` 参数的 CSS 文件链接。此参数启用文件精简，从而减小文件大小。
- en: 'The last magic configuration is Gzip compression. If our browser sends a request
    with the `Accept-Encoding: gzip,deflate` header, our system returns Gzipped content.
    To test it, invoke the following command from your command line:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '最后一个神奇的配置是 Gzip 压缩。如果我们的浏览器发送带有 `Accept-Encoding: gzip,deflate` 头部的请求，我们的系统将返回
    Gzipped 内容。要测试它，从您的命令行调用以下命令：'
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the response, there should be the `Content-Encoding: gzip` header.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '在响应中，应该有 `Content-Encoding: gzip` 头部。'
- en: Turning on the CDN host
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开 CDN 主机
- en: In the previous recipe, you learned how to connect with minifying CSS and JS
    files and reduce the number of requests to the Liferay Portal. The next step in
    our configuration is reducing requests to the application server where Liferay
    is. The idea is that some static resources can be served by Apache server or,
    better, by Squid cache. Delivering static resources through the Apache server
    or Squid cache instead of the application server improves the response time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，您学习了如何连接到压缩 CSS 和 JS 文件并减少对 Liferay 门户的请求数量。我们配置的下一步是减少 Liferay 所在的应用服务器的请求数量。想法是某些静态资源可以由
    Apache 服务器或更好的 Squid 缓存提供。通过 Apache 服务器或 Squid 缓存而不是应用服务器提供静态资源可以提高响应时间。
- en: 'Liferay supports CDN. Wikipedia defines this term as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 支持 CDN。维基百科将此术语定义为如下：
- en: '*"A content delivery network or content distribution network (CDN) is a large
    distributed system of servers deployed in multiple data centers across the Internet.
    The goal of a CDN is to serve content to end-users with high availability and
    high performance."*'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"内容分发网络（CDN）或内容分发网络（CDN）是在互联网上多个数据中心部署的大型分布式服务器系统。CDN的目标是以高可用性和高性能向最终用户提供内容。"*'
- en: Getting ready…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作…
- en: Our idea is to use CDN domains to serve static resources and cache them in the
    Squid cache. The most difficult part is the Squid configuration, which caches
    all the static files coming from a CDN host. In this recipe, we will assume that
    this configuration is done, and we have a static domain for our resources, for
    example, [http://static.mysite.com](http://static.mysite.com)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的构想是使用CDN域名来提供静态资源并将它们缓存在Squid缓存中。最难的部分是Squid配置，它缓存来自CDN主机的所有静态文件。在这个菜谱中，我们将假设这个配置已经完成，并且我们有一个用于资源的静态域名，例如，[http://static.mysite.com](http://static.mysite.com)
- en: How to do it…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'CDN configuration is very simple in Liferay. There are only two properties,
    which should be set in the `portal-ext.properties`. These properties are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Liferay中，CDN配置非常简单。只有两个属性需要在`portal-ext.properties`中设置。这些属性如下：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After successful CDN configuration, all of the static resources are served from
    an external domain. When we look inside HTML sources, we see that all static resources,
    such as CSS files, JavaScript files, and images, come from a different domain
    that was defined in the `cdn.host.http` property.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CDN配置成功后，所有静态资源都从外部域名提供。当我们查看HTML源代码时，我们会看到所有静态资源，如CSS文件、JavaScript文件和图像，都来自在`cdn.host.http`属性中定义的不同域名。
- en: In this recipe, we built our little CDN in which our Squid cache serves static
    resources.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们构建了我们的小型CDN，其中我们的Squid缓存提供静态资源。
- en: In huge systems, when the intended users are spread across the globe, it is
    necessary to use real CDN hosts, which are large networks of servers deployed
    across the world. There are several companies that provide this type of service,
    such as Amazon, CloudFlare, Bootstrap CDN, CacheFly, OVH, and so on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在庞大的系统中，当目标用户遍布全球时，使用真实的CDN主机是必要的，这些主机是部署在世界各地的服务器的大型网络。有几家公司提供此类服务，例如Amazon、CloudFlare、Bootstrap
    CDN、CacheFly、OVH等等。
- en: Disabling unused Liferay features
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用未使用的Liferay功能
- en: 'Everybody knows that Liferay is a big system with many functionalities. The
    main idea of this portal is: we give you all the features and you fit them to
    your needs. This topic can be divided into three parts: disabling unused servlet
    filters, disabling unused autologin hooks, and disabling unused features.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道Liferay是一个具有许多功能的庞大系统。这个门户的主要思想是：我们为您提供所有功能，您可以根据自己的需求进行适配。这个主题可以分为三个部分：禁用未使用的servlet过滤器、禁用未使用的自动登录钩子和禁用未使用的功能。
- en: How to do it…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Disabling unused filters allows you to increase performance, but you have to
    know which filters can be disabled. It is a difficult subject for beginners. Unfortunately,
    we cannot give you a golden rule that covers your needs. We will only try to give
    some advice and information about filters that can be turned off in the `portal-ext.properties`
    files:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用未使用的过滤器可以提高性能，但您必须知道哪些过滤器可以禁用。这对初学者来说是一个难题。不幸的是，我们无法给您一个涵盖您需求的黄金法则。我们只能尝试提供一些关于可以在`portal-ext.properties`文件中关闭的过滤器的建议和信息：
- en: If you don't use CAS authentication, disable the `com.liferay.portal.servlet.filters.sso.cas.CASFilter=false`
    filter
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用CAS身份验证，请禁用`com.liferay.portal.servlet.filters.sso.cas.CASFilter=false`过滤器
- en: If you use Gzip compression on Apache server, disable the `com.liferay.portal.servlet.filters.gzip.GZipFilter=false`
    filter
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在Apache服务器上使用Gzip压缩，请禁用`com.liferay.portal.servlet.filters.gzip.GZipFilter=false`过滤器
- en: 'If you don''t use NTLM authentication, disable the: `com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter=false`
    and `com.liferay.portal.servlet.filters.sso.ntlm.NtlmPostFilter=false` filters'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用NTLM身份验证，请禁用以下过滤器：`com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter=false`
    和 `com.liferay.portal.servlet.filters.sso.ntlm.NtlmPostFilter=false`
- en: If you don't use OpenSSO authentication, disable the `com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter=false`
    filter
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用OpenSSO身份验证，请禁用`com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter=false`过滤器
- en: If you don't use SharePoint, disable the `com.liferay.portal.sharepoint.SharepointFilter=false`
    filter
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用SharePoint，请禁用`com.liferay.portal.sharepoint.SharepointFilter=false`过滤器
- en: If you use Tomcat server to remove blank lines and whitespaces from the outputted
    content, disable the `com.liferay.portal.servlet.filters.strip.StripFilter=false`
    filter
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用Tomcat服务器从输出内容中删除空白行和空格，请禁用`com.liferay.portal.servlet.filters.strip.StripFilter=false`过滤器
- en: 'The next configuration is to connect with authentication systems. Liferay supports
    many single-sign-on systems, which are enabled by default. Remove unused `AutoLogin`
    hooks from the following property:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个配置是连接到身份验证系统。Liferay支持许多单点登录系统，默认情况下已启用。从以下属性中删除未使用的`AutoLogin`钩子：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you disable the `auto.login.hooks` definition, make sure that every autologin
    definition is also disabled under the properties with the `com.liferay.portal.servlet.filters.sso`
    prefix. For instance, if you disable `com.liferay.portal.security.auth.NtlmAutoLogin`,
    check whether `com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter` is set
    as `false`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你禁用了`auto.login.hooks`定义，请确保在具有`com.liferay.portal.servlet.filters.sso`前缀的属性下也禁用了每个自动登录定义。例如，如果你禁用了`com.liferay.portal.security.auth.NtlmAutoLogin`，请检查`com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter`是否设置为`false`。
- en: 'The last configuration disables some features that affect the performance:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个配置禁用了一些影响性能的功能：
- en: 'If you don''t use user session tracker or this functionality is not required,
    disable the: `session.tracker.memory.enabled=false` property'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有使用用户会话跟踪器或此功能不是必需的，请禁用：`session.tracker.memory.enabled=false`属性
- en: If you don't use the read count for document library files, disable the `dl.file.entry.read.count.enabled=false`
    property
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有使用文档库文件的阅读计数，请禁用`dl.file.entry.read.count.enabled=false`属性
- en: If you don't use file rank for document library files, disable the `dl.file.rank.enabled=false`
    property
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有使用文档库文件的文件排名，请禁用`dl.file.rank.enabled=false`属性
- en: If you don't use the view counter for assets, disable the `asset.entry.increment.view.counter.enabled=false`
    property
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有使用资产视图计数器，请禁用`asset.entry.increment.view.counter.enabled=false`属性
- en: 'Disable pingbacks and trackbacks if you don''t use them:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有使用pingback和trackback，请禁用它们：
- en: '[PRE15]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Liferay gives users a file called `portal.properties` that can be overridden
    by the `portal-ext.properties` configuration file. The `portal.properties` file
    is located in the `portal-impl/src/` folder. This is the main tool to customize
    the Liferay Portal and disable unnecessary options. Every administrator and developer
    should study this file and try to fit portal to the project's requirements. It
    is hard work, because the configuration file has more than 10,000 lines. The good
    news is that every property has a comment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay提供了一个名为`portal.properties`的文件，该文件可以被`portal-ext.properties`配置文件覆盖。`portal.properties`文件位于`portal-impl/src/`文件夹中。这是自定义Liferay门户和禁用不必要的选项的主要工具。每个管理员和开发人员都应该研究这个文件，并尝试使门户符合项目的需求。这是一项艰巨的工作，因为配置文件有超过10,000行。好消息是每个属性都有注释。
- en: JVM tuning
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM调优
- en: 'JVM tuning is an operation that should be done after performance tests or during
    production. JVM configuration affects the Java application''s performance. There
    are two necessary configurations:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: JVM调优是一项应该在性能测试之后或在生产期间进行的操作。JVM配置会影响Java应用程序的性能。有两个必要的配置：
- en: Memory settings (such as heap configuration)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存设置（如堆配置）
- en: Garbage collector settings
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集器设置
- en: There are a lot of publications about JVM tuning. Thus, in this recipe, we will
    only mention the main aspects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JVM调优有很多出版物。因此，在这个菜谱中，我们只将提及主要方面。
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Every JVM setting can be set in `JAVA_OPTS` (Java Environment Options). A great
    place to do it is in the `${TOMCAT_HOME}/bin/setenv.sh` file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JVM设置都可以在`JAVA_OPTS`（Java环境选项）中设置。一个很好的地方是在`${TOMCAT_HOME}/bin/setenv.sh`文件中设置。
- en: 'First, let''s set a proper garbage collector. The best option for portal systems
    is **Concurrent Collector** or **G1** (in Java 8). These garbage collectors perform
    most of their work concurrently with only a small period of stop-the-world time.
    These garbage collectors give the best performance. The typical setting is as
    follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置一个合适的垃圾收集器。对于门户系统来说，最佳选项是**并发收集器**或**G1**（在Java 8中）。这些垃圾收集器大部分工作都是并发执行的，只有很短的停顿时间。这些垃圾收集器提供了最佳的性能。典型的设置如下：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following settings are connected with memory allocation. It is very hard
    to estimate the correct configuration. Our experience shows that the best performance
    is when each node has equal to or more than 8 GB RAM. Our setting looks as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下设置与内存分配相关。正确配置的估计非常困难。我们的经验表明，当每个节点有8 GB RAM或更多时，性能最佳。我们的设置如下所示：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Every project has a different memory characteristic. The given JVM settings
    form the initial configuration and should be verified by your Java engineering
    team.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都有不同的内存特性。给定的JVM设置形成初始配置，应由您的Java工程团队进行验证。
- en: How it works…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We mentioned that the best garbage collector for portal solutions is Concurrent
    Collector or G1\. Let''s analyze each setting in our `JAVA_OPTS` variable:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到，对于门户解决方案来说，最好的垃圾回收器是并发收集器或G1。让我们分析一下我们的`JAVA_OPTS`变量中的每个设置：
- en: '`+UseParNewGC`: This turns on the parallel young generation collector.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+UseParNewGC`: 这将开启并行年轻代收集器。'
- en: '`+UseConcMarkSweepGC`: This turns on concurrent mark-sweep collection for the
    old generation.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+UseConcMarkSweepGC`: 这将开启旧代的并发标记清除收集。'
- en: '`+CMSParallelRemarkEnabled`: This enables the garbage collector to use multiple
    threads during the CMS remark phase. This decreases the pauses during this phase.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+CMSParallelRemarkEnabled`: 这使垃圾回收器能够在CMS remark阶段使用多个线程。这减少了这一阶段的暂停时间。'
- en: '`ParallelGCThreads`: The number of threads used during parallel phases of the
    garbage collectors. It shouldn''t be more than the number of cores (processors)
    on the server.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ParallelGCThreads`: 垃圾回收器并行阶段使用的线程数。它不应超过服务器上的核心（处理器）数量。'
- en: '`+CMSScavengeBeforeRemark`: This forces young space collection before CMS remark.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+CMSScavengeBeforeRemark`: 这将强制在CMS remark之前进行年轻空间收集。'
- en: '`+CMSConcurrentMTEnabled`: This allows CMS to use multiple cores for concurrent
    phases.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+CMSConcurrentMTEnabled`: 这允许CMS在并发阶段使用多个核心。'
- en: '`ParallelCMSThreads`: This controls the number of threads used for the CMS
    (concurrent mark and sweep) garbage collector.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ParallelCMSThreads`: 这控制用于CMS（并发标记清除）垃圾回收器的线程数。'
