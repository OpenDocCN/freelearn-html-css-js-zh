- en: Extending Ionic with Angular Building Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular构建块扩展Ionic
- en: 'In this chapter, we will cover the following tasks related to creating custom
    components, directives, and filters with Angular:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与创建自定义组件、指令和过滤器相关的以下任务，使用Angular：
- en: Creating a custom pizza ordering component
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义披萨订购组件
- en: Creating a custom username input directive
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义用户名输入指令
- en: Creating a custom pipe
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: Creating a shared service to provide data to multiple pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于向多个页面提供数据的共享服务
- en: Reusing an existing page as an HTML element
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有页面作为HTML元素重用
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Most of Ionic's out-of-the-box features are actually prebuilt components. In
    this section, you will learn how to create your own custom component using the
    HTML template, which contains Ionic components as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Ionic的内置功能实际上是预构建的组件。在本节中，你将学习如何使用包含Ionic组件的HTML模板创建自己的自定义组件。
- en: 'Components actually define Angular. A component is no more than just a class
    with self-describing features. For example, `<ul>` is a component that you are
    already familiar with. Previously, you used various Ionic components, such as
    `<ion-list>` and `<ion-item>`. A component is a decorator (that is, `@Component`)
    to add metadata to a class to describe the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 组件实际上定义了Angular。组件不过是一个具有自我描述功能的类。例如，`<ul>`是一个你已经熟悉的组件。以前，你使用了各种Ionic组件，如`<ion-list>`和`<ion-item>`。组件是一个装饰器（即`@Component`），用于向类添加元数据以描述以下内容：
- en: '**selector**: This is the name that is to be used in the DOM (for example,'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：这是要在DOM中使用的名称（例如，'
- en: '`<my-component>`)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<my-component>`)'
- en: '**template or templateUrl**: This refers to the way the component is rendered'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板或templateUrl**：这指的是组件的渲染方式'
- en: '**directives**: This refers to a list of directive dependencies you plan to
    use inside'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**：这指的是你计划在内部使用的指令依赖项列表'
- en: the component
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组件
- en: '**providers**: This is a list of providers (that is, services) you plan to
    use inside'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供者**：这是你计划在内部使用的提供者（即服务）列表'
- en: the component
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组件
- en: Of course, there are many other options, but the preceding four options are
    the most common ones.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他选项，但前面的四个选项是最常见的。
- en: Creating a custom pizza ordering component
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义披萨订购组件
- en: 'In this section, you will build an app to demonstrate a custom component with
    its private variables and template. Observe the following screenshot of a pizza
    ordering component:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个应用程序来演示具有其私有变量和模板的自定义组件。观察以下披萨订购组件的截图：
- en: '![](img/75111aef-b788-40a9-b6c3-b46b086ab9ee.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75111aef-b788-40a9-b6c3-b46b086ab9ee.png)'
- en: 'The user will not notice which area is part of the page, as opposed to being
    a self-contained component. Your custom component here is the only area where
    the list is *listening* to the Vegetarian check box:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用户不会注意到哪个区域是页面的一部分，而不是一个自包含的组件。你这里的自定义组件是唯一一个列表正在“监听”素食者复选框的区域：
- en: '![](img/04de2bf0-8597-40cb-9e71-f79f091c1646.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04de2bf0-8597-40cb-9e71-f79f091c1646.png)'
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following instructions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下说明：
- en: 'Create a new `MyComponent` app using the `blank` template, as shown, and go
    into the `MyComponent` folder:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`MyComponent`应用程序，如图所示，然后进入`MyComponent`文件夹：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `./src/pages/home/home.html` file and replace the content with the
    following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件，将其内容替换为以下代码：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is your root page containing `<my-component>`, which will be defined later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含`<my-component>`的根页面，它将在稍后定义。
- en: 'Open `./app/pages/home/home.ts` for editing globally with the following code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./app/pages/home/home.ts`文件进行全局编辑，以下代码：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You simply have to declare `MyComponent` as a dependency. A component is basically
    just a directive with a template, (assuming you are familiar with the directive
    concept of Angular 1).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需将`MyComponent`声明为依赖项。组件基本上只是一个具有自我描述功能的类（假设你熟悉Angular 1的指令概念）。
- en: 'Now, let''s create the component by first creating a directive, as illustrated
    in the following code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们首先创建一个指令，然后创建组件，如下所示代码所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a `foo.ts` file in the `components` directory that you just created,
    as shown in the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的`components`目录中创建一个`foo.ts`文件，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create `foo.html` in the `./src/components` folder, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/components`文件夹中创建`foo.html`，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify `./src/app/app.module.ts`, as illustrated, so that you can declare `MyComponent`.
    Observe the following code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`./src/app/app.module.ts`，如图所示，以便你可以声明`MyComponent`。观察以下代码：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go to your Terminal and run the app using the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端，使用以下命令运行应用：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You may wonder why it''s necessary to create a component just to toggle a list
    of pizza topping options. The answer is that this is just a demonstration of how
    you can compartmentalize your app using a component. The key things that you have
    done are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么需要创建一个组件来切换披萨配料选项列表。答案是，这只是一个演示，说明你可以如何使用组件来模块化你的应用。你完成的关键步骤如下：
- en: You created a custom component, called `<my-component>`, which can be used anywhere,
    including outside your app.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你创建了一个自定义组件，名为`<my-component>`，可以在任何地方使用，包括在你的应用外部。
- en: The data within your component is completely private. This means that nobody
    else can access it without calling a method within your component's class.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件内的数据是完全私有的。这意味着没有人在不调用组件类中的方法的情况下可以访问它。
- en: You can add or change behaviors within your component without impacting on other
    areas outside the component.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在组件内部添加或更改行为，而不会影响组件外部的其他区域。
- en: 'To create a component, you need to ensure that you import the `@Component`
    decorator, as shown, from Angular itself (and not from Ionic):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个组件，你需要确保从Angular本身（而不是从Ionic）导入`@Component`装饰器，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In your `component` template, everything is local to what is inside the `component`
    class. So, you can bind the click event using `click`, as shown in the following
    code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`component`模板中，所有内容都是局部于`component`类内部的。因此，你可以使用`click`绑定点击事件，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Just as in Angular 1, you need to use `[(ngModel)]` to declare that you want
    `data.myToggle` to be your model. The `[(..)]` part is to tell Angular 2 that
    this is a two-way binding.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Angular 1中一样，你需要使用`[(ngModel)]`来声明你想要`data.myToggle`作为你的模型。`[(..)]`部分是为了告诉Angular
    2这是一个双向绑定。
- en: 'There are two lists of pizza toppings. The first one is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个披萨配料列表。第一个列表如下：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second list of pizza toppings is as shown:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个披萨配料列表如下所示：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To toggle the visibility of each list based on the `data.myToggle` model, you
    can use `*ngIf`, which is very similar to `ng-if` from Angular 1.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据`data.myToggle`模型切换每个列表的可见性，你可以使用`*ngIf`，它与Angular 1中的`ng-if`非常相似。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: To see more information about components in the Angular documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/architecture.html#!#component](https://angular.io/docs/ts/latest/guide/architecture).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Angular文档中组件的信息，你可以访问[https://angular.io/docs/ts/latest/guide/architecture.html#!#component](https://angular.io/docs/ts/latest/guide/architecture)。
- en: Creating a custom username input directive
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义用户名输入指令
- en: 'Since you have gone through the process of creating a component in the preceding
    section, you may wonder what the difference is between a component and a directive.
    If you have some experience with Angular 1, you may notice that it had no definition
    of a component. Starting in Angular 2, there are the following three kinds of
    directive:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在前一节中已经完成了创建组件的过程，你可能想知道组件和指令之间的区别是什么。如果你有一些Angular 1的经验，你可能注意到它没有组件的定义。从Angular
    2开始，有以下三种类型的指令：
- en: '| **Kind** | **Description** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| Components | They have a template and a class associated with the component
    (that is, `ion-input`) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 它们有一个与组件关联的模板和类（即`ion-input`）|'
- en: '| Structural directives | They change the DOM structure within the scope of
    where it is (that is, `*ngIf` or `*ngFor`) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 结构指令 | 它在它所在的范围内改变DOM结构（即`*ngIf`或`*ngFor`）|'
- en: '| Attribute directives | They change the appearance of the current DOM by intercepting
    its display or events |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 属性指令 | 它通过拦截其显示或事件来改变当前DOM的外观 |'
- en: 'You may have a mix of both structural and attribute characteristics in the
    same directive. In this section, you will learn how to create an attribute directive
    that can prevent certain characters from being input in the Username, as well
    as showing another DOM node (where it says You are typing username) by toggling
    its visibility. Observe the following screenshot of the app:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在一个指令中同时具有结构和属性特征。在本节中，你将学习如何创建一个属性指令，它可以防止在用户名中输入某些字符，并通过切换其可见性显示另一个DOM节点（即显示“你正在输入用户名”）。观察以下应用的截图：
- en: '![](img/d07ca37a-84fa-43ec-adaf-ca62673defe4.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d07ca37a-84fa-43ec-adaf-ca62673defe4.png)'
- en: The GO button is there just for cosmetic purposes, and you will not need to
    write any code for it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GO按钮只是为了美观，你不需要为它编写任何代码。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Observe the following instructions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察以下说明：
- en: 'Create a new `MyIonicInputDirective` app using the `blank` template, as shown,
    and go into the `MyIonicInputDirective` folder:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`MyIonicInputDirective`应用，如下所示，并进入`MyIonicInputDirective`文件夹：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/app/pages/home/home.html`文件，并用以下代码替换内容：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As mentioned earlier, the GO button is just an example of the new floating button
    feature from Ionic. All you need to do is include `bottom` and `center` in order
    to position it. These are actually good examples of attribute directives.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，GO按钮只是Ionic新浮动按钮功能的一个示例。你所需要做的只是包含`bottom`和`center`来定位它。这些实际上是属性指令的好例子。
- en: 'Open `home.ts`, in the same folder as in the preceding step, to edit and insert
    the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一步骤所在的文件夹中打开`home.ts`，进行编辑并插入以下代码：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `./src/directives` folder, as shown in the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`./src/directives`文件夹，如下所示：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the `my-ionic-input.ts` file in the `directives` folder and copy in
    the following code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`directives`文件夹中创建`my-ionic-input.ts`文件，并复制以下代码：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open and edit `./src/app/app.module.ts` to declare your new directive, as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`以声明你的新指令，如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Go to your Terminal and run the app, as shown:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端并运行应用，如下所示：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `homepage` template (`home.html`) is very typical with `ion-list` and `ion-item`,
    which contain your input elements. However, there are two important things to
    take note of. Firstly, there is an attribute, called `myIonicInput`, in the `ion-input`
    component. Observe the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`homepage`模板（`home.html`）非常典型，使用了`ion-list`和`ion-item`，它们包含了你的输入元素。然而，有两件重要的事情需要注意。首先，在`ion-input`组件中有一个名为`myIonicInput`的属性。观察以下代码：'
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Secondly, the `myStyles` object is now used to toggle the visibility of the
    `<p>` element,
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`myStyles`对象现在用于切换`<p>`元素的可见性，
- en: 'as shown:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This `myStyles` object is actually a `private` variable in your `HomePage`
    class in the `home.ts` file, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`myStyles`对象实际上是你`home.ts`文件中`HomePage`类的一个`private`变量，如下所示：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With TypeScript, you could assign a type (that is, an object) to a variable
    with a default value. You may also note that `MyIonicInputDirective` should be
    declared for a dependency to be injected into the template directives.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript，你可以将一个类型（即一个对象）赋给一个变量，并设置一个默认值。你也许还会注意到，`MyIonicInputDirective`应该被声明以便将其注入到模板指令中。
- en: 'To create a basic directive, you must import at least `Directive` and `ElementRef`
    in order to manipulate the DOM. However, since this `Directive` has input (that
    is, `myStyles`), you should also import `Input` in your `my-ionic-input.ts`, as
    illustrated in the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个基本的指令，你必须至少导入`Directive`和`ElementRef`以操作DOM。然而，由于这个`Directive`有输入（即`myStyles`），你应在`my-ionic-input.ts`中导入`Input`，如下所示：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You have `selector` and `host` metadata in your directive, as shown:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的指令中，有`selector`和`host`元数据，如下所示：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `myIonicInput` selector will be queried from the DOM and will trigger *actions*
    on that DOM node. For event detection on the DOM, you have to map the event name
    to the `class` method. For example, the `mouseenter` event will trigger a call
    to the `onMouseEnter()` method in the directive's class, which is `MyIonicInputDirective`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`myIonicInput`选择器将从DOM中查询，并触发该DOM节点的*动作*。对于DOM上的事件检测，你必须将事件名称映射到`class`方法。例如，`mouseenter`事件将触发指令类`MyIonicInputDirective`中的`onMouseEnter()`方法的调用。'
- en: 'Now, let''s look more closely at the directive''s class:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看指令的类：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `@Input` decorator is used to declare that you will bring in a variable
    from the template. This is the reason why you must have the square brackets `[myIonicInput]="myStyles"`.
    Otherwise, `myStyles` would just be a string instead of an expression referring
    to the `myStyles` object from the `HomePage` class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Input`装饰器用于声明你将从模板中引入一个变量。这就是为什么你必须有`[myIonicInput]="myStyles"`的原因。否则，`myStyles`将只是一个字符串，而不是指向`HomePage`类中`myStyles`对象的表达式。'
- en: Another interesting thing to note here is the code inside `constructor`. `ElementRef`
    is pointing to the same DOM at which you placed your attribute directive. You
    want to modify the behavior of the keyboard using `el.nativeElement.onkeypress`
    so that special characters won't be allowed. If the user enters a special character,
    it will trigger `e.preventDefault()` and nothing will happen. The keyboard event
    is basically discarded. You may wonder why we cannot just use the `keypress` event
    and map it to `onKeyPress`, which was intentionally commented out. The reason
    is that you are placing the `myIonicInput` directive on top of `ion-input`. But
    the actual `<input>` DOM is just a child of `ion-input`. Therefore, if you listen
    to the `keypress` event on the parent `ion-input`, you won't be able to bind it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个值得注意的有趣之处是 `constructor` 中的代码。`ElementRef` 指向你放置属性指令的相同 DOM。你想要使用 `el.nativeElement.onkeypress`
    来修改键盘的行为，以便不允许特殊字符。如果用户输入了特殊字符，它将触发 `e.preventDefault()` 而不会发生任何事情。键盘事件基本上被丢弃。你可能想知道为什么我们不能直接使用
    `keypress` 事件并将其映射到 `onKeyPress`，这被故意注释掉了。原因是你在 `ion-input` 上放置了 `myIonicInput`
    指令。但实际上 `<input>` DOM 只是 `ion-input` 的子元素。因此，如果你在父 `ion-input` 上监听 `keypress`
    事件，你将无法绑定它。
- en: The `onMouseEnter` and `onMouseLeave` methods are self-explanatory because they
    just toggle the `myStyles.showUsername` variable. Again, this `myStyles` object
    is just a reference back to the `myStyles` of `HomePage`. So, if you change the
    variable here, it will change at the home page's level as well.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`onMouseEnter` 和 `onMouseLeave` 方法是自我解释的，因为它们只是切换 `myStyles.showUsername` 变量。再次强调，这个
    `myStyles` 对象只是对 `HomePage` 中的 `myStyles` 的引用。因此，如果你在这里更改变量，它也会在主页级别上更改。'
- en: See also
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about Angular 2 directives, you can refer to the official
    documentation at [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Angular 2 指令的更多信息，你可以参考官方文档：[https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
- en: 'Since this is the first section in which TypeScript appears, it might be helpful
    to go through the handbook for more details: [http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于这是 TypeScript 首次出现的地方，查看手册以获取更多细节可能会有所帮助：[http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html)
- en: Creating a custom pipe
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: 'Pipes are also a feature of Angular and are not specific to Ionic. If you are
    familiar with Angular 1, a *pipe* is exactly the same thing as a *filter*. The
    main reason you might want to use pipes is to display data in a different format
    in the view. You don''t want to change the actual value in the component. This
    makes things very convenient because you don''t have to decide on the specific
    format within the code while leaving flexibility in the view layer. Here is a
    list of some useful built-in pipes (from [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 管道也是 Angular 的一个特性，并不特定于 Ionic。如果你熟悉 Angular 1，那么一个 *pipe* 与一个 *filter* 完全相同。你可能想要使用管道的主要原因是在视图中以不同的格式显示数据。你不想在组件中更改实际值。这使得事情变得非常方便，因为你不需要在代码中决定具体的格式，同时在视图层保持灵活性。以下是一些有用的内置管道列表（来自
    [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)）：
- en: '`AsyncPipe`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AsyncPipe`'
- en: '`DatePipe`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatePipe`'
- en: '`NumberPipe`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NumberPipe`'
- en: '`SlicePipe`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SlicePipe`'
- en: '`DecimalPipe`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DecimalPipe`'
- en: '`JsonPipe`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JsonPipe`'
- en: '`PercentPipe`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PercentPipe`'
- en: '`UpperCasePipe`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpperCasePipe`'
- en: '`LowerCasePipe`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LowerCasePipe`'
- en: '`CurrencyPipe`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CurrencyPipe`'
- en: '`ReplacePipe`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReplacePipe`'
- en: 'In this section, you will learn how to create a custom pipe using the `@Pipe`
    decorator. The following is a screenshot of the app:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何使用 `@Pipe` 装饰器创建一个自定义管道。以下是该应用的截图：
- en: '![](img/1f483db6-c39e-43eb-a644-964fd124a5e7.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f483db6-c39e-43eb-a644-964fd124a5e7.png)'
- en: While the app interface is very simple, the purpose of this example is to show
    you how to create a pipe to extract object data.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然应用界面非常简单，但本例的目的是向你展示如何创建一个管道来提取对象数据。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test on a physical device because the Angular pipe will
    work just fine in the web browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要在物理设备上进行测试，因为 Angular 管道在网页浏览器中运行得很好。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Observe the following instructions:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细阅读以下说明：
- en: 'Create a new `CustomPipe` app using the `blank` template, as shown, and go
    to the `CustomPipe` folder:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的 `CustomPipe` 应用，如图所示，然后转到 `CustomPipe` 文件夹：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.html` 文件，并使用以下代码修改内容：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can quickly see that the template uses the `userExtract` pipe to render
    the correct information.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以快速看到模板使用了 `userExtract` 管道来渲染正确的信息。
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 `./src/pages/home/home.ts` 的内容替换为以下代码：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You don't have the `custom-pipe.ts` file yet, so you need to create it next.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你还没有 `custom-pipe.ts` 文件，所以你需要先创建它。
- en: 'Create the `./src/utils` folder by using the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建 `./src/utils` 文件夹：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can call this folder anything. However, since pipes are sometimes considered
    *utility* functions, let's call it `utils`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以给这个文件夹起任何名字。然而，由于管道有时被认为是 *工具* 函数，让我们称它为 `utils`。
- en: 'Create the `custom-pipe.ts` file in the `utils` folder and copy the following
    code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `utils` 文件夹中创建 `custom-pipe.ts` 文件，并复制以下代码：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add `UserExtractPipe` to `./src/app/app.module.ts` by replacing it with the
    following code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过替换以下代码将 `UserExtractPipe` 添加到 `./src/app/app.module.ts`：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Go to your Terminal and run the app, as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行应用程序，如下所示：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You can use an Angular pipe in the view to simply convert or transform any
    value to a desired value. There are no limitations to how you structure the pipe.
    Angular automatically detects the `|` sign in the template and turns the value
    in front of it to an input. To create a pipe, you must import the decorator and
    provide a name (see `custom-pipe.ts`), as shown:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在视图中使用 Angular 管道来简单地转换或转换任何值到期望的值。你对管道的结构没有任何限制。Angular 会自动检测模板中的 `|` 符号，并将它前面的值转换为输入。要创建一个管道，你必须导入装饰器并提供一个名称（参见
    `custom-pipe.ts`），如下所示：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The input from the template is the following `value` parameter:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 来自模板的输入是以下 `value` 参数：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The value returned by the `transform` method will be the output to the view,
    as shown in the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform` 方法返回的值将是视图的输出，如下面的代码所示：'
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this example, you are taking a parameter for the pipe to process, as illustrated
    in the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你正在为管道处理提供一个参数，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For example, this is what you had in the `home.html` template:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是 `home.html` 模板中的内容：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Each parameter is placed after a colon (`:`). Then, within your `@Pipe` class,
    you can refer to it using `arg`. The rest of the code is very simple, as already
    shown in the preceding section. Observe the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数都放在冒号（`:`）之后。然后，在你的 `@Pipe` 类中，你可以使用 `arg` 来引用它。其余的代码非常简单，如前所述。观察以下内容：
- en: If it's `firstname`, take the first word
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 `firstname`，取第一个单词
- en: If it's `lastname`, take the last word
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 `lastname`，取最后一个单词
- en: If it's `age`, subtract the current year from the birth year
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 `age`，从出生年份减去当前年份
- en: Of course, you could have more complicated scenarios with pipes. However, the
    overall recommendation is to keep things simple in the view to ensure rendering
    performance. If you need to do heavy processing, it's best to handle it as a separate
    variable.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能会有更复杂的管道场景。然而，总体建议是在视图中保持简单，以确保渲染性能。如果你需要进行大量处理，最好将其作为一个单独的变量来处理。
- en: See also
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: To understand more about Angular pipes, you can check out the official documentation
    at [https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Angular 管道的知识，你可以查看官方文档[https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
- en: Creating a shared service to provide data to multiple pages
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个共享服务以向多个页面提供数据
- en: When you develop an app that involves a lot of pages and communication to the
    backend, you will need to have a way to communicate across pages and components.
    For example, you may have a service to request user data from the backend and
    store it in a common local service. Then, you will need to provide a way for the
    user to update their user data and see the update in real time. When the user
    navigates to different pages, the same information will be pulled and rendered
    too, without making multiple trips to the backend. This is a very common scenario
    that requires the use of the `@Injectable` decorator in Angular.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发一个涉及大量页面和与后端通信的应用程序时，你需要有一种跨页面和组件进行通信的方式。例如，你可能有一个服务从后端请求用户数据并将其存储在公共本地服务中。然后，你需要提供一个让用户更新他们的用户数据并实时看到更新的方法。当用户导航到不同的页面时，相同的信息也会被拉取并渲染，而不需要多次访问后端。这是一个非常常见的场景，需要使用
    Angular 中的 `@Injectable` 装饰器。
- en: 'Observe the following screenshot of the app you will build:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 观察你将构建的应用的以下截图：
- en: '![](img/b95ec01e-4ca2-4557-9efb-41d738d9f986.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b95ec01e-4ca2-4557-9efb-41d738d9f986.png)'
- en: 'The user can fill out the form and see updates on it in real time. Then, they
    can move to the next page (Go to Page 2) and see the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以填写表格并实时查看更新。然后，他们可以转到下一页（转到第2页）并查看以下截图：
- en: '![](img/41b98302-4932-4fb6-8351-4027cd93f30f.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41b98302-4932-4fb6-8351-4027cd93f30f.png)'
- en: 'This page uses the same service as the preceding page and references the same
    date with the name and age. You will learn the following topics in this section:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本页使用与前一页相同的`service`，并引用相同的日期，带有姓名和年龄。在本节中，你将学习以下主题：
- en: Creating a service using `@Injectable`
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@Injectable`创建服务
- en: Sharing a service across multiple pages
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个页面间共享服务
- en: Detecting changes using getters and setters inside the service
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务内部使用getter和setter检测变化
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用示例可以在浏览器或物理设备上运行。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Observe the following instructions:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下说明：
- en: 'Create a new `SharedService` app using the `blank` template as shown and go
    to the `SharedService` folder:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用如下所示的`blank`模板创建一个新的`SharedService`应用，并转到`SharedService`文件夹：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You will need to make several changes in the directory because you have two
    pages and a common service for both. Let''s start by modifying the `./src/app/app.component.ts`
    file so that the `rootPage` is pointing to `Page1`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你有两个页面和一个为两者共用的服务，你需要在目录中进行一些更改。让我们首先修改`./src/app/app.component.ts`文件，以便`rootPage`指向`Page1`：
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create `./src/pages/page1`, as shown in the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`./src/pages/page1`，如下所示：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create your first template, `page1.html`, in the `page1` folder with the following
    code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`page1`文件夹中创建你的第一个模板`page1.html`，如下所示：
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create `page1.ts` in the `page1` folder, as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`page1`文件夹中创建`page1.ts`，如下所示：
- en: '[PRE41]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The file extension is `.ts`, and not `.js`, because you are going to use some
    TypeScript-specific features, such as getters and setters.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 文件扩展名是`.ts`，而不是`.js`，因为你将使用一些TypeScript特定的功能，例如getter和setter。
- en: 'Similarly, create the `page2` folder using the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，使用以下命令创建`page2`文件夹：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `page2.html` template in the `page2` folder as well, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`page2`文件夹中同样添加`page2.html`模板，如下所示：
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is your second page with the same `name` and `age` information.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的第二页，带有相同的`name`和`age`信息。
- en: 'Create `page2.ts` in the `page2` folder with the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`page2`文件夹中创建`page2.ts`，如下所示：
- en: '[PRE44]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create the `services` folder with the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`services`文件夹：
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Put `UserService` in the `user.ts` file, in the `services` folder, as shown:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UserService`放入`services`文件夹中的`user.ts`文件，如下所示：
- en: '[PRE46]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open and edit `./src/app/app.module.ts` so that you can inject `UserService`
    as a global provider and declare `Page1` and `Page2` :'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`，以便你可以将`UserService`作为全局提供者注入，并声明`Page1`和`Page2`：
- en: '[PRE47]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Verify that your folder structure looks like the following screenshot:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的文件夹结构看起来像以下截图：
- en: '![](img/1f8aceb7-1d72-4fbd-8414-e2e9eeee4085.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f8aceb7-1d72-4fbd-8414-e2e9eeee4085.png)'
- en: 'Go to your Terminal and run the app with the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中运行以下命令来运行应用：
- en: '[PRE48]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can move from `page 1` to `page 2` and then back, and the data will persist
    across the pages.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从`page 1`移动到`page 2`，然后再返回，数据将在页面间持久化。
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In general, if you want to use a common service across multiple pages, you
    must inject it at the highest level. In this example, you put `UserService` as
    a dependency at the start of `app.module.ts`, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你想在多个页面间使用一个通用服务，你必须在其最高级别注入它。在这个例子中，你将`UserService`作为依赖项放在`app.module.ts`的开始处，如下所示：
- en: '[PRE49]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: After that, other pages within the app can start using this common service without
    having to reinject it. The main reason is that, whenever you inject a service
    or class, it will instantiate a new object, which ends up erasing all of the existing
    data in the memory. If you want the data to persist across the pages, it should
    be in the parent app to avoid reinjection.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，应用内的其他页面可以开始使用这个通用服务，而无需重新注入。主要原因在于，每次你注入一个服务或类时，它都会实例化一个新的对象，这最终会清除内存中所有现有的数据。如果你想数据在页面间持久化，它应该位于父应用中，以避免重新注入。
- en: 'To use the `UserService` on each page, you just need to import it, as illustrated
    in the following code:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要在每一页使用`UserService`，你只需导入它，如下所示：
- en: '[PRE50]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The way to bring in the service is to put the referencing in the constructor
    (`page1.ts`),
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 引入服务的方法是在构造函数（`page1.ts`）中放置引用，
- en: 'as shown:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE51]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will pass down `UserService` reference to a local private variable of the
    page (in this case, `this.user`).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将 `UserService` 引用传递到页面的本地私有变量（在这种情况下，`this.user`）。
- en: From a template standpoint, there is no difference between using `{{ user.name
    }}` and `{{ user.age }}` to inject data.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板的角度来看，使用 `{{ user.name }}` 和 `{{ user.age }}` 注入数据之间没有区别。
- en: 'Now, let''s take a look at `UserService`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 `UserService`：
- en: '[PRE52]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Actually, there are several things going on here. Firstly, you need to import
    `Injectable` from
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这里有几个事情在进行。首先，你需要从
- en: '`@angular/core`.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`@angular/core`。'
- en: Don't forget the parentheses in `@Injectable()`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在 `@Injectable()` 中使用括号。
- en: 'Secondly, if you want to use getters and setters, you need to make separate
    variables, called `_name` and `_age`, to store the data. Then, you can use the
    get/set method to do additional processing when other pages access or set the
    variables in this common class. If you change the `name` or `age` from `Page 1`,
    you can see the following logs in the console:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，如果你想使用获取器和设置器，你需要创建单独的变量，称为 `_name` 和 `_age`，来存储数据。然后，你可以使用 get/set 方法在其他页面访问或设置这个公共类中的变量时进行额外的处理。如果你从“页面
    1”更改 `name` 或 `age`，你可以在控制台中看到以下日志：
- en: '![](img/df096e79-51e9-48ce-8e06-88e438b0a834.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df096e79-51e9-48ce-8e06-88e438b0a834.png)'
- en: This feature is very beneficial since you can use this as a replacement for
    `watch` or `observable`. If you recall from Angular 1, you have to use `$scope.$watch`
    for a similar approach.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性非常有用，因为你可以用它来替代 `watch` 或 `observable`。如果你还记得 Angular 1，你必须使用 `$scope.$watch`
    来实现类似的功能。
- en: See also
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: For more information about Angular 2 services, visit the official documentation
    at [https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于 Angular 2 服务的相关信息，请访问官方文档：[https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
- en: You can get great instructions on many techniques for component communication
    at [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
    上找到关于许多组件通信技术的详细说明。
- en: Reusing an existing page as an HTML element
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复使用现有的页面作为 HTML 元素
- en: 'So far, we have used Ionic pages using Ionic''s navigation system. In this
    recipe, we''re going to extend the existing page so that we can use it as an HTML
    element/component in the application. The following is the first page of the application:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了 Ionic 页面和 Ionic 的导航系统。在这个示例中，我们将扩展现有的页面，以便我们可以将其用作应用程序中的 HTML
    元素/组件。以下是应用程序的第一个页面：
- en: '![](img/1f6e4ee7-b5d9-4dcc-bcf8-9162bf3bfc13.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f6e4ee7-b5d9-4dcc-bcf8-9162bf3bfc13.png)'
- en: 'When you click on SHOW CONTACT PAGE, it shows the contact page with the information
    from the previous page as shown in the following screenshot:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击“显示联系页面”时，它会显示包含上一页信息的联系页面，如下面的截图所示：
- en: '![](img/81a446c6-f7b5-4400-a18d-0957a86b242d.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81a446c6-f7b5-4400-a18d-0957a86b242d.png)'
- en: We will reutilize this contact page as an HTML element in the application.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新利用这个联系页面作为应用程序中的 HTML 元素。
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we are using web functionalities, so we only need a web browser
    to run the application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 Web 功能，因此我们只需要一个 Web 浏览器来运行应用程序。
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these instructions:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明操作：
- en: 'Create a new app named `PageComponent` using the `blank` template, as shown
    in the following code block and go to the `PageComponent` folder:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的应用程序 `PageComponent`，如下面的代码块所示，并进入 `PageComponent` 文件夹：
- en: '[PRE53]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/app/pages/home/home.html` 文件，并用以下代码替换其内容：
- en: '[PRE54]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open the `./src/pages/home/home.ts` file and replace the content with the following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts` 文件，并用以下内容替换其内容：
- en: '[PRE55]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now create a folder, `./src/pages/contact`, and in the folder, create `contact.html`
    and add the following content:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个文件夹，`./src/pages/contact`，然后在文件夹中创建 `contact.html` 并添加以下内容：
- en: '[PRE56]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the same folder, create a file named `contact.ts` and add the following
    content to it:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个文件夹中，创建一个名为 `contact.ts` 的文件，并将其内容添加如下：
- en: '[PRE57]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now open`./src/app/app.modules.ts` and add `ContactPage` in `NgModule`''s `declarations`
    and the `entryComponents` list, as shown in the following code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `./src/app/app.modules.ts` 并在 `NgModule` 的 `declarations` 和 `entryComponents`
    列表中添加 `ContactPage`，如下面的代码所示：
- en: '[PRE58]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now go to the Terminal and run the app using the following command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到终端，使用以下命令运行应用程序：
- en: '[PRE59]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We already used multiple Ionic pages in the navigation, so we know that push/pop
    navigation works. Let''s take a closer look at how we define an Ionic Page as
    follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在导航中使用了多个 Ionic 页面，所以我们知道 push/pop 导航是如何工作的。让我们更仔细地看看我们是如何定义 Ionic 页面的，如下所示：
- en: '[PRE60]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You can see that an Ionic page is actually an Angular component, and we already
    know that we can use components as an HTML element using their `selector.` In
    the preceding example, selector of the page is `page-contact`. So technically
    we can use the selector in HTML. But it becomes a problem if our page is getting
    data from the previous page using `NavParams`. Let''s take a look at the constructor
    of `ContactPage`, shown in the following code block:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，Ionic 页面实际上是一个 Angular 组件，我们已经知道我们可以使用它们的 `selector` 将组件用作 HTML 元素。在上面的例子中，页面的选择器是
    `page-contact`。所以从技术上讲，我们可以使用选择器在 HTML 中。但如果我们的页面正在使用 `NavParams` 从上一页获取数据，这就会成为一个问题。让我们看看
    `ContactPage` 的构造函数，如下面的代码块所示：
- en: '[PRE61]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In the code, we are getting the user's information from the previous page using
    Ionic's navigation. So, if we want to use this component as an HTML element, we
    need to pass this data to the component somehow.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们使用 Ionic 的导航从上一页获取用户信息。因此，如果我们想将此组件作为 HTML 元素使用，我们需要以某种方式将此数据传递给组件。
- en: This is where `@Input` decorator is particularly useful. The `@Input` decorator
    allows us to pass data to the `component` as an input. So, we have `@Input() userInput`
    as an input to the component. This `userInput` has the same value as the user
    from `NavParams` shown in the preceding code. The only difference is `userInput`
    will have a value when we use the page component as an HTML element and `params.get('user')`
    will have a value when we use this component via Navigation Controlller.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `@Input` 装饰器特别有用之处。`@Input` 装饰器允许我们将数据作为输入传递给 `component`。因此，我们有一个 `@Input()
    userInput` 作为组件的输入。这个 `userInput` 的值与前面代码中显示的 `NavParams` 中的用户相同。唯一的区别是，当我们使用页面组件作为
    HTML 元素时，`userInput` 将会有值，而 `params.get('user')` 将会有值，当我们通过导航控制器使用此组件时。
- en: 'The following is the first page of the app:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该应用程序的第一页：
- en: '![](img/422c70e6-e631-4490-9a2f-91e495fbea7f.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/422c70e6-e631-4490-9a2f-91e495fbea7f.png)'
- en: 'When the user enters information in the input fields and then clicks on SHOW
    CONTACT PAGE, it opens the `ContactPage`, as shown in the following screenshot:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在输入字段中输入信息然后点击“显示联系人页面”时，它会打开 `ContactPage`，如下面的截图所示：
- en: '![](img/c738cbb1-65c9-4f42-8c28-4a9b490cb2aa.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c738cbb1-65c9-4f42-8c28-4a9b490cb2aa.png)'
- en: 'It is important to note that we might not want to show the header bar of the
    Ionic page when we are using it as an HTML component in other pages. If you take
    a look at `contact.html`**,** you will see that we hide the page''s header when
    we use it as an HTML component, as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，当我们将 Ionic 页面作为其他页面中的 HTML 组件使用时，可能不希望显示页面的标题栏。如果你查看 `contact.html`**，你会看到当我们将其用作
    HTML 组件时，我们会隐藏页面的标题，如下所示：
- en: '[PRE62]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'So, what we are saying is, only show the header when `userInput` is empty.
    This `userInput` is given as input via `@Input`, as described in the chapter.
    So, if you take a look at the `home.html` file, you will add the following code
    to show `ContactPage` inside `HomePage`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的意思是，只有当 `userInput` 为空时才显示标题。这个 `userInput` 是通过 `@Input` 传入的，正如章节中描述的那样。所以，如果你查看
    `home.html` 文件，你将在其中添加以下代码以在 `HomePage` 内显示 `ContactPage`：
- en: '[PRE63]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When we click on the TOGGLE CONTACT COMPONENT, it shows the same `Contact Page`
    inside `HomePage`, as shown in the following screenshot:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击“切换联系人组件”时，它会在 `HomePage` 内显示相同的 `Contact Page`，如下面的截图所示：
- en: '![](img/ed03fb62-cf6b-4ff8-9ba8-18e5ea2013b1.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed03fb62-cf6b-4ff8-9ba8-18e5ea2013b1.png)'
- en: See also
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Read more about Angular components at [https://angular.io/api/core/Component](https://angular.io/api/core/Component).
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于 Angular 组件的信息请参阅 [https://angular.io/api/core/Component](https://angular.io/api/core/Component)。
- en: Angular components have a life cycle and events related to it. We can hook up
    to any life cycle events such as destroy or initialize. Read more about life cycle
    hooks at [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks).
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 组件有生命周期和与之相关的事件。我们可以连接到任何生命周期事件，如销毁或初始化。更多关于生命周期钩子的信息请参阅 [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks)。
