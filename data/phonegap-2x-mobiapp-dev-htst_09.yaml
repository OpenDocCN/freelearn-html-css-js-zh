- en: Chapter 9. Blending In
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。融入
- en: CSS, HTML, and JavaScript can take us a long way to building an app that feels
    99 percent native. That is, it almost feels native, it looks nearly native, and
    it acts mostly native. But if you take a closer look, you can see the small differences
    that tell any user with a lot of experience with their device that things really
    aren't native. To help overcome this, we can *blend in* to our environment using
    plugins that use real, true-blue native components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS、HTML和JavaScript可以让我们在构建感觉99%原生的应用方面走得很远。也就是说，它几乎感觉原生，看起来几乎原生，行为上主要是原生。但如果你仔细观察，你可以看到那些告诉任何有丰富设备经验的用户，事情其实并不原生的小差异。为了帮助克服这一点，我们可以使用插件来*融入*我们的环境，这些插件使用真正的、纯正的原生组件。
- en: What do we build?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将构建什么？
- en: We're going to revisit the `Socializer` app from [Project 2](ch02.html "Chapter 2. Let's
    Get Social!"), *Lets Get Social!* It's a good fit for blending in, and we can
    easily add our native components on to it without worrying too much about changing
    a lot of the app itself. There are some minor changes, of course, but in general,
    it works much the same, and even gains a little functionality in the process!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新审视[项目2](ch02.html "第2章。让我们社交吧！")中的`Socializer`应用，*让我们社交吧！*它非常适合融入，我们可以在不担心太多改变应用本身的情况下轻松地添加我们的原生组件。当然，有一些小的变化，但总体来说，它的工作方式几乎相同，甚至在过程中增加了一些功能！
- en: What does it do?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它有什么作用？
- en: Although, we will add a couple of features to the app, the primary goal here
    is to use native components. For this, we'll be taking advantage of several great
    plugins in the PhoneGap Plugins repository ([http://github.com/phonegap/phonegap-plugins/tree/master/iOS](http://github.com/phonegap/phonegap-plugins/tree/master/iOS)).
    As the URL implies, we'll be doing this for iOS only. Unfortunately there aren't
    a lot of native plugins in this repository for Android. You can search around
    a bit and find some here and there (and some really great ones), but for now,
    we'll focus on iOS.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将向应用添加一些功能，但此处的首要目标是使用原生组件。为此，我们将利用PhoneGap插件仓库中的几个优秀插件([http://github.com/phonegap/phonegap-plugins/tree/master/iOS](http://github.com/phonegap/phonegap-plugins/tree/master/iOS))。正如URL所暗示的，我们只为iOS做这件事。不幸的是，这个仓库中为Android提供的原生插件并不多。你可以四处搜索，这里那里找到一些（以及一些非常好的），但到目前为止，我们将专注于iOS。
- en: 'In fact, we''ll be using quite a few native components: the navigation bar,
    the tab bar, the ActionSheet, the message box, the picker, and the e-mail composer.
    Oh, and let''s not forget ChildBrowser either!'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们将使用相当多的原生组件：导航栏、标签栏、操作表、消息框、选择器和电子邮件编辑器。哦，别忘了ChildBrowser！
- en: Why is it great?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么它很棒？
- en: This project will give us a much better understanding of interacting with multiple
    plugins, and we will also get much closer to a native look and feel.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将使我们更好地理解与多个插件交互，我们也将更接近原生外观和感觉。
- en: How are we going to do it?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将如何做到这一点？
- en: 'Here are the steps we''ll be following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将要遵循的步骤：
- en: Installing the plugins
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装插件
- en: Adding the navigation bar
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加导航栏
- en: Adding the tab bar
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加标签栏
- en: Adding the ActionSheet
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加操作表
- en: Adding the message box
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加消息框
- en: Adding the picker
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加选择器
- en: Adding the e-mail composer
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加电子邮件编辑器
- en: What do I need to get started?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我需要准备什么来开始？
- en: Make sure you've downloaded the code for this project so that you can follow
    along.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经下载了此项目的代码，这样你就可以跟上了。
- en: Installing the plugins
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: We've already had to deal with plugins a little bit, from ChildBrowser to even
    our own plugins. But this time, we'll be adding a lot of them. To install the
    plugins, go ahead and open up (or create) your Xcode project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经处理过一些插件了，从ChildBrowser到我们自己的插件。但这次，我们将添加很多。要安装插件，请打开（或创建）你的Xcode项目。
- en: Getting on with it
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: 'When you''ve downloaded the PhoneGap plugin repository, you should be able
    to extract it and navigate to the `iOS` folder inside. Go ahead and install the
    ChildBrowser plugin, as described in [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!* in the *Configuring the plugins* section.
    Once done, you need to go into each of the following directories and install each
    plugin:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你下载了PhoneGap插件仓库后，你应该能够提取它并导航到其中的`iOS`文件夹。按照[项目2](ch02.html "第2章。让我们社交吧！")中*配置插件*部分所述，安装ChildBrowser插件，*让我们社交吧！*。一旦完成，你需要进入以下每个目录并安装每个插件：
- en: '`ActionSheet`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`操作表`'
- en: Copy the `ActionSheet.h` and `ActionSheet.m` files into Xcode into the `Plugins`
    directory.
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`ActionSheet.h`和`ActionSheet.m`文件复制到Xcode的`Plugins`目录中。
- en: Copy the `ActionSheet.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `ActionSheet.js` 文件复制到 `www/plugins/iOS` 目录。
- en: '`EmailComposer`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailComposer`'
- en: Copy the `EmailComposer.h` and `EmailComposer.m` files into Xcode into the `Plugins`
    directory.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `EmailComposer.h` 和 `EmailComposer.m` 文件复制到 Xcode 的 `Plugins` 目录中。
- en: Copy the `EmailComposer.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `EmailComposer.js` 文件复制到 `www/plugins/iOS` 目录。
- en: '`MessageBox`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageBox`'
- en: Copy the `MessageBox.h` and `MessageBox.m` files into Xcode into the `Plugins`
    directory.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `MessageBox.h` 和 `MessageBox.m` 文件复制到 Xcode 的 `Plugins` 目录中。
- en: Copy the `MessageBox.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `MessageBox.js` 文件复制到 `www/plugins/iOS` 目录。
- en: '`NavigationBar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavigationBar`'
- en: Copy the `CDVNavigationBar.xib`, `CDVNavigationBarController.h`, `CDVNavigationBarController.m`,
    `NavigationBar.h`, and `NavigationBar.m` files into Xcode into the `Plugins` directory.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `CDVNavigationBar.xib`、`CDVNavigationBarController.h`、`CDVNavigationBarController.m`、`NavigationBar.h`
    和 `NavigationBar.m` 文件复制到 Xcode 的 `Plugins` 目录中。
- en: Copy the `NavigationBar.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `NavigationBar.js` 文件复制到 `www/plugins/iOS` 目录。
- en: '`PickerView`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickerView`'
- en: Copy the `PickerView.h` and `PickerView.m` files into Xcode into the `Plugins`
    directory.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `PickerView.h` 和 `PickerView.m` 文件复制到 Xcode 的 `Plugins` 目录中。
- en: Copy the `PickerView.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `PickerView.js` 文件复制到 `www/plugins/iOS` 目录。
- en: '`TabBar`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TabBar`'
- en: Copy the `TabBar.h` and `TabBar.m` files into Xcode into the `Plugins` directory.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `TabBar.h` 和 `TabBar.m` 文件复制到 Xcode 的 `Plugins` 目录中。
- en: Copy the `TabBar.js` file to the `www/plugins/iOS` directory using Finder.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Finder 将 `TabBar.js` 文件复制到 `www/plugins/iOS` 目录。
- en: 'When done, you should have something that looks like this in Xcode:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该在 Xcode 中看到如下所示的内容：
- en: '![Getting on with it](img/9403_09_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![继续前进](img/9403_09_01.jpg)'
- en: 'Next, navigate to `Cordova.plist` in the `Resources` directory, and add the
    following key/value pairs to the `Plugins` section:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导航到 `Resources` 目录中的 `Cordova.plist`，并在 `Plugins` 部分添加以下键值对：
- en: '`ActionSheet`, `String`, `ActionSheet`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActionSheet`, `String`, `ActionSheet`'
- en: '`NavigationBar`, `String`, `NavigationBar`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavigationBar`, `String`, `NavigationBar`'
- en: '`MessageBox`, `String`, `MessageBox`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageBox`, `String`, `MessageBox`'
- en: '`TabBar`, `String`, `TabBar`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TabBar`, `String`, `TabBar`'
- en: '`PickerView`, `String`, `PickerView`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PickerView`, `String`, `PickerView`'
- en: '`EmailComposer`, `String`, `EmailComposer`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailComposer`, `String`, `EmailComposer`'
- en: 'The result should look like the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像以下截图：
- en: '![Getting on with it](img/9403_09_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![继续前进](img/9403_09_02.jpg)'
- en: 'Next, add the `script` tags to our `index.html` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 `script` 标签添加到我们的 `index.html` 文件中：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What did we do?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this section, you added all the plugins our project will use to Xcode.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将我们项目将使用的所有插件添加到了 Xcode 中。
- en: What else do I need to know?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要了解什么？
- en: 'There are a couple files that may give you problems when compiling—`ActionSheet.h`
    and `PickerView.h`. In particular, the error references an inability to find `CDVPlugin.h`
    Just change the code at the top until it looks like the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中可能会遇到一些问题的几个文件——`ActionSheet.h` 和 `PickerView.h`。特别是，错误信息提到了无法找到 `CDVPlugin.h`。只需更改顶部的代码，直到它看起来像以下这样：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding the navigation bar
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加导航栏
- en: 'We''re already pretty familiar with the concept of the navigation bar. We''ve
    been using one at the top of our HTML views for several projects now. This time,
    however, we''re going to take that out and replace it with a native navigation
    bar. Here''s how it will look:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经非常熟悉导航栏的概念了。我们已经在我们的一些项目中使用它作为 HTML 视图的顶部导航栏了。然而，这次，我们将移除它，并用原生导航栏替换它。以下是它的样子：
- en: '![Adding the navigation bar](img/9403_09_03.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![添加导航栏](img/9403_09_03.jpg)'
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: This will require minor surgery on all three views—`startView.html`, `socialView.html`,
    and `tweetView.html` in the `www/views` directory. Go ahead and open those files
    so you can follow along. You might also want to open the versions from [Project
    2](ch02.html "Chapter 2. Let's Get Social!"), *Let's Get Social!* as well, so
    you can see what has changed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要对 `www/views` 目录中的三个视图——`startView.html`、`socialView.html` 和 `tweetView.html`
    进行一些小的修改。请打开这些文件以便跟随，你可能还想打开 [项目 2](ch02.html "第二章：让我们社交！") 的版本，*让我们社交!*，以便查看发生了什么变化。
- en: Getting on with it
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: First, our HTML views are going to change, since we need to remove our own navigation
    bar.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的 HTML 视图将要发生变化，因为我们需要移除我们自己的导航栏。
- en: 'For `startView.html`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `startView.html`：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For `socialView.html`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `socialView.html`：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For `tweetView.html`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `tweetView.html`：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you''re comparing each view to that of [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!* the navigation bar and tool bars have been
    removed in each view. We''ve also added native iOS scrolling to each view using
    `-webkit-overflow-scrolling: touch`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你将每个视图与 [项目 2](ch02.html "第二章. 让我们社交！") 进行比较，*让我们社交！* 每个视图中的导航栏和工具栏都已移除。我们还为每个视图添加了原生的iOS滚动
    `-webkit-overflow-scrolling: touch`。'
- en: 'By doing this, we''ve also removed several buttons: buttons that we''ll need
    to replace in the navigation bar. But we will also need to remove the old references
    to them, typically in each view''s `initializeView()` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们也移除了几个按钮：我们需要在导航栏中替换的按钮。但我们也需要移除对它们的旧引用，通常在每个视图的 `initializeView()`
    方法中：
- en: 'For `startView.html`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `startView.html`：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For `socialView.html`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `socialView.html`：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For `tweetView.html`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `tweetView.html`：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You may be wondering, then, if we aren't going to initialize our buttons or
    the navigation bar in `intializeView()`, when and where are we going to do it?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们不在 `intializeView()` 中初始化我们的按钮或导航栏，我们将在何时何地初始化它们？
- en: 'First, the initialization part actually needs to happen in `app.js`. The navigation
    bar is going to persist across all of our views, and we can only have one of them.
    Therefore, we need to initialize it at the very start of our app. So in `app.js`
    in the `APP.init()` method (after `PKUI.CORE.initializeApplication`), we add the
    following code snippet:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，初始化部分实际上需要在 `app.js` 中发生。导航栏将跨越我们所有的视图，我们只能有一个。因此，我们需要在应用程序的非常开始处初始化它。所以，在
    `app.js` 中的 `APP.init()` 方法（在 `PKUI.CORE.initializeApplication` 之后），我们添加以下代码片段：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This initializes and creates the navigation bar, hides its two buttons, and
    then sets its title. Finally, we display it on the screen.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将初始化并创建导航栏，隐藏其两个按钮，然后设置其标题。最后，我们在屏幕上显示它。
- en: Once we've done that, we can do some work in our views to tweak the navigation
    bar to our needs in each view.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们这样做，我们就可以在我们的视图中做一些工作，以调整每个视图中的导航栏以满足我们的需求。
- en: 'In `startView.html`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `startView.html` 中：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First, we hide the buttons (just in case there are buttons visible we don't
    want seen), and then we set the title to the app's title—`Socializer2`. Then,
    we give the right button a title of `Start`, and link it to the `startApp()` method.
    At the end, we also show the right button.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们隐藏按钮（以防万一有我们不想看到的可见按钮），然后将标题设置为应用程序的标题——`Socializer2`。然后，我们给右边的按钮一个标题为
    `Start`，并将其链接到 `startApp()` 方法。最后，我们也显示了右边的按钮。
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the view is about to hide, we essentially clear the entire navigation bar
    so that the buttons don't hang around for the next view.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当视图即将隐藏时，我们基本上会清除整个导航栏，这样按钮就不会在下一个视图中挂在那里。
- en: 'In `socialView.html`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `socialView.html` 中：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, we set the title of the view to the currently selected Twitter
    account, which by default will be the first one. We've added `currentTitle` to
    `socialView`, and are setting it in `loadStreamFor()` so that we can keep track
    of it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将视图的标题设置为当前选定的Twitter账户，默认情况下将是第一个。我们在 `socialView` 中添加了 `currentTitle`，并在
    `loadStreamFor()` 中设置它，以便我们可以跟踪它。
- en: We also add a `Back` button, on the left, and then we add a `#` button on the
    right. The `Back` button is just like every back button we've done in the past,
    so it will return us back to the starting view. The `#` button—this one's going
    to be interesting, but we'll save it for later.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在左侧添加了一个 `Back` 按钮，然后在右侧添加了一个 `#` 按钮。`Back` 按钮就像我们过去做的每一个返回按钮一样，所以它会带我们回到起始视图。`#`
    按钮——这个按钮会很有趣，但我们稍后再说。
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Again, like good citizens, we clean up after ourselves!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，像好公民一样，我们清理自己的事情！
- en: 'In `tweetView.html`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tweetView.html` 中：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Okay, this is a little different. Notice anything missing? That''s right, we
    aren''t setting the title. That''s because we''ll actually set it in `loadTweet()`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这有点不同。你注意到有什么缺失的吗？没错，我们没有设置标题。那是因为我们实际上会在 `loadTweet()` 中设置它：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Because we load the tweet immediately upon loading the tweet view, this has
    the effect of setting the navigation bar's title to the tweet's text.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在加载推文视图时立即加载推文，这会导致导航栏标题设置为推文文本。
- en: But what if the tweet's text is too long? In fact, the chances of it being too
    long are really good. The native navigation bar will happily truncate it and append
    a "…" at the end, so we never have to worry if it will actually end up overflowing
    its bounds.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果推文文本太长怎么办？实际上，它太长的可能性真的很大。原生导航栏会高兴地将其截断并在末尾添加一个“…”，所以我们永远不必担心它是否会实际溢出其边界。
- en: And of course, we'll clean up after ourselves, but there's no sense in printing
    the same code again.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们会清理我们的工作，但再次打印相同的代码是没有意义的。
- en: What did we do?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we added the navigation bar and modified its title and interacted
    with the buttons on the navigation bar.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们添加了导航栏并修改了其标题，并与导航栏上的按钮进行了交互。
- en: What else do I need to know?
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要了解什么？
- en: The iOS-native navigation bar can do a lot of cool things, but the plugin doesn't
    expose all of those cool features (such as changing the tint color). So, for the
    time being, we're left with a rather plain-looking navigation bar—certainly not
    the color we used in [Project 2](ch02.html "Chapter 2. Let's Get Social!"), *Let's
    Get Social!* You can get around this by using some native Objective-C code, but
    the plugin itself doesn't offer us any other option but the black gloss navigation
    bar.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: iOS原生导航栏可以完成许多酷炫的功能，但插件并没有暴露所有这些酷炫特性（例如更改色调颜色）。因此，目前我们只能得到一个看起来相当普通的导航栏——当然不是我们在[项目2](ch02.html
    "第2章。让我们社交！")中使用的颜色，*让我们社交!*你可以通过使用一些原生Objective-C代码来解决这个问题，但插件本身并没有提供其他选项，只有黑色光泽导航栏。
- en: For a long time, iOS navigation bars were limited to two buttons—one on the
    left, and one on the right. And for the iPhone and iPod Touch, this is still a
    pretty good idea. For the iPad, one can add quite a few buttons to the bar without
    getting in the way of any text. Again, however, the plugin doesn't expose this
    functionality, so we can only have one button on the left and one button on the
    right.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间以来，iOS导航栏的限制是两个按钮——一个在左侧，一个在右侧。对于iPhone和iPod Touch来说，这仍然是一个相当好的主意。对于iPad来说，可以在不干扰任何文本的情况下在栏上添加相当多的按钮。然而，插件并没有暴露这个功能，所以我们只能有一个按钮在左侧，一个按钮在右侧。
- en: Usually the button on the left is a **Back** button. This is typically given
    a left-pointing arrow, but the only way to do this is to create an image and pass
    it to the plugin. For our purposes, we decided to use a regular button without
    the left-pointing arrow. The plugin does have instructions on how to create the
    image and add it to the project if you want it, though.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常左侧的按钮是**返回**按钮。这通常会给一个指向左边的箭头，但唯一的方法是创建一个图像并将其传递给插件。对我们来说，我们决定使用一个没有指向左边箭头的普通按钮。如果你想要它，插件确实有关于如何创建图像并将其添加到项目的说明。
- en: Adding the tab bar
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标签栏
- en: In the social view and tweet view we've had something similar to an iOS-native
    tab bar – something we called a toolbar. This is where the **Share** button in
    the tweet view lived. Unfortunately there's no native plugin for an actual toolbar,
    so we moved the **Share** button to the navigation bar.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交视图和推文视图中，我们已经有了一个类似于iOS原生标签栏的东西——我们称之为工具栏。这是推文视图中的**分享**按钮所在的位置。不幸的是，没有原生的插件可以用于实际的工具栏，所以我们把**分享**按钮移到了导航栏上。
- en: 'In the social view, however, we''re using the toolbar just like a real tab
    bar—namely a method to switch the contents of the view. We have five icons that
    represent Twitter accounts, and pressing any one of them will load recent posts
    from that stream. This works perfectly for a tab bar. Here''s how it will look:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在社交视图中，我们使用工具栏就像一个真正的标签栏——即切换视图内容的方法。我们有五个图标代表Twitter账户，按下任何一个都会加载该流中的最新帖子。这对于标签栏来说工作得很好。以下是它的样子：
- en: '![Adding the tab bar](img/9403_09_04.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![添加标签栏](img/9403_09_04.jpg)'
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There's only one hitch. While we were able to display full-color, pretty avatars
    in our HTML tab bar, the iOS-native tab bar doesn't support that. In fact, it
    requires the images to be masks. iOS will then create the non-selected and selected
    images it uses on the tab bar from that mask. Essentially whatever is *white*
    (realistically, whatever has a value other than transparent) is painted on to
    the tab bar, and whatever is *transparent* isn't painted on to the tab bar.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个小问题。虽然我们能够在HTML标签栏中显示全彩、漂亮的头像，但iOS原生标签栏不支持这一点。实际上，它要求图像是遮罩。iOS将根据这个遮罩创建标签栏上使用的非选中状态和选中状态的图像。本质上，所有*白色*（实际上，所有值不是透明的）都会画在标签栏上，而所有*透明*的则不会画在标签栏上。
- en: This means we can't use the images we get from Twitter. We'd end up with five
    rectangle-shaped icons with no similarity to the original avatars. So we need
    to create our own versions in Photoshop or your preferred editor.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不能使用我们从Twitter获得的图像。我们最终会得到五个矩形图标，与原始头像没有任何相似之处。因此，我们需要在Photoshop或你喜欢的编辑器中创建我们自己的版本。
- en: For tab bars, the best size to aim it is 30 x 30 for non-retina displays and
    60 x 60 for retina displays. Then each image is saved as `tab#.png` and `tab#@2x.png`.
    The `@2x` version is for the retina displays. You can see each one in our code
    download in the `www/images` directory. All we did was to take the avatar from
    Twitter and color it white and then strip out all the background stuff and make
    it transparent.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标签栏，针对非视网膜显示屏的最佳尺寸是 30 x 30，而对于视网膜显示屏则是 60 x 60。然后，每个图像都保存为 `tab#.png` 和 `tab#@2x.png`。带有
    `@2x` 的版本是为视网膜显示屏准备的。您可以在我们的代码下载中的 `www/images` 目录中看到每一个。我们所做的一切就是从 Twitter 上获取头像，将其颜色调整为白色，然后移除所有背景内容，使其透明。
- en: Getting on with it
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: 'We''ll be doing most of our work in our social view this time, since it''s
    really the only view that did anything close to what a real tab bar does. Even
    so, we do need to add some code to `app.js` again (in the same spot as the previous
    task):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这次将在我们的社交视图中做大部分工作，因为它确实是唯一一个几乎能实现真实标签栏功能的视图。即便如此，我们还是需要在 `app.js` 中再次添加一些代码（与上一个任务相同的位置）：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice the two commands to initialize and create the tab bar. This has to be
    done here as the tab bar must always follow the initialization and creation of
    the navigation bar; otherwise the size of the web view (sandwiched in between)
    will be incorrectly set.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意初始化和创建标签栏的两个命令。这里必须这样做，因为标签栏必须始终跟随导航栏的初始化和创建；否则，WebView（夹在中间）的大小将被错误设置。
- en: 'Now, let''s go to our social view:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到我们的社交视图：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: First, we create a tab bar item for each Twitter account. We give it the name
    of `tab#`—so `tab0`, `tab1`, and so on. We give the Twitter account name as the
    text of the tab bar, and then we use the images we created earlier as the icons
    for each tab bar instead of using the avatars Twitter gives us. Notice that we
    don't ever specify `@2x`; iOS just knows to use it when on a retina display. (Magic!
    It's also worth noting that the same thing happens when writing native code; rarely
    does one have to worry about appending `@2x` programmatically.)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为每个 Twitter 账户创建一个标签栏项。我们给它命名为 `tab#`——所以是 `tab0`、`tab1` 等等。我们将 Twitter
    账户名称作为标签栏的文本，然后我们使用之前创建的图像作为每个标签栏的图标，而不是使用 Twitter 提供的头像。请注意，我们从未指定 `@2x`；iOS
    在视网膜显示屏上会自动使用它。（神奇！也值得注意，当编写原生代码时，这种情况也会发生；很少需要担心程序化地追加 `@2x`。）
- en: We also add an `onSelect` handler to each tab item. We'll take the last character
    of the name of the tab item, which will be a number from `0` to `4`, and then
    load the stream for that index. This means tapping on the first tab bar (named
    `tab0`) will load the stream for the first Twitter account.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为每个标签项添加了一个 `onSelect` 处理器。我们将取标签项名称的最后一个字符，它将是一个从 `0` 到 `4` 的数字，然后加载该索引的流。这意味着点击第一个标签栏（命名为
    `tab0`）将加载第一个 Twitter 账户的流。
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we've added the code to show the tab bar. We've also added the code to show
    each tab bar item. Since we know we'll always have five items, we just hardcode
    these values for now, but it would be equally possible to create lots of tab bar
    items and only show a few at a time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了显示标签栏的代码。我们还添加了显示每个标签栏项的代码。由于我们知道我们始终会有五个项，所以我们现在只是硬编码这些值，但同样也可以创建很多标签栏项，一次只显示几个。
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, we clean up after ourselves and hide the tab bar whenever the view
    hides. This keeps the tab bar from being visible on any other view.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在完成任务后清理，并在视图隐藏时隐藏标签栏。这确保了标签栏在任何其他视图中都不会可见。
- en: What did we do?
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we created the tab bar and then assigned tab bar items to it.
    We also assigned callback functions to each tab bar item.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们创建了标签栏，并将其分配给标签栏项。我们还为每个标签栏项分配了回调函数。
- en: What else do I need to know?
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要了解什么？
- en: 'Apple is pretty strict when it comes to how a tab bar works. For one, on anything
    other than an iPad, it should never have more than five icons. (The reasons are
    pretty obvious: there''s not a lot of space!)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在标签栏的工作方式上非常严格。一方面，在 iPad 之外的所有设备上，它不应有超过五个图标。（原因很明显：空间有限！）
- en: So, what to do if you need more than five tabs? The accepted method would be
    to show four of those icons, add a *more* icon (consisting of three dots as the
    image), and then when the user taps that tab, show the remaining tabs in a table
    list. You can see this behavior in the *Music* app on the iPhone and iPod Touch,
    and if we were writing native code, we'd get this behavior nearly for free.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你需要超过五个标签页怎么办？可接受的方法是显示四个图标，添加一个*更多*图标（由三个点组成的图像），然后当用户点击该标签页时，以表格列表的形式显示剩余的标签页。你可以在iPhone和iPod
    Touch上的*音乐*应用中看到这种行为，如果我们编写的是原生代码，我们几乎可以免费获得这种行为。
- en: 'But we aren''t writing native code, and so we have to do this manually. This
    means, if you want more than five tabs, you''ll need to manually create the *more*
    tab and display the list of remaining tabs in a list on your own. One more catch:
    on an iPad, you should display all the tabs—displaying a *more* button is valid
    only for the iPhone and iPod Touch.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不是编写原生代码，因此我们必须手动完成。这意味着，如果你想要超过五个标签页，你需要手动创建*更多*标签页，并自行在列表中显示剩余的标签页。还有一个问题：在iPad上，你应该显示所有标签页——在iPhone和iPod
    Touch上显示*更多*按钮是有效的。
- en: Finally, Apple highly suggests that one use no more than seven tabs on an iPad,
    but this is not as rigorously enforced.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，苹果强烈建议在iPad上不要使用超过七个标签页，但这并不是强制执行的。
- en: Adding the ActionSheet
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加动作表
- en: 'ActionSheets are great ways to present a few limited choices to the user, and
    so far we''ve been doing the equivalent by using pop-up message boxes with several
    buttons in them. For this project, we''re going to display an ActionSheet when
    the user taps the **Share** button in the tweet view. Here''s how it will look:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 动作表是向用户展示有限选择的好方法，到目前为止，我们一直是通过使用带有多个按钮的弹出消息框来做到这一点的。对于这个项目，当用户在推文视图中点击**分享**按钮时，我们将显示一个动作表。它看起来会是这样：
- en: '![Adding the ActionSheet](img/9403_09_05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![添加动作表](img/9403_09_05.jpg)'
- en: Getting on with it
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续进行
- en: 'In `TweetView.html`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TweetView.html`中：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: First off, we create the ActionSheet using `actionSheet.create()`. We give the
    sheet a title (`Share`), and then specify the buttons that can appear (`Twitter`,
    `Facebook`, `Email`, and `Cancel`). We then specify the handler for the ActionSheet,
    which will share the tweet to Twitter if the **Twitter** button is tapped. It
    won't do anything yet for the other buttons. Finally, we indicate that the **Cancel**
    button is the last button. This is so that iOS will know to color the **Cancel**
    button a different color to make it obvious that it is different. (Remember that
    indexes are zero-based.)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`actionSheet.create()`创建动作表。我们给表格一个标题（`分享`），然后指定可以出现的按钮（`Twitter`、`Facebook`、`Email`和`取消`）。然后我们指定动作表的处理程序，如果用户点击**Twitter**按钮，它将分享推文到Twitter。对于其他按钮，目前它不会做任何事情。最后，我们指出**取消**按钮是最后一个按钮。这样iOS就会知道将**取消**按钮染成不同的颜色，使其明显不同。（记住索引是从零开始的。）
- en: 'When our callback is invoked, we get two values: `buttonIndex` and `buttonValue`.
    While `buttonValue` could be useful, chances are good this could be anything,
    especially when we consider localization. Instead it''s better to use `buttonIndex`.
    The first button will be `buttonIndex` `zero`, and so on.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的回调被调用时，我们得到两个值：`buttonIndex`和`buttonValue`。虽然`buttonValue`可能很有用，但很可能是任何东西，尤其是当我们考虑到本地化时。因此，最好使用`buttonIndex`。第一个按钮将是`buttonIndex`
    `零`，以此类推。
- en: What did we do?
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we added an ActionSheet when the user taps on the **Share** button
    for a specific tweet.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，当用户点击特定推文的**分享**按钮时，我们添加了一个动作表。
- en: What else do I need to know?
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要了解什么？
- en: The ActionSheet is a pretty nifty thing, and it works really well on an iPhone
    or iPod Touch. On the iPad, it will appear in the center of the screen as a popover,
    not the best user interface, but something we can deal with. There are native
    methods you can use to position it correctly and add an arrow, but Apple seems
    to take apps using centered ActionSheets too, so we're not worrying about that
    now.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 动作表是一个非常酷的东西，在iPhone或iPod Touch上工作得非常好。在iPad上，它将以弹出窗口的形式出现在屏幕中央，这不是最好的用户界面，但我们能处理。你可以使用原生方法来正确定位它并添加一个箭头，但苹果似乎也对使用居中动作表的应用程序不太关心，所以我们现在不考虑这个问题。
- en: Something else that we need to know is that it's a good idea to keep the number
    of items to a small number, or the list will start to get really long. While the
    ActionSheet is supposed to condense these into a scrollable list view when this
    happens, there are bugs as to when it happens. This means that you can get a really
    long list that has some buttons cut off or missing entirely. (This is usually
    most visible on the iPad.)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要知道的是，保持项目数量少是一个好主意，否则列表会变得非常长。虽然ActionSheet应该在发生这种情况时将这些内容压缩成可滚动的列表视图，但关于何时发生的情况存在一些错误。这意味着你可能会得到一个非常长的列表，其中一些按钮被截断或完全缺失。（这通常在iPad上最明显。）
- en: Long story-short, keep the number of items to a reasonable value. Five or less
    is probably a good idea on a small device, and ten or less on an iPad.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，保持项目数量在一个合理的范围内。在小设备上，五项或更少可能是一个好主意，而在iPad上，十项或更少可能更合适。
- en: Adding the message box
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加消息框
- en: So far we've done pretty good with our own message box. It's not quite like
    an iOS-native message box, but it's pretty close. In this case, though, we want
    to go all the way.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们自己的消息框做得相当不错。它并不完全像iOS原生消息框，但已经很接近了。然而，在这种情况下，我们想要做到极致。
- en: Getting on with it
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: 'Working with the Message Box plugin is really easy. Let''s go back to the `share()`
    method in our Tweet View:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 与消息框插件一起工作非常简单。让我们回到我们的Tweet View中的`share()`方法：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'I''ve highlighted the preceding code that displays a native message box. In
    this case, we use it for the second button on our ActionSheet: `FaceBook`. Since
    we''ve not implemented it yet, we display a nice notice to the user. Here''s what
    it looks like:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经突出显示了显示原生消息框的代码。在这种情况下，我们用它来显示我们的ActionSheet上的第二个按钮：“FaceBook”。由于我们还没有实现它，我们向用户显示一个友好的通知。它看起来是这样的：
- en: '![Getting on with it](img/9403_09_06.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![开始行动](img/9403_09_06.jpg)'
- en: Just like the ActionSheet and tab bar, we can respond (if we like) to any pressed
    buttons. In this case, we just log it to the console, but there are confirmation
    message boxes that one could use to make different things happen depending on
    what button was pressed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 就像ActionSheet和标签栏一样，我们可以响应（如果我们愿意）任何被按下的按钮。在这种情况下，我们只是将其记录到控制台，但可以使用确认消息框来根据按下的按钮执行不同的操作。
- en: What did we do?
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: We displayed a native message box and handled the callback when a button is
    pressed.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显示了一个原生消息框，并在按钮被按下时处理回调。
- en: What else do I need to know?
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还需要知道什么？
- en: '*Never, ever do this in a real application*. I don''t mean never use a message
    box; no, I mean never tell a user a feature isn''t implemented in the first place.
    In fact, never show them that the feature was intended to be implemented but wasn''t.
    Users don''t appreciate it very much, and Apple will certainly reject the app
    if you leave it in.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*永远不要在真实的应用程序中这样做*。我的意思不是永远不要使用消息框；不，我的意思是永远不要一开始就告诉用户一个功能尚未实现。实际上，永远不要向他们展示该功能原本打算实现但并未实现。用户对此并不太欣赏，而且如果苹果发现这种情况，肯定会拒绝该应用。'
- en: The message box plugin describes other uses, including confirmation boxes, input
    boxes, and password input boxes. Read the plugin's readme for more information
    about how to use these additional features.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框插件描述了其他用途，包括确认框、输入框和密码输入框。阅读插件的readme以获取有关如何使用这些附加功能的更多信息。
- en: Adding the picker
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加选择器
- en: 'Pickers are all over the place in iOS, and we really don''t have a good analogue
    for them in our own framework yet. These things look like the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器在iOS中到处都是，我们自己的框架中还没有一个好的类似物。这些东西看起来如下截图所示：
- en: '![Adding the picker](img/9403_09_07.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![添加选择器](img/9403_09_07.jpg)'
- en: They're great at showing several choices at once and letting the user select
    one. They are often used to pick calendar dates, times, or even just a specific
    number out of a large range. They are good for this because they allow the user
    to scroll over a large range quickly.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 它们擅长同时显示多个选择并让用户选择一个。它们经常用于选择日历日期、时间，甚至只是从大量数字中选择一个特定的数字。它们之所以适合这样做，是因为它们允许用户快速滚动到大量范围。
- en: In our example, we're just going to give a few options, but we could have had
    two hundred items in here with no real loss of functionality (but really, the
    user wouldn't need all of those in our case).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们只是提供了一些选项，但这里可以有二百个项目而不会真正损失功能（但实际上，在我们的情况下，用户不需要那么多）。
- en: Getting on with it
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始行动
- en: We're going to go back to the social view for a moment and revisit something
    we said we'd come back to. Remember that **#** button? Yeah, now's the time we
    handle it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将暂时回到社交视图，并回顾我们说过要回过头来的事情。还记得那个**#**按钮吗？是的，现在是我们处理它的时候了。
- en: Essentially, we're going to give the user the option to pick how many tweets
    they want to be loaded at once. Cool, right? This could be done in an ActionSheet,
    but the number of items is more than would really fit well, and so we'll use a
    picker instead.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们将给用户选择一次加载多少条推文的选项。酷吧？这可以通过ActionSheet来实现，但项目数量可能太多，不太适合，所以我们选择使用选择器。
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First off, we''ve added a new property to the view: the number of tweets to
    load; and we''ve defaulted this to `100`. Then we modified `loadStreamFor()` to
    use this value instead of the hard coded value in [Project 2](ch02.html "Chapter 2. Let''s
    Get Social!"), *Let''s Get Social!*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在视图中添加了一个新属性：要加载的推文数量；并将其默认设置为`100`。然后我们修改了`loadStreamFor()`，使其使用这个值而不是[项目2](ch02.html
    "第二章. 让我们社交！")中的硬编码值 *Let's Get Social!*。
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, we create the values that we want to display in our picker. The *name*
    isn't displayed anywhere; it's just used when we get told what the user selected.
    The first *value* is the currently selected value. This means the picker will
    show the user which item is currently selected. The remaining items define the
    value and the display text for each item. So the user will see `Twenty-Five`,
    but we'll get back `25`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们想在选择器中显示的值。*名称*不会在任何地方显示；它只是在用户告诉我们他们选择了什么时使用。第一个*值*是当前选中的值。这意味着选择器将向用户显示当前选中的项。其余的项定义了每个项的值和显示文本。因此，用户将看到`Twenty-Five`，但我们会得到`25`。
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next, we actually create the picker. We give it the title of `Number of Tweets`,
    so the user knows what they are setting. We pass in the values to display (slots),
    and then pass in a callback handler. This handler will set the value to the selected
    value and reload the Twitter stream, but only if the user taps on **OK**. Finally,
    we set the style (black), and pass in the names of the two buttons.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实际上创建选择器。我们给它命名为`Number of Tweets`，这样用户就知道他们在设置什么。我们传入要显示的值（插槽），然后传入一个回调处理程序。这个处理程序将值设置为选中的值，并重新加载Twitter流，但只有当用户点击**OK**时。最后，我们设置样式（黑色），并传入两个按钮的名称。
- en: Pickers aren't limited to single-value lists. You can get multiple columns going,
    which is useful when setting a date, for example. You could have a Year column,
    a Month column, and a Date column. See the Plugin's readme file for more information
    on how to do this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器不仅限于单值列表。你可以创建多列，这在设置日期时很有用。例如，你可以有一个年份列、月份列和日期列。有关如何操作的更多信息，请参阅插件的readme文件。
- en: What did we do?
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: We created a picker, filled it with data, and reacted to the user picking a
    specific result.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个选择器，填充了数据，并响应用户选择特定结果。
- en: Adding the e-mail composer
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加电子邮件编辑器
- en: Sharing via e-mail is built in to nearly every app, and yet it's difficult to
    actually accomplish without using a plugin. Since this app is intended to share
    things easily, let's add sharing via e-mail.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件分享几乎内置在每一个应用中，但实际上不使用插件很难实现。由于这个应用旨在轻松分享，让我们添加通过电子邮件分享的功能。
- en: Getting on with it
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续前进
- en: 'Back in our tweet view, we have the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的推文视图中，我们有以下内容：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Again, we're in the `share()` method, and I've highlighted the code that's changed.
    Here we're responding to the **Email** button, which is index `2`. We call the
    plugin using `cordova.exec()`, giving it the plugin name and the method we want
    to use (`showEmailComposer`). Then we pass the body and subject to the plugin.
    The body will be the tweet, plus who it was from, and the subject will be "*Thought
    this was interesting…"*. We could pass in more information, such as who the message
    should be sent to, but in our case, we don't know that information, so we don't
    send it on to the plugin.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们处于`share()`方法中，我已经突出显示了更改的代码。这里我们响应**电子邮件**按钮，它是索引`2`。我们使用`cordova.exec()`调用插件，给它插件名称和我们想要使用的方法（`showEmailComposer`）。然后我们向插件传递正文和主题。正文将是推文，以及它是谁发的，主题将是"*这个很有趣…"*。我们可以传递更多信息，例如消息应该发送给谁，但在我们的情况下，我们不知道这些信息，所以没有将其发送到插件。
- en: Once done, we let go of control entirely, though it is possible to determine
    if the user actually did share via e-mail or not. In our case, we don't really
    care if they did, just that we offer the option to do so.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们就完全放手，尽管有可能确定用户是否实际上通过电子邮件分享了。在我们的情况下，我们并不关心他们是否这样做，只是我们提供了这样的选项。
- en: 'Here''s what it looks like:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![Getting on with it](img/9403_09_08.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![继续前进](img/9403_09_08.jpg)'
- en: What did we do?
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做了什么？
- en: In this task, we created an e-mail composer with the subject and body set to
    data we specified.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们创建了一个电子邮件编辑器，主题和正文设置为指定的数据。
- en: Game Over..... Wrapping it up
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏结束..... 结束
- en: We've accomplished quite a bit—we used seven plugins in total, and our app looks
    and feels pretty native now. It's not perfect; for example, navigation bars have
    a cool animation on native apps and in our app, it *blanks out* during view changes,
    but other than that, things look and feel pretty close to what a user would expect.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经取得了一些成就——总共使用了七个插件，我们的应用看起来和感觉现在相当原生。它还不是完美的；例如，在原生应用中导航栏有一个酷炫的动画，而在我们的应用中，在视图变化时它会*变空白*，但除此之外，其他方面看起来和感觉都相当接近用户所期望的。
- en: Can you take the HEAT? The Hotshot Challenge
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你能承受HEAT吗？热手挑战
- en: 'Of course, there are always things that can be added and changed. Why don''t
    you try a few of these challenges:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，总有可以添加和改变的地方。你为什么不尝试以下几个挑战：
- en: Add Facebook sharing to the app.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Facebook分享功能添加到应用中。
- en: Store the number of tweets to load so that it is a persistent setting.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储要加载的推文数量，以便它成为一个持久的设置。
- en: Change up the way the navigation bar is cleared at the end of each view; try
    to achieve a more *native* feel. To truly achieve a native feel, you may need
    to delve into native code.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变在每次视图结束时清除导航栏的方式；尝试达到更*原生*的感觉。要真正达到原生感觉，你可能需要深入研究原生代码。
- en: Want a really complicated challenge? Download the avatars from Twitter and then
    figure out how to mask them programmatically. Then save them to the user's temporary
    storage and use them as the icons on the tab bar.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要一个真正复杂的挑战？从Twitter下载头像，然后找出如何程序化地遮罩它们。然后保存到用户的临时存储中，并用作标签栏上的图标。
