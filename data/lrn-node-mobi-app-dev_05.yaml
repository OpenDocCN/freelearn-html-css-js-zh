- en: Chapter 5. Real-Time Data and WebSockets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章. 实时数据和 WebSockets
- en: In this chapter, we will show you how to enable real-time data communication
    using WebSockets. This will allow your server to directly communicate with the
    connected clients without having any polling on the client side.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何使用 WebSockets 实现实时数据通信。这将允许您的服务器直接与连接的客户端进行通信，而无需在客户端进行任何轮询。
- en: '*I would really love a two-way conversation, John*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*我真的很想要一次双向对话，约翰*'
- en: In its infancy, the Internet was not much of a two-way street. The traditional
    client-server architecture was the king, and servers initiating communication
    with clients was almost unheard of (and quite possibly seen as quite heretical
    by some, too).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在其初始阶段，互联网并不是一个双向通道。传统的客户端-服务器架构是主导地位，服务器与客户端进行通信几乎是闻所未闻的（并且很可能在某种程度上也被一些人视为异端邪说）。
- en: However, starting with protocols such as **Internet Relay Chat** (**IRC**),
    real-time chat applications quickly became killer apps over time, with an enormous
    surge in popularity among ordinary users (if you are old enough to remember the
    **instant messaging computer program** (**ICQ**), yes, that is nostalgia that
    you are feeling). It was not very long until real-time features took the leap
    to the HTTP world, causing browser-based chat services to pop up everywhere. Meanwhile,
    related concepts such as push notifications gained popularity, especially with
    the advent of the smartphone.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从诸如**Internet Relay Chat**（**IRC**）这样的协议开始，实时聊天应用程序很快就成为了随着时间的推移而迅速增长的杀手级应用程序，在普通用户中间大受欢迎（如果你记得**即时消息计算机程序**（**ICQ**），是的，你感到的是怀旧）。实时特性很快就跨越到了
    HTTP 世界，导致基于浏览器的聊天服务随处可见。与此同时，相关概念，如推送通知，也变得越来越受欢迎，特别是随着智能手机的出现。
- en: Polling
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轮询
- en: Today, real-time features are an integral part of the Internet as we know it.
    However, their implementation has not always been optimal. Especially during its
    early stages, real-time data communication was almost always implemented by using
    polling, a technique where the client regularly contacts the server in order to
    check whether its state has changed. If it had (say, if a new message had been
    made available), the server responded by sending the updated state back. Needless
    to say, polling is a recipe for wasted resource usage. Moreover, it leads to rather
    choppy programming, since we find ourselves just repeatedly asking for updates
    rather than waiting and taking action on them when they are actually sent.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，实时特性已经成为我们所知的互联网的一个组成部分。然而，它们的实施并不总是最佳的。特别是在早期阶段，实时数据通信几乎总是通过使用轮询来实现的，这是一种技术，客户端定期联系服务器以检查其状态是否发生了变化。如果有变化（比如说，如果有新消息可用），服务器会通过发送更新后的状态来回应。不用说，轮询是一种浪费资源的方法。此外，它会导致编程变得相当混乱，因为我们发现自己只是不断地请求更新，而不是等待并在实际发送时采取行动。
- en: WebSockets
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets
- en: To avoid polling, we need a full-duplex solution, where the server can communicate
    directly with the client without the latter's initiative. Today, perhaps the most
    advanced and prevalent solution for this is the **WebSocket** protocol. A **WebSocket**
    protocol is a direct, two-way connection between the client and the server over
    the TCP protocol. It is structured in a way that allows both sides of the connection
    to initiate data transfer on their own. WebSockets were standardized in 2011 and
    are supported in all major browsers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免轮询，我们需要一个全双工的解决方案，其中服务器可以直接与客户端进行通信，而无需后者的主动性。今天，也许最先进和普遍的解决方案是**WebSocket**协议。**WebSocket**协议是客户端和服务器之间的直接双向连接，通过
    TCP 协议进行通信。它的结构允许连接的双方都可以自行启动数据传输。WebSockets 在 2011 年标准化，并得到了所有主要浏览器的支持。
- en: Using WebSockets in Node.js
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Node.js 中使用 WebSockets
- en: Node.js does not come with a default module for using WebSockets. While we have
    tried so far to avoid third-party solutions and just show you how to work with
    **Vanilla node**, this topic is complex enough to put writing a WebSocket handler
    from scratch well beyond the scope of the book. Therefore, for the remainder of
    this chapter, we will use the excellent `socket.io` library. We of course do not
    imply that this is what you should be using in your own work, and in the [Chapter
    6](ch06.html "Chapter 6. Introducing Ionic"), *Introducing Ionic*, the *Going
    further* section at the end of the chapter, we will direct you to alternative
    solutions and reading materials for WebSockets.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 并不提供默认的模块来使用 WebSockets。虽然我们迄今为止一直试图避免使用第三方解决方案，只是向您展示如何使用**原生 node**，但这个主题足够复杂，超出了本书的范围，因此在本章的其余部分，我们将使用优秀的
    `socket.io` 库。当然，我们并不意味着这就是您应该在自己的工作中使用的，而在[第 6 章](ch06.html "第 6 章. 介绍 Ionic")
    *介绍 Ionic* 中，章节末尾的 *进一步阅读* 部分，我们将为您指出 WebSockets 的替代解决方案和阅读材料。
- en: Setting up our project
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的项目
- en: We will set up a separate project for this chapter, demonstrating how we can
    create a simple chat application that demonstrates the essentials of using WebSocket.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为本章设置一个单独的项目，演示如何创建一个简单的聊天应用程序，展示使用 WebSocket 的基本要点。
- en: 'Create a separate project folder and name it `chat-app`. In this folder, create
    a blank file named `app.js`. Finally, open your terminal or the command prompt,
    go into the folder, and run the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个单独的项目文件夹，并将其命名为 `chat-app`。在此文件夹中，创建一个名为 `app.js` 的空文件。最后，打开您的终端或命令提示符，进入文件夹，并运行以下命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Answer the questions prompted by Node.js and make sure that you specify `app.js`
    as the entry point for the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回答 Node.js 提出的问题，并确保将 `app.js` 指定为应用程序的入口点。
- en: Installing socket.io
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 socket.io
- en: 'We will install `socket.io`, as always, by using our good friend `npm`. From
    your terminal, issue the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像往常一样使用我们的好朋友 `npm` 安装 `socket.io`。从您的终端，发出以下命令：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's it. We are now good to go. Let's start setting up our server! However,
    before we do that, let's start from the top and define a basic chat interface
    for us to play with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们现在可以开始了。让我们开始设置我们的服务器！然而，在我们这样做之前，让我们从头开始，为我们玩耍定义一个基本的聊天界面。
- en: Creating a chat interface
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个聊天界面
- en: 'We are not creating the next WhatsApp (yet!). So, building a full-fledged chat
    interface is a bit beyond what we want to achieve in this chapter. Let''s go for
    something basic, as illustrated in the next screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不是在创建下一个WhatsApp（至少现在还不是！）。因此，在本章中，构建一个成熟的聊天界面略微超出了我们的目标。让我们选择一些基本的东西，如下一张截图所示：
- en: '![Creating a chat interface](img/B04653_05_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![创建聊天界面](img/B04653_05_01.jpg)'
- en: 'To create this layout, create the `index.html` file in your project folder
    and insert a basic HTML setup inside it, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建此布局，请在项目文件夹中创建`index.html`文件，并在其中插入基本的HTML设置，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will now add some custom elements to this markup in order to get the layout
    we need for our chat to be nice and user friendly. First, import the **Bootstrap**
    CSS framework by inserting a link into `href` in the header:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在此标记中添加一些自定义元素，以便获得我们聊天所需的布局，使其更加友好。首先，通过在头部插入一个链接来导入**Bootstrap** CSS框架：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Bootstrap**, originally developed by Twitter, is a widely used framework
    that can be utilized to quickly build responsive web interfaces. As web design
    is beyond the scope of this book, we will use it in order to keep manual styling
    to a minimum. Don''t worry if you are unfamiliar with the framework. It is very
    intuitive, and we will explain what you need to know along the way.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bootstrap**最初由Twitter开发，是一个广泛使用的框架，可用于快速构建响应式网页界面。由于网页设计超出了本书的范围，我们将使用它以保持手动样式的最小化。如果您对该框架不熟悉，不用担心。它非常直观，我们会在途中解释您需要了解的内容。'
- en: 'Next, let''s add a Bootstrap container `div` to our interface, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们向我们的界面添加一个Bootstrap容器`div`，如下所示：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is simply an organizational unit that Bootstrap uses to contain a set of
    UI elements inside a `container` so that the layout fits well on the screen being
    used.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Bootstrap用来包含一组UI元素的组织单元，以便布局在使用的屏幕上很好地适应。
- en: 'Next, inside the `container`, let''s add a `chat-box`, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`container`内部，让我们添加一个`chat-box`，如下所示：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following are the three classes that are being used in the preceding code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中使用的三个类如下：
- en: The `row` class, which is similar to the `container` class, is an organizational
    unit that confines the elements that it holds to a single row in the layout.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row`类类似于`container`类，是一个组织单元，将其包含的元素限制在布局中的单行中。'
- en: The `well` class, which creates a shaded container, make the elements it contains
    more visually distinct.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`well`类创建了一个阴影容器，使其包含的元素在视觉上更加突出。'
- en: The `list-unstyled` class, which simplifies the ordinary HTML unordered list
    tag, removes, among other things, the bullet styling that appears next to elements.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list-unstyled`类简化了普通的HTML无序列表标签，除其他外，还删除了出现在元素旁边的项目符号样式。'
- en: 'The end result is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下截图所示：
- en: '![Creating a chat interface](img/B04653_05_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建聊天界面](img/B04653_05_02.jpg)'
- en: 'Now, let''s add the elements needed for users to enter their names and submit
    actual messages, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加用户输入其名称和提交实际消息所需的元素，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By now, you should be familiar with most of the UI elements and what they do,
    and the rest is nothing but a standard HTML form (note that we do not provide
    an action for the form itself; submissions will be handled dynamically through
    JavaScript instead). Note that we added some classes to the `form` elements. These
    are standard Bootstrap layout classes that are used to style the appearance of
    the elements themselves. They do not introduce any functionality in themselves,
    and as such, we do not need to deal with them in detail here.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该熟悉大多数UI元素及其功能，其余部分只是标准的HTML表单（请注意，我们没有为表单本身提供操作；提交将通过JavaScript动态处理）。请注意，我们为`form`元素添加了一些类。这些是标准的Bootstrap布局类，用于样式化元素本身的外观。它们本身不会引入任何功能，因此我们不需要在这里详细处理它们。
- en: 'That''s it! If you open the file in your browser, you will see the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！如果您在浏览器中打开文件，您将看到以下内容：
- en: '![Creating a chat interface](img/B04653_05_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![创建聊天界面](img/B04653_05_03.jpg)'
- en: The chat obviously does not really do anything at the present time. We will
    do something about this in a moment, but first, let's see how we can serve the
    HTML file that we just created directly from Node.js.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，目前聊天并没有真正做任何事情。我们马上会处理这个问题，但首先，让我们看看如何从Node.js直接提供我们刚刚创建的HTML文件。
- en: A basic file server
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个基本的文件服务器
- en: 'We now have an HTML file for our interface, which we would like the user to
    see whenever they connect to the app via their browser. To make this happen, we
    need to make our Node.js app listen to HTTP requests and then respond with the
    appropriate HTML file. Sounds familiar? Yep, it''s time to reintroduce the Node.js
    HTTP module. Go ahead and add the following at the top of the `app.js` file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个用于我们界面的HTML文件，我们希望用户在通过浏览器连接到应用程序时看到它。为了实现这一点，我们需要让我们的Node.js应用程序监听HTTP请求，然后用适当的HTML文件进行响应。听起来很熟悉吧？是的，是时候重新介绍Node.js的HTTP模块了。继续在`app.js`文件的顶部添加以下内容：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have already seen the first two modules. The third one, `fs`, is the standard
    module that is used to handle interactions with the file system. We will need
    this module in order to retrieve and serve the HTML file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了前两个模块。第三个模块`fs`是用于处理与文件系统交互的标准模块。我们将需要此模块来检索和提供HTML文件。
- en: 'Let''s create an HTTP server for this end. Add the following to `app.js`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此创建一个HTTP服务器。将以下内容添加到`app.js`中：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s go through what happens here. Upon receiving an HTTP request, our server
    will try to find a match for the path name of the request. If the path is for
    the root of the document hierarchy (signified by a normal slash), we want to serve
    the `index.html` document. If this is the requested path, the following happens:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这里发生了什么。在收到HTTP请求时，我们的服务器将尝试查找请求的路径名的匹配项。如果路径是文档层次结构的根（由普通斜杠表示），我们希望提供`index.html`文档。如果这是请求的路径，将发生以下情况：
- en: The `readFile()` method, which is part of the `fs` module, is invoked in order
    to load the `index.html` file.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`readFile()`方法是`fs`模块的一部分，被调用以加载`index.html`文件。'
- en: If the load fails (that is, if there was an I/O error), the server responds
    with status *500*, indicating a server error.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果加载失败（即发生I/O错误），服务器将以状态*500*响应，表示服务器错误。
- en: If the file is successfully loaded, we add its content (in this case, a string
    of HTML content) to the response payload, set the appropriate media type and code
    for the response, and serve it back to the client.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果文件成功加载，我们将其内容（在本例中是一串HTML内容）添加到响应有效载荷中，设置适当的媒体类型和响应代码，然后将其返回给客户端。
- en: By default, a status *404* is served if the client tries to access any other
    part of the document hierarchy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果客户端尝试访问文档层次结构的任何其他部分，将提供状态*404*。
- en: 'Let''s see this in action. Add the following to the end of `app.js`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的运行情况。将以下内容添加到`app.js`的末尾：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start the server from your terminal, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端启动服务器，如下所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open your browser and visit `http://localhost:8080`. You will see the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，访问`http://localhost:8080`。您将看到以下内容：
- en: '![A basic file server](img/B04653_05_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![一个基本的文件服务器](img/B04653_05_04.jpg)'
- en: An alternate chat
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个聊天
- en: You can find an excellent tutorial on how to build a chat application that is
    similar to ours using Express.js and `Socket.io` at [http://socket.io/get-started/chat/](http://socket.io/get-started/chat/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://socket.io/get-started/chat/](http://socket.io/get-started/chat/)找到一个关于如何使用Express.js和`Socket.io`构建类似于我们的聊天应用程序的优秀教程。
- en: In fact, the example that we used here is inspired by this one, though we have
    modified it in order to make it suitable for the book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们在这里使用的示例是受到这个示例的启发，尽管我们已经修改过，以使其适合本书。
- en: The efficient serving of static files
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态文件的有效提供
- en: To keep things brief, and also to get our feet wet when it comes to using the
    HTTP module, we served a static HTML file directly from Node.js in our example.
    In a production system, static files are usually much more efficient as regards
    serving from a standard file server such as Apache or Nginx.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，也为了让我们初次使用HTTP模块时有所涉足，我们在示例中直接从Node.js中提供了一个静态HTML文件。在生产系统中，静态文件通常更有效，因为可以从诸如Apache或Nginx之类的标准文件服务器中提供服务。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basic theory behind WebSockets and why they
    matter to modern, real-time web applications. Building on this, we created a simple
    chat application by making use of the `socket.io` library in order to demonstrate
    real-time communication between several clients connected to the same server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了WebSockets背后的基本理论，以及它们对现代实时网络应用的重要性。基于此，我们利用`socket.io`库创建了一个简单的聊天应用程序，以演示连接到同一服务器的多个客户端之间的实时通信。
