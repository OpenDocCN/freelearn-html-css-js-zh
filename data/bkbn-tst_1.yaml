- en: Chapter 1. Setting Up a Test Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 设置测试基础设施
- en: Modern web development is witnessing a JavaScript renaissance, with the expanding
    popularity of frontend-driven, single-page, and real-time web applications. Leading
    and facilitating the charge are a number of JavaScript web frameworks that enable
    developers to sensibly organize frontend web applications into modular and convention-driven
    components. As more logic and functionality is pushed from the server to the browser,
    these frameworks are increasingly critical in maintaining single-page application
    state, avoiding unstructured and ad hoc "spaghetti" code, and providing abstractions
    and functionality for commonly encountered development situations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络开发正在见证 JavaScript 的复兴，前端驱动、单页和实时网络应用程序的普及不断扩大。引领和推动这一潮流的是一些 JavaScript 网络框架，这些框架使开发者能够合理地将前端网络应用程序组织成模块化和约定驱动的组件。随着越来越多的逻辑和功能从服务器推送到浏览器，这些框架在维护单页应用程序状态、避免无结构和临时“意大利面”代码以及为常见开发情况提供抽象和功能方面变得越来越关键。
- en: This book will focus on one such framework—**Backbone.js** ([http://backbonejs.org/](http://backbonejs.org/))—that
    stands out from the crowd with a well-balanced feature set including small footprint
    size, solid core abstractions, and significant community support. Backbone.js
    provides a minimum set of useful interfaces (for example, models, collections,
    routers, and views) for application development while maintaining an enormous
    amount of flexibility with pluggable template engines, extensible events for cross-component
    communication, and a generally agnostic approach to code interaction and patterns.
    The framework is used at scale in applications for organizations such as USA Today,
    LinkedIn, Hulu, Foursquare, Disqus, and many others. Essentially, Backbone.js
    provides practical tools for data-driven, client-heavy web application development
    without getting too much in the way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点关注这样一个框架——**Backbone.js** ([http://backbonejs.org/](http://backbonejs.org/))——它以其平衡的功能集脱颖而出，包括小巧的体积、坚实的核心抽象和显著的社区支持。Backbone.js
    为应用程序开发提供了一组最小化的有用接口（例如，模型、集合、路由器和视图），同时通过可插拔的模板引擎、可扩展的事件用于跨组件通信以及通常对代码交互和模式采取无偏见的方法，保持了巨大的灵活性。该框架在
    USA Today、LinkedIn、Hulu、Foursquare、Disqus 和许多其他组织的应用程序中得到了大规模的应用。本质上，Backbone.js
    为数据驱动、客户端密集型网络应用程序开发提供了实用的工具，而不会过多地阻碍开发。
- en: However, this evolving world of frontend development is scattered with many
    potential stumbling blocks. More specifically, while the theoretical application
    possibilities with modern JavaScript frameworks such as Backbone.js are endless,
    one of the most critical issues looming over rapid application development in
    this sphere is software quality and reliability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个不断发展的前端开发世界充满了许多潜在的障碍。更具体地说，虽然使用现代 JavaScript 框架（如 Backbone.js）的理论应用可能性是无限的，但在这个领域快速应用程序开发中悬而未决的最关键问题之一是软件质量和可靠性。
- en: 'JavaScript web applications are already notoriously difficult to verify and
    test: asynchronous DOM events and data requests are subject to timing issues and
    spurious failures, display behavior is difficult to isolate from application logic,
    and test suites depend on/interact with a specific browser. Frontend frameworks
    such as Backbone.js add another level of complexity with additional interfaces
    that need to be isolated and tested, large numbers of various small components
    interacting concurrently, and event logic propagating throughout application layers.
    Moreover, the implementation agnostic paradigm of Backbone.js produces wildly
    varying application code bases, making test guidelines and heuristics something
    of a moving target.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 网络应用程序已经臭名昭著地难以验证和测试：异步 DOM 事件和数据请求容易受到时间问题和不真实失败的影响，显示行为难以从应用程序逻辑中隔离，测试套件依赖于/与特定浏览器交互。像
    Backbone.js 这样的前端框架通过需要隔离和测试的额外接口、大量并发交互的小组件以及在整个应用程序层中传播的事件逻辑，增加了另一个复杂层次。此外，Backbone.js
    的无实现范式产生了广泛不同的应用程序代码库，使得测试指南和启发式方法成为一种移动的目标。
- en: 'In this book, we will tackle the challenge of testing Backbone.js applications
    by identifying the parts of an application to be tested, asserting correct behavior
    of various components, and verifying that the program works as intended as an
    integrated whole. Kicking things off in this chapter, we will introduce a basic
    test infrastructure in the following parts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将通过识别应用程序要测试的部分、断言各种组件的正确行为以及验证程序作为一个整体按预期工作来应对测试 Backbone.js 应用程序的挑战。在本章中，我们将介绍以下基本测试基础设施：
- en: Designing a repository structure in which to develop Backbone.js applications
    and tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计用于开发 Backbone.js 应用程序和测试的仓库结构
- en: Getting the Mocha, Chai, and Sinon.JS test libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 Mocha、Chai 和 Sinon.JS 测试库
- en: Setting up and writing our first tests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置并编写我们的第一个测试
- en: Running and assessing test results with the Mocha test reporter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mocha 测试报告运行和评估测试结果
- en: We assume that the reader is already comfortable with JavaScript web application
    development and familiar with Backbone.js and its usual complements—**Underscore.js**
    ([http://underscorejs.org/](http://underscorejs.org/)) and **jQuery** ([http://jquery.com/](http://jquery.com/)).
    All other libraries and technologies will be properly introduced as they are used
    throughout this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设读者已经熟悉 JavaScript Web 应用程序开发，并且熟悉 Backbone.js 及其常用补充——**Underscore.js**
    ([http://underscorejs.org/](http://underscorejs.org/)) 和 **jQuery** ([http://jquery.com/](http://jquery.com/))。所有其他库和技术将在本书中使用时适当介绍。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although this book focuses on Backbone.js applications, the test techniques
    and technologies we introduce should easily carry over to other frontend JavaScript
    frameworks and web applications. There are a lot of great frameworks in the frontend
    ecosystem besides Backbone.js—try one of them!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书主要关注 Backbone.js 应用程序，但我们介绍的测试技术和工具应该很容易迁移到其他前端 JavaScript 框架和 Web 应用程序。前端生态系统中有许多优秀的框架——尝试其中之一吧！
- en: Designing an application and test repository structure
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计应用程序和测试仓库结构
- en: 'Setting up a test infrastructure first requires a plan as to where all the
    parts and pieces will go. We will start with a simple directory structure for
    a code repository as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先设置测试基础设施需要有一个计划，确定所有部分和组件将放在哪里。我们将从一个简单的代码仓库目录结构开始，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `app/index.html` file contains the web application, while `test/test.html`
    provides the test driver page. Application and test libraries are respectively
    contained in the `app/js/` and `test/js/` directories.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/index.html` 文件包含 Web 应用程序，而 `test/test.html` 提供测试驱动页面。应用程序和测试库分别包含在 `app/js/`
    和 `test/js/` 目录中。'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is just one way to organize a Backbone.js application and tests. Other
    directory layouts may be more appropriate, and you should feel free to follow
    your own conventions and preferences in light of the specific development project
    at hand.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是组织 Backbone.js 应用程序和测试的一种方式。其他目录布局可能更合适，你应该根据手头的具体开发项目自由地遵循自己的约定和偏好。
- en: 'The Backbone.js application and component files (models, views, routers, and
    so on) are placed in `app/js/app/`, which may look something like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js 应用程序和组件文件（模型、视图、路由器等）放在 `app/js/app/` 中，可能看起来如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The core application libraries are stored in `app/js/lib/`, which should include
    the libraries needed to drive the actual application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 核心应用程序库存储在 `app/js/lib/` 中，应包括驱动实际应用程序所需的库：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The test libraries and suites get a separate directory, `test/js/`, which isolates
    the test code from the application to avoid inadvertently introducing application
    dependencies on test functions or libraries:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试库和套件有一个单独的目录 `test/js/`，这可以将测试代码与应用程序隔离开来，以避免意外地将应用程序依赖引入测试函数或库：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have an abstract application and a test layout, we need to fill
    in all the pieces and populate directories with libraries, web pages, and test
    files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个抽象的应用程序和测试布局，我们需要填充所有这些部分，并在目录中填充库、网页和测试文件。
- en: Getting the test libraries
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取测试库
- en: The ecosystem of frontend JavaScript test frameworks is quite rich, with libraries
    supporting different paradigms, features, and functionality. Choosing tools from
    this collection is a difficult task, without clear *correct* answers. In this
    book, we have settled on three complementary libraries, **Mocha**, **Chai**, and
    **Sinon.JS**, that provide an aggregate set of features particularly well suited
    for testing Backbone.js applications. In addition to these libraries, we will
    use the **PhantomJS** headless web browser to automate our test infrastructure
    and run tests from the command line.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前端 JavaScript 测试框架生态系统相当丰富，其中包含支持不同范式、功能和特性的库。从这些工具中选择是一个困难的任务，没有明确的“正确”答案。在本书中，我们选择了三个互补的库，**Mocha**、**Chai**
    和 **Sinon.JS**，它们提供了一组特别适合测试 Backbone.js 应用程序的功能。除了这些库之外，我们还将使用 **PhantomJS**
    无头 Web 浏览器来自动化我们的测试基础设施，并从命令行运行测试。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Server-side JavaScript testing with Mocha, Chai, and Sinon.JS**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Mocha、Chai 和 Sinon.JS 进行服务器端 JavaScript 测试**'
- en: Beyond the browser, JavaScript has seen a meteoric rise as a server technology
    via the immensely popular Node.js framework, supplanting traditional server-side
    languages and providing developers with a single-language web application stack.
    Although we will only discuss frontend testing in this book, the three core testing
    libraries we use are all available as server-side testing modules for Node.js.
    There are some non-trivial differences in integration and use (for example, Mocha
    reports are run from the command line and not a browser), but many of the general
    testing and application design concepts we will cover in this book equally apply
    to Node.js server applications, and you can conveniently use exactly the same
    test libraries in your frontend and backend development.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了浏览器之外，JavaScript 通过流行的 Node.js 框架在服务器技术领域实现了飞速发展，取代了传统的服务器端语言，并为开发者提供了一个单一语言的
    Web 应用程序堆栈。尽管我们将在本书中仅讨论前端测试，但我们使用的三个核心测试库都可作为 Node.js 服务器端测试模块使用。在集成和使用方面存在一些非平凡的差异（例如，Mocha
    报告是从命令行而不是浏览器中运行的），但本书中将要涵盖的许多通用测试和应用设计概念同样适用于 Node.js 服务器应用程序，并且你可以方便地在前后端开发中使用完全相同的测试库。
- en: Following the repository structure discussed previously, we will download each
    of the test library files to the `test/js/lib/` directory. After this, we will
    be ready to write and run a test web page against the libraries. Note that although
    we pick specific library versions in this book to correspond with the downloadable
    examples code, we generally recommend using the most recent versions of these
    libraries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前讨论的仓库结构，我们将下载每个测试库文件到 `test/js/lib/` 目录。之后，我们将准备好针对这些库编写和运行测试网页。请注意，尽管我们在本书中选择了特定的库版本以与可下载的示例代码相对应，但我们通常推荐使用这些库的最新版本。
- en: Mocha
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mocha
- en: The Mocha ([http://visionmedia.github.io/mocha/](http://visionmedia.github.io/mocha/))
    framework supports test suites, specs, and multiple test paradigms. Some of the
    nifty features offered by Mocha include frontend and backend integration, versatile
    timeouts, slow test identification, and many different test reporters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha ([http://visionmedia.github.io/mocha/](http://visionmedia.github.io/mocha/))
    框架支持测试套件、规范和多种测试范式。Mocha 提供的一些实用功能包括前端和后端集成、灵活的超时设置、慢速测试识别以及多种不同的测试报告器。
- en: 'To run Mocha tests in a browser, we just need two files—`mocha.js` and `mocha.css`.
    For version 1.9.0, both these files are available from GitHub at the following
    locations:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中运行 Mocha 测试，我们只需要两个文件——`mocha.js` 和 `mocha.css`。对于 1.9.0 版本，这两个文件都可以从
    GitHub 的以下位置获取：
- en: '[https://raw.github.com/visionmedia/mocha/1.9.0/mocha.js](https://raw.github.com/visionmedia/mocha/1.9.0/mocha.js)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.github.com/visionmedia/mocha/1.9.0/mocha.js](https://raw.github.com/visionmedia/mocha/1.9.0/mocha.js)'
- en: '[https://raw.github.com/visionmedia/mocha/1.9.0/mocha.css](https://raw.github.com/visionmedia/mocha/1.9.0/mocha.css)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.github.com/visionmedia/mocha/1.9.0/mocha.css](https://raw.github.com/visionmedia/mocha/1.9.0/mocha.css)'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time this book went to press, the most current versions of Mocha (1.10.0
    and above) have introduced an incompatibility with the Mocha-PhantomJS automation
    tool that we will use later in this book. You can watch the Mocha ([https://github.com/visionmedia/mocha/issues/770](https://github.com/visionmedia/mocha/issues/770))
    and Mocha-PhantomJS ([https://github.com/metaskills/mocha-phantomjs/issues/58](https://github.com/metaskills/mocha-phantomjs/issues/58))
    tickets for status updates and possible future fixes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当本书付印时，Mocha的最新版本（1.10.0及以上）引入了与本书后面将要使用的Mocha-PhantomJS自动化工具的不兼容性。您可以关注Mocha([https://github.com/visionmedia/mocha/issues/770](https://github.com/visionmedia/mocha/issues/770))和Mocha-PhantomJS([https://github.com/metaskills/mocha-phantomjs/issues/58](https://github.com/metaskills/mocha-phantomjs/issues/58))的问题跟踪，以获取状态更新和可能的未来修复。
- en: The JavaScript (`mocha.js`) file contains the library code and the CSS (`mocha.css`)
    file provides the styles for the HTML reporter page. With these files in place,
    we can organize our tests into suites and specs, run our tests, and get a usable
    report of test results.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript (`mocha.js`) 文件包含库代码，CSS (`mocha.css`) 文件为HTML报告页面提供样式。有了这些文件，我们可以将测试组织成套件和规范，运行测试，并获得可用的测试结果报告。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Why Mocha?**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么选择Mocha？**'
- en: Mocha is just one framework from an overall collection of great test libraries.
    Some of the strengths of the Mocha framework include solid asynchronous test support,
    server-side compatibility, alternative test interfaces, and flexible configurability.
    But, we could just as easily go with another test library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha只是众多优秀测试库集合中的一个框架。Mocha框架的一些优势包括强大的异步测试支持、服务器端兼容性、可选的测试接口和灵活的可配置性。但是，我们同样可以轻松选择其他测试库。
- en: As an example of an alternate framework, **Jasmine** ([http://pivotal.github.io/jasmine/](http://pivotal.github.io/jasmine/))
    from Pivotal Labs is another enormously popular JavaScript testing framework.
    It provides test suite and spec support, a built-in assertion library, and many
    more features (including test spies)—it is essentially an all-in-one framework.
    By contrast, Mocha is quite flexible, but you have to add additional components.
    For example, we leverage Chai for assertions and Sinon.JS for mocks and stubs
    in the test infrastructure of this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个替代框架的例子，来自Pivotal Labs的**Jasmine**([http://pivotal.github.io/jasmine/](http://pivotal.github.io/jasmine/))是一个极为流行的JavaScript测试框架。它提供了测试套件和规范支持、内置的断言库以及许多其他功能（包括测试间谍）——它本质上是一个一站式框架。相比之下，Mocha非常灵活，但您需要添加额外的组件。例如，我们在本书的测试基础设施中利用Chai进行断言，以及Sinon.JS进行模拟和存根。
- en: Chai
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chai
- en: Chai ([http://chaijs.com/](http://chaijs.com/)) is a test assertion library
    that offers an extensive API, support for **Behavior-Driven Development** (**BDD**)
    and **Test-Driven Development** (**TDD**) test styles, and a growing plugin ecosystem.
    BDD and TDD will be introduced in more detail in [Chapter 2](ch02.html "Chapter 2. Creating
    a Backbone.js Application Test Plan"), *Creating a Backbone.js Application Test
    Plan*. In particular, we will use Chai's chainable test functions to write assertions
    that read very closely to natural language, allowing tests to maximize comprehensibility
    while minimizing the need for explanatory code comments.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Chai ([http://chaijs.com/](http://chaijs.com/)) 是一个提供广泛API、支持**行为驱动开发**（**BDD**）和**测试驱动开发**（**TDD**）测试风格的断言库，以及不断增长的插件生态系统。BDD和TDD将在第2章*创建Backbone.js应用程序测试计划*中详细介绍。特别是，我们将使用Chai的可链式测试函数编写与自然语言非常接近的断言，使测试在最大程度上易于理解，同时最小化对解释性代码注释的需求。
- en: For integration, we need to download a single library file—`chai.js`. The version
    (1.7.1) that we want is available at [https://raw.github.com/chaijs/chai/1.7.1/chai.js](https://raw.github.com/chaijs/chai/1.7.1/chai.js).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集成，我们需要下载单个库文件——`chai.js`。我们想要的版本（1.7.1）可在[https://raw.github.com/chaijs/chai/1.7.1/chai.js](https://raw.github.com/chaijs/chai/1.7.1/chai.js)找到。
- en: Alternatively, the current stable version of Chai can be found at [http://chaijs.com/chai.js](http://chaijs.com/chai.js).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当前稳定的Chai版本可在[http://chaijs.com/chai.js](http://chaijs.com/chai.js)找到。
- en: Sinon.JS
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sinon.JS
- en: The Sinon.JS library ([http://sinonjs.org/](http://sinonjs.org/)) provides a
    powerful suite of test spies, stubs, and mocks. **Spies** are functions that analyze
    and store information about an underlying function and can be used to verify historical
    behavior of the function under test. **Stubs** are spies that can replace a function
    with a different behavior more amenable to testing. **Mocks** spy on and stub
    functions as well as verify that certain behavior has occurred during test execution.
    We will explain these tools in more detail throughout this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Sinon.JS 库 ([http://sinonjs.org/](http://sinonjs.org/)) 提供了一套强大的测试间谍、存根和模拟工具。**间谍**是分析并存储关于底层函数信息的函数，可用于验证被测试函数的历史行为。**存根**是可以用更适合测试的不同行为替换函数的间谍。**模拟**监视和存根函数，并在测试执行期间验证是否发生了某些行为。我们将在本书的其余部分更详细地解释这些工具。
- en: In practice, Backbone.js applications comprise many different and constantly
    interacting parts, making our goal of testing isolated program components difficult.
    A mocking library such as Sinon.JS will allow us to separate testable application
    behaviors and focus on one thing (for example, a single view or a model) at a
    time.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，Backbone.js 应用程序由许多不同且不断交互的部分组成，这使得我们测试隔离程序组件的目标变得困难。像 Sinon.JS 这样的模拟库将允许我们分离可测试的应用程序行为，并一次专注于一件事情（例如，一个单独的视图或模型）。
- en: 'Like Chai, we just need a single JavaScript file to use Sinon.JS in our tests.
    Versioned releases—we will use version 1.7.3—are available at either of the following
    locations:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Chai 一样，我们只需要一个 JavaScript 文件就可以在我们的测试中使用 Sinon.JS。版本化的发布版本——我们将使用 1.7.3 版本——可以在以下任一位置找到：
- en: '[http://sinonjs.org/releases/sinon-1.7.3.js](http://sinonjs.org/releases/sinon-1.7.3.js)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://sinonjs.org/releases/sinon-1.7.3.js](http://sinonjs.org/releases/sinon-1.7.3.js)'
- en: '[https://raw.github.com/cjohansen/Sinon.JS/v1.7.3/lib/sinon.js](https://raw.github.com/cjohansen/Sinon.JS/v1.7.3/lib/sinon.js)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.github.com/cjohansen/Sinon.JS/v1.7.3/lib/sinon.js](https://raw.github.com/cjohansen/Sinon.JS/v1.7.3/lib/sinon.js)'
- en: Installation of Sinon.JS, along with Mocha and Chai, completes the acquisition
    phase of our test infrastructure creation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Sinon.JS，以及 Mocha 和 Chai，完成了我们测试基础设施创建的获取阶段。
- en: Setting up and writing our first tests
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和编写我们的第一个测试
- en: Now that we have the base test libraries, we can create a test driver web page
    that includes the application and test libraries, sets up and executes the tests,
    and displays a test report.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基础测试库，我们可以创建一个包含应用程序和测试库的测试驱动网页，设置并执行测试，并显示测试报告。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: The source code for all snippets and code examples in this book is available
    online. Files and tests for each chapter can be found by number in the `chapters`
    directory. See the *Preface* for download locations and installation instructions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中所有代码片段和代码示例的源代码均可在网上找到。每个章节的文件和测试可以在 `chapters` 目录中按编号找到。请参阅 *前言* 了解下载位置和安装说明。
- en: The examples are best used as a helpful check on your own progress *after* a
    chapter has been finished and you have applied the lessons and exercises to your
    own code and applications. As a gentle admonition, we encourage you to resist
    the temptation to copy and paste code or files from the examples. The experience
    of writing and adapting the code on your own will allow you to better internalize
    and understand the testing concepts needed to become an adept Backbone.js tester.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在完成一个章节并已将课程和练习应用到自己的代码和应用程序之后，将示例用作对自己进度的一个有益检查。作为温和的告诫，我们鼓励您抵制复制和粘贴示例中的代码或文件。自己编写和修改代码的经验将使您更好地内化和理解成为熟练的
    Backbone.js 测试员所需的测试概念。
- en: The test driver page
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动页面
- en: 'A single web page is typically used to include the test and application code
    and drive all frontend tests. Accordingly, we can create a web page named `test.html`
    in the `chapters/01/test` directory of our repository starting with just a bit
    of HTML boilerplate—a title and `meta` attributes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用单个网页来包含测试和应用程序代码，并驱动所有前端测试。因此，我们可以在我们的存储库的 `chapters/01/test` 目录中创建一个名为
    `test.html` 的网页，从一点 HTML 模板——标题和 `meta` 属性——开始：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we include the Mocha stylesheet for test reports and the Mocha, Chai,
    and Sinon.JS JavaScript libraries:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们包括 Mocha 样式表以用于测试报告，以及 Mocha、Chai 和 Sinon.JS JavaScript 库：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we prepare Mocha and Chai. Chai is configured to globally export the
    `expect` assertion function. Mocha is set up to use the `bdd` test interface and
    start tests on the `window.onload` event:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们准备Mocha和Chai。Chai被配置为全局导出`expect`断言函数。Mocha被设置为使用`bdd`测试接口，并在`window.onload`事件上启动测试：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the library configurations, we add in the test specs. Here we include
    a single test file (that we will create later) for the initial test run:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置完库之后，我们添加测试规范。在这里，我们包括一个单独的测试文件（我们将在稍后创建），用于初始测试运行：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we include a `div` element that Mocha uses to generate the full HTML
    test report. Note that a common alternative practice is to place all the `script`
    include statements before the close `body` tag instead of within the `head` tag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加一个Mocha使用的`div`元素来生成完整的HTML测试报告。请注意，一个常见的替代做法是将所有`script`包含语句放在关闭`body`标签之前，而不是在`head`标签内：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And with that, we are ready to create some tests. Now, you could even open `chapters/01/test/test.html`
    in a browser to see what the test report looks like with an empty test suite.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就准备好创建一些测试了。现在，你甚至可以在浏览器中打开`chapters/01/test/test.html`来查看空测试套件下的测试报告看起来是什么样子。
- en: Adding some tests
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些测试
- en: While test design and implementation is discussed in far more detail in subsequent
    chapters, it is sufficient to say that test development generally entails writing
    JavaScript test files, each containing some organized collection of test functions.
    Let's start with a single test file to preview the testing technology stack and
    give us some tests to run.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然测试设计和实现将在后续章节中详细讨论，但可以说测试开发通常涉及编写JavaScript测试文件，每个文件都包含一些有组织的测试函数集合。让我们从一个单独的测试文件开始，以预览测试技术栈并运行一些测试。
- en: 'The test file `chapters/01/test/js/spec/hello.spec.js` creates a simple function
    (`hello()`) to test and implements a nested set of suites introducing a few Chai
    and Sinon.JS features. The function under test is about as simple as you can get:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件`chapters/01/test/js/spec/hello.spec.js`创建了一个简单的函数（`hello()`）来测试并实现一个嵌套的套件集，引入了一些Chai和Sinon.JS功能。被测试的函数尽可能简单：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `hello` function should be contained in its own library file (perhaps `hello.js`)
    for inclusion in applications and tests. The code samples simply include it in
    the spec file for convenience.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello`函数应该包含在其自己的库文件（可能是`hello.js`）中，以便在应用程序和测试中使用。代码示例只是为了方便将其包含在规范文件中。'
- en: 'The test code uses nested Mocha `describe` statements to create a test suite
    hierarchy. The test in the `Chai` suite uses `expect` to illustrate a simple assertion.
    The `Sinon.JS` suite''s single test shows a test spy in action:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码使用嵌套的Mocha `describe`语句来创建测试套件层次结构。`Chai`套件中的测试使用`expect`来展示一个简单的断言。`Sinon.JS`套件的单个测试展示了测试间谍的作用：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Not to worry if you do not fully understand the specifics of these tests and
    assertions at this point, as we will shortly cover everything in detail. The takeaway
    is that we now have a small collection of test suites with a set of specifications
    ready to be run.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在不完全理解这些测试和断言的细节，不要担心，我们很快会详细覆盖所有内容。重要的是，我们现在有一组准备运行的测试套件和规范。
- en: Running and assessing test results
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和评估测试结果
- en: Now that all the necessary pieces are in place, it is time to run the tests
    and review the test report.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有必要的组件都已就绪，是时候运行测试并审查测试报告了。
- en: The first test report
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一份测试报告
- en: 'Opening up the `chapters/01/test/test.html` file in any web browser will cause
    Mocha to run all of the included tests and produce a test report:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何网络浏览器中打开`chapters/01/test/test.html`文件将导致Mocha运行所有包含的测试并生成测试报告：
- en: '![The first test report](img/5248OS_01_01.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![第一份测试报告](img/5248OS_01_01.jpg)'
- en: Test report
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告
- en: This report provides a useful summary of the test run. The top-right column
    shows that two tests passed, none failed, and the tests collectively took 0.01
    seconds to run. The test suites declared in our `describe` statements are present
    as nested headings. Each test specification has a green checkmark next to the
    specification text, indicating that the test has passed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该报告提供了测试运行的 useful 摘要。右上角列显示有两个测试通过，没有失败，测试总共运行了0.01秒。在`describe`语句中声明的测试套件作为嵌套标题出现。每个测试规范旁边都有一个绿色的勾号，表示测试已通过。
- en: Test report actions
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试报告操作
- en: The report page also provides tools for analyzing subsets of the entire test
    collection. Clicking on a suite heading such as **Trying out the test libraries**
    or **Chai** will re-run only the specifications under that heading.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 报告页面还提供了分析整个测试集合子集的工具。点击套件标题，例如 **尝试测试库** 或 **Chai**，将仅重新运行该标题下的规范。
- en: Clicking on a specification text (for example, **should be equal using 'expect'**)
    will show the JavaScript code of the test. A filter button designated by a right
    triangle is located to the right of the specification text (it is somewhat difficult
    to see). Clicking the button re-runs the single test specification.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 点击规范文本（例如，**使用 'expect' 应该相等**）将显示测试的 JavaScript 代码。一个由右三角形指定的筛选按钮位于规范文本的右侧（它有些难以看到）。点击按钮将重新运行单个测试规范。
- en: '![Test report actions](img/5248OS_01_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![测试报告操作](img/5248OS_01_02.jpg)'
- en: The test specification code and filter
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 测试规范代码和筛选器
- en: The previous figure illustrates a report in which the filter button has been
    clicked. The test specification text in the figure has also been clicked, showing
    the JavaScript specification code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上一图展示了点击了筛选按钮的报告。图中的测试规范文本也已点击，显示了 JavaScript 规范代码。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Advanced test suite and specification filtering**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级测试套件和规范筛选**'
- en: The report suite and specification filters rely on Mocha's **grep** feature,
    which is exposed as a URL parameter in the test web page. Assuming that the report
    web page URL ends with something such as `chapters/01/test/test.html`, we can
    manually add a `grep` filter parameter accompanied with the text to match suite
    or specification names.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 报告套件和规范筛选器依赖于 Mocha 的 **grep** 功能，该功能在测试网页中作为 URL 参数公开。假设报告网页 URL 以 `chapters/01/test/test.html`
    结尾，我们可以手动添加一个 `grep` 筛选参数，并附带文本以匹配套件或规范名称。
- en: For example, if we want to filter on the term `spy`, we would navigate a browser
    to a comparable URL containing `chapters/01/test/test.html?grep=spy`, causing
    Mocha to run only the `should report spy called` specification from the `Sinon.JS`
    suite. It is worth playing around with various `grep` values to get the hang of
    matching just the suites or specifications that you want.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想根据术语 `spy` 进行筛选，我们会在浏览器中导航到一个包含 `chapters/01/test/test.html?grep=spy`
    的类似 URL，这将导致 Mocha 只运行 `Sinon.JS` 套件中的 `should report spy called` 规范。尝试使用各种 `grep`
    值以熟悉仅匹配所需的套件或规范是有益的。
- en: Test timing and slow tests
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试时间和慢速测试
- en: All of our tests so far have succeeded and run quickly, but real-world development
    necessarily involves a certain amount of failures and inefficiencies on the road
    to creating robust web applications. To this end, the Mocha reporter helps identify
    slow tests and analyze failures.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的测试都成功了，并且运行得很快，但现实世界的开发必然涉及在创建健壮的 Web 应用程序过程中的一定程度的失败和低效。为此，Mocha
    报告器有助于识别慢速测试和分析失败。
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Why is test speed important?**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么测试速度很重要？**'
- en: Slow tests can indicate inefficient or even incorrect application code, which
    should be fixed to speed up the overall web application. Further, if a large collection
    of tests run too slow, developers will have implicit incentives to skip tests
    in development, leading to costly defect discovery later down the deployment pipeline.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 慢速测试可能表明应用程序代码低效甚至错误，这应该被修复以加快整个 Web 应用程序的速度。此外，如果大量测试运行得太慢，开发者将有隐性的激励在开发中跳过测试，导致在部署管道后期发现缺陷的成本高昂。
- en: Accordingly, it is a good testing practice to routinely diagnose and speed up
    the execution time of the entire test collection. Slow application code may be
    left up to the developer to fix, but most slow tests can be readily fixed with
    a combination of tools such as stubs and mocks as well as better test planning
    and isolation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，定期诊断并加快整个测试集合的执行时间是良好的测试实践。慢速应用程序代码可能留给开发者修复，但大多数慢速测试可以通过结合使用诸如存根和模拟以及更好的测试规划和隔离等工具来迅速修复。
- en: 'Let''s explore some timing variations in action by creating `chapters/01/test/js/spec/timing.spec.js`
    with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建 `chapters/01/test/js/spec/timing.spec.js` 并使用以下代码来探索一些实际操作中的时间变化：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We use the native JavaScript `setTimeout()` function to simulate slow tests.
    To make the tests run asynchronously, we use the `done` test function parameter,
    which delays test completion until `done()` is called. Asynchronous tests will
    be explored in more detail in [Chapter 3](ch03.html "Chapter 3. Test Assertions,
    Specs, and Suites"), *Test Assertions, Specs, and Suites*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用原生的JavaScript `setTimeout()`函数来模拟慢速测试。为了使测试异步运行，我们使用`done`测试函数参数，它将测试完成延迟到`done()`被调用。异步测试将在[第3章](ch03.html
    "第3章。测试断言、规范和套件")*测试断言、规范和套件*中更详细地探讨。
- en: The first test has no delay before the test assertion and `done()` callback,
    the second adds 40 milliseconds of latency, the third adds 100 milliseconds, and
    the final test adds 2001 milliseconds. These delays will expose different timing
    results under the Mocha default configuration that reports a slow test at 75 milliseconds,
    a medium test at one half the slow threshold, and a failure for tests taking longer
    than 2 seconds.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项测试在测试断言和`done()`回调之前没有延迟，第二项增加了40毫秒的延迟，第三项增加了100毫秒，最后测试增加了2001毫秒。这些延迟将在Mocha默认配置下暴露不同的定时结果，该配置报告慢速测试为75毫秒，中等测试为慢速阈值的二分之一，以及超过2秒的测试失败。
- en: 'Next, include the file in your test driver page (`chapters/01/test/test-timing.html`
    in the example code):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将文件包含到您的测试驱动程序页面中（例如示例代码中的`chapters/01/test/test-timing.html`）：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, on running the driver page, we get the following report:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在运行驱动程序页面后，我们得到以下报告：
- en: '![Test timing and slow tests](img/5248OS_01_03.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![测试定时和慢速测试](img/5248OS_01_03.jpg)'
- en: Test report timings and failures
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告的定时和失败
- en: This figure illustrates timing annotation boxes for our medium (orange) and
    slow (red) tests and a test failure/stack trace for the 2001-millisecond test.
    With these report features, we can easily identify the slow parts of our test
    infrastructure and use more advanced test techniques and application refactoring
    to execute the test collection efficiently and correctly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此图展示了我们中等速度（橙色）和慢速（红色）测试的定时注释框以及2001毫秒测试的测试失败/堆栈跟踪。有了这些报告功能，我们可以轻松地识别测试基础设施中的慢速部分，并使用更高级的测试技术和应用程序重构来高效且正确地执行测试集合。
- en: Test failures
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试失败
- en: 'A test timeout is one type of test failure we can encounter in Mocha. Two other
    failures that merit a quick demonstration are assertion and exception failures.
    Let''s try out both in a new file named `chapters/01/test/js/spec/failure.spec.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 测试超时是我们可能在Mocha中遇到的测试失败类型之一。另外两种值得快速演示的失败类型是断言失败和异常失败。让我们在一个名为`chapters/01/test/js/spec/failure.spec.js`的新文件中尝试这两种情况：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first test, `should fail on assertion`, is a Chai assertion failure, which
    Mocha neatly wraps up with the message `expected 'hi' to equal 'goodbye'`. The
    second test, `should fail on unexpected exception`, throws an unchecked exception
    that Mocha displays with a full stack trace.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项测试`should fail on assertion`是一个Chai断言失败，Mocha通过消息`expected 'hi' to equal
    'goodbye'`整洁地封装了它。第二项测试`should fail on unexpected exception`抛出一个未经检查的异常，Mocha通过完整的堆栈跟踪显示它。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Stack traces on Chai assertion failures vary based on the browser. For example,
    in Chrome, no stack trace is displayed for the first assertion while one is shown
    in Safari. See the Chai documentation for configuration options that offer more
    control over stack traces.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Chai断言失败时的堆栈跟踪根据浏览器而异。例如，在Chrome中，第一次断言不显示堆栈跟踪，而在Safari中则显示。请参阅Chai文档，了解提供更多堆栈跟踪控制选项的配置选项。
- en: '![Test failures](img/5248OS_01_04.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![测试失败](img/5248OS_01_04.jpg)'
- en: Test failures
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败
- en: Mocha's failure reporting neatly illustrates what went wrong and where. Most
    importantly, Chai and Mocha report the most common case—a test assertion failure—in
    a very readable natural language format.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha的失败报告清晰地说明了出了什么问题以及在哪里。最重要的是，Chai和Mocha以非常易读的自然语言格式报告最常见的案例——测试断言失败。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced an application and test structure suitable for
    development, gathered the Mocha, Chai, and Sinon.JS libraries, and created some
    basic tests to get things started. Then, we reviewed some facets of the Mocha
    test reporter and watched various tests in action—passing, slow, timeouts, and
    failures.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一种适合开发的程序和测试结构，收集了Mocha、Chai和Sinon.JS库，并创建了一些基本测试以开始。然后，我们回顾了Mocha测试报告的一些方面，并观察了各种测试的实际运行情况——通过、慢速、超时和失败。
- en: In the next chapter, we will integrate a Backbone.js application as the target
    of our test framework and learn how to test, isolate, and verify program behavior
    throughout the course of application development.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把 Backbone.js 应用程序集成为我们测试框架的目标，并学习如何在应用程序开发过程中测试、隔离和验证程序行为。
