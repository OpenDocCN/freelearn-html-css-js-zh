- en: Chapter 3. Getting Started with Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。Less 入门
- en: In the first two chapters of this book, [Chapter 1](part0018_split_000.html#page
    "Chapter 1. Introducing Less"), *Introducing Less*, and [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*, we learned what Less is, some of its benefits, and the reasons why you
    should get to grips with a preprocessor that is rapidly gaining serious traction
    in the development world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前两章中，[第 1 章](part0018_split_000.html#page "第 1 章。介绍 Less")，*介绍 Less* 和 [第
    2 章](part0025_split_000.html#page "第 2 章。构建 Less 开发工具包")，*构建 Less 开发工具包*，我们学习了
    Less 是什么，它的一些好处，以及为什么你应该掌握一个在开发世界中迅速获得重要影响力的预处理器。
- en: In this chapter, we're going to start by downloading and installing Less and
    then setting up our base project that we can reuse throughout this book, which
    is already set to our preferences. While it might seem a little mundane, it is
    nevertheless an essential part of working with Less! Once we have our base project
    ready, we will then delve into a whistle-stop tour of some of the main code features
    of Less, before looking at how you can compile your Less code into valid CSS and
    seeing the effects of any changes made to the Less code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从下载和安装 Less 开始，然后设置我们可以在整本书中重复使用的基础项目，它已经设置为我们的偏好。虽然这可能看起来有点平凡，但它确实是使用
    Less 的一个基本部分！一旦我们的基础项目准备就绪，我们将快速浏览 Less 的一些主要代码功能，然后查看如何将你的 Less 代码编译成有效的 CSS，并看到对
    Less 代码所做的任何更改的效果。
- en: 'In this chapter, we will delve a little deeper into Less by covering the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题更深入地探讨 Less：
- en: Incorporating Less into your website
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Less 集成到你的网站中
- en: The dangers of using Less on the client side
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端使用 Less 的风险
- en: Exploring the syntax used by Less
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Less 使用的语法
- en: Creating some basic styles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一些基本样式
- en: Compiling the code and viewing the results
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译代码并查看结果
- en: Altering the Less code and viewing the effects of changes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 Less 代码并查看更改的效果
- en: Ready? As they say in temperal mechanics, there's no time like the present to
    get started...!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？正如他们在时间力学中所说，现在开始是最佳时机...！
- en: Creating the foundation page
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基础页面
- en: Now that we have downloaded the library, the next stage is to set up our base
    project that we can reuse throughout this book. This is going to be a simple HTML5
    document, which will contain the basic skeleton we will need for our projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载了库，下一步是设置我们的基础项目，我们可以在整本书中重复使用它。这将是一个简单的 HTML5 文档，它将包含我们项目所需的基本框架。
- en: For my code editor, I will be using Sublime Text 2, for which we set up support
    for Less back in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building
    a Less Development Toolkit"), *Building a Less Development Toolkit*. This is available
    for download from Sublime Text's website at [http://www.sublimetext.com/2](http://www.sublimetext.com/2),
    although you can use whichever editor you are most comfortable with.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的代码编辑器，我将使用 Sublime Text 2，我们已经在 [第 2 章](part0025_split_000.html#page "第
    2 章。构建 Less 开发工具包")，*构建 Less 开发工具包* 中设置了 Less 的支持。这个工具包可以从 Sublime Text 的网站 [http://www.sublimetext.com/2](http://www.sublimetext.com/2)
    下载，尽管你可以使用你最舒适的任何编辑器。
- en: 'Let''s start by creating our base project file. In a new folder called `lessjs`,
    create a new file and add the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的基础项目文件。在一个名为 `lessjs` 的新文件夹中，创建一个新文件并添加以下代码：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 书籍的账户中下载示例代码文件 [http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给你。
- en: Save this as `project.html`. We'll make reference to this throughout the book
    and it will be the basis for each of our projects when using Less.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为 `project.html`。我们将在整本书中引用这个文件，并且它是使用 Less 时每个项目的基石。
- en: Downloading and installing Less
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 Less
- en: Now that we have a test page created, it's time to download the Less library.
    The latest version of the library is 1.7.3, which we will reference throughout
    this book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个测试页面，是时候下载 Less 库了。库的最新版本是 1.7.3，我们将在这本书中引用这个版本。
- en: 'To obtain a copy of the library, there are two main options available: downloading
    the latest release as a standalone library or compiling code using Node. We''ll
    start with downloading the standalone library.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取库的副本，有两种主要选项可用：下载作为独立库的最新版本或使用Node编译代码。我们将从下载独立库开始。
- en: Installing Less on the client side
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端安装Less
- en: To use Less in our code, we can download it from the Less site by browsing to
    [http://lesscss.org/#download-options-browser-downloads](http://lesscss.org/#download-options-browser-downloads)
    and then clicking on the **Download Less.js v.1.7.3** button.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的代码中使用Less，我们可以通过浏览到[http://lesscss.org/#download-options-browser-downloads](http://lesscss.org/#download-options-browser-downloads)并点击**Download
    Less.js v.1.7.3**按钮从Less网站下载它。
- en: 'Save the contents of the file, displayed in the browser window as `less.min.js`,
    in a subfolder called `js`, under the main `lessjs` project folder; you will end
    up with something like this screenshot (this shows the files you will create later
    in this chapter):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将浏览器窗口中显示的文件内容`less.min.js`保存在主`lessjs`项目文件夹下的一个名为`js`的子文件夹中；最终你会得到类似这样的截图（这显示了你在本章后面将创建的文件）：
- en: '![Installing Less on the client side](img/00028.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在客户端安装Less](img/00028.jpeg)'
- en: 'In a copy of the `project.html` file we created at the start of this chapter,
    add the code as highlighted:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头创建的`project.html`文件副本中，添加如下高亮显示的代码：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's it—once this has been added, Less will compile the styles into valid
    CSS dynamically and render the results in the browser. The key point to note is
    that for Less to compile the styles correctly, the reference to the Less style
    sheet file must be included in your code first, before the reference to the Less
    library.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样——一旦添加了这些，Less将动态地将样式编译成有效的CSS并在浏览器中渲染结果。需要注意的是，为了使Less正确编译样式，必须在代码中首先包含对Less样式表文件的引用，然后再包含对Less库的引用。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Can I get the source code for Less?**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**我可以获取Less的源代码吗？**'
- en: If you want to delve into the Less library and examine the code in more detail,
    then you might like to download a copy of the uncompressed version of the library,
    which is available at [https://github.com/less/less.js/archive/master.zip](https://github.com/less/less.js/archive/master.zip).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要深入了解Less库并更详细地检查代码，那么你可能想下载库的非压缩版本，该版本可在[https://github.com/less/less.js/archive/master.zip](https://github.com/less/less.js/archive/master.zip)找到。
- en: Using a CDN
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CDN
- en: Although we could download a copy of the library, we don't need to when hosting
    it in a production environment. Less is available on a content delivery network
    hosted by CDNJS. You can instead link to this version in your code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以下载库的副本，但在生产环境中托管时我们不需要这样做。Less可在由CDNJS托管的CDN上使用。你可以在代码中链接到这个版本。
- en: If you host an international site with a lot of network traffic, using a **Content
    Delivery Network** (**CDN**) hosted file will help ensure that the library is
    downloaded to a visitor's computer from a server that is geographically close
    to them. This helps in making the response quicker, as the browser will use a
    cached version on subsequent visits to the page, which saves on bandwidth. This
    is *not* recommended for development however!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你托管了一个网络流量很大的国际网站，使用由CDN托管的文件将有助于确保库是从地理位置靠近访客的服务器下载到访客的计算机上的。这有助于使响应更快，因为浏览器将在后续访问页面时使用缓存的版本，从而节省带宽。然而，这**不**推荐用于开发！
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to use a CDN link, then it can be found at [http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js](http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用CDN链接，它可以在[http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js](http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js)找到。
- en: Installing Less on the server side
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器端安装Less
- en: As an alternative to compiling code on the fly, we can always use the command
    line to perform the same function—Less comes with a built-in command-line compiler
    that requires the JavaScript-based Node platform to operate.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为即时编译代码的替代方案，我们始终可以使用命令行来执行相同的功能——Less附带一个内置的命令行编译器，该编译器需要基于JavaScript的Node平台来运行。
- en: Installing Less using Node
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node安装Less
- en: 'We took a look at how you can install Node in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*; I will assume that you have installed it using the defaults, as outlined
    in that chapter. At this point, we now need to install the Less compiler, so bring
    up a command prompt, change to the location of the project folder we created earlier,
    and enter the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](part0025_split_000.html#page "第2章. 构建Less开发工具包")*构建Less开发工具包*中探讨了如何安装Node；我将假设您已经按照该章节中概述的默认设置安装了它。到目前为止，我们现在需要安装Less编译器，所以打开一个命令提示符，切换到我们之前创建的项目文件夹的位置，并输入以下命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see it run through a download and install of Less at the command prompt:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在命令提示符中看到它运行下载和安装Less的过程：
- en: '![Installing Less using Node](img/00029.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node安装Less](img/00029.jpeg)'
- en: 'Once the installation is complete, we can enter the following command to compile
    a Less file, which uses this syntax:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以输入以下命令来编译Less文件，它使用以下语法：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Less will compile the output to `stdout`; if we want to use a different one,
    then we can redirect the output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Less会将输出编译到`stdout`；如果我们想使用不同的输出，则可以重定向输出：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We're now ready to compile Less files at the command prompt—we will see this
    in action, later in this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好在命令提示符中编译Less文件了——我们将在本章的后面看到这个操作的实际应用。
- en: Installing Less using Bower
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bower安装Less
- en: Using Node with the command line is not the only option we have—we can also
    install Less using the cross-platform Bower package manager system, available
    at [http://www.bower.io](http://www.bower.io).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 Node 与命令行之外，我们还可以使用跨平台的 Bower 包管理器系统安装 Less，该系统可在[http://www.bower.io](http://www.bower.io)找到。
- en: Based on Node, Bower is designed to help with the installation of packages for
    the web, such as jQuery, AngularJS, the Font Awesome icon library, and of course,
    Less. Let's take a look at how to install it for Windows, as this has an added
    dependency of Git for Windows, which must also be installed if we are to use this
    platform.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Node，Bower 被设计用来帮助安装网络包，例如 jQuery、AngularJS、Font Awesome 图标库，当然还有 Less。让我们看看如何在
    Windows 上安装它，因为这需要一个额外的依赖项——Git for Windows，如果我们想使用这个平台，它也必须被安装。
- en: To get the full benefit from this demonstration, you will find it better to
    use a local web server, such as WAMP. For the purposes of this book, I will assume
    this has been installed with the default settings.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用这个演示，您会发现使用本地Web服务器，如WAMP，会更好。出于本书的目的，我将假设它已经按照默认设置安装。
- en: 'Start by visiting [http://msysgit.github.io](http://msysgit.github.io) and
    downloading the latest installer, which is `Git-1.8.5.2-preview20131230.exe` at
    the time of writing. Double-click on the installer and click on **Next** to accept
    all defaults, until you get to this screen:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问[http://msysgit.github.io](http://msysgit.github.io)并下载最新的安装程序，即写作时的`Git-1.8.5.2-preview20131230.exe`。双击安装程序，然后点击**下一步**以接受所有默认设置，直到到达此屏幕：
- en: '![Installing Less using Bower](img/00030.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bower安装Less](img/00030.jpeg)'
- en: Change the selected option to **Run Git from the Windows Command Prompt**, then
    continue by clicking on **Next** to accept the defaults for the remaining settings.
    The Git installer will install and configure the client, and once completed, it
    will display the installation notes for reading if desired.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将选定的选项更改为**从Windows命令提示符运行Git**，然后通过点击**下一步**接受剩余设置的默认值。Git安装程序将安装和配置客户端，完成后，如果需要，将显示安装说明以供阅读。
- en: 'In a command prompt, enter the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符中，输入以下命令：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will download and install the various packages that make up Bower—it will
    display a confirmation if the installation has been successful:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并安装构成Bower的各种包——如果安装成功，它将显示确认信息：
- en: '![Installing Less using Bower](img/00031.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bower安装Less](img/00031.jpeg)'
- en: 'Once the Bower installation has been completed, change to the `www` folder
    within your web space and enter the following command to install the Less package
    for Bower:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Bower安装完成后，切换到您的网络空间中的`www`文件夹，并输入以下命令来安装Bower的Less包：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will perform a similar process to download and install the Less package
    for Bower, as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行一个类似的过程来下载和安装Bower的Less包，如下面的截图所示：
- en: '![Installing Less using Bower](img/00032.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bower安装Less](img/00032.jpeg)'
- en: At this point, Bower is now installed and available for use.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Bower已经安装并可供使用。
- en: Using the Bower package
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Bower包
- en: Now that Bower is installed, we can use it in our code—the major difference
    though is that it doesn't contain a version of `lessc`, so we are limited to only
    using it to compile dynamically in our code, and that developing code, which relies
    on using Node, is not supported.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Bower 已经安装，我们可以在代码中使用它——然而，主要的区别是它不包含 `lessc` 的版本，所以我们只能将其用于在代码中动态编译，并且不支持依赖于
    Node 的代码开发。
- en: 'With this in mind, we can still use it in a development capacity, to at least
    prove that our code works—for this, we only need to make one change to our code.
    If we open a copy of `project.html`, we can change the highlighted line to use
    the Bower version of Less, instead of the original version:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们仍然可以在开发中使用它，至少可以证明我们的代码是可行的——为此，我们只需要对我们的代码进行一个更改。如果我们打开一个 `project.html`
    的副本，我们可以将高亮行更改为使用 Bower 版本的 Less，而不是原始版本：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can, of course, take this much further—Bower operates very much in the same
    manner as Node, allowing us to produce `.json` packages, just as we did for Node
    in the previous chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以进一步扩展这一点——Bower 运作方式与 Node 非常相似，允许我们产生 `.json` 包，就像我们在上一章中为 Node 所做的那样。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn more about producing packages for Bower, then Bob Yexley
    has a useful article at [http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/](http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于为 Bower 生成包的信息，那么 Bob Yexley 在 [http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/](http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/)
    有一个有用的文章。
- en: Let's now turn our attention to getting accustomed to the Less syntax. Before
    we do so, there is one important point we need to be aware of that concerns the
    dangers of using Less on the client side.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在把注意力转向熟悉 Less 语法。在我们这样做之前，有一个重要的观点我们需要注意，那就是在客户端使用 Less 的风险。
- en: The dangers of using Less on the client side
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端使用 Less 的风险
- en: So far, we've worked through how you can install Less in your code and use it
    to compile code into valid CSS, as each page is displayed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了如何在代码中安装 Less 并使用它将代码编译成有效的 CSS，因为每个页面都是这样显示的。
- en: Surely we should be good to start using Less, right? After all, we have the
    library in place, we know how to add it in, and know something of what to expect
    when styles have been compiled...or perhaps not. There is one critical point we've
    missed; let me explain.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们应该准备好开始使用 Less，对吧？毕竟，我们已经有了库，我们知道如何添加它，并且对样式编译后的预期有所了解……或者也许不是。我们错过了一个关键点；让我解释一下。
- en: When Less first came out, it was originally written using Ruby; this meant code
    had to be compiled first, before including the results in website pages, as valid
    CSS. Although this was a perfectly valid procedure, it made development slower,
    as extra steps were required in order to compile the Less code and include it
    in web pages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Less 首次推出时，它最初是用 Ruby 编写的；这意味着代码必须首先编译，然后才能将其结果包含在网站页面中，作为有效的 CSS。尽管这是一个完全有效的程序，但它使得开发速度变慢，因为需要额外的步骤来编译
    Less 代码并将其包含在网页中。
- en: The rebasing of the library in JavaScript led to a 30 to 40 percent increase
    in speed—this led to the temptation to include the library directly in code, along
    with the raw Less code. This worked well enough, while removing the need to compile
    the code separately.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将库重置为 JavaScript 导致速度提高了 30% 到 40%——这导致了直接在代码中包含库和原始 Less 代码的诱惑。这足够好，同时消除了单独编译代码的需要。
- en: 'This, however, is no longer deemed good practice, at least for production sites,
    for a number of reasons:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，出于多种原因，这已经不再被认为是良好的实践，至少对于生产网站来说是这样：
- en: JavaScript can be turned off—a reliance on JavaScript to control the styling
    for a site means that it will break, resulting in a messy site!
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 可以被关闭——依赖于 JavaScript 来控制网站的样式意味着如果关闭 JavaScript，网站将会出错，导致网站变得混乱！
- en: A reliance on a JavaScript-based library means that another HTTP request has
    to be made to the server, which can result in increased loading times, particularly
    for script-heavy sites.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于基于 JavaScript 的库意味着必须向服务器发出另一个 HTTP 请求，这可能导致加载时间增加，尤其是对于脚本密集型网站。
- en: On a content-heavy site, with a lot of styles, this can lead to a noticeable
    increase in rendering times, as the styles have to be compiled dynamically before
    content is rendered on.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内容丰富的网站上，有很多样式，这可能导致渲染时间的明显增加，因为样式必须在内容渲染之前动态编译。
- en: Most mobile platforms cannot handle the compilation of Less (nor the associated
    JavaScript file) dynamically and will just abort the execution, which will result
    in a mess.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数移动平台无法动态处理Less的编译（以及相关的JavaScript文件），它们将直接终止执行，这会导致混乱。
- en: This doesn't mean compiling on client side is a complete no-no, it should just
    be limited to working in development environments, or in instances where it is
    beneficial to store the library locally, such as within an HTML5 application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着在客户端编译是完全禁止的，它应该仅限于工作在开发环境中，或者在需要将库本地存储的实例中，例如在HTML5应用程序中。
- en: You will note that many of the examples throughout this book will use Less client-side.
    This is to ensure that you, as the reader, are exposed to the whole experience;
    as we are working in a development/demonstration capacity, this is not an issue.
    When working on production sites, the Less code should always be precompiled first,
    before adding it to the site.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，本书中的许多示例将使用Less客户端。这是为了确保你，作为读者，能够体验到整个过程；由于我们是在开发/演示环境中工作，这并不是一个问题。当在产品网站上工作时，Less代码应始终先预编译，然后再添加到网站上。
- en: Exploring the syntax used by Less
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Less使用的语法
- en: Enough theory about installing! Let's move on and take a look at the syntax
    that makes up Less. Over the next few chapters, we will explore each part of the
    library in depth; before doing so, we will start with a whistle-stop tour through
    some of the more important parts of the library, beginning with variables.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于安装的理论就到这里吧！让我们继续，看看构成Less的语法。在接下来的几章中，我们将深入探讨库的每个部分；在这样做之前，我们将快速浏览库的一些重要部分，从变量开始。
- en: Working with variables
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量
- en: 'If we need to write CSS styles, it''s likely that we will include one or more
    styles that appear in multiple places. A great example is a number of shapes,
    where we might need to use the same value for borders or foreground colors:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要编写CSS样式，很可能会包含一个或多个出现在多个地方的风格。一个很好的例子是许多形状，我们可能需要使用相同的值来设置边框或前景色：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We could, as web designers, simply use the same color values throughout our
    code, and where appropriate, this is a perfectly valid option. However, what happens
    if we've set up a specific set of colors, only to find they all need to be changed?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网页设计师，我们可以在代码中简单地使用相同的颜色值，并且在不适当的情况下，这是一个完全有效的选项。然而，如果我们已经设置了一套特定的颜色，却发现它们都需要更改，会发生什么呢？
- en: Each style can be changed individually, although this assumes we manage to change
    every instance—on a style-heavy site, and with the best will in the world, there
    will always be one that we miss!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个风格都可以单独更改，尽管这假设我们能够更改每个实例——在一个风格繁重的网站上，即使我们尽力，也总会错过一个！
- en: 'We can solve this easily by using variables to store a constant value for each
    color, and use it throughout the style sheet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用变量来存储每个颜色的常量值，并在整个样式表中使用它来轻松解决这个问题：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This means that if we choose to change the original color for something else,
    then all we need to do is change the color value assigned to the relevant variable,
    and Less will automatically update each instance of the variable throughout the
    rest of the code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果我们选择更改原始颜色用于其他目的，那么我们只需更改分配给相关变量的颜色值，Less将自动更新代码中该变量的每个实例。
- en: In our example, we set up a variable to store the color value of `#5cb100`—if
    we wanted to change this, then we will only need to change the assigned variable
    at the start. Less will then handle the updating of every instance where the variable
    has been used, so we can be confident that the change has taken effect throughout
    our code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们设置了一个变量来存储颜色值`#5cb100`——如果我们想更改这个值，那么我们只需更改起始处分配的变量即可。然后Less将处理更新所有使用该变量的实例，因此我们可以确信更改已在我们整个代码中生效。
- en: We will explore more of variables in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第四章](part0041_split_000.html#page "第四章. 使用变量、混合和函数")中进一步探讨变量，*使用变量、混合和函数*。
- en: Changing variables programmatically
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序化更改变量
- en: Although we can set variables as static values, we might come across instances
    where it will be beneficial to programmatically change a value assigned to a Less
    variable, from within our code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将变量设置为静态值，但我们可能会遇到需要从代码内部程序化地更改分配给Less变量的值的实例。
- en: Hopefully, this is not something you will have to do too often, but it is useful
    to at least know how it works. Let's take a quick look at how this works, using
    an example form that has a couple of input fields and a simple **Submit** button.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这不会是您需要经常做的事情，但至少了解它是如何工作的是有用的。让我们快速看一下它是如何工作的，使用一个包含几个输入字段和一个简单的 **提交** 按钮的示例表单。
- en: 'In a new file, open a copy of the `project.html` file we created earlier, then
    alter the code as shown:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中，打开我们之前创建的 `project.html` 文件副本，然后按照所示修改代码：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, add the following code in between the `<body>` tags:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `<body>` 标签之间添加以下代码：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, add the following Less styles to a new file, saving it as `object.less`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将以下 Less 样式添加到一个新文件中，并将其保存为 `object.less`：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In our example, we've added a reference to the Less object, then used the `modifyVars`
    method to change the color of the `@button-color` variable, which we specified
    in `object.less`, to `#61783F`. We will cover variables in more detail in [Chapter
    4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins, and
    Functions"), *Working with Variables, Mixins, and Functions*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们添加了对 Less 对象的引用，然后使用 `modifyVars` 方法将 `object.less` 中指定的 `@button-color`
    变量的颜色更改为 `#61783F`。我们将在 [第 4 章](part0041_split_000.html#page "第 4 章. 使用变量、混合和函数")
    *使用变量、混合和函数* 中更详细地介绍变量。
- en: Creating mixins
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建混合
- en: 'The next key element of Less is the creation of mixins, or predefined blocks
    of Less code that we can reuse from one ruleset, as part of another ruleset. So,
    we take the following block of CSS as an example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Less 的下一个关键元素是创建混合，或者说是预定义的 Less 代码块，我们可以将其从一条规则集中重用，作为另一条规则集的一部分。因此，我们以下面的
    CSS 块为例：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we've added a gradient color of dark green to a preset style rule called
    `.green-gradient`. So far so good; this will produce a perfectly usable gradient
    that fades from green to very dark green.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向一个名为 `.green-gradient` 的预设样式规则添加了深绿色的渐变色。到目前为止一切顺利；这将产生一个从绿色到非常深绿色的渐变，完全可用。
- en: 'We could repeat this block of code for each instance where an object needs
    a similar style, but that would quickly lead to a lot of unnecessary code bloat.
    Instead, we can include the block of code as a mixin, within another style:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每个需要类似样式的对象重复这段代码块，但这会迅速导致大量不必要的代码膨胀。相反，我们可以在另一个样式内包含代码块作为混合：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This produces the following valid CSS—the mixin code is highlighted:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下有效的 CSS——混合代码被突出显示：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using this method means that we can cut down on the code we need to write and
    still produce the same results. As you will see in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*, we will take this a step further—with some careful planning,
    we can begin to build up a library of mixins that we can reuse in future projects.
    The key to this is creating mixins that are sufficiently generic, which can then
    be reused as needed. Others have already created such libraries and made them
    available online—we will use some of the more well-known ones, such as **3L, More
    or Less** and **LESSHat**, in our code examples.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法意味着我们可以减少需要编写的代码量，同时仍然产生相同的结果。正如您将在 [第 4 章](part0041_split_000.html#page
    "第 4 章. 使用变量、混合和函数") *使用变量、混合和函数* 中看到的，我们将更进一步——通过一些精心的规划，我们可以开始构建一个可以用于未来项目的混合库。关键在于创建足够通用的混合，这样就可以根据需要重用。其他人已经创建了这样的库并在网上提供，我们将使用一些更知名的工具，例如
    **3L, More or Less** 和 **LESSHat**，在我们的代码示例中。
- en: The great thing about Less is that when we include these mixin libraries, Less
    will only include those mixins from the libraries where they are being referenced
    in our code. While it might initially seem like we're including a lot of extra
    code, the reality is that only a fraction of the code is used—it all comes down
    to careful planning as to how much we need to use!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Less 的好处在于，当我们包含这些混合库时，Less 只会包含那些在我们的代码中被引用的库中的混合。虽然一开始可能看起来我们包含了大量的额外代码，但实际情况是只有一小部分代码被使用——这都归结于我们如何精心规划需要使用多少代码！
- en: Nesting styles in Less
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Less 中的嵌套样式
- en: 'Moving on, let''s turn our focus to another key part of the Less library: the
    ability to nest styles. No, I''m not talking about bird habits (if you excuse
    the pun!), but a way to reduce repetition when creating your styles. Let me explain
    more.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将注意力转向 Less 库的另一个关键部分：嵌套样式的功能。不，我并不是在谈论鸟类的习性（如果您不介意这个双关语），而是一种在创建样式时减少重复的方法。让我详细解释一下。
- en: 'Imagine you have a block of code similar to the following code, where a number
    of CSS styles have been created for child elements against their parent element:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一块类似于以下代码的代码块，其中为子元素相对于其父元素创建了一系列 CSS 样式：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On the face of it, this would appear normal code, right? Absolutely, there's
    nothing wrong with it. However, we can do better than this—as part of defining
    the class styles for each child element, there is a necessary degree of repetition
    in each style rule.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，这似乎是正常的代码，对吧？绝对没错，它没有任何问题。然而，我们可以做得更好——在定义每个子元素的类样式时，每个样式规则中都有必要的重复程度。
- en: 'Using Less, we can embed or nest our styles more effectively. Our code will
    appear as this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Less，我们可以更有效地嵌入或嵌套我们的样式。我们的代码将看起来像这样：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Granted that it might not always reduce the number of lines required when writing
    code in your editor. However, this is not necessarily the aim of the exercise—the
    key here is to make the code more readable, as styles that relate to a specific
    element are grouped together, so it is clearer what role they play. You will find,
    particularly on larger sites, that this can sometimes mean a reduction in the
    number of lines we need to write—it all comes down to careful planning! We will
    cover nesting in more detail in [Chapter 5](part0050_split_000.html#page "Chapter 5. Inheritance,
    Overriding, and Nesting in Less"), *Inheritance, Overriding, and Nesting in Less*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 承认这一点可能并不总是能减少在编辑器中编写代码所需的行数。然而，这并不是练习的目的——关键在于使代码更易于阅读，因为与特定元素相关的样式被分组在一起，这样就可以更清楚地了解它们的作用。你会发现，尤其是在较大的网站上，这有时意味着我们需要编写的行数会减少——这都取决于周密的计划！我们将在[第5章](part0050_split_000.html#page
    "第5章。Less中的继承、覆盖和嵌套")中更详细地介绍嵌套，*Less中的继承、覆盖和嵌套*。
- en: Calculating values using operations
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用操作符计算值
- en: So far, our whistle-stop preview has taken us through creating variables, basic
    mixins, and reordering our code through the use of nesting. We're now going to
    step things up a little and have a look at the use of operators in our code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的快速预览已经带我们了解了创建变量、基本混合和通过嵌套重新排序代码。现在，我们将进一步提高难度，看看代码中使用操作符的情况。
- en: Operators? Suprised? I am sure you are. Let's see what happens when we use them
    in our code. Imagine we have a number of shapes on screen, which are perfectly
    sized and positioned. We could use individual style rules for each element, but
    it would require careful calculations to ensure we had everything in the right
    place, particularly if any element needed repositioning.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符？惊讶吗？我确信你会的。让我们看看当我们把它们用在代码中会发生什么。想象一下，屏幕上有几个形状，它们的大小和位置都恰到好处。我们可以为每个元素使用单独的样式规则，但这需要仔细的计算来确保所有元素都在正确的位置，尤其是如果任何元素需要重新定位的话。
- en: 'Instead, we can use simple maths to work out the size and position of each
    element automatically, based on one or more given values:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用简单的数学来自动计算每个元素的大小和位置，基于一个或多个给定值：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It will, of course, require that each calculation be worked out, but once this
    is done, then all we need to do is change the initial value set, and it will automatically
    update every other value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这需要每个计算都要完成，但一旦完成，我们只需要更改初始值集，它将自动更新其他所有值。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It''s worth noting that a strict math option is available in Less, which only
    calculates math that is encapsulated in parentheses, such as this code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在 Less 中有一个严格的数学选项可用，它只计算括号内封装的数学表达式，例如以下代码：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can read more about this option at [http://lesscss.org/usage/#command-line-usage-strict-math](http://lesscss.org/usage/#command-line-usage-strict-math).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://lesscss.org/usage/#command-line-usage-strict-math](http://lesscss.org/usage/#command-line-usage-strict-math)了解更多关于这个选项的信息。
- en: 'In our example, we''ve set an initial variable, `@basic-width`, of 100 px,
    then used it to double the width of `shape2`. Once the code is compiled, it will
    produce the following CSS:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们设置了一个初始变量 `@basic-width` 为 100 px，然后使用它来加倍 `shape2` 的宽度。一旦代码被编译，它将生成以下
    CSS：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If we were to change the value for `.shape1` to `75px` for example, then the
    width of `.shape2` will be recalculated as 2 x 75px, or `150px`. We'll be exploring
    more on the use of operators later in this book.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `.shape1` 的值更改为例如 `75px`，那么 `.shape2` 的宽度将被重新计算为 2 x 75px，即 `150px`。我们将在本书的后面部分更深入地探讨操作符的使用。
- en: Extending existing styles in Less
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Less 中扩展现有样式
- en: 'This is a relatively new feature in Less and works almost as a direct opposite
    to a normal mixin. It takes a little time to get used to it, so let''s examine
    a simple example—imagine you have a `div` tag that uses the following style rule:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Less中的一个相对较新的功能，它几乎与正常mixin完全相反。它需要一点时间来习惯，所以让我们看看一个简单的例子——想象你有一个使用以下样式规则的`div`标签：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `div` tag produces a very light gray color as its background color. We
    can use this to extend another element:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`div`标签产生的背景颜色是浅灰色。我们可以用这个来扩展另一个元素：'
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This compiles to the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成以下代码：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Instead of adding a whole bunch of properties of a mixin class to an existing
    class, it adds the extending selector to the existing selector so that the output
    of the extended class includes both sets of styles.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与将mixin类的所有属性添加到现有类中不同，它将扩展选择器添加到现有选择器中，这样扩展类的输出将包括两组样式。
- en: 'The beauty of this is that it results in a similar effect to using mixins,
    but without the associated bloat that you sometimes get when using mixins. It
    works by taking the contents of the existing selector, in this instance `background-color:
    #e0e0e0`, and assigning it to the new selector, `p`. This way, we can be more
    selective about reusing styles from existing elements, without the need to introduce
    new mixins.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '这种方法的优点是它产生的效果与使用mixins类似，但不会像使用mixins时有时会出现的膨胀。它是通过获取现有选择器的内容，在这个例子中是`background-color:
    #e0e0e0`，并将其分配给新选择器`p`来实现的。这样，我们可以更精确地重用现有元素中的样式，而无需引入新的mixins。'
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that extend will not check for duplicates. If you extend the same selector
    twice, it will add the selector twice. For more details, see [http://lesscss.org/features/#extend-featureduplication-detection](http://lesscss.org/features/#extend-featureduplication-detection).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，extend不会检查重复。如果你扩展了同一个选择器两次，它将添加两次该选择器。更多详情，请参阅[http://lesscss.org/features/#extend-featureduplication-detection](http://lesscss.org/features/#extend-featureduplication-detection)。
- en: Compiling the code and viewing results
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译代码并查看结果
- en: Now that we've seen something of the syntax of Less, let's change tack and focus
    on how to compile our Less styles to produce valid CSS. There are several ways
    to achieve this, of which we touched on some back in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. For the moment, we're going to concentrate on using Crunch! to compile
    our code; we will switch to using the command line later in this section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了Less的语法，让我们改变方向，关注如何将Less样式编译成有效的CSS。有几种方法可以实现这一点，其中一些我们在[第2章](part0025_split_000.html#page
    "第2章. 构建Less开发工具包")中提到过，*构建Less开发工具包*。目前，我们将专注于使用Crunch!来编译我们的代码；我们将在本节的后面部分切换到使用命令行。
- en: Using a standalone compiler
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用独立编译器
- en: We will start with the variable example shown earlier in this chapter. Let's
    begin by starting up Crunch! and then clicking on the **New LESS file** button
    in the main code window. By default, it will create a new placeholder file called
    `new.less`; paste in the code from our example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从本章前面展示的变量示例开始。让我们首先启动Crunch!，然后在主代码窗口中点击**New LESS file**按钮。默认情况下，它将创建一个名为`new.less`的新占位符文件；将示例中的代码粘贴进去。
- en: 'Press *Ctrl* + *S* to save the file, then save it in the `lessjs` project folder
    we created earlier, as `variables.less`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *S*保存文件，然后将其保存在我们之前创建的`lessjs`项目文件夹中，命名为`variables.less`：
- en: '![Using a standalone compiler](img/00033.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![使用独立编译器](img/00033.jpeg)'
- en: 'Click on **Crunch File** to view the results of the compiled code—it will prompt
    you to assign a filename, so give it the default, which is the same name of the
    Less file, or in this instance, `variables.css`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Crunch File**查看编译代码的结果——它会提示你分配一个文件名，所以请使用默认名称，即与Less文件相同的名称，或者在这个例子中，`variables.css`：
- en: '![Using a standalone compiler](img/00034.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![使用独立编译器](img/00034.jpeg)'
- en: That was easy, huh? Any time we make a change to our Less file, all we need
    to do is save it, then click on **Crunch File** and the file is automatically
    updated. Let's test this by changing the color value assigned to the `@my-color`
    variable.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，对吧？每次我们修改我们的Less文件时，我们只需要保存它，然后点击**Crunch File**，文件就会自动更新。让我们通过更改分配给`@my-color`变量的颜色值来测试这一点。
- en: 'In the `variable.less` file, alter the value shown against `@my-color` as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`variable.less`文件中，按照以下方式修改`@my-color`所显示的值：
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Resave the file, then click on **Crunch File**—the `variable.css` tab will
    flash momentarily to indicate that it has been updated. Click on it to view the
    changes:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，点击**Crunch File**——`variable.css`标签会短暂闪烁，表示已更新。点击它以查看更改：
- en: '![Using a standalone compiler](img/00035.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![使用独立编译器](img/00035.jpeg)'
- en: 'As we can see, Crunch! has successfully updated the changes to our code—if
    there had been an error, it would flag an error message at the foot of our code,
    such as this one, to indicate a missing `}` at the end of our code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Crunch!已成功更新了我们的代码更改——如果存在错误，它会在代码底部显示错误消息，例如这个，以指示代码末尾缺少`}`：
- en: '![Using a standalone compiler](img/00036.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用独立编译器](img/00036.jpeg)'
- en: Adding the missing `}` in this instance will fix the issue and allow Crunch!
    to recompile our code without any issue. Let's switch tack now and focus on performing
    the same operation, but this time using the command line instead.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中添加缺失的`}`将修复问题，并允许Crunch!重新编译我们的代码而不会出现任何问题。现在让我们改变策略，专注于执行相同的操作，但这次使用命令行。
- en: Using the command-line compiler
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行编译器
- en: So far, we've used a standalone editor to compile (or Crunch!—pun intended!)
    our code. It has successfully produced some valid CSS for us, which can be used
    in a normal HTML page if desired. This works well, but might not be the preferred
    choice for everyone!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用独立编辑器来编译（或者Crunch!——这是个双关语！）我们的代码。它已经成功地为我们生成了一些有效的CSS，如果需要的话，可以在正常的HTML页面中使用。这很好，但可能不是每个人的首选选择！
- en: Instead of having to use a standalone compiler, we can achieve the same result
    by using the command line instead. Granted that this is a little bit more of a
    manual process, but it does give us the opportunity to hook in the compilation
    process as a command that we can run directly from most text editors.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必使用独立编译器，而是可以通过使用命令行来实现相同的结果。虽然这有点手动，但它确实给了我们机会将编译过程作为可以直接从大多数文本编辑器中运行的命令挂钩。
- en: Compiling Less files using the command line
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行编译Less文件
- en: 'The process to compile Less files via the command line is very easy. Start
    by bringing up a command prompt and changing the location to your project folder,
    which is the `lessjs` folder we created earlier. At the command prompt, type in
    the following command and then press *Enter*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行编译Less文件的过程非常简单。首先，打开命令提示符，并将位置更改为我们之前创建的项目文件夹，即`lessjs`文件夹。在命令提示符中，输入以下命令，然后按*Enter*：
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That's all that is required for a basic compilation. Less will now compile the
    `variables.less` file and save the results as `variables.css` in the same folder.
    It means that you can leave this session open in the background and rerun the
    command each time you want to make a change to the code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 基本编译所需的就是这些。现在Less将编译`variables.less`文件，并将结果保存为同一文件夹中的`variables.css`。这意味着你可以将这个会话在后台保持开启状态，每次想要对代码进行更改时，都可以重新运行该命令。
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Less has a number of other options available when using `lessc` via the command
    line. To view them, type in `lessc` at a command prompt to display the full list.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用命令行中的`lessc`时，Less提供了一些其他选项。要查看它们，请在命令提示符中输入`lessc`以显示完整列表。
- en: Watching for changes in Watch mode
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视监视模式中的更改
- en: In this exercise, we're going to take a look at a simple, but useful feature
    called the Watch mode. This allows us to make changes to any Less file while still
    in development, and for us to reload the page without having to force a complete
    reload of the page from the server. It is worth noting that the Watch mode can
    be used with the local filesystem, or with a web server—both will produce the
    same effect. For the purposes of the book, we will assume the use of the latter;
    in this case, we will use WampServer, which we covered back in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. If you are a Mac user, then you can use something such as MAMP; Linux
    users will have a selection of local web servers available within their distro.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将查看一个简单但实用的功能，称为监视模式。这允许我们在开发过程中对任何Less文件进行更改，并且无需从服务器强制完全重新加载页面即可重新加载页面。值得注意的是，监视模式可以与本地文件系统或Web服务器一起使用——两者都将产生相同的效果。为了本书的目的，我们将假设使用后者；在这种情况下，我们将使用WampServer，这是我们之前在[第2章](part0025_split_000.html#page
    "第2章. 构建Less开发工具包")中介绍的，*构建Less开发工具包*。如果你是Mac用户，则可以使用MAMP；Linux用户在其发行版中将有可用的本地Web服务器选项。
- en: We're going to test it by creating a simple form with the username and password
    fields.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个包含用户名和密码字段的简单表单来测试它。
- en: 'Assuming that we have installed WAMP, or have web space available, start by
    opening up your text editor, then add the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经安装了WAMP，或者有可用的网络空间，首先打开你的文本编辑器，然后添加以下代码：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how `less.env = "development"` has been added. This sets Less to work
    in the development mode—this is one of several options we can set in this mode.
    For more details, it is worth reading the documentation on Less' site at [http://lesscss.org/usage/#using-less-in-the-browser](http://lesscss.org/usage/#using-less-in-the-browser).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到已经添加了`less.env = "development"`。这会将Less设置为开发模式——这是在这个模式下我们可以设置的几个选项之一。更多详情，值得阅读Less网站上的文档[http://lesscss.org/usage/#using-less-in-the-browser](http://lesscss.org/usage/#using-less-in-the-browser)。
- en: 'Save it as `watchr.html` in the `www` folder, which should be `c:\wamp\www`
    by default. Next, in a separate file, add the following and save it as `include.less`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`www`文件夹中的`watchr.html`，默认情况下应该是`c:\wamp\www`。接下来，在另一个文件中，添加以下内容并保存为`include.less`：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Fire up your browser, then navigate to it by entering the appropriate URL into
    your browser; if all is well, you will see something like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的浏览器，然后在浏览器中输入适当的URL导航到它；如果一切顺利，你将看到如下内容：
- en: '![Watching for changes in Watch mode](img/00037.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![在监视模式下观察变化](img/00037.jpeg)'
- en: 'Keep your browser window open. Now, let''s make a change to our Less code;
    in the Less file, change the `@color-button` value to `#334466`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 保持浏览器窗口打开。现在，让我们对我们的Less代码进行更改；在Less文件中，将`@color-button`的值更改为`#334466`：
- en: '[PRE28]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Save the change to the Less file. Within a few moments, we will see the color
    of our button change from dark green to dark blue, as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改保存到Less文件中。几分钟后，我们将看到我们的按钮颜色从深绿色变为深蓝色，如下截图所示：
- en: '![Watching for changes in Watch mode](img/00038.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![在监视模式下观察变化](img/00038.jpeg)'
- en: 'When working with Less, compiled styles are stored in the **localStorage**
    area of the browser, and they remain there until the **localStorage** area is
    cleared. We can see this by pressing *F12*, then clicking on **DOM**, and scrolling
    down to the **localStorage** entry—assuming Firebug is installed:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Less时，编译后的样式存储在浏览器的**localStorage**区域，并且它们将保留在那里，直到**localStorage**区域被清除。我们可以通过按*F12*，然后点击**DOM**，并滚动到**localStorage**条目来查看这一点——假设已经安装了Firebug：
- en: '![Watching for changes in Watch mode](img/00039.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![在监视模式下观察变化](img/00039.jpeg)'
- en: To view any changes, we have to force a refresh from the server—using the watch
    facility forces the browser into the development mode, which prevents the browser
    from caching the generated CSS files.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看任何更改，我们必须从服务器强制刷新——使用监视功能将浏览器强制进入开发模式，这会阻止浏览器缓存生成的CSS文件。
- en: It is worth noting that there are other methods you can use to watch for changes,
    such as using Grunt or Gulp. Two great examples include observr, which is available
    at [https://github.com/kevinburke/observr](https://github.com/kevinburke/observr),
    or lessc-bash, downloadable from [https://github.com/pixelass/lessc-bash](https://github.com/pixelass/lessc-bash).
    We covered using Grunt to watch for changes in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，还有其他方法可以用来监视更改，例如使用Grunt或Gulp。两个很好的例子包括在[https://github.com/kevinburke/observr](https://github.com/kevinburke/observr)可用的observr，或者可以从[https://github.com/pixelass/lessc-bash](https://github.com/pixelass/lessc-bash)下载的lessc-bash。我们在[第2章](part0025_split_000.html#page
    "第2章。构建Less开发工具包")中介绍了如何使用Grunt监视更改，*构建Less开发工具包*。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We're now ready to start exploring the Less syntax in more detail. Before we
    do so, let's recap what we learned throughout this chapter.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始更详细地探索Less语法了。在我们这样做之前，让我们回顾一下本章学到的内容。
- en: We began with how you can download and install Less; we first covered how you
    can download this as a standalone library, before incorporating it into our pages.
    We also took a brief look at how you can use a CDN link instead of downloading
    the code; while this isn't recommended for development purposes, it nevertheless
    is worthwhile for production sites, where the browser can cache the library if
    a visitor has already accessed the library on a previous site.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从如何下载和安装Less开始；我们首先介绍了如何将其作为独立库下载，然后再将其整合到我们的页面中。我们还简要地看了看如何使用CDN链接而不是下载代码；虽然这不建议用于开发目的，但它对于生产站点来说仍然是有价值的，如果访问者已经在一个之前的网站上访问过库，浏览器可以缓存该库。
- en: Moving on, we then took a look at how you install Less server-side, using the
    Node platform. We saw how easy it is to compile Less files, using a single command,
    and that we can perform this as many times as we like, by rerunning the command
    when needed. We discussed how to install Less by taking a look at the dangers
    of using it client side and how this should really be limited to use in a development
    environment only, due to the extra demands placed on the hosting server.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们探讨了如何在Node平台上进行Less的服务器端安装。我们看到了使用单个命令编译Less文件是多么简单，并且我们可以根据需要多次执行此命令。我们讨论了如何通过观察客户端使用Less的风险来安装Less，以及由于对托管服务器提出的额外要求，这实际上应该仅限于开发环境中的使用。
- en: We then changed focus and took a whistle-stop tour on some of the key parts
    of the Less syntax, as a precursor to exploring it in more detail in later chapters.
    We covered the use of variables, mixins, nesting, operations, and extending in
    Less before switching to compiling some basic code to see how the compilation
    process works. We examined how you can use either a standalone compiler or the
    command line to perform the same operation. We finished the chapter with a look
    at how to use the `watch()` function within Less—this can be set to watch for
    any changes in the Less file and force the browser to automatically refresh the
    page, without the need for manual intervention.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们改变了焦点，对Less语法的几个关键部分进行了快速浏览，作为在后续章节中更详细探索的先导。在切换到编译一些基本代码以查看编译过程如何工作之前，我们介绍了Less中变量的使用、混入、嵌套、操作和扩展。我们检查了如何使用独立的编译器或命令行执行相同的操作。我们以在Less中使用`watch()`函数结束本章——这可以设置为监视Less文件中的任何更改，并强制浏览器自动刷新页面，无需手动干预。
- en: We've now covered the basics of how to install Less and get it up and running
    in our code. Let's move on and begin our journey through the functionality of
    Less, starting with a look at mixins, functions, and variables.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了如何安装Less以及如何在我们的代码中启动它。接下来，让我们继续前进，开始探索Less的功能，从混入（mixins）、函数和变量开始。
