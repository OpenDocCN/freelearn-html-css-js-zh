- en: Chapter 10. Improving Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 提高性能
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Performing network requests from a cache
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从缓存执行网络请求
- en: Performing network requests from a network
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网络执行网络请求
- en: Testing `waitUntil`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试`waitUntil`
- en: Implementing background sync
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现后台同步
- en: Sending forward requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送转发请求
- en: Avoiding model fetching and render times
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免模型获取和渲染时间
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this last chapter, we will explore improving performance with the help of
    the service worker. Now, we are going to look into the areas around improving
    network requests from a cache and network, implementing background sync, sending
    forward requests, and avoiding model fetching and render times.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将探讨如何通过服务工作者来提高性能。现在，我们将探讨提高从缓存和网络中执行网络请求的领域，实现后台同步，发送转发请求，以及避免模型获取和渲染时间。
- en: Performing network requests from a cache
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从缓存中执行网络请求
- en: If you are a regular visitor to a certain website, chances are that you may
    be loading most of the resources such as CSS and JavaScript files from your cache
    rather than the server itself. This saves us necessary bandwidth for the server
    as well as requests over the network. Having control over which content we deliver
    from the cache and server is a great advantage. The server worker provides us
    this powerful feature by giving us programmatic control over the content. In this
    recipe, we are going to look at the methods that enable us to do so by creating
    a performance art event viewer web app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常访问某个网站，那么你可能会从你的缓存而不是服务器本身加载大部分资源，如CSS和JavaScript文件。这为我们节省了服务器必要的带宽以及网络请求。控制我们从缓存和服务器中提供哪些内容是一个巨大的优势。服务器工作者通过给我们程序性地控制内容来提供这个强大的功能。在本食谱中，我们将探讨通过创建性能艺术事件查看器网络应用程序来实现这一目标的方法。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")中的*设置服务工作者*食谱，*学习服务工作者基础*。服务工作者仅在HTTPS上运行。要了解如何设置开发环境以支持此功能，请参考以下[第1章](ch01.html
    "第1章. 学习服务工作者基础")中的食谱：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，以及*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Follow these instructions to set up your file structure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构。
- en: 'Download files from the following location:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/)'
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`。![如何做...](img/B05381_10_01.jpg)
- en: First we will request data from the network with the cache enabled. Click on
    the **FETCH** button.![How to do it...](img/B05381_10_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将启用缓存从网络请求数据。点击**获取**按钮。![如何做...](img/B05381_10_02.jpg)
- en: Now we are going to select the **Disabled** checkbox under the **SOURCE** label
    and click on the **FETCH** button again in order to fetch data only from the cache.
    An error will be shown on the page. Since the cache is disabled, data cannot be
    fetched.![How to do it...](img/B05381_10_03.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将选择**禁用**选项卡下的**源**标签下的**禁用**复选框，然后再次点击**获取**按钮，以便只从缓存中获取数据。页面上将显示错误。由于缓存已禁用，无法获取数据。![如何做...](img/B05381_10_03.jpg)
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `index.js` file, we will set a page-specific name for the cache as the
    caches are per origin-based and no other page should use the same cache name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，我们将为缓存设置一个特定页面的名称，因为缓存是基于源的，并且没有其他页面应该使用相同的缓存名称。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you inspect the **Resources** tab of the development tools, you can find
    the cache inside **Cache Storage**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查开发工具的 **资源** 选项卡，你可以在 **缓存存储** 中找到缓存。
- en: '![How it works...](img/B05381_10_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_10_04.jpg)'
- en: We will store the elapsed time for the cache in variables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将存储缓存的经过时间到变量中。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The source URL, for example, points to a file location in GitHub via RawGit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 源 URL，例如，通过 RawGit 指向 GitHub 中的文件位置。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository in GitHub and creating a file with your data in the JSON
    format (you don't need the `.json` extension). Once you've done that, copy the
    URL of the file and head over to [https://rawgit.com](https://rawgit.com).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要设置自己的源 URL，你可以通过在 GitHub 中创建一个 gist 或仓库，并创建一个包含你的数据的 JSON 格式文件（不需要 `.json`
    扩展名）来轻松地做到这一点。一旦完成，复制文件的 URL 并前往 [https://rawgit.com](https://rawgit.com)。
- en: 'Paste the link there to obtain another link with a content type header as shown
    in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将链接粘贴到那里以获取一个包含内容类型头部的链接，如下截图所示：
- en: '![How it works...](img/B05381_10_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_10_05.jpg)'
- en: Between the time we click on the fetch button and all the data being received,
    we have to make sure that the user doesn't either change the criteria for searching
    or click on the fetch button again. To handle this situation, we will disable
    the controls.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击获取按钮和所有数据接收之间，我们必须确保用户不会更改搜索标准或再次点击获取按钮。为了处理这种情况，我们将禁用控件。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The returned data will be rendered to the screen in rows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据将以行形式渲染到屏幕上。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each item of the `events` array will be printed to the screen as rows.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`events` 数组的每个项目都将作为行打印到屏幕上。'
- en: '![How it works...](img/B05381_10_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05381_10_06.jpg)'
- en: The `handleFetchComplete` function is the callback for the cache.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleFetchComplete` 函数是缓存的回调。'
- en: Because request bodies can only be read once, we have to clone the response.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为请求体只能读取一次，我们必须克隆响应。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will place the cloned response in the cache using `cache.put` as a key value
    pair. This helps subsequent cache fetches to find this updated data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `cache.put` 将克隆的响应作为键值对放入缓存。这有助于后续的缓存获取找到这些更新的数据。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we will read the response in the JSON format.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将读取以 JSON 格式返回的响应。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the user clicks on the fetch button, we will make nearly simultaneous requests
    from the cache for data. This would happen on a page load in a real-world application
    instead of as a result of a user action.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击获取按钮时，我们将几乎同时从缓存中请求数据。这在现实世界的应用程序中会在页面加载时发生，而不是由用户操作引起的。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To simulate cache delays, we wait before calling the cache fetch callback. In
    case the callback errors out, we will make sure that we reject `Promise` we got
    from the original call to match.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟缓存延迟，我们在调用缓存获取回调之前等待。如果回调出错，我们将确保从原始调用中得到的 `Promise` 被拒绝以匹配。
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatDate` 函数是我们将接收到的响应中的日期格式转换为屏幕上更易读格式的辅助函数。'
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you prefer a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢不同的日期格式，你可以通过在返回语句中调整数组的顺序来达到你喜欢的格式。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Showing cached content first* recipe in [Chapter 3](ch03.html "Chapter 3. Accessing
    Offline Content"), *Accessing Offline Content*
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 3 章“访问离线内容”的 *显示缓存内容首先* 菜谱中，*访问离线内容*
- en: Performing network requests from a network
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网络执行网络请求
- en: In the previous recipe, we looked at how we can fetch requests from the cache.
    In this recipe, we are going to demonstrate how we can fetch requests from the
    server/network using the service worker. To demonstrate network fetch, we are
    going to build an interface similar to the previous recipe, but catered to show
    network interactions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们探讨了如何从缓存中获取请求。在这个菜谱中，我们将演示如何使用服务工作者从服务器/网络中获取请求。为了演示网络获取，我们将构建一个类似于上一个菜谱的界面，但专门用于展示网络交互。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*，*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")的以下食谱：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，以及*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download files from the following location:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/)'
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_07.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`。![如何操作...](img/B05381_10_07.jpg)
- en: First, we will request data from the network with the cache enabled. Click on
    the **FETCH** button.![How to do it...](img/B05381_10_08.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将启用缓存从网络请求数据。点击**获取**按钮。![如何操作...](img/B05381_10_08.jpg)
- en: Now we are going to select the **Disabled** checkbox under the **SOURCE** label
    and click on the **FETCH** button again in order to fetch data only from the cache.
    An error will be shown on the page. Since the cache is disabled, data cannot be
    fetched.![How to do it...](img/B05381_10_09.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将选择**源**标签下的**禁用**复选框，然后再次点击**获取**按钮，以便只从缓存中获取数据。页面上将显示错误。由于缓存已禁用，无法获取数据。![如何操作...](img/B05381_10_09.jpg)
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `index.js` file, we will set a page-specific name for the cache as the
    caches are per origin-based and no other page should use the same cache name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，我们将为缓存设置一个特定于页面的名称，因为缓存是基于源的，并且没有其他页面应该使用相同的缓存名称。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you inspect the **Resources** tab of the development tools, you can find
    the cache inside **Cache Storage**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查开发工具的**资源**标签页，你可以在**缓存存储**中找到缓存。
- en: We will store the elapsed time for both networks in variables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将存储两个网络的时间差到变量中。
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The source URL, for example, points to a file location in GitHub via RawGit.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 源URL，例如，通过RawGit指向GitHub上的文件位置。
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository in GitHub and creating a file with your data in the JSON
    format (you don''t need the `.json` extension). Once you''ve done that, copy the
    URL of the file and head over to [https://rawgit.com](https://rawgit.com). Paste
    the link there to obtain a another link with a content type header as shown in
    the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要设置自己的源URL，你可以通过在GitHub中创建一个gist或仓库并创建一个包含你的数据的JSON格式的文件（不需要`.json`扩展名）轻松地做到这一点。一旦你这样做，复制文件的URL并转到[https://rawgit.com](https://rawgit.com)。将链接粘贴到那里以获取另一个带有内容类型头的链接，如下面的截图所示：
- en: '![How it works...](img/B05381_10_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B05381_10_10.jpg)'
- en: Between the time we click on the fetch button and all the data being received,
    we have to make sure that the user doesn't either change the criteria for searching
    or click on the fetch button again. To handle this situation, we will disable
    the controls.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击获取按钮和所有数据接收之间，我们必须确保用户不会更改搜索标准或再次点击获取按钮。为了处理这种情况，我们将禁用控件。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The returned data will be rendered to the screen in rows.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据将以行形式渲染到屏幕上。
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Each item of the `events` array will be printed to the screen as rows.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`events`数组中的每个项目都将作为行打印到屏幕上。'
- en: '![How it works...](img/B05381_10_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B05381_10_11.jpg)'
- en: The `handleFetchComplete` function is the callback for both the cache and network.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleFetchComplete`函数是缓存和网络的双向回调。'
- en: If the **Disabled** checkbox is checked we will simulate a network error by
    throwing an error.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果勾选了**禁用**复选框，我们将通过抛出错误来模拟网络错误。
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Because request bodies can only be read once, we have to clone the response.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求体只能读取一次，我们必须克隆响应。
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we will read the response in the JSON format.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将以JSON格式读取响应。
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the user clicks on the fetch button, we will make nearly simultaneous requests
    from the network and the cache for data. This would happen on a page load in a
    real-world application instead of as the result of a user action.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击获取按钮时，我们将从网络和缓存几乎同时请求数据。这在现实世界的应用程序中会在页面加载时发生，而不是用户操作的结果。
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will start with disabling any user input while the network fetch requests
    are initiated.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始禁用在网络获取请求发起期间的所有用户输入。
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We will request data with the fetch API with a cache-busting URL as well as
    a no-cache option in order to support Firefox, which hasn't implemented the caching
    options yet.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用带有缓存破坏URL以及无缓存选项的fetch API请求数据，以支持尚未实现缓存选项的Firefox。
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In order to simulate network delays, we wait before calling the network fetch
    callback. In situations where the callback errors out, we have to make sure that
    we reject `Promise` we received from the original fetch.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟网络延迟，我们在调用网络获取回调之前会等待。在回调出错的情况下，我们必须确保我们拒绝从原始获取中接收到的`Promise`。
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatDate`函数是我们将接收到的响应中的日期格式转换为屏幕上更易读格式的辅助函数。'
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you prefer a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢不同的日期格式，你可以调整返回语句中数组的顺序以符合你的偏好格式。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Showing cached content first* recipe in [Chapter 3](ch03.html "Chapter 3. Accessing
    Offline Content"), *Accessing Offline Content*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 访问离线内容")中的*首先显示缓存内容*配方，*访问离线内容*'
- en: Testing waitUntil
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试waitUntil
- en: In this recipe, we are going to use the service worker to test the `waitUntil`
    method, which will delay the install method of the service worker life cycle until
    the process of opening caches and saving a page to the cache.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用服务工作者来测试`waitUntil`方法，这将延迟服务工作者生命周期的安装方法，直到打开缓存并将页面保存到缓存的过程。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的*设置服务工作者*配方，*学习服务工作者基础*。服务工作者仅在HTTPS上运行。要了解如何设置开发环境以支持此功能，请参考以下[第1章](ch01.html
    "第1章. 学习服务工作者基础")的配方：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download files from the following location:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/)'
- en: 'Open a browser and go to `index.html`. You will see the **Registration status:
    successful** message.![How to do it...](img/B05381_10_12.jpg)'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`。你会看到**注册状态：成功**的消息。![如何操作...](img/B05381_10_12.jpg)
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the **Network** tab,
    click on the dropdown displaying **No Throttling**, and select **Offline**.![How
    to do it...](img/B05381_10_13.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*），转到**网络**标签页，点击显示**无限制**的下拉菜单，并选择**离线**。![如何操作...](img/B05381_10_13.jpg)
- en: Now refresh your bowser, and you will see the offline message and the image.![How
    to do it...](img/B05381_10_14.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在刷新你的浏览器，你会看到离线消息和图片。![如何操作...](img/B05381_10_14.jpg)
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `waitUntil` event extends the lifetime of the install event until all the
    caches are populated. In other words, it delays treating the installing worker
    as installed until all the resources we specify are cached and the passed promise
    resolves successfully.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`waitUntil`事件延长了安装事件的生存期，直到所有缓存都已填充。换句话说，它将处理安装中的工作者视为已安装的操作延迟到我们指定的所有资源都已缓存并且传递的承诺成功解决。'
- en: We saw an HTML and an image file getting cached and then retrieved when our
    website was offline. We can cache other resources as well, including CSS and JavaScript
    files.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到当我们的网站离线时，HTML文件和图片文件被缓存，然后被检索。我们还可以缓存其他资源，包括CSS和JavaScript文件。
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the registration is successful, we will instruct the service worker to
    intercept a request and provide resources from the cached content using the fetch
    event.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册成功时，我们将指示服务工作者拦截请求，并使用fetch事件从缓存内容中提供资源。
- en: Inside the `index.html` file, when the registration is successful, we will inspect
    the state of the registration and print it to the browser. Otherwise, we will
    print the error message returned by the service worker.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`文件内部，当注册成功时，我们将检查注册状态并将其打印到浏览器。否则，我们将打印服务工作者返回的错误信息。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The service worker script file will intercept network requests, check for connectivity,
    and provide the content for the user.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者脚本文件将拦截网络请求，检查连接性，并为用户提供内容。
- en: We will add an event listener to the install event, and inside the callback
    we will fire a request to get this offline page with its resources, which gets
    added to the cache when the result is successful.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在安装事件上添加事件监听器，并在回调函数中发起一个请求以获取此离线页面及其资源，当结果成功时，这些资源将被添加到缓存中。
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now we can retrieve this page whenever we need to, because the offline page
    is stored in the cache. We need to add the logic to return the offline page if
    we don't have connectivity in the same service worker.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以随时检索此页面，因为离线页面已存储在缓存中。如果我们没有连接性，我们需要在同一个服务工作者中添加逻辑以返回离线页面。
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We are listening out for the fetch event in the preceding source code, and we
    simply return the offline page from the cache if we detect that the user is trying
    to navigate to another page, resulting in an error. Now we have our offline page
    working.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在监听前面源代码中的fetch事件，如果我们检测到用户试图导航到另一个页面并导致错误，我们简单地从缓存中返回离线页面。现在我们的离线页面已经工作。
- en: Implementing background sync
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现背景同步
- en: The background synchronization feature of the service worker is responsible
    for managing background synchronization processes. This feature, as of writing
    this book, is still nonstandard and you should avoid using it in the production.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者（service worker）的背景同步功能负责管理后台同步过程。截至撰写本书时，此功能仍是非标准的，你应该避免在生产环境中使用它。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参阅[第1章](ch01.html "第1章. 学习服务工作者基础")中的*设置服务工作者*配方，*学习服务工作者基础*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参阅[第1章](ch01.html
    "第1章. 学习服务工作者基础")中的*设置GitHub页面以支持SSL*配方，*学习服务工作者基础*。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Copy files from the following location:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置复制文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/)'
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_15.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`。![如何操作...](img/B05381_10_15.jpg)
- en: Click on the **Register Background Sync** button. A message will appear at the
    bottom displaying **Sync registered**.![How to do it...](img/B05381_10_16.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册背景同步**按钮。底部将出现一条消息显示**同步已注册**。![如何操作...](img/B05381_10_16.jpg)
- en: A notification message will also appear on the screen.![How to do it...](img/B05381_10_17.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕上也会出现通知消息。![如何操作...](img/B05381_10_17.jpg)
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our `index.html` file, we will add a section for the button and the message.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`index.html`文件中，我们将添加一个用于按钮和消息的部分。
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We will handle the button click in the `index.js` file. Notifications need permissions,
    so we will handle that here as well.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`index.js`文件中处理按钮点击。通知需要权限，因此我们也将在这里处理。
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Our `service-worker.js` file is fairly simple. We show the notification when
    the sync event handler is called.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`service-worker.js`文件相当简单。当同步事件处理器被调用时，我们显示通知。
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Sending forward requests
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送转发请求
- en: In this recipe, we are going to implement a service worker that sends forward
    requests. Request forwarding is helpful when you want to temporarily forward a
    request to a different resource.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将实现一个发送转发请求的服务工作者。当你想要临时将请求转发到不同的资源时，请求转发非常有用。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*，*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")的以下菜谱：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，以及*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/)'
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_18.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`。![如何操作...](img/B05381_10_18.jpg)
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages on
    the **Console** tab. A forward message will appear in a second.![How to do it...](img/B05381_10_19.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具(*Cmd* + *Alt* + *I* 或 *F12*)，在**控制台**标签页上查看日志消息。转发消息将在一秒后出现。![如何操作...](img/B05381_10_19.jpg)
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We will add a `div` element to the `index.html` file where we are planning to
    log a message.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`index.html`文件中添加一个`div`元素，我们计划在这里记录一条消息。
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We will handle the `active` and `fetch` events inside the `service-worker.js`
    file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`service-worker.js`文件中处理`active`和`fetch`事件。
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The helper function for logging messages to the screen is in the `index.js`
    file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将消息记录到屏幕上的辅助函数在`index.js`文件中。
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Avoiding model fetching and render times
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免模型获取和渲染时间
- en: In order to avoid model fetching and render times upon successive requests,
    a cache containing the interpolated templates in order is saved, which we call
    as a render **store**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在连续请求时模型获取和渲染时间，我们保存了一个包含顺序插值模板的缓存，我们称之为渲染**存储**。
- en: According to Mozilla, the render store is intended to save/restore a serialized
    version of a particular view, mostly for the purpose of performance.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Mozilla的说法，渲染存储的目的是保存/恢复特定视图的序列化版本，主要是为了性能。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")中的*设置服务工作者*配方，*学习服务工作者基础*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")中的*设置GitHub页面以支持SSL*配方，*学习服务工作者基础*。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download files from the following location:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/)'
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_20.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`。[如何操作...](img/B05381_10_20.jpg)
- en: Click on any link in the list to go to the store.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击列表中的任何链接进入商店。
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At the beginning of the `index.js` file, we specify the Pokemon API endpoint
    as well as a secure origin.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件的开始处，我们指定了宝可梦API端点以及一个安全源。
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Next, fetch the Pokemon list from `pokedex` and create a list of links.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`pokedex`获取宝可梦列表并创建一个链接列表。
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Subsequently, populate the list and create the links for the Pokemon list. These
    links will be intercepted by the service worker.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，填充列表并为宝可梦列表创建链接。这些链接将被服务工作者拦截。
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next, let's look at the `service-worker.js` file. It tries to recover a cached
    copy of the document. If not found, it responds from the network.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`service-worker.js`文件。它试图恢复文档的缓存副本。如果没有找到，它将从网络响应。
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `cacheResponseInRenderStore` function gets the interpolated HTML contents
    of a `PUT` request from `pokemon.js` and creates an HTML response for the interpolated
    result.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`cacheResponseInRenderStore`函数从`pokemon.js`获取`PUT`请求的插值HTML内容，并为插值结果创建HTML响应。'
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the `pokemon.js` file, we initialize timers to start with.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pokemon.js`文件中，我们初始化计时器以开始。
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We are going to create a template for a Pokemon, which is responsible for rendering
    by obtaining data requested from the URL's query string. This template will fetch
    the given Pokemon and fill the template. Once the template has been filled, we
    will mark the document as cached and then we will send it to the render store
    by sending the contents to the service worker.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个用于渲染的宝可梦模板，该模板通过从URL的查询字符串中获取数据来负责渲染。这个模板将获取指定的宝可梦并填充模板。一旦模板被填充，我们将文档标记为已缓存，然后通过将内容发送到服务工作者来将其发送到渲染存储。
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Next, we mark the documents as cached, get all the HTML content, and send it
    to the service worker using a `PUT` request into the `./render-store/` URL.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将文档标记为已缓存，获取所有HTML内容，并使用`PUT`请求将内容发送到`./render-store/` URL以发送到服务工作者。
- en: '[PRE41]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
