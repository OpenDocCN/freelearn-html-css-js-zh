- en: Chapter 1. Getting Started with KnockoutJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 使用 KnockoutJS 入门
- en: 'Welcome to the power and wonder of the world of KnockoutJS. In this chapter,
    we will start down the road to win with AJAX HTML applications AJAX HTML applications.
    This chapter will focus on:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 KnockoutJS 世界中的力量与奇迹。在本章中，我们将开始踏上使用 AJAX HTML 应用程序的道路。本章将重点关注：
- en: Installing KnockoutJS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 KnockoutJS
- en: Understanding what MVVM means
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 MVVM 的含义
- en: Binding elements with the Knockout library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Knockout 库绑定元素
- en: Accelerating and simplifying coding using developer tools in modern browsers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代浏览器中的开发者工具加速和简化编码
- en: Creating functions for consumption with Knockout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Knockout 创建消费函数
- en: Automating the computing of values directly with Knockout
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Knockout 直接自动化值的计算
- en: Working with functions outside of Knockout
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Knockout 之外使用函数
- en: Installing KnockoutJS
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 KnockoutJS
- en: First, make sure you have a working website set up on a server. It can be as
    simple as plain old HTML if you only want to learn those features or any of the
    productive web platforms out there (ASP.NET, ColdFusion/Railo, NodeJS, PHP, Python,
    Ruby, and so on); just make sure the service is running before installing Knockout.
    However, there is one exception. If you are using Knockout for an HTML application
    like PhoneGap or something along those lines, then you do not need a web server
    for internal functionality.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你在服务器上设置了一个可以正常工作的网站。如果你只想学习那些功能，或者使用任何现成的生产型网络平台（如 ASP.NET、ColdFusion/Railo、NodeJS、PHP、Python、Ruby
    等），它可以是简单的 HTML；只需在安装 Knockout 之前确保服务正在运行。然而，有一个例外。如果你使用 Knockout 为 PhoneGap 或类似的应用程序创建
    HTML 应用程序，那么你不需要 Web 服务器来处理内部功能。
- en: There are a number of ways to install Knockout. You need to choose the one that
    works right for you. The book files have been packaged into a ZIP file at [http://knockout.developers.zone/books/knockout-js-web-development/](http://knockout.developers.zone/books/knockout-js-web-development/).
    Click on the link to download the current stable release of the product. We will
    keep it up to date with fixes if any are needed. We will also be creating a video
    on that page to show how to get things installed at least on Mac and Windows.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Knockout 有多种方式。你需要选择最适合你的方式。本书文件已被打包成一个 ZIP 文件，可在 [http://knockout.developers.zone/books/knockout-js-web-development/](http://knockout.developers.zone/books/knockout-js-web-development/)
    下载。点击链接下载产品的当前稳定版本。如果有任何需要修复的，我们将保持更新。我们还会在该页面上创建一个视频，展示如何在 Mac 和 Windows 上至少安装这些内容。
- en: If you download the page directly from the Knockout site at [http://knockoutjs.com](http://knockoutjs.com),
    copy the text and paste it into a JS file within the folders for your website.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接从 Knockout 网站下载页面 [http://knockoutjs.com](http://knockoutjs.com)，将文本复制并粘贴到你的网站文件夹中的
    JS 文件中。
- en: Now, there are others who may be using fancier tools in the future. There are
    several package installers that pull the files needed. If you are using one of
    those for this book then check that the version of KnockoutJS is 3.2 or later.
    I would suggest not using those at this time unless you are already familiar with
    them. They are worth getting to know but not needed to get running with Knockout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可能还有其他人将来会使用更复杂的工具。有几个包安装器会拉取所需的文件。如果你使用这些工具来安装本书，请检查 KnockoutJS 的版本是否为 3.2
    或更高。我建议除非你已经熟悉它们，否则现在不要使用这些工具。了解它们是有价值的，但不是运行 Knockout 所必需的。
- en: My examples include the Bootstrap library as I wanted to improve the presentation
    and give a distinct personality on the pages of this book, which is another way
    of saying it made creating this resource for you more fun for me.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我的示例中包含了 Bootstrap 库，因为我想要改善展示效果，并为本书的页面赋予独特的个性，这也可以说成是使创建这个资源对我而言更加有趣的一种方式。
- en: I have links to all the examples and exercises in this book linked from the
    root of the web folder. I would suggest learning to use Knockout there, and using
    this knowledge if you are moving to web-based app development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将本书中的所有示例和练习链接到网站根目录。我建议你在那里学习如何使用 Knockout，并在转向基于 Web 的应用程序开发时使用这些知识。
- en: With the files loaded, you should be able to click through a couple of the examples.
    One of my goals was to set the course up so you could use this as a quick reference
    document after completing the course when you need to look up how to do different
    things with Knockout.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文件加载完成后，你应该能够点击几个示例。我的一个目标是将课程设置得如此，以便你在完成课程后，需要查找如何使用 Knockout 做不同事情时，可以将此作为快速参考文档。
- en: Your work pages should go in the appropriate folder matching the chapter numbers
    of this book. I have created complete working examples in the `done` folder and
    yours should go into the `do` folder under the matching chapter number.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您的工作页面应该放在与本书章节编号相匹配的适当文件夹中。我已经在`done`文件夹中创建了完整的工作示例，您的应该放在对应章节编号下的`do`文件夹中。
- en: Looking at MVVM
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看MVVM
- en: MVVM is a design approach to building software. The name is a little confusing,
    and it makes you wonder if they were trying to be clear or if they just liked
    the symmetry that the letters created. The design pattern was used extensively
    in Microsoft and Apple development products.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM是一种构建软件的设计方法。这个名字有点令人困惑，会让你想知道他们是否试图清晰表达，或者只是喜欢这些字母创造的对称性。这种设计模式在微软和苹果的开发产品中被广泛使用。
- en: '**MVVM** stands for **Model View ViewModel**.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**MVVM**代表**模型-视图-视图模型**。'
- en: Let's start with the **View**. It is where the HTML is converted to **Document
    Object Model** (**DOM**).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从**视图**开始。这是HTML被转换为**文档对象模型**（**DOM**）的地方。
- en: The View interacts with an object called a ViewModel. The **ViewModel** is where
    the presentation logic is stored. The **Model** is the part that stores the data
    and business logic. This is commonly passed to the browser as a JSON object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 视图与一个名为ViewModel的对象交互。**ViewModel**是存储展示逻辑的地方。**Model**是存储数据和业务逻辑的部分。这通常以JSON对象的形式传递到浏览器中。
- en: 'Let''s clear up a confusing point right now. When charted out, most people
    draw out the relationship as View-ViewModel-Model, which would be VVMM. Don''t
    get caught up in the semantics; just take a look at the following diagram to understand
    what they mean by MVVM:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们澄清一个令人困惑的点。当绘制图表时，大多数人会将关系绘制为View-ViewModel-Model，这将变成VVMM。不要陷入语义的陷阱；只需看看以下图表，了解他们所说的MVVM是什么意思：
- en: '![Looking at MVVM](img/1028OS_01_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![查看MVVM](img/1028OS_01_01.jpg)'
- en: Your data gets stored in the Model, but you do not interact with the data directly.
    You use the ViewModel to interact with the data. You should also note that you
    don't need to be an expert with the MVVM pattern, as the concepts in practice
    are very simple. The evidence of this is the simplicity of binding elements to
    the ViewModel.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您的数据存储在Model中，但您并不直接与数据交互。您使用ViewModel与数据交互。您还应该注意，您不需要成为MVVM模式的专家，因为在实践中这些概念非常简单。这一点的证据就是将元素绑定到ViewModel的简单性。
- en: Binding DOM elements using Knockout
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Knockout绑定DOM元素
- en: 'There are two basic ways to bind your View elements to the ViewModel. You can
    either bind it through the element `data-bind` attribute or by using friendly
    code in JavaScript. Let''s begin by creating a page in the `\ko\ko-1\do\` folder
    using the name `binding.htm`. The following is the basic standard code for your
    `do` pages throughout the book:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的视图元素绑定到ViewModel有两种基本方法。您可以通过元素的`data-bind`属性绑定，或者使用JavaScript中的友好代码。让我们首先在`\ko\ko-1\do\`文件夹中创建一个名为`binding.htm`的页面。以下是本书中所有`do`页面的基本标准代码：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载示例代码文件，以获取您购买的所有Packt
    Publishing书籍。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: The first part of using Knockout is to include the library JS file. Then we
    need to create the ViewModel. At this time, the ViewModel is similar to a class
    file as it does not do anything until we bind it using Knockout's `applyBindings`
    method. The name of the Model does not matter to Knockout as long, of course,
    as it does not conflict with JS or some other currently running library.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Knockout的第一步是包含库的JS文件。然后我们需要创建ViewModel。在这个时候，ViewModel类似于一个类文件，因为它在我们使用Knockout的`applyBindings`方法绑定之前不做任何事情。对于Knockout来说，Model的名称并不重要，只要它不与JS或其他当前运行的库冲突即可。
- en: Binding text
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定文本
- en: 'To bind the text to the ViewModel, use the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文本绑定到ViewModel，请按照以下步骤操作：
- en: 'Add the following code to the ViewModel:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到ViewModel中：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will use the `data-bind` attribute to tell Knockout how to bind our data
    through the ViewModel. We bind the text attribute of this DOM element to the ViewModel
    variable `myVariable`. After the `body` tag, add this code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`data-bind`属性来告诉Knockout如何通过ViewModel绑定我们的数据。我们将此DOM元素的文本属性绑定到ViewModel变量`myVariable`。在`body`标签后添加以下代码：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now ready to run the code. When you look at the code in the browser nothing
    appears to happen. That is because there is no value assigned to the ViewModel
    variable, so nothing gets injected into the View. It gives us the following text
    in the browser window:![Binding text](img/1028OS_01_02.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好运行代码。当你查看浏览器中的代码时，似乎没有任何事情发生。这是因为ViewModel变量没有分配任何值，所以没有东西被注入到视图中。它在浏览器窗口中给出了以下文本：![绑定文本](img/1028OS_01_02.jpg)
- en: 'Let''s add one more line below the line where we bind the ViewModel in our
    script:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在绑定ViewModel的脚本中的下一行添加一行：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code gives us a value to be assigned, and when we run the page it shows
    the data bound to the DOM element. The following text is the output in the browser
    window:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码给出了要分配的值，当我们运行页面时，它显示了绑定到DOM元素的数据。以下文本是浏览器窗口中的输出：
- en: '![Binding text](img/1028OS_01_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![绑定文本](img/1028OS_01_03.jpg)'
- en: Here, we see that the text attribute of the HTML DOM element updated when the
    variable was updated. There was no need to directly update the HTML DOM element
    as the ViewModel feature of Knockout automates this feature. In large and complex
    data sets, Knockout has been tested as the fastest data bound library. Of course,
    this consideration might change over time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到当变量更新时，HTML DOM元素的文本属性也更新了。没有必要直接更新HTML DOM元素，因为Knockout的ViewModel功能自动化了这一功能。在大型和复杂的数据集中，Knockout已被测试为最快的绑定库。当然，这种考虑可能会随时间而改变。
- en: Binding HTML
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定HTML
- en: 'To bind HTML to the ViewModel use the following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要将HTML绑定到ViewModel，请使用以下步骤：
- en: 'Add the HTML code to the ViewModel:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将HTML代码添加到ViewModel中：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the value of the `myHTML` variable after the binding of the ViewModel:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在绑定ViewModel之后设置`myHTML`变量的值：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to bind the HTML attribute of the DOM element. As you can see,
    the syntax is very similar to the text binding we used in the last binding:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要绑定DOM元素的HTML属性。正如你所看到的，语法与我们上次使用的文本绑定非常相似：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we pass HTML through to the text element, it does not display correctly,
    and that is why DOM has a particular HTML attribute for appropriate tags. When
    we use the text approach, Knockout escapes the results and using HTML, places
    the results the way it would look in an editor. The HTML attribute does not exist
    every time the text attribute exists, but it is pretty safe to assume that the
    text does exist any time we find the HTML at this point. When we render again,
    Knockout renders the text as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将HTML传递给文本元素，它将无法正确显示，这就是为什么DOM有一个特定的HTML属性用于适当的标签。当我们使用文本方法时，Knockout会转义结果，并使用HTML将结果放置在编辑器中看起来一样。HTML属性并不总是存在于文本属性存在时，但当我们在这个点上找到HTML时，可以相当安全地假设文本确实存在。当我们再次渲染时，Knockout将文本渲染如下所示：
- en: '![Binding HTML](img/1028OS_01_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![绑定HTML](img/1028OS_01_04.jpg)'
- en: Binding CSS
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定CSS
- en: 'To bind CSS to the ViewModel go through the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要将CSS绑定到ViewModel，请按照以下步骤操作：
- en: 'Add the myLeft and myRight variables to the ViewModel:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`myLeft`和`myRight`变量添加到ViewModel中：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Set the values of the `myLeft` and `myRight` variables after the binding of
    the ViewModel:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在绑定ViewModel之后设置`myLeft`和`myRight`变量的值：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Use the CSS attribute to the `data-bind` setting to manage CSS dynamically through
    the ViewModel. This could be changed at any time, and the elements would reflect
    the CSS settings based on how, of course, the individual browser responds to those
    CSS settings.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS属性到`data-bind`设置，通过ViewModel动态管理CSS。这可以在任何时候更改，元素会根据浏览器如何响应这些CSS设置来反映CSS设置。
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we render again, Knockout renders the text as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次渲染时，Knockout将文本渲染如下所示：
- en: '![Binding CSS](img/1028OS_01_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![绑定CSS](img/1028OS_01_05.jpg)'
- en: Binding numbers
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定数字
- en: 'The following steps will explain how to bind numbers to the ViewModel:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将解释如何将数字绑定到ViewModel：
- en: 'Add the following code to the ViewModel:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到ViewModel中：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Set the value of the `myBalance` variable after the binding of the ViewModel:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在绑定ViewModel之后设置`myBalance`变量的值：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we explore our first `data-bind` where we are binding to more than one
    setting at the same time via the HTML markup. Notice that we also wrapped the
    element with an additional outer element to allow us to set the color for the
    balance based on whether it is negative or not. When we are doing this, we can
    insert a bit of JavaScript into the setting. When using JavaScript, we refer to
    `myBalance` as a function and not as a variable because that is how we interact
    with it in JavaScript. Take a look at the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们探索我们的第一个`data-bind`，我们通过HTML标记同时绑定到多个设置。请注意，我们还用额外的外部元素包装了该元素，以便我们可以根据余额是否为负来设置颜色。当我们这样做时，我们可以在设置中插入一些JavaScript。当使用JavaScript时，我们将其作为函数而不是变量来引用`myBalance`，因为这是我们与JavaScript交互的方式。请看以下代码：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When we render again, Knockout renders the text as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次渲染时，Knockout将文本渲染如下：
- en: '![Binding numbers](img/1028OS_01_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![绑定数字](img/1028OS_01_06.jpg)'
- en: Managing visibility
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理可见性
- en: 'To manage visibility of the elements in the ViewModel, use the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理ViewModel中元素的可见性，请使用以下步骤：
- en: 'Add the following code to the ViewModel:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到ViewModel中：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set the value of the `isVisible` variable after the binding of the ViewModel:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ViewModel绑定后设置`isVisible`变量的值：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Scripting can be a very powerful technique to use as your skills with Knockout
    advance. It can add a sense of automation and value to the user experience. Insert
    the following code after the `body` tag:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本可以是一个非常强大的技术，随着Knockout技能的提升而使用。它可以增加自动化和用户体验的价值。在`body`标签后插入以下代码：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we render again, Knockout renders the text as shown here. Try, of course,
    changing the value to `false` and run it again to see that it is working correctly
    for you.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次渲染时，Knockout将文本渲染如下。当然，尝试将值更改为`false`并再次运行，以查看它是否正确地为您工作。
- en: '![Managing visibility](img/1028OS_01_07.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![管理可见性](img/1028OS_01_07.jpg)'
- en: Multibound control
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多绑定控件
- en: 'The ViewModel does not need to be updated this time as the technique we are
    discussing is managed from the HTML DOM element side. We need to set the value
    of the `data-bind` variable for both color and text as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这次ViewModel不需要更新，因为我们讨论的技术是从HTML DOM元素侧管理的。我们需要设置颜色和文本的`data-bind`变量的值如下：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we explore our first `data-bind` where we are binding to more than one
    setting at the same time via the HTML markup. Using the bracketed form, we nest
    a slight amount of JavaScript right into the markup. Again, keep in mind that
    when you are using the JavaScript functionality you have to deal with the ViewModel
    attribute as a function and not as a variable. It is good to watch out for this
    as it is a common thing for new Knockout developers to overlook. Here is the code
    to add after the `body` tag:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们探索我们的第一个`data-bind`，我们通过HTML标记同时绑定到多个设置。使用括号形式，我们在标记中嵌入了少量的JavaScript。再次提醒，当您使用JavaScript功能时，您必须将ViewModel属性作为函数而不是变量来处理。这对于新Knockout开发者来说是一个常见的疏忽。以下是添加到`body`标签后的代码：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we render again, Knockout renders the text shown here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次渲染时，Knockout将文本渲染如下：
- en: '![Multibound control](img/1028OS_01_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![多绑定控件](img/1028OS_01_08.jpg)'
- en: Try changing the number and running it to get the number to show both black
    and red depending, of course, on having the right number setting in the code.
    You could even change the logic if you choose to.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改数字并运行它，以使数字显示黑色和红色，当然，这取决于代码中正确的数字设置。您甚至可以选择更改逻辑。
- en: Power development using browser developer tools
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浏览器开发者工具进行功率开发
- en: I suggest using the tools in Google Chrome for this book. The first tool that
    did a real good job was the Firefox tool called **Firebug**. Firebug is still
    a great tool, and the built-in developer tools in Firebug have made tremendous
    advances. You should also enjoy using the tools in Safari if you are a Mac user.
    If you are a die-hard fan of Internet Explorer, they have done a good job with
    the developer tools there as well. My point is, it is better to use developer
    tools everywhere, so don't make excuses to not use the developer tools in whatever
    browser you are using.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用Google Chrome中的工具来阅读这本书。第一个真正做得好的工具是Firefox中的**Firebug**工具。Firebug仍然是一个很好的工具，Firebug内置的开发者工具已经取得了巨大的进步。如果您是Mac用户，您也应该享受使用Safari中的工具。如果您是Internet
    Explorer的忠实粉丝，他们在开发者工具方面也做得很好。我的观点是，最好在所有地方都使用开发者工具，所以不要找借口不使用您正在使用的浏览器的开发者工具。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you happen to be working on or wanting to learn to build Chrome extensions
    and apps then here's how to enable developer mode. In the Chrome browser, click
    on the menu button next to the address bar. It is an icon with three lines stacked
    on top of each other. Under the selections on the side, click on **Extensions**,
    and you will see a checkbox at the top-right for **Developer mode**. Search on
    Google for more details as this is just a tip to whet your appetite.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在工作或想要学习如何构建Chrome扩展和应用程序，那么以下是如何启用开发者模式的方法。在Chrome浏览器中，点击地址栏旁边的菜单按钮。这是一个有三个线条堆叠在一起的图标。在侧边选择项下，点击**扩展**，你会在右上角看到一个**开发者模式**的复选框。在Google上搜索更多详细信息，因为这只是一个激发你兴趣的小贴士。
- en: When in Chrome, all you need to do to load the developer tools is press *F12*
    on a PC, and on a Mac use Command + *Alt* + *I*. You can also find them by looking
    under the Chrome menu. This button can be found on the right of the address bar
    as three stacked lines. Under **More tools** you will see the option for developer
    tools.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Chrome浏览器中时，你只需按PC上的*F12*键或在Mac上使用Command + *Alt* + *I*来加载开发者工具。你还可以通过查看Chrome菜单来找到它们。这个按钮位于地址栏的右侧，有三个堆叠的线条。在**更多工具**下，你会看到开发者工具的选项。
- en: 'You can see it there for Windows, Mac, and even for the browser on the Chrome
    OS. When you click on it, the following window appears at the bottom of the browser:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在那里看到Windows、Mac，甚至是Chrome OS上的浏览器。当你点击它时，以下窗口会出现在浏览器底部：
- en: '![Power development using browser developer tools](img/1028OS_01_09.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![使用浏览器开发者工具进行强大开发](img/1028OS_01_09.jpg)'
- en: We will not get into all the features of this tool because that would demand
    an entire book. We are just going to focus on a few key features, making it easier
    to debug your code while learning Knockout. You may want to undock the tools from
    the bottom of the browser. To do so, click on the pair of stacked boxes right
    next to the close (**x**) button at the upper right. This makes the tools appear
    in a separate window.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨这个工具的所有功能，因为这需要整整一本书来介绍。我们只是会关注几个关键功能，这样在学习Knockout的同时更容易调试你的代码。你可能想要将工具从浏览器底部分离出来。要做到这一点，点击右上角关闭（**x**）按钮旁边的堆叠框。这会使工具出现在一个单独的窗口中。
- en: The console is the main thing we are interested in at the moment, so if you
    do not have it selected, click on it in the top bar of the developer tools. This
    gives you a prompt that looks very similar to a command-line prompt. When you
    start typing text, if there are variables or structures active in the browser
    DOM, it will bring it up with code hinting.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们主要关注的是控制台，所以如果你没有选中它，请点击开发者工具顶部的控制台。这会给你一个看起来非常类似于命令行提示符的提示。当你开始输入文本时，如果浏览器DOM中有活动变量或结构，它将带有代码提示将其显示出来。
- en: '![Power development using browser developer tools](img/1028OS_01_10.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用浏览器开发者工具进行强大开发](img/1028OS_01_10.jpg)'
- en: Select **viewModel** and then press the period. Notice that in the hinting there
    are all the model properties you created, listed with a few other variable settings.
    Select **viewModel.myHtml** and hit *Enter*. What you see is a function. To get
    the results you need to add parentheses to the end of the variable—for example,
    **viewModel.myHtml()**—and try again. You could retype it all, but you can also
    use the up and down arrows to cycle through recent command prompt entries if desired.
    This returns the value currently held in the ViewModel variable setting.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**viewModel**然后按住句号。注意在提示中列出了你创建的所有模型属性，以及一些其他变量设置。选择**viewModel.myHtml**然后按*Enter*键。你看到的是一个函数。要获取所需的结果，需要在变量末尾添加括号——例如，**viewModel.myHtml()**——然后再次尝试。你可以全部重新输入，也可以使用上下箭头在所需的命令提示符条目之间循环，如果需要的话。这会返回ViewModel变量设置中当前持有的值。
- en: '![Power development using browser developer tools](img/1028OS_01_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用浏览器开发者工具进行强大开发](img/1028OS_01_11.jpg)'
- en: 'Now we take it to the next level and use the same variable to change the value
    right from the command prompt. What we need to do is to watch the screen closely
    as we press the *Enter* key because we can see the power of having the data bound
    to the View through the ViewModel. Enter the following in the command prompt:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将其提升到下一个层次，并直接从命令提示符使用相同的变量来更改值。我们需要做的是在按下*Enter*键时密切注意屏幕，因为我们可以看到通过ViewModel将数据绑定到视图的强大功能。在命令提示符中输入以下内容：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What you should see is the HTML of the second binding we entered updated automatically.
    That is a much easier way to work with the View than traditional JavaScript. For
    those who are wondering, it is also very compatible with jQuery. It can be used
    with all kinds of libraries though you should be careful to check them before
    considering them a match to make sure it is a good pair.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到的是我们输入的第二个绑定的HTML自动更新。这是一个比传统的JavaScript更容易与View一起工作的方法。对于那些想知道的人来说，它也非常兼容jQuery。它可以与各种库一起使用，尽管在考虑它们是否匹配之前，你应该小心检查它们，以确保它们是一个好的组合。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should also note that while we have been naming our ViewModel `viewModel`,
    it could be named any valid variable name. We are doing this just to help drive
    in the concept that this is our variable for the ViewModel.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该注意，虽然我们一直在将我们的ViewModel命名为`viewModel`，但它可以是任何有效的变量名。我们这样做只是为了帮助强化这个概念，即这是我们ViewModel的变量。
- en: 'Now let''s use the balance in the calculation from the command console. Let''s
    try entering the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用命令控制台中的计算平衡。让我们尝试输入以下内容：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When we do, we should get -94.46 as the result, or another number if you entered
    in something different.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们这样做时，我们应该得到-94.46作为结果，或者如果你输入了不同的数字，则可能是另一个数字。
- en: The Knockout debugger
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Knockout调试器
- en: 'This is what the Knockout context shows when you are in the **Elements** view:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在**元素**视图中时，这是Knockout上下文显示的内容：
- en: '![The Knockout debugger](img/1028OS_01_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Knockout调试器](img/1028OS_01_12.jpg)'
- en: 'The add-in is available at the Chrome Web Store. It is a great store, and lots
    of the items worth getting are free. One of these items is the **KnockoutJS context
    debugger** which is released under an MIT license. The source code of this tool
    is on GitHub, which is very useful if you get large nested ViewModels. It has
    several features and provides great benefits when learning Knockout and building
    sites with it. To download this add-in use the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件可在Chrome Web Store中找到。这是一个很棒的商店，许多值得拥有的项目都是免费的。其中之一是**KnockoutJS上下文调试器**，它是在MIT许可下发布的。这个工具的源代码在GitHub上，如果你处理大型嵌套ViewModel时，这非常有用。它具有几个功能，在学习Knockout和用它构建网站时提供了极大的便利。要下载此插件，请按照以下步骤操作：
- en: Go to [https://chrome.google.com/webstore/](https://chrome.google.com/webstore/).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://chrome.google.com/webstore/](https://chrome.google.com/webstore/)。
- en: Type `knockout` in the search box.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`knockout`。
- en: Under **Extensions** you should see **Knockoutjs context debugger** by timstuyckens.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**扩展**部分，你应该能看到timstuyckens的**Knockoutjs上下文调试器**。
- en: 'Another thing that would help when working with Knockout or any data-binding
    library is the ability to trace what is going on. But this tool expands our reach
    beyond that ability. Select **KnockoutJS** from the top of the developer tools
    and you will see a button that says **Enable Tracing**. Click on it and go to
    the **Console** tab. Now enter the following code, and you will see all the changes
    to your DOM being dumped in the console window:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件在处理Knockout或任何数据绑定库时会有所帮助的事情是追踪正在发生的事情的能力。但这个工具将我们的能力扩展到了这个能力之外。从开发者工具的顶部选择**KnockoutJS**，你会看到一个写着**启用跟踪**的按钮。点击它，然后转到**控制台**标签。现在输入以下代码，你将看到所有对DOM的更改都会在控制台窗口中显示出来：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![The Knockout debugger](img/1028OS_01_13.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Knockout调试器](img/1028OS_01_13.jpg)'
- en: Shortcuts
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快捷键
- en: While this may be a big gain for those who have never fired up the developer
    tools in a browser, let's look at a few things that could make working with the
    tools even better. One of those things is shortcuts. Right beside the button to
    open the tools in their own window or put them back in the footer section of the
    browser window, there is a **Settings** button. Click on it and you will see three
    side menu items. The last one is **Shortcuts**. Skim through this and it will
    help all shortcut lovers to do things even faster. You can also find a full list
    of the shortcuts at [https://developer.chrome.com/devtools/docs/shortcuts](https://developer.chrome.com/devtools/docs/shortcuts),
    which you could print out or perhaps just bookmark the page.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些从未在浏览器中打开开发者工具的人来说，这可能是一个很大的进步，但让我们看看一些可以使使用这些工具的工作变得更好的事情。其中之一就是快捷键。就在打开工具到它们自己的窗口或将它们放回浏览器窗口底部部分的按钮旁边，有一个**设置**按钮。点击它，你会看到三个侧菜单项。最后一个是**快捷键**。浏览一下这个，它将帮助所有快捷键爱好者更快地完成任务。你还可以在[https://developer.chrome.com/devtools/docs/shortcuts](https://developer.chrome.com/devtools/docs/shortcuts)找到完整的快捷键列表，你可以将其打印出来，或者也许只是将页面添加到书签中。
- en: The DOM inspection
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DOM检查
- en: In the browser window where we have the "LEFT" content wrapped in our `div`
    tag, right-click on it and select **Inspect Element**. (On a Mac, you can use
    double fingers to do the right-click.) This selects the element, and you will
    be able to see any `data-bind` attribute settings that might exist for that element
    as well as any other DOM features.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含我们`div`标签中“LEFT”内容的浏览器窗口中，右键单击它并选择**检查元素**。（在 Mac 上，您可以使用双指进行右键单击。）这会选择该元素，您将能够看到该元素可能存在的任何`data-bind`属性设置以及任何其他
    DOM 功能。
- en: You can even play around with the DOM and double-click inside the elements panel
    to edit the DOM live. Live editing is one of my favorite features. What you need
    to understand is that the View binds to the ViewModel when you instantiate it
    via a script. You cannot change that by editing the DOM code in that panel. You
    can also edit the CSS and JavaScript on the page for testing and debugging in
    amazing ways and this, in my opinion, is a must-learn developer skill.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以与 DOM 玩耍，并在元素面板内部双击以实时编辑 DOM。实时编辑是我最喜欢的功能之一。您需要理解的是，当您通过脚本实例化它时，视图绑定到 ViewModel。您不能通过在该面板中编辑
    DOM 代码来更改这一点。您还可以以惊人的方式编辑页面上的 CSS 和 JavaScript 进行测试和调试，在我看来，这是必须学习的开发者技能。
- en: The AJAX inspection
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AJAX 检查
- en: It is an indispensable tool for me, when working with AJAX, to see what goes
    out and back using the **Network** Tab. You can see there is an XHR item in the
    listing, which allows you to view individual requests that arise while working
    on a page.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我处理 AJAX 时，这是一个不可或缺的工具，可以查看使用**网络**选项卡发送和返回的内容。您可以看到列表中有一个 XHR 项目，它允许您查看在页面工作中出现的单个请求。
- en: The resource inspection
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源检查
- en: We at SOSensible, my company, have built all kinds of web applications. One
    kind of web application allows the user to go offline with a web app. We needed
    to store the data in a browser-based database store and this tool let us inspect
    all those resources under the **Resources** tab.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 SOSensible 公司，我的公司，构建了各种网络应用程序。一种网络应用程序允许用户使用网络应用程序离线。我们需要在基于浏览器的数据库存储中存储数据，而这个工具让我们能够在**资源**选项卡下检查所有这些资源。
- en: The device emulation
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设备模拟
- en: In the bottom section of the developer tools, there is a section called drawer.
    If it is not showing, the menu buttons at the top-right have a button to hide
    or show the drawer. Once it is visible, you have a menu item for **Emulation**.
    This lets you refresh the screen to show a close emulation of what the view would
    be like on a particular device size and rotation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者工具的底部部分，有一个名为抽屉的选项。如果它没有显示，右上角的菜单按钮有一个按钮可以隐藏或显示抽屉。一旦可见，您将有一个**模拟**菜单项。这可以让您刷新屏幕，以显示特定设备大小和旋转的视图的近似效果。
- en: There are a couple of items on the sidebar that also help with other features.
    There is a setting called **Device** to pick the device to emulate. There is a
    setting named **Screen** to manage the rotation and many other features you may
    want to customize. There is also **User Agent** to spoof the server into thinking
    it is a different device. Lastly, there is **Sensors** that allows you to set
    geolocation and accelerometer values.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏中还有一些项目可以帮助其他功能。有一个名为**设备**的设置，用于选择要模拟的设备。有一个名为**屏幕**的设置，用于管理旋转以及您可能想要定制的许多其他功能。还有一个**用户代理**，可以欺骗服务器，使其认为它是一个不同的设备。最后，还有**传感器**，允许您设置地理位置和加速度计值。
- en: Using internal functions with Knockout
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Knockout 的内部函数
- en: 'The `applyBindings` method in the previously explained bindings section uses
    a common structure. We included that example in case you cross code written in
    that style. It will help you understand it if you see it someone else''s code
    that is using that approach. Another style of coding is to declare the Model with
    a function declaration. The DOM markup or View code does not change for either
    scenario. Let''s convert our binding example to a functional declaration. Copy
    the `binding.htm` file and create a new file called `functions.htm` in the same
    folder. Here is the original declaration:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前解释的绑定部分中，`applyBindings`方法使用了一种常见的结构。我们包含了这个例子，以防您遇到那种风格的代码。如果您在其他人的代码中看到使用该方法的代码，这将有助于您理解它。另一种编码风格是使用函数声明来声明模型。DOM
    标记或视图代码在两种情况下都不会改变。让我们将我们的绑定示例转换为功能声明。复制`binding.htm`文件，并在同一文件夹中创建一个名为`functions.htm`的新文件。以下是原始声明：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note that we could have set the values of the observables immediately along
    with the declaration. If we had done that it would have looked like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以在声明的同时立即设置可观察者的值。如果我们那样做了，它看起来会是这样：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We are doing this to tighten our code for the sake of the book. You should use
    good logic when choosing which way to do this in your code. There are times where
    using this style of coding is important, but often it is just a matter of the
    coder's style. Beware of letting your style keep you from considering which one
    is best as you write the code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是为了使本书的代码更加紧凑。你应该在选择代码中这种方式时使用良好的逻辑。有时使用这种编码风格很重要，但通常这只是程序员风格的问题。当编写代码时，要小心不要让你的风格阻碍你考虑哪种方式最好。
- en: 'Now we will look at moving the code over to a functional declaration. We start,
    of course, with a different kind of declaration because it is a function as appears
    here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看将代码移动到函数声明的过程。我们当然从不同类型的声明开始，因为这里是一个函数：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It would be equally valid to declare the ViewModel as follows. There is no
    significant difference:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将ViewModel声明如下也是同样有效的。没有显著的区别：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we will look at adding our ViewModel items back in. In the structured
    approach we just described, the items were entered as collection items with the
    classic comma separator. In this model, each item is a parameter and is terminated
    by a semi-colon:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看将我们的ViewModel项重新添加回去。在我们刚才描述的结构化方法中，项作为集合项以经典逗号分隔符输入。在这个模型中，每个项都是一个参数，并以分号结束：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that we declared each of these items with the `this` scope declaration,
    which refers to the ViewModel object. When programming in JavaScript, it is common
    practice to alias `this` to avoid scope confusion. We will rewrite the previous
    code one more time using `self` rather than `this` as the base scope:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用`this`作用域声明声明了这些项，它指的是ViewModel对象。在JavaScript编程中，将`this`别名以避免作用域混淆是一种常见做法。我们将再次重写之前的代码，使用`self`而不是`this`作为基础作用域：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that we set the `self` variable using a var declaration. This prevents
    issues of external naming conflicts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用var声明设置了`self`变量。这防止了外部命名冲突的问题。
- en: 'Now, if we run the page for `functions.htm` from our browser, it should run
    identical to our `binding.htm` file. Yet, there is a difference. This will help
    you understand why we introduced the developer tools where we did in the course.
    Open the tools and in the command prompt, enter `viewModel.isHTML()` to see what
    you get as a result:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们从我们的浏览器运行`functions.htm`页面，它应该与我们的`binding.htm`文件运行相同。然而，这里有一个区别。这将帮助你理解为什么我们在课程中引入了开发者工具。打开工具，在命令提示符中，输入`viewModel.isHTML()`以查看你得到的结果：
- en: '![Using internal functions with Knockout](img/1028OS_01_14.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![使用Knockout的内部函数](img/1028OS_01_14.jpg)'
- en: Preventing hidden features
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防隐藏功能
- en: 'In the previous screenshot we obtained the what you might think is an unexpected
    result as the View is obviously bound to the ViewModel. The issue here is an issue
    of the concept of **closure**. You are welcome to explore more about closure if
    you wish but just realize it means parts of an object or the item contents are
    there but hidden. When this type of declaration is made in this style, you cannot
    interact with it from JavaScript. The declaration should have been made with `new`
    to create an object from the function as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的屏幕截图中，我们得到了你可能认为的意外结果，因为视图显然绑定到了ViewModel上。这里的问题是**闭包**的概念问题。如果你愿意，可以探索更多关于闭包的内容，但只需意识到这意味着对象的部分或项目内容存在但隐藏。当以这种方式声明时，你无法从JavaScript中与之交互。声明应该使用`new`来从函数创建对象，如下所示：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you run the browser and try to connect to the ViewModel now, you will see
    that it is still having the same issue with closure. We found this is the best
    way to work around it at my company:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行浏览器并尝试连接到ViewModel，你会看到它仍然存在闭包的相同问题。我们发现这是在我公司解决这个问题的最佳方式：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we will reference the Model using `vm` rather than `viewModel` and this
    is the result we will get:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`vm`而不是`viewModel`来引用模型，这将是我们得到的结果：
- en: '![Preventing hidden features](img/1028OS_01_15.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![预防隐藏功能](img/1028OS_01_15.jpg)'
- en: We see that by declaring the object outside the argument passed to our Knockout
    `applyBindings` method, we avoided the closure issue. This is not an issue when
    using the structured style of ViewModel declaration. Hopefully, this saves you
    from hours of wondering what is wrong with your code or if Knockout is broken.
    We will not answer how much time I burned on this the first time it occurred,
    but it was long after I started using Knockout. It says that even experts can
    make rookie mistakes. I humbled myself and asked the community for help, and the
    answer came pretty fast.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，通过在传递给我们的 Knockout `applyBindings` 方法的参数外声明对象，我们避免了闭包问题。在使用 ViewModel 声明的结构化风格时，这不是一个问题。希望这能让你从数小时的代码问题或怀疑
    Knockout 是否出错中解脱出来。我们不会回答我第一次遇到这个问题时浪费了多少时间，但那是在我开始使用 Knockout 之后很久。这说明即使是专家也可能犯新手错误。我谦虚地请求社区的帮助，答案很快就来了。
- en: Automating calculations with Knockout
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Knockout 自动计算
- en: In this section, we will take functions to a deeper level.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将函数提升到一个更深的层次。
- en: 'In the code bundle of chapter 1 `do` folder (`/ko_1/do/`), copy the `base.htm`
    file as `computed.htm` for this segment. After the leading `body` tag, put in
    the following View code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 章的代码包中的 `do` 文件夹（`/ko_1/do/`），将 `base.htm` 文件复制为 `computed.htm` 用于此部分。在
    `body` 标签之后，输入以下视图代码：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we are ready to create the scripted side of the Knockout ViewModel code.
    Place this code inside the `script` tag after the KnockoutJS library is included:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备创建 Knockout ViewModel 代码的脚本部分。在包含 KnockoutJS 库之后，将此代码放入 `script` 标签内：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Notice that the computed function is now doing live calculations. We also added
    a fixed decimal position of two places. Enter a quantity to test:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，计算函数现在正在进行实时计算。我们还添加了两位固定小数位。输入一个数量进行测试：
- en: '![Automating calculations with Knockout](img/1028OS_01_16.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Knockout 自动计算](img/1028OS_01_16.jpg)'
- en: Create a second row of the table and the ViewModel that matches the features
    of the first row. I want you to create this on your own to make sure you are getting
    the skills as you go along here. You could, of course, peek at the example in
    the `done` folder, but you should try it on your own first.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表格的第二行和与第一行特征匹配的 ViewModel。我希望你自己创建它，以确保你在这个过程中获得技能。当然，你可以先查看 `done` 文件夹中的示例，但你应该先自己尝试。
- en: Subtotal calculation
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小计计算
- en: 'Now add this row to the bottom of the table to create a row for the subtotal.
    You can also see we created a cell in the table to tally the number of items in
    `qty_1` and `qty_2`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将此行添加到表格底部，以创建一行用于小计。你还可以看到我们在表格中创建了一个单元格来总计 `qty_1` 和 `qty_2` 中的项目数量：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You also need to put the script code into the correct locations:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要将脚本代码放入正确的位置：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You may have noticed that we placed an extra `+` before some of the variables.
    This is a standard JavaScript approach to making sure the number entered into
    the input box comes out as a number. In some browsers and some conditions the
    number is the string representation of the number. The addition of `+` solves
    this issue.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们在一些变量之前放置了一个额外的 `+`。这是标准的 JavaScript 方法，确保输入框中输入的数字以数字的形式输出。在某些浏览器和某些条件下，数字是数字的字符串表示。添加
    `+` 解决了这个问题。
- en: 'Now run the page and enter the quantity to ensure that all of your calculations
    are working:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行页面并输入数量，以确保所有计算都正常工作：
- en: '![Subtotal calculation](img/1028OS_01_17.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![小计计算](img/1028OS_01_17.jpg)'
- en: Tax time
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纳税时间
- en: 'What fun would buying things be without paying taxes? Well, either way it is
    a function we all need to get right. Add the following code to the table to have
    a row for taxes:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 没有支付税款，买东西还有什么乐趣？好吧，无论如何，这是我们都需要做对的功能。将以下代码添加到表格中，以创建一行用于税款：
- en: '[PRE33]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now add the code here to the `script` section of the page to make our ViewModel
    run smartly. Our goal is not to write the most efficient code in all of the world
    but rather to expose you to learning to think the Knockout way:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将此代码添加到页面的 `script` 部分中，使我们的 ViewModel 运行得更加智能。我们的目标不是编写世界上效率最高的代码，而是让你学习如何以
    Knockout 的方式思考：
- en: '[PRE34]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If we were coding the page with standard JavaScript or even with jQuery to get
    the amount of functionality we have achieved, it would take many multiples of
    the code we have on the page here. This approach is far more elegant and much
    smaller.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用标准的 JavaScript 或甚至 jQuery 来编写页面代码以获得我们所实现的功能量，那么代码量将是我们在页面上现有代码的许多倍。这种方法更加优雅，且代码量更小。
- en: Notice how our `taxRate` is done just a little differently. Calculation functions
    in Knockout can read and write. You can also call other external resources because
    it is standard script code. Note that in our scripted code we have to place the
    values in parentheses to do the assignments as we did to the tax value.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的 `taxRate` 是如何稍微不同地实现的。Knockout 中的计算函数可以读写。你也可以调用其他外部资源，因为它是标准脚本代码。请注意，在我们的脚本代码中，我们必须将值放在括号中以进行赋值，就像我们对税值所做的那样。
- en: You should also notice that we are converting the value in and out of decimal
    format and adding a percentage to the displayed value of the taxes in the input
    box. It also smartly strips the percent mark off if you enter it when updating
    the tax rate.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该注意到，我们在输入框中转换数值的十进制格式，并给显示的税值添加一个百分比。如果你在更新税率时输入了百分号，它还会智能地将其去除。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Regular expressions like the one used in our `write` method are a way to supercharge
    your apps. Make it a point to learn at least basic regular expressions. If you
    do not know how to do the advanced stuff, you can often find what you need either
    in a Google search, or some "happy guru" will volunteer to assist you with a winning
    answer in some online forum.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们在 `write` 方法中使用的那种正则表达式是让你的应用更加强大的方式。确保至少学习基本的正则表达式。如果你不知道如何进行高级操作，你通常可以在谷歌搜索中找到所需的内容，或者某个“快乐的导师”会在在线论坛中自愿提供有价值的答案来帮助你。
- en: 'Refresh the page with the updates, and you will see that even the actual tax
    amount has been calculated in the **Tally** column:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面以应用更新，你将看到实际税额也已经在 **总计** 列中计算出来了：
- en: '![Tax time](img/1028OS_01_18.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![税务时间](img/1028OS_01_18.jpg)'
- en: Final total
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终总计
- en: 'Here we have the final segment of the View code for our calculation example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有我们计算示例的视图代码的最后一部分：
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The last piece of script code should be added to the ViewModel. There is nothing
    fancy about this section of code other than its ability to complete our functionality.
    We add in the value of the taxed item here, and again, we wrap the numbers with
    a parentheses and use the `toFixed` function to set the answer to two decimal
    places.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一段脚本代码应该添加到 ViewModel 中。这部分代码除了其完成功能的能力外，没有其他特别之处。我们在这里添加了应税项目的值，并且再次用括号包裹数字，使用
    `toFixed` 函数将答案设置为两位小数。
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now we can run the code and play with the entry boxes to see that everything
    is working as expected. For new developers, it may not surprise you to see how
    little code it takes to make a page like this work. It used to take so much code
    that hardly anyone anywhere would take the time to attempt building tools like
    this. It was compounded because things worked differently from one browser to
    the next. While this is still true, libraries like Knockout remove many of those
    pains and let us concentrate on the results instead of the platforms.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行代码，并玩转输入框，以查看一切是否按预期工作。对于新开发者来说，看到制作这样一个页面所需的代码如此之少可能不会让你感到惊讶。过去，需要编写如此多的代码，以至于几乎没有人会花时间去尝试构建这样的工具。由于不同浏览器之间的差异，这个问题变得更加复杂。虽然这仍然是事实，但像
    Knockout 这样的库消除了许多这些痛苦，并让我们能够专注于结果而不是平台。
- en: 'Running the code now should give us results similar to this screen capture:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行代码应该会给出类似于以下屏幕截图的结果：
- en: '![Final total](img/1028OS_01_19.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![最终总计](img/1028OS_01_19.jpg)'
- en: Working with non-Knockout functions
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用非 Knockout 函数
- en: 'Now, we will add an external function to show an alternate way to format values
    in the View. You are going to make one more pass at modifying the `computed.htm`
    example we just worked on. First at the top of the script, add a function with
    the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个外部函数来展示在视图中格式化值的另一种方式。你将再次修改我们刚刚工作的 `computed.htm` 示例。首先在脚本顶部添加一个具有以下代码的函数：
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now go into the View and change the final total as follows. Test it to make
    sure you got it right and then change all of them if you desire:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入视图并按以下方式更改最终总计。测试以确保你做对了，然后如果你希望，更改所有这些值：
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is what the page looks like with the last item formatted as a dollar amount:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面最后一条项目格式化为美元金额的样子：
- en: '![Working with non-Knockout functions](img/1028OS_01_20.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![使用非 Knockout 函数](img/1028OS_01_20.jpg)'
- en: We could have added an external function that is used inside a calculation to
    show its use inside the ViewModel. You are still left with some work to do as
    you will have to choose the best place to put things like that. Perhaps, in a
    couple of versions, these tools will just magically do it all for us. Well, even
    if they did, there will be new needs and we will still have a good opportunity
    to solve issues through code for those we serve.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以在计算中添加一个外部函数来展示它在 ViewModel 中的使用。您仍然需要做一些工作，因为您将不得不选择最佳位置放置类似的东西。也许在几个版本之后，这些工具将神奇地为我们完成所有工作。好吧，即使它们真的做到了，也会有新的需求，我们仍然有机会通过代码为服务对象解决问题。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You now have a taste of the benefits of KnockoutJS. This is just the beginning
    of the power of KnockoutJS. The benefit of Knockout is that it solves problems
    that libraries like jQuery do not solve, and yet has the ability to work side
    by side if needed. Knockout provides both binding and functional intelligence
    that automate and simplify HTML and coding the same way jQuery simplifies JavaScript
    coding.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经尝到了 KnockoutJS 的好处。这仅仅是 KnockoutJS 力量的开始。Knockout 的好处在于它解决了 jQuery 等库无法解决的问题，同时如果需要，它还有能力与之并行工作。Knockout
    提供了绑定和功能智能，它们可以自动化并简化 HTML 和编码，就像 jQuery 简化 JavaScript 编码一样。
- en: In the next chapter we will build on this knowledge by learning how to use conditional
    binding, observable arrays, simplifying nested items, and some keys on how to
    work with collections.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过学习如何使用条件绑定、可观察数组、简化嵌套项以及一些关于如何处理集合的技巧来在此基础上构建知识。
