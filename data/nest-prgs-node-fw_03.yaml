- en: Chapter 3\. Nest.js authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 Nest.js 认证
- en: Nest.js, using version 5 the `@nestjs/passport` package, allows you to implement
    the authentication strategy that you need. Of course you can also do this manually
    using `passport`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js，在版本 5 中，`@nestjs/passport` 软件包允许您实现所需的认证策略。当然，您也可以使用 `passport` 手动执行此操作。
- en: In this chapter you will see how to use passport by integrating it into your
    Nest.js project. We also cover what a strategy is, and how to configure the strategy
    to use with passport.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将看到如何通过将其集成到 Nest.js 项目中来使用 passport。我们还将介绍策略是什么，以及如何配置策略以与 passport 一起使用。
- en: We will also manage restriction access using an authentication middleware, and
    see how guards can check data before the user accesses the handlers. In addition,
    we’ll show how to use the passport package provided by Nest.js in order to cover
    both possibilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用认证中间件来管理限制访问，并查看守卫如何在用户访问处理程序之前检查数据。此外，我们将展示如何使用 Nest.js 提供的 passport
    软件包，以涵盖两种可能性。
- en: 'As an example, we will use the following repository files:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将使用以下存储库文件：
- en: '`/src/authentication`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/src/authentication`'
- en: '`/src/user`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/src/user`'
- en: '`/shared/middlewares`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared/middlewares`'
- en: '`/shared/guards`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared/guards`'
- en: Passport
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport
- en: 'Passport is a well known library that is popular and flexible to use. In fact,
    passport is flexible middleware that can be fully customized. Passport allows
    different ways to authenticate a user like the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Passport 是一个众所周知的流行且灵活的库。事实上，passport 是一种灵活的中间件，可以完全自定义。Passport 允许不同的方式来验证用户，如以下方式：
- en: '`local strategy` that allows you to authenticate a user just with it’s own
    data `email` and `password` in most cases.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`本地策略` 允许您仅使用自己的数据 `email` 和 `password` 来验证用户，在大多数情况下。'
- en: '`jwt strategy` that allows you to authenticate a user by providing a token
    and verifying this token using `jsonwebtoken`. This strategy is used a lot.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jwt 策略` 允许您通过提供令牌并使用 `jsonwebtoken` 验证此令牌来验证用户。这种策略被广泛使用。'
- en: Some strategies use the social network or Google in order to authenticate the
    user with a profile such as `googleOAuth`, `Facebook`, or even `Twitter`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些策略使用社交网络或 Google 来验证用户的配置文件，如 `googleOAuth`、`Facebook`，甚至 `Twitter`。
- en: 'In order to use passport you have to install the following package: `npm i
    passport`. Before you see how to implement the authentication, you must implement
    the `userService` and the `userModel`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 passport，您必须安装以下软件包：`npm i passport`。在了解如何实现认证之前，您必须实现 `userService` 和
    `userModel`。
- en: Manual implementation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动实现
- en: In this section, we will implement the authentication manually using passport
    without using the Nest.js package.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 passport 手动实现认证，而不使用 Nest.js 软件包。
- en: Implementation
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: 'In order to configure passport, three things need to be configured:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置 passport，需要配置三件事：
- en: The authentication strategy
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证策略
- en: The application middleware
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序中间件
- en: The session, which is optional
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的会话
- en: Passport uses the strategy to authenticate a request, and the verification of
    the credential is delegated to the strategies in some of the requests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Passport 使用策略来验证请求，并且凭据的验证被委托给一些请求中的策略。
- en: Before using passport, you must configure the strategy, and in this case we
    will use the `passport-jwt` strategy.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 passport 之前，您必须配置策略，在这种情况下，我们将使用 `passport-jwt` 策略。
- en: 'Before anything else, you must install the appropriate packages:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何其他操作之前，您必须安装适当的软件包：
- en: '`npm i passport-jwt @types/passport-jwt`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm i passport-jwt @types/passport-jwt`'
- en: '`npm i jsonwebtoken @types/jsonwebtoken`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm i jsonwebtoken @types/jsonwebtoken`'
- en: Authentication module
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证模块
- en: In order to have a working example, you must implement some modules, and we
    will start with `AuthenticationModule`. The `AuthenticationModule` will configure
    the strategy using the jwt strategy. To configure the strategy we will extend
    the `Strategy` class provided by the `passport-jwt` package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有一个可工作的示例，您必须实现一些模块，我们将从 `AuthenticationModule` 开始。`AuthenticationModule`
    将使用 jwt 策略配置策略。为了配置策略，我们将扩展 `passport-jwt` 软件包提供的 `Strategy` 类。
- en: Strategy
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 策略
- en: Here is an example of a strategy extending the `Strategy` class in order to
    configure it and use it in passport.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个扩展 `Strategy` 类以配置并在 passport 中使用的策略的示例。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The constructor allows you to pass some configuration parameters to the extended
    `Strategy` class. In this case we are using only three parameters:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数允许您向扩展的 `Strategy` 类传递一些配置参数。在这种情况下，我们只使用了三个参数：
- en: '`jwtFromRequest` option accepts a function in order to extract the token from
    the request. In our case we are using the `ExtractJwt.fromAuthHeaderAsBearerToken()`
    function provided by the `passport-jwt` package. This function will pick the token
    from the header of the request using the `Authorization` header, and pick the
    token that follows the `bearer` word.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jwtFromRequest` 选项接受一个函数，以从请求中提取令牌。在我们的情况下，我们使用 `passport-jwt` 软件包提供的 `ExtractJwt.fromAuthHeaderAsBearerToken()`
    函数。此函数将从请求的标头中提取令牌，使用 `Authorization` 标头，并选择跟随 `bearer` 词的令牌。'
- en: '`passReqToCallback` parameter takes a boolean in order to tell if you want
    to get the `req` in the verify method that you will see later.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passReqToCallback` 参数接受一个布尔值，以便告诉您是否要在稍后看到的验证方法中获取 `req`。'
- en: '`secretOrKey` parameter takes a string or a buffer in order to verify the token
    signature.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secretOrKey` 参数接受一个字符串或缓冲区，以验证令牌签名。'
- en: Other parameters are available to configure the strategy, but to implement our
    authentication we don’t need them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他参数可用于配置策略，但为了实现我们的认证，我们不需要它们。
- en: Also, after passing the different previous parameters, we pass a callback function
    called `verify`. This function is asynchronous, and has the purpose to verify
    if the token passed and if the payload obtained from the token is valid or not.
    This function executes our `verify` method, which calls the `authenticationService`
    in order to validate the user with the payload as a parameter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在传递不同的先前参数之后，我们传递了一个名为`verify`的回调函数。这个函数是异步的，其目的是验证传递的令牌以及从令牌获得的载荷是否有效。此函数执行我们的`verify`方法，该方法调用`authenticationService`以验证具有载荷作为参数的用户。
- en: If the user is valid, we return the payload, otherwise we return an error to
    indicate that the payload is not valid.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户有效，我们返回载荷，否则我们返回一个错误以指示载荷无效。
- en: Authentication service
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 身份验证服务
- en: As shown in the previous section, in order to verify the payload that you get
    from the token, call the `validateUser` method provided by the `AuthenticationService`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，为了验证从令牌中获取的载荷，调用`AuthenticationService`提供的`validateUser`方法。
- en: In fact, this service will implement another method in order to generate the
    token for the logged in user. The service can be implemented as the following
    example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，该服务将实现另一种方法，以为已登录的用户生成令牌。该服务可以按照以下示例实现。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The service injects the `UserService` in order to find the user using the payload
    pass to the `validateUser`method. If the email in the payload allows you to find
    the user, and if that user has a valid token, she can continue the authentication
    process.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 服务注入了`UserService`，以便使用传递给`validateUser`方法的载荷来查找用户。如果载荷中的电子邮件允许您找到用户，并且该用户具有有效的令牌，她可以继续身份验证过程。
- en: In order to provide a token for the user who try to logged in, implement the
    `createToken` method, which takes as parameters an `email` and an optional `ttl`.
    The `ttl` (Time to live) will configure the token to be valid for a period. The
    value of the `ttl` is expressed in seconds, and the default value that we have
    defined in `60 * 60`, which means 1 hour.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为尝试登录的用户提供令牌，实现`createToken`方法，该方法以`email`和可选的`ttl`作为参数。`ttl`（生存时间）将配置令牌在一段时间内有效。`ttl`的值以秒为单位表示，我们在`60
    * 60`中定义了默认值，这意味着1小时。
- en: Authentication controller
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 身份验证控制器
- en: In order to process the authentication of the user, implement the controller
    and provide a handler for the login endpoint.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理用户的身份验证，实现控制器并为登录端点提供处理程序。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The controller provides the login handler, which is accessible by a call on
    the `POST /login` route. The purpose of this method is to validate the credentials
    provided by the user in order to find him in the database. If the user is found,
    create the appropriate token that will be returned as a response with the `expiresIn`value
    corresponding to our previously defined `ttl`. Otherwise the request will be rejected.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器提供了登录处理程序，可通过在`POST /login`路由上调用来访问。该方法的目的是验证用户提供的凭据，以便在数据库中找到他。如果找到用户，则创建适当的令牌，并将其作为响应返回，其中`expiresIn`值对应于我们先前定义的`ttl`。否则，请求将被拒绝。
- en: Module
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块
- en: We have now defined our service and strategy in order to configure passport
    and provide some method to create a token and validate a payload. Let’s define
    `AuthenticationModule`, which is similar to the following example.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经定义了我们的服务和策略，以配置passport并提供一些方法来创建令牌和验证载荷。让我们定义`AuthenticationModule`，它类似于以下示例。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the module is not defined as a normal module, so it has no components
    or controller defined in the `@Module()` decorator. In fact, this module is a
    dynamic module. In order to provide a multiple strategy, we can implement a static
    method on the class in order to call it when we import the module in another one.
    This method `forRoot` takes as a parameter the name of the strategy that you want
    to use and will create a `strategyProvider` in order to be added to the components
    list in the returned module. This provider will instanciate the strategy and provide
    the `AuthenticationService` as a dependency.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该模块不是作为普通模块定义的，因此在`@Module()`装饰器中没有定义组件或控制器。事实上，该模块是一个动态模块。为了提供多种策略，我们可以在类上实现一个静态方法，以便在另一个模块中导入时调用它。这个`forRoot`方法以您想要使用的策略的名称作为参数，并将创建一个`strategyProvider`，以便添加到返回模块的组件列表中。该提供程序将实例化策略并将`AuthenticationService`作为依赖项提供。
- en: Let’s continue by creating something to protect, such as the `UserModule`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一些需要保护的东西，比如`UserModule`。
- en: User module
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户模块
- en: The `UserModule` provides a service, a controller, and a model (see the sequelize
    chapter for the User model). We create some methods in the `UserService` in order
    to manipulate the data concerning the user. These methods are used in the `UserController`
    in order to provide some features to the user of the API.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserModule`提供了一个服务、一个控制器和一个模型（请参阅Sequelize章节中的User模型）。我们在`UserService`中创建了一些方法，以便操作有关用户的数据。这些方法在`UserController`中使用，以向API的用户提供一些功能。'
- en: All of the features can’t be used by the user or restricted in the data that
    is returned.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有功能都不能被用户使用，或者在返回的数据中受到限制。
- en: User service
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户服务
- en: Let’s examine an example of the `UserService` and some methods in order to access
    and manipulate the data. All of the methods describe in this part will be used
    in the controller, and some of them are restricted by the authentication.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个`UserService`的例子和一些方法，以便访问和操作数据。本部分描述的所有方法将在控制器中使用，其中一些受身份验证限制。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The service injects the `UserRepository` that we have described in the Sequelize
    chapter in order to access the model and the data store in the database. We also
    inject the `SequelizeInstance`, also described in the Sequelize chapter, in order
    to use the transaction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 服务注入了我们在Sequelize章节中描述的`UserRepository`，以便访问模型和数据库中的数据存储。我们还注入了在Sequelize章节中描述的`SequelizeInstance`，以便使用事务。
- en: 'The `UserService` implements the `findOne` method to find a user with a criteria
    passing in the `options` parameter. The `options` parameter can look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`实现了`findOne`方法，以在`options`参数中传递条件查找用户。`options`参数可以如下所示：'
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using this criteria, we can find the corresponding user. This method will return
    only one result.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些条件，我们可以找到相应的用户。该方法将只返回一个结果。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s implement the `findById` method, which takes as a parameter an ID in order
    to find a unique user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现`findById`方法，该方法以ID作为参数，以查找唯一的用户。
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then we need a way to create a new user in the database passing the user respecting
    the `IUser` interface. This method, as you can see, uses a `this.sequelizeInstance.transaction`
    transaction to avoid reading the data before everything is finished. This method
    passes a parameter to the `create` function, which is `returning` in order to
    get the instance user that has been created.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要一种方法，在数据库中创建一个新用户，传递符合`IUser`接口的用户。正如您所看到的，该方法使用`this.sequelizeInstance.transaction`事务，以避免在一切完成之前读取数据。该方法将参数传递给`create`函数，该函数是`returning`，以获取已创建的用户实例。
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of course, if you can create a user, you also need the possibility to update
    it with the following method following the `IUser` interface. This method too
    will return the instance of the user that has been updated.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您可以创建用户，您也需要通过以下方法更新用户，遵循`IUser`接口。这个方法也将返回已更新的用户实例。
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In order to make a round in all of the methods, we will implement the `delete`
    method to remove a user completely from the database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在所有方法中进行一轮，我们将实现`delete`方法，从数据库中完全删除用户。
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In all of the previous examples, we have define a complete `UserService` that
    allowed us to manipulate the data. We have the possibility to create, read, update,
    and delete a user.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有先前的示例中，我们定义了一个完整的`UserService`，允许我们操作数据。我们有可能创建、读取、更新和删除用户。
- en: User model
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户模型
- en: If you wish to see the implementation of the user model, you can refer to the
    Sequelize chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看用户模型的实现，可以参考Sequelize章节。
- en: User controller
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户控制器
- en: Now that we have created our service and model, we need to implement the controller
    to handle all the requests from the client. This controller provides at least
    a create, read, update and delete handler that should be implemented like the
    following example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的服务和模型，我们需要实现控制器来处理来自客户端的所有请求。该控制器至少提供了一个创建、读取、更新和删除处理程序，应该像以下示例一样实现。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The controller injects the `UserService` in order to use the methods implemented
    in the `UserService`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器注入了`UserService`，以使用`UserService`中实现的方法。
- en: Provide a `GET users` route that allows access to all users from the database,
    and you will see how we don’t want the user accessing the data of all of the users,
    just only for himself. This is why we are using a guard that only allows a user
    to acces his own data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个`GET users`路由，允许访问数据库中的所有用户，您将看到我们不希望用户访问所有用户的数据，只希望用户访问自己的数据。这就是为什么我们使用了一个守卫，只允许用户访问自己的数据。
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The user has access to a route that allows you to create a new user. Of course,
    if you want, the user can register into the logged in application, which we must
    allow for those without a restriction.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以访问一个允许您创建新用户的路由。当然，如果您愿意，用户可以注册到已登录的应用程序中，我们必须允许那些没有限制的用户。
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We also provide a `GET users/:id` route that allows you to get a user by his
    ID. Of course a logged in user should not be able to access the data from another
    user even from this route. This route is also protected by a guard in order to
    allow the user access to himself and not another user.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个`GET users/:id`路由，允许您通过ID获取用户。当然，已登录用户不应该能够访问另一个用户的数据，即使通过这个路由。该路由也受到守卫的保护，以允许用户访问自己而不是其他用户。
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A user can have the idea to update some of his own information, which is why
    we provide a way to update a user through the following `PUT users/:id` route.
    This route is also protected by a guard to avoid a user updating another user.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能想要更新自己的一些信息，这就是为什么我们通过以下`PUT users/:id`路由提供了一种更新用户的方式。这个路由也受到守卫的保护，以避免用户更新其他用户。
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use deletion to finish the last handler. This route has to also be protected
    by a guard to avoid a user from deleting another user. The only user that can
    be deleted by a user is himself.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用删除来完成最后一个处理程序。这个路由也必须受到守卫的保护，以避免用户删除另一个用户。唯一能够被用户删除的用户是他自己。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have implemented all of the methods that we need in this controller. Some
    of them are restricted by a guard in order to apply some security and avoid a
    user from manipulating the data from another user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在这个控制器中实现了所有需要的方法。其中一些受到守卫的限制，以应用一些安全性，并防止用户操纵另一个用户的数据。
- en: Module
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块
- en: To finish the implementation of the `UserModule`, we have to set up the module
    of course. This module contains a service, a controller, and a provider that allows
    you to inject the user model and provides a way to manipulate the stored data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成`UserModule`的实现，我们当然需要设置模块。该模块包含一个服务、一个控制器和一个提供者，允许您注入用户模型并提供一种操作存储数据的方式。
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This module is imported like the `AuthenticationModule` into the main `AppModule`
    in order to use it in the app and be accessible.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块被导入到主`AppModule`中，就像`AuthenticationModule`一样，以便在应用程序中使用并可访问。
- en: App module
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序模块
- en: The `AppModule` imports three modules for our example.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppModule`导入了三个示例模块。'
- en: '`DatabaseModule` accesses the sequelize instance and accesses the database.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatabaseModule`访问sequelize实例并访问数据库。'
- en: '`AuthenticationModule` allows you to log into a user and use the appropriate
    strategy.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationModule`允许您登录用户并使用适当的策略。'
- en: '`UserModule` exposes some endpoints that can be requested by the client.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserModule`公开了一些可以由客户端请求的端点。'
- en: In the end, the module should looks like the following example.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该模块应该如以下示例所示。
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see in this example, we have applied the `AuthenticationMiddleware`
    to the routes that we want to protect from a non-logged in user.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在这个例子中所看到的，我们已经将`AuthenticationMiddleware`应用到了我们想要保护不被未登录用户访问的路由上。
- en: This middleware has the purpose of applying the passport middleware `passport.authenticate`,
    which verifies the token provided by the user and stores in the header the request
    as the `Authorization` value. This middleware will take the strategy parameter
    to correspond to the strategy that should be applied, which for us is `strategy
    = 'jwt'`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个中间件的目的是应用passport中间件`passport.authenticate`，它验证用户提供的令牌，并将请求存储在头部作为`Authorization`值。这个中间件将使用策略参数来对应应该应用的策略，对我们来说是`strategy
    = 'jwt'`。
- en: This middleware is applied on almost all of the routes of the `UserController`,
    except for the `POST /users` that allows you to create a new user.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个中间件应用于`UserController`的几乎所有路由，除了允许你创建新用户的`POST /users`。
- en: Authentication middleware
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证中间件
- en: As seen in the previous section, we have applied the `AuthenticationMiddleware`,
    and we have seen that passport is middleware to authenticate the user. This middleware
    will execute the `passport.authenticate` method using the strategy `jwt`, taking
    a callback function that will return the results of the authentication method.
    As a result we can receive the payload corresponding to the token or an error
    in case the authentication doesn’t work.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，我们已经应用了`AuthenticationMiddleware`，并且我们已经看到passport是用于验证用户的中间件。这个中间件将使用策略`jwt`执行`passport.authenticate`方法，使用一个回调函数来返回验证方法的结果。因此，我们可以接收对应于令牌的有效负载，或者在验证不起作用的情况下收到错误。
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If the authentication work we will be able to store the user into the request
    `req` in order to be use by the controller or the guard. the middleware implement
    the interface `NestMiddleware` in order to implement the resolve function. It
    also inject the `UserService` in order to find the user authenticated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份验证成功，我们将能够将用户存储在请求`req`中，以便控制器或守卫使用。中间件实现了`NestMiddleware`接口，以实现解析函数。它还注入了`UserService`，以便找到已验证的用户。
- en: Managing restrictions with guards
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用守卫管理限制
- en: Nest.js comes with a guard concept. This injectable has a single responsibility,
    which is to determine if the request has to be handled by the route handler.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js带有一个守卫概念。这个可注入的守卫有一个单一的责任，就是确定请求是否需要由路由处理程序处理。
- en: The guard is used on a class that implements the `canActivate` interface in
    order to implement the `canActivate` method.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫用于实现`canActivate`接口的类，以实现`canActivate`方法。
- en: The guards are executed after every middleware and before any pipes. The interest
    of doing this is to separate the restriction logic of the middleware and reorganize
    this restriction.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫在每个中间件之后和任何管道之前执行。这样做的目的是将中间件的限制逻辑与守卫分开，并重新组织这个限制。
- en: Imagine using a guard to manage the access to a specific route and you want
    this route to only be accessible to the logged in user. To do that we have implemented
    a new guard, which has to return ‘true’ if the user accessing the route is the
    same as the one belonging to the resource that the user want to access. With this
    kind of guard, you avoid a user to access another user.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下使用守卫来管理对特定路由的访问，并且你希望这个路由只能被已登录的用户访问。为此，我们实现了一个新的守卫，如果访问路由的用户与想要访问资源的用户相同，它必须返回`true`。使用这种类型的守卫，可以避免用户访问其他用户。
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see, you get the handler from the context that corresponds to the
    route handler on the controller where the guard is applied. You also get the `userId`
    from the request parameters to compare it from to the logged in user register
    into the request. If the user who wants to access the data is the same, then he
    can access the references in the request parameter, otherwise he will receive
    a `403 Forbidden`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你可以从上下文中获取处理程序，该上下文对应于应用守卫的控制器上的路由处理程序。你还可以从请求参数中获取`userId`，并将其与请求中注册的已登录用户进行比较。如果想要访问数据的用户是相同的，那么他可以访问请求参数中的引用，否则他将收到`403
    Forbidden`。
- en: To apply the guard to the route handler, see the following example.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要将守卫应用到路由处理程序，请参见以下示例。
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have protected all of our route handlers of the userController,
    they are all accessible except for the `delete` one, because the user has to be
    an `admin` to access it. If the user does not have the appropriate role, they
    will receive a `403 Forbidden` response.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经保护了所有的用户控制器的路由处理程序，它们都是可访问的，除了`delete`，因为用户必须是`admin`才能访问。如果用户没有适当的角色，他们将收到`403
    Forbidden`的响应。
- en: Nest.js passport package
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nest.js passport包
- en: The `@nestjs/passport` package is an extensible package that allows you to use
    any strategy from passport into Nest.js. As seen in the previous section, it is
    possible to implement the authentication manually, but if you want to do it in
    a quicker way and have the strategy wrapped, then use the good package.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`@nestjs/passport`包是一个可扩展的包，允许你在Nest.js中使用passport的任何策略。如前一节所示，可以手动实现身份验证，但如果想要更快地实现并包装策略，那么就使用这个好的包。'
- en: 'In this section, you will see the usage of the package using `jwt` as shown
    in the previous section. To use it you have to install the following package:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将看到使用`jwt`的包的用法，就像前一节所示的那样。要使用它，你必须安装以下包：
- en: '`npm install --save @nestjs/passport passport passport-jwt jsonwebtoken`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install --save @nestjs/passport passport passport-jwt jsonwebtoken`'
- en: To use the package you will have the possibility to use the exact same `AuthenticationService`
    that you have implemented in the previous section, but remember to follow the
    next code sample.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个包，你将有可能使用与前一节中实现的完全相同的`AuthenticationService`，但记得遵循下面的代码示例。
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To instanciate the jwt strategy, you will also have to implement the `JwtStrategy`,
    but now you only need to pass the options because the passport is wrapped by the
    package and will apply the strategy to passport automatically under the hood.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要实例化 jwt 策略，你还需要实现 `JwtStrategy`，但现在你只需要传递选项，因为 passport 被包装在这个包中，并且会在幕后自动将策略应用于
    passport。
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, in this new implementation of the `JwtStrategy` you don’t need
    to implement the callback anymore. This is because you now extend the `PassportStrategy(Strategy)`
    where `Strategy` is the imported member from the `passport-jwt` library. Also,
    the `PassportStrategy` is a mixin that will call the `validate` method that we’ve
    implemented and named according to the abstract member of this mixin class. This
    method will be called by the strategy as the validation method of the payload.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这个新的 `JwtStrategy` 实现中，你不再需要实现回调。这是因为现在你扩展了 `PassportStrategy(Strategy)`，其中
    `Strategy` 是从 `passport-jwt` 库中导入的成员。此外，`PassportStrategy` 是一个混合类，将调用我们实现并根据这个混合类的抽象成员命名的
    `validate` 方法。该方法将被策略调用作为有效载荷的验证方法。
- en: Another feature provided by the package is the `AuthGuard` that can be used
    with `@UseGuards(AuthGuard('jwt'))` to enable the authentication on a specific
    controller method instead of using the middleware that we have implemented in
    the previous section.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该包提供的另一个功能是 `AuthGuard`，它可以与 `@UseGuards(AuthGuard('jwt'))` 一起使用，以在特定控制器方法上启用身份验证，而不是使用我们在上一节中实现的中间件。
- en: 'The `AuthGuard` takes as parameters the name of the strategy that you want
    to apply, which in our example is `jwt`, and can also take some other parameters
    that follow the `AuthGuardOptions` interface. This interface defines three options
    that can be used:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthGuard` 接受策略名称作为参数，我们的示例中是 `jwt`，还可以接受遵循 `AuthGuardOptions` 接口的其他一些参数。该接口定义了三个可用的选项：'
- en: '`session` as a boolean'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `callback` 作为允许你实现自己逻辑的函数'
- en: '`property` as a string to define the name of the property that you want to
    be add into the request to attach to the authenticated user'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `property` 作为一个字符串，用于定义要添加到请求中并附加到经过身份验证的用户的属性的名称'
- en: '`callback` as a function that allows you to implement your own logic'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还看到了新的 `@nestjs/passport` 包，它允许你以更快的方式实现一些类，如 `AuthenticationService` 和 `JwtStrategy`，并能够使用该包提供的
    `AuthGuard` 在任何控制器方法上验证任何用户。
- en: By default the `session` is set to false and the `property` is set to user.
    By default, The callback will return the `user` or an `UnauthorizedException`.
    And that’s it, you can now authenticate the user on any controller method and
    get the user from the request.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`session` 被设置为 false，`property` 被设置为 user。默认情况下，回调将返回 `user` 或 `UnauthorizedException`。就是这样，现在你可以在任何控制器方法上验证用户并从请求中获取用户。
- en: 'The only thing you have to do is to create the `AuthModule` as the following
    sample:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你唯一需要做的就是创建以下示例中的 `AuthModule`：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: And as you can see, it isn’t in your hands to create a provider to instanciate
    the strategy, because it’s now wrapped into the package.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，现在不需要创建提供者来实例化策略，因为它现在被包装在这个包中。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you have learned what a passport is and strategies to configure
    the different parts of the passport in order to authenticate the user and store
    it into the request. You have also seen how to implement the different modules,
    `AuthenticationModule` and the `UserModule`, in order to be logged into the user
    and provide some endpoints accessible by the user. Of course, we have restricted
    the access to some data that applies the `AuthenticationMiddleware` and the `CheckLoggedInUserGuard`
    for more security.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学会了什么是 passport 以及配置 passport 不同部分的策略，以便验证用户并将其存储到请求中。你还学会了如何实现不同的模块，`AuthenticationModule`
    和 `UserModule`，以便用户登录并提供一些用户可访问的端点。当然，我们已经通过 `AuthenticationMiddleware` 和 `CheckLoggedInUserGuard`
    限制了对一些数据的访问，以提供更多安全性。
- en: You have also seen the new `@nestjs/passport` package, which allows you to implement
    in faster ways a few classes as `AuthenticationService` and `JwtStrategy`, and
    be able to authenticate any user on any controller method using the `AuthGuard`
    provided by the package.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于依赖注入模式的内容。
- en: In the next chapter you will learn about the Dependency Injection pattern.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '- `session` 作为布尔值'
