- en: Chapter 2\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 概述
- en: In this chapter we’ll take an overview of Nest.js and look at the core concepts
    that you’ll need to build a Nest.js application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述Nest.js，并查看构建Nest.js应用程序所需的核心概念。
- en: Controllers
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: Controllers in Nest are responsible for handling incoming requests and returning
    responses to the client. Nest will route incoming requests to handler functions
    in controller classes. We use the `@Controller()` decorator to create a controller
    class.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Nest中的控制器负责处理传入的请求并向客户端返回响应。Nest将传入的请求路由到控制器类中的处理程序函数。我们使用`@Controller()`装饰器来创建控制器类。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ll go over the details of routing and handling requests in the **Routing
    and Request Handling** chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在**路由和请求处理**章节中详细讨论路由和处理请求的细节。
- en: Providers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供者
- en: Providers in Nest are used to create services, factories, helpers, and more
    that can be injected into controllers and other providers using Nest’s built-in
    dependency injection. The `@Injectable()` decorator is used to create a provider
    class.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Nest中的提供者用于创建服务、工厂、助手等，这些可以被注入到控制器和其他提供者中，使用Nest内置的依赖注入。`@Injectable()`装饰器用于创建提供者类。
- en: The `AuthenticationService` in our blog application, for example, is a provider
    that injects and uses the `UsersService` component.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们博客应用程序中的`AuthenticationService`是一个提供者，它注入并使用`UsersService`组件。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ll talk more about dependency injection in the the **Dependency Injection**
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在**依赖注入**章节中更多地讨论依赖注入。
- en: Modules
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: A Nest.js application is organized into modules. If you’re familiar with modules
    in Angular, then the module syntax Nest uses will look very familiar.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js应用程序被组织成模块。如果您熟悉Angular中的模块，那么Nest使用的模块语法将看起来非常熟悉。
- en: Every Nest.js application will have a **root module**. In a small application,
    this may be the only module. In a larger application, it makes sense to organize
    your application into multiple modules that split up your code into features and
    related capabilities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Nest.js应用程序都将有一个**根模块**。在一个小应用程序中，这可能是唯一的模块。在一个较大的应用程序中，将应用程序组织成多个模块是有意义的，这些模块将您的代码分割成功能和相关功能。
- en: A module in Nest.js is a class with a `@Module()` decorator. The `@Module()`
    decorator takes a single object that describes module using the following properties.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js中的模块是带有`@Module()`装饰器的类。`@Module()`装饰器接受一个描述模块的单个对象，使用以下属性。
- en: '| Property | Description |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `components` | The components to be instantiated that may be shared across
    this module and exported to be available to other modules |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `components` | 要实例化的组件，可以在此模块中共享，并导出以供其他模块使用 |'
- en: '| `controllers` | The controllers that are created by this module |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `controllers` | 由此模块创建的控制器 |'
- en: '| `imports` | The list of modules to import that export components that are
    requires in this module |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `imports` | 要导入的模块列表，这些模块导出了此模块中需要的组件 |'
- en: '| `exports` | The list of components from this module to be made available
    to other modules |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `exports` | 从此模块导出的组件列表，可供其他模块使用 |'
- en: In our example application, the root Module is named `AppModule` and the application
    is split up into a number of sub-modules that handle the major parts of the application
    such as authentication, comments, database access, blog entries and users.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用程序中，根模块名为`AppModule`，应用程序分为多个子模块，这些子模块处理应用程序的主要部分，如身份验证、评论、数据库访问、博客条目和用户。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The AppModule imports the modules that are needed for the application. The root
    module in our application doesn’t need to have any `exports` since no other modules
    import it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AppModule导入应用程序所需的模块。我们的应用程序中的根模块不需要有任何`exports`，因为没有其他模块导入它。
- en: The root module also doesn’t have any `components` or `controllers`, as these
    are all organized within the sub-modules they are related to. The `EntryModule`,
    for example, includes both `components` and `controllers` that are related to
    blog entries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根模块也没有任何`components`或`controllers`，因为这些都是在它们相关的子模块中组织的。例如，`EntryModule`包括与博客条目相关的`components`和`controllers`。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Modules in Nest.js are singletons by default. This means that you can share
    the same instance of an exported component, such as the `EntryService` above,
    between modules without any effort.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nest.js中，模块默认是单例的。这意味着您可以在模块之间共享导出组件的相同实例，例如上面的`EntryService`，而无需任何努力。
- en: Bootstrapping
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导
- en: Every Nest.js application needs to be bootstrapped. This is done by by using
    the `NestFactory` to create the root module and calling the `listen()` method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Nest.js应用程序都需要进行引导。这是通过使用`NestFactory`创建根模块并调用`listen()`方法来完成的。
- en: 'In our example application, the entry point is `main.ts` and we use the async
    / await pattern to create the `AppModule` and call `listen()`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用程序中，入口点是`main.ts`，我们使用async/await模式创建`AppModule`并调用`listen()`：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Middleware
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间件
- en: Nest.js middleware is either a function or a class decorated with the `@Injectable()`
    decorator that implements the `NestMiddleware` interface. Middleware is called
    **before** route handlers. These functions have access to the **request** and
    **response** object, and they can makes changes to the request and response object.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Nest.js中间件可以是一个函数，也可以是一个使用`@Injectable()`装饰器实现`NestMiddleware`接口的类。中间件在路由处理程序**之前**被调用。这些函数可以访问**请求**和**响应**对象，并且可以对请求和响应对象进行更改。
- en: One or more middleware functions can be configured for a route, and a middleware
    function can choose to pass the execution to the next middleware function on the
    stack or to end the request-response cycle.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为路由配置一个或多个中间件函数，并且中间件函数可以选择将执行传递给堆栈上的下一个中间件函数，或者结束请求-响应周期。
- en: If a middleware function does not end the request-response cycle, it must call
    `next()` to pass control to the next middleware function or to the request handler
    if it is the last function on the stack. Failing to do so will leave the request
    hanging.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果中间件函数没有结束请求-响应周期，它必须调用`next()`将控制权传递给堆栈上的下一个中间件函数，或者如果它是堆栈上的最后一个函数，则传递给请求处理程序。未能这样做将使请求挂起。
- en: The `AuthenticationMiddleware` in our blog application, for example, is responsible
    for authenticating a user that is accessing the blog.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的博客应用程序中，`AuthenticationMiddleware`负责对访问博客的用户进行身份验证。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If authentication fails, a 400 response is sent back to the client. If authentication
    is successful, then `next()` is called and the request will continue down the
    middleware stack until it reaches the request handler.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份验证失败，将向客户端发送400响应。如果身份验证成功，那么将调用`next()`，并且请求将继续通过中间件堆栈，直到到达请求处理程序。
- en: Middleware is configured on routes in the `configure()` function of a Nest.js
    module. For example, the `AuthenticationMiddle` above is configured in the `AppModule`
    as shown here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件是在Nest.js模块的`configure()`函数中配置在路由上的。例如，上面的`AuthenticationMiddle`在`AppModule`中配置如下所示。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can apply middleware to all routes on a controller, as is done for the `EntryController`
    and `CommentController`. You can also apply middleware to specific routes by their
    path, as is done for the subset of routes from the `UserController`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将中间件应用到控制器上的所有路由，就像`EntryController`和`CommentController`中所做的那样。您还可以根据路径将中间件应用到特定路由上，就像从`UserController`中的子集路由中所做的那样。
- en: Guards
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 守卫
- en: Guards are classes that are decorated with the `@Injectable()` decorator and
    implement the `CanActivate` interface. A guard is responsible for determining
    if a request should be handled by a route handler or route. Guards are executed
    **after** every middleware, but **before** pipes. Unlike middleware, guards have
    access to the `ExecutionContext` object, so they know exactly what is going to
    evaluated.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫是用`@Injectable()`装饰器修饰并实现`CanActivate`接口的类。守卫负责确定请求是否应该由路由处理程序或路由处理。守卫在每个中间件之后执行，但在管道之前执行。与中间件不同，守卫可以访问`ExecutionContext`对象，因此它们确切地知道将要评估的内容。
- en: In our blog application, we use the `CheckLoggedInUserGuard` in the `UserController`
    to only allow a user to access and access their own user information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的博客应用程序中，我们在`UserController`中使用`CheckLoggedInUserGuard`，只允许用户访问和访问自己的用户信息。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `@UseGuards` decorator is used to apply a guard to a route. This decorator
    can be used on a controller class to apply the guard to all routes in that controller,
    or it can be used on individual route handlers in a controller as seen in the
    `UserController`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`@UseGuards`装饰器用于将守卫应用到路由上。这个装饰器可以用在控制器类上，将守卫应用到该控制器的所有路由上，也可以用在控制器中的单个路由处理程序上，就像`UserController`中所示的那样：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we covered Nest.js controllers, providers, modules, bootstrapping,
    and middleware. In the next chapter we will go over Nest.js authentication.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Nest.js控制器、提供者、模块、引导和中间件。在下一章中，我们将介绍Nest.js身份验证。
