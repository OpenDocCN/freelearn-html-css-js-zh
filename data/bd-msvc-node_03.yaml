- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: 'Understanding Node.js Fundamentals: Building Blocks and Key Concepts'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Node.js基础知识：构建块和关键概念
- en: Node.js is a JavaScript runtime built on the V8 JavaScript engine. It allows
    you to run JavaScript code outside of a web browser, making it a popular choice
    for server-side and command-line applications. Understanding these fundamentals
    of Node.js will provide you with a solid foundation for developing server-side
    applications, command-line tools, and other JavaScript-based solutions using the
    Node.js runtime.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个基于V8 JavaScript引擎构建的JavaScript运行时环境。它允许你在浏览器之外运行JavaScript代码，使其成为服务器端和命令行应用程序的流行选择。理解Node.js的这些基础知识将为你开发服务器端应用程序、命令行工具和其他基于Node.js运行时的JavaScript解决方案提供一个坚实的基础。
- en: 'We’ll start this chapter with the exploration of Node.js framework fundamentals.
    To learn how to develop with the Node.js framework, you need to master its building
    blocks and key concepts. One thing is for sure: Node.js is a framework with which
    you can build even the most difficult projects. You can build REST APIs, authorization
    systems, data visualization and management systems/applications, frontend frameworks
    with templating languages, AI and machine learning apps, and many more.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，探讨Node.js框架的基础知识。为了学习如何使用Node.js框架进行开发，你需要掌握其构建块和关键概念。有一点可以肯定：Node.js是一个可以用来构建甚至最复杂项目的框架。你可以构建REST
    API、授权系统、数据可视化和管理系统/应用程序、带有模板语言的客户端框架、人工智能和机器学习应用程序等等。
- en: We need to have a little understanding of synchronous and asynchronous programming.
    In synchronous programming, tasks are executed sequentially, one after the other.
    When a function is called, the program waits until that function completes its
    execution before moving on to the next task. This means that each operation must
    finish before the next one starts. In a synchronous process, if an operation takes
    a long time to complete (such as reading data from a database or making a network
    request), it can block the entire program, making it unresponsive. In asynchronous
    programming, tasks are executed independently from the main program flow. When
    an asynchronous operation is initiated, the program can continue executing other
    tasks without waiting for the asynchronous operation to complete. Once the asynchronous
    operation finishes, a callback function or a promise resolves, allowing the program
    to handle the result.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对同步和异步编程有一个基本的了解。在同步编程中，任务按顺序执行，一个接一个。当一个函数被调用时，程序会等待该函数执行完成后再继续执行下一个任务。这意味着每个操作必须完成，下一个操作才能开始。在同步过程中，如果某个操作需要很长时间才能完成（例如从数据库读取数据或进行网络请求），它可能会阻塞整个程序，使其无响应。在异步编程中，任务独立于主程序流程执行。当异步操作启动时，程序可以继续执行其他任务，而无需等待异步操作完成。一旦异步操作完成，回调函数或承诺就会解决，允许程序处理结果。
- en: Also, let’s talk a little about the V8 JavaScript engine. The V8 JavaScript
    engine is an open source JavaScript engine developed by Google. It is written
    in C++ and is used in Google Chrome and many other projects, including Node.js.
    V8’s speed and efficiency have made it a fundamental component of many web browsers
    and server-side JavaScript frameworks, contributing to the rapid growth of JavaScript-based
    applications and services on the web.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们简单谈谈V8 JavaScript引擎。V8 JavaScript引擎是由Google开发的开源JavaScript引擎。它用C++编写，用于Google
    Chrome和许多其他项目，包括Node.js。V8的速度和效率使其成为许多网络浏览器和服务器端JavaScript框架的基本组件，有助于推动基于JavaScript的应用和服务在网上的快速增长。
- en: By the end of this chapter, you will have learned the fundamentals of Node.js
    and how to apply them in your everyday work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会Node.js的基础知识以及如何在日常工作中应用它们。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Asynchronous and non-blocking communication and event-driven architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步和非阻塞通信以及事件驱动架构
- en: The JavaScript ecosystem and server-side development
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript生态系统和服务器端开发
- en: Command-line applications and scalability and performance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行应用程序和可扩展性及性能
- en: Cross-platform compatibility and community and support
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台兼容性以及社区和支持
- en: Microservices and serverless architectures and their integration through APIs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务和无服务器架构及其通过API的集成
- en: Asynchronous and non-blocking communication and event-driven architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步和非阻塞通信以及事件驱动架构
- en: In this section, we’re going to learn about asynchronous and non-blocking communication
    along with event-driven architecture. Asynchronous and non-blocking communication,
    along with event-driven architecture, are crucial concepts in microservices that
    enable efficient, responsive, and loosely coupled interactions among services.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于异步和非阻塞通信以及事件驱动架构的内容。异步和非阻塞通信，以及事件驱动架构，是微服务中的关键概念，它们使得服务之间能够高效、响应迅速且松散耦合地交互。
- en: Let’s explore these concepts in more detail in the following subsections.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的小节中更详细地探讨这些概念。
- en: Asynchronous and non-blocking communication
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步和非阻塞通信
- en: In a microservices architecture, services often need to interact with one another
    to complete tasks. **Asynchronous and non-blocking communication** refers to the
    practice of allowing services to continue their operations without waiting for
    immediate responses from other services.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，服务通常需要相互交互以完成任务。**异步和非阻塞通信**指的是允许服务在不需要等待其他服务的即时响应的情况下继续其操作。
- en: 'This approach offers several advantages, such as the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法提供了以下优势：
- en: '**Improved responsiveness**: Asynchronous communication prevents services from
    being blocked while waiting for responses, leading to faster overall response
    times.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高响应性**：异步通信防止服务在等待响应时被阻塞，从而缩短整体响应时间。'
- en: '**Scalability**: Non-blocking communication allows services to process other
    tasks, such as API requests and responses, while waiting for responses. Scalability
    is essential for handling high volumes of concurrent requests.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：非阻塞通信允许服务在等待响应的同时处理其他任务，例如API请求和响应。可扩展性对于处理大量并发请求至关重要。'
- en: '**Reduced coupling**: Services are not tightly coupled to one another’s response
    times. This flexibility supports the autonomy and independence of microservices.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低耦合度**：服务之间不紧密依赖于对方的响应时间。这种灵活性支持了微服务的自主性和独立性。'
- en: '**Resilience**: Asynchronous communication can handle scenarios where a service
    is temporarily unavailable and retries can be attempted later.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：异步通信可以处理服务暂时不可用的情况，并可以在稍后尝试重试。'
- en: Mastering this communication is a fundamental way for services to interact better
    with one another.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 精通这种通信方式是服务之间更好地相互交互的基本方式。
- en: '*Figure 3**.1* illustrates asynchronous and non-blocking communication:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.1* 展示了异步和非阻塞通信：'
- en: '![Figure 3.1: Asynchronous and non-blocking communication](img/B14980_03_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1：异步和非阻塞通信](img/B14980_03_01.jpg)'
- en: 'Figure 3.1: Asynchronous and non-blocking communication'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：异步和非阻塞通信
- en: Therefore, asynchronous and non-blocking communication leads to improved responsiveness,
    scalability, reduced coupling, and resilience of our systems/applications while
    maintaining a bug-free code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，异步和非阻塞通信提高了我们系统/应用程序的响应性、可扩展性、降低耦合度和弹性，同时保持代码无错误。
- en: 'In summary, in synchronous communication, the sender and receiver operate in
    a synchronized manner. The sender sends a request and waits until it receives
    a response before proceeding with further actions. This communication style is
    similar to making a phone call: you wait for the other person to answer and respond
    before you continue the conversation. In asynchronous communication, the sender
    and receiver operate independently. The sender sends a request and continues with
    other tasks without waiting for a response. When the receiver processes the request
    and generates a response, it is sent back to the sender. This style of communication
    is similar to sending an email: you send the message and continue with your work,
    expecting a response later.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在同步通信中，发送者和接收者以同步的方式进行操作。发送者发送一个请求，并在收到响应之前等待，然后才进行进一步的操作。这种通信方式类似于打电话：你等待对方接听并回应，然后再继续对话。在异步通信中，发送者和接收者独立操作。发送者发送一个请求，并继续其他任务，而不等待响应。当接收者处理请求并生成响应时，它会被发送回发送者。这种通信方式类似于发送电子邮件：你发送消息并继续工作，期待稍后收到回复。
- en: In the next section, we’ll learn about event-driven architecture.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节，我们将学习关于事件驱动架构的内容。
- en: Event-driven architecture
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动架构
- en: '**Event-driven architecture** is a pattern whereby services communicate through
    the exchange of events. An **event** is a significant occurrence or state change
    that other services might be interested in.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件驱动架构**是一种服务通过事件交换进行通信的模式。**事件**是一个重要的发生或状态变化，其他服务可能对此感兴趣。'
- en: 'The key features of this architecture include the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构的关键特性包括以下内容：
- en: '**Publish-subscribe model**: Services that generate events (publishers) notify
    other services (subscribers) about these events. Subscribers can react to events
    without direct communication with publishers.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布-订阅模型**：生成事件的（发布者）服务通知其他服务（订阅者）这些事件。订阅者可以在不与发布者直接通信的情况下对事件做出反应。'
- en: '**Loose coupling**: Event-driven architecture promotes loose coupling between
    services. Publishers and subscribers don’t need to know each other’s details,
    reducing dependencies.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松散耦合**：事件驱动架构促进了服务之间的松散耦合。发布者和订阅者不需要知道彼此的详细信息，从而减少了依赖性。'
- en: '**Flexibility**: New services can easily subscribe to events as needed, without
    affecting the existing services. This flexibility supports the evolution of the
    system.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：新服务可以轻松地根据需要订阅事件，而不会影响现有服务。这种灵活性支持系统的演变。'
- en: '**Scalability**: Event-driven systems can distribute the processing of events,
    allowing for efficient scalability as the system grows.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：事件驱动系统可以分配事件的处理，使得系统在增长过程中能够高效地扩展。'
- en: '**Real-time updates**: Event-driven architecture supports real-time updates
    and enables services to respond quickly to changes in the system.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**：事件驱动架构支持实时更新，并使服务能够快速响应系统中的变化。'
- en: When we develop microservices in Node.js, we can apply the event-driven architecture
    to develop in a better way, with all the preceding advantages, and we can assure
    the best quality for our application/system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Node.js 中开发微服务时，我们可以应用事件驱动架构以更好的方式进行开发，利用所有先前的优势，并确保我们的应用程序/系统的最佳质量。
- en: '*Figure 3**.2* shows an event-driven architecture:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.2* 展示了一个事件驱动架构：'
- en: '![Figure 3.2: An event-driven architecture](img/B14980_03_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2：事件驱动架构](img/B14980_03_02.jpg)'
- en: 'Figure 3.2: An event-driven architecture'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：事件驱动架构
- en: Common implementations of event-driven architecture include message queues (e.g.,
    RabbitMQ and Apache Kafka) and event streaming platforms (e.g., Apache Kafka and
    IBM Event Streams).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的事件驱动架构实现包括消息队列（例如 RabbitMQ 和 Apache Kafka）和事件流平台（例如 Apache Kafka 和 IBM Event
    Streams）。
- en: In summary, embracing asynchronous and non-blocking communication, along with
    event-driven architecture, empowers microservices to work independently, efficiently
    handle communication, and respond dynamically to changes. These concepts are vital
    for building resilient, scalable, and loosely coupled microservices systems that
    align with the requirements of modern, agile software development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，拥抱异步和非阻塞通信，以及事件驱动架构，赋予微服务独立工作、高效处理通信和动态响应变化的能力。这些概念对于构建具有弹性、可扩展性和松散耦合的微服务系统，以适应现代敏捷软件开发的需求至关重要。
- en: With the understanding of these concepts, let’s now move on to the JavaScript
    ecosystem and server-side development.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了这些概念之后，我们现在将转向 JavaScript 生态系统和服务器端开发。
- en: The JavaScript ecosystem and server-side development
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 生态系统和服务器端开发
- en: In this section, we’re going to learn about the JavaScript ecosystem and server-side
    development.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于 JavaScript 生态系统和服务器端开发的内容。
- en: The JavaScript ecosystem is a vast collection of tools, libraries, frameworks,
    and resources that support the development of web applications, both on the client
    side (browser) and the server side. JavaScript has become one of the most popular
    and versatile programming languages, powering a wide range of applications from
    interactive websites to complex server-side systems.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 生态系统是一个庞大的工具、库、框架和资源的集合，支持在客户端（浏览器）和服务器端开发 Web 应用程序。JavaScript 已经成为最受欢迎和最通用的编程语言之一，为从交互式网站到复杂的服务器端系统等各种应用程序提供动力。
- en: The JavaScript ecosystem
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 生态系统
- en: The **JavaScript ecosystem** refers to the vast collection of libraries, frameworks,
    tools, and resources that revolve around the JavaScript programming language.
    This ecosystem has evolved over the years to support various aspects of software
    development, ranging from frontend web development to server-side programming
    and more.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript生态系统**指的是围绕JavaScript编程语言的大量库、框架、工具和资源的集合。这个生态系统经过多年的发展，已经支持了软件开发的各种方面，从前端网页开发到后端编程以及更多。'
- en: 'Some key features of the JavaScript ecosystem are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript生态系统的一些关键特性如下：
- en: '**Node.js**: This is a runtime that allows running JavaScript on the server
    side. It’s used for building server-side applications and APIs.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**是一个运行时环境，允许在服务器端运行JavaScript。它用于构建后端应用程序和API。'
- en: '`npm` is a package manager for JavaScript that enables developers to easily
    share and reuse code. It hosts a massive repository of open-source packages such
    as `express` and `xlsx`, which can be used to extend the functionality of your
    applications.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm`是JavaScript的包管理器，它使开发者能够轻松地共享和重用代码。它托管了一个庞大的开源包库，如`express`和`xlsx`，这些包可以用来扩展你应用程序的功能。'
- en: '`body-parser`, `cookie-parser`), routing (express router), templating engines
    (`ejs`, `pug`), session management (express-session), security (`helmet`, `csurf`),
    caching (cache-control), authentication and authorization (`express-jwt`, `passport`),
    file uploads (`multer`), internationalization (`i18n`), and so on.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`body-parser`, `cookie-parser`)，路由（express router），模板引擎（`ejs`，`pug`），会话管理（express-session），安全（`helmet`，`csurf`），缓存（cache-control），身份验证和授权（`express-jwt`，`passport`），文件上传（`multer`），国际化（`i18n`），等等。
- en: '**Frontend frameworks**: Frameworks such as React, Angular, and Vue.js enable
    the creation of dynamic and interactive user interfaces on the client side. These
    frameworks offer components, state management, and routing capabilities.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端框架**：如React、Angular和Vue.js等框架使得在客户端创建动态和交互式用户界面成为可能。这些框架提供组件、状态管理和路由功能。'
- en: '**Build tools**: Tools such as Webpack, Parcel, and Rollup help bundle and
    optimize JavaScript code, CSS, and other assets for production-ready applications.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建工具**：如Webpack、Parcel和Rollup等工具帮助打包和优化JavaScript代码、CSS以及其他资产，以用于生产就绪的应用程序。'
- en: '**Testing libraries**: Jest, Mocha, and Jasmine are common testing libraries
    that facilitate writing and running tests for your code base.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试库**：Jest、Mocha和Jasmine是常见的测试库，它们简化了为你的代码库编写和运行测试的过程。'
- en: '**Database access**: Libraries such as Sequelize, Mongoose, and Knex provide
    database abstraction and management, allowing you to interact with various databases.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库访问**：如Sequelize、Mongoose和Knex等库提供数据库抽象和管理，允许你与各种数据库进行交互。'
- en: '**RESTful APIs**: Libraries such as Express.js make it easy to create RESTful
    APIs for your applications, enabling communication between client and server.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESTful API**：如Express.js等库使得为你的应用程序创建RESTful API变得容易，从而实现客户端和服务器之间的通信。'
- en: The JavaScript ecosystem is so big that we can take hours learning it, but we
    need to make sure to use the best practices when we develop in Node.js with tools,
    frameworks, and libraries offered by the JavaScript ecosystem.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript生态系统如此庞大，我们可能需要花费数小时来学习它，但我们需要确保在用JavaScript生态系统提供的工具、框架和库进行Node.js开发时遵循最佳实践。
- en: '*Figure 3**.3* depicts the JavaScript ecosystem:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3*.3展示了JavaScript生态系统：'
- en: '![Figure 3.3: A JavaScript ecosystem](img/B14980_03_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3：JavaScript生态系统](img/B14980_03_03.jpg)'
- en: 'Figure 3.3: A JavaScript ecosystem'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：JavaScript生态系统
- en: Learning primarily what a JavaScript ecosystem is the proper way to interact
    better with its tools, libraries, and frameworks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 了解JavaScript生态系统是什么是更好地与它的工具、库和框架交互的正确方式。
- en: With these concepts learned, we can continue with server-side development.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续进行后端开发。
- en: Server-side development with Node.js
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node.js进行后端开发
- en: '**Server-side development** with Node.js allows you to build scalable and efficient
    applications that handle tasks such as data processing, file manipulation, and
    interacting with databases.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**后端开发**使用Node.js允许你构建可扩展且高效的程序，处理数据处理、文件操作和与数据库交互等任务。'
- en: 'Some key concepts and advantages of Node.js for server-side development include
    the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js用于后端开发的一些关键概念和优势包括以下内容：
- en: '**Non-blocking I/O**: Node.js’s asynchronous and event-driven architecture
    allows it to handle a large number of concurrent connections without blocking
    the execution of the other tasks.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非阻塞 I/O**：Node.js 的异步和事件驱动架构允许它在不阻塞其他任务执行的情况下处理大量并发连接。'
- en: '**Scalability**: Node.js applications can be easily scaled horizontally, making
    them suitable for real-time applications and microservices architectures.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Node.js 应用程序可以轻松地进行水平扩展，这使得它们适合实时应用程序和微服务架构。'
- en: '**Single language**: Using JavaScript on both the client and server sides can
    streamline development and maintenance, as developers can work with the same language
    throughout the stack.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单语言**：在客户端和服务器端都使用 JavaScript 可以简化开发和维护，因为开发者可以在整个堆栈中使用相同的语言。'
- en: '`npm` packages and the vibrant JavaScript community provide resources and tools
    to solve various development challenges.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` 包和充满活力的 JavaScript 社区提供了资源和工具来解决各种开发挑战。'
- en: '**Fast development**: Node.js’s rapid development cycle allows for quick iteration
    and deployment of applications.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速开发**：Node.js 的快速开发周期允许快速迭代和部署应用程序。'
- en: We can do so much while we develop on the server side in Node.js, such as data
    processing, file manipulation, interacting with databases, authenticating and
    authorization in our systems/applications, applying best practices for security
    issues, and making our system/application international.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 服务器端开发中，我们可以做很多事情，例如数据处理、文件操作、与数据库交互、在系统/应用程序中进行身份验证和授权、应用最佳实践以解决安全问题，以及使我们的系统/应用程序国际化。
- en: '*Figure 3**.4* depicts server-side development with Node.js:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.4* 展示了使用 Node.js 进行服务器端开发：'
- en: '![Figure 3.4: Server-side development with Node.js](img/B14980_03_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4：使用 Node.js 进行服务器端开发](img/B14980_03_04.jpg)'
- en: 'Figure 3.4: Server-side development with Node.js'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：使用 Node.js 进行服务器端开发
- en: In conclusion, the JavaScript ecosystem, bolstered by Node.js, offers a comprehensive
    toolkit for building both client-side and server-side applications. With its non-blocking
    nature and extensive libraries, JavaScript is well-suited for modern, responsive,
    and efficient server-side development.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，JavaScript 生态系统，得益于 Node.js，为构建客户端和服务器端应用程序提供了一个全面的工具集。由于其非阻塞特性和丰富的库，JavaScript
    非常适合现代、响应和高效的服务器端开发。
- en: Now, we can continue to the next section, in which we will talk about command-line
    applications, scalability, and performance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论命令行应用程序、可扩展性和性能。
- en: Command-line applications and scalability and performance
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行应用程序和可扩展性及性能
- en: In this section, we will learn about command-line applications, scalability,
    and performance in Node.js. Command-line applications and scalability/performance
    are two important aspects in the realm of software development.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于 Node.js 的命令行应用程序、可扩展性和性能。命令行应用程序以及可扩展性和性能是软件开发领域中的两个重要方面。
- en: We’ll start with command-line applications.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从命令行应用程序开始。
- en: Command-line applications
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行应用程序
- en: '**Command-line applications** are software programs that are operated through
    the **command-line interface** (**CLI**) of an operating system. These programs
    allow users to interact with the application by typing commands instead of using
    a **graphical user interface** (**GUI**). Command-line applications are widely
    used for various tasks, including system administration, file manipulation, data
    processing, and development workflows.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令行应用程序**是通过操作系统的**命令行界面**（CLI）运行的软件程序。这些程序允许用户通过输入命令而不是使用**图形用户界面**（GUI）与应用程序交互。命令行应用程序被广泛用于各种任务，包括系统管理、文件操作、数据处理和开发工作流程。'
- en: 'The key advantages of command-line applications are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应用程序的关键优势如下：
- en: '**Efficiency**: Command-line applications often require fewer system resources
    and can execute tasks more quickly due to their lightweight nature.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：由于轻量级特性，命令行应用程序通常需要更少的系统资源，并且可以更快地执行任务。'
- en: '**Automation**: Command-line applications are well-suited for automation scripts,
    allowing developers to create repeatable and complex tasks with ease.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：命令行应用程序非常适合自动化脚本，允许开发者轻松地创建可重复和复杂的任务。'
- en: '**Remote access**: Command-line applications can be accessed remotely, making
    them ideal for managing servers and systems over the network.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程访问**：命令行应用程序可以通过远程访问，这使得它们非常适合通过网络管理服务器和系统。'
- en: '**Scripting**: Developers can create scripts using CLI tools to automate repetitive
    tasks and improve productivity.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**：开发者可以使用 CLI 工具创建脚本来自动化重复任务并提高生产力。'
- en: '**Headless environments**: Command-line applications work well in headless
    environments, such as servers without graphical interfaces.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无头环境**：命令行应用程序在无头环境中运行良好，例如没有图形界面的服务器。'
- en: Command-line applications are widely used in various operating systems to realize
    the various tasks of everyday work. These tasks can range from the simplest ones,
    such as system administration, to the most complex ones, such as development workflows.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应用程序在各种操作系统中被广泛使用，以实现日常工作的各种任务。这些任务的范围可以从最简单的，如系统管理，到最复杂的，如开发工作流程。
- en: '*Figure 3**.5* shows a command-line prompt:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3*.*5* 展示了命令行提示符：'
- en: '![Figure 3.5: A command-line prompt](img/B14980_03_05.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5：命令行提示符](img/B14980_03_05.jpg)'
- en: 'Figure 3.5: A command-line prompt'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：命令行提示符
- en: Command-line applications are the first and most common programs to start with
    in the extensive world of applications. They are often used in industries, software
    agencies, enterprises, and so on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行应用程序是在广泛的应用程序世界中首先且最常使用的程序。它们常用于工业、软件代理机构、企业等。
- en: In the next section, we will talk about scalability and performance in Node.js.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论 Node.js 中的可伸缩性和性能。
- en: Scalability and performance
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可伸缩性和性能
- en: '**Scalability and performance** are critical considerations when designing
    and developing software applications, particularly in the context of modern web
    applications and microservices architectures.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**可伸缩性和性能**在设计和发展软件应用程序时是关键考虑因素，尤其是在现代网络应用程序和微服务架构的背景下。'
- en: Let’s start with scalability.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从可伸缩性开始。
- en: Scalability
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可伸缩性
- en: '**Scalability** refers to an application’s ability to handle increasing workloads
    and to grow in terms of resources, users, and data volume. Scalability can be
    achieved through two main approaches:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**可伸缩性**指的是应用程序处理增加的工作负载以及在资源、用户和数据量方面的增长能力。可伸缩性可以通过两种主要方法实现：'
- en: '**Vertical scaling** (**scaling up**): This means adding more resources (CPU,
    memory) to a single machine to handle an increased load. However, there’s a limit
    to how much a single machine can scale.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展**（**向上扩展**）：这意味着向单个机器添加更多资源（CPU、内存）以处理增加的负载。然而，单个机器的可扩展性是有限的。'
- en: '**Horizontal scaling** (**scaling out**): This means adding more machines to
    distribute the load. This is often used in microservices architectures, where
    individual services can be scaled independently.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**（**向外扩展**）：这意味着添加更多机器以分配负载。这通常用于微服务架构中，其中单个服务可以独立扩展。'
- en: '*Figure 3**.6* illustrates scalability in Node.js:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3*.*6* 展示了 Node.js 的可伸缩性：'
- en: '![Figure 3.6: Scalability in Node.js](img/B14980_03_06.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6：Node.js 的可伸缩性](img/B14980_03_06.jpg)'
- en: 'Figure 3.6: Scalability in Node.js'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：Node.js 的可伸缩性
- en: Scalability can help developers scale up or scale down their applications/systems
    without too much effort and cost.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可伸缩性可以帮助开发者无需太多努力和成本地扩展或缩减他们的应用程序/系统。
- en: Now, let’s take a look at performance.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看性能。
- en: Performance
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: '**Performance** refers to the speed and efficiency at which an application
    operates. Several factors influence performance, such as the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能**指的是应用程序操作的速度和效率。以下因素会影响性能：'
- en: '**Optimized code**: Writing efficient code that minimizes resource consumption
    and maximizes execution speed'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化代码**：编写高效的代码，以最小化资源消耗并最大化执行速度'
- en: '**Caching**: Implementing caching mechanisms to store frequently accessed data
    and reduce the need for repeated calculations or database queries'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：实现缓存机制以存储频繁访问的数据，减少重复计算或数据库查询的需求'
- en: '**Database optimization**: Proper indexing, query optimization, and using caching
    layers to significantly improve database performance'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库优化**：适当的索引、查询优化和使用缓存层以显著提高数据库性能'
- en: '**Load balancing**: Distributing incoming traffic across multiple servers to
    prevent overloading individual instances'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：将传入流量分配到多个服务器，以防止单个实例过载'
- en: '**Asynchronous processing**: Using asynchronous operations to handle tasks
    that don’t need immediate responses, freeing up resources for other tasks'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步处理**：使用异步操作来处理不需要立即响应的任务，为其他任务释放资源'
- en: '**Bottleneck identification**: Regularly monitoring and profiling to help identify
    performance bottlenecks and areas for improvement'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瓶颈识别**：定期监控和性能分析有助于识别性能瓶颈和改进领域。'
- en: In modern software development, building scalable and high-performance applications
    is essential for delivering a positive user experience and handling the demands
    of a growing user base. Both command-line applications and scalability/performance
    considerations play a crucial role in creating efficient and responsive software
    solutions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，构建可扩展且高性能的应用程序对于提供积极的用户体验和处理不断增长的用户群体的需求至关重要。命令行应用程序和可扩展性/性能考虑因素在创建高效和响应迅速的软件解决方案中起着关键作用。
- en: In the next section, we will learn about cross-platform compatibility, community,
    and support.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于跨平台兼容性、社区和支持的内容。
- en: Cross-platform compatibility and community and support
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台兼容性、社区和支持
- en: In this section, we are going to learn about cross-platform compatibility, community,
    and support.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于跨平台兼容性、社区和支持的内容。
- en: Cross-platform compatibility and strong community support are two significant
    factors that contribute to the success and effectiveness of software development.
    Let’s delve into each of these aspects in the following subsections.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台兼容性和强大的社区支持是两个对软件开发的成功和有效性做出重要贡献的因素。让我们在以下子节中深入探讨这些方面的每一个。
- en: Cross-platform compatibility
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台兼容性
- en: '**Cross-platform compatibility** refers to the ability of software applications
    to run consistently and smoothly across different operating systems and devices.
    Ensuring cross-platform compatibility is essential in today’s diverse technological
    landscape, where users interact with applications on various platforms such as
    Windows, macOS, Linux, Android, and iOS.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨平台兼容性**指的是软件应用程序能够在不同的操作系统和设备上一致且平稳地运行。确保跨平台兼容性在当今多样化的技术环境中至关重要，用户在Windows、macOS、Linux、Android和iOS等不同平台上与应用程序互动。'
- en: 'Here are some key points on cross-platform compatibility:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些关于跨平台兼容性的关键点：
- en: '**User reach**: Developing cross-platform applications broadens the user base,
    as the software can be accessed by a larger audience using different devices and
    operating systems.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户覆盖范围**：开发跨平台应用程序可以扩大用户基础，因为软件可以通过不同的设备和操作系统被更广泛的受众访问。'
- en: '**Consistent experience**: Cross-platform applications aim to provide a consistent
    user experience regardless of the device or platform being used.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致体验**：跨平台应用程序旨在提供一致的用户体验，无论使用的是哪种设备或平台。'
- en: '**Code reusability**: Using frameworks and tools that support cross-platform
    development allows developers to reuse a significant portion of the code base,
    saving time and effort.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码重用性**：使用支持跨平台开发的框架和工具允许开发者重用大量代码库，节省时间和精力。'
- en: '**Reduced development costs**: Developing a single application for multiple
    platforms can reduce development costs compared to building separate native applications
    for each platform.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低开发成本**：为多个平台开发单个应用程序可以降低开发成本，相比之下，为每个平台构建独立的原生应用程序成本更高。'
- en: '**Efficient updates**: Updates and bug fixes can be applied simultaneously
    to all platforms, ensuring consistent performance and security.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效更新**：更新和错误修复可以同时应用于所有平台，确保一致的性能和安全。'
- en: '**Challenges**: Achieving cross-platform compatibility might require dealing
    with platform-specific nuances and limitations, which could impact certain features
    or performance aspects.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挑战**：实现跨平台兼容性可能需要处理特定平台的细微差别和限制，这可能会影响某些功能或性能方面。'
- en: Cross-platform compatibility is essential when trying to create a software application
    because it offers the majority of users the ability to test their software and
    use it for their everyday work.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试创建软件应用程序时，跨平台兼容性至关重要，因为它为大多数用户提供测试他们的软件并将其用于日常工作的能力。
- en: In the next section, we will talk about community and support in Node.js.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论Node.js中的社区和支持。
- en: Community and support
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区和支持
- en: A strong and active community is crucial for any programming language, framework,
    or tool. A vibrant community provides developers with resources, guidance, and
    solutions to challenges they encounter during development.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 强大而活跃的社区对于任何编程语言、框架或工具都至关重要。一个充满活力的社区为开发者提供资源、指导以及解决他们在开发过程中遇到挑战的解决方案。
- en: 'Some key aspects of community and support include the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 社区和支持的一些关键方面包括以下内容：
- en: '**Documentation and tutorials**: An engaged community often contributes to
    comprehensive documentation and tutorials, making it easier for developers to
    understand and use technologies effectively.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档和教程**：一个活跃的社区经常贡献全面的文档和教程，使开发者更容易理解和有效使用技术。'
- en: '**Problem-solving**: Community forums, discussion groups, and platforms, such
    as Stack Overflow, allow developers to seek help, share experiences, and find
    solutions to issues they encounter.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题解决**：社区论坛、讨论组和平台，如Stack Overflow，允许开发者寻求帮助、分享经验并找到他们遇到的问题的解决方案。'
- en: '**Open source projects**: A strong community often leads to the creation of
    open source projects, libraries, and tools that enhance development productivity
    and provide additional functionality.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源项目**：一个强大的社区往往会导致开源项目、库和工具的创建，这些工具可以增强开发生产力和提供额外的功能。'
- en: '**Feedback and improvement**: A community provides feedback, identifies bugs,
    and suggests improvements, leading to the continuous enhancement of technologies.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反馈和改进**：社区提供反馈，识别错误，并提出改进建议，从而持续提升技术。'
- en: '**Networking and collaboration**: Engaging with a community provides opportunities
    for networking, collaboration, and learning from others’ experiences.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络和协作**：与社区互动提供了网络、协作和从他人经验中学习的机会。'
- en: '**Staying updated**: A thriving community helps developers stay informed about
    the latest trends, updates, and best practices in the field.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持更新**：一个繁荣的社区帮助开发者了解该领域的最新趋势、更新和最佳实践。'
- en: In conclusion, cross-platform compatibility ensures wider accessibility and
    a consistent user experience, while a supportive community provides the necessary
    resources, solutions, and collaborative opportunities for successful software
    development. Both aspects contribute significantly to the efficiency, effectiveness,
    and overall success of software projects.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，跨平台兼容性确保了更广泛的访问性和一致的用户体验，而一个支持性的社区则提供了必要的资源、解决方案和协作机会，以促进软件开发的成功。这两个方面都对软件项目的效率、效果和整体成功做出了重大贡献。
- en: In the next section, we are going to talk about microservices and serverless
    architectures as well as their integration through APIs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论微服务和无服务器架构，以及它们通过API的集成。
- en: Microservices and serverless architectures and their integration through APIs
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务和无服务器架构以及它们通过API的集成
- en: In this section, we will learn about microservices and serverless architectures
    as well as their integration through APIs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解微服务和无服务器架构，以及它们通过API的集成。
- en: Microservices architecture, serverless architecture, and integration through
    APIs are all fundamental concepts in modern software development. Let’s explore
    each of these concepts and their relationships in the following subsections.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构、无服务器架构以及通过API的集成都是现代软件开发的基本概念。让我们在以下小节中探讨这些概念及其关系。
- en: What is microservices architecture?
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是微服务架构？
- en: '**Microservices architecture** is a software development approach where a complex
    application is broken down into smaller, independent services that can be developed,
    deployed, and maintained separately. Each microservice focuses on a specific business
    capability and communicates with other microservices through well-defined APIs.
    This architectural style offers several benefits but also requires careful design
    and management.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务架构**是一种软件开发方法，其中复杂的应用程序被分解成更小、独立的微服务，这些微服务可以单独开发、部署和维护。每个微服务专注于特定的业务能力，并通过定义良好的API与其他微服务进行通信。这种架构风格提供了许多好处，但也需要仔细的设计和管理。'
- en: 'The advantages of microservices include the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的优势包括以下内容：
- en: '**Scalability**: Microservices can be scaled individually, allowing resources
    to be allocated where needed, leading to efficient resource utilization.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：微服务可以单独扩展，允许资源根据需要分配，从而实现高效的资源利用。'
- en: '**Autonomous teams**: Development teams can work on different microservices
    independently, using the technology stack that suits their service’s requirements.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主团队**：开发团队可以独立地工作在不同的微服务上，使用适合其服务需求的技术栈。'
- en: '**Fault isolation**: Issues in one microservice don’t necessarily affect others,
    improving fault tolerance and system reliability.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离**：一个微服务中的问题并不一定影响其他微服务，这提高了容错性和系统可靠性。'
- en: Microservices offer infinite advantages but the preceding ones are the most
    known, and applying these when you architect a software is a must because this
    helps every developer in your team to code, debug, and deploy faster.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务提供了无限的优势，但前面提到的优势是最为人所知的，在你架构软件时应用这些优势是必须的，因为这有助于你的团队中的每个开发者更快地进行编码、调试和部署。
- en: '*Figure 3**.7* represents a microservices architecture:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.7* 表示一个微服务架构：'
- en: '![Figure 3.7: A microservices architecture](img/B14980_03_07.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7：微服务架构](img/B14980_03_07.jpg)'
- en: 'Figure 3.7: A microservices architecture'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：微服务架构
- en: Microservices architecture allows developers to build applications/systems in
    a better way while organizing the components of the software in a clearer way
    and allowing them to communicate via APIs.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构允许开发者以更好的方式构建应用程序/系统，同时以更清晰的方式组织软件组件，并允许它们通过API进行通信。
- en: In the next section, we will learn more about a serverless architecture.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解更多关于无服务器架构的内容。
- en: What is a serverless architecture?
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是无服务器架构？
- en: A **serverless architecture** is an execution model where cloud providers automatically
    manage the infrastructure and developers focus solely on writing code for specific
    functions. It abstracts server management, reducing operational overhead.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**无服务器架构**是一种执行模型，其中云提供商自动管理基础设施，开发者专注于为特定功能编写代码。它抽象了服务器管理，减少了运营开销。'
- en: 'The advantages of a serverless architecture include the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构的优势包括以下内容：
- en: '**Automatic scaling**: Serverless platforms automatically scale functions based
    on incoming requests, ensuring optimal performance.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：无服务器平台根据传入的请求自动扩展函数，确保最佳性能。'
- en: '**Cost efficiency**: You only pay for the actual usage, making it cost-effective
    for applications with variable workloads.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：你只需为实际使用付费，这使得具有可变工作负载的应用程序具有成本效益。'
- en: '**Simplified deployment**: Developers can deploy and update functions without
    dealing with server provisioning.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化部署**：开发者可以部署和更新函数，而无需处理服务器配置。'
- en: A serverless architecture allows developers to automate the process of managing
    the infrastructure and focus on building the application/system.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构允许开发者自动化管理基础设施的过程，从而专注于构建应用程序/系统。
- en: '*Figure 3**.8* represents a serverless architecture:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.8* 表示一个无服务器架构：'
- en: '![Figure 3.8: A serverless architecture](img/B14980_03_08.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8：无服务器架构](img/B14980_03_08.jpg)'
- en: 'Figure 3.8: A serverless architecture'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：无服务器架构
- en: Serverless architecture is the modern way of managing servers and allows developers
    to focus on writing software without errors.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构是管理服务器的现代方式，允许开发者专注于编写无错误的软件。
- en: With this brief overview of microservices and serverless architectures, let’s
    learn how to integrate them using APIs.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在对微服务和无服务器架构进行简要概述之后，让我们学习如何使用API将它们集成起来。
- en: Integration through APIs
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过API进行集成
- en: In both microservices and serverless architectures, **integration** is crucial
    to enable communication between different components. APIs are the mechanisms
    through which services, functions, or applications interact and exchange data.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务和无服务器架构中，**集成**对于启用不同组件之间的通信至关重要。API是服务、函数或应用程序交互和交换数据的机制。
- en: 'The advantages of integration through APIs include the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过API集成的优势包括以下内容：
- en: '**Loose coupling**: APIs promote loose coupling between components, allowing
    them to evolve independently without affecting others.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松耦合**：API促进组件之间的松耦合，允许它们独立演变而不会影响其他组件。'
- en: '**Modularity**: Integration through APIs supports modular design, enabling
    components to be developed, tested, and maintained separately.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：通过API的集成支持模块化设计，使组件可以单独开发、测试和维护。'
- en: '**Interoperability**: APIs enable different systems, services, or applications
    to work together, even if they are built on different technologies.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：API使不同的系统、服务或应用程序能够协同工作，即使它们建立在不同的技术之上。'
- en: APIs are the better way to communicate between the components of the software.
    Enabling communication via components of the software can lead to better applications/systems
    and services.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: API是软件组件之间通信的更好方式。通过软件组件的组件启用通信可以导致更好的应用程序/系统和服务。
- en: '*Figure 3**.9* depicts integration through APIs:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.9* 描述了通过API进行集成：'
- en: '![Figure 3.9: Integration through APIs](img/B14980_03_09.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9：通过API进行集成](img/B14980_03_09.jpg)'
- en: 'Figure 3.9: Integration through APIs'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：通过API进行集成
- en: In the modern age of computing, APIs are an ingenious invention to make services
    in Node.js interact with one another in a proper manner.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算的现代时代，API是一种巧妙的发明，使Node.js中的服务能够以适当的方式相互交互。
- en: To wrap up this chapter, let’s see how integration works in microservices and
    serverless architectures.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章内容，让我们看看在微服务和无服务器架构中集成是如何工作的。
- en: Integration in microservices and serverless architectures
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务和无服务器架构中的集成
- en: In a microservices architecture, services communicate through APIs, enabling
    them to work together seamlessly while remaining loosely coupled. Meanwhile, in
    a serverless architecture, functions are often triggered by events, and APIs are
    used to pass data between functions and external services.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，服务通过API进行通信，使它们能够无缝协作，同时保持松散耦合。同时，在无服务器架构中，函数通常由事件触发，API用于在函数和外部服务之间传递数据。
- en: Microservices architecture, serverless architecture, and integration through
    APIs are interconnected concepts that enable developers to build scalable, modular,
    and efficient applications. By combining these approaches, developers can create
    flexible and resilient systems that meet the demands of modern software development.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构、无服务器架构以及通过API的集成是相互关联的概念，使开发者能够构建可扩展、模块化和高效的应用程序。通过结合这些方法，开发者可以创建灵活且具有弹性的系统，以满足现代软件开发的需求。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned a lot about Node.js fundamentals as well as
    its building blocks and key concepts. These fundamentals encompass the core concepts
    and features that make Node.js a powerful and versatile runtime environment for
    server-side and network applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于Node.js基础以及其构建块和关键概念的大量知识。这些基础包括使Node.js成为服务器端和网络应用强大且多功能的运行时环境的核心概念和特性。
- en: In summary, Node.js fundamentals revolve around its event-driven, asynchronous
    nature, which facilitates building scalable and high-performance applications.
    Mastering these fundamentals empowers developers to leverage Node.js effectively
    and create a wide range of applications, from web servers to networking tools,
    APIs, and beyond.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Node.js基础围绕其事件驱动、异步的本质，这有助于构建可扩展和高性能的应用程序。掌握这些基础使开发者能够有效地利用Node.js，并创建从网络服务器到网络工具、API等广泛的应用程序。
- en: In the next chapter, we are going to learn about leveraging the JavaScript and
    Node.js ecosystem for microservices development.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何利用JavaScript和Node.js生态系统进行微服务开发。
- en: Quiz time
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What is asynchronous and non-blocking communication?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步和非阻塞通信是什么？
- en: What is event-driven architecture?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是事件驱动架构？
- en: What are the key features of JavaScript ecosystem?
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript生态系统的关键特性有哪些？
