- en: Chapter 2. Simple HTTP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。简单的HTTP
- en: Now that we have understood the basics, we can move on to something a bit more
    useful. In this chapter, we will look at creating an HTTP server and routing requests.
    While working with Node.js you will come across HTTP very often, as server side
    scripting is one of the common uses of Node.js.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了基础知识，我们可以继续学习一些更有用的东西。在本章中，我们将学习如何创建一个HTTP服务器和路由请求。在使用Node.js时，你会经常遇到HTTP，因为服务器端脚本是Node.js的常见用途之一。
- en: Node.js comes with a built in HTTP server; all you need to do is require the
    included `http` package and create a server. You can read more about the package
    at [https://nodejs.org/api/http.html](https://nodejs.org/api/http.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js自带一个内置的HTTP服务器；你所需要做的就是要求包含的`http`包并创建一个服务器。你可以在[https://nodejs.org/api/http.html](https://nodejs.org/api/http.html)上阅读更多关于该包的信息。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create your very own HTTP server that is ready to roll. In this state,
    though, it won''t be listening for any requests. We can start listening on any
    port or socket we wish, as long as it is available, as shown:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个属于你自己的HTTP服务器，准备就绪。然而，在这种状态下，它不会监听任何请求。我们可以在任何可用的端口或套接字上开始监听，如下所示：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s save the preceding code to `server.js` and run it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把前面的代码保存为`server.js`并运行它：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By navigating to `http://localhost:8080/` on your browser you will see that
    the request has been accepted but the server isn't responding; this is because
    we haven't handled the requests yet, we are just listening for them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中导航到`http://localhost:8080/`，你会看到请求已被接受，但服务器没有响应；这是因为我们还没有处理这些请求，我们只是在监听它们。
- en: 'When we create the server we can pass a callback that will be called each time
    there is a request. The parameters passed will be: `request`, `response`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建服务器时，我们可以传递一个回调函数，每次有请求时都会调用它。传递的参数将是：`request`，`response`。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now each time we get a request we can do something:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次收到请求时，我们都可以做一些事情：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s run the script and request the page from the browser; you should see
    `Visitor count: 1` returned to the browser:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行脚本并从浏览器请求页面；你应该看到`访客计数：1`返回到浏览器：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Something weird has happened though: an extra request gets generated. Who is
    visitor 2?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，出现了一些奇怪的事情：多生成了一个请求。谁是访客2？
- en: 'The `http.IncomingMessage` (the parameter `request`) *exposes* a few properties
    that can be used to figure this out. The property we are most interested in right
    now is `url`. We are expecting just `/` to be requested, so let''s add this to
    our message:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.IncomingMessage`（参数`request`）*暴露*了一些属性，可以用来弄清楚这一点。我们现在最感兴趣的属性是`url`。我们期望只有`/`被请求，所以让我们把这个添加到我们的消息中：'
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can run the code and see what''s going on. You will notice that `/favicon.ico`
    has been requested as well. If you are not able to see this then you must be wondering
    what I have been going on about or if your browser has been to `http://localhost:8080`
    recently and has a cached icon already. If this is the case, then you can request
    the icon manually, for example from `http://localhost:8080/favicon.ico`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以运行代码，看看发生了什么。你会注意到`/favicon.ico`也被请求了。如果你没有看到这个，那么你一定在想我在说什么，或者你的浏览器最近是否访问过`http://localhost:8080`并且已经缓存了图标。如果是这种情况，你可以手动请求图标，例如从`http://localhost:8080/favicon.ico`：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also see that if we request any other page we will get the correct path,
    as shown:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，如果我们请求任何其他页面，我们将得到正确的路径，如下所示：
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This isn''t the desired outcome though, for everything but a few routes we
    want to return `404: Not Found`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，这并不是我们想要的结果，除了少数路由之外，我们希望返回`404: Not Found`。'
- en: Introducing routing
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍路由
- en: Routing is essential for almost all Node.js servers. First, we will implement
    our own simple version and then move on to the more complex rounting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 路由对于几乎所有的Node.js服务器都是必不可少的。首先，我们将实现我们自己的简单版本，然后再转向更复杂的路由。
- en: 'We can implement our own simple router using a `switch` statement, such as:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`switch`语句来实现我们自己的简单路由器，例如：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s run the following example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行以下示例：
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see the count increasing with each request; however, it isn''t returned
    each time. If we haven''t defined a case specifically for that route, we return
    `404: Not Found`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以看到每次请求时计数都在增加；然而，它并不是每次都返回。如果我们没有为该路由定义一个特定的情况，我们将返回`404: Not Found`。'
- en: For services that implement a RESTful interface, we want to be able to route
    requests based on the HTTP method as well. The request object exposes this using
    the `method` property.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实现RESTful接口的服务，我们希望能够根据HTTP方法路由请求。请求对象使用`method`属性来暴露这一点。
- en: 'Adding this to the log we can see this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个添加到日志中，我们可以看到这个：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the example and execute your requests, you can use a REST client to invoke
    a POST request:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例并执行你的请求，你可以使用一个REST客户端来调用一个POST请求：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can implement a router to route based on a method, but there are packages
    that do this for us already out there. For now we will use a simple package called
    `router`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现一个路由器来根据方法路由，但是已经有一些包可以为我们做到这一点。现在我们将使用一个叫做`router`的简单包：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we can do some more complex routing of our requests:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以对我们的请求进行一些更复杂的路由：
- en: Let's create a simple RESTful interface.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的RESTful接口。
- en: 'First, we need to create the server, as shown:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建服务器，如下所示：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the server should show that the server is listening.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行服务器应该显示服务器正在监听。
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We want to define a simple interface to read, save, and delete messages. We
    might want to read individual messages as well as a list of messages; this essentially
    defines a set of RESTful endpoints.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义一个简单的接口来读取、保存和删除消息。我们可能还想要读取单个消息以及消息列表；这本质上定义了一组RESTful端点。
- en: REST stands for **R**epresentational **S**tate **T**ransfer; it is a very simple
    and common style used by many HTTP programming interfaces.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: REST代表**R**epresentational **S**tate **T**ransfer；这是许多HTTP编程接口使用的一种非常简单和常见的风格。
- en: 'The endpoints we want to define are:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义的端点是：
- en: '| HTTP Method | Endpoint | Used to |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| HTTP方法 | 端点 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `POST` | `/message` | Create message |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `/message` | 创建消息 |'
- en: '| `GET` | `/message/:id` | Read message |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/message/:id` | 读取消息 |'
- en: '| `DELETE` | `/message/:id` | Delete message |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `/message/:id` | 删除消息 |'
- en: '| `GET` | `/message` | Read multiple messages |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/message` | 读取多条消息 |'
- en: 'For each HTTP method, the router has a method to use for mapping a route. This
    interface is in the form of:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种HTTP方法，路由器都有一种用于映射路由的方法。这个接口的形式是：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can define multiple handlers for each route, but we will come back to that
    in a moment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每个路由定义多个处理程序，但我们稍后会回到这一点。
- en: We will go through each route, create an implementation, and append the code
    to the end of `server.js`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个路由进行实现，并将代码追加到`server.js`的末尾。
- en: 'We want to store our messages somewhere, and in the real world we will store
    them in a database; however, for simplicity we will use an array with a simple
    counter, as shown:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要把我们的消息存储在某个地方，在现实世界中我们会把它们存储在数据库中；然而，为了简单起见，我们将使用一个带有简单计数器的数组，如下所示：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our first route will be used to create messages:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个路由将用于创建消息：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can ensure that this route works by running the server and doing a POST request
    to `http://localhost:8000/message`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行服务器并向`http://localhost:8000/message`发送POST请求来确保这个路由工作。
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can also confirm that the counter is incrementing, as the id increases each
    time we make a request. We will do this to keep a track of the count of messages
    and to give a *unique* id to each message.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以确认计数器正在递增，因为每次我们发出请求时id都会增加。我们将这样做来跟踪消息的数量并为每条消息赋予一个*唯一*的id。
- en: 'Now that this is working, we need to be able to read the message text and to
    do this we need to be able to read the request body that was sent by the client.
    This is where multiple handlers come into play. We could tackle this in two different
    ways, if we were reading the body in only one route or if we were doing some other
    action specific to a route, for instance authorization, we will add an additional
    handler to the route, such as:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个工作了，我们需要能够读取消息文本，为此我们需要能够读取客户端发送的请求正文。这就是多个处理程序发挥作用的地方。我们可以以两种不同的方式来解决这个问题，如果我们只在一个路由中读取正文，或者如果我们正在执行与路由特定的其他操作，例如授权，我们将在路由中添加一个额外的处理程序，例如：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The other way we could do it is by adding a handler for all methods and routes;
    this will be executed first before the route handlers, these are commonly referred
    to as middleware. You can think of handlers as being a chain of functions where
    each one is calling the next, once it is finished with its tasks. With this in
    mind you should note that the order in which you add a handler, both middleware
    and route, will dictate the order of operations. This means that, if we are registering
    a handler that is executed for all methods, we must do this first.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为所有方法和路由添加一个处理程序来完成另一种方式；这将在路由处理程序之前首先执行，这些通常被称为中间件。您可以将处理程序视为一系列函数，其中每个函数都在完成其任务后调用下一个函数。有了这个想法，您应该注意添加处理程序的顺序，无论是中间件还是路由，都将决定操作的顺序。这意味着，如果我们注册一个对所有方法执行的处理程序，我们必须首先执行这个处理程序。
- en: 'The router *exposes* a function to add the following handlers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器*公开*了一个函数来添加以下处理程序：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can add this code just above your implementation of `createMessage`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此代码添加到`createMessage`的实现之前：
- en: 'Once you have done that, run the server and make the following request:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行服务器并进行以下请求：
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can see that the middleware gets executed before the route handler.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件在路由处理程序之前执行。
- en: 'Now that we know how middleware works, we can use them as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了中间件的工作原理，我们可以按照以下方式使用它们：
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Replace our custom middleware with:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换我们的自定义中间件：
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: At this stage, we just want to read all requests as plain text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们只想将所有请求读取为纯文本。
- en: 'Now we can retrieve the message in `createMessage`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`createMessage`中检索消息。
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run `server.js` and `POST` a couple of messages to `http://localhost:8080/message`;
    you will see something similar to these messages:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`server.js`并向`http://localhost:8080/message`发送`POST`请求；你会看到类似以下消息：
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you notice, you will see that a header returns with a new location of the
    message and its id, If we request `http://localhost:8080/message/1`, the content
    from the first message should be returned.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，你会发现一个标题返回了消息的新位置和它的id，如果我们请求`http://localhost:8080/message/1`，应该返回第一条消息的内容。
- en: However, there is something different with this route; it has a key that is
    generated each time a message is created. We don't want to set up a new route
    for each new message as it will be highly inefficient. Instead, we create a route
    that matches a pattern, such as `/message/:id`. This is a common way to define
    a dynamic route in Node.js.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个路由有一些不同之处；每次创建消息时都会生成一个密钥。我们不想为每条新消息设置一个新的路由，因为这样效率非常低。相反，我们创建一个与模式匹配的路由，比如`/message/:id`。这是在Node.js中定义动态路由的常见方式。
- en: The `id` part of the route is called a parameter. We can define as many of these
    as we want in our route and refer them using the request; for example we can have
    a route similar to `/user/:id/profile/:attribute`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的`id`部分称为参数。我们可以在我们的路由中定义任意数量的这些参数，并使用请求引用它们；例如，我们可以有一个类似于`/user/:id/profile/:attribute`的路由。
- en: 'With this in mind we can create our `readMessage` handler, as shown:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，我们可以创建我们的`readMessage`处理程序，如下所示：
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把前面的代码保存在`server.js`文件中并运行服务器：
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can see it's working by sending a few requests to the server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向服务器发送一些请求，我们可以看到它正在工作。
- en: 'Deleting messages is almost the same as reading them; but we don''t return
    anything and null out the original message value:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 删除消息几乎与读取消息相同；但我们不返回任何内容并将原始消息值设置为null：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'First, run the server, then create, read, and delete a message, as shown:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先运行服务器，然后按照以下方式创建、读取和删除消息：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That looks good; however, we have run into a problem. We shouldn''t be able
    to read a message again after deleting it; we will return `404` in both the read
    and delete handlers if we can''t find a message. We can do this by adding the
    following code to our read and delete handlers:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错；然而，我们遇到了一个问题。我们不应该在删除消息后再次读取消息；如果我们找不到消息，我们将在读取和删除处理程序中返回`404`。我们可以通过向我们的读取和删除处理程序添加以下代码来实现这一点：
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把前面的代码保存在`server.js`文件中并运行服务器：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Lastly, we want to be able to read all messages and return a list of all message
    values:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望能够阅读所有消息并返回所有消息值的列表：
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把前面的代码保存在`server.js`文件中并运行服务器：
- en: '[PRE34]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Awesome; now we have a full RESTful interface to read and write messages. But,
    we don't want everyone to be able to read our messages; they should be secure
    and we also want to know who is creating the messages, we will cover this in the
    next chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了；现在我们有了一个完整的RESTful接口来读写消息。但是，我们不希望每个人都能读取我们的消息；它们应该是安全的，我们还想知道谁创建了这些消息，我们将在下一章中介绍这个问题。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now we have everything we need to make some pretty cool services. We can now
    create an HTTP from scratch, route our requests, and create a RESTful interface.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了制作一些非常酷的服务所需的一切。我们现在可以从头开始创建一个HTTP，路由我们的请求，并创建一个RESTful接口。
- en: This will help you with the creation of complete Node.JS services. In the next
    chapter, we will cover authentication.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助您创建完整的Node.JS服务。在下一章中，我们将介绍身份验证。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他使用均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止并违反适用法律。保留所有权利。
