- en: Chapter 1. Getting Started with Zombie.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。使用Zombie.js入门
- en: '"Zombie.js is a lightweight framework for testing client-side JavaScript code
    in a simulated environment. No browser required."'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"Zombie.js是一个轻量级的框架，用于在模拟环境中测试客户端JavaScript代码。无需浏览器。"'
- en: This definition is from the *Zombie.js* documentation at [http://zombie.labnotes.org](http://zombie.labnotes.org)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义来自*Zombie.js*文档，网址为[http://zombie.labnotes.org](http://zombie.labnotes.org)
- en: Automating tests for your web application is crucial to having a quality product,
    but doing it properly can be a painful experience. That is why most of the time
    this part of the project never gets implemented. Developers either limit themselves
    to testing the underlying business logic and control flow in isolation, or, if
    they really want to test the user interface, must resort to complicated setups
    where you somehow connect to real browsers and command them using remote scripts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的Web应用程序自动化测试对于拥有高质量的产品至关重要，但正确执行可能是一种痛苦的经历。这就是为什么大多数时候项目的这一部分从未得到实施。开发人员要么限制自己只测试底层业务逻辑和控制流，要么，如果他们真的想测试用户界面，必须采用复杂的设置，以某种方式连接到真实的浏览器并使用远程脚本对其进行命令。
- en: Zombie.js provides a fast and easy alternative to this scenario, enabling you
    to easily and quickly create automated tests for your web application just by
    using JavaScript.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie.js为这种情景提供了一个快速简便的替代方案，使您可以仅通过使用JavaScript轻松快速地为您的Web应用程序创建自动化测试。
- en: 'The topics covered in this chapter are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题有：
- en: A brief history of software testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件测试的简要历史
- en: Understanding the server-side DOM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解服务器端DOM
- en: How Zombie.js works internally
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zombie.js的内部工作原理
- en: By the end of this chapter, you should understand how Zombie.js works and what
    types of applications can be tested using it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该了解Zombie.js的工作原理以及可以使用它进行测试的应用程序类型。
- en: A brief history of software and user interface testing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件和用户界面测试的简要历史
- en: Software testing is a necessary activity for gathering information about the
    quality of a certain product or a service. In the traditional software development
    cycle, this activity had been delegated to a team whose sole job was to find problems
    in the software. This type of testing would be required if a generic product was
    being sold to a domestic end user or if a company was buying a licensed operating
    system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是收集有关某种产品或服务质量的信息的必要活动。在传统的软件开发周期中，这项活动被委托给一个唯一工作是在软件中找问题的团队。如果正在向国内终端用户销售通用产品，或者公司正在购买许可的操作系统，则需要进行这种类型的测试。
- en: In most custom-built pieces of software, the testing team has the responsibility
    of manually testing the software, but often the client has to do the acceptance
    testing in which he or she has to make sure that the software behaves as expected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数定制软件中，测试团队负责手动测试软件，但通常客户必须进行验收测试，以确保软件的行为符合预期。
- en: Every time someone in these teams finds a new problem in the software, the development
    team has to fix the software and put it back in the testing loop one more time.
    This implies that the cost and time required to deliver a final version of the
    software increases every time a bug is found. Furthermore, the later in the development
    process the problem is found, the more it will impact the final cost of the product.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每当这些团队中的某人在软件中发现新问题时，开发团队就必须修复软件并将其重新放入测试循环中。这意味着每次发现错误时，交付最终版本的软件所需的成本和时间都会增加。此外，问题在开发过程的后期被发现，将会对产品的最终成本产生更大的影响。
- en: Also, the way software is delivered has changed in the last few years; the Web
    has enabled us to make the delivery of software and its upgrade easy, shortening
    the time between when new functionality is developed and when it is put in use.
    But once you have delivered the first version of a product and have a few customers
    using it, you can face a dilemma; fewer updates can mean the product quickly becomes
    obsolete. On the other hand, introducing many changes in the software increases
    the chance of something going wrong and your software becoming faulty, which may
    drive customers away.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，软件交付方式在过去几年发生了变化；网络使我们能够轻松交付软件及其升级，缩短了新功能开发和投入使用之间的时间。但一旦交付了产品的第一个版本并有一些客户在使用，你可能会面临一个困境；较少的更新可能意味着产品很快就会过时。另一方面，对软件进行许多更改增加了出现问题的可能性，使您的软件变得有缺陷，这可能会让客户流失。
- en: There are many versions and iterations over how a development process can mitigate
    the risk of shipping a faulty product and increase the chances of new functionalities
    to be delivered on time, and for the overall product to meet a certain quality
    standard, but all people involved in building software must agree that the sooner
    you catch a bug, the better.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何缓解交付有缺陷产品的风险并增加按时交付新功能的机会，以及整体产品达到一定的质量标准，有许多版本和迭代的开发过程，但是所有参与软件构建的人都必须同意，越早发现错误越好。
- en: This means that you should catch the problems early on, preferably in the development
    cycle. Unfortunately, completely testing the software by hand every time the software
    changes, would be costly. The solution here is to automate the tests in order
    to maximize the test coverage (the percentage of the application code that is
    tested and the possible input variations) and minimize the time it takes to run
    each test. If your tests take just a few seconds to run, you can afford to run
    them every time you make a single change in the code base.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您应该尽早发现问题，最好是在开发周期中。不幸的是，每次软件更改时都通过手工完全测试软件将会很昂贵。解决方案是自动化测试，以最大化测试覆盖率（应用程序代码的百分比和可能的输入变化）并最小化运行每个测试所需的时间。如果您的测试只需几秒钟就能运行，您就可以负担得起每次对代码库进行单个更改时运行测试。
- en: Enter the automation era
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入自动化时代
- en: Test automation has been around for some years, even before the Web was around.
    As soon as **graphical user interfaces** (**GUIs**) started to become mainstream,
    the tools that allowed you to record, build, and run automated tests against a
    GUI started appearing. Since there were many languages and GUI libraries for building
    applications, many tools that covered some of these started showing up. Generally
    they allowed you to record a testing session that you could later recreate automatically.
    In this session, you could automate the pointer to click on things (buttons, checkboxes,
    places on a window, and so on), select values (from a select box, for instance),
    and input keyboard actions and test the results.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化已经存在了一些年头，甚至在Web出现之前就有了。一旦**图形用户界面**（**GUI**）开始变得流行，允许你录制、构建和运行自动化测试的工具开始出现。由于有许多语言和GUI库用于构建应用程序，许多涵盖其中一些的工具开始出现。通常它们允许你录制一个测试会话，然后可以自动重现。在这个会话中，你可以自动化指针点击事物（按钮、复选框、窗口上的位置等），选择值（例如从选择框中选择），输入键盘操作并测试结果。
- en: All of these tools were fairly complex to operate and, worst of all, most of
    them were technology-specific.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具操作起来都相当复杂，而且最糟糕的是，大多数都是特定技术的。
- en: But, if you're building a web-based application that uses HTML and JavaScript,
    you have better alternatives. The most well known of these is likely to be Selenium,
    which allows you to record, change, and run testing scripts against all the major
    browsers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你正在构建一个使用HTML和JavaScript的基于Web的应用程序，你有更好的选择。其中最著名的可能是Selenium，它允许你录制、更改和运行针对所有主要浏览器的测试脚本。
- en: You can run tests using Selenium, but you need at least one browser for Selenium
    to attach itself to, in order to load and run the tests. If you run the tests
    with as many browsers as you possibly can, you will be able to guarantee that
    your application behaves correctly across all of them. But since Selenium plugs
    into a browser and commands it, running all the tests for a considerably complex
    application in as many browsers as possible can take some time, and the last thing
    you want is to not run the tests as often as possible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Selenium来运行测试，但是你至少需要一个浏览器让Selenium附加到其中，以便加载和运行测试。如果你尽可能多地使用浏览器来运行测试，你将能够保证你的应用在所有浏览器上都能正确运行。但是由于Selenium插入到浏览器并控制它，在尽可能多的浏览器上运行相当复杂的应用的所有测试可能需要一些时间，而你最不希望的就是尽可能少地运行测试。
- en: Unit tests versus integration tests
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试与集成测试
- en: Generally you can divide automated tests into two categories, namely unit tests
    and integration tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以将自动化测试分为两类，即单元测试和集成测试。
- en: '**Unit tests**: These tests are where you select a small subset of your application—such
    as a class or a specific object—and test the interface the class or object provides
    to the rest of the application. In this way, you can isolate a specific component
    and make sure it behaves as expected so that other components in the application
    can use it safely.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这些测试是选择应用程序的一个小子集（例如一个类或特定对象）并测试该类或对象向应用程序的其余部分提供的接口。通过这种方式，你可以隔离一个特定的组件，并确保它的行为符合预期，以便应用程序中的其他组件可以安全地使用它。'
- en: '**Integration tests**: These tests are where individual components are combined
    together and tested as a working group. During these tests, you interact and manipulate
    the user interface that in turn interacts with the underlying blocks of your application.
    The kind of testing you do with Zombie.js falls in this category.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这些测试是将单独的组件组合在一起并作为一个工作组进行测试。在这些测试中，你与用户界面进行交互和操作，用户界面反过来与应用程序的基础块进行交互。你使用Zombie.js进行的测试属于这一类。'
- en: What Zombie.js is
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zombie.js是什么
- en: Zombie.js allows you to run these tests without a real web browser. Instead,
    it uses a simulated browser where it stores the HTML code and runs the JavaScript
    you may have in your HTML page. This means that an HTML page doesn't need to be
    displayed, saving precious time that would otherwise be occupied rendering it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie.js允许你在没有真实网络浏览器的情况下运行这些测试。相反，它使用一个模拟的浏览器，在其中存储HTML代码并运行你可能在HTML页面中有的JavaScript。这意味着不需要显示HTML页面，节省了本来会被渲染的宝贵时间。
- en: You can then use Zombie.js to conduct this simulated browser into loading pages
    and, once a page is loaded, doing certain actions and observing the results. And
    you can do all this using JavaScript, never having to switch languages between
    your client code and your test scripts.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用Zombie.js来模拟浏览器加载页面，并且一旦页面加载完成，执行某些操作并观察结果。你可以使用JavaScript来完成所有这些，而不需要在客户端代码和测试脚本之间切换语言。
- en: Understanding the server-side DOM
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解服务器端的DOM
- en: Zombie.js runs on top of Node.js ([http://nodejs.org](http://nodejs.org)), a
    platform where you can easily build networking servers using JavaScript. It runs
    on top of Google's fast V8 JavaScript engine that also powers their Chrome browsers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie.js运行在Node.js（[http://nodejs.org](http://nodejs.org)）之上，这是一个可以轻松使用JavaScript构建网络服务器的平台。它运行在谷歌快速的V8
    JavaScript引擎之上，这也是谷歌Chrome浏览器的动力来源。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, V8 implements the JavaScript ECMA 3 standard and part
    of the ECMA 5 standard. Not all browsers implement all the features of all the
    versions of the JavaScript standards equally. This means that even if your tests
    pass in Zombie.js, it doesn't mean they will pass for all the target browsers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，V8实现了JavaScript ECMA 3标准和部分ECMA 5标准。并非所有浏览器都平等地实现了所有版本的JavaScript标准的所有功能。这意味着即使你的测试在Zombie.js中通过了，也不意味着它们会在所有目标浏览器中通过。
- en: On top of Node.js, there is a third-party module named JSDOM ([https://npmjs.org/package/jsdom](https://npmjs.org/package/jsdom))
    that allows you to parse an HTML document and use an API on top of a representation
    of that document; this allows you to query and manipulate it. The API provided
    is the standard **Document Object Model** (**DOM**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js之上，有一个名为JSDOM的第三方模块（[https://npmjs.org/package/jsdom](https://npmjs.org/package/jsdom)），它允许你解析HTML文档并在该文档的表示之上使用API；这使你能够查询和操作它。提供的API是标准的**文档对象模型**（**DOM**）。
- en: All browsers implement a subset of the DOM standard, which has been dictated
    as a set of recommendations by a working group inside the **World Wide Web Consortium**
    (**W3C**). They have three levels of recommendations. JSDOM implements all three.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浏览器都实现了DOM标准的一个子集，这是由**万维网联盟**（**W3C**）内的一个工作组作为一组推荐来规定的。它们有三个推荐级别。JSDOM实现了所有三个。
- en: Web applications, directly or indirectly (by using tools such as jQuery), use
    this browser-provided DOM API to query and manipulate the document, enabling you
    to create browser applications that have complex behavior. This means that by
    using JSDOM you automatically support any JavaScript libraries that most modern
    browsers support.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序直接或间接（通过使用诸如jQuery之类的工具）使用浏览器提供的DOM API来查询和操作文档，从而使您能够创建具有复杂行为的浏览器应用程序。这意味着通过使用JSDOM，您自动支持大多数现代浏览器支持的任何JavaScript库。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/](http://www.packtpub.com/)support
    and register to have the files e-mailed directly to you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/](http://www.packtpub.com/)support并注册，以便将文件直接发送到您的电子邮件。
- en: Zombie.js is your headless browser
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zombie.js是您的无头浏览器
- en: On top of Node.js and JSDOM lies Zombie.js. Zombie.js provides browser-like
    functionality and an API you can use for testing. For instance, a typical use
    of Zombie.js would be to open a browser, ask for a certain URL to be loaded, fill
    some values on a form, and submit it, and then query the resulting document to
    see if a success message is present.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js和JSDOM之上是Zombie.js。Zombie.js提供类似浏览器的功能和一个可用于测试的API。例如，Zombie.js的典型用法是打开浏览器，请求加载某个URL，填写表单上的一些值并提交，然后查询生成的文档，看看是否有成功消息。
- en: 'To make it more concrete, here is a simple example of what the code for a simple
    Zombie.js test may look like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更具体，这里是一个简单的Zombie.js测试代码的示例：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here you are making typical use of Zombie.js: to load an HTML page containing
    a form; filling that form and submitting it; and then verifying that the result
    is successful.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您正在典型地使用Zombie.js：加载包含表单的HTML页面；填写并提交该表单；然后验证结果是否成功。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Zombie.js may not only be used for testing your web app but also by applications
    that need to behave like browsers, such as HTML scrapers, crawlers, and all sorts
    of HTML bots.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie.js不仅可以用于测试您的Web应用程序，还可以用于需要像浏览器一样行为的应用程序，例如HTML抓取器、爬虫和各种HTML机器人。
- en: If you are going to use Zombie.js to do any of these activities, please be a
    good Web citizen and use it ethically.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用Zombie.js进行任何这些活动，请做一个良好的网络公民，并在道德上使用它。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Creating automated tests is a vital part of the development process of any software
    application. When creating web applications using HTML, JavaScript, and CSS, you
    can use Zombie.js to create a set of tests; these tests load, query, manipulate,
    and provide inputs to any given web page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自动化测试是任何软件应用程序开发过程的重要部分。在使用HTML、JavaScript和CSS创建Web应用程序时，您可以使用Zombie.js创建一组测试；这些测试加载、查询、操作并为任何给定的网页提供输入。
- en: Given that Zombie.js simulates a browser and does not depend on the actual rendering
    of the HTML page, the tests run much faster than they would if you instrumented
    a real browser. Thus it is possible for you to run these tests whenever you make
    any small changes to your application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Zombie.js模拟了浏览器，并且不依赖于HTML页面的实际渲染，因此测试运行速度比如果您使用真实浏览器进行测试要快得多。因此，您可以在对应用程序进行任何小的更改时运行这些测试。
- en: Zombie.js runs on top of Node.js, uses JSDOM to provide a DOM API on top of
    any HTML document, and simulates browser-like functionalities with a simple API
    that you can use to create your tests using JavaScript.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Zombie.js在Node.js之上运行，使用JSDOM在任何HTML文档之上提供DOM API，并使用简单的API模拟类似浏览器的功能，您可以使用JavaScript创建您的测试。
