- en: Popular Node.js Web Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流行的Node.js Web框架
- en: Throughout this book, we've focused exclusively on using Express.js as our web
    framework of choice, primarily because it's one of the most popular web development
    frameworks for Node.js. It has been around for quite a while and is very widely
    used. However, there are a number of alternate frameworks available that I want
    to introduce you to. Some of these frameworks are much more powerful and robust
    than Express.js, while others are right in line with it, or slightly less feature
    packed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们专注于使用Express.js作为我们的首选Web框架，主要是因为它是Node.js最流行的Web开发框架之一。它已经存在了相当长的时间，并且被广泛使用。然而，还有许多可供选择的替代框架，我想向您介绍。其中一些框架比Express.js更强大和稳健，而另一些则与之相当，或者功能稍微少一些。
- en: 'In this chapter, we will take a brief look at the following frameworks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍以下框架：
- en: Koa
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Koa
- en: Meteor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor
- en: Sails
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sails
- en: Flatiron
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flatiron
- en: total.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: total.js
- en: loopback
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: loopback
- en: Hapi
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hapi
- en: At the end, we will use one of these frameworks that is Hapi to build a server
    API. This server API will be consumed by a client-side application build in Angular
    4 in the next chapter. The whole purpose of building this web application is to
    study how can we choose a framework based on a project and how different frameworks
    have different bits and pieces of their own, yet build on the common platform
    of Node.js.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用Hapi中的一个框架来构建一个服务器API。这个服务器API将在下一章中由Angular 4构建的客户端应用程序使用。构建这个Web应用程序的整个目的是研究如何根据项目选择框架，以及不同的框架有不同的特点，但都建立在Node.js的共同平台上。
- en: Koa
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Koa
- en: '**Koa** is a new web framework designed by the same team that created Express.js.
    The goal of Koa is to be smaller, more expressive, and a more robust foundation
    for web applications. T J Holowaychuk, who is the creator of the Express framework,
    is the same person who created Koa, as well, and you can see that it focuses much
    of its capability on generators, which is a feature found in other popular programming
    languages, such as Python, C#, and Ruby. Generators were introduced to JavaScript
    with ECMAScript 6\. Generators prevent the standard callback hell that is so popular
    with the development process in Node.js. Koa has a lightweight architecture, so
    it doesn''t come with any middleware; rather, it leaves the choice of implementing
    certain features to the developers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Koa**是由创建Express.js的同一团队设计的新的Web框架。Koa的目标是更小、更有表现力，以及更坚固的Web应用程序基础。Express框架的创建者T
    J Holowaychuk也是Koa的创建者，你可以看到它将大部分的功能都集中在生成器上，这是其他流行编程语言中的特性，比如Python、C#和Ruby。生成器是在ECMAScript
    6中引入到JavaScript中的。生成器可以防止在Node.js开发过程中常见的回调地狱。Koa具有轻量级的架构，因此它不包含任何中间件；相反，它将实现某些功能的选择留给开发人员。'
- en: More information about Koa and sample implementations can be found on its website,
    as well as at [https://github.com/koajs/koa](https://github.com/koajs/koa).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Koa和示例实现的更多信息可以在其网站以及[https://github.com/koajs/koa](https://github.com/koajs/koa)上找到。
- en: Meteor
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor
- en: '**Meteor** is a simple and complete web framework with the goal of giving developers
    of any skillset the ability to build robust web applications in a fraction of
    the time.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Meteor**是一个简单而完整的Web框架，旨在让任何技能水平的开发人员能够在较短的时间内构建强大的Web应用程序。'
- en: It features a handy CLI tool that you can use to scaffold new projects very
    quickly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有一个方便的CLI工具，可以快速搭建新项目。
- en: Meteor provides some core projects/libraries, such as blaze, DDP, livequery,
    and so on, with a unified build system. This simplifies the overall development
    process and yields an integrated developer experience.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor提供了一些核心项目/库，例如blaze、DDP、livequery等，具有统一的构建系统。这简化了整个开发过程，并提供了一致的开发者体验。
- en: Meteor aims to build real-time applications by providing its two core features,
    the distributed data protocol on the server side and transparent reactive rendering
    on the client side. For more details, visit [http://meteor.com/features](http://meteor.com/features).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor旨在通过在服务器端提供分布式数据协议和在客户端端提供透明的反应式渲染来构建实时应用程序。有关更多详细信息，请访问[http://meteor.com/features](http://meteor.com/features)。
- en: Another notable feature of this framework is its extensive package system, named
    **atmosphere**, which has modules developed for most of the common application
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架的另一个显著特点是其广泛的包系统，名为**atmosphere**，其中包含了大多数常见应用程序的模块
- en: use cases.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用例。
- en: It is quickly gaining traction and becoming increasingly popular every day.
    Currently, its GitHub repo has over 38,000 stars!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在迅速获得关注，并且每天都变得越来越受欢迎。目前，它的GitHub存储库已经拥有超过38,000个星标！
- en: More information about Meteor can be found on its website as well as on its
    official GitHub repo at [https://github.com/meteor/meteor](https://github.com/meteor/meteor).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Meteor的更多信息可以在其网站以及其官方GitHub存储库[https://github.com/meteor/meteor](https://github.com/meteor/meteor)上找到。
- en: Sails
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sails
- en: '**Sails** is another great MVC framework for building web applications using
    Node.js'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sails**是另一个用于使用Node.js构建Web应用程序的出色的MVC框架'
- en: that sometimes compares itself to Ruby on Rails. Unlike Meteor, Sails is database
    agnostic, so it doesn't matter which data store you choose. Sails includes some
    handy scaffolding tools, such as an automatic RESTful API generation. `Socket.io`,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会将自己与Ruby on Rails进行比较。与Meteor不同，Sails是数据库无关的，因此您选择哪种数据存储方式并不重要。Sails包括一些方便的脚手架工具，例如自动生成RESTful
    API的工具。`Socket.io`，
- en: a real-time communication framework for Node.js, is built into Sails, so, including
    real-time functionalities in your application should be a breeze. Sails features
    some nice production-level automation that would typically need to be handled
    by a tool such as Grunt.js or Gulp (this includes the minification and bundling
    of CSS and JavaScript for the frontend). Sails also includes basic security and
    role-based authentication for your app, should you require that level of functionality.
    Sails could be considered a more full-fledged enterprise level framework than
    Express, as it has almost every feature that a popular framework such as Rails
    has. The Sails website is at [http://sailsjs.com](http://sailsjs.com).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于Node.js的实时通信框架，内置在Sails中，因此，在应用程序中包含实时功能应该是轻而易举的。Sails具有一些不错的生产级自动化功能，通常需要由诸如Grunt.js或Gulp之类的工具来处理（包括前端CSS和JavaScript的最小化和捆绑）。Sails还包括应用程序的基本安全性和基于角色的身份验证，如果您需要该级别的功能。与Express相比，Sails可以被认为是一个更全面的企业级框架，因为它几乎具有像Rails这样的流行框架的每个功能。Sails网站位于[http://sailsjs.com](http://sailsjs.com)。
- en: More information about Sails can be found on its website, as well as its official
    GitHub repo at [https://github.com/balderdashy/sails](https://github.com/balderdashy/sails).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Sails的更多信息可以在其网站上找到，以及其官方GitHub存储库[https://github.com/balderdashy/sails](https://github.com/balderdashy/sails)。
- en: Flatiron
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flatiron
- en: '**Flatiron** is yet another Node.js MVC web application framework. What sets
    Flatiron apart from other frameworks is its package-based approach. Since it gives
    the power and freedom to decide how much or how little the framework should include,
    developers can pick and choose the packages they want to work with and include
    in their project. It handles a lot of the basic data management responsibilities
    and CRUD for you by supplying a powerful ODM that takes care of a lot of the heavy
    lifting.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flatiron**是另一个Node.js MVC Web应用程序框架。Flatiron与其他框架的不同之处在于其基于包的方法。由于它赋予了决定框架应该包含多少或多少的权力和自由，开发人员可以挑选并选择他们想要使用并包含在项目中的包。它通过提供一个强大的ODM来处理大部分基本数据管理职责和CRUD，从而为您处理大部分繁重的工作。'
- en: More information about Flatiron can be found on its website, as well as its
    official GitHub repo at [https://github.com/flatiron/flatiron](https://github.com/flatiron/flatiron).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Flatiron的更多信息可以在其网站上找到，以及其官方GitHub存储库[https://github.com/flatiron/flatiron](https://github.com/flatiron/flatiron)。
- en: total.js
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: total.js
- en: Yet another Node.js HMVC framework is total.js. As its name suggests, it provides
    total solutions from the web applications to IOT applications. You name a feature,
    and `total.js` has it; that is the speciality of `total.js`. It supports tons
    of features, such as image processing, workers, generators, static file handling,
    sitemaps, caching mechanisms, SMTP, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个Node.js HMVC框架是total.js。正如其名称所示，它提供了从Web应用程序到IOT应用程序的全面解决方案。你说一个功能，`total.js`都有；这就是`total.js`的特点。它支持大量功能，如图像处理、工作者、生成器、静态文件处理、站点地图、缓存机制、SMTP等等。
- en: The need to use a third-party module is reduced. It has a strong community support
    from the last three years and is again a strong contender that can outpace other
    frameworks in various aspects of functionality development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 减少使用第三方模块的需求。它在过去三年中得到了强大的社区支持，并且再次成为一个可以在功能开发的各个方面超越其他框架的强大竞争者。
- en: 'Follow the link for all the updates: [https://www.totaljs.com/](https://www.totaljs.com/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关注所有更新的链接：[https://www.totaljs.com/](https://www.totaljs.com/)。
- en: LoopBack
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LoopBack
- en: IBM and StrongLoop have architected one the of most powerful modern node frameworks,
    called **LoopBack**. It requires minimal effort to bootstrap an API server. LoopBack
    has a client inside itself called API explorer, which documents the API and also
    provides API testing at same time. It is a strong competitor for the Sails framework,
    with ready to go structure, and is fully configurable when needed. It has hooks
    for **Access control list** (**ACL**s), mobile client SDKs, convention over configuration
    based coding, and of course the IBM backed team that will maintain the project
    for long term support.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: IBM和StrongLoop设计了最强大的现代Node框架之一，名为**LoopBack**。启动API服务器所需的工作量很小。LoopBack内部有一个名为API资源管理器的客户端，它记录API并同时提供API测试。它是Sails框架的强有力竞争者，具有就绪的结构，并且在需要时完全可配置。它具有**访问控制列表**（**ACL**）、移动客户端SDK、基于约定的配置编码，当然还有IBM支持的团队，将长期维护项目。
- en: 'You can get started with LoopBack at the following link: [https://loopback.io/](https://loopback.io/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接开始使用LoopBack：[https://loopback.io/](https://loopback.io/)。
- en: Hapi
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hapi
- en: '**Hapi** is the result of the team behind Walmart''s online mobile website.
    The team that built that website developed a rich set of Node.js utilities and
    libraries that can be found under the **Spumko umbrella**. Considering the tremendous
    amount of traffic Walmart''s website receives on any given day, it''s no wonder
    that the team at Walmart Labs is on the top of their game when it comes to Node.js
    development and best practices. Hapi is the web framework that was born from the
    ashes of real-world trial and error. The Hapi website is at [http://hapijs.com](http://hapijs.com).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hapi**是沃尔玛在线移动网站背后团队的成果。构建该网站的团队开发了一套丰富的Node.js实用程序和库，可以在**Spumko umbrella**下找到。考虑到沃尔玛网站在任何给定日子都会收到大量流量，沃尔玛实验室的团队在涉及Node.js开发和最佳实践时无疑是游刃有余。Hapi是从现实世界的试错中诞生的Web框架。Hapi网站位于[http://hapijs.com](http://hapijs.com)。'
- en: More information about Hapi can be found on its website, as well as its official
    GitHub repo at [https://github.com/spumko/hapi](https://github.com/spumko/hapi).
    In next section, we will implement a set of API's in the Hapi framework.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Hapi的更多信息可以在其网站上找到，以及其官方GitHub存储库[https://github.com/spumko/hapi](https://github.com/spumko/hapi)。在下一节中，我们将在Hapi框架中实现一组API。
- en: Kick starting Hapi.js
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Hapi.js
- en: In previous chapters, we studied and implemented Express framework. The Express
    community denotes it as minimalistic framework, and it thus provides performance
    benefits. For building any application, choosing the right framework is one of
    the most important factors for scalability of an application. In the case of Hapi,
    It has a different routing mechanism which boosts the performance of an application
    with its configurable pattern of code. It's always recommended that developers
    take into consideration all the benefits as well as downsides of any framework
    that it provides versus the functional implementation of application and its long-term
    goals. Let's understand the Hapi framework with the help of a small prototype.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习并实现了Express框架。Express社区将其称为最简档的框架，因此它提供了性能优势。对于构建任何应用程序，选择正确的框架是应用程序可扩展性的最重要因素之一。在Hapi的情况下，它具有不同的路由机制，通过其可配置的代码模式提高了应用程序的性能。开发人员始终建议考虑框架提供的所有优势和劣势，以及应用程序的功能实现和长期目标。让我们通过一个小型原型来了解Hapi框架。
- en: The following steps give an incremental learning the experience of implementation
    of the Hapi framework using a phone book example. It is recommended to code as
    you read for better learning.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤提供了使用电话簿示例逐步学习Hapi框架实现的经验。建议在阅读时进行编码以获得更好的学习效果。
- en: Scaffolding the Hapi app
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建Hapi应用程序
- en: 'Create a directory phone book-API and navigate to that directory by ``cd phonebook-api``.
    Use `npm init` to initialize a node project and complete the questionnaire provided
    by `npm`. Install the Hapi framework using the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为phone book-API的目录，并通过``cd phonebook-api``导航到该目录。使用`npm init`初始化一个node项目，并完成`npm`提供的问卷调查。使用以下命令安装Hapi框架：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up a server
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置服务器
- en: 'The first file to be written must be a `server` file, so let''s create a ``server.js``.
    The minimal code required to kick-start a `server` with the `hapi` framework is
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要编写的文件必须是一个`server`文件，所以让我们创建一个``server.js``。使用`hapi`框架启动`server`所需的最小代码如下：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After reviewing the preceding code, we can observe that `hapi` starts its server
    by first configuring all the required data. It takes the host and port as input,
    and then finally starts the server. If we compare it with express, express needs
    a callback as an input first, and then the listening part.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了前面的代码之后，我们可以观察到`hapi`通过首先配置所有必需的数据来启动其服务器。它以主机和端口作为输入，然后最终启动服务器。如果我们将其与express进行比较，express首先需要一个回调作为输入，然后才是监听部分。
- en: Creating APIs
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API
- en: 'The next important step is creating routes. It is always recommended to follow
    modularity whenever we implement routes in any framework for the longtime maintainability
    of code. That being said, let''s create a `routes.js` file. As we are not going
    to use any database such as MongoDB or MySQL, let''s create a `json` file called
    `phonebook.json` for a supportive data source. Let''s create the following data
    in a `json` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的步骤是创建路由。在任何框架中实现路由时，始终建议遵循模块化，以便长期维护代码。话虽如此，让我们创建一个`routes.js`文件。由于我们不打算使用诸如MongoDB或MySQL之类的数据库，让我们为支持数据源创建一个名为`phonebook.json`的`json`文件。让我们在`json`文件中创建以下数据：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The structure of our API directory is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API目录结构如下：
- en: '![](img/2d90008a-d7e7-4d24-920d-5f60e0a7a65d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d90008a-d7e7-4d24-920d-5f60e0a7a65d.png)'
- en: Creating a configuration-based architecture
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基于配置的架构
- en: 'The configuration code pattern of `hapi` is followed everywhere, even for creating
    routes. Let''s understand it by adding a simple `GET` method and its handler in
    the following snippet:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`hapi`的配置代码模式随处可见，甚至用于创建路由。让我们通过在下面的片段中添加一个简单的`GET`方法和它的处理程序来理解它：'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding snippet shows the minimal configuration required to create a route.
    It consists of the `request` method, which can be `'GET'`, `'POST'`, and so on;
    the URL path for URL navigation purposes; and a `config` property that consists
    of the request handler. This handler is used to write all sort of business logic
    a on request received.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的片段显示了创建路由所需的最小配置。它包括`request`方法，可以是`'GET'`、`'POST'`等；用于URL导航目的的URL路径；以及包含请求处理程序的`config`属性。此处理程序用于在收到请求时编写各种业务逻辑。
- en: 'Now, include the route file inside `server.js` and assign the routes to the
    `hapi` server before the server starts. So to wrap up, we have the following code
    in `server.js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`server.js`中包含路由文件，并在服务器启动之前将路由分配给`hapi`服务器。因此，总结一下，在`server.js`中有以下代码：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s hit the route in the browser and view the response:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中访问路由并查看响应：
- en: '![](img/03d443fd-2f95-4ea8-9e34-0fbe3fdf1d23.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03d443fd-2f95-4ea8-9e34-0fbe3fdf1d23.jpeg)'
- en: 'Similarly, we can add, update, and delete the entries from the phone book.
    Our `routes.js` will look as follows :'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以添加、更新和删除电话簿中的条目。我们的`routes.js`将如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need to use a browser extension to test the preceding REST APIs. POSTMAN
    is one of popular the extensions for REST API calls. Refer chapter 8 to learn
    in details about POSTMAN.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用浏览器扩展来测试前面的REST API。POSTMAN是REST API调用的流行扩展之一。请参考第8章，了解POSTMAN的详细信息。
- en: Woot! Our server APIs are ready. In the next chapter, we will consume these
    API calls by creating a frontend application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们的服务器API已经准备就绪。在下一章中，我们将通过创建一个前端应用程序来使用这些API调用。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Even though we used Express.js exclusively throughout this book, there are many
    other options available when creating web applications using Node.js. We examined
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在本书中专门使用了Express.js，但在使用Node.js创建Web应用程序时还有许多其他选项可供选择。我们研究了
- en: a few of those options in this chapter, including Meteor, Sails, Hapi, Koa,
    and Flatiron. Each framework features its own strengths and weaknesses and its
    own unique approach to the standard functionality that a web application requires.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了其中一些选项，包括Meteor、Sails、Hapi、Koa和Flatiron。每个框架都有其自身的优势和劣势，以及对Web应用程序所需的标准功能的独特方法。
- en: That's all, folks! I hope all the different facets of building a web app using
    Node.js and MongoDB brought the readers to a progressive way of learning and developing
    an awesome idea. Well, this is just the start. I would recommend that you follow
    the developer communities of all the technologies or libraries that you are going
    to use in your own app.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，伙计们！我希望使用Node.js和MongoDB构建Web应用程序的不同方面能够带领读者以渐进的方式学习和开发一个令人惊叹的想法。嗯，这只是个开始。我建议您关注您自己应用程序中将要使用的所有技术或库的开发者社区。
- en: The beauty of web development with Node.js is that there's no shortage of opinions
    on how to accomplish a single task. MVC frameworks are no exception, and you can
    see from this chapter that there are a lot of really robust and feature-packed
    frameworks to choose from.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node.js进行Web开发的美妙之处在于如何完成单个任务没有意见的短缺。MVC框架也不例外，从本章可以看出，有很多功能强大且功能丰富的框架可供选择。
