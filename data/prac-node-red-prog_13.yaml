- en: '*Chapter 10*: Handling Sensor Data on the Raspberry Pi'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：在树莓派上处理传感器数据'
- en: In this chapter, we will learn how the processing of data from an edge device
    takes place in the **Internet of Things** (**IoT**) using Node-RED. We will not
    only cover data handling but also sending data to a server application from an
    edge device. For the device, I would like to use a Raspberry Pi. After completing
    the tutorials in this chapter, you will be able to handle sensor data acquired
    by edge devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习在**物联网**（**IoT**）中使用Node-RED处理来自边缘设备的数据的处理过程。我们不仅将涵盖数据处理，还将从边缘设备向服务器应用程序发送数据。对于设备，我想使用树莓派。完成本章中的教程后，你将能够处理边缘设备获取的传感器数据。
- en: 'Let''s get started with the following four topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下四个主题开始：
- en: Getting sensor data from the sensor module on the Raspberry Pi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从树莓派上的传感器模块获取传感器数据
- en: Learning the MQTT protocol and using an MQTT node
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习MQTT协议并使用MQTT节点
- en: Connecting to an MQTT broker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到MQTT代理
- en: Checking the status of data on localhost
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查本地主机上数据的状态
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress in this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中取得进展，你需要以下内容：
- en: A Raspberry Pi, available from [https://www.raspberrypi.org/](https://www.raspberrypi.org/
    )
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://www.raspberrypi.org/](https://www.raspberrypi.org/)获取的树莓派
- en: The code used in this chapter can be found in `Chapter10` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)的`Chapter10`文件夹中找到
- en: Getting sensor data from the sensor module on the Raspberry Pi
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从树莓派上的传感器模块获取传感器数据
- en: In this chapter, we will learn how to handle the data acquired from the sensor
    device with Node-RED on the Raspberry Pi and publish the data to an MQTT broker.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Node-RED在树莓派上处理从传感器设备获取的数据，并将数据发布到MQTT代理。
- en: For the sensor device, we will use the temperature/humidity sensor used in [*Chapter
    5*](B16353_05_ePub_AM.xhtml#_idTextAnchor062), *Implementing Node-RED Locally*.
    See each step in [*Chapter 5*](B16353_05_ePub_AM.xhtml#_idTextAnchor062), *Implementing
    Node-RED Locally*, for details about connectivity and how to enable the sensor
    device on the Raspberry Pi.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传感器设备，我们将使用在[*第5章*](B16353_05_ePub_AM.xhtml#_idTextAnchor062)中使用的温湿度传感器，*本地实现Node-RED*。有关连接和如何在树莓派上启用传感器设备的详细信息，请参阅[*第5章*](B16353_05_ePub_AM.xhtml#_idTextAnchor062)中的每个步骤，*本地实现Node-RED*。
- en: 'Prepare to connect your temperature/humidity sensor to your Raspberry Pi. This
    is the edge device. You have already purchased and configured your edge device
    in [*Chapter 5*](B16353_05_ePub_AM.xhtml#_idTextAnchor062), *Implementing Node-RED
    Locally*. Light sensors are not used in this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 准备将你的温湿度传感器连接到你的树莓派。这就是边缘设备。你已经在[*第5章*](B16353_05_ePub_AM.xhtml#_idTextAnchor062)中购买并配置了你的边缘设备，*本地实现Node-RED*。本章不使用光传感器：
- en: 'Edge device: **Raspberry Pi 3** (https://www.raspberrypi.org/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘设备：**树莓派3** (https://www.raspberrypi.org/)
- en: 'Sensor module: **Grove Base HAT for Raspberry Pi, Grove Temperature and Humidity
    Sensor (SHT31)** ([https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html](https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html),
    [https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html](https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html))'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器模块：**Grove树莓派底板，Grove温湿度传感器（SHT31）** ([https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html](https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html),
    [https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html](https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html))
- en: Preparing the devices
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备设备
- en: 'Please prepare the device to gather the temperature/humidity sensor data on
    your Raspberry Pi as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请准备好设备，以收集树莓派上的温湿度传感器数据，步骤如下：
- en: Connect the sensor module to your Raspberry Pi.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将传感器模块连接到你的树莓派。
- en: 'When all the devices are ready, connect the Raspberry Pi and Grove Base HAT,
    and connect the Grove Temperature and Humidity Sensor (SHT31) to the I2C port
    (any I2C port is OK):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有设备准备就绪时，连接树莓派和Grove树莓派底板，并将Grove温湿度传感器（SHT31）连接到I2C端口（任何I2C端口都可以）：
- en: '![Figure 10.1 – Connecting the temperature/humidity sensor to your Raspberry
    Pi'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – 连接温湿度传感器到你的树莓派'
- en: '](img/Figure_10.1_B16353.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B16353.jpg)'
- en: Figure 10.1 – Connecting the temperature/humidity sensor to your Raspberry Pi
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 连接温湿度传感器到你的树莓派
- en: Connect your Raspberry Pi to the internet.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的树莓派连接到互联网。
- en: 'We will go on to connect to the server side from the Raspberry Pi, so please
    ensure that you are connected to the internet via Wi-Fi. Of course, you can also
    access the internet by connecting to a modem using a LAN cable. The Raspberry
    Pi has a LAN cable port by default, so all you have to do is plug in the LAN cable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续从树莓派连接到服务器端，所以请确保通过Wi-Fi连接到互联网。当然，你也可以通过使用LAN电缆连接到调制解调器来访问互联网。树莓派默认具有LAN电缆端口，所以你只需插入LAN电缆即可：
- en: '![Figure 10.2 – Connecting your Raspberry Pi to the internet'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2 – 将你的树莓派连接到互联网'
- en: '](img/Figure_10.2_B16353.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B16353.jpg)'
- en: Figure 10.2 – Connecting your Raspberry Pi to the internet
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 将你的树莓派连接到互联网
- en: And that's all we need to proceed. Next, we will see how to get the data from
    the sensor node.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们继续所需的全部内容。接下来，我们将看到如何从传感器节点获取数据。
- en: Checking Node-RED to get data from the sensor device
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查Node-RED以从传感器设备获取数据
- en: As you have already learned in [*Chapter 5*](B16353_05_ePub_AM.xhtml#_idTextAnchor062),
    *Implementing Node-RED Locally*, it should be easy to get the data from the Grove
    Base temperature/humidity sensor module.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[*第5章*](B16353_05_ePub_AM.xhtml#_idTextAnchor062)中已经学到的，*本地实现Node-RED*，从Grove树莓派温湿度传感器模块获取数据应该很容易。
- en: 'The following are the steps to get the data from the sensor node:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从传感器节点获取数据的步骤：
- en: Make a simple flow to get the data. Select three nodes, that is, an **inject**
    node, a **grove-temperature-humidity-sensor-sht3x** node, and a **debug** node,
    from the palette on the left side of the flow editor and drag and drop them into
    the workspace to place them.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的流程来获取数据。从流程编辑器左侧的调色板中选择三个节点，即一个**inject**节点，一个**grove-temperature-humidity-sensor-sht3x**节点和一个**debug**节点，并将它们拖放到工作区中放置。
- en: After placing them, please wire them sequentially as shown in the following
    diagram:![Figure 10.3 – Placing and wiring nodes
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置它们后，请按照以下图示将它们依次连接：![图10.3 - 放置和连接节点
- en: '](img/Figure_10.3_B16353.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B16353.jpg)'
- en: Figure 10.3 – Placing and wiring nodes
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 - 放置和连接节点
- en: Check the settings of the **grove-temperature-humidity-sensor-sht3x** node.
    To check the settings, double-click the **grove-temperature-humidity-sensor-sht3x**
    node to bring up the settings screen.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**grove-temperature-humidity-sensor-sht3x**节点的设置。要检查设置，请双击**grove-temperature-humidity-sensor-sht3x**节点以打开设置屏幕。
- en: There are no values or items to be set on this settings screen. You just need
    to make sure that the port is indicated as **I2C**. After checking, close the
    settings screen.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此设置屏幕上没有要设置的值或项目。您只需确保端口显示为**I2C**。检查后，关闭设置屏幕。
- en: 'Make sure you see a blue square icon and the text **I2C** underneath the **grove-temperature-humidity-sensor-sht3x**
    node. This indicates that the Grove Base temperature/humidity sensor module is
    successfully connected to your Raspberry Pi. If the color of this icon turns red,
    it means that the module is not properly connected to the **I2C** port, so please
    reconnect the hardware correctly:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您看到一个蓝色的方形图标和**grove-temperature-humidity-sensor-sht3x**节点下方的**I2C**文本。这表示Grove
    Base温度/湿度传感器模块已成功连接到您的树莓派。如果此图标的颜色变为红色，则表示模块未正确连接到**I2C**端口，请重新正确连接硬件：
- en: '![Figure 10.4 – Checking the port is set as I2C'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4 - 检查端口是否设置为I2C'
- en: '](img/Figure_10.4_B16353.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B16353.jpg)'
- en: Figure 10.4 – Checking the port is set as I2C
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 - 检查端口是否设置为I2C
- en: Execute the flow and check the results by clicking the **Deploy** button in
    the upper right corner of the flow editor to complete the deployment.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行流程并通过单击流程编辑器右上角的**部署**按钮来检查结果以完成部署。
- en: 'Once the deployment is successful, click the switch on the **inject** node
    to start the flow:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署成功后，单击**inject**节点上的开关以启动流程：
- en: '![Figure 10.5 – Deploy and click the button on the inject node'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 - 部署并单击注入节点上的按钮'
- en: '](img/Figure_10.5_B16353.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B16353.jpg)'
- en: Figure 10.5 – Deploy and click the button on the inject node
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 - 部署并单击注入节点上的按钮
- en: 'It has worked successfully if you can confirm that the values of the sensor
    data collected are displayed in JSON in the **debug** tab of the flow editor.
    This way, data can be obtained from the sensor module:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以确认在流程编辑器的**debug**选项卡中以JSON格式显示了收集到的传感器数据的值，那么它已成功工作。这样，可以从传感器模块获取数据：
- en: '![Figure 10.6 – Making sure that the data is visible from the sensor module'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 - 确保从传感器模块中可见数据'
- en: '](img/Figure_10.6_B16353.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B16353.jpg)'
- en: Figure 10.6 – Making sure that the data is visible from the sensor module
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 - 确保从传感器模块中可见数据
- en: Now we know that Node-RED on the Raspberry Pi can handle sensor data. Let's
    learn the process of publishing this data to an MQTT broker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道树莓派上的Node-RED可以处理传感器数据。让我们学习将这些数据发布到MQTT代理的过程。
- en: Learning the MQTT protocol and using an MQTT node
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习MQTT协议并使用MQTT节点
- en: Now that the sensor data has been successfully acquired, let's send that data
    to the server.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在传感器数据已成功获取，让我们将数据发送到服务器。
- en: We usually select a protocol suitable for the content being transmitted; for
    example, when exchanging mail, we use SMTP. Currently, HTTP is used as a general-purpose
    protocol on the internet.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常选择适合传输内容的协议；例如，在交换邮件时，我们使用SMTP。目前，HTTP被用作互联网上的通用协议。
- en: For example, HTTP is used for various communications on the internet, such as
    displaying web pages in a browser and exchanging data between servers. HTTP is
    a protocol created for exchanging content on the internet. In many cases, network
    devices such as routers and firewalls on the internet are set to allow HTTP communication
    to be used for various purposes, and HTTP is compatible with the internet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，HTTP用于互联网上的各种通信，如在浏览器中显示网页和在服务器之间交换数据。HTTP是为在互联网上交换内容而创建的协议。在许多情况下，互联网上的网络设备，如路由器和防火墙，被设置为允许使用HTTP通信以用于各种目的，并且HTTP与互联网兼容。
- en: In the IoT world, MQTT is often used as a general protocol instead of HTTP.
    This means that the MQTT protocol is the standard of the IoT world, just as the
    HTTP protocol is the standard of the web world.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网世界中，MQTT通常用作HTTP的通用协议。这意味着MQTT协议是物联网世界的标准，就像HTTP协议是网络世界的标准一样。
- en: '**MQTT** (short for **MQ Telemetry Transport**) is a communication protocol
    that was first created by IBM and Eurotech in 1999\. In 2013, standardization
    of this protocol was promoted by an international standardization organization
    called OASIS.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**MQTT**（**MQ Telemetry Transport**的缩写）是由IBM和Eurotech于1999年首次创建的通信协议。2013年，这一协议的标准化由一个名为OASIS的国际标准化组织推动。'
- en: MQTT is intended to be used over TCP/IP. In short, it specializes in **machine-to-machine**
    (**M2M**) communication over the internet, and communication between machines
    and other resources on the internet. The *machines* referred to here are microcomputer
    boards, such as PCs and small Linux boards (including the Raspberry Pi).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT旨在在TCP/IP上使用。简而言之，它专门用于互联网上的**机器对机器**（**M2M**）通信，以及机器与互联网上的其他资源之间的通信。这里所指的*机器*是微型计算机板，如个人电脑和小型Linux板（包括树莓派）。
- en: 'M2M has evolved over the years since 1999, the word **IoT** has appeared, and
    MQTT is now very often adopted when conventional machines communicate via the
    internet. Therefore, MQTT is the best protocol for IoT. One of the reasons that
    MQTT is important is that it offers a lightweight protocol to handle data in narrowband
    networks and on low-performance devices:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 自1999年以来，M2M已经发展，出现了**IoT**这个词，当传统机器通过互联网进行通信时，现在很常用MQTT。因此，MQTT是物联网的最佳协议。MQTT重要的原因之一是它提供了一种轻量级协议来处理窄带网络和低性能设备上的数据：
- en: '![Figure 10.7 – Conceptual diagram of typical M2M communication'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 典型M2M通信的概念图'
- en: '](img/Figure_10.7_B16353.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.7_B16353.jpg)'
- en: Figure 10.7 – Conceptual diagram of typical M2M communication
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 典型M2M通信的概念图
- en: From the preceding information, you can see why the MQTT protocol is used in
    IoT. Now let's think about how Node-RED can transmit data using the MQTT protocol.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的信息中，您可以看到为什么在物联网中使用MQTT协议。现在让我们思考Node-RED如何使用MQTT协议传输数据。
- en: 'Node-RED provides the following two MQTT related nodes by default:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED默认提供以下两个与MQTT相关的节点：
- en: '**mqtt in**: The **mqtt in** node connects to the MQTT broker and subscribes
    to messages on the specified topic.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mqtt in**：**mqtt in**节点连接到MQTT代理并订阅指定主题上的消息。'
- en: '**mqtt out**: The **mqtt out** node connects to the MQTT broker and publishes
    messages:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mqtt out**：**mqtt out**节点连接到MQTT代理并发布消息：'
- en: '![Figure 10.8 – An mqtt in node and mqtt out node'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.8 – mqtt in节点和mqtt out节点'
- en: '](img/Figure_10.8_B16353.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.8_B16353.jpg)'
- en: Figure 10.8 – An mqtt in node and mqtt out node
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – mqtt in节点和mqtt out节点
- en: You can find these under the **network** category on the side panel of the Node-RED
    flow editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Node-RED流编辑器的侧边栏的**网络**类别下找到这些。
- en: If you want to set the server address and topic for the MQTT broker and use
    publish and subscribe, it is fine to use these two nodes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为MQTT代理设置服务器地址和主题，并使用发布和订阅，可以使用这两个节点。
- en: Let's now try to send the sensor data to a local MQTT broker.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试将传感器数据发送到本地MQTT代理。
- en: Connecting to an MQTT broker
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到MQTT代理
- en: Now, let's send the sensor data on the Raspberry Pi to an MQTT broker via Node-RED.
    Here we will use the popular MQTT broker **Mosquitto**. In this chapter, we will
    go as far as preparing the device to send the device data to the server. The task
    of actually receiving and processing data on the server side will be demonstrated
    in a hands-on example in the next chapter. Therefore, here we will use Mosquitto
    just for checking the data transmission is performed correctly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过Node-RED将树莓派上的传感器数据发送到MQTT代理。在这里，我们将使用流行的MQTT代理**Mosquitto**。在本章中，我们将准备设备以将设备数据发送到服务器。实际在服务器端接收和处理数据的任务将在下一章的实际示例中进行演示。因此，在这里，我们将使用Mosquitto仅用于检查数据传输是否正确执行。
- en: Mosquitto
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mosquitto
- en: Mosquitto is released under the open source BSD license and provides broker
    functionality for MQTT V3.1/v3.1.1.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Mosquitto是根据开源BSD许可发布的，并为MQTT V3.1/v3.1.1提供代理功能。
- en: It works on major Linux distributions such as RedHat Enterprise Linux, CentOS,
    Ubuntu, and OpenSUSE, as well as Windows. It also works on small computers such
    as the Raspberry Pi.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它适用于主要的Linux发行版，如RedHat Enterprise Linux，CentOS，Ubuntu和OpenSUSE，以及Windows。它也适用于树莓派等小型计算机。
- en: In this chapter, we will verify that the sensor data of the edge device can
    be sent via an MQTT broker to the localhost of the Raspberry Pi. This is very
    easy. I am confident that if we can send the data to MQTT broker in this way,
    we will be able to see the sensor data of the edge device immediately on the server
    side.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将验证边缘设备的传感器数据是否可以通过MQTT代理发送到树莓派的本地主机。这非常容易。我相信，如果我们可以以这种方式将数据发送到MQTT代理，我们将能够立即在服务器端看到边缘设备的传感器数据。
- en: 'The following is a general configuration diagram showing an example use of
    Mosquitto:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通用配置图，显示了Mosquitto的示例用法：
- en: '![Figure 10.9 – Mosquitto overview'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.9 – Mosquitto概述'
- en: '](img/Figure_10.9_B16353.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.9_B16353.jpg)'
- en: Figure 10.9 – Mosquitto overview
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – Mosquitto概述
- en: In this chapter, we will implement the Node-RED flow from the edge device to
    send data to Mosquitto on your Raspberry Pi. Data visualization using IBM Cloud
    will be implemented in the next chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现从边缘设备到Mosquitto发送数据的Node-RED流程。下一章将实现使用IBM Cloud进行数据可视化。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Mosquitto is a very important and useful tool and is a platform for implementing
    the IoT mechanism in Node-RED. Developing a deeper understanding of Mosquitto
    will help you to make Node-RED more widely available.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Mosquitto是一个非常重要和有用的工具，是在Node-RED中实现物联网机制的平台。深入了解Mosquitto将帮助您使Node-RED更广泛地可用。
- en: You can learn more about the Mosquitto at [https://mosquitto.org/](https://mosquitto.org/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://mosquitto.org/](https://mosquitto.org/)了解更多关于Mosquitto的信息。
- en: Now, let's prepare Mosquitto on your Raspberry Pi.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在您的树莓派上准备Mosquitto。
- en: Preparing Mosquitto on your Raspberry Pi
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备您的树莓派上的Mosquitto
- en: 'In this section, we will enable Mosquitto so that it can run on the Raspberry
    Pi. The flow is simple. Just install Mosquitto and start the service. Follow these
    steps on your Raspberry Pi to prepare:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将启用Mosquitto，以便它可以在树莓派上运行。流程很简单。只需安装Mosquitto并启动服务。请按照以下步骤在您的树莓派上准备：
- en: 'To install Mosquitto, execute this command on the terminal:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Mosquitto，请在终端上执行以下命令：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To start the Mosquitto service, execute this command on the terminal:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动Mosquitto服务，请在终端上执行以下命令：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After starting, you can check the status of the Mosquitto service with the
    following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，您可以使用以下命令检查Mosquitto服务的状态：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is how it looks in the terminal:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端上看起来是这样的：
- en: '![Figure 10.10 – Mosquitto running status'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.10 – Mosquitto运行状态'
- en: '](img/Figure_10.10_B16353.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B16353.jpg)'
- en: Figure 10.10 – Mosquitto running status
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – Mosquitto运行状态
- en: 'To install the Mosquitto client tool, execute this command on the terminal:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Mosquitto客户端工具，请在终端上执行以下命令：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To check the publish and subscribe functionality, run `packt` as the **topic**:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查发布和订阅功能，请运行`packt`作为**主题**：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is how it looks in the terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中的显示如下：
- en: '![Figure 10.11 – Start subscribing to Mosquitto with the topic packt'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.11 - 开始订阅Mosquitto与主题packt'
- en: '](img/Figure_10.11_B16353.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B16353.jpg)'
- en: Figure 10.11 – Start subscribing to Mosquitto with the topic packt
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 - 开始订阅Mosquitto与主题packt
- en: 'Publish some text to this broker with the following command on another terminal:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用另一个终端发送一些文本到这个代理的以下命令：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is how it looks in the terminal:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中的显示如下：
- en: '![Figure 10.12 – Publishing a message to Mosquitto with the topic packt'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.12 - 使用主题packt发布消息到Mosquitto'
- en: '](img/Figure_10.12_B16353.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.12_B16353.jpg)'
- en: Figure 10.12 – Publishing a message to Mosquitto with the topic packt
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12 - 使用主题packt发布消息到Mosquitto
- en: You will see the message you published on the terminal subscribing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端订阅到您发布的消息。
- en: You are now ready to use Mosquitto. Next, we will implement Pub/Sub on Node-RED
    on your Raspberry Pi.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用Mosquitto了。接下来，我们将在您的树莓派上的Node-RED上实现发布/订阅。
- en: Making a flow to get sensor data and send it to the MQTT broker
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作一个流程来获取传感器数据并将其发送到MQTT代理
- en: 'Now, launch the Node-RED flow editor on your Raspberry Pi and follow these
    steps to create a flow:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的树莓派上启动Node-RED流编辑器，并按照以下步骤创建一个流程：
- en: Place the **mqtt out** node after the **grove-temperature-humidity-sensor-sht3x**
    node on the flow that you created in the previous *Checking Node-RED can get the
    data from the sensor device* section, and place the **mqtt in** node and **debug**
    node separate from **mqtt out flow**. Please wire them as shown in the following
    figure:![Figure 10.13 – Placing these nodes and wiring them
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前*检查Node-RED是否可以从传感器设备获取数据*部分创建的流程中，在**grove-temperature-humidity-sensor-sht3x**节点之后放置**mqtt
    out**节点，并将**mqtt in**节点和**debug**节点与**mqtt out流**分开。请按照以下图示连接它们：![图10.13 - 放置这些节点并连接它们
- en: '](img/Figure_10.13_B16353.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.13_B16353.jpg)'
- en: Figure 10.13 – Placing these nodes and wiring them
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13 - 放置这些节点并连接它们
- en: Edit the `localhost`
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`localhost`
- en: 'Port: `1883`'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口：`1883`
- en: '*It is possible to edit the `packt`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*可以编辑`packt`'
- en: '`1`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1`'
- en: '`true`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`true`'
- en: 'This is how the settings window should look:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 设置窗口应该是这样的：
- en: '![Figure 10.14 – Setting the properties of the mqtt out node'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.14 - 设置mqtt out节点的属性'
- en: '](img/Figure_10.14_B16353.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.14_B16353.jpg)'
- en: Figure 10.14 – Setting the properties of the mqtt out node
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 - 设置mqtt out节点的属性
- en: Edit the `localhost`
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`localhost`
- en: '`1883`'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1883`'
- en: '*It is possible to edit the `packt`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*可以编辑`packt`'
- en: '`1`'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1`'
- en: '**Output**: **auto-detect (string or buffer)**'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输出**：**自动检测（字符串或缓冲区）**'
- en: 'This is how the settings window should look:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 设置窗口应该是这样的：
- en: '![Figure 10.15 – Setting the properties of the mqtt in node'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.15 - 设置mqtt in节点的属性'
- en: '](img/Figure_10.15_B16353.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.15_B16353.jpg)'
- en: Figure 10.15 – Setting the properties of the mqtt in node
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 - 设置mqtt in节点的属性
- en: And with that, we have completed making the flow to subscribe to and publish
    the topic `packt` via the **Mosquitto** MQTT broker on your Raspberry Pi localhost.
    Next, we will check the status of our data on localhost.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经完成了通过**Mosquitto** MQTT代理在您的树莓派localhost上订阅和发布主题`packt`的流程。接下来，我们将检查我们在localhost上的数据状态。
- en: Checking the status of data on the localhost
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查localhost上的数据状态
- en: 'In this section, we will check whether the sensor data sent from your Raspberry
    Pi can be received by Mosquitto via Node-RED on your Raspberry Pi with the following
    steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查从您的树莓派发送的传感器数据是否可以通过Node-RED接收到Mosquitto。
- en: Run the flow you created in the previous section on the Node-RED instance on
    your Raspberry Pi.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的树莓派上的Node-RED实例上运行您在上一节中创建的流程。
- en: Click the switch of the **inject** node to run this flow and publish the Grove
    temperature and humidity sensor data:![Figure 10.16 – Run the flow to publish
    the data
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**inject**节点的开关以运行此流程并发布Grove温湿度传感器数据：![图10.16 - 运行发布数据的流
- en: '](img/Figure_10.16_B16353.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.16_B16353.jpg)'
- en: Figure 10.16 – Run the flow to publish the data
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 - 运行发布数据的流
- en: Check that the data was subscribed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已订阅的数据。
- en: There are currently two flows in this Node-RED instance. One is the flow of
    publishing data to the Mosquitto MQTT broker, and the other is the flow of subscribing
    to data from that broker. The subscribed flow is normally in a standby state,
    so when the data is published, the subscribed data is automatically output to
    the **debug** tab.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当前在这个Node-RED实例中有两个流。一个是将数据发布到Mosquitto MQTT代理的流，另一个是从该代理订阅数据的流。订阅的流通常处于待机状态，因此当数据被发布时，订阅的数据会自动输出到**debug**选项卡。
- en: 'Check the **debug** tab. You should see the data you published:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**debug**选项卡。您应该看到您发布的数据：
- en: '![Figure 10.17 – Check the result of the publishing and subscribing\'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.17 - 检查发布和订阅的结果\'
- en: '](img/Figure_10.17_B16353.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.17_B16353.jpg)'
- en: Figure 10.17 – Check the result of the publishing and subscribing\
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 - 检查发布和订阅的结果\
- en: Congratulations! Now you know how to handle the sensor data acquired by the
    Raspberry Pi and Grove Base sensor module on the edge device and send it to an
    MQTT broker.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在您知道如何处理树莓派和Grove Base传感器模块在边缘设备上获取的传感器数据，并将其发送到MQTT代理。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, in the form of a hands-on tutorial, we experienced how to handle
    sensor data on an edge device and send it to an MQTT broker. This is one of the
    ways to create an edge device-side application for IoT with Node-RED.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，通过实际操作教程的形式，我们体验了如何在边缘设备上处理传感器数据并将其发送到MQTT代理。这是使用Node-RED为物联网创建边缘设备端应用程序的一种方式。
- en: In the next chapter, we will look at a hands-on example of receiving sensor
    data and visualizing it on the server side (the cloud) via Node-RED.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一个实际的例子，接收传感器数据并通过Node-RED在服务器端（云端）进行可视化。
