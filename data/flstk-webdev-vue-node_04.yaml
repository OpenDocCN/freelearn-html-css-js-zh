- en: Introducing REST APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍REST API
- en: An **Application Programming Interface** (**API**), in general, is used to get
    data from one application to another. There are different kinds of APIs that are
    used in different areas, such as hardware and programming, but we will be talking
    only about web APIs. Web APIs are a form of web service that provides an interface
    to communicate between multiple applications. Data from one application is sent
    to another application via an HTTP protocol using such APIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序编程接口**（**API**）通常用于从一个应用程序获取数据到另一个应用程序。不同领域有不同的API，例如硬件和编程，但我们将只讨论Web
    API。Web API是一种提供多个应用程序之间通信接口的Web服务。使用这些API，一个应用程序的数据通过HTTP协议发送到另一个应用程序。'
- en: 'In this chapter, we will talk about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论：
- en: REST architecture and RESTful APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST架构和RESTful API
- en: HTTP verbs and status codes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP动词和状态码
- en: Developing and testing APIs using Postman
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Postman开发和测试API
- en: Web APIs work in a similar way to how the browser interacts with our application
    server. The client requests some data from the server and the server responds
    with the formatted data to the client; APIs do something similar. For example,
    there is a contract set beforehand between the multiple applications. So, if there
    are two applications that need to share data, then one application will submit
    a request to another application, saying it needs this data in this format. When
    another application receives the request, it fetches the data from its server
    and responds with the structured and formatted data to the client or the requester.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Web API的工作方式与浏览器如何与我们的应用程序服务器交互相似。客户端从服务器请求一些数据，服务器以格式化的数据对客户端做出响应；API做的是类似的事情。例如，多个应用程序之间事先有一个合同。所以，如果有两个应用程序需要共享数据，那么一个应用程序将向另一个应用程序提交一个请求，说明它需要以这种格式的数据。当另一个应用程序收到请求时，它会从其服务器获取数据，并以结构化和格式化的数据对客户端或请求者做出响应。
- en: Web APIs are classified into **Simple Object Access Protocol** (**SOAP**), **Remote
    Procedure Call** (**RPC**), or **Representational State Transfer** (**REST**)
    categories. The response format for these APIs can be in various forms, such as
    XML, JSON, HTML, images, and videos.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Web API被分为**简单对象访问协议**（**SOAP**）、**远程过程调用**（**RPC**）或**表示性状态转移**（**REST**）类别。这些API的响应格式可以是各种形式，如XML、JSON、HTML、图片和视频。
- en: 'APIs also have different models, such as Public APIs and Private APIs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: API也有不同的模型，例如公共API和私有API：
- en: '**Private APIs**: Private or internal APIs are only used in internal applications
    within an organization'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有API**：私有或内部API仅用于组织内部的内部应用程序'
- en: '**Public APIs**: Public or external APIs are designed in a way such that they
    can be shared with the public parties outside of an organization as well'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共API**：公共或外部API设计的方式使得它们可以被组织外部的公众共享'
- en: What is REST?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是REST？
- en: REST is a web service used for exchanging data between multiple applications
    via an HTTP protocol. RESTful Web Services are scalable and easily maintainable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: REST是一种通过HTTP协议在多个应用程序之间交换数据的Web服务。RESTful Web服务是可扩展的且易于维护的。
- en: 'Here is a simple diagram that explains how the REST Web Service works:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的图解，说明了REST Web Service是如何工作的：
- en: '![](img/82db25c3-9e77-47ae-9a64-81168d222fb9.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/82db25c3-9e77-47ae-9a64-81168d222fb9.jpg)'
- en: As we can see in the diagram, the client requests some data by making a call
    to the Rest Web Service Server. Here, when we send an HTTP Request, we also provide
    some headers, such as what type of data we want as a response. These responses
    could be JSON, XML, HTML, or any other form. When the server receives the request
    and pulls data from storage, it does not simply return the database resources
    as a response. It sends a representation of these resources. That's why it is
    called **representational**. When the server responds to the client with this
    formatted data, the state of our application changes. And that's why it's called
    **state transfer**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如图中所示，客户端通过调用Rest Web Service Server来请求一些数据。在这里，当我们发送一个HTTP请求时，我们也会提供一些头部信息，例如我们希望作为响应的数据类型。这些响应可以是JSON、XML、HTML或其他任何形式。当服务器接收到请求并从存储中提取数据时，它不会简单地以数据库资源的形式返回响应。它发送这些资源的表示。这就是为什么它被称为**表示性**。当服务器以这种格式化的数据对客户端做出响应时，我们应用程序的状态发生了变化。这就是为什么它被称为**状态转移**。
- en: Introducing REST APIs
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍REST API
- en: REST APIs are designed with a RESTful architecture. The APIs built with the
    principles of RESTful architecture are called RESTful APIs. RESTful architecture
    is also called a **stateless architecture** because the connection between the
    client and server is not preserved. The connection is reset after every transaction
    between the client and the server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 是基于 RESTful 架构设计的。遵循 RESTful 架构原则构建的 API 被称为 RESTful API。RESTful 架构也被称为
    **无状态架构**，因为客户端和服务器之间的连接不会被保留。在客户端和服务器之间每次事务之后，连接都会被重置。
- en: Since there are multiple web services, we have to be able to choose what our
    requirements and needs are in order to build the perfect API for our application.
    The SOAP and REST protocols both have some benefits as well as limitations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在多个网络服务，我们必须能够选择我们的需求和需求，以便为我们的应用程序构建完美的 API。SOAP 和 REST 协议都有一些优点和局限性。
- en: The SOAP protocol was designed in 1998 by Dave Winer. It uses **Extensible Markup
    Language** (**XML**) for data exchange. The choice between whether to use SOAP
    or REST depends on which programming language we choose when we are developing
    and the needs of the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP 协议是在 1998 年由 Dave Winer 设计的。它使用 **可扩展标记语言** (**XML**) 进行数据交换。是否使用 SOAP
    或 REST 取决于我们在开发时选择的编程语言以及应用程序的需求。
- en: REST APIs let us communicate between the applications in a JSON/XML data format.
    JSON/XML is a representation of data that is easy to format and readable for a
    human. With RESTful APIs, we can perform **Create**, **Read**, **Update**, and
    **Delete** (**C****RUD**) operations from one application to another.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 允许我们在 JSON/XML 数据格式之间进行应用程序间的通信。JSON/XML 是一种易于格式化和易于人类阅读的数据表示。通过 RESTful
    API，我们可以从一个应用程序到另一个应用程序执行 **创建**、**读取**、**更新** 和 **删除** （**CRUD**） 操作。
- en: Benefits of REST API
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST API 的好处
- en: 'REST API provides a lot of benefits. Here are some of the advantages that we
    can get by using REST APIs:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 提供了许多好处。以下是我们通过使用 REST API 可以获得的一些优势：
- en: It is easy to make requests and get responses from one application to other.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个应用程序向另一个应用程序发送请求和获取响应非常容易。
- en: Responses can be retrieved in human readable format in the form of JSON or XML.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应可以以 JSON 或 XML 的人类可读格式检索。
- en: Everything is manipulated in the form of URI, which means every request is identified
    by the URI request.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的操作都是以 URI 的形式进行的，这意味着每个请求都通过 URI 来标识。
- en: The separation between client and server makes it easy to migrate to a different
    server when needed with minimal change. The segregation between client and server
    makes it easy to scale as well.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端和服务器之间的分离使得在需要时可以轻松迁移到不同的服务器，并且更改最小。客户端和服务器之间的隔离也使得扩展变得容易。
- en: It is independent of any programming languages. We can implement REST architecture
    irrespective of whether we are using PHP, JAVA, Rails, Node.js, and so on.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与任何编程语言无关。无论我们使用 PHP、JAVA、Rails、Node.js 等何种编程语言，都可以实现 REST 架构。
- en: it is very easy to get started and the learning curve is short.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用非常容易，学习曲线也很短。
- en: HTTP verbs
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 动词
- en: HTTP verbs are the different methods that are used to define the action that
    we want to execute for the resources. The most used HTTP verbs are GET, POST,
    PUT, PATCH, and DELETE. HTTP verbs are the request methods that make it possible
    to communicate between multiple applications. These HTTP verbs make it possible
    to perform several actions on a resource without needing to alter the URLs entirely.
    Let's look into each of these in more detail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 动词是用来定义我们对资源想要执行的操作的不同方法。最常用的 HTTP 动词是 GET、POST、PUT、PATCH 和 DELETE。HTTP
    动词是使多个应用程序之间通信成为可能请求方法。这些 HTTP 动词使得在不需要完全更改 URL 的情况下对资源执行多个操作成为可能。让我们更详细地看看这些。
- en: GET
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET
- en: '`GET` requests are the idempotent requests. This is used when we want to fetch
    the information about resources. This does not modify or delete the resource.
    The equivalent CRUD operation for `GET` requests is `READ`, which means it only
    fetches the information and that''s it. An example URL for a `GET` request is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 请求是无效请求。这在我们想要获取资源信息时使用。这不会修改或删除资源。`GET` 请求的等效 CRUD 操作是 `READ`，这意味着它只获取信息，仅此而已。一个
    `GET` 请求的示例 URL 是：'
- en: 'To fetch all records:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取所有记录：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To fetch information about a single user:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取单个用户的信息：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: POST
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST
- en: 'The equivalent CRUD operation for the `POST` request is `CREATE`. This is used
    with new records to the collection. Since this changes the state of the server,
    this is not an idempotent request. If we request a `POST` method twice with the
    same parameters, that will create two new identical resources in the database. An
    example URL for a `POST` request is:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`POST`请求的等效CRUD操作是`CREATE`。这用于向集合中添加新记录。由于这会改变服务器状态，因此这不是一个幂等请求。如果我们两次以相同的参数请求`POST`方法，那么将在数据库中创建两个相同的新资源。以下是一个`POST`请求的示例URL：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: PUT
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PUT
- en: 'The `PUT` request is used to create or update a record. It creates a new record
    if the resource does not exist yet and updates the existing record if the resource
    already exists. The equivalent CRUD operation is `update()`. It replaces the existing
    representation of the resource. An example URL for a `PUT` request is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUT`请求用于创建或更新记录。如果资源尚不存在，则创建新记录；如果资源已存在，则更新现有记录。等效的CRUD操作是`update()`。它替换了资源的现有表示。以下是一个`PUT`请求的示例URL：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: DELETE
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DELETE
- en: This is used to remove resources from a collection. The equivalent CRUD operation
    is `delete()`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于从集合中删除资源。等效的CRUD操作是`delete()`。
- en: 'An example URL for a `DELETE` request is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`DELETE`请求的示例URL：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: HTTP status codes
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP状态码
- en: Status codes are the part of a response made by the server for a request made
    to that server. It indicates the status of a request, irrespective of whether
    it got successfully executed or not. The status codes have three digits. The first
    digit represents the class or the category of that response. The HTTP status codes
    range from *100-500*.  We will be covering some of the major status codes in this
    section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码是服务器对请求做出的响应的一部分。它表示请求的状态，无论它是否成功执行。状态码有三个数字。第一个数字表示该响应的类别或类别。HTTP状态码的范围是*100-500*。在本节中，我们将介绍一些主要的状态码。
- en: 2XX codes
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2XX代码
- en: 'The 200 range status code is the success range for any request in the API.
    Within the 200 range, there is a lot of code that represents different forms of
    success. Explained here are a few of the many status codes that are available:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 200范围内的状态码是API中任何请求的成功范围。在200范围内，有许多代码表示不同的成功形式。以下是可用的许多状态码中的一些解释：
- en: '**200 OK**: This response is the standard one. It is just a representation
    of the request being successful. This status code also returns the resource on
    which the request was executed.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**200 OK**：这是一个标准响应。它只是表示请求成功。此状态码还返回请求执行的资源。'
- en: '**201 Created**: This represents the successful creation of a resource.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**201 Created**：这表示资源的成功创建。'
- en: '**204 No Content**: This status code executes the request successfully, but
    does not return anything.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**204 No Content**：此状态码成功执行请求，但不返回任何内容。'
- en: 4XX codes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4XX代码
- en: 'The 400 range status codes appear when there is an error on the client side:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发生错误时，会出现400范围内的状态码：
- en: '**400 Bad Request**:When the request parameters are not well formatted, or
    the syntax is broken, then a 400 status code is returned by the server.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**400 Bad Request**：当请求参数格式不正确或语法错误时，服务器会返回400状态码。'
- en: '**401 Unauthorized**:This status code is returned when an unauthorized party
    tries to send the API request. This basically checks the authentication part.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**401 Unauthorized**：当未经授权的方尝试发送API请求时，会返回此状态码。这基本上检查了认证部分。'
- en: '**403 Forbidden**: This is somewhat similar to 401\. This checks the authorization
    of the party performing the API request. This is basically done when there are
    different permission settings for different users performing the API.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**403 Forbidden**：这与401有些相似。这检查执行API请求的方的授权。这通常在执行API的不同用户有不同的权限设置时进行。'
- en: '**404 Not Found**: This is returned when the resource that we are trying to
    perform some action on is not found by the server in the database.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**404 Not Found**：当服务器在数据库中找不到我们尝试执行某些操作的资源时，会返回此响应。'
- en: 5XX codes
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5XX代码
- en: 'The 500 range status code informs us that there is something wrong with the
    execution of the action performed in the given resource:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码500表示在给定资源执行的动作执行过程中存在问题：
- en: '**500 Internal Server Error**:This status code is displayed when the action
    is not executed successfully. Like the 200 status code, this is a generic code
    returned by the server when something goes wrong.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**500 Internal Server Error**：当动作未成功执行时，会显示此状态码。与200状态码一样，这是服务器在出现问题时返回的通用代码。'
- en: '**503 Service Unavailable**: This status code is displayed when our server
    is not running.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**503 服务不可用**：当我们的服务器没有运行时，会显示这个状态码。'
- en: '**504 Gateway Timeout**: This indicates that the request was sent to the server,
    but it did not get any response in the given time.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**504 网关超时**：这表示请求已发送到服务器，但在给定时间内没有收到任何响应。'
- en: Introducing Postman
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Postman
- en: Postman is a tool that lets us develop and test our APIs faster. This tool provides
    a GUI that makes it easy to tweak our APIs faster, which decreases the development
    time of our APIs. We can also maintain a history by creating a collection of all
    the APIs that we have developed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 是一个让我们更快地开发和测试我们的 API 的工具。这个工具提供了一个 GUI，使得调整我们的 API 变得容易，从而减少了我们 API
    的开发时间。我们还可以通过创建所有已开发的 API 的集合来维护历史记录。
- en: There are different alternatives for Postman as well, such as Runscope and Paw.
    We will be using Postman for this book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 也有不同的替代方案，例如 Runscope 和 Paw。我们将在这本书中使用 Postman。
- en: Installing Postman
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Postman
- en: 'There are different ways to use Postman:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Postman 有不同的方式：
- en: 'We can get the Chrome extension as follows: If you visit [https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en),
    we will see the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式获取 Chrome 扩展程序：如果您访问 [https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en)，我们会看到以下内容：
- en: '![](img/7cf083eb-f22c-4715-be35-a6349a5190cb.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cf083eb-f22c-4715-be35-a6349a5190cb.png)'
- en: Click on the Add to Chrome button and the extension will be installed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加到 Chrome”按钮，扩展程序将被安装。
- en: We can download the right desktop application for our operating system via
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式下载适合我们操作系统的桌面应用程序：
- en: '[https://www.getpostman.com/](https://www.getpostman.com/).'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.getpostman.com/](https://www.getpostman.com/).'
- en: We have used the desktop application for this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中使用了桌面应用程序。
- en: Testing APIs with Postman
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Postman 测试 API
- en: 'First, let''s have a quick recap of what we have done so far. In the app that
    we are building, the `app.js` file should have the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速回顾一下到目前为止我们已经做了什么。在我们正在构建的应用程序中，`app.js` 文件应该包含以下代码：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since this file is auto-generated when we build the application via command
    CLI, it uses typescript syntax. If we want to use the ES 6 syntax, we can replace
    `var` with `const`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此文件是在我们通过命令行构建应用程序时自动生成的，它使用 TypeScript 语法。如果我们想使用 ES 6 语法，我们可以将 `var` 替换为
    `const`。
- en: 'In our `models/User.js`, we have the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `models/User.js` 文件中，我们有以下内容：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, in `controllers/users.js`, we have the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 `controllers/users.js` 文件中，我们有以下内容：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding a GET endpoint in the users controller
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户控制器中添加 GET 端点
- en: Let's add a route to our `controllers/users.js` that will fetch all the user's
    records from the database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `controllers/users.js` 中添加一个路由，该路由将从数据库中获取所有用户的记录。
- en: Currently, with the code we have in our `users` controller, when we visit `http://localhost:3000/users`,
    it only returns a title, `Users`. Let's modify this code to incorporate a `GET`
    request to fetch all user requests.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，根据我们 `users` 控制器中的代码，当我们访问 `http://localhost:3000/users` 时，它只返回一个标题，`Users`。让我们修改这段代码以包含一个
    `GET` 请求来获取所有用户请求。
- en: Fetching all users
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有用户
- en: 'First, start the server with `$ nodemon app.js`. Now, in `controllers/users.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `$ nodemon app.js` 启动服务器。现在，在 `controllers/users.js` 中：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have our code in place, let''s test this endpoint using the Postman
    app. In the Postman app, add the necessary details in the URL. When we hit the
    Send button, we should see the response as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将代码设置好了，让我们使用 Postman 应用程序测试这个端点。在 Postman 应用程序中，在 URL 中添加必要的详细信息。当我们点击发送按钮时，我们应该看到以下响应：
- en: '![](img/699d3e88-8a89-4a99-adc1-b1f6787ede61.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/699d3e88-8a89-4a99-adc1-b1f6787ede61.png)'
- en: The `_id` is the Mongo ID of the user, which is sent by Mongoose query by default,
    and we are fetching the name and email of the user. If we want the names only,
    we can change our query in the `users` controller to fetch only the name.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`_id` 是用户的 MongoDB ID，这是 Mongoose 查询默认发送的，我们正在获取用户的名字和电子邮件。如果我们只想获取名字，我们可以在
    `users` 控制器中更改我们的查询以只获取名字。'
- en: Postman lets us edit the endpoints and requests are easy to develop. If we want
    to use our own local browser to test, we can do that as well.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 允许我们编辑端点，并且请求的开发变得容易。如果我们想使用自己的本地浏览器进行测试，我们也可以这样做。
- en: 'I have used a Chrome plugin called JSONview to format the JSON response. You
    can get the plugin from here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个名为 JSONview 的 Chrome 插件来格式化 JSON 响应。您可以从这里获取插件：
- en: '[https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc).'
- en: 'As I mentioned earlier, if we visit `http://localhost:3000/users`, we should
    be able to see something similar to the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所述，如果我们访问`http://localhost:3000/users`，我们应该能够看到类似以下的内容：
- en: '![](img/30e07339-0247-45ce-8dc0-5eb058c78d6e.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30e07339-0247-45ce-8dc0-5eb058c78d6e.png)'
- en: We can use the `save` query feature given by Postman to run those queries in
    future as well. Just click the Save button, which is in the top right-hand corner
    of the app. And create new queries as we go forward.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Postman提供的`save`查询功能在将来运行这些查询。只需点击右上角的保存按钮，然后在我们继续前进的过程中创建新的查询。
- en: Fetching a single user
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取单个用户
- en: 'As mentioned in the HTTP verbs section, to fetch a single record from the collection,
    we have to pass an `id` of the user in the parameter in order to get the user
    details. From the preceding Postman response example, let''s pick an `id` and
    use it to fetch the record of a user. First, let''s add the endpoint to our controller.
    In `controllers/users.js`, add the following lines of code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如HTTP动词部分所述，要从集合中获取单个记录，我们必须在参数中传递用户的`id`以获取用户详细信息。从先前的Postman响应示例中，让我们选择一个`id`并使用它来获取用户的记录。首先，让我们在我们的控制器中添加端点。在`controllers/users.js`中添加以下代码行：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now create a new query in Postman with the following parameters. We will create
    a `GET` request with the URL `http://localhost:3000/users/:user_id` where `user_id`
    is the `id` of any user that you have created in your database. With this setting,
    we should be able to view something like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Postman中创建一个新的查询，以下参数。我们将创建一个带有URL `http://localhost:3000/users/:user_id`
    的`GET`请求，其中`user_id`是您在数据库中创建的任何用户的`id`。使用此设置，我们应该能够看到如下内容：
- en: '![](img/dffcc2de-bd58-430f-9737-d443c9e04934.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dffcc2de-bd58-430f-9737-d443c9e04934.png)'
- en: The query should return the details of the user with the given ID in the URL.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 查询应返回URL中给定ID的用户详细信息。
- en: Adding a POST endpoint in the users controller
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户控制器中添加POST端点
- en: 'Let''s look at an example. Let''s create an API that will use the MongoDB `insert()`
    command to save user resources in the database. In the users controller, add a
    new endpoint:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子。让我们创建一个API，它将使用MongoDB的`insert()`命令将用户资源保存到数据库中。在用户控制器中添加一个新的端点：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In Postman, set the method as `POST`, the URL as `http://localhost:3000/users`,
    set the parameters to raw JSON, and provide the following input:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Postman中，将方法设置为`POST`，URL设置为`http://localhost:3000/users`，将参数设置为原始JSON，并输入以下内容：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/88888180-6c04-4733-80ab-7c2fb1956557.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88888180-6c04-4733-80ab-7c2fb1956557.png)'
- en: Unlike the `GET` request, we have to pass the name and email of the user we
    want to add in the `body` parameter. Now, if we run a `GET all users` query, we
    should be able to see this new user. If we run the `POST` request twice with the
    same parameters, then it creates two different resources.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与`GET`请求不同，我们必须在`body`参数中传递我们想要添加的用户的名字和电子邮件。现在，如果我们运行一个`GET all users`查询，我们应该能够看到这个新用户。如果我们用相同的参数运行两次`POST`请求，那么它将创建两个不同的资源。
- en: Adding a PUT endpoint in the users controller
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户控制器中添加PUT端点
- en: 'Let''s update a user with ID `5a3153d7ba3a827ecb241779` (change this ID to
    the ID of your document), which we just created. Let''s rename the email: to do
    that, first let''s add the endpoint in our users controller, in other words, `controllers/user.js`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新一个ID为`5a3153d7ba3a827ecb241779`的用户（将此ID更改为您的文档ID），这是我们刚刚创建的。让我们重命名电子邮件：为此，首先让我们在我们的用户控制器中添加端点，换句话说，在`controllers/user.js`中：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'What we did here is, we added an endpoint for a `PUT` request, which takes
    the name and email as parameters and saves it to the database. The corresponding
    Postman would look as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是，我们添加了一个用于`PUT`请求的端点，它接受名称和电子邮件作为参数并将其保存到数据库中。相应的Postman看起来如下所示：
- en: '![](img/b2e262b8-d7e5-43d9-8e8f-b5e4770de526.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2e262b8-d7e5-43d9-8e8f-b5e4770de526.png)'
- en: Here, we can see that the user's name has been updated. And, if we look at the
    request parameters, we have also added an `age` parameter. But since we haven't
    added `age` to our Schema while defining the User model, it discards the age value
    but updates the rest.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到用户的名字已经被更新。而且，如果我们查看请求参数，我们还添加了一个`age`参数。但由于我们在定义用户模型时没有添加`age`，它丢弃了年龄值但更新了其余部分。
- en: 'We can also use the `PATCH` method to update a resource. The difference between
    the `PUT` and `PATCH` methods is: the `PUT` method updates the whole resource,
    whereas `PATCH` is used for a partial update on resources.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `PATCH` 方法来更新资源。`PUT` 和 `PATCH` 方法的区别是：`PUT` 方法更新整个资源，而 `PATCH` 用于对资源进行部分更新。
- en: Adding a DELETE endpoint in the users controller
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户控制器中添加 DELETE 端点
- en: 'Similarly, for delete, let''s add an endpoint in `controllers/users.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于删除操作，让我们在 `controllers/users.js` 中添加一个端点：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code takes the ID of the user and removes the user with the given
    ID from the database. In Postman, the endpoint would look as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码获取用户的 ID，并从数据库中删除具有给定 ID 的用户。在 Postman 中，端点将如下所示：
- en: '![](img/b749f8ca-090b-4425-baa2-f34541438cb7.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b749f8ca-090b-4425-baa2-f34541438cb7.png)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about what a RESTful API is, the different HTTP
    verbs and the status codes, and how to develop RESTful APIs and test them using
    Postman.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是 RESTful API，不同的 HTTP 动词和状态码，以及如何使用 Postman 开发和测试 RESTful API。
- en: In the next chapter, we will be jumping into the Vue.js introduction and will
    be building an application using Vue.js.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进入 Vue.js 的介绍，并使用 Vue.js 构建一个应用程序。
