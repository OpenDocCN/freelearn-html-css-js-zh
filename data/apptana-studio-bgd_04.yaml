- en: Chapter 4. Debugging JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 调试 JavaScript
- en: '*Now, when we have created our own workspaces and projects, we can begin to
    work with Aptana Studio. Surely you have already created your own project with
    some files for your web application or website.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在，当我们已经创建了我们的工作空间和项目后，我们可以开始使用 Aptana Studio。当然，您已经创建了自己的项目，其中包含一些用于您的 Web
    应用程序或网站的文件。*'
- en: 'So, in this chapter we will take a look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将查看以下内容：
- en: Installing the Aptana Studio Debugger Extension
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Aptana Studio 调试器扩展
- en: Working with the debug console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调试控制台
- en: Working with breakpoints
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用断点
- en: Monitoring AJAX requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控 AJAX 请求
- en: Uninstalling the Debugger Extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载调试器扩展
- en: The Debug perspective
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试视角
- en: Before we can start to debug our application, the first thing we have to do
    is to switch to the **Debug** perspective under **Window** | **Open Perspective**
    | **Debug**. The **Debug** perspective contains several useful views such as the
    **Console** view, the **Debug** view, the **Breakpoints** view, and so on, which
    are perfect for JavaScript debugging.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始调试应用程序之前，我们必须做的第一件事是切换到 **Window** | **Open Perspective** | **Debug** 下的
    **Debug** 视角。**Debug** 视角包含几个有用的视图，如 **Console** 视图、**Debug** 视图、**Breakpoints**
    视图等，这些对于 JavaScript 调试来说非常完美。
- en: But first, let's start with installing the Debugger Extension, which is absolutely
    necessary for debugging.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们从安装调试器扩展开始，这对于调试是绝对必要的。
- en: Installing the JavaScript debugger
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 JavaScript 调试器
- en: In order to debug some JavaScript code with Aptana Studio, we need to install
    the required extensions for our browser. The Debugger Extension is currently only
    available for Firefox and Internet Explorer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Aptana Studio 调试一些 JavaScript 代码，我们需要为我们的浏览器安装所需的扩展。调试器扩展目前仅适用于 Firefox
    和 Internet Explorer。
- en: We want to install the Debugger Extension **for** the Firefox browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要安装用于 Firefox 浏览器的 Debugger 扩展 **程序**。
- en: Time for action – installing Aptana Debugger for Firefox
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Aptana Debugger for Firefox 的行动时间
- en: Start up your Firefox browser. If you don't have Firefox already installed,
    do it now.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Firefox 浏览器。如果您还没有安装 Firefox，请现在安装。
- en: Install the Aptana Debugger Extension for Firefox. You will find it at [http://firefox.aptana.com/update/aptanadebugger.xpi](http://firefox.aptana.com/update/aptanadebugger.xpi).
    By clicking on this link, Firefox automatically starts the installation. Only
    your confirmation and a Firefox restart is necessary.![Time for action – installing
    Aptana Debugger for Firefox](img/8246_04_15.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Firefox 的 Aptana Debugger 扩展。您可以在 [http://firefox.aptana.com/update/aptanadebugger.xpi](http://firefox.aptana.com/update/aptanadebugger.xpi)
    找到它。点击此链接，Firefox 将自动开始安装。只需您的确认和重新启动 Firefox 即可。![安装 Aptana Debugger for Firefox
    的行动时间](img/8246_04_15.jpg)
- en: After installing the extension, navigate to **Firefox** | **Add-ons** and take
    a look at the requirements of your version of **Aptana Debugger**.![Time for action
    – installing Aptana Debugger for Firefox](img/8246_04_1.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展后，导航到 **Firefox** | **Add-ons** 并查看您的 **Aptana Debugger** 版本的要求数据。![安装 Aptana
    Debugger for Firefox 的行动时间](img/8246_04_1.jpg)
- en: In our case the Aptana Debugger 1.7.2 requires Firebug 1.2 to 1.8\. Now navigate
    to [www.getfirebug.com](http://www.getfirebug.com) and install the required Firebug
    extension dependent on your currently installed Firefox version. We navigate to
    the website at [https://getfirebug.com/releases/firebug/1.8/](https://getfirebug.com/releases/firebug/1.8/)
    and install the highest required Firebug version 1.8.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的案例中，Aptana Debugger 1.7.2 需要 Firebug 1.2 到 1.8。现在导航到 [www.getfirebug.com](http://www.getfirebug.com)
    并安装根据您当前安装的 Firefox 版本所需的 Firebug 扩展。我们导航到网站 [https://getfirebug.com/releases/firebug/1.8/](https://getfirebug.com/releases/firebug/1.8/)
    并安装最高要求的 Firebug 版本 1.8。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Already a newer version of Firebug installed?**'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**已经安装了 Firebug 的新版本？**'
- en: If you already have a newer version of Firebug installed, you need to uninstall
    it and install one of the required versions. This might be unintended, because
    the newer versions of Firebug provide many nice features. In this case, you might
    install a second (older) version of Firefox that you're only using for Aptana
    Studio debugging.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您已经安装了 Firebug 的新版本，您需要卸载它并安装所需的版本之一。这可能是意外的，因为 Firebug 的新版本提供了许多很好的功能。在这种情况下，您可能需要安装第二个（较旧）版本的
    Firefox，您只使用它进行 Aptana Studio 调试。
- en: After you have both the extensions installed, restart Firefox to complete the
    installation.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完两个扩展后，重新启动 Firefox 以完成安装。
- en: '*What just happened?*'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: You have just prepared your Firefox browser for debugging your Aptana Studio
    projects with it. In detail, this means you have integrated the Aptana Debugger
    Extension and the required Firebug extension.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为使用它来调试Aptana Studio项目准备了Firefox浏览器。具体来说，这意味着你已经集成了Aptana调试扩展和所需的Firebug扩展。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is absolutely recommended that the Firebug extension is compatible with the
    Aptana Debugger Extension.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议Firebug扩展与Aptana调试扩展兼容。
- en: Configuring the debugger
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置调试器
- en: Aptana Studio provides you with the option to configure many different debug
    configurations. For example, if you have a local installation of different Firefox
    or Internet Explorer versions, you could create a debug configuration for each
    of these browsers, so that you can start to debug your code in any of these browsers
    just by a single-click on the toolbar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Aptana Studio为你提供了配置许多不同调试配置的选项。例如，如果你安装了不同版本的Firefox或Internet Explorer的本地版本，你可以为这些浏览器中的每一个创建一个调试配置，这样你只需在工具栏上单击一次即可开始在这些浏览器中调试你的代码。
- en: Time for action – creating a debug configuration
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 创建调试配置
- en: In order to create a debugging configuration, we click on the small triangle
    on the right-hand side of the **Debug** toolbar button to drop-down the **Debug**
    menu and select the entry **Debug Configurations…**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建调试配置，我们点击**调试**工具栏按钮右侧的小三角形，以展开**调试**菜单并选择条目**调试配置…**。
- en: Click on the **New launch configuration** button (a white paper symbol) at the
    top-left of the configuration window.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击配置窗口左上角的**新建启动配置**按钮（一个白色纸张符号）。
- en: After Studio has inserted a configuration entry below the **Web Browser** node
    within the left-hand side tree, enter the name for the debug configuration into
    the **Name** field at the top-right. We enter, for example, the name `Firefox
    - Internal Server`.![Time for action – creating a debug configuration](img/8246_04_2.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Studio在左侧树中的**Web浏览器**节点下方插入配置条目后，将调试配置的名称输入到右上角的**名称**字段中。例如，我们输入名称`Firefox
    - 内部服务器`。[![执行动作 – 创建调试配置](img/8246_04_2.jpg)]
- en: Choose a browser within the **Main** tab in which our debugging function should
    run. We enter the path to our Firefox, for example, `/usr/bin/firefox`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**主**标签页中选择一个浏览器，我们的调试功能将在其中运行。例如，我们输入Firefox的路径，`/usr/bin/firefox`。
- en: Further, we want to start the debugger on the current page; therefore we select
    the **Use current page** option in the **Start Action** section.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们希望开始在当前页面上启动调试器；因此，我们在**启动操作**部分选择**使用当前页面**选项。
- en: We select the **Use built-in Web server** entry because our first simple debug
    configuration should use the internal web server.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择**使用内置Web服务器**条目，因为我们的第一个简单调试配置应该使用内部Web服务器。
- en: Afterwards, just click on **Apply** in order to save the first settings of the
    configuration.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，只需点击**应用**以保存配置的第一个设置。
- en: Further we want that our debug configuration should appear under the **Debug**
    menu within the toolbar. Therefore, we select the **Common** tab and the **Debug**
    entry within the **Display in favorites menu** list.![Time for action – creating
    a debug configuration](img/8246_04_3.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们希望我们的调试配置应出现在工具栏中的**调试**菜单下。因此，我们在**常用**选项卡和**显示在收藏夹菜单中**列表中的**调试**条目中选择。![执行动作
    – 创建调试配置](img/8246_04_3.jpg)
- en: Finally, click on **Apply** to save the changes, and afterwards click on **Close**
    to finish the creation.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**应用**以保存更改，然后点击**关闭**以完成创建。
- en: '*What just happened?*'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have created a debug configuration, which furthermore can be directly selected
    over the toolbar. When you select this configuration, Aptana Studio opens the
    related browser and starts the debugging.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个调试配置，此外还可以直接在工具栏中选择它。当你选择此配置时，Aptana Studio将打开相关的浏览器并开始调试。
- en: '![What just happened?](img/8246_04_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/8246_04_4.jpg)'
- en: Debugging JavaScript
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试JavaScript
- en: After we have created the required configuration for JavaScript debugging, let's
    go forward and take a look at how we can debug a JavaScript file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了JavaScript调试所需的配置后，让我们继续看看我们如何调试JavaScript文件。
- en: Time for action – debugging JavaScript
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 调试JavaScript
- en: At first, click on the **Debug** toolbar button in order to debug the file that
    is currently open.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，点击**调试**工具栏按钮，以便调试当前打开的文件。
- en: If you haven't already installed the Debugger Extension, you get the following
    message:![Time for action – debugging JavaScript](img/8246_04_5.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有安装调试器扩展，你会收到以下消息：![行动时间 - 调试JavaScript](img/8246_04_5.jpg)
- en: In this case, just click on **Yes** and Aptana Studio will install it directly
    in the background. After the quick and successful installation you receive a corresponding
    message where you click on **OK** and you can continue.![Time for action – debugging
    JavaScript](img/8246_04_6.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，只需点击**是**，Aptana Studio就会在后台直接安装它。快速且成功安装后，你会收到相应的消息，点击**确定**后可以继续。![行动时间
    - 调试JavaScript](img/8246_04_6.jpg)
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maybe you have to restart Firefox after the Debugger Extension installation,
    if Firefox was running during the installation. When Firefox was running during
    the installation, and you continue without a restart, you get a **Socket connection
    error** error message. Please try shutting down and restarting your web browser,
    and then run **Debug** again.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在调试器扩展安装期间Firefox正在运行，你可能需要重新启动Firefox。如果在安装期间Firefox正在运行，并且你没有重启就继续，你会收到一个**套接字连接错误**的错误消息。请尝试关闭并重新启动你的网络浏览器，然后再次运行**调试**。
- en: Now, the next time when Firefox starts, you get the **Another program on your
    computer would like to modify Firefox with the following add-on:** message. Here
    we have to select **Allow this installation** and click on **Continue**.![Time
    for action – debugging JavaScript](img/8246_04_7.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，下次Firefox启动时，你会收到**另一个程序想要使用以下插件修改Firefox**的消息。在这里，我们必须选择**允许此安装**并点击**继续**。![行动时间
    - 调试JavaScript](img/8246_04_7.jpg)
- en: In order to complete the installation of the Aptana Debugger Extension of Firefox,
    you have to restart Firefox again.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成Firefox Aptana调试器扩展的安装，你必须再次重新启动Firefox。
- en: Finally the debug process should run your script in a simple browser.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调试过程应该在简单的浏览器中运行你的脚本。
- en: '*What just happened?*'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**发生了什么？**'
- en: We have debugged our first JavaScript code. But we currently see nothing spectacular
    during this process—everything behaves as usual.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经调试了第一个JavaScript代码。但在这一过程中，我们没有看到任何引人注目的变化——一切行为都像往常一样。
- en: This happens because we haven't set a breakpoint or any other debugging action.
    But because this is what we really want to do, let's take a look at the options
    which the debugger provides us with to debug our code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们还没有设置断点或任何其他调试操作。但因为我们确实想这么做，让我们看看调试器为我们提供的调试代码的选项。
- en: Before we go forward, we have to stop the current debugging process. Therefore
    we click the **Terminate** view button, which is displayed as a red square and
    you will find it in the **Debug** view and the **Console** view. Alternatively,
    you can also just close the browser window in which the debugging process runs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续前进之前，我们必须停止当前的调试过程。因此，我们点击**终止**视图按钮，它显示为一个红色方块，你可以在**调试**视图和**控制台**视图中找到它。或者，你也可以直接关闭运行调试过程的浏览器窗口。
- en: Console view
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台视图
- en: The **Console** view allows you to print some log entries while your program
    processes. You can print values, types, and many more directly while processing
    occurs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**视图允许你在程序处理时打印一些日志条目。你可以在处理过程中直接打印值、类型等。'
- en: 'For example, the following action prints just a simple message in the **Console**
    view:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下操作仅在**控制台**视图中打印一条简单的消息：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of both these actions looks like the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个动作的输出看起来如下：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An additional method of the **Console** view is the `trace` method. The `trace`
    method will print a complete backtrace in the **Console** view, so that you can
    quickly locate the position of a problem.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**视图的另一种方法是`trace`方法。`trace`方法将在**控制台**视图中打印完整的回溯，这样你可以快速定位问题的位置。'
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Time for action – working with the Console view
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 使用控制台视图
- en: 'Prepare an HTML file with the following JavaScript code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个包含以下JavaScript代码的HTML文件：
- en: '[PRE3]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Switch to the **Debug** perspective.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**调试**视角。
- en: Start the debug process by clicking on the **Debug** toolbar button.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**调试**工具栏按钮来启动调试过程。
- en: A Firefox window automatically opens and executes our JavaScript code.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Firefox窗口会自动打开并执行我们的JavaScript代码。
- en: Now the **Console** view contains all logging values and backtraces.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，**控制台**视图包含所有日志值和回溯信息。
- en: '*What just happened?*'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**发生了什么？**'
- en: We have just executed some JavaScript code that contains one `aptana.log` and
    two different `aptana.trace`. The **Console** view displays all logged values
    now.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚执行了一些包含一个`aptana.log`和两个不同`aptana.trace`的JavaScript代码。**控制台**视图现在显示所有记录的值。
- en: '![What just happened?](img/8246_04_8.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/8246_04_8.jpg)'
- en: In the first five rows, we see the result of the `aptana.log`, which was called
    within the loop. These five entries log only the calculation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前五行中，我们看到`aptana.log`的结果，这是在循环中调用的。这五个条目只记录计算。
- en: Next is the first backtrace with a simple variable. This is a very useful feature.
    As you can see, the value of the variable is printed followed by the complete
    backtrace of the program process. You can see all the functions that were successively
    called and listed in the **Console** view. In this case each function call is
    displayed with the filename and the related line number, so that you can find
    their positions quickly. In addition, you're also able to perform a double-click
    on this filename, and the editor automatically jumps to the function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是第一个带有简单变量的回溯。这是一个非常有用的功能。正如你所看到的，变量的值被打印出来，后面跟着程序过程的完整回溯。你可以看到所有依次调用的函数，并在**控制台**视图中列出。在这种情况下，每个函数调用都显示文件名和相关的行号，这样你可以快速找到它们的位置。此外，你还可以双击这个文件名，编辑器会自动跳转到该函数。
- en: The second backtrace shows you how to combine the backtrace with an exception,
    so that you always get enough information if a problem occurs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个回溯显示了如何将回溯与异常结合起来，这样在出现问题时你总是能得到足够的信息。
- en: Finally, just a warning if you're working often with `aptana.log` and `aptana.trace`.
    One of the most often occurring errors is, a forgotten `aptana.log()` or `aptana.trace()`
    call within your JavaScript code. Within the normal debugging process, it isn't
    always noticeable—but if you execute your JavaScript code directly within a browser
    (without a debug console), you will get a **Aptana is** **not defined** error
    message.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你经常使用`aptana.log`和`aptana.trace`，这里有一个警告。最常出现的错误之一是，在JavaScript代码中忘记调用`aptana.log()`或`aptana.trace()`。在正常的调试过程中，这并不总是显而易见的——但是如果你直接在浏览器中执行JavaScript代码（没有调试控制台），你会得到一个“**Aptana未定义**”的错误信息。
- en: 'That is correct, because the libraries by Aptana Studio are no longer included.
    So in order to optimize your code and prevent this error, you can wrap the Aptana
    functions into a separate function that checks if Aptana''s libraries are available.
    This could look something like the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确的，因为Aptana Studio的库不再包含在内。所以为了优化你的代码并防止这种错误，你可以在一个单独的函数中包装Aptana函数，该函数检查Aptana的库是否可用。这可以像以下代码那样：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using breakpoints
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用断点
- en: 'The **Breakpoints** view gives you an overview about all breakpoints you have
    set within your current workspace. In the following screenshot, you can see the
    **Breakpoints** view, with a breakpoint on line 11 of the code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**断点**视图会给你一个关于你在当前工作区中设置的断点的概述。在下面的屏幕截图中，你可以看到**断点**视图，代码的第11行有一个断点：'
- en: '![Using breakpoints](img/8246_04_9.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用断点](img/8246_04_9.jpg)'
- en: But, what is a breakpoint and why should you set it?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，什么是断点，为什么你应该设置它？
- en: A breakpoint is an exact position within your source code where the debugger
    should stop the execution. For example, if you have a loop of actions in your
    code, but something goes wrong somewhere within the code (maybe with your variables;
    they get bad values or invalid types). In this case you are able to set a breakpoint
    within your loop, and take a precise look at all variable values and see how they
    change in each cycle.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是在你的源代码中的一个确切位置，调试器应该在这里停止执行。例如，如果你的代码中有一个动作循环，但代码中的某个地方出了问题（可能是你的变量；它们得到坏值或不正确的类型）。在这种情况下，你可以在循环中设置一个断点，并精确地查看所有变量值以及它们在每个周期中的变化。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're setting a breakpoint on a line, the execution always stops before
    the line itself is executed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个行上设置断点，执行总是在该行本身执行之前停止。
- en: 'For the *Time for action – adding a breakpoint* section, we need the following
    JavaScript code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“动作时间 - 添加断点”部分，我们需要以下JavaScript代码：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Time for action – adding a breakpoint
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 添加断点
- en: Open a JavaScript file or an HTML file with a JavaScript tag, and copy the JavaScript
    code in it.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个包含JavaScript标签的JavaScript文件或HTML文件，并复制其中的JavaScript代码。
- en: Search the **Add a breakpoint here** line and perform a right-click on the left-hand
    side of the line number.![Time for action – adding a breakpoint](img/8246_04_10.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**在此处添加断点**行，并在行号左侧单击鼠标右键。![操作时间 – 添加断点](img/8246_04_10.jpg)
- en: Select **Toggle Breakpoint** in order to set a breakpoint.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**切换断点**以设置断点。
- en: Alternatively, you can also double-click on the position where you right-clicked.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您也可以在您右键单击的位置双击。
- en: Execute the file within the debugger.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调试器中执行文件。
- en: '*What just happened?*'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have just manually set a breakpoint on a line within a loop on which the
    debugger should stop in each cycle, so you're able to inspect the current state
    of your script environment.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚手动在循环中的一行上设置了断点，调试器应该在每次循环中停止，这样您就可以检查脚本环境的当前状态。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Resume a breakpoint**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**恢复断点**'
- en: If you want to resume a breakpoint, you can do this simply by pressing *F8*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想恢复断点，您可以简单地按*F8*。
- en: 'If you take a look into the **Console** view, you see the following output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看**控制台**视图，您会看到以下输出：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, the debugger prints the current value of the `i` variable in
    each cycle of the loop, and also the result of the calculation at the end.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，调试器在每个循环周期中打印`i`变量的当前值，以及计算结果的最终结果。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The debugger stops only at breakpoints that are placed on lines that have executable
    source code. If you set a breakpoint on an empty line, the debugger will ignore
    it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器仅在放置在具有可执行源代码的行上的断点处停止。如果您在空行上设置断点，调试器将忽略它。
- en: If you have placed several breakpoints in your script, and you don't need some
    of them in the actual execution of the script, you have the option to disable
    your breakpoints.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在脚本中放置了多个断点，而在脚本的实际执行中不需要其中一些，您可以选择禁用您的断点。
- en: Time for action – disabling a breakpoint
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 禁用断点
- en: Open the **Breakpoints** view and search the unnecessary breakpoints.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**断点**视图并搜索不必要的断点。
- en: Deselect the checkbox on the left-hand side of the breakpoint entry.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中断点条目左侧的复选框。
- en: Alternatively, you can search the breakpoint line within the editor.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您也可以在编辑器中搜索断点行。
- en: Right-click on the blue breakpoint beside the line number.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在行号旁边的蓝色断点上单击鼠标右键。
- en: Select **Breakpoints properties…** and deselect the **Enabled** checkbox.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**断点属性…**并取消选中**启用**复选框。
- en: Finally, click on **OK**.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击**确定**。
- en: '*What just happened?*'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You have deactivated a breakpoint by using the **Breakpoints** view and selecting
    the **Breakpoints properties...** beside the editor's line numbers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过使用**断点**视图并在编辑器的行号旁边选择**断点属性…**来禁用断点。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Identify disabled breakpoints**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**识别禁用断点**'
- en: To identify disabled and enabled breakpoints in the whole IDE is very easy.
    Disabled breakpoints are always displayed with a white point, and enabled breakpoints
    always with a blue point.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整个IDE中识别禁用和启用断点非常容易。禁用断点始终以白色点显示，启用断点始终以蓝色点显示。
- en: Time for action – setting a hit count on a breakpoint
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 在断点上设置命中次数
- en: Search the line of our currently placed breakpoint.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索我们当前放置断点的行。
- en: Right-click on the blue breakpoint on the left-hand side of the related line
    number.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相关行号左侧的蓝色断点上单击鼠标右键。
- en: Select the **Breakpoints properties…** entry.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**断点属性…**条目。
- en: Select the **Hit Count** checkbox and enter the number `3`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**命中次数**复选框并输入数字`3`。
- en: Execute the file within the debugger.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调试器中执行文件。
- en: '*What just happened?*'
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Now we adjusted our breakpoint, so that it's not stopped just at the third time
    it's reached.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们调整了断点，使其不仅仅在第三次到达时停止。
- en: This is very useful, if you already know that the problem within your loop happens
    for the first time in the third cycle. Now the debugger also stops just within
    the cycle where you want to search for the problem.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经知道您循环中的问题在第三次循环时首次发生，这将非常有用。现在调试器也会在您想要查找问题的循环中停止。
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Identify breakpoints with a hit count or a condition**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用命中次数或条件来识别断点**'
- en: By working with the **Breakpoints** view and within the editor, you can always
    identify a breakpoint with a hit count or a condition through the small question
    mark on the left-hand side of the point.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与**断点**视图和编辑器一起工作，您可以通过点左侧的小问号始终使用命中次数或条件来识别断点。
- en: If you want to search for errors, the **Variables** view is very useful. The
    **Variables** view displays all variables with their values, and the type in which
    the variable was defined and the actual type which the variable has within the
    current scope of the breakpoint. In order to select the columns that are displayed,
    you can navigate to **View Menu** to **Layout** | **Show columns**.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查找错误，**变量** 视图非常有用。**变量** 视图显示所有变量及其值，以及变量定义的类型和变量在当前断点作用域中的实际类型。为了选择显示的列，您可以导航到
    **视图菜单** 中的 **布局** | **显示列**。
- en: '![What just happened?](img/8246_04_11.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/8246_04_11.jpg)'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Variables** view only displays information when a breakpoint stops your
    JavaScript.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量** 视图仅在断点停止您的 JavaScript 时显示信息。'
- en: Time for action – inspecting variables at a breakpoint and changing their values
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在断点处检查变量并更改它们的值
- en: Execute the last debugged JavaScript code, with the placed Hit Count breakpoint.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行最后调试的 JavaScript 代码，并设置 Hit Count 断点。
- en: When the script stops at the breakpoint, open the **Variables** view in Aptana
    Studio.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当脚本在断点处停止时，在 Aptana Studio 中打开 **变量** 视图。
- en: Take a look at the list of variables and check if they are correct.![Time for
    action – inspecting variables at a breakpoint and changing their values](img/8246_04_12.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看变量列表并检查它们是否正确。![行动时间 – 在断点处检查变量并更改它们的值](img/8246_04_12.jpg)
- en: Perform a double-click on the value of the `loopEnd` variable and change the
    value from `5` to `7`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `loopEnd` 变量的值，将其从 `5` 更改为 `7`。
- en: Press *Enter* to take the new value.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Enter* 键以接受新值。
- en: After that press *F8* to resume the debug process.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，按 *F8* 键以继续调试过程。
- en: '*What just happened?*'
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: 'Now you have inspected the current variables on a breakpoint and changed the
    `loopEnd` variable to a new value. By finishing the script the **Console** view
    should have the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已检查了断点处的当前变量，并将 `loopEnd` 变量更改为新值。通过完成脚本，**控制台** 视图应该有如下输出：
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the script assumes the new variable value directly and now executes
    seven cycles.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，脚本直接假设新的变量值，并现在执行了七个循环。
- en: Studio AJAX monitor
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Studio AJAX 监视器
- en: If you're developing an application, which sends a lot of AJAX requests during
    the whole execution time, it's often necessary to know what kind of data is returned.
    For this, Aptana Studio provides the **Studio AJAX Monitor**, in which you're
    able to track all AJAX requests and their responses.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发一个在整个执行过程中发送大量 AJAX 请求的应用程序，了解返回的数据类型通常是必要的。为此，Aptana Studio 提供了 **Studio
    AJAX 监视器**，在其中您可以跟踪所有 AJAX 请求及其响应。
- en: The **Studio AJAX Monitor** consists of three parts. First, there is the overview
    about all requests. Here you can see which URL is requested by which method, and
    at what time.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**Studio AJAX 监视器** 由三部分组成。首先，是所有请求的概述。在这里，您可以查看哪个 URL 使用哪种方法请求，以及请求的时间。'
- en: The other two parts are each a part of the request information and the response
    information. Both are separated in a **Headers** area and a **Body** area where
    you can inspect the AJAX request in detail.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两部分分别是请求信息和响应信息的一部分。它们都分别位于 **头部** 区域和 **主体** 区域，您可以在这里详细检查 AJAX 请求。
- en: '![Studio AJAX monitor](img/8246_04_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Studio AJAX 监视器](img/8246_04_13.jpg)'
- en: 'For the *Time for action – installing the Debugger Extension* section, we need
    a small script like the following one:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *行动时间 – 安装调试器扩展* 部分，我们需要一个像以下这样的小脚本：
- en: '[PRE8]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Time for action – uninstalling the Aptana Debugger Extension
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 卸载 Aptana 调试器扩展
- en: Open a JavaScript file or an HTML file with a JavaScript tag and place the JavaScript
    code within it.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个包含 JavaScript 标签的 JavaScript 文件或 HTML 文件，并将 JavaScript 代码放置在其中。
- en: Execute the debugging and open the **Studio AJAX Monitor** view.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行调试并打开 **Studio AJAX 监视器** 视图。
- en: Now the browser executes an AJAX request, and we are able to inspect them within
    the **Studio AJAX Monitor** view.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在浏览器执行 AJAX 请求，我们能够在 **Studio AJAX 监视器** 视图中检查它们。
- en: Take a look at the listed AJAX request within the view.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看视图中列出的 AJAX 请求。
- en: '*What just happened?*'
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You have fired a simple AJAX request and the request is directly listed in the
    **Studio AJAX Monitor** view. Here you are able to inspect the request, at what
    moment it starts, what kind of headers are sent, and which data is in the response.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您已发送了一个简单的 AJAX 请求，该请求直接列在 **Studio AJAX 监视器** 视图中。在这里，您可以检查请求，它在何时开始，发送了什么类型的头部，以及响应中包含哪些数据。
- en: '![What just happened?](img/8246_04_14.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/8246_04_14.jpg)'
- en: Uninstalling the debugger
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载调试器
- en: Maybe you want to uninstall Aptana Studio or whatever, and you want to uninstall
    the Aptana Debugger too.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你想卸载 Aptana Studio 或其他软件，并且你也想卸载 Aptana 调试器。
- en: Let's take a look at how to uninstall the Aptana Firefox Extension.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何卸载 Aptana Firefox 扩展。
- en: Time for action – uninstalling the Aptana Debugger Extension
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 卸载 Aptana 调试器扩展
- en: Open Firefox and navigate to **Tools** | **Add-Ons**.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Firefox 并导航到 **工具** | **附加组件**。
- en: Select the **Extensions** section.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **扩展** 部分。
- en: Select the **Aptana Debugger** Extension and click on **Remove**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Aptana 调试器** 扩展，然后点击 **移除**。
- en: Finally restart Firefox.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后重新启动 Firefox。
- en: '*What just happened?*'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have just removed the Aptana Debugger Extension from your Firefox. Now the
    extension is no longer available.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚从你的 Firefox 中移除了 Aptana 调试器扩展。现在该扩展不再可用。
- en: Have a go hero – selecting a JavaScript file which you didn't code yourself
    and inspect the functionality by using the debugger
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 - 选择一个你未编写的 JavaScript 文件，并使用调试器检查其功能
- en: Now your task is to go forward and select a JavaScript file, which is coded
    by another developer. Integrate it to a simple HTML wrapper file and try to inspect
    the functionality. Use the **Breakpoints** and the **Log** functions in order
    to learn how the script works.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的任务是前进并选择一个由其他开发者编写的 JavaScript 文件。将其集成到一个简单的 HTML 包装文件中，并尝试检查其功能。使用 **断点**
    和 **日志** 函数来学习脚本是如何工作的。
- en: Pop quiz
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答
- en: Q1\. Which function you have to call, if you want to print a backtrace within
    your **Console** view?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 如果你想在 **控制台** 视图中打印回溯，你必须调用哪个函数？
- en: The `aptana.log()` function.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`aptana.log()` 函数。'
- en: The `aptana.print()` function.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`aptana.print()` 函数。'
- en: The `aptana.trace()` function.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`aptana.trace()` 函数。'
- en: Q2\. Why is it necessary to remove all Aptana functions when your application
    goes into public use?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 为什么当你的应用程序进入公共使用时，有必要移除所有 Aptana 函数？
- en: Because all users of your application received your debug messages.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为所有使用你应用程序的用户都收到了你的调试消息。
- en: Because all users of your application received error messages, as the Aptana
    object isn't available in a non-debugger use case.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为所有使用你应用程序的用户都收到了错误消息，因为在非调试器使用情况下，Aptana 对象不可用。
- en: It's not necessary to remove the Aptana functions. The script works fine with
    or without it.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有必要移除 Aptana 函数。脚本有或没有它都能正常工作。
- en: Q3\. Why don't you place a breakpoint within an empty line?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 为什么你不在空行内放置断点？
- en: Because the debugger stops the debugging in this line.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为调试器会在此行停止调试。
- en: Because the debugger ignores the breakpoint and the script will continue.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为调试器会忽略断点，脚本将继续执行。
- en: There's no reason. Placing a breakpoint on an empty line works fine.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有理由。在空行上放置断点也能正常工作。
- en: Q4\. Which color has a disabled breakpoint?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 禁用的断点是什么颜色？
- en: Disabled breakpoints are red.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用的断点是红色。
- en: Disabled breakpoints are blue.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用的断点是蓝色。
- en: Disabled breakpoints are white.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用的断点是白色。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By the end of this chapter, you should be able to debug your JavaScript code.
    This means, you should know how to set and remove breakpoints, and also how to
    find available breakpoints.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够调试你的 JavaScript 代码。这意味着，你应该知道如何设置和移除断点，以及如何找到可用的断点。
- en: If a breakpoint stops the execution within your code, you should know how you
    are able to inspect the variables in the current state of your application.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果断点在代码中停止执行，你应该知道如何检查你应用程序当前状态下的变量。
- en: Now we're ready to start up with the next chapter, where we'll take a look at
    how we can document our JavaScript files and projects.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始下一章，我们将探讨如何记录我们的 JavaScript 文件和项目。
