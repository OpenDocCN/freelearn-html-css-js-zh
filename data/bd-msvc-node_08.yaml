- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Debugging Microservices in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js中的微服务调试
- en: Debugging microservices in Node.js involves identifying and resolving issues
    or errors that occur within various services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中调试微服务涉及识别和解决在各个服务中发生的问题或错误。
- en: We’ll start this chapter by debugging microservices in Node.js for microservices
    development. Remember that debugging microservices can be challenging due to their
    distributed nature and interaction with other services. A systematic and methodical
    approach, combined with the appropriate tools and techniques, will help you effectively
    debug your Node.js microservices and identify and resolve issues efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，通过调试Node.js中的微服务来介绍微服务开发。请记住，由于微服务的分布式特性和与其他服务的交互，调试微服务可能会很具挑战性。结合适当的工具和技术，系统性和有条理的方法将帮助您有效地调试Node.js微服务，并高效地识别和解决问题。
- en: By the end of this chapter, you will be able to debug robust microservices in
    Node.js to examine and find problems faster while developing to ensure better
    quality of software.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够调试健壮的Node.js微服务，以便在开发过程中更快地检查和发现问题，从而确保软件质量更好。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Logging and debugging tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志和调试工具
- en: Debugging in containers and error handling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器中的调试和错误处理
- en: Unit testing and remote debugging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试和远程调试
- en: Instrumentation and tracing and environment and configuration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪器化和跟踪以及环境和配置
- en: Reproducing and isolating issues and debugging tools and libraries
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复现和隔离问题以及调试工具和库
- en: Logging and debugging tools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志和调试工具
- en: In this section, we’re going to explore logging and debugging tools that will
    help us in our everyday work to find solutions to software application bugs faster.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨日志和调试工具，这些工具将帮助我们更快地找到软件应用程序错误的解决方案。
- en: Logging in microservices
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的日志记录
- en: '**Logging** is a crucial aspect of microservices architecture, providing insights
    into the behavior, performance, and errors within the system.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志记录**是微服务架构的一个关键方面，它提供了对系统行为、性能和错误的洞察。'
- en: 'Here are the key aspects of logging in microservices:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务日志记录的关键方面如下：
- en: '**Centralized logging**: Utilize centralized logging systems such as ELK Stack
    or Fluentd to aggregate logs from various microservices. Centralized logging simplifies
    troubleshooting by providing a unified view of application behavior.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式日志记录**：利用集中式日志记录系统，如ELK Stack或Fluentd，从各种微服务中聚合日志。集中式日志记录通过提供应用程序行为的统一视图来简化故障排除。'
- en: '**Structured logging**: Implement structured logging where log messages are
    in a standardized format (JSON or key-value pairs). Structured logs are easier
    to analyze and can be efficiently processed by log aggregation systems.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化日志记录**：实现结构化日志记录，其中日志消息采用标准格式（JSON或键值对）。结构化日志更容易分析，并且可以被日志聚合系统高效处理。'
- en: '`info`, `warn`, `error`, `debug`, and so on) to categorize log messages. `info`
    is for general information, `warn` is for potential issues, `error` is for critical
    errors, and `debug` is for detailed debugging information. You can adjust log
    levels dynamically based on your deployment environments.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`info`、`warn`、`error`、`debug`等来对日志消息进行分类。`info`用于一般信息，`warn`用于潜在问题，`error`用于关键错误，而`debug`用于详细的调试信息。您可以根据您的部署环境动态调整日志级别。
- en: '**Contextual logging**: Include contextual information such as request IDs,
    user IDs, and transaction IDs in log entries. This context helps in tracing specific
    requests across microservices, aiding in debugging and monitoring. For example,
    to ensure that sensitive data such as PHI in the medical domain or bank details
    in the banking domain are not inadvertently logged in a Node.js project, it is
    important to implement proper contextual logging and data masking techniques:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文日志记录**：在日志条目中包含上下文信息，例如请求ID、用户ID和事务ID。这种上下文有助于在微服务之间跟踪特定请求，有助于调试和监控。例如，为了确保在医疗领域（如PHI）或银行领域（如银行详情）的敏感数据不会意外地记录在Node.js项目中，实施适当的上下文日志记录和数据掩码技术是非常重要的：'
- en: '**Contextual logging for sensitive data**: Identify the sensitive data elements
    that should not be logged, such as PHI or bank details. Implement contextual logging
    so that sensitive data is not logged in the first place. This can be achieved
    by applying logic to exclude specific fields or properties from being logged.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感数据的上下文日志**：确定不应记录的敏感数据元素，例如PHI或银行详情。实施上下文日志记录以确保敏感数据从一开始就不会被记录。这可以通过应用逻辑来排除特定字段或属性被记录来实现。'
- en: '**Data masking**: Apply data masking techniques to obfuscate sensitive data
    before it is logged. For example, you can replace actual bank details with masked
    values or use techniques such as redaction or tokenization.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据屏蔽**：在记录之前应用数据屏蔽技术以混淆敏感数据。例如，你可以用屏蔽值替换实际的银行详情或使用诸如编辑或标记化等技术。'
- en: '**Access control**: Implement access controls to restrict which users or roles
    can view sensitive data in logs. Ensure that only authorized personnel have access
    to logs containing sensitive information.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制**：实施访问控制以限制哪些用户或角色可以查看日志中的敏感数据。确保只有授权人员才能访问包含敏感信息的日志。'
- en: '**Regular auditing**: Regularly audit the logging configuration and code to
    ensure that sensitive data is consistently excluded from logs. This can help you
    identify any unintentional leaks of sensitive information.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期审计**：定期审计日志配置和代码以确保敏感数据始终被排除在日志之外。这有助于你识别任何无意中泄露的敏感信息。'
- en: '**Encryption**: Consider encrypting sensitive data before logging it so that
    even if the logs are accessed by unauthorized users, the data remains protected.
    By implementing these measures, you can help ensure that sensitive data is not
    inadvertently logged in a Node.js project, reducing the risk of data breaches
    and maintaining compliance with data protection regulations.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：在记录之前考虑对敏感数据进行加密，以便即使日志被未经授权的用户访问，数据仍然受到保护。通过实施这些措施，你可以帮助确保敏感数据不会意外地记录在Node.js项目中，从而降低数据泄露的风险并保持符合数据保护法规。'
- en: '**Log rotation and retention**: Implement log rotation to manage log file sizes
    and prevent them from consuming excessive storage. Define log retention policies
    to ensure that logs are kept for an appropriate period for auditing and debugging
    purposes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志轮转和保留**：实施日志轮转以管理日志文件大小并防止其消耗过多的存储空间。定义日志保留策略以确保日志保留适当的时间，用于审计和调试目的。'
- en: 'To ensure secure logging and regular log updates in microservices, you can
    consider the following best practices:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保微服务中的安全日志记录和定期日志更新，你可以考虑以下最佳实践：
- en: '**Use secure logging practices**: Implement secure logging mechanisms to ensure
    that sensitive data is not exposed in the logs. This may involve redacting or
    masking sensitive information before logging it.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的日志记录实践**：实施安全的日志记录机制以确保敏感数据不会在日志中暴露。这可能涉及在记录之前对敏感信息进行编辑或屏蔽。'
- en: '**Implement log integrity and authorization**: Use digital signatures and access
    control mechanisms to ensure the integrity and security of log data. Only authorized
    personnel should have access to the logs.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施日志完整性和授权**：使用数字签名和访问控制机制来确保日志数据的完整性和安全性。只有授权人员应该有权访问日志。'
- en: '**Log aggregation and analysis**: Implement log aggregation solutions to centralize
    logs from multiple microservices. Use analysis tools to monitor logs for security
    events and anomalies.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志聚合和分析**：实施日志聚合解决方案以集中来自多个微服务的日志。使用分析工具监控日志以查找安全事件和异常。'
- en: '**Continuous log reviews**: Regularly review and analyze the logs for security
    and performance issues. This can help in identifying and addressing any potential
    security vulnerabilities in the microservices.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续日志审查**：定期审查和分析日志以查找安全和性能问题。这有助于识别和解决微服务中任何潜在的安全漏洞。'
- en: '**Versioned logging**: Implement versioning for log messages to ensure consistency
    and facilitate easier troubleshooting. By following these practices, you can ensure
    secure logging, regular log updates, and continuous reviews in microservices,
    all of which are crucial for maintaining the security and integrity of your system.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本化日志**：对日志消息实施版本控制，以确保一致性和便于更容易的故障排除。通过遵循这些实践，你可以确保安全的日志记录、定期的日志更新以及微服务中的持续审查，这些都是维护系统安全和完整性的关键。'
- en: Effective logging practices contribute to system reliability, ease of troubleshooting,
    and the ability to identify and address issues promptly. By implementing structured
    and contextual logging, and by leveraging centralized logging tools, microservices
    architectures can maintain visibility into their operation and performance. With
    these concepts covered, we can learn more about debugging tools.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的日志记录实践有助于提高系统可靠性、故障排除的便捷性以及及时识别和解决问题的能力。通过实施结构化和上下文日志记录，并利用集中式日志记录工具，微服务架构可以保持对其操作和性能的可见性。在这些概念的基础上，我们可以进一步了解调试工具。
- en: Debugging tools
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试工具
- en: '**Debugging tools** in microservices are software applications or libraries
    that help developers identify and fix errors, performance issues, or other problems
    in their microservices architecture. Some of the common features of debugging
    tools are logging, tracing, monitoring, crash reporting, and data collection.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的调试工具**是帮助开发者识别和修复其微服务架构中的错误、性能问题或其他问题的软件应用程序或库。调试工具的一些常见功能包括日志记录、跟踪、监控、崩溃报告和数据收集。'
- en: 'Here are the key concepts for debugging tools in microservices:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是微服务调试工具的关键概念：
- en: '**Debuggers**: Use Node.js debuggers such as Chrome DevTools, VS Code debugger,
    or Node.js Inspector for interactive debugging. These tools allow developers to
    set breakpoints, inspect variables, and step through code execution.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试器**：使用Node.js调试器，如Chrome DevTools、VS Code调试器或Node.js Inspector进行交互式调试。这些工具允许开发者设置断点、检查变量以及逐步执行代码。'
- en: '**Profiling tools**: Employ profiling tools such as Clinic.js or Node.js’ built-in
    CPU and memory profilers to identify performance bottlenecks. Profiling helps
    optimize code and enhance overall system efficiency. For example, the V8 profiler
    is a profiling tool that’s used for analyzing the performance of JavaScript code
    running in the V8 JavaScript engine, which is used in Google Chrome and Node.js.
    It can be used to identify performance bottlenecks and optimize the code for better
    performance. The V8 profiler provides insights into the execution time, memory
    consumption, and CPU usage of JavaScript code, helping developers to improve the
    efficiency of their applications.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能分析工具**：使用性能分析工具，如Clinic.js或Node.js内置的CPU和内存分析器来识别性能瓶颈。性能分析有助于优化代码并提高整体系统效率。例如，V8分析器是一种用于分析在V8
    JavaScript引擎中运行的JavaScript代码的性能分析工具，该引擎用于Google Chrome和Node.js。它可以用来识别性能瓶颈并优化代码以获得更好的性能。V8分析器提供了关于JavaScript代码的执行时间、内存消耗和CPU使用的洞察，帮助开发者提高其应用程序的效率。'
- en: '**Distributed tracing**: Utilize distributed tracing tools such as Jaeger,
    Zipkin, or OpenTelemetry. Distributed traces provide insights into the flow of
    requests across microservices, aiding in identifying latency issues and bottlenecks.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式跟踪**：利用分布式跟踪工具，如Jaeger、Zipkin或OpenTelemetry。分布式跟踪提供了对请求在微服务之间流动的洞察，有助于识别延迟问题和瓶颈。'
- en: '**Error tracking systems**: Integrate error tracking systems such as Sentry,
    Rollbar, or New Relic. These tools automatically capture errors and exceptions,
    providing detailed reports, stack traces, and context information, which are invaluable
    for rapid issue resolution.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误跟踪系统**：集成错误跟踪系统，如Sentry、Rollbar或New Relic。这些工具自动捕获错误和异常，提供详细的报告、堆栈跟踪和上下文信息，这对于快速解决问题至关重要。'
- en: '**Log analysis tools**: Use log analysis tools such as Loggly, Splunk, or Sumo
    Logic. These tools offer advanced log searching, filtering, and visualization
    capabilities, helping in deep analysis of application behavior and issue diagnosis.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析工具**：使用日志分析工具，如Loggly、Splunk或Sumo Logic。这些工具提供高级的日志搜索、过滤和可视化功能，有助于深入分析应用程序行为和问题诊断。'
- en: '**Chaos engineering tools**: Implement chaos engineering tools such as Chaos
    Monkey (from Netflix’s Simian Army) or Gremlin. Chaos engineering involves intentionally
    injecting failures into a system to test its resilience and identify weaknesses
    before they cause real incidents.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混沌工程工具**：实施混沌工程工具，例如来自Netflix的Simian Army的Chaos Monkey或Gremlin。混沌工程涉及故意向系统中注入故障以测试其弹性并识别弱点，防止它们引发真实事件。'
- en: '**Custom debug endpoints**: Create custom endpoints in microservices specifically
    for debugging purposes. These endpoints can provide detailed internal state information,
    configuration settings, or metrics that are useful for diagnosing issues without
    exposing sensitive data to external sources. In a Node.js microservice, you can
    create custom debug endpoints to expose specific debugging information.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义调试端点**：在微服务中创建专门用于调试目的的自定义端点。这些端点可以提供详细的内部状态信息、配置设置或有助于诊断问题的指标，而不会将敏感数据暴露给外部来源。在Node.js微服务中，您可以创建自定义调试端点来公开特定的调试信息。'
- en: 'Here’s an example of how you can implement custom debugging endpoints using
    the Express framework:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个使用Express框架实现自定义调试端点的示例：
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, we created two custom debug endpoints called `'/debug/health'`
    and `'/debug/system'` using Express. The `'/debug/health'` endpoint is responsible
    for providing the health status of the microservice, while the `'/debug/system'`
    endpoint provides system information such as memory and CPU usage. You can add
    more custom debug endpoints based on your specific debugging requirements. These
    endpoints can help you monitor and troubleshoot your microservices during development
    and in production environments.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用Express创建了两个自定义调试端点，分别命名为 `'/debug/health'` 和 `'/debug/system'`。`'/debug/health'`
    端点负责提供微服务的健康状态，而 `'/debug/system'` 端点提供系统信息，例如内存和CPU使用情况。根据您的特定调试需求，您可以添加更多自定义调试端点。这些端点可以帮助您在开发和生产环境中监控和调试微服务。
- en: With the right debugging tools, you will ace the path of solving problems in
    every stage of software.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正确的调试工具，您将能够解决软件开发各个阶段的难题。
- en: '*Figure 8**.1* illustrates the process of logging and debugging:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8**.1* 展示了日志记录和调试的过程：'
- en: '![Figure 8.1: The process of logging and debugging (image by vectorjuice on
    Freepik)](img/B14980_08_01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：日志记录和调试的过程（图片由vectorjuice在Freepik提供）](img/B14980_08_01.jpg)'
- en: 'Figure 8.1: The process of logging and debugging (image by vectorjuice on Freepik)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：日志记录和调试的过程（图片由vectorjuice在Freepik提供）
- en: In summary, by employing a combination of centralized logging, robust debugging
    tools, and proactive monitoring practices, developers can effectively identify,
    diagnose, and resolve issues in microservices-based applications, ensuring a reliable
    and responsive user experience.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过结合使用集中式日志记录、强大的调试工具和主动监控实践，开发者可以有效地识别、诊断和解决基于微服务的应用程序中的问题，确保可靠和响应迅速的用户体验。
- en: Now that you understand these concepts, let’s consider debugging in containers
    and error handling.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经理解了这些概念，让我们考虑容器中的调试和错误处理。
- en: Debugging in containers and error handling
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器中的调试和错误处理
- en: Debugging in containers and error handling is a major milestone in the process
    of checking logs and problems while deploying software solutions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中进行调试和错误处理是部署软件解决方案时检查日志和问题的重大里程碑。
- en: Debugging in containers
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器中的调试
- en: '**Debugging** in containers is the process of finding and fixing errors, performance
    issues, or other problems in applications that run inside Docker containers. Docker
    containers are isolated environments that package the code, dependencies, and
    configuration of an application, making it easier to deploy and run on any platform.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器中的调试**是寻找和修复在Docker容器中运行的应用程序中的错误、性能问题或其他问题的过程。Docker容器是隔离的环境，它们打包了应用程序的代码、依赖项和配置，使得在任何平台上部署和运行变得更加容易。'
- en: 'Let’s look at the key aspects of debugging in containers:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看容器调试的关键方面：
- en: '`docker exec -it <container_id> /bin/bash` enable direct interaction, allowing
    you to inspect files, run commands, and troubleshoot in real time. The `docker
    exec` command runs a new command inside a running container.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker exec -it <container_id> /bin/bash` 允许直接交互，让您能够实时检查文件、运行命令和进行故障排除。`docker
    exec` 命令在运行的容器中运行新的命令。'
- en: 'Here’s a breakdown of the command:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是命令的分解：
- en: '`docker exec`: This part of the command runs a new command in a running container.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker exec`：命令的这一部分在运行的容器中运行新的命令。'
- en: '`-it`: This option is used to allocate a pseudo-TTY and keep STDIN open, even
    if it’s not attached. This allows you to interact with the shell inside the container.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-it`：此选项用于分配伪TTY并保持STDIN打开，即使它未连接。这允许您与容器内部的shell进行交互。'
- en: '`<container_id>`: This is the ID or name of the container where the command
    will be executed.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<container_id>`：这是将要执行命令的容器的ID或名称。'
- en: '`/bin/bash`: This is the command that will be run inside the container. In
    this case, `/bin/bash` starts a new Bash shell session inside the container.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/bin/bash`：这是将在容器内运行的命令。在这种情况下，`/bin/bash`在容器内启动一个新的Bash shell会话。'
- en: So, when you run `docker exec -it <container_id> /bin/bash`, you will start
    a new interactive Bash shell session inside the specified container.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，当您运行`docker exec -it <container_id> /bin/bash`时，您将在指定的容器内启动一个新的交互式Bash shell会话。
- en: '**Logging within containers**: Ensure that your applications log extensively
    while within containers. Centralized logging solutions can aggregate logs across
    multiple containers, making it easier to trace issues.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器内的日志记录**：确保您的应用程序在容器内进行广泛的日志记录。集中式日志解决方案可以聚合多个容器的日志，使问题跟踪更加容易。'
- en: '**Remote debugging**: Tools such as VS Code and WebStorm allow remote debugging
    of Node.js applications within containers. By exposing debugging ports, you can
    attach debuggers from your development environment to containers, enabling real-time
    debugging.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程调试**：VS Code和WebStorm等工具允许在容器内进行Node.js应用程序的远程调试。通过暴露调试端口，您可以将调试器从您的开发环境附加到容器，实现实时调试。'
- en: '**Health checks**: Implement health checks in your Docker containers. Health
    checks can be custom scripts or simple HTTP endpoints that Docker can use to verify
    the container’s health. Unhealthy containers can be automatically restarted or
    replaced. Healthy and unhealthy containers are terms that are used to describe
    the status of Docker containers based on their workload availability. Docker containers
    are isolated environments that run applications on any platform.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康检查**：在您的Docker容器中实现健康检查。健康检查可以是自定义脚本或简单的HTTP端点，Docker可以使用这些端点来验证容器的健康状态。不健康的容器可以自动重启或替换。健康和不健康的容器是描述Docker容器状态的术语，基于其工作负载的可用性。Docker容器是运行在任何平台上的应用程序的隔离环境。'
- en: '`inspect` command to get detailed information about a running container. This
    information can be invaluable for diagnosing issues, understanding network configurations,
    and checking resource usage.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`inspect`命令获取正在运行的容器的详细信息。这些信息对于诊断问题、了解网络配置和检查资源使用情况非常有价值。
- en: Communication protocols are an essential way to ensure the quality of services
    and microservices.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通信协议是确保服务和微服务质量的一种基本方式。
- en: '*Figure 8**.2* depicts the process of debugging in containers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8**.2*展示了容器中调试的过程：'
- en: '![Figure 8.2: Debugging in containers (image by macrovector on Freepik)](img/B14980_08_02.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：容器中的调试（由Freepik上的macrovector提供）](img/B14980_08_02.jpg)'
- en: 'Figure 8.2: Debugging in containers (image by macrovector on Freepik)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：容器中的调试（由Freepik上的macrovector提供）
- en: With these concepts learned, we can continue with error handling.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续进行错误处理。
- en: Error handling
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: '**Error handling** in microservices is a topic that involves how to deal with
    failures and exceptions that may occur in a distributed system composed of multiple
    services.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理**在微服务中是一个涉及如何处理由多个服务组成的分布式系统中可能出现的故障和异常的话题。'
- en: 'Here’s how the error handling process works:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理过程如下：
- en: '**Graceful error responses**: Design your services so that they provide meaningful
    and consistent error responses. Include error codes, messages, and, if applicable,
    links to relevant documentation. Proper HTTP status codes (4xx for client errors
    and 5xx for server errors) provide clear indications of the error type.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅的错误响应**：设计您的服务，使其提供有意义的和一致的错误响应。包括错误代码、消息，如果适用，还包括相关文档的链接。适当的HTTP状态代码（4xx表示客户端错误，5xx表示服务器错误）提供了对错误类型的清晰指示。'
- en: '**Centralized error handling**: Implement centralized error handling within
    your microservices architecture. A middleware or global error handler can catch
    unhandled exceptions and provide uniform error responses, ensuring consistency
    across services.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式错误处理**：在您的微服务架构中实现集中式错误处理。一个中间件或全局错误处理器可以捕获未处理的异常并提供统一的错误响应，确保服务之间的一致性。'
- en: '**Error logging**: Log errors comprehensively. Include stack traces, timestamps,
    and contextual information. Centralized logging systems can collect these logs,
    providing a complete view of errors across your entire application.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误日志记录**：全面记录错误。包括堆栈跟踪、时间戳和上下文信息。集中式日志系统可以收集这些日志，为您提供整个应用程序的错误完整视图。'
- en: '**Retrying strategies**: For transient errors, implement retry mechanisms with
    exponential backoff. Retry policies can significantly reduce the impact of short-lived
    failures caused by network issues or temporary resource constraints.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重试策略**：对于短暂性错误，实现带有指数退避的重试机制。重试策略可以显著减少由网络问题或临时资源限制引起的短暂性失败的影响。'
- en: '**Circuit breaker pattern**: Implement the circuit breaker pattern to prevent
    cascading failures in a microservices environment. When a service consistently
    fails, the circuit breaker stops requests to that service, allowing it to recover
    and preventing further load.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断路器模式**：在微服务环境中实现断路器模式，以防止级联故障。当一个服务持续失败时，断路器停止对该服务的请求，使其有机会恢复，并防止进一步的负载。'
- en: '**Fallback mechanisms**: Implement fallback mechanisms for critical operations.
    If a service is unavailable, the system can provide degraded functionality or
    revert to cached data, ensuring the user experience isn’t completely disrupted.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回退机制**：为关键操作实现回退机制。如果服务不可用，系统可以提供降级功能或回滚到缓存数据，确保用户体验不会完全中断。'
- en: '**Monitoring and alerts**: Set up monitoring and alerts for specific error
    rates and patterns. Proactive alerts allow your team to respond quickly to emerging
    issues, preventing widespread service disruptions.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和警报**：针对特定的错误率和模式设置监控和警报。主动警报可以让您的团队能够快速响应新出现的问题，防止服务中断。'
- en: '**Post-mortem analysis**: Conduct post-mortem analyses for significant incidents.
    Understanding the root cause helps in implementing preventive measures, ensuring
    similar issues don’t recur.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事后分析**：对重大事件进行事后分析。了解根本原因有助于实施预防措施，确保类似问题不会再次发生。'
- en: With these concepts in mind, we can analyze the process of error handling better.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些概念的基础上，我们可以更好地分析错误处理的过程。
- en: In summary, by focusing on effective debugging strategies within containers
    and implementing robust error handling practices, you can significantly enhance
    the reliability, stability, and resilience of your microservices-based applications.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过关注容器内的有效调试策略并实施强大的错误处理实践，您可以显著提高基于微服务的应用程序的可靠性、稳定性和弹性。
- en: Next, we will talk about unit testing and remote debugging.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论单元测试和远程调试。
- en: Unit testing and remote debugging
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试和远程调试
- en: In microservices architecture, unit testing and remote debugging play a crucial
    role while developing microservices.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，单元测试和远程调试在开发微服务时发挥着至关重要的作用。
- en: Unit testing
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: '**Unit testing** is a software testing technique that verifies the functionality
    and quality of individual units or components of a software system. A unit can
    be a function, a method, a class, or any other isolated piece of code. Unit testing
    is usually performed by developers using automated tools or frameworks, and it
    helps with identifying and fixing bugs early in the development process.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**是一种软件测试技术，用于验证软件系统单个单元或组件的功能和质量。一个单元可以是函数、方法、类或任何其他隔离的代码片段。单元测试通常由开发人员使用自动化工具或框架执行，并在开发早期阶段帮助识别和修复错误。'
- en: 'Here are some key principles of unit testing:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是单元测试的一些关键原则：
- en: '**Testing frameworks**: Utilize testing frameworks such as Mocha, Jest, or
    Jasmine for Node.js applications. These frameworks provide structures for organizing
    tests and assertions.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试框架**：在Node.js应用程序中，利用Mocha、Jest或Jasmine等测试框架来组织测试和断言。'
- en: '`assert` module. Assertions validate whether the expected outcomes match the
    actual results, ensuring the correctness of your code.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert`模块。断言验证预期的结果是否与实际结果匹配，确保代码的正确性。'
- en: '**Mocking and stubbing**: Use libraries such as Sinon.js to create mocks and
    stubs. Mocking external dependencies and functions allows you to isolate the code
    under test, ensuring that tests focus on specific components.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟和存根**：使用Sinon.js等库来创建模拟和存根。模拟外部依赖和函数允许您隔离待测试的代码，确保测试专注于特定的组件。'
- en: '**Test runners**: Integrate your testing setup with CI/CD pipelines. Tools
    such as Jenkins, Travis CI, and GitHub Actions can automatically trigger tests
    on code commits, ensuring that new code changes don’t introduce regressions.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试执行器**：将测试设置与CI/CD管道集成。例如，Jenkins、Travis CI和GitHub Actions等工具可以自动在代码提交时触发测试，确保新的代码更改不会引入回归。'
- en: '**Coverage analysis**: Use tools such as Istanbul to measure code coverage.
    Code coverage analysis helps identify untested code paths, ensuring comprehensive
    testing of your application.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖率分析**：使用Istanbul等工具来衡量代码覆盖率。代码覆盖率分析有助于识别未测试的代码路径，确保应用程序的全面测试。'
- en: '**The Arrange, Act, Assert (AAA) pattern**: Follow the AAA pattern for unit
    tests: **Arrange** sets up preconditions, **Act** performs the test action, and
    **Assert** verifies the expected outcomes. This structured approach ensures clear
    and maintainable tests.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '** Arrange, Act, Assert (AAA) 模式**：对于单元测试，遵循AAA模式：**Arrange** 设置前置条件，**Act**
    执行测试操作，**Assert** 验证预期的结果。这种结构化方法确保了测试的清晰性和可维护性。'
- en: '**Parameterized tests**: Implement parameterized tests to run the same test
    logic with multiple inputs. Parameterized tests enhance test coverage and can
    be especially useful for testing edge cases.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数化测试**：实现参数化测试以使用多个输入运行相同的测试逻辑。参数化测试增强了测试覆盖率，对于测试边缘情况特别有用。'
- en: Unit testing, along with its frameworks and libraries, can help a lot of developers
    build robust microservices.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试及其框架和库可以帮助许多开发者构建健壮的微服务。
- en: Next, we’ll consider remote debugging.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将考虑远程调试。
- en: Remote debugging
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程调试
- en: '**Remote debugging** is the process of debugging an application that runs on
    a different machine or environment than your development environment.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程调试**是指调试运行在不同于开发环境的机器或环境中的应用程序的过程。'
- en: 'Here are some key concepts for remote debugging:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是远程调试的一些关键概念：
- en: '`inspect` or `inspect-brk` flag followed by the port number (for example, `--inspect=9229`).
    This exposes a debugging port that external debuggers can connect to.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inspect` 或 `inspect-brk` 标志后跟端口号（例如，`--inspect=9229`）。这会暴露一个调试端口，外部调试器可以连接到。'
- en: '`launch.json` file with the correct host and port for debugging. VS Code’s
    debugger can attach to your running Node.js process, allowing you to set breakpoints,
    inspect variables, and step through code.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含正确主机和端口号的`launch.json`文件，以便进行调试。VS Code的调试器可以附加到正在运行的Node.js进程，允许你设置断点、检查变量和逐步执行代码。
- en: '`--inspect` and open `chrome://inspect` in Chrome. You can then connect to
    your Node.js process and debug using the familiar Chrome DevTools interface.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--inspect`并在Chrome中打开`chrome://inspect`。然后你可以连接到你的Node.js进程，并使用熟悉的Chrome
    DevTools界面进行调试。
- en: '`--inspect` and use the `node inspect` command to launch the Inspector. It
    provides a **Read-Eval-Print Loop** (**REPL**) interface for debugging.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--inspect`并运行`node inspect`命令来启动Inspector。它提供了一个**读取-评估-打印循环（REPL）**接口用于调试。
- en: '**Dockerized remote debugging**: When running Node.js applications inside Docker
    containers, expose the debugging port in the Dockerfile. Ensure that the host
    and container ports are mapped correctly. This allows you to debug applications
    running within containers.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化远程调试**：当在Docker容器中运行Node.js应用程序时，在Dockerfile中暴露调试端口。确保主机和容器端口正确映射。这允许你调试容器内运行的应用程序。'
- en: '**Security considerations**: Be cautious when exposing debugging ports in production
    environments. Ensure that security measures such as authentication and firewall
    rules are in place to prevent unauthorized access to the debugging interface.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全考虑**：在生产环境中暴露调试端口时要谨慎。确保有安全措施，如身份验证和防火墙规则，以防止未经授权访问调试界面。'
- en: Remote debugging has its own software that makes the work of developers easier
    and faster.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 远程调试有其专门的软件，这使得开发者的工作更加轻松和高效。
- en: '*Figure 8**.3* illustrates unit testing and remote debugging:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8**.3* 展示了单元测试和远程调试：'
- en: '![Figure 8.3: Unit testing and remote debugging (image by vector4stock on Freepik)](img/B14980_08_03.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：单元测试和远程调试（图片由Freepik上的vector4stock提供）](img/B14980_08_03.jpg)'
- en: 'Figure 8.3: Unit testing and remote debugging (image by vector4stock on Freepik)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：单元测试和远程调试（图片由Freepik上的vector4stock提供）
- en: In summary, effective unit testing ensures that the individual components of
    your code base function as expected. Remote debugging tools enable developers
    to troubleshoot and diagnose issues in running applications, even in distributed
    or containerized environments, enhancing the development and maintenance processes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，有效的单元测试确保了代码库中各个组件按预期工作。远程调试工具使开发者能够诊断和解决运行中的应用程序中的问题，即使在分布式或容器化环境中，也能增强开发和维护过程。
- en: In the next section, we will learn about instrumentation and tracing and environment
    and configuration.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于仪器和跟踪以及环境和配置的内容。
- en: Instrumentation and tracing and environment and configuration
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪器和跟踪与环境和配置
- en: In this section, we will learn how to implement instrumentation and tracing
    and environment and configuration techniques to make the debugging and deployment
    process a breeze.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何实现仪器和跟踪以及环境和配置技术，使调试和部署过程变得轻松。
- en: Instrumentation and tracing
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪器和跟踪
- en: '**Instrumentation and tracing** are two related concepts in software development
    that help with monitoring, measuring, and diagnosing the performance and behavior
    of an application. Instrumentation refers to the ability to add code or annotations
    to the application that produce trace information, such as function calls, arguments,
    exceptions, and events, while tracing refers to the process of collecting, analyzing,
    and displaying the trace information, either in real time or offline, to understand
    the execution flow, identify bottlenecks, and troubleshoot errors.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**仪器和跟踪**是软件开发中的两个相关概念，有助于监控、测量和诊断应用程序的性能和行为。仪器化指的是向应用程序添加代码或注释以生成跟踪信息的能力，例如函数调用、参数、异常和事件，而跟踪则指的是收集、分析和显示跟踪信息的过程，无论是实时还是离线，以了解执行流程、识别瓶颈和排除错误。'
- en: 'Let’s explore the concepts of instrumentation and tracing in detail:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨仪器和跟踪的概念：
- en: '**Distributed tracing**: Implement distributed tracing using tools such as
    Jaeger, Zipkin, or OpenTelemetry. Distributed tracing allows you to track requests
    as they flow through various microservices, providing insights into latency and
    bottlenecks.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式跟踪**: 使用Jaeger、Zipkin或OpenTelemetry等工具实现分布式跟踪。分布式跟踪允许您跟踪请求在各个微服务中流动的情况，提供关于延迟和瓶颈的见解。'
- en: '**Application performance monitoring (APM) tools**: Use APM tools such as New
    Relic, Datadog, or AppDynamics. These tools offer detailed performance metrics,
    including response times, error rates, and database queries, to help you identify
    performance issues.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用性能监控（APM）工具**: 使用APM工具，如New Relic、Datadog或AppDynamics。这些工具提供详细性能指标，包括响应时间、错误率和数据库查询，以帮助您识别性能问题。'
- en: '**Custom instrumentation**: Instrument critical code paths with custom metrics.
    Measure functions, API calls, and external service interactions. Custom instrumentation
    provides specific insights tailored to your application’s unique requirements.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义仪器**: 使用自定义指标对关键代码路径进行仪器化。测量函数、API调用和外部服务交互。自定义仪器提供针对您应用程序独特需求的特定见解。'
- en: '**Logging context**: Implement context propagation in logs. Include unique
    identifiers such as request IDs in log entries. This context helps correlate logs
    across different microservices, aiding in traceability during debugging.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志上下文**: 在日志中实现上下文传播。在日志条目中包含唯一的标识符，如请求ID。这种上下文有助于在不同微服务之间关联日志，有助于调试期间的跟踪性。'
- en: '**Request-response logging**: Log detailed information about incoming requests
    and outgoing responses. Include headers, payloads, and processing times. Request-response
    logging aids in diagnosing issues related to external API interactions.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求-响应日志**: 记录关于传入请求和传出响应的详细信息。包括头信息、有效负载和处理时间。请求-响应日志有助于诊断与外部API交互相关的问题。'
- en: Instrumentation and tracing, with its various tools and techniques, help developers
    analyze problems that occur in software every day better and help them solve them
    faster.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 仪器和跟踪，凭借其各种工具和技术，有助于开发者更好地分析软件中每天发生的问题，并帮助他们更快地解决问题。
- en: In the next section, we will talk about environment and configuration.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论环境和配置。
- en: Environment and configuration
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境和配置
- en: '**Environment and configuration** are two important aspects of software development
    that affect how an application behaves and interacts with other components. Environment
    refers to the set of conditions and variables that affect the execution of an
    application, such as the operating system, the hardware, the network, the dependencies,
    and the settings, whereas configuration refers to the process of customizing and
    adjusting the parameters and options of an application, such as the connection
    strings, the logging levels, the feature flags, and the environment variables.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境和配置**是软件开发中的两个重要方面，影响应用程序的行为以及与其他组件的交互。环境指的是影响应用程序执行的条件和变量的集合，例如操作系统、硬件、网络、依赖项和设置，而配置则是指定和调整应用程序参数和选项的过程，例如连接字符串、日志级别、功能标志和环境变量。'
- en: 'Let’s take a look at the concepts of environment and configuration:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看环境和配置的概念：
- en: '**Environment variables**: Use environment variables to store configuration
    settings. Environment-specific configurations (development, staging, and production)
    can be managed easily, enhancing security and portability.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量**：使用环境变量来存储配置设置。特定环境的配置（开发、测试和生产）可以轻松管理，增强安全性和可移植性。'
- en: '**Secret management**: Store sensitive information such as API keys and database
    passwords securely. Utilize tools such as AWS Secrets Manager, Vault, or environment-specific
    secret files. Avoid hardcoding sensitive data directly in configuration files.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥管理**：安全地存储敏感信息，如API密钥和数据库密码。利用AWS Secrets Manager、Vault或特定环境的密钥文件等工具。避免直接在配置文件中硬编码敏感数据。'
- en: '**Configuration management systems**: Implement configuration management systems
    such as Consul or Terraform. These tools enable dynamic configuration updates
    without requiring service restarts, promoting flexibility and real-time adjustments.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理系统**：实施配置管理系统，如Consul或Terraform。这些工具允许在不要求服务重启的情况下进行动态配置更新，促进灵活性和实时调整。'
- en: '**Configuration as code**: Embrace the concept of configuration as code. Store
    configuration settings alongside your application code in version control systems.
    Infrastructure automation tools can then deploy applications with the correct
    configurations in various environments.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置即代码**：接受配置即代码的概念。将配置设置存储在与应用程序代码一起的版本控制系统中。然后，基础设施自动化工具可以在各种环境中部署具有正确配置的应用程序。'
- en: '**Container orchestration configurations**: Leverage container orchestration
    platforms such as Kubernetes or Docker Compose for managing microservices. These
    tools allow you to define configurations, environment variables, and secrets declaratively,
    simplifying deployment and scaling processes.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器编排配置**：利用Kubernetes或Docker Compose等容器编排平台来管理微服务。这些工具允许你声明性地定义配置、环境变量和密钥，简化部署和扩展过程。'
- en: '**Consistency across environments**: Ensure consistency in configurations across
    different environments. Use configuration templates and scripts to automate environment-specific
    adjustments, reducing the risk of misconfigurations during deployments.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境间一致性**：确保不同环境中的配置一致性。使用配置模板和脚本来自动化特定环境的调整，减少部署过程中配置错误的几率。'
- en: '**Configuration validation**: Implement validation checks for configurations
    during application startup. Ensure that mandatory configurations are present and
    have valid values. Configurations fail fast if essential configurations are missing
    or incorrect.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置验证**：在应用程序启动时实施验证检查。确保必要的配置存在且具有有效的值。如果缺少或配置错误，配置将快速失败。'
- en: '**Immutable infrastructure**: Aim for immutable infrastructure where servers
    and containers are never modified after creation. Immutable infrastructure promotes
    reliability and ensures that configurations remain consistent throughout the application’s
    life cycle.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可变基础设施**：追求不可变基础设施，其中服务器和容器在创建后永不修改。不可变基础设施促进可靠性并确保配置在整个应用程序生命周期中保持一致。'
- en: In summary, by incorporating robust instrumentation and tracing practices, you
    can gain insights into the performance and behavior of your microservices. Effective
    environment and configuration management, on the other hand, ensures that your
    microservices operate consistently across various environments, promoting stability
    and security throughout the development and deployment process.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过整合强大的仪器和跟踪实践，你可以深入了解你的微服务的性能和行为。另一方面，有效的环境和配置管理确保你的微服务在各种环境中保持一致性，从而在整个开发和部署过程中促进稳定性和安全性。
- en: In the final section, we are going to talk about how to reproduce and isolate
    issues, as well as various debugging tools and libraries.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们将讨论如何重现和隔离问题，以及各种调试工具和库。
- en: Reproducing and isolating issues and debugging tools and libraries
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重现和隔离问题以及调试工具和库
- en: In this section, you will learn how to reproduce and isolate issues and how
    to use debugging tools and libraries.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何重现和隔离问题，以及如何使用调试工具和库。
- en: Reproduce and isolate issues
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重现和隔离问题
- en: '**Reproducing and isolating issues** are important steps in software testing
    and debugging. They help you identify the root cause and the scope of a problem
    and provide clear and actionable feedback to developers.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**重现和隔离问题**是软件测试和调试的重要步骤。它们帮助您确定问题的根本原因和范围，并为开发者提供清晰且可操作的反馈。'
- en: 'Let’s learn how to reproduce and isolate issues:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何重现和隔离问题：
- en: '`assert` module in Node.js:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js中的`assert`模块：
- en: '[PRE16]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, we have a `testAdd` function that tests the `add` function
    by passing in two numbers and checking whether the result is equal to the expected
    value using `assert.strictEqual`. If the test passes, `'All tests passed'` will
    be printed to the console.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们有一个`testAdd`函数，它通过传入两个数字并使用`assert.strictEqual`检查结果是否等于预期值来测试`add`函数。如果测试通过，则会在控制台打印出`'All
    tests passed'`。
- en: '**Integration tests**: Develop integration tests that simulate interactions
    between microservices. These tests ensure that services work correctly together,
    helping identify issues related to communication protocols and data exchange.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：开发集成测试以模拟微服务之间的交互。这些测试确保服务能够正确协同工作，有助于识别与通信协议和数据交换相关的问题。'
- en: '**Scenario-based testing**: Create scenario-based tests that mimic real-world
    user interactions. These tests replicate user journeys through the application,
    enabling you to identify issues related to the flow of data and user experience.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于场景的测试**：创建基于场景的测试，模拟现实世界的用户交互。这些测试通过应用程序复制用户旅程，使您能够识别与数据流和用户体验相关的问题。'
- en: '**Staging environments**: Maintain staging environments that mirror the production
    setup as closely as possible. Reproducing issues in a staging environment provides
    a controlled space for testing fixes before deploying them to the live environment.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布环境**：维护尽可能接近生产设置的预发布环境。在预发布环境中重现问题为在将修复部署到生产环境之前提供了一个受控的测试空间。'
- en: '**Feature flags**: Use feature flags to enable or disable specific functionalities
    in production. Feature flags allow you to isolate problematic features or components
    without affecting the entire user base.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能标志**：在生产中使用功能标志来启用或禁用特定的功能。功能标志允许您隔离有问题的功能或组件，而不会影响整个用户群。'
- en: '**Isolation techniques**: Isolate microservices when testing by using techniques
    such as service virtualization. Service virtualization allows you to simulate
    the behavior of dependent services, enabling isolated testing of individual microservices.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离技术**：在测试时使用服务虚拟化等技术来隔离微服务。服务虚拟化允许您模拟依赖服务的行为，从而实现单个微服务的独立测试。'
- en: As we have learned, these concepts help us identify issues faster as we can
    reproduce them in an isolated environment and solve them before they hit production
    environments.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所学的，这些概念帮助我们更快地识别问题，因为我们可以在隔离环境中重现它们，并在它们进入生产环境之前解决它们。
- en: In the next section, we will learn more about debugging tools and libraries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习更多关于调试工具和库的内容。
- en: Debugging tools and libraries
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试工具和库
- en: '**Debugging tools and libraries** are software that help developers and testers
    find and fix errors in their code. There are many types of debugging tools and
    libraries, such as command-line debuggers, graphical debuggers, web debuggers,
    memory debuggers, and more. Some debugging tools and libraries are specific to
    a programming language, framework, or platform, while others are more general
    and can work with different technologies.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试工具和库**是帮助开发者和测试者找到并修复代码中错误的软件。有许多类型的调试工具和库，例如命令行调试器、图形调试器、网络调试器、内存调试器等。一些调试工具和库针对特定的编程语言、框架或平台，而其他则更通用，可以与不同的技术一起工作。'
- en: 'With the following concepts, tools, and libraries, we can debug our applications
    with ease:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下概念、工具和库，我们可以轻松地调试我们的应用程序：
- en: '**Logging and tracing**: Use structured logging to capture relevant information.
    Structured logs facilitate easy analysis by various logging tools. Implement distributed
    tracing to track requests across microservices, aiding in diagnosing issues.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录和跟踪**：使用结构化日志来捕获相关信息。结构化日志便于各种日志工具进行分析。实现分布式跟踪以跟踪跨微服务的请求，有助于诊断问题。'
- en: '**Chrome DevTools**: Leverage Chrome DevTools for Node.js applications. DevTools
    provides a comprehensive suite of debugging tools, allowing you to set breakpoints,
    inspect variables, profile performance, and analyze network activity.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chrome DevTools**：利用 Chrome DevTools 进行 Node.js 应用程序的调试。DevTools 提供了一套全面的调试工具，允许你设置断点、检查变量、分析性能和分析网络活动。'
- en: '**Debugger statements**: Insert debugger statements into your code. When the
    Node.js application hits a debugger statement, it pauses execution, allowing you
    to inspect the call stack and variable values interactively.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试语句**：将调试语句插入到你的代码中。当 Node.js 应用程序遇到调试语句时，它会暂停执行，允许你交互式地检查调用堆栈和变量值。'
- en: '`--inspect` and `--inspect-brk` to analyze CPU and memory usage. Profiling
    helps identify performance bottlenecks and memory leaks in your code.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--inspect` 和 `--inspect-brk` 分析 CPU 和内存使用情况。性能分析有助于识别代码中的性能瓶颈和内存泄漏。
- en: '**Error handling libraries**: Implement error handling libraries such as Sentry,
    Rollbar, or Bugsnag. These tools automatically capture errors and provide detailed
    reports, including stack traces and contextual information, aiding in rapid issue
    resolution.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理库**：实施错误处理库，如 Sentry、Rollbar 或 Bugsnag。这些工具自动捕获错误并提供详细的报告，包括堆栈跟踪和上下文信息，有助于快速解决问题。'
- en: '**Chaos engineering tools**: Implement tools such as Chaos Monkey or Gremlin
    for controlled chaos engineering experiments. Chaos engineering allows you to
    proactively identify weaknesses in your system’s resilience by introducing failures
    in a controlled manner.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混沌工程工具**：实施如 Chaos Monkey 或 Gremlin 等工具进行可控的混沌工程实验。混沌工程允许你通过以可控方式引入故障来主动识别系统弹性的弱点。'
- en: '**Remote debugging**: Utilize remote debugging capabilities so that you can
    debug applications running in remote environments or containers. Tools such as
    VS Code Remote Development facilitate seamless debugging of remote services.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程调试**：利用远程调试功能，以便你可以调试在远程环境或容器中运行的应用程序。如 VS Code Remote Development 等工具可以促进远程服务的无缝调试。'
- en: '**Custom debug endpoints**: Create custom debug endpoints in microservices.
    These endpoints can provide specific information about internal states, configurations,
    or metrics, aiding in diagnosing issues without exposing sensitive data.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义调试端点**：在微服务中创建自定义调试端点。这些端点可以提供有关内部状态、配置或指标的具体信息，有助于诊断问题而不会暴露敏感数据。'
- en: By keeping these technologies in mind, you will have extra power for debugging
    while developing at the same time.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过牢记这些技术，你将在开发的同时获得额外的调试能力。
- en: '*Figure 8**.4* depicts debugging tools and libraries:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.4* 描述了调试工具和库：'
- en: '![Figure 8.4: Debugging tools and libraries (image by vectorjuice on Freepik)](img/B14980_08_04.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4：调试工具和库（图片由 vectorjuice 在 Freepik 提供）](img/B14980_08_04.jpg)'
- en: 'Figure 8.4: Debugging tools and libraries (image by vectorjuice on Freepik)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：调试工具和库（图片由 vectorjuice 在 Freepik 提供）
- en: In summary, by employing a combination of rigorous testing practices and using
    a variety of debugging tools and libraries, developers can effectively reproduce,
    isolate, and resolve issues in microservices architectures, ensuring the reliability
    and stability of their applications.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过采用严格的测试实践和多种调试工具和库的组合，开发者可以有效地在微服务架构中重现、隔离和解决问题，确保其应用的可靠性和稳定性。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned a lot about microservices and how to debug them.
    We covered every step of debugging while developing so that our software applications
    are bug-free.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于微服务及其调试的很多知识。我们涵盖了调试的每一个步骤，以确保我们的软件应用无错误。
- en: Debugging microservices in Node.js involves a systematic approach to identifying,
    isolating, and resolving issues within a distributed system.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中调试微服务涉及对分布式系统内识别、隔离和解决问题的系统化方法。
- en: By combining rigorous testing, structured logging, tracing, effective use of
    debugging tools, and proactive monitoring, developers can systematically debug
    microservices in Node.js, ensuring the reliability and stability of their distributed
    applications.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合严格的测试、结构化日志记录、跟踪、有效使用调试工具和主动监控，开发者可以系统地调试 Node.js 中的微服务，确保其分布式应用的可靠性和稳定性。
- en: In the next chapter, we are going to learn about database manipulation in microservices
    with Node.js.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Node.js 在微服务中进行数据库操作。
- en: Quiz time
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the key aspects of logging in microservices?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务中日志记录的关键方面有哪些？
- en: What are the key concepts for debugging tools in microservices?
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务调试工具的关键概念是什么？
- en: How does the error handling process work?
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理过程是如何工作的？
- en: What is unit testing?
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: 'Part 3: Data Management in Microservices Using Node.js'
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：使用Node.js在微服务中进行数据管理
- en: In this part, we will talk about data management in microservices to get a better
    understanding of how to manipulate data, APIs, data contracts, caching, and data
    security in Node.js.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将讨论微服务中的数据管理，以便更好地理解如何在Node.js中操作数据、API、数据合约、缓存和数据安全。
- en: 'The part contains the following chapters:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 9*](B14980_09.xhtml#_idTextAnchor168), *Database Manipulation in
    Microservices with Node.js*'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B14980_09.xhtml#_idTextAnchor168), *使用Node.js在微服务中进行数据库操作*'
- en: '[*Chapter 10*](B14980_10.xhtml#_idTextAnchor185), *API Communication and Data
    Contracts in Microservices*'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B14980_10.xhtml#_idTextAnchor185), *微服务中的API通信和数据合约*'
- en: '[*Chapter 11*](B14980_11.xhtml#_idTextAnchor204), *Caching and Asynchronous
    Messaging in Microservices*'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B14980_11.xhtml#_idTextAnchor204), *微服务中的缓存和异步消息传递*'
- en: '[*Chapter 12*](B14980_12.xhtml#_idTextAnchor218), *Ensuring Data Security with
    the Saga Pattern, Encryption, and Security Measures*'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B14980_12.xhtml#_idTextAnchor218), *使用 Saga 模式、加密和安全措施确保数据安全*'
