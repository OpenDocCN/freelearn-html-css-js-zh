- en: Chapter 8. Special Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 特殊技术
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Using mixins with Backbone objects
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Backbone 对象与混合器
- en: Creating a `Backbone.js` extension with Grunt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Grunt 创建 `Backbone.js` 扩展
- en: Wiring tests for a Backbone extension with QUnit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QUnit 为 Backbone 扩展编写测试
- en: Mocking up a RESTful service with jQuery Mockjax in asynchronous tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery Mockjax 在异步测试中模拟 RESTful 服务
- en: Developing a mobile application with jQuery Mobile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery Mobile 开发移动应用程序
- en: Building an iOS/Android app with PhoneGap
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PhoneGap 构建 iOS/Android 应用程序
- en: Organizing a project structure with `Require.js`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Require.js` 组织项目结构
- en: Ensuring compatibility with search engines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与搜索引擎的兼容性
- en: Avoiding memory leaks in a Backbone application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Backbone 应用程序中避免内存泄漏
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is aimed at showing how to solve the most challenging problems
    that can occur during Backbone development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在展示如何在 Backbone 开发过程中解决可能遇到的最具挑战性的问题。
- en: We are going to learn how to mix the existing Backbone objects to add any additional
    functionality. We will create a Backbone extension using Grunt.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何混合现有的 Backbone 对象以添加任何额外的功能。我们将使用 Grunt 创建一个 Backbone 扩展。
- en: We will also create tests for our extension, which will help us to ensure it
    works as expected when any new functionality is added to the extension.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为我们的扩展创建测试，这将帮助我们确保在扩展中添加任何新功能时它都能按预期工作。
- en: Then, we will integrate **jQuery Mobile** and `Backbone.js` and will use **PhoneGap**
    to build native applications for mobile platforms such as iOS and Android.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将集成 **jQuery Mobile** 和 `Backbone.js`，并使用 **PhoneGap** 为 iOS 和 Android
    等移动平台构建原生应用程序。
- en: We will learn how to deal with `Require.js`, how to use it to organize project
    structure, and how to use it in our mobile applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何处理 `Require.js`，如何使用它来组织项目结构，以及如何在我们的移动应用程序中使用它。
- en: And finally, we will understand how to make the search engine index the AJAX
    application created with `Backbone.js`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将了解如何让搜索引擎索引使用 `Backbone.js` 创建的 AJAX 应用程序。
- en: This chapter assumes that you are using a Unix like shell and have `Node.js`
    and npm (Node Package Modules) installed in your system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你正在使用类 Unix 的 shell，并且已经在你的系统中安装了 `Node.js` 和 npm（Node 包模块）。
- en: Using mixins with Backbone objects
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Backbone 对象与混合器
- en: Though there are hundreds of Backbone extensions that provide additional functionality,
    a project may need to extend Backbone objects with some custom functionality.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有数百个 Backbone 扩展提供了额外的功能，但一个项目可能需要使用一些自定义功能扩展 Backbone 对象。
- en: 'There are several ways to do this. Typically, you can extend a Backbone object
    with the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以做到这一点。通常，你可以使用以下代码扩展 Backbone 对象：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It works great unless you face one of following scenarios:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它工作得很好，除非你遇到以下情况之一：
- en: You want to modify the `Backbone.Model` object and all its children objects
    at once
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想一次性修改 `Backbone.Model` 对象及其所有子对象
- en: You have different extensions which together modify the same object, and thus
    you will need to avoid conflicts
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有不同的扩展，它们共同修改同一个对象，因此你需要避免冲突
- en: The solution is to use mixins, which we are going to deal with within the scope
    of this recipe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用混合器，我们将在本食谱的范围内处理它。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to define `mixin` and add it to `Backbone.Model`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以定义 `mixin` 并将其添加到 `Backbone.Model`：
- en: 'Define the `mixin` object in the following way:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式定义 `mixin` 对象：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add `mixin` to the existing object as described in the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码将 `mixin` 添加到现有对象中：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save `mixin` so that it can be mixed to the other model objects, if required.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `mixin` 以便在需要时将其混合到其他模型对象中。
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Another way is to apply mixin to `Backbone.Model.prototype`. This will make
    all `Backbone.Model` children to have such mixin.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种方法是应用混合器到 `Backbone.Model.prototype`。这将使所有 `Backbone.Model` 子对象都具有这样的混合器。
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If there are more functionalities you need to define them in different mixins,
    you can extend the Backbone object in a similar way:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要定义更多功能，你可以将它们定义在不同的混合器中，并以类似的方式扩展 Backbone 对象：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To create a new model object, we used the `extend()` method provided by the
    ancestor model. To extend all Backbone models at once, we perform the mixing operation
    on the prototype of `Backbone.Model` using the `extend()` method of `Undercore.js`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个新的模型对象，我们使用了祖先模型提供的 `extend()` 方法。为了一次性扩展所有 Backbone 模型，我们使用 `Undercore.js`
    的 `extend()` 方法在 `Backbone.Model` 的原型上执行混合操作。
- en: See also
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To understand prototype inheritance, please navigate to [http://en.wikipedia.org/wiki/Prototype-based_programming](http://en.wikipedia.org/wiki/Prototype-based_programming)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解原型继承，请导航到 [http://en.wikipedia.org/wiki/Prototype-based_programming](http://en.wikipedia.org/wiki/Prototype-based_programming)
- en: Creating a Backbone.js extension with Grunt
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Grunt 创建 Backbone.js 扩展
- en: It could be very important for the developer to create a Backbone extension
    that will be shared with the rest of the world or even re-used in future projects.
    In this recipe, we are going to learn how to create our own extension using Grunt,
    and we will upload it on **GitHub**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，创建一个将被全世界共享或甚至在未来项目中重用的 Backbone 扩展可能非常重要。在这个食谱中，我们将学习如何使用 Grunt 创建我们自己的扩展，并将其上传到
    **GitHub**。
- en: Grunt is the JavaScript task runner that allows automating different tasks such
    as minification, compilation, unit testing, and linting. These repetitive tasks
    are defined in the `Gruntfile.js` file and are triggered from a console. There
    are many different packages for Grunt that are available as npm extensions. We
    are going to use one of them, named grunt-init, for scaffolding the Backbone extension
    from a template.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt 是一个 JavaScript 任务运行器，允许自动化不同的任务，如压缩、编译、单元测试和代码检查。这些重复性任务在 `Gruntfile.js`
    文件中定义，并从控制台触发。Grunt 有许多不同的包，作为 npm 扩展可用。我们将使用其中之一，名为 grunt-init，从模板中构建 Backbone
    扩展。
- en: 'Our extension is going to provide a compatibility with MongoDB. In the previous
    chapter, we used MongoLab ([https://mongolab.com](https://mongolab.com)), which
    is a MongoDB with a RESTful interface. **MongoLab** provides the data in the **MongoDB
    Extended JSON**, which is not supported by Backbone by default. The following
    code is an example of how a resource ID is presented in the MongoDB Extended JSON:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展将提供与 MongoDB 的兼容性。在上一章中，我们使用了 MongoLab ([https://mongolab.com](https://mongolab.com))，这是一个具有
    RESTful 接口的 MongoDB。**MongoLab** 提供的数据是 **MongoDB 扩展 JSON**，这是 Backbone 默认不支持的。以下代码是资源
    ID 在 MongoDB 扩展 JSON 中的表示示例：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By default, the `Backbone.js` file does not deal with such IDs, but our extension
    will allow us to do this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Backbone.js` 文件不处理此类 ID，但我们的扩展将允许我们这样做。
- en: Getting ready...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'Perform the following steps to get prepared for this recipe:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以准备此食谱：
- en: Make sure that `Node.js` and npm are installed.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已安装 `Node.js` 和 npm。
- en: Install `grunt-init`, which allows generating a project from a template.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `grunt-init`，它允许从模板生成项目。
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Install `grunt-cli`, which allows running grunt commands from a command line.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `grunt-cli`，它允许从命令行运行 grunt 命令。
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Download `grunt-init-backbone-plugin` and place it in your local `grunt-init`
    directory.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `grunt-init-backbone-plugin` 并将其放置在您的本地 `grunt-init` 目录中。
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create the public repository on [http://github.com](http://github.com) where
    we will upload our extension.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [http://github.com](http://github.com) 上创建公共仓库，我们将上传我们的扩展。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to create a Backbone extension with Grunt:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用 Grunt 创建 Backbone 扩展：
- en: Create a directory that will contain the source code of our extension. This
    directory should be named `backbone-mongodb`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录，该目录将包含我们扩展的源代码。此目录应命名为 `backbone-mongodb`。
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Build an extension project from the Grunt template. Run the next command and
    follow the steps asked by Grunt.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Grunt 模板构建一个扩展项目。运行下一个命令并遵循 Grunt 提出的步骤。
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Update the `backbone-mongodb.js` file with the following extension code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下扩展代码更新 `backbone-mongodb.js` 文件：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create the GitHub project by accessing the [https://github.com/new](https://github.com/new)
    link and fill the form that appears.![How to do it...](img/2728OS_08_01.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 [https://github.com/new](https://github.com/new) 链接并填写出现的表单来创建 GitHub 项目。![如何做...](img/2728OS_08_01.jpg)
- en: Initialize the repository and push the code to the GitHub project.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化仓库并将代码推送到 GitHub 项目。
- en: '[PRE13]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we run the `grunt-init` command with the `backbone-plugin` parameter, it
    builds a new project from the `backbone-plugin` template, which we downloaded
    and saved in the `~/.grunt-init/backbone-plugin` directory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `backbone-plugin` 参数运行 `grunt-init` 命令时，它将从 `backbone-plugin` 模板构建一个新的项目，该模板我们已下载并保存在
    `~/.grunt-init/backbone-plugin` 目录中。
- en: 'The newly generated project structure is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 新生成的项目结构如下：
- en: '`node_modules/`: This option provides Node.js modules for our application'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules/`：此选项为我们提供应用程序的 Node.js 模块'
- en: '`grunt/`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grunt/`'
- en: '`grint-contrib-qunit/`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grint-contrib-qunit/`'
- en: '`test/`: This option performs tests for our application'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test/`：此选项对我们的应用程序进行测试'
- en: '`index.html`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`mongodb.js`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongodb.js`'
- en: '`vendor/`: This option lists the libraries used in the application'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor/`: 此选项列出应用程序中使用的库'
- en: '`backbone/`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone/`'
- en: '`backbone-mongodb.js`: This is the main file of our application'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone-mongodb.js`: 这是我们的应用程序的主要文件'
- en: '`Gruntfile.js`: This is the Grunt file'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gruntfile.js`: 这是Grunt文件'
- en: '`LICENSE-MIT`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE-MIT`'
- en: '`README.md`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`'
- en: '`package.json`: This is the Node.js module file'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 这是Node.js模块文件'
- en: See also
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The source code of the extension is available at [https://github.com/dealancer/backbone-mongo](https://github.com/dealancer/backbone-mongo)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展的源代码可在[https://github.com/dealancer/backbone-mongo](https://github.com/dealancer/backbone-mongo)找到
- en: Grunt documentation is available at [http://gruntjs.com/getting-started](http://gruntjs.com/getting-started)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt 文档可在[http://gruntjs.com/getting-started](http://gruntjs.com/getting-started)找到
- en: For more info about the `grunt-init` backbone plugin, please navigate to [https://github.com/gsamokovarov/grunt-init-backbone-plugin](https://github.com/gsamokovarov/grunt-init-backbone-plugin)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`grunt-init` Backbone插件的更多信息，请访问[https://github.com/gsamokovarov/grunt-init-backbone-plugin](https://github.com/gsamokovarov/grunt-init-backbone-plugin)
- en: Writing tests for a Backbone extension with QUnit
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QUnit为Backbone扩展编写测试
- en: If you are working on a complex project or a Backbone extension, you need to
    make sure that the new commits do not break any existing functionality. This is
    why many developers choose to create tests prior to or after writing new code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理一个复杂的项目或Backbone扩展，你需要确保新的提交不会破坏任何现有功能。这就是为什么许多开发者选择在编写新代码之前或之后创建测试。
- en: For JavaScript applications, there are a good number of different testing tools
    that perfectly integrate with Backbone. In this recipe, we are going to learn
    one of the tools named QUnit.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript应用程序，有大量不同的测试工具可以与Backbone完美集成。在本食谱中，我们将学习一个名为QUnit的工具。
- en: When we were building our project from a template using Grunt, QUnit was included
    in the project, and the `test/mongodb.js` file was created. Let's add a simple
    test to the extension we did in the previous recipe.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Grunt从模板构建项目时，QUnit被包含在项目中，并创建了`test/mongodb.js`文件。让我们向之前食谱中做的扩展添加一个简单的测试。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to test an application:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以测试应用程序：
- en: 'Edit the `test/mongodb.js` file and add some basic models and collections to
    the extension, as described in the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`test/mongodb.js`文件，并添加一些基本模型和集合到扩展中，如下面的代码所述：
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add some variables that we will use, as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些我们将使用的变量，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the `setup()` and `teardown()` methods, which will run before and after
    each test, as shown in the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`setup()`和`teardown()`方法，这些方法将在每个测试前后运行，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Define as many tests as you need by calling the `test()` function as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式调用`test()`函数来定义所需的测试数量：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the tests by opening the `test/index.html` file in the browser, as shown
    in the following screenshot:![How to do it...](img/2728OS_08_02.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在浏览器中打开`test/index.html`文件来运行测试，如下面的截图所示：![如何操作...](img/2728OS_08_02.jpg)
- en: 'You can also run tests in a console with the following command, as shown in
    the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令在控制台中运行测试，如下面的截图所示：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![How to do it...](img/2728OS_08_03.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/2728OS_08_03.jpg)'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'QUnit runs all tests defined by the `test()` function, which takes the following
    parameters: `name`, `amount of asserts`, and `callback function`. Inside a testing
    callback, we can use the following asserts:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit运行由`test()`函数定义的所有测试，该函数接受以下参数：`名称`、`断言数量`和`回调函数`。在测试回调内部，我们可以使用以下断言：
- en: '`ok()`: This is a Boolean assertion that is equivalent to `CommonJS''s assert.ok()`
    and `JUnit''s assertTrue()`. It passes if the first argument is true.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ok()`: 这是一个布尔断言，等同于`CommonJS的assert.ok()`和`JUnit的assertTrue()`。如果第一个参数为真，则通过。'
- en: '`equal()`: This is a non-strict comparison assertion that is roughly equivalent
    to `JUnit assertEquals`.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equal()`: 这是一个非严格比较断言，大致等同于`JUnit assertEquals`。'
- en: '`notEqual()`: This is a non-strict comparison assertion that checks for inequality.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notEqual()`: 这是一个非严格比较断言，用于检查不等式。'
- en: '`strictEqual()`: This is a strict type and value comparison assertion.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strictEqual()`: 这是一个严格的类型和值比较断言。'
- en: '`throws()`: This is an assertion that tests if a callback throws an exception
    when run.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throws()`: 这是一个断言，用于测试当运行时回调是否抛出异常。'
- en: '`notStrictEqual()`: This is a non-strict comparison assertion that checks for
    inequality.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notStrictEqual()`: 这是一个非严格比较断言，用于检查不等式。'
- en: '`deepEqual()`: This is a deep, recursive comparison assertion that works on
    primitive types, arrays, objects, regular expressions, dates, and functions.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deepEqual()`: 这是一个深度递归比较断言，适用于原始类型、数组、对象、正则表达式、日期和函数。'
- en: '`notDeepEqual()`: This is an inverted deep, recursive comparison assertion
    that works on primitive types, arrays, objects, regular expressions, dates, and
    functions.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notDeepEqual()`: 这是一个反转的深度递归比较断言，适用于原始类型、数组、对象、正则表达式、日期和函数。'
- en: If the required amount of asserts are achieved, the test is considered as successful.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果达到所需的断言数量，则测试被认为是成功的。
- en: Before running each test, QUnit runs the `setup()` function, and afterwards
    the `teardown()` function. This can be useful in case we need to change some global
    settings and then revert to the changes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行每个测试之前，QUnit 运行 `setup()` 函数，之后运行 `teardown()` 函数。如果我们需要更改一些全局设置然后恢复更改，这可能很有用。
- en: 'The Source code of the `index.html` file, which was generated by Grunt, looks
    like the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Grunt 生成的 `index.html` 文件源代码如下：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Also, the source code of the `Gruntfile.js` file, which describes the commands
    for Grunt, looks like the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，描述 Grunt 命令的 `Gruntfile.js` 文件源代码如下：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to the official QUnit documentation in order to get more familiar
    with it, at [http://api.qunitjs.com/](http://api.qunitjs.com/).
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更熟悉它，请参阅官方 QUnit 文档，[http://api.qunitjs.com/](http://api.qunitjs.com/)。
- en: Mocking up a RESTful service with jQuery Mockjax in asynchronous tests
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在异步测试中使用 jQuery Mockjax 模拟 RESTful 服务
- en: In the previous recipe, we got familiar with QUnit and tested the `toJSON()`
    method, which is used for pushing data to a RESTful service. In this recipe, we
    are going to test the `fetch()` method, which works asynchronously. Fortunately,
    QUnit allows us to create asynchronous tests. We also going to emulate a RESTful
    service using jQuery Mockjax.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的菜谱中，我们熟悉了 QUnit 并测试了 `toJSON()` 方法，该方法用于将数据推送到 RESTful 服务。在这个菜谱中，我们将测试 `fetch()`
    方法，这是一个异步操作。幸运的是，QUnit 允许我们创建异步测试。我们还将使用 jQuery Mockjax 模拟 RESTful 服务。
- en: Getting ready...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Download the jQuery Mockjax extension from its GitHub page, [https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax),
    and place it in the vendor directory of the extension. Then, include its main
    JS file in the `test/index.html` file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 从其 GitHub 页面下载 jQuery Mockjax 扩展，[https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax)，并将其放置在扩展的
    vendor 目录中。然后，在 `test/index.html` 文件中包含其主 JS 文件。
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to mock up a RESTful service for an asynchronous
    testing:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以模拟异步测试中的 RESTful 服务：
- en: Define the mocked URLs and its output in the JSON format in the `setup()` method.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup()` 方法中，以 JSON 格式定义模拟的 URL 及其输出。
- en: '[PRE22]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Cancel mocking in the `teardown()` method.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `teardown()` 方法中取消模拟。
- en: '[PRE23]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Add asynchronous tests that sync data from the mocked up RESTful service.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加异步测试，从模拟的 RESTful 服务同步数据。
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the previous code, we defined our test in the `asyncTest()` function, which
    works almost the same as the `test()` function, except that it does not proceed
    to the next test unless the `start()` function is called.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在 `asyncTest()` 函数中定义了我们的测试，该函数几乎与 `test()` 函数相同，除了它不会继续到下一个测试，除非调用
    `start()` 函数。
- en: There is also a way to define asynchronous tests using the `test()` and `stop()`
    functions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 `test()` 和 `stop()` 函数定义异步测试。
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: From the previous code, we have seen that the `asyncTest()` function is an equivalent
    of the `test()` function, which calls the `stop()` function right away.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们看到了 `asyncTest()` 函数是 `test()` 函数的等价物，它立即调用 `stop()` 函数。
- en: It is interesting to know what is happening in the mocked up service. jQuery
    Mockjax replaces the `jQuery.ajax()` method with its own method, which emulates
    AJAX calls to the server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 了解模拟服务中发生的事情很有趣。jQuery Mockjax 用它自己的方法替换了 `jQuery.ajax()` 方法，该方法是模拟对服务器的 AJAX
    调用。
- en: Mocked URLs are defined using `$.mockjax()` and canceled with some help from
    `$.mockjaxClear()`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$.mockjax()` 定义模拟的 URL，并使用一些帮助从 `$.mockjaxClear()` 取消。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to the jQuery Mockjax documentation at [https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 jQuery Mockjax 文档，[https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax)
- en: Docs about asynchronous testing with QUnit are available at [http://api.qunitjs.com/category/async-control/](http://api.qunitjs.com/category/async-control/)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于使用QUnit进行异步测试的文档可在[http://api.qunitjs.com/category/async-control/](http://api.qunitjs.com/category/async-control/)找到。
- en: Developing a mobile application with jQuery Mobile
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery Mobile开发移动应用程序
- en: jQuery Mobile is a useful HTML5/JavaScript framework for building mobile applications.
    It provides mobiles with look-and-feel components such as lists, buttons, toolbars,
    and dialogs. It is quite easy to create our own theme by customizing jQuery Mobile.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile是一个用于构建移动应用程序的有用的HTML5/JavaScript框架。它为移动设备提供外观和感觉组件，如列表、按钮、工具栏和对话框。通过自定义jQuery
    Mobile，我们很容易创建自己的主题。
- en: By default, all mobile pages can be stored in a single HTML file in different
    divs or are rendered on a fly. jQuery Mobile also allows us to use transition
    effects to switch between pages.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有移动页面都可以存储在一个HTML文件中的不同div中，或者即时渲染。jQuery Mobile还允许我们使用过渡效果在页面之间切换。
- en: In this recipe, we are going to create a simple iOS-looking application with
    jQuery Mobile and `Backbone.js`, which allows users to view and create posts.
    Data is stored on [https://mongolab.com/welcome/](https://mongolab.com/welcome/)
    and accessed via REST.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用jQuery Mobile和`Backbone.js`创建一个简单的iOS外观的应用程序，允许用户查看和创建帖子。数据存储在[https://mongolab.com/welcome/](https://mongolab.com/welcome/)并通过REST访问。
- en: 'Our application will look like the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将类似于以下截图：
- en: '![Developing a mobile application with jQuery Mobile](img/2728OS_08_04.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Mobile开发移动应用程序](img/2728OS_08_04.jpg)'
- en: Getting ready...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'Perform the following steps to get prepared for this recipe:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤为这个食谱做准备：
- en: Download the backbone-mongodb extension from its GitHub page, [http://github.com/dealancer/backbone-mongodb/](http://github.com/dealancer/backbone-mongodb/),
    and save it in `lib/backbone-mongodb.js`. We are going to use backbone-mongodb
    to connect to [https://mongolab.com/welcome/](https://mongolab.com/welcome/),
    the RESTful MongoDB service.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从其GitHub页面[http://github.com/dealancer/backbone-mongodb/](http://github.com/dealancer/backbone-mongodb/)下载backbone-mongodb扩展，并将其保存到`lib/backbone-mongodb.js`中。我们将使用backbone-mongodb连接到[https://mongolab.com/welcome/](https://mongolab.com/welcome/)，这是一个RESTful
    MongoDB服务。
- en: Download the jQuery Mobile library from [http://jquerymobile.com/](http://jquerymobile.com/)
    and extract it in the `lib/jquery.mobile/` folder.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://jquerymobile.com/](http://jquerymobile.com/)下载jQuery Mobile库，并将其提取到`lib/jquery.mobile/`文件夹中。
- en: Download the iOS-inspired theme for jQuery Mobile from its GitHub page, [https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme](https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme),
    and extract it in the `lib/ios_inspired/` folder.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从其GitHub页面[https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme](https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme)下载jQuery
    Mobile的iOS灵感主题，并将其提取到`lib/ios_inspired/`文件夹中。
- en: Download the icons that we are going to use in our mobile app from [http://www.glyphish.com/](http://www.glyphish.com/),
    and extract them into the `lib/glyphish/` folder.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.glyphish.com/](http://www.glyphish.com/)下载我们将在移动应用程序中使用的图标，并将它们提取到`lib/glyphish/`文件夹中。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to create a mobile application:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来创建一个移动应用程序：
- en: 'Render a page in the mobile browser using the default browser width, otherwise
    the page could be rendered for 980 pixels screen width and then scaled down. Include
    the following line into the header of `index.html`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认浏览器宽度在移动浏览器中渲染页面，否则页面可能会以980像素的屏幕宽度渲染然后缩小。将以下行包含到`index.html`的头部：
- en: '[PRE26]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Include the CSS files into the header of `index.html`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSS文件包含到`index.html`的头部。
- en: '[PRE27]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create the `js/jqm-config.js` file that will retain the jQuery Mobile configuration
    and include this file it in `index.html`. Make sure it is included after jQuery
    and before jQuery Mobile.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`js/jqm-config.js`文件，该文件将保留jQuery Mobile配置，并将其包含到`index.html`中。确保它在jQuery之后和jQuery
    Mobile之前被包含。
- en: Bind the callback to the `mobileinit` event in `js/jqm-config.js`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/jqm-config.js`中将回调绑定到`mobileinit`事件。
- en: '[PRE28]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Disable the jQuery Mobile routing by adding the following code in the `mobileinit`
    event callback that we defined in the previous step:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在之前步骤中定义的`mobileinit`事件回调中添加以下代码来禁用jQuery Mobile路由：
- en: '[PRE29]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Set up transitions and effects by adding the following code in the mobileinit
    event callback:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`mobileinit`事件回调中添加以下代码来设置过渡和效果：
- en: '[PRE30]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Remove the page from the **Document Object Model** (**DOM**) when it''s being
    replaced. Add the following code into the mobileinit event callback:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在替换页面时从**文档对象模型**（**DOM**）中删除该页面。将以下代码添加到`mobileinit`事件回调中：
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Include the Backbone-mongodb extension in `index.html`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中包含Backbone-mongodb扩展。
- en: '[PRE32]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Enable **Cross-site scripting** and disable the AJAX cache by adding the following
    code in `js/app-config.js`. Also, include this file in `index.html`. Make sure
    it is included before the main file of the application.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`js/app-config.js`中添加以下代码启用**跨站脚本**并禁用AJAX缓存。同时，确保在应用程序的主文件之前包含此文件。
- en: '[PRE33]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Mix `Backbone.MongoModel` in `Backbone.Model` to support the MongoDB Extended
    JSON by adding the following command line in `js/app-config.js`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/app-config.js`中添加以下命令行以将`Backbone.MongoModel`混合到`Backbone.Model`中，以支持MongoDB扩展JSON：
- en: '[PRE34]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Add the RESTful service URL in `js/app-config.js`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/app-config.js`中添加RESTful服务URL。
- en: '[PRE35]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add the template loader in `js/template-loader.js` and include this file in
    `index.html` before the main application file.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/template-loader.js`中添加模板加载器，并在`index.html`中包含此文件，在主应用程序文件之前。
- en: '[PRE36]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Define the router object with routes and callbacks in `js/main.js`, which is
    our main application file. It should be included after all other files.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/main.js`中定义路由对象，其中包含路由和回调，这是我们的主应用程序文件。它应该在所有其他文件之后包含。
- en: '[PRE37]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Add the `changePage()` method to the router object to switch to the current
    view page.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`changePage()`方法添加到路由对象以切换到当前视图页面。
- en: '[PRE38]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Add the `showDialog()` method to show dialogs in the router object.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`showDialog()`方法添加到路由对象中以显示对话框。
- en: '[PRE39]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Define the model and collection in `js/models/post.js` and include this file
    in `index.html`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/models/post.js`中定义模型和集合，并在`index.html`中包含此文件。
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Define `PostDetailsView` and `PostDetailsPageView` in `js/views/post-details-page.js`
    and include this file in `index.html`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/views/post-details-page.js`中定义`PostDetailsView`和`PostDetailsPageView`，并在`index.html`中包含此文件。
- en: '[PRE41]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add templates for all your views in `index.html`. This will make them load
    faster. The following code is a template for the view we defined previously:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中为所有视图添加模板。这将使它们加载更快。以下是我们之前定义的视图的模板代码：
- en: '[PRE42]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Add views and templates to show other pages.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加视图和模板以显示其他页面。
- en: Add styles in `index.html` to show the Glyphish icons at the bottom of the toolbar.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中添加样式以显示工具栏底部的Glyphish图标。
- en: '[PRE43]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Check the order of CSS and JS inclusions in `index.html`. It should look like
    the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`index.html`中CSS和JS包含的顺序。它应该看起来像以下代码：
- en: '[PRE44]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main challenge of this recipe is to integrate jQuery Mobile with `Backbone.js`.
    Basically, there shouldn't be any problem unless you are trying to use the Backbone
    router. Both `Backbone.js` and jQuery Mobile provide their own routing mechanisms,
    which conflict with each other when used together.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的主要挑战是将jQuery Mobile与`Backbone.js`集成。基本上，除非您尝试使用Backbone路由，否则不应该有任何问题。`Backbone.js`和jQuery
    Mobile都提供了自己的路由机制，当一起使用时会相互冲突。
- en: The jQuery Mobile routing is enabled by default. You need to disable it manually
    if you want to use `Backbone.Router`. This is what we did in `js/jqm-comfig.js`
    in the previous section.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，jQuery Mobile启用了路由。如果您想使用`Backbone.Router`，则需要手动禁用它。这是我们之前在`js/jqm-comfig.js`中做的。
- en: However, we still use jQuery Mobile to switch pages. To do this, we dynamically
    create a new page in the div and then call `$.mobile.changePage`, passing the
    new page element and other parameters. If transition effects are configured, animation
    is performed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然使用jQuery Mobile来切换页面。为此，我们在div中动态创建一个新页面，然后调用`$.mobile.changePage`，传递新页面元素和其他参数。如果配置了过渡效果，则执行动画。
- en: See also
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Please refer to the official jQuery Mobile resources:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考官方jQuery Mobile资源：
- en: '[http://view.jquerymobile.com/1.3.1/dist/demos/](http://view.jquerymobile.com/1.3.1/dist/demos/)'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://view.jquerymobile.com/1.3.1/dist/demos/](http://view.jquerymobile.com/1.3.1/dist/demos/)'
- en: '[http://api.jquerymobile.com/](http://api.jquerymobile.com/)'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://api.jquerymobile.com/](http://api.jquerymobile.com/)'
- en: A live demo of the preceding application is available online at [http://dealancer.github.io/sma](http://dealancer.github.io/sma).
    You can try it from your mobile device.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前一个应用程序的实时演示可在网上找到：[http://dealancer.github.io/sma](http://dealancer.github.io/sma)。您可以从您的移动设备尝试它。
- en: 'The source code of this application is available in the GitHub repository:
    [https://github.com/dealancer/sma/](https://github.com/dealancer/sma/)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此应用程序的源代码可在GitHub仓库中找到：[https://github.com/dealancer/sma/](https://github.com/dealancer/sma/)
- en: Building an iOS/Android app with PhoneGap
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PhoneGap构建iOS/Android应用程序
- en: PhoneGap is a free and open source framework that allows building mobile applications
    from HTML/CSS/JavaScript. It supports iOS, Android, Windows Phone, Blackberry,
    and some other mobile platforms. Also, developers can get access to the mobile
    device features, such as camera, contacts, geolocation, and storage.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap 是一个免费且开源的框架，允许使用 HTML/CSS/JavaScript 构建移动应用程序。它支持 iOS、Android、Windows
    Phone、Blackberry 以及一些其他移动平台。此外，开发者可以访问移动设备的功能，例如相机、联系人、地理位置和存储。
- en: To build a mobile application, you need to download a specific version of PhoneGap
    for the mobile platform with you are working. Also, there is a premium online
    service named **PhoneGap Build** that allows building mobile apps online. It integrates
    with GitHub and can extract recent version of the code.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建移动应用程序，您需要下载适用于您正在工作的移动平台的特定版本的 PhoneGap。此外，还有一个名为 **PhoneGap Build** 的付费在线服务，允许在线构建移动应用程序。它与
    GitHub 集成，可以提取代码的最新版本。
- en: In this recipe, we are going to build a mobile application with PhoneGap Build.
    It will be easy and cool.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 PhoneGap Build 构建一个移动应用程序。这将既简单又酷。
- en: Getting ready...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Please make sure you have created an account on the website [https://build.phonegap.com/apps](https://build.phonegap.com/apps).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已在网站上创建了账户 [https://build.phonegap.com/apps](https://build.phonegap.com/apps)。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to build an iOS/Android application with PhoneGap:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用 PhoneGap 构建iOS/Android应用程序：
- en: Create the `config.xml` file in the same directory where the `index.html` file
    is located.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的目录中创建 `config.xml` 文件。
- en: Save the following PhoneGap configuration in the XML format in `config.xml`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 PhoneGap 配置以 XML 格式保存在 `config.xml` 文件中。
- en: '[PRE45]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Place the `icon.png` file with the application icon in the root directory.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含应用程序图标的 `icon.png` 文件放置在根目录中。
- en: Go to [https://build.phonegap.com/apps/](https://build.phonegap.com/apps/) and
    click on the **+ new app** button.![How to do it...](img/2728OS_08_05.jpg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://build.phonegap.com/apps/](https://build.phonegap.com/apps/) 并点击
    **+ 新应用** 按钮。![如何操作...](img/2728OS_08_05.jpg)
- en: Enter the repository URL git://github.com/dealancer/sma.git in the form.![How
    to do it...](img/2728OS_08_06.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中输入仓库 URL git://github.com/dealancer/sma.git。![如何操作...](img/2728OS_08_06.jpg)
- en: If you want to enter a non-GitHub account or upload an application from your
    machine, click on the **Private** tab. PhoneGap allows you to create one private
    application for free.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想输入非 GitHub 账户或从您的计算机上传应用程序，请点击 **私有** 选项卡。PhoneGap 允许您免费创建一个私有应用程序。
- en: After the project is pulled out from the GitHub repository, click on the **Ready
    to Build** button, which launches the building process for multiple platforms.
    To build an application for iOS or Blackberry, you are required to enter a developer's
    key.![How to do it...](img/2728OS_08_07.jpg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在从 GitHub 仓库提取项目后，点击 **准备构建** 按钮，这将启动多个平台的构建过程。要为 iOS 或 Blackberry 构建应用程序，您需要输入开发者的密钥。![如何操作...](img/2728OS_08_07.jpg)
- en: Now, the project is ready to be downloaded. You can do it by scanning the QR
    code on a mobile device. The QR code contains a link to your application. However,
    for many platforms, you need to place the built app on a special application market![How
    to do it...](img/2728OS_08_08.jpg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，项目已准备好下载。您可以通过扫描移动设备上的二维码来完成此操作。二维码包含指向您应用程序的链接。然而，对于许多平台，您需要将构建的应用程序放置在特殊的应用市场中![如何操作...](img/2728OS_08_08.jpg)
- en: When you are ready to build a new version of the application, click on the **Update
    Code** button, and then click on the **Rebuild All** button.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您准备好构建应用程序的新版本时，点击 **更新代码** 按钮，然后点击 **重建所有** 按钮。
- en: See also
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to official PhoneGap docs at [http://docs.phonegap.com/en/edge/index.html](http://docs.phonegap.com/en/edge/index.html)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅官方 PhoneGap 文档 [http://docs.phonegap.com/en/edge/index.html](http://docs.phonegap.com/en/edge/index.html)
- en: Organizing a project structure with Require.js
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Require.js 组织项目结构
- en: In this recipe, we are going to use the **Asynchronous Module Definition** (**AMD**)
    technique that is implemented in `Require.js`, the JavaScript library, which helps
    to bring more order into your project. It allows you to define and load JavaScript
    modules dynamically from other parts of your code in a way similar to that in
    PHP using the `include` command. It can also optimize and uglify the JavaScript
    files so that they are loaded and executed faster.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`Require.js`库中实现的**异步模块定义（AMD**）技术，该技术有助于将更多秩序带入你的项目。它允许你以类似于PHP中使用`include`命令的方式，从代码的其他部分动态定义和加载JavaScript模块。它还可以优化和压缩JavaScript文件，以便它们可以更快地加载和执行。
- en: We will take the **Social Mobile Application** example from the previous recipe
    and will refactor it using the `Require.js` library.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上一个菜谱中的**社交移动应用程序**示例，并使用`Require.js`库进行重构。
- en: 'The directory structure of our app will look like the following structure:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的目录结构将如下所示：
- en: '`css/`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css/`'
- en: '`main.css`'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.css`'
- en: '`js/`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js/`'
- en: '`collection/`'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection/`'
- en: '`post.js`'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post.js`'
- en: '`model/`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model/`'
- en: '`post.js`'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post.js`'
- en: '`view/`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view/`'
- en: '`about-page.js`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`about-page.js`'
- en: '`main-page.js`'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main-page.js`'
- en: '`post-add-page.js`'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-add-page.js`'
- en: '`post-delete-dialog.js`'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-delete-dialog.js`'
- en: '`post-details-page.js`'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-details-page.js`'
- en: '`post-list-page.js`'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-list-page.js`'
- en: '`settings-page.js`'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings-page.js`'
- en: '`app-config.js`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app-config.js`'
- en: '`app.js`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`'
- en: '`jqm-config.js`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jqm-config.js`'
- en: '`router.js`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`router.js`'
- en: '`template-loader.js`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template-loader.js`'
- en: '`lib/`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib/`'
- en: '`glyphish`/'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`glyphish/`'
- en: '`ios_inspired/`'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ios_inspired/`'
- en: '`jquery`.`mobile/`'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery`.`mobile/`'
- en: '`backbone-mongodb.js`'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone-mongodb.js`'
- en: '`backbone.js`'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone.js`'
- en: '`jquery.js`'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.js`'
- en: '`require.js`'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require.js`'
- en: '`underscore.js`'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`underscore.js`'
- en: '`config.xml`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.xml`'
- en: '`icon.png`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon.png`'
- en: '`index.html`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`README.md`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`'
- en: Getting ready...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Download the `Require.js` file from [http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html),
    and place it in the `lib` directory.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html)下载`Require.js`文件，并将其放置在`lib`目录下。
- en: How to do it...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to organize the mobile application with `Require.js`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用`Require.js`组织移动应用程序：
- en: Extract the collection definition from `js/model/post.js` and place it in a
    separate file under the path `js/collection/post.js`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`js/model/post.js`中提取集合定义，并将其放置在路径`js/collection/post.js`下的单独文件中。
- en: Remove all CSS inclusions from the `index.html` file, and keep only a single
    one that should contain links to others.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`index.html`文件中删除所有CSS包含，只保留一个应该包含指向其他文件的链接的单个链接。
- en: '[PRE46]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Remove all script inclusions from the `index.html` file and keep only the one
    that will load `Require.js`. Make sure to define the `data-main` attribute with
    a relative path to the main application file. No `.js` extension is required.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`index.html`文件中删除所有脚本包含，只保留一个将加载`Require.js`的脚本。确保使用相对于主应用程序文件的相对路径定义`data-main`属性。不需要`.js`扩展名。
- en: '[PRE47]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the `js/app.js` file, add the `Require` configuration, which defines aliases
    to the libraries. We will use the other aliases later.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js/app.js`文件中，添加`Require`配置，该配置定义了库的别名。我们将在以后使用其他别名。
- en: '[PRE48]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Define module dependencies by adding the shim property into the `Require` configuration.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`Require`配置中添加shim属性来定义模块依赖。
- en: '[PRE49]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here we make Require know about third-party library dependencies; for example,
    `jquery.mobile` requires `jquery` and `jqm-config`, and should have been loaded
    earlier. If you use standard JS libraries with no AMD support, you should define
    objects that are provided by those libraries (for example,. `$` in jQuery). This
    can be done by defining the object name in the `export` property.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们让`Require`了解第三方库依赖；例如，`jquery.mobile`需要`jquery`和`jqm-config`，并且应该先加载。如果你使用没有AMD支持的常规JS库，你应该定义那些库提供的对象（例如，jQuery中的`$`）。这可以通过在`export`属性中定义对象名称来完成。
- en: Add mapping settings into the `Require` configuration to load the `backbone-mongodb`
    object instead of the `backbone` object in all the JS files of your app; however,
    to load `backbone-mongodb`, we still need to load `backbone`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Require`配置中添加映射设置，以在应用程序的所有JS文件中加载`backbone-mongodb`对象而不是`backbone`对象；然而，要加载`backbone-mongodb`，我们仍然需要加载`backbone`。
- en: '[PRE50]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Add the `requirejs()` function call to `js/app.js` to start an application.
    The first parameter contains an array of modules that should be loaded, while
    the second parameter provides the callback function, which is executed. Parameters
    of such callback functions are objects returned by the modules defined in the
    first parameter of the `requirejs()` function.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`requirejs()`函数调用添加到`js/app.js`中以启动应用程序。第一个参数包含应加载的模块数组，第二个参数提供要执行的回调函数。此类回调函数的参数是`requirejs()`函数第一个参数中定义的模块返回的对象。
- en: '[PRE51]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The preceding code means that the `app-config.js` and `router.js` files will
    be included and implemented before executing the code in the callback function.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码意味着在执行回调函数中的代码之前，会包含并实现`app-config.js`和`router.js`文件。
- en: 'Refactor all your custom JS files to be AMD compatible. Add the `define()`
    function call, which has a similar syntax as the `requirejs()` function. If the
    module provides an object (or value) to be used by other modules, such an object
    should be returned by the module. The `app-config.js` file will look like the
    following code:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有自定义JS文件重构为AMD兼容。添加与`requirejs()`函数语法相似的`define()`函数调用。如果模块提供了一个对象（或值）供其他模块使用，那么这个对象应该由模块返回。`app-config.js`文件将类似于以下代码：
- en: '[PRE52]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Though the `Require.js` file can load templates from the text files, let's deal
    with the template loader we used before. It also needs to be AMD compatible.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然`Require.js`文件可以从文本文件中加载模板，但让我们处理我们之前使用的模板加载器。它也需要是AMD兼容的。
- en: '[PRE53]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make sure all view files are refactored as well. They may look like the following
    code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有视图文件也被重构。它们可能看起来像以下代码：
- en: '[PRE54]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Make sure all the required module dependencies are included in the `router.js`
    file.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有必需的模块依赖项都包含在`router.js`文件中。
- en: '[PRE55]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Remove the `main.js` file, because we have moved all functionality from it into
    the `app.js` and `router.js` files.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`main.js`文件，因为我们已经将所有功能从它移动到了`app.js`和`router.js`文件中。
- en: How it works...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Require.js` library provides two main functions, `define()` and `requirejs()`,
    to load other modules. The `requirejs()` function is used to start an application.
    Both the functions have similar syntax. The first parameter is used to list all
    the libraries required by the current module, and the second parameter contains
    the callback function that is executed.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`Require.js`库提供了两个主要函数，`define()`和`requirejs()`，用于加载其他模块。`requirejs()`函数用于启动应用程序。这两个函数具有相似的语法。第一个参数用于列出当前模块所需的全部库，第二个参数包含要执行的回调函数。'
- en: '[PRE56]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Parameters of the callback function are objects/values returned by the libraries
    required by the module. They are listed in the same order as the modules required.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数的参数是模块所需的库返回的对象/值。它们的顺序与所需的模块顺序相同。
- en: If the module defines an object that is required by other modules, it should
    return such an object.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块定义了一个其他模块需要的对象，它应该返回这样一个对象。
- en: If you are dealing with no AMD library, but it provides an object to be used
    by other modules of your app, you should define such objects in the `require.config()`
    function.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理没有AMD库的情况，但它提供了一个供你的应用程序其他模块使用的对象，你应该在`require.config()`函数中定义这样的对象。
- en: '[PRE57]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: If you need to make sure that the modules are always loaded in a specific order,
    you should define the dependencies in the `require.config()` function.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要确保模块总是按照特定的顺序加载，你应该在`require.config()`函数中定义依赖项。
- en: '[PRE58]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: By default, the `Require.js` file loads a library using the path relative to
    the main project directory. The `.js` extension is used when referencing of such
    libraries is skipped. There is also a way to define path aliases in the `require.config()`
    function.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Require.js`文件使用相对于主项目目录的路径来加载库。在引用此类库时跳过`.js`扩展名。在`require.config()`函数中还可以定义路径别名。
- en: '[PRE59]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: When the application is started, the main application file runs and all the
    required modules and libraries are loaded in the correct order and according to
    the definition and configuration.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序启动时，主应用程序文件运行，所有必需的模块和库都按正确的顺序和定义及配置加载。
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Optimizing JS files with r.js
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用r.js优化JS文件
- en: '`R.js` is a submodule of `Require.js` that can optimize JavaScript or CSS files
    by combining them into a single file and minimizing it so that it is loaded and
    executed much faster.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.js`是`Require.js`的一个子模块，可以通过将它们合并成一个文件并最小化来优化JavaScript或CSS文件，从而使其加载和执行得更快。'
- en: To load our Social Mobile Application from the localhost, it takes the browser
    to perform 27 requests, which is about 308 milliseconds.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地主机加载我们的社交移动应用程序，浏览器需要执行27次请求，大约需要308毫秒。
- en: '![Optimizing JS files with r.js](img/2728OS_08_09.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![使用r.js优化JS文件](img/2728OS_08_09.jpg)'
- en: The same application, now optimized, is loaded with just 4 requests in 53 milliseconds.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在优化后的相同应用程序，只需4次请求在53毫秒内加载完成。
- en: '![Optimizing JS files with r.js](img/2728OS_08_10.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![使用r.js优化JS文件](img/2728OS_08_10.jpg)'
- en: Here, we see a six times boost in performance, which is a good result. Actually,
    that boost could be even bigger for larger projects, which are loaded over slow
    Internet connection.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到性能提升了六倍，这是一个很好的结果。实际上，对于加载速度较慢的互联网连接的大型项目，这个提升可能更大。
- en: 'To optimize your app, please perform the following steps:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要优化您的应用程序，请执行以下步骤：
- en: Make sure you have `Node.js` and `npm` installed.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已安装`Node.js`和`npm`。
- en: Install `Require.js` as the Node module.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Require.js`作为Node模块安装。
- en: '[PRE60]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Create a new subdirectory named src and move all project files there.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为src的新子目录并将所有项目文件移至其中。
- en: Download `r.js` from [http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html)
    and save it into the root project directory.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html)下载`r.js`并将其保存到根项目目录中。
- en: Create the `app.build.js` file in the project root. This file should contain
    an `R.js` build configuration.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中创建`app.build.js`文件。此文件应包含一个`R.js`构建配置。
- en: '[PRE61]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Execute the following command to build the project:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以构建项目：
- en: '[PRE62]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: You can find the built application in the `build` directory.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在`build`目录中找到构建的应用程序。
- en: See also
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Check out the official `Require.js` documentation at [http://www.requirejs.org/](http://www.requirejs.org/)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://www.requirejs.org/](http://www.requirejs.org/)查看官方`Require.js`文档。
- en: Ensuring compatibility with search engines
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保与搜索引擎兼容性
- en: When a search engine finds an AJAX-powered web application, it can't index such
    an app, because the search engine does not execute the complex JavaScript code.
    What the search engine wants is a static HTML.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当搜索引擎发现一个由AJAX驱动的Web应用程序时，它无法索引这样的应用程序，因为搜索引擎不会执行复杂的JavaScript代码。搜索引擎想要的是静态HTML。
- en: In this recipe, we are going to learn how to make the search engine index the
    AJAX web application. We are going to deal mostly with Google, but we will also
    consider how to work with others.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使搜索引擎索引AJAX Web应用程序。我们将主要处理Google，但也会考虑如何与其他搜索引擎合作。
- en: The idea behind this recipe is that we can render the AJAX app into a static
    HTML page on the server and deliver it to a search engine spider via a proxy redirect.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱背后的想法是，我们可以在服务器上将AJAX应用程序渲染为静态HTML页面，并通过代理重定向将其发送给搜索引擎蜘蛛。
- en: To render JavaScript on the server, we are going to use the `Node.js` and `Phantom.js`
    files, which is a headless WebKit browser available as a Node module. We will
    also use a Node module named Seoserver that helps us to run `Phantom.js` and output
    the result.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器上渲染JavaScript，我们将使用`Node.js`和`Phantom.js`文件，这是一个作为Node模块提供的无头WebKit浏览器。我们还将使用一个名为Seoserver的Node模块，它帮助我们运行`Phantom.js`并输出结果。
- en: To distinguish the search engine spider from a regular client and use a proxy
    redirect to the Seoserver, we will use Apache's `mod_rewrite`, `mod_proxy`, and
    `mod_proxy_http` modules.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分搜索引擎蜘蛛和普通客户端，并使用代理重定向到Seoserver，我们将使用Apache的`mod_rewrite`、`mod_proxy`和`mod_proxy_http`模块。
- en: Getting ready...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'Perform the following steps to get prepared for this recipe:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以准备此食谱：
- en: Make sure you have `Node.js` and npm installed.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已安装`Node.js`和npm。
- en: Install `Phantom.js` as a Node module.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Phantom.js`作为Node模块安装。
- en: '[PRE63]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Install Seoserver, which is also a Node module.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Seoserver，它也是一个Node模块。
- en: '[PRE64]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Make sure you have Apache installed.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已安装Apache。
- en: 'Make sure you have the following Apache extensions installed and configured:
    `mod_rewrite`, `mod_proxy`, and `mod_proxy_http`.'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已安装并配置以下Apache扩展：`mod_rewrite`、`mod_proxy`和`mod_proxy_http`。
- en: Make sure you have permissions to override a configuration in the `.htaccess`
    files.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您有权限覆盖`.htaccess`文件中的配置。
- en: How to do it...
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to ensure compatibility with search engines:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以确保与搜索引擎兼容性：
- en: Tell **Google** bot to use `_escaped_fragement_` instead of `#!` by adding the
    following line into the header section of `index.html`.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`index.html`的标题部分添加以下行，告诉**Google**蜘蛛使用`_escaped_fragement_`而不是`#!`：
- en: '[PRE65]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We will learn what it means later.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在稍后了解其含义。
- en: Create the `.htaccess` file and place the following lines to perform the redirect
    operation via proxy to the Seoserver running on the 3000 port.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `.htaccess` 文件，并将以下行放置其中以通过代理将重定向操作执行到运行在 3000 端口的 Seoserver。
- en: '[PRE66]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: To redirect other search engines (for example, Yandex) to the Seoserver via
    proxy, add the following lines into the `.htaccess` file.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过代理将其他搜索引擎（例如 Yandex）重定向到 Seoserver，请将以下行添加到 `.htaccess` 文件中。
- en: '[PRE67]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Start the Seoserver by running the following command.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令启动 Seoserver。
- en: '[PRE68]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Optionally, create a site map with URLs in the following format: `http://<host>/<path>index.html#!route`'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，创建一个具有以下格式的网站地图：`http://<host>/<path>index.html#!route`
- en: 'You can check a result and see what the Google bot sees using the following
    link: [http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587)'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下链接检查结果并查看 Googlebot 看到的内容：[http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587)
- en: Tip
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also check the result manually by accessing `http://<host>/<path>index.html?_escaped_fragement_=route`.
    In this case, make sure you have disabled JavaScript in your browser to avoid
    any conflicts.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您也可以通过访问 `http://<host>/<path>index.html?_escaped_fragement_=route` 来手动检查结果。在这种情况下，请确保您已禁用浏览器中的
    JavaScript，以避免任何冲突。
- en: How it works...
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There is a way how **Googlebot** understands that the site supports the AJAX
    crawling scheme. It simply tries to access the website using URL like `http://<host>/</path>index.html#!route`
    and checks for any significant result. `#!` is used instead of `#` to indicate
    to the webmaster that it is exactly what Googlebot wants while trying to access
    the resource. Googlebot also scans the sitemap and tries to find URLs with the
    same URL scheme.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以让 **Googlebot** 理解该网站支持 AJAX 爬取方案。它简单地尝试使用类似 `http://<host>/</path>index.html#!route`
    的 URL 访问网站，并检查是否有任何显著的结果。`#!` 被用来代替 `#`，以向网站管理员表明这正是 Googlebot 在尝试访问资源时想要的。Googlebot
    还会扫描网站地图，并尝试找到具有相同 URL 方案的 URL。
- en: 'Webmaster should implement handling of such URLs and output the HTML snapshots
    that can be easily indexed by a search engine. In case if a URL with `#!` could
    not be processed by the server, it is allowed to use the following URL scheme:
    `http://<host>/</path>index.html?_escaped_fragement_=route`. This should be indicated
    by adding a special meta tag in the HTML output.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 网站管理员应实现处理此类 URL 的处理，并输出可以被搜索引擎轻松索引的 HTML 快照。如果服务器无法处理带有 `#!` 的 URL，则允许使用以下
    URL 方案：`http://<host>/</path>index.html?_escaped_fragement_=route`。这应通过在 HTML
    输出中添加特殊元标签来指示。
- en: '[PRE69]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Such a URL scheme that is easily handled by Apache and Googlebot is redirected
    via the proxy to the server that outputs the HTML snapshot.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这种易于 Apache 和 Googlebot 处理的 URL 方案通过代理重定向到输出 HTML 快照的服务器。
- en: We will pass all parameters to the Seoserver, which is running on port 3000,
    and calls `phantom` to get the HTML snapshot of the requested resource.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将传递所有参数到运行在 3000 端口的 Seoserver，并调用 `phantom` 来获取请求资源的 HTML 快照。
- en: Seoserver is written on `Node.js`. Let's see its sources in `seoserver.js`.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Seoserver 是用 `Node.js` 编写的。让我们看看 `seoserver.js` 中的源代码。
- en: '[PRE70]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Seoserver also includes the `phantom-server.js` file with the following code:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: Seoserver 还包含以下代码的 `phantom-server.js` 文件：
- en: '[PRE71]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: Check out the Seoserver source repository at [https://github.com/apiengine/seoserver](https://github.com/apiengine/seoserver)
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 Seoserver 源代码库：[https://github.com/apiengine/seoserver](https://github.com/apiengine/seoserver)
- en: To learn more about URL rewriting, please visit [http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html](http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html)
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 URL 重写的信息，请访问 [http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html](http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html)
- en: The `Phantom.js` docs are available at [https://github.com/ariya/phantomjs/wiki](https://github.com/ariya/phantomjs/wiki)
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Phantom.js` 的文档可在 [https://github.com/ariya/phantomjs/wiki](https://github.com/ariya/phantomjs/wiki)
    找到。'
- en: Please refer to the Google Developers docs to learn more about AJAX app crawling
    at [https://developers.google.com/webmasters/ajax-crawling/](https://developers.google.com/webmasters/ajax-crawling/)
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Google 开发者文档了解有关 AJAX 应用爬取的更多信息：[https://developers.google.com/webmasters/ajax-crawling/](https://developers.google.com/webmasters/ajax-crawling/)
- en: Avoiding memory leaks in a Backbone application
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免在 Backbone 应用程序中发生内存泄漏
- en: A memory leak is a problem that can occur in a computer program due to incorrect
    memory allocation. In high-level object-oriented languages such as JavaScript,
    memory leak is often related to an object that is stored in the memory but isn't
    used by an application code. A memory leak can lead to a more serious problem
    such as exhausting the available system memory.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 内存泄漏是计算机程序中可能发生的问题，由于内存分配不正确。在JavaScript等高级面向对象语言中，内存泄漏通常与存储在内存中但未被应用程序代码使用的对象有关。内存泄漏可能导致更严重的问题，例如耗尽可用系统内存。
- en: 'The following example demonstrates memory leak caused by a closure (anonymous
    function):'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了由闭包（匿名函数）引起的内存泄漏：
- en: '[PRE72]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the preceding code, a new HTML element is created and the `onclick` callback
    is assigned to an anonymous function. Such a code produces a memory leak because
    `div` references to a closure, while closure references to a div since the div
    variable can be accessed in a closure scope. Such cyclic referencing can produce
    a memory leak because neither div nor closure is utilized by a garbage collector.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，创建了一个新的HTML元素，并将 `onclick` 回调分配给一个匿名函数。这样的代码会产生内存泄漏，因为 `div` 引用了闭包，而闭包引用了
    `div`，因为 `div` 变量可以在闭包作用域中访问。这种循环引用可以产生内存泄漏，因为垃圾收集器既没有利用 `div` 也没有利用闭包。
- en: In this recipe, we will learn how to detect memory leaks in a Backbone application
    and how to fix them. We will use Google Chrome Heap Profiler, which is a part
    of the Google Chrome browser.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何在Backbone应用程序中检测内存泄漏以及如何修复它们。我们将使用Google Chrome Heap Profiler，它是Google
    Chrome浏览器的一部分。
- en: Getting ready...
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: In this recipe, we are going to take an example application from the recipe
    binding a collection to a view of [Chapter 5](ch05.html "Chapter 5. Events and
    Bindings"), *Events and Binding* and modify it. Such modifications are not required
    in the production application but will help us to detect memory leaks using Google
    Chrome Heap Profiler.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将从一个绑定集合到[第5章](ch05.html "第5章。事件和绑定")视图的示例应用程序开始，*事件和绑定*进行修改。这些修改在生产应用程序中不是必需的，但将帮助我们使用Google
    Chrome Heap Profiler检测内存泄漏。
- en: Add a named constructor to the each object in your program, which is extended
    from a standard Backbone object, such as Model or View. Inside this constructor,
    call a parent constructor.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的程序中，为每个从标准Backbone对象（如Model或View）扩展的对象添加一个命名构造函数。在这个构造函数内部，调用父构造函数。
- en: It could be much easier to detect memory leaks in Google Chrome Heap Profiler
    by finding object instances using their class names, which would only be possible
    if we defined such classes using named constructors.
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用类名查找对象实例，在Google Chrome Heap Profiler中检测内存泄漏可能会更容易，这只有在我们使用命名构造函数定义这样的类时才可能。
- en: Following code shows the `InvoiceItemModel` object with the named constructor
    defined.
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码显示了定义了命名构造函数的 `InvoiceItemModel` 对象。
- en: '[PRE73]'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Make sure your application code is performed in a global scope. This will make
    it easier to find Backbone objects in Google Chrome Heap Profiler. Contents of
    your `main.js` file shouldn't be enclosed by any function. The next few lines
    of code should be removed from your `main.js` file.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的应用程序代码在全局范围内执行。这将使我们在Google Chrome Heap Profiler中找到Backbone对象更容易。你的 `main.js`
    文件的内容不应该被任何函数包围。以下几行代码应该从你的 `main.js` 文件中移除。
- en: '[PRE74]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Inclusion of `main.js` into `index.html` should be performed in the `body`
    section as follows:'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `main.js` 包含到 `index.html` 的 `body` 部分中，如下所示：
- en: '[PRE75]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Modify `ControlsView` by adding a button which deletes `InvoiceItemsTableView`
    to demonstrate a memory leak. The following code explains how it works:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加一个删除 `InvoiceItemsTableView` 的按钮来修改 `ControlsView`，以演示内存泄漏。以下代码解释了它是如何工作的：
- en: '[PRE76]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Our prepared application should look like the following image:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备的应用程序应该看起来像以下图片：
- en: '![Getting ready...](img/2728OS_08_11.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![准备中...](img/2728OS_08_11.jpg)'
- en: How to do it…
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to detect and to fix memory leaks in this application:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以检测和修复此应用程序中的内存泄漏：
- en: Open a web application in the **Chrome** browser.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Chrome** 浏览器中打开一个Web应用程序。
- en: Press the *F12* key to open **Chrome DevTool**.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *F12* 键以打开 **Chrome DevTool**。
- en: Click on the **Profiles** tab and select the **Take Heap Snapshot** item.![How
    to do it…](img/2728OS_08_12.jpg)
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置文件** 选项卡并选择 **获取堆快照** 项。![如何做到这一点…](img/2728OS_08_12.jpg)
- en: Click on the **Take Snapshot** button.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **获取快照** 按钮。
- en: Enter `Invoice` in the **Class Filter** field.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **类过滤器** 字段中输入 `Invoice`。
- en: You will see all the classes starting with an `Invoice` and an amount of their
    instances under the **Objects Count** column.![How to do it…](img/2728OS_08_13.jpg)
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将在**对象计数**列下看到所有以`Invoice`开头以及它们实例数量的所有类。[如何操作…](img/2728OS_08_13.jpg)
- en: Click on the **Remove table view** button and take the heap snapshot once again
    to see a memory leak.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**移除表格视图**按钮，再次获取堆快照以查看内存泄漏。
- en: You will see that **Objects Count** was not decreased for any class but should
    have been.![How to do it…](img/2728OS_08_14.jpg)
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会发现**对象计数**对于任何类都没有减少，但应该是减少的。[如何操作…](img/2728OS_08_14.jpg)
- en: Delete any references to objects from other objects when those references aren't
    required.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当不需要这些引用时，从其他对象中删除对对象的任何引用。
- en: Delete references to the `InvoiceItemsTableView` instance after we called the
    `remove()` method.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`remove()`方法后删除对`InvoiceItemsTableView`实例的引用。
- en: '[PRE77]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Delete all the child subviews when the parent view is removed.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当父视图被移除时，删除所有子子视图。
- en: In the following code, when the new sub-view is created, we assign its remove
    method as a handler to the clear event of the parent view. In the `remove()` method
    of the parent view, we trigger the clear event.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，当创建新的子视图时，我们将它的移除方法作为处理程序分配给父视图的清除事件。在父视图的`remove()`方法中，我们触发清除事件。
- en: '[PRE78]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Use `listenTo()` method instead of `on()` to bind callbacks to the events.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`listenTo()`方法而不是`on()`方法来绑定回调到事件。
- en: The `listenTo()` method keeps track of the bound events that unbinds them when
    the object is removed to make sure there is no any cyclic reference.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`listenTo()`方法跟踪绑定的事件，当对象被移除时解除绑定，以确保没有循环引用。'
- en: '[PRE79]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Reload the page, remove the table view, and then create a new heap snapshot
    to make sure no invoice views are leaked. We can still see some models are kept
    in the memory, but it happens because they are used by `ControlsView`.![How to
    do it…](img/2728OS_08_15.jpg)
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载页面，移除表格视图，然后创建一个新的堆快照以确保没有发票视图泄漏。我们仍然可以看到一些模型被保留在内存中，但这发生是因为它们被`ControlsView`使用。[如何操作…](img/2728OS_08_15.jpg)
- en: See also
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The JavaScript Garbage Collector is described at the following location: [http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx](http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx)'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript垃圾回收器的描述位于以下位置：[http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx](http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx)
- en: 'Memory leaks'' patterns in JavaScript are described at the following location:
    [http://www.ibm.com/developerworks/web/library/wa-memleak/](http://www.ibm.com/developerworks/web/library/wa-memleak/)'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript中的内存泄漏模式在以下位置有描述：[http://www.ibm.com/developerworks/web/library/wa-memleak/](http://www.ibm.com/developerworks/web/library/wa-memleak/)
