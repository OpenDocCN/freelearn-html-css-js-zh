- en: Chapter 6. Creating Grids
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。创建网格
- en: There are several different routes to take when creating basic site layouts,
    and in many cases, developers may decide to use CSS grids.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建基本网站布局时，有几种不同的路径可以选择，在许多情况下，开发者可能会决定使用 CSS 网格。
- en: A classic example for those using CSS pre-processors, is of course, the SASS
    grid system, **Bourbon Neat**—a great package, spoiled by the need to install
    Ruby. We can easily fix this in PostCSS, by using one of several plugins available,
    without the need for extra dependencies. In this chapter, we'll take a look at
    what's available, and work through some examples, using a plugin for creating
    grids within PostCSS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 CSS 预处理器的人来说，一个经典的例子当然是 SASS 网格系统，**Bourbon Neat**——一个很棒的包，但需要安装 Ruby 才能使用。我们可以在
    PostCSS 中轻松解决这个问题，通过使用几个可用的插件之一，无需额外的依赖。在本章中，我们将探讨可用的选项，并通过一些示例来演示如何使用 PostCSS
    内置的插件创建网格。
- en: 'We will cover a number of topics throughout this chapter, which will include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖多个主题，包括：
- en: Introducing the basic principles of using CSS grids
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍使用 CSS 网格的基本原则
- en: Exploring the grid plugins available for use within PostCSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 PostCSS 中可用的网格插件
- en: Working through some simple examples using Bourbon Neat
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bourbon Neat 通过一些简单的示例进行操作
- en: Replicating pure SCSS examples using the PostCSS plugin, PostCSS-Neat
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PostCSS 插件 PostCSS-Neat 复制纯 SCSS 示例
- en: Adding responsive capabilities using the PostCSS-media-minmax plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PostCSS-media-minmax 插件添加响应式功能
- en: Let's get cracking…!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧…！
- en: Introducing grid design
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍网格设计
- en: The principles of using grids in design are not new, they date from the Second
    World War, with a number of graphic designers questioning the design of conventional
    page layouts, in favor of designing a system that provided a flexible, yet coherent,
    layout.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计中使用网格的原则并不新颖，它们可以追溯到第二次世界大战，当时许多平面设计师对传统页面布局的设计提出了质疑，转而设计一个既灵活又连贯的布局系统。
- en: The same principles have been transferred to the web, starting with plain HTML,
    and CSS-based designs, before newer frameworks took over and helped to make construction
    easier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则已经转移到网络上，从最初的纯 HTML 和基于 CSS 的设计开始，然后是更新的框架接管并帮助简化构建过程。
- en: It doesn't matter how the design is constructed, we can of course use HTML and
    CSS, or we might favor the image template approach (using packages such as `PhotoShop`),
    particularly if responsibility for designing the front end falls with a different
    team.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无论设计如何构建，我们当然可以使用 HTML 和 CSS，或者我们可能更喜欢图像模板方法（使用如 `PhotoShop` 的包），尤其是如果前端设计的责任落在不同的团队上。
- en: 'These are perfectly acceptable methods, but require a lot of manual effort—in
    this age of web design, time is critical; we can instead make use of newer frameworks
    (such as SASS, Bourbon Neat, or Bootstrap) to create our grids, as shown in this
    example (which uses plain SASS):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法是完全可以接受的，但需要大量的手动工作——在这个网页设计时代，时间至关重要；我们可以利用更新的框架（如 SASS、Bourbon Neat 或
    Bootstrap）来创建我们的网格，如本例所示（使用纯 SASS）：
- en: '![Introducing grid design](img/BO5194_06_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![介绍网格设计](img/BO5194_06_01.jpg)'
- en: 'We can see this type of layout in action, if we go ahead and extract the `Tutorial28`
    folder from the code download that accompanies this book, then review it using
    a browser. We will see this grid appear, the `style.css` file used by this demo
    was created using the online SASS playground, Sassmeister at: [http://www.sassmeister.com](http://www.sassmeister.com).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从这个书的代码下载中提取 `Tutorial28` 文件夹，然后使用浏览器查看它，我们就可以看到这种布局的实际效果。这个演示使用的 `style.css`
    文件是在线 SASS 游乐场 Sassmeister 上创建的，网址为：[http://www.sassmeister.com](http://www.sassmeister.com)。
- en: Much of the code used in this demo centers around each column width and the
    overall .wrapper container; if you take a look at the code, you will notice that
    there are no static values for column widths. There are a couple of static values,
    but their sizes are not critical to the overall effect.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中使用的代码大部分都与每个列宽和整体 .wrapper 容器有关；如果你查看代码，你会注意到列宽没有静态值。有几个静态值，但它们的大小对整体效果并不关键。
- en: 'The key to our demo working centers around this block of CSS styling:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示的关键在于这个 CSS 样式块：
- en: '![Introducing grid design](img/BO5194_06_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![介绍网格设计](img/BO5194_06_02.jpg)'
- en: 'Here, we''re using SASS''s interpolation to first build our media query (to
    make it responsive), followed by styles for a series of columns that form our
    grid. When compiled, it creates a number of styles that apply to each part of
    our grid:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用SASS的插值功能首先构建我们的媒体查询（使其响应），然后是形成网格的一系列列的样式。编译后，它创建了一系列应用于我们网格各个部分的样式：
- en: '![Introducing grid design](img/BO5194_06_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![介绍网格设计](img/BO5194_06_03.jpg)'
- en: It's a simple matter of matching up the style with the number shown on the grid.
    If we want to change the widths, we simply need to increase the number of columns,
    and our `for` statement will automatically calculate a new set of values at the
    next compilation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个将样式与网格上显示的数字匹配的问题。如果我们想更改宽度，我们只需增加列数，我们的`for`语句将在下一次编译时自动计算出一组新值。
- en: 'Okay, enough chitchat: time, I think, for a demo! Throughout this chapter,
    we will work through the principles of migrating from some basic examples using
    SASS, through to using Bourbon Neat, before converting to using PostCSS plugins.
    We always have to start somewhere, so let''s begin with automating our compilation
    process using SASS.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，闲话少说：我认为现在是时候进行演示了！在本章中，我们将从使用SASS的一些基本示例开始，通过使用Bourbon Neat，最后转换为使用PostCSS插件。我们总是要从某个地方开始，所以让我们从使用SASS自动化编译过程开始。
- en: Automating the compilation process
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化编译过程
- en: '"Installing SASS?" I hear you ask Why, when this book is about PostCSS?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “安装SASS？”我听到你问为什么，当这本书是关于PostCSS的时候？
- en: 'I hear you, it''s a good question: there is logic, though, in this madness—let
    me explain all:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我听到了，这是一个好问题：虽然这看起来有些疯狂，但其中确实有逻辑——让我来解释一下：
- en: While we are installing SASS, we're not going to use the standard route to installing
    it; instead, we're going to use the `gulp-sass` plugin. This allows us to make
    the initial switch to using a `gulp` file; this puts us one step further on down
    the route to converting our processes to use PostCSS. The use of a `gulp` file
    provides a convenient framework where we can switch components in, or out, while
    we transition to using PostCSS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在安装SASS时，我们不会使用标准的安装路径；相反，我们将使用`gulp-sass`插件。这允许我们开始使用`gulp`文件；这使我们更接近将我们的流程转换为使用PostCSS。使用`gulp`文件提供了一个方便的框架，我们可以在此过渡到使用PostCSS时切换组件。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In [Chapter 12](ch12.html "Chapter 12. Mixing Preprocessors"), *Mixing Preprocessors*,
    we will see how PostCSS works well with other preprocessors, as a basis for adopting
    a consistent approach to compiling code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](ch12.html "第12章。混合预处理器")中，我们将看到 *混合预处理器* 如何与PostCSS很好地协同工作，作为采用一致方法编译代码的基础。
- en: 'So, without further ado, let''s make a start on installing the `gulp-sass`
    plugin, before putting it to work:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无需多言，让我们开始安装`gulp-sass`插件，然后再投入使用：
- en: We'll start by firing up a Node.js command prompt session, then changing the
    working folder to our project area.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先启动一个Node.js命令提示符会话，然后更改工作文件夹到我们的项目区域。
- en: 'At the prompt, go ahead and enter this command, then press *Enter*:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，请输入以下命令，然后按 *Enter* 键：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don't close the window, we will need it shortly!
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要关闭窗口，我们很快就会用到它！
- en: Node will go away and install `gulp-sass`; it returns to the prompt when the
    installation is completed.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node将退出并安装`gulp-sass`；安装完成后，它将返回到提示符。
- en: With the plugin installed, we now need to compile our code—go ahead and extract
    a copy of the `Tutorial29` folder to our project area.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装完成后，我们现在需要编译我们的代码——请将`Tutorial29`文件夹的副本提取到我们的项目区域。
- en: Copy the contents of the `sass – pre-compile` folder to the `src` folder at
    the root of our project area.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`sass – pre-compile`文件夹的内容复制到我们的项目区域根目录下的`src`文件夹。
- en: We also need to add the `gulpfile.js` and `package.json` files from the `Tutorial29`
    folder to the root of our project area.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将`Tutorial29`文件夹中的`gulpfile.js`和`package.json`文件添加到我们的项目区域的根目录。
- en: Revert back to the Node.js window we had earlier, then at the prompt, enter
    `gulp` and press *Enter*.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们之前打开的Node.js窗口，然后在提示符下输入`gulp`并按 *Enter* 键。
- en: The files will now compile—once completed, copy them into the `css` folder within
    the `Tutorial29` folder.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件现在将进行编译——一旦完成，请将它们复制到`Tutorial29`文件夹内的`css`文件夹中。
- en: Try previewing the results of our work in a browser; if all is well, we should
    see something akin to this screenshot:![Automating the compilation process](img/BO5194_06_04.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在浏览器中预览我们工作的结果；如果一切顺利，我们应该看到类似于这个截图的内容：![自动化编译过程](img/BO5194_06_04.jpg)
- en: 'Right, we now have automatic support for compiling in place; "What next?" I
    hear you ask. We''re one step closer, in that our code can now be compiled automatically:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有了自动编译的支持；“接下来是什么？”我听到你问。我们又近了一步，因为我们的代码现在可以自动编译了：
- en: '![Automating the compilation process](img/BO5194_06_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![自动化编译过程](img/BO5194_06_05.jpg)'
- en: However, manual effort is still required to construct our grid! Let's start
    to change that now, there are several frameworks available that we can use, but
    in my view, one of the cleanest is SASS's Bourbon Neat. We'll use this as the
    basis for our next few exercises, before migrating to use the PostCSS version
    of this framework.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然需要手动努力来构建我们的网格！让我们现在开始改变这一点，有几个框架可供我们使用，但在我看来，最干净的是SASS的Bourbon Neat。我们将以此为基础进行接下来的几个练习，然后再迁移到使用该框架的PostCSS版本。
- en: Adding support for Bourbon Neat
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Bourbon Neat支持
- en: 'For the uninitiated, SASS''s grid capability is provided by the Bourbon Neat
    add-on (available from [http://neat.bourbon.io/](http://neat.bourbon.io/)). For
    the purposes of our exercise, we''re going to use the Node versions of the framework—this
    requires two installations to be completed, so let''s go ahead and do that now:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，SASS的网格功能由Bourbon Neat插件提供（可在[http://neat.bourbon.io/](http://neat.bourbon.io/)找到）。为了我们练习的目的，我们将使用框架的Node版本——这需要完成两个安装，所以现在我们就来做吧：
- en: If you still have it open, revert back to the Node.js command prompt session
    from the previous demo; otherwise, open a new one and change the working folder
    to our project area.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它仍然打开，请从上一个演示中的Node.js命令提示符会话中恢复；否则，打开一个新的会话并将工作文件夹更改为我们的项目区域。
- en: 'At the prompt, enter these two commands in turn, pressing *Enter* after each:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，依次输入这两个命令，每次输入后按*Enter*键：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both plugins will have installed correctly when we see a result akin to this
    screenshot:![Adding support for Bourbon Neat](img/BO5194_06_06.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们看到类似于以下截图的结果时，这两个插件都将正确安装：![添加Bourbon Neat支持](img/BO5194_06_06.jpg)
- en: 'With the plugins now installed, we need to modify our `gulp` file—go ahead
    and add this at line 5:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在插件已经安装，我们需要修改我们的`gulp`文件——请将以下内容添加到第5行：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, leave a line, then add the code as shown, at line 7:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，留一行空白，然后在第7行添加如下所示的代码：
- en: '[PRE3]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The original SASS task can be replaced with this new task:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以用这个新任务替换原始的SASS任务：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The reference to SASS in the default task is now incorrect—go ahead and change
    it to: `gulp.task(''default'', [''styles'']);`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认任务中对SASS的引用现在是不正确的——请将其更改为：`gulp.task('default', ['styles']);`
- en: 'Finally, change this line as indicated:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照指示更改此行：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We're now ready to test our compilation process—go ahead and extract a copy
    of the contents of `style – pre-compile.scss` from the code download and save
    it to the `src` folder.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以测试我们的编译过程了——请从代码下载中提取`style – pre-compile.scss`的内容的副本，并将其保存到`src`文件夹中。
- en: 'At this point, we can run `gulp` from a Node.js command prompt. If this works
    okay, we should get a `style.css` file appear in the `dest` folder. If we open
    it up, we should see some compiled styles, as follows, that prove Neat is installed
    and working:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以从Node.js命令提示符中运行`gulp`。如果一切顺利，我们应该在`dest`文件夹中看到一个`style.css`文件出现。如果我们打开它，我们应该看到一些编译后的样式，如下所示，这证明了Neat已安装并正在工作：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, we now have a working compilation process, and we're good to
    go with building a working site! For now, don't worry too much about the individual
    styles in the compiled `test.css` file, we will cover this in more detail over
    the next few pages. Let's put our new compilation process into practice and assemble
    a working example, so that we can see the grid facility in action.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们现在有一个工作的编译过程，我们可以开始构建一个工作的网站了！现在，不要过于担心编译后的`test.css`文件中的单个样式，我们将在接下来的几页中更详细地介绍这一点。让我们将我们的新编译过程付诸实践，并组装一个工作示例，以便我们可以看到网格功能在实际中的应用。
- en: Creating an example with Bourbon Neat
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bourbon Neat创建示例
- en: Constructing a site using Bourbon Neat is a simple process, it does not require
    any special markup on our web page; the effort is all within the compiled style
    sheet.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bourbon Neat构建网站是一个简单的过程，它不需要在我们的网页上添加任何特殊的标记；所有的努力都在编译后的样式表中。
- en: To prove this, we'll construct a simple web page that could easily be part of
    any website—I've used a Japanese theme as the basis for my page, but the principles
    we will use can apply to any site. You'll see that (with the exception of the
    standard SASS style of code used) there are only three instances where we have
    used Bourbon Neat-specific code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，我们将构建一个简单的网页，它很容易成为任何网站的一部分——我已经使用日本主题作为我页面的基础，但我们将使用的原则可以适用于任何网站。你会看到（除了标准SASS代码风格外），我们只使用了三个Bourbon
    Neat特定的代码实例。
- en: 'Let''s make a start:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: From the code download that accompanies this book, go ahead and extract a copy
    of `Tutorial30`, and save it to the root of our project area.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，请提取`Tutorial30`的副本，并将其保存到我们的项目区域的根目录下。
- en: Copy the contents of the `sample site – pre-compile` from within the `Tutorial30`
    folder to the `src` folder within our project area. Go ahead and rename it as
    `sample.scss`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Tutorial30`文件夹内的`sample site – pre-compile`的内容复制到我们的项目区域内的`src`文件夹中。然后将其重命名为`sample.scss`。
- en: Next, fire up a Node.js command prompt, then change the working folder to our
    project area.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动一个Node.js命令提示符，然后更改工作文件夹到我们的项目区域。
- en: At the prompt, enter `gulp`, then press *Enter*—Node.js will compile the code;
    if all is well, we should see two compiled style sheets and a source map in the
    `dest` folder.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入`gulp`，然后按*Enter*——Node.js将编译代码；如果一切顺利，我们应该在`dest`文件夹中看到两个编译后的样式表和一个源映射。
- en: Go ahead and copy the contents of the `dest` folder into the `css` folder at
    the root of the `Tutorial30` folder.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请将`dest`文件夹的内容复制到`Tutorial30`文件夹根目录下的`css`文件夹中。
- en: 'If we try previewing the results of our work, we should see a stylish page
    appear, with our Japanese theme:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试预览我们的工作结果，我们应该看到一个时尚的页面出现，带有我们的日本主题：
- en: '![Creating an example with Bourbon Neat](img/BO5194_06_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bourbon Neat创建示例](img/BO5194_06_07.jpg)'
- en: The demo covers a couple of key points and useful tricks, so let's dive in and
    work through them in more detail.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示涵盖了几个关键点和有用的技巧，所以让我们深入探讨它们。
- en: Exploring our demo in more detail
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更详细地探索我们的演示
- en: At this point, be surprised to hear that, our first tip is not directly related
    to SASS or even Bourbon Neat, but to the color scheme!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能惊讶地发现，我们的第一个技巧与SASS或甚至Bourbon Neat没有直接关系，而是与配色方案有关！
- en: '"Why", I hear you ask, "are we talking about the color scheme first?" There
    is a good reason for this: we''ve used variables to reference our colors, but
    could equally have used SASS functions to create the values. We''ve already covered
    this back in [Chapter 5](ch05.html "Chapter 5. Managing Colors, Images, and Fonts"),
    *Managing Colors, Images and Fonts*, where we covered the use of the `postcss-color-function`
    plugin to build these values; we will use it again later in this chapter.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么”，我听到你问，“我们首先讨论的是配色方案？” 这有一个很好的原因：我们使用了变量来引用我们的颜色，但同样可以使用SASS函数来创建这些值。我们已经在[第5章](ch05.html
    "第5章. 管理颜色、图像和字体")中讨论过这一点，即*管理颜色、图像和字体*，其中我们介绍了使用`postcss-color-function`插件来构建这些值；我们将在本章后面再次使用它。
- en: 'The real tip here, though, is using a nifty applet by Lokesh Dhakar, called
    **Color Thief** (hosted at [http://lokeshdhakar.com/projects/color-thief/](http://lokeshdhakar.com/projects/color-thief/)).
    We can simply drag and drop our header image in and get a full swatch of suitable
    colors:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，真正的技巧是使用Lokesh Dhakar的一个巧妙的小程序，名为**Color Thief**（托管在[http://lokeshdhakar.com/projects/color-thief/](http://lokeshdhakar.com/projects/color-thief/))。我们可以简单地拖放我们的标题图像进去，并得到一整套合适的颜色：
- en: '![Exploring our demo in more detail](img/BO5194_06_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地探索我们的演示](img/BO5194_06_08.jpg)'
- en: The only downside is that it doesn't provide the color values; we can get these
    from the page's source instead.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的缺点是它不提供颜色值；我们可以从页面的源代码中获取这些值。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your preference is to use RGB(A) colors instead, then a site such as **Color
    Hexa** ([http://colorhexa.com](http://colorhexa.com)) will be a great help.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用RGB(A)颜色，那么像**Color Hexa**([http://colorhexa.com](http://colorhexa.com))这样的网站将非常有帮助。
- en: 'The key to our demo is at lines 33, 63 and 69-these are Bourbon Neat mixins
    that control the format of the outer container (line 33):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示的关键在于第33行、第63行和第69行——这些是控制外部容器格式的Bourbon Neat混入（第33行）：
- en: '![Exploring our demo in more detail](img/BO5194_06_09.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地探索我们的演示](img/BO5194_06_09.jpg)'
- en: 'They also control the format of each of the two content areas within (lines
    63 and 69):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还控制着内部两个内容区域（第63行和第69行）的格式：
- en: '![Exploring our demo in more detail](img/BO5194_06_10.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地探索我们的演示](img/BO5194_06_10.jpg)'
- en: 'When compiled, the `outer-container` mixin adds a `max-width` of 72% to the
    `.wrapper` class controlling the main section, while the `span-columns()` mixins
    add `float`, `display`, `width`, and `margin-right` attributes to each element,
    like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时，`outer-container` 混合器会给 `.wrapper` 类添加一个 72% 的 `max-width`，而 `span-columns()`
    混合器会给每个元素添加 `float`、`display`、`width` 和 `margin-right` 属性，如下所示：
- en: '![Exploring our demo in more detail](img/BO5194_06_11.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![探索我们的演示细节](img/BO5194_06_11.jpg)'
- en: In addition to the `outer-container()` and `span-columns()` mixins, the demo
    uses percentage values as much as possible, where `rem` or `pixel` values have
    been specified, then maintaining a cohesive design when resizing these elements
    is less critical.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `outer-container()` 和 `span-columns()` 混合器之外，演示尽可能多地使用了百分比值，当指定了 `rem` 或
    `pixel` 值时，然后在调整这些元素的大小时保持一致的设计就不那么关键了。
- en: We will, however, make some improvements later in this chapter, when we improve
    the responsive capabilities of our demo. For now, let's continue with our transition,
    and introduce the use of PostCSS plugins into our process.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将在本章的后面部分进行一些改进，当我们提高演示的响应能力时。现在，让我们继续我们的转换，并介绍将 PostCSS 插件的使用引入我们的流程中。
- en: Exploring the grid plugins in PostCSS
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 PostCSS 的网格插件
- en: Throughout this chapter we've used SASS with Bourbon Neat to produce our grids.
    It's a perfectly valid option to use, but is not the only one available. We might
    have preferred to work with something like Bootstrap or the Semantic Grid System
    instead; it's ultimately down to our personal choice as to which grid system we
    use, based on our preferences and requirements.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 SASS 和 Bourbon Neat 来生成我们的网格。这是一个完全有效的选择，但并非唯一的选择。我们可能更喜欢使用像 Bootstrap
    或语义网格系统这样的东西；最终，选择使用哪个网格系统取决于我们的个人选择，基于我们的偏好和需求。
- en: 'Up until now, we''ve focused on using Neat. This is largely due to familiarity
    and ease of use. There will come a point, though, when we need to make the transition
    to using PostCSS—the beauty is that there is a dedicated plugin available for
    using Neat within PostCSS, at [https://github.com/jo-asakura/postcss-neat](https://github.com/jo-asakura/postcss-neat).
    It''s not the only grid system plugin available for PostCSS, so let''s take a
    moment to cover the others that can be used:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直专注于使用 Neat。这主要是因为熟悉和易用。然而，将来的某个时刻，我们需要转向使用 PostCSS——美的是，有一个专门的插件可以在
    PostCSS 中使用 Neat，在 [https://github.com/jo-asakura/postcss-neat](https://github.com/jo-asakura/postcss-neat)。这不是
    PostCSS 可用的唯一网格系统插件，所以让我们花点时间来介绍其他可以使用的插件：
- en: '`Grid`: Downloadable from https://github.com/andyjansson/postcss-grid, this
    plugin splits some of the configuration between PostCSS and the stylesheet, which
    helps to simplify the calculations required for formatting each column.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid`: 可从 https://github.com/andyjansson/postcss-grid 下载，这个插件将一些配置在 PostCSS
    和样式表中之间分割，这有助于简化格式化每个列所需的计算。'
- en: '`Lost`: Available from [https://github.com/corysimmons/lost](https://github.com/corysimmons/lost),
    it describes itself as the Autoprefixer for grid systems; it provides support
    for most preprocessors, such as Less, SASS, or Stylus.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lost`: 可从 [https://github.com/corysimmons/lost](https://github.com/corysimmons/lost)
    获取，它将自己描述为网格系统的 Autoprefixer；它为大多数预处理器提供支持，例如 Less、SASS 或 Stylus。'
- en: '`Simple-grid`: From [https://github.com/admdh/postcss-simple-grid](https://github.com/admdh/postcss-simple-grid),
    this plugin takes a different route: all of the configuration is done in CSS,
    not within the task configuration.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Simple-grid`: 从 [https://github.com/admdh/postcss-simple-grid](https://github.com/admdh/postcss-simple-grid)
    获取，这个插件采取了不同的路线：所有的配置都是在 CSS 中完成的，而不是在任务配置中。'
- en: Without further ado, it's time for us to make the transition—let's make a start
    by getting the plugin installed and configured for use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，是我们进行转换的时候了——让我们从安装和配置插件开始使用。
- en: Transitioning to using PostCSS-Neat
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向使用 PostCSS-Neat
- en: Making the transition to PostCSS is relatively straightforward. We need, of
    course,to update our compilation process to remove links to SASS, and introduce
    our PostCSS plugin.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 转向使用 PostCSS 相对直接。我们当然需要更新我们的编译过程，以移除对 SASS 的链接，并引入我们的 PostCSS 插件。
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The transition process will be completed over this and the next two sections.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 转换过程将在本节和接下来的两节中完成。
- en: In terms of changing the CSS, it's a little more complicated, as we have to
    work out how many columns are required for each grid block. Fortunately, our example
    is relatively straightforward, as we numbered the original blocks with the appropriate
    column count, so we can use that as a basis for changing our CSS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改 CSS 方面，稍微复杂一些，因为我们必须确定每个网格块所需的列数。幸运的是，我们的例子相对简单，因为我们已经用适当的列数对原始块进行了编号，因此我们可以将其作为更改
    CSS 的基础。
- en: 'Let''s make a start with updating our compilation process:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从更新我们的编译过程开始：
- en: We'll start by extracting a copy of the `Tutorial31` folder from the code download
    that accompanies this book. Save it to the root of our project area.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从本书附带的代码下载中提取 `Tutorial31` 文件夹的副本。将其保存到我们的项目区域根目录。
- en: From the `Tutorial31` folder, go ahead and extract copies of `package.json`
    and `gulpfile.js` files. Save these to the root of our project area.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Tutorial31` 文件夹中，提取 `package.json` 和 `gulpfile.js` 文件的副本。将这些文件保存在我们的项目区域根目录下。
- en: Next, we need to install the `postcss-neat` plugin. For this, fire up a Node.js
    command prompt, then change the working folder to our project area.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装 `postcss-neat` 插件。为此，打开 Node.js 命令提示符，然后更改工作文件夹到我们的项目区域。
- en: 'At the prompt, go ahead and enter this command, then press *Enter*:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，请输入以下命令，然后按 *Enter* 键：
- en: '[PRE7]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Node will go away and install our plugin—the plugin is installed, when we see
    this confirmation:![Transitioning to using PostCSS-Neat](img/BO5194_06_12.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node 将安装我们的插件——当我们看到这个确认信息时，插件已安装：![过渡到使用 PostCSS-Neat](img/BO5194_06_12.jpg)
- en: We now have a plugin installed and configured for use. Before we create a test
    to confirm it works OK, let's take a quick look at our gulp file, at the root
    of our project area.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并配置了一个插件供使用。在我们创建测试以确认它正常工作之前，让我们快速查看我们的 gulp 文件，位于我们的项目区域根目录。
- en: 'If you were expecting a complex configuration, then I''m sorry to disappoint
    you—it''s even easier than installing Bourbon and Neat using the normal method
    outlined on their site! Our gulp file contains the requisite variable calls to
    each plugin at the start, with a watch facility at the end of the file. The section
    of interest to us is this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你期待一个复杂的配置，那么很抱歉让你失望——它甚至比在他们的网站上使用常规方法安装 Bourbon 和 Neat 更简单！我们的 gulp 文件在文件开始处包含了每个插件所需的变量调用，在文件末尾有一个监视功能。对我们来说，感兴趣的这部分是：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This setup should satisfy most scenarios, with a default of 12 columns; if
    there is a need to override it, we can do so by specifying the appropriate option
    in our configuration object:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置应该能满足大多数场景，默认为 12 列；如果需要覆盖它，我们可以在配置对象中指定适当的选项：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will use this option later in this chapter in the *Testing our configuration
    section*, when we build our test example.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的 *测试我们的配置部分* 中使用此选项，当我们构建测试示例时。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a full list of the attributes that can be modified, head over to [https://github.com/jo-asakura/postcss-neat#custom-settings](https://github.com/jo-asakura/postcss-neat#custom-settings).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可以修改的完整属性列表，请访问 [https://github.com/jo-asakura/postcss-neat#custom-settings](https://github.com/jo-asakura/postcss-neat#custom-settings)。
- en: We have a basic configuration now in place, but hold on...it looks a little
    short! The sharp-eyed among you should notice that we've included additional options
    in the `gulp` files in previous exercises, such as creating source maps or minifying
    our CSS files. Let's fix that now, by amending our gulp file to include these
    missing options. Everything will then be in place, ready for when we create our
    example site.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经建立了一个基本的配置，但等等……它看起来有点短！那些有敏锐眼光的人应该会注意到，我们在之前的练习中的 `gulp` 文件中包含了额外的选项，例如创建源映射或压缩我们的
    CSS 文件。现在让我们修正我们的 gulp 文件，包括这些缺失的选项。然后，一切都将准备就绪，以便我们创建示例网站。
- en: Refining our task list
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精炼我们的任务列表
- en: Our `gulp` file, as it stands, is perfectly usable, but isn't really as useful
    as it could be—there are a handful of tasks we've built into previous exercises,
    but which of these are missing here.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的 `gulp` 文件已经可以使用了，但它并不像它本可以做到的那样有用——我们在之前的练习中构建了一些任务，但这里缺少了哪些。
- en: 'A perfect example is the addition of source maps, but how about minifying our
    code too? Let''s take a moment to refine our task list, and add in the missing
    tasks:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完美的例子是添加源映射，但我们也想对代码进行压缩？让我们花点时间来精炼我们的任务列表，并添加缺失的任务：
- en: 'The first task is to add in some variables that will act as references for
    the various plugins we will use—this goes in immediately after the last `var`
    statement, at the top of our `gulp` file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个任务是添加一些变量，它们将作为我们将要使用的各种插件的参考——这些变量直接放在`gulp`文件顶部的最后一个`var`语句之后：
- en: '[PRE10]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first task to add in is a facility to lint our styles:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要添加的任务是添加一个用于检查我们样式的工具：
- en: '[PRE11]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With our styles checked for accuracy and consistency, we can now minify our
    code. Add the following block:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查了样式的准确性和一致性之后，我们现在可以压缩我们的代码。添加以下代码块：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next step is to add a source map option:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加一个源映射选项：
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the additions to our `gulp` file, we need to adjust the main default task
    to call these additional tasks:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`gulp`文件中添加了这些功能后，我们需要调整主要默认任务以调用这些附加任务：
- en: '[PRE14]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We have a watch facility in place, but it knows nothing about these extra tasks;
    let''s add them in now:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经设置了一个监视功能，但它对这些额外任务一无所知；现在让我们添加它们：
- en: '[PRE15]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We now have a working `gulp` file, that includes all of the configuration tasks
    required for our exercise—let's put it to the test by compiling some example code,
    to confirm it all works as expected.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个工作的`gulp`文件，它包括了我们的练习所需的全部配置任务——让我们通过编译一些示例代码来测试它，以确认它按预期工作。
- en: Testing our configuration
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的配置
- en: A key part of our process is testing our `gulp` file to ensure it works; not
    only should it run all of the required tasks, but in the correct order, and produce
    the expected results. Although we've reused existing code for our gulp file, we've
    made some major changes to our `gulp` file—let's take a moment to test it is working,
    using the code from our previous demo.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们流程的关键部分是测试我们的`gulp`文件以确保它正常工作；它不仅应该运行所有必需的任务，而且应该按照正确的顺序运行，并产生预期的结果。尽管我们已经在`gulp`文件中重用了现有代码，但我们已经对`gulp`文件进行了重大修改——让我们花点时间测试它是否正常工作，使用我们之前的演示中的代码。
- en: 'To get our demo working under PostCSS, we need to make some changes to our
    code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的演示在PostCSS下工作，我们需要对我们的代码做一些修改：
- en: We'll start by resaving the `style.scss` file (from within the `css` folder
    in the `Tutorial31` folder) as a plain CSS file, and not a SASS stylesheet, we've
    removed the use of SASS from our previous demo, making the use of the `.scss`
    extension redundant.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将`style.scss`文件（位于`Tutorial31`文件夹中的`css`文件夹内）重新保存为纯CSS文件，而不是SASS样式表，我们在之前的演示中已经移除了SASS的使用，使得`.scss`扩展名变得冗余。
- en: 'Next, we used a `.wrapper` class in our previous demo. This needs to be modified
    as indicated:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的演示中，我们使用了`.wrapper`类。这需要按照指示进行修改：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our `col-*` class rules need to change too. In place of the static percentages
    from the old demo, we''re going to replace them with this:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`col-*`类规则也需要更改。我们将用以下内容替换旧演示中的静态百分比：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Our code is now ready, so go ahead and copy the `style.css` file into the `src`
    folder at the root of our project area.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的代码现在准备好了，所以请将`style.css`文件复制到项目区域的根目录下的`src`文件夹中。
- en: Next, fire up a Node.js command prompt, then change the working folder to our
    project area.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动Node.js命令提示符，然后更改工作文件夹到我们的项目区域。
- en: At the command prompt, enter `gulp` then press *Enter*.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，输入`gulp`然后按*Enter*。
- en: If all is well, we should see a compiled `style.css` file appear in the `dest`
    folder. If we open it up, we should see a number of styles displayed that relate
    to each column, such as is shown in this screenshot:![Testing our configuration](img/BO5194_06_13.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该在`dest`文件夹中看到一个编译好的`style.css`文件。如果我们打开它，我们应该看到一系列与每个列相关的样式显示，就像这个截图所示：![测试我们的配置](img/BO5194_06_13.jpg)
- en: If we try previewing the demo in a browser, we should see something akin to
    this screenshot. Notice how similar it is to the original version, which we built
    in SASS:![Testing our configuration](img/BO5194_06_14.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们尝试在浏览器中预览演示，我们应该看到类似于这个截图的内容。注意它与我们用SASS构建的原始版本多么相似：![测试我们的配置](img/BO5194_06_14.jpg)
- en: The demo that we've constructed is nearly identical to the original version.
    This proves that we have a working capability, which we can use to build our sites.
    The changes we made to our code are very simple, we added a `@neat-outer-container`
    to define how wide our site should be, followed by multiple instances of `@neat-span-columns`,
    to define how many columns each element should span.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建的演示几乎与原始版本相同。这证明了我们具备工作能力，我们可以用它来构建我们的网站。我们对代码所做的更改非常简单，我们添加了一个`@neat-outer-container`来定义我们的网站应该有多宽，然后是多个`@neat-span-columns`实例，来定义每个元素应该跨越多少列。
- en: Let's put some of this new knowledge to constructing something a little more
    useful, in the form of an example site with content. We'll reuse the example site
    page we created earlier in the chapter, and work through converting it for use
    with PostCSS plugins.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把一些新的知识应用到构建一个更有用的东西上，以一个包含内容的示例网站的形式。我们将重用本章中早期创建的示例网站页面，并完成将其转换为使用PostCSS插件的转换。
- en: Creating a site using Neat and PostCSS
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Neat和PostCSS创建一个网站
- en: Remember our demo with a Japanese theme from earlier, in *Creating an example
    with Bourbon Neat?* It's a simple demo, using Bourbon Neat to help create our
    grid. The downside, though, is, of course, the dependency on SASS!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们之前在*使用Bourbon Neat创建示例*中提到的具有日本主题的演示。这是一个简单的演示，使用Bourbon Neat帮助我们创建网格。然而，缺点当然是依赖于SASS！
- en: 'Well, we can fix that: PostCSS has a plugin available that mimics Bourbon Neat,
    but is written entirely in JavaScript, so there is no dependency on SASS. It''s
    easy to install and use, over the next few pages, we''ll work through the changes
    required to switch to this plugin.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们可以解决这个问题：PostCSS有一个插件可以模拟Bourbon Neat，但它完全是用JavaScript编写的，因此没有对SASS的依赖。它易于安装和使用，在接下来的几页中，我们将讨论切换到这个插件所需的更改。
- en: 'First though, let''s get it set up:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置一下：
- en: We'll begin by extracting a copy of the `Tutorial32` folder from the code download
    that accompanies this book. Save this to the root of our project area.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从本书附带的代码下载中提取`Tutorial32`文件夹的副本。将其保存到我们项目区域的根目录。
- en: Copy the `sample pre-compile.css` file to the `src` folder at the root of our
    project area.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`sample pre-compile.css`文件复制到我们项目区域根目录下的`src`文件夹。
- en: Copy the `gulpfile.js`, `samplesite.html` and `package.json` files to the root
    of our project area. These should replace any existing versions that are present.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gulpfile.js`、`samplesite.html`和`package.json`文件复制到我们项目区域的根目录。这些文件应该替换掉任何现有的版本。
- en: Next, we need to install two plugins, although we've covered using `postcss-css-variables`
    earlier in the book, installing them will ensure the right references are added
    to the `package.json` file. Go ahead and fire up a Node.js command prompt, then
    change the working folder to our project area.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装两个插件，尽管我们在本书的早期部分已经介绍了如何使用`postcss-css-variables`，但安装它们将确保正确地将引用添加到`package.json`文件中。请启动Node.js命令提示符，然后更改工作文件夹到我们的项目区域。
- en: 'At the command prompt, enter these two statements in turn, pressing *Enter*
    between each one:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，依次输入这两个语句，每输入一个后按*Enter*键：
- en: '[PRE18]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When both plugins are installed, go ahead and enter `gulp`, then press *Enter*
    to fire off a compilation of our style sheet.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当两个插件都安装好后，输入`gulp`，然后按*Enter*键启动样式表的编译。
- en: If all is well, we should see two style sheets and a source `map` folder appear
    in the `dest` folder. Copy these to the `css` folder at the root of our project
    area.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该在`dest`文件夹中看到两个样式表和一个源`map`文件夹。将这些文件复制到我们项目区域根目录下的`css`文件夹。
- en: If we fire up a copy of `samplesite.html`, we should see our demo appear as
    before, but this time without the dependency on SASS:![Creating a site using Neat
    and PostCSS](img/BO5194_06_15.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们启动`samplesite.html`的副本，我们应该看到我们的演示与之前一样出现，但这次没有对SASS的依赖：![使用Neat和PostCSS创建网站](img/BO5194_06_15.jpg)
- en: Do you notice any difference to our SASS-only version of this demo, from earlier?
    Hopefully not; while it may not be pixel-identical to the original, it is not
    far from it! However, it does show that with a little ingenuity, it is possible
    to make the transition to using PostCSS and still maintain the same results. It
    will require a few changes to your code and processes, so let's take a look at
    these in more detail, starting with the style sheet.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到与之前这个演示的SASS-only版本有什么不同？希望没有；虽然它可能不会与原始版本像素完全一致，但它离得很近！然而，它确实表明，只要有一点独创性，就可以实现向使用PostCSS的过渡，同时仍然保持相同的结果。这将对你的代码和流程进行一些修改，所以让我们更详细地看看这些修改，从样式表开始。
- en: Making the change to PostCSS
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改应用到PostCSS
- en: 'Making the switch requires changes in both the `gulp` task file and style sheet.
    These are not to change how the page will look, but to maintain the same theme
    from the original demo. The key changes made to the style sheet are:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到PostCSS需要在`gulp`任务文件和样式表中做出一些更改。这些更改不是为了改变页面的外观，而是为了保持原始演示中的相同主题。对样式表所做的关键更改包括：
- en: The `_reset.scss` partial style sheet that we import will no longer work, as
    we are removing the reliance on SASS. To maintain its use, a compiled version
    was created using the online playground at Sassmeister ([http://www.sassmeister.com](http://www.sassmeister.com));
    we can then link to it from our markup page.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入的 `_reset.scss` 部分样式表将不再工作，因为我们正在移除对 SASS 的依赖。为了保持其使用，我们使用 Sassmeister 在线沙盒（[http://www.sassmeister.com](http://www.sassmeister.com)）创建了一个编译版本；然后我们可以从我们的标记页面链接到它。
- en: If you take a peek at the source version of `sample.css`, you will see a `:root`
    block at the top of the file; this replaces the `import` statements we used. This
    block can be used to store any variables used, and we will cover this in more
    detail when we explore the changes made to our `gulp` task file.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你查看 `sample.css` 的源版本，你会在文件顶部看到一个 `:root` 块；这取代了我们使用的 `import` 语句。这个块可以用来存储任何使用的变量，我们将在探索对
    `gulp` 任务文件所做的更改时详细介绍这一点。
- en: 'We no longer needed the following three statements; they are used to debug
    the SASS version of Bourbon Neat, and were then removed:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不再需要以下三个语句；它们用于调试 Bourbon Neat 的 SASS 版本，然后被移除：
- en: '[PRE19]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We're using PostCSS equivalents for all of the variable statements. The SASS
    versions were modified using search and replace from `$...` to `var(--….)`, where
    the ... represents the variable name.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 PostCSS 的等效语句来处理所有的变量声明。SASS 版本通过搜索和替换从 `$...` 到 `var(--….)` 进行了修改，其中 ...
    代表变量名。
- en: Our original code had a number of references to `Bourbon` mixins which had to
    be updated. We used the same search and replace principle, this time changing
    `@include outer…` to `@neat-outer…` throughout the code.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们原始代码中有许多对 `Bourbon` 混合的引用需要更新。我们使用了相同的搜索和替换原则，这次将 `@include outer…` 改为 `@neat-outer…`
    整个代码中。
- en: To keep things simple, we manually calculated any instance where `$body-line-height`
    was referenced, and replaced the calculation with the result. We could have stayed
    with using calculations, but it would have required the use of another plugin
    which would have been overkill for their limited use in our code.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了保持简单，我们手动计算了任何 `$body-line-height` 的引用实例，并用计算结果替换了计算。我们本可以继续使用计算，但这将需要使用另一个插件，这对于我们代码中有限的用途来说将是过度杀鸡用牛刀。
- en: We also adjusted the width of the main area in our page; it's a minor quirk,
    but required to ensure we had two areas side by side, and not one above the other!
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还调整了页面中主要区域的宽度；这是一个小问题，但确保我们有两个区域并排而不是一个在上一个在下是必要的！
- en: 'In addition to altering our style sheet, we also had to make some changes to
    the `gulp` task file. They center around replacing the main compilation task and
    adding in additional tasks to manage production and minification of our source
    files:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更改样式表，我们还必须对 `gulp` 任务文件进行一些更改。它们主要集中在替换主要编译任务，并添加额外的任务来管理源文件的生产和压缩：
- en: We added in the rename, lint-styles, and sourcemap tasks covered in earlier
    demos. These already worked well, and required no modification.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了在早期演示中覆盖的 rename、lint-styles 和 sourcemap 任务。这些任务已经工作得很好，并且不需要修改。
- en: We stripped out the original styles task, and replaced it with this:![Making
    the change to PostCSS](img/BO5194_06_16.jpg)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们移除了原始的样式任务，并用这个替换了它：![将更改应用到 PostCSS](img/BO5194_06_16.jpg)
- en: This time, we're calling them `nested()`, `cssvariables()` and Neat plugins.
    These are referenced used variables and are added in at the top of our `gulp`
    file.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，我们称它们为 `nested()`、`cssvariables()` 和 Neat 插件。这些是引用的变量，并且在我们的 `gulp` 文件顶部添加。
- en: Our final change is at the end of the `gulp` file, where we had to adjust the
    default and watcher tasks to include the additional tasks that we added to our
    `gulp` file.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们最后的更改是在 `gulp` 文件的末尾，在那里我们必须调整默认和监视任务以包括我们添加到 `gulp` 文件中的额外任务。
- en: 'At this stage, do we have a working demo ready for use? Well, not quite, but
    let''s try resizing our demo:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们是否有一个可以使用的演示工作版本？好吧，还不完全，但让我们尝试调整我们的演示大小：
- en: '![Making the change to PostCSS](img/BO5194_06_17.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![将更改应用到 PostCSS](img/BO5194_06_17.jpg)'
- en: Hmm, what's happened to our content? It doesn't look great, does it? We can
    easily fix it though; it just requires the addition of some media queries to reorganize
    how our content is displayed on the screen. Let's dive in and take a look at what
    is needed to get our demo looking better at smaller sizes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们的内容怎么了？看起来并不好，不是吗？不过我们可以轻松地修复它；这只需要添加一些媒体查询来重新组织内容在屏幕上的显示方式。让我们深入了解一下，看看需要什么来让我们的演示在更小的尺寸下看起来更好。
- en: Adding responsive capabilities
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加响应式功能
- en: Although Bourbon does add a degree of responsivity to our code, it's not quite
    enough for our needs. If we try resizing our demo, it soon becomes apparent that
    the elements don't quite go where we would want them, to say the least!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Bourbon确实为我们的代码添加了一定程度的响应性，但这还不足以满足我们的需求。如果我们尝试调整我们的演示，很快就会很明显，元素并没有达到我们想要的位置，至少可以说是不够理想！
- en: 'The quickest way to see just how the design looks when resized for smaller
    devices is to use Google Chrome. Press *Shift* `+` *Ctrl* `+` *I* to enable Chrome''s
    developer tools:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看设计在调整以适应较小设备时的外观，可以使用 Google Chrome。按 *Shift* `+` *Ctrl* `+` *I* 启用 Chrome
    的开发者工具：
- en: '![Adding responsive capabilities](img/BO5194_06_18.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![添加响应式功能](img/BO5194_06_18.jpg)'
- en: 'The design works well when viewed at 1280px x 1024px, but this soon changes
    if we change the available viewing estate to suit an Apple iPhone 6 at 375px by
    627px:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 1280px x 1024px 的分辨率下查看时，设计效果良好，但如果我们将可用的查看区域更改为适合苹果 iPhone 6 的 375px x 627px，情况很快就会改变：
- en: '![Adding responsive capabilities](img/BO5194_06_19.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![添加响应式功能](img/BO5194_06_19.jpg)'
- en: See what I mean? It just doesn't look right, does it? Fortunately, it's easy
    to fix using PostCSS, so let's dive in and see what is required to get our design
    working again.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白我的意思吗？这看起来就是不对劲，不是吗？幸运的是，使用 PostCSS 很容易修复，所以让我们深入了解一下需要做什么才能让我们的设计恢复正常工作。
- en: Correcting the design
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修正设计
- en: 'Getting our design to work properly for smaller devices such as iPhones is
    easy when working with PostCSS: we can use the `postcss-media-minmax` plugin available
    from [https://github.com/postcss/postcss-media-minmax](https://github.com/postcss/postcss-media-minmax).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 PostCSS 时，让我们的设计在较小的设备（如 iPhone）上正常工作很容易：我们可以使用从 [https://github.com/postcss/postcss-media-minmax](https://github.com/postcss/postcss-media-minmax)
    可用的 `postcss-media-minmax` 插件。
- en: '"How can PostCSS help us though?", I hear you ask. Easy, the point at which
    most people trip up when working with media queries is in setting the breakpoints,
    or determining where our designs break at specific sizes. The `postcss-media-minmax`
    plugin helps to make the text a little more human; after all, if a design works
    when the size is greater than or equal to an amount, why not say that in our code?'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: “PostCSS 如何帮助我们呢？”你可能会问。很简单，当使用媒体查询时，大多数人会在这里犯错，即在设置断点或确定我们的设计在特定尺寸下会断裂的地方。`postcss-media-minmax`
    插件有助于使文本更符合人类习惯；毕竟，如果一个设计在尺寸大于或等于某个值时工作，为什么不在我们的代码中这样表达呢？
- en: 'To see what I mean, let''s get stuck into fixing our code. For simplicity,
    we will focus entirely on resizing our content for an iPhone 6, using 375px by
    627px as our breakpoint (as determined by using Google Chrome''s Responsive Design
    view). We will continue exactly where we left off from the previous demo:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我的意思，让我们着手修复我们的代码。为了简单起见，我们将完全专注于调整 iPhone 6 的内容大小，使用 375px x 627px 作为我们的断点（如使用
    Google Chrome 的响应式设计视图所确定）。我们将继续从上一个演示结束的地方开始：
- en: 'We first need to install the `postcss-media-minmax` plugin—to do this, fire
    up a Node.js command prompt session, then at the prompt add this command and press
    *Enter*:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要安装 `postcss-media-minmax` 插件——为此，启动 Node.js 命令提示符会话，然后在提示符中添加此命令并按 *Enter*：
- en: '[PRE20]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, open up a copy of the `sample.css` file from within the `src` folder
    in our project area. We''ll add the media query first, adjusted to ensure we catch
    the right breakpoint:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开项目区域 `src` 文件夹中的 `sample.css` 文件副本。我们首先添加媒体查询，并调整以确保我们捕捉到正确的断点：
- en: '[PRE21]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Immediately inside the query, go ahead and add this rule. We don''t want to
    resize below `375px` as a minimum:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询立即内部，添加这条规则。我们不想将其调整到低于 `375px` 的最小值：
- en: '[PRE22]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The header image text needs to be resized to a smaller space, and we can also
    reduce it in size and move it over to the left a little:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标题图像文本需要调整到更小的空间，我们还可以将其缩小并稍微向左移动：
- en: '[PRE23]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `#alpha` content area (or menu) has automatically resized itself, but the
    main content area (`#beta`) is too wide; let''s resize it down to fit. Our area
    won''t cope with all of the text, so we''ll add an overflow attribute, and set
    it to hide text outside the viewable area:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`#alpha` 内容区域（或菜单）已经自动调整大小，但主要内容区域（`#beta`）太宽了；让我们将其调整到适合的大小。我们的区域无法容纳所有文本，因此我们将添加一个溢出属性，并将其设置为隐藏可视区域外的文本：'
- en: '[PRE24]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: At this point, we need to install the `postcss-media-minmax` plugin, so fire
    up a Node,js command prompt and change the working folder to our project area.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要安装 `postcss-media-minmax` 插件，所以打开 Node.js 命令提示符，并将工作文件夹更改为我们的项目区域。
- en: 'At the prompt, enter this command, then press *Enter*:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入以下命令，然后按 *Enter*：
- en: '[PRE25]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When the plugin is installed, enter `gulp` at the command prompt, and press
    *Enter*.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当插件安装完成后，在命令提示符中输入`gulp`，然后按*Enter*键。
- en: PostCSS will now compile the code, and if all is well, we should see updated
    style sheet and source `map` files appear in the `dest` folder.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，PostCSS将编译代码，如果一切顺利，我们应该在`dest`文件夹中看到更新的样式表和源`map`文件。
- en: Go ahead and copy these into the `css` folder in the `Tutorial32` folder, then
    try previewing the results in a browser.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些内容复制到`Tutorial32`文件夹中的`css`文件夹，然后在浏览器中预览结果。
- en: 'If all is well, we should see something akin to the following screenshot, when
    enabling Chrome''s Responsive Design view, and switching the Device setting to
    Apple iPhone 6:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，当启用Chrome的响应式设计视图，并将设备设置切换到Apple iPhone 6时，我们应该看到以下类似截图：
- en: '![Correcting the design](img/BO5194_06_20.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![纠正设计](img/BO5194_06_20.jpg)'
- en: 'The changes we''ve made to our code are simple, and limited to supporting iPhones.
    This is just the tip of the iceberg, though: there is so much more we can do!'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对代码所做的更改很简单，仅限于支持iPhone。但这只是冰山一角：我们还能做更多的事情！
- en: 'For example, instead of specifying an exact width value as our `min-width`
    attribute (or for the width of #beta, for that matter), we could consider using
    `@neat-span-columns` to provide this value for us. Of course, we can''t limit
    ourselves to one media query, we need to ensure we have enough media queries to
    cater for the devices we need to support.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们不必指定确切的宽度值作为我们的`min-width`属性（或者对于#beta的宽度来说也是如此），我们可以考虑使用`@neat-span-columns`来为我们提供这个值。当然，我们不能只限制自己使用一个媒体查询，我们需要确保我们有足够的媒体查询来满足我们需要支持的设备。
- en: This does not mean that we need to have a 1:1 relationship between a query and
    a device. Provided we design our queries carefully, we can set existing ones to
    cover several devices. Ultimately, though, the principle is still the same, but
    instead of using the standard colon notation, we can use the easier to read `>=`
    or `<=` symbols to define the breakpoint range when working with queries using
    PostCSS.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着我们需要在查询和设备之间建立1:1的关系。只要我们精心设计我们的查询，我们就可以将现有的查询设置为覆盖多个设备。然而，最终的原则仍然是相同的，但在使用PostCSS处理查询时，我们不需要使用标准的冒号表示法，而是可以使用更易读的`>=`或`<=`符号来定义断点范围。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: For many developers or designers, using grid-based development forms a key part
    of their working process. Many will be familiar with the likes of Bootstrap or
    Bourbon Neat; we can easily replicate the same functionality within PostCSS. Let's
    take a moment to review what we've covered throughout this chapter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多开发人员或设计师来说，使用基于网格的开发构成了他们工作流程的关键部分。许多人熟悉Bootstrap或Bourbon Neat；我们可以在PostCSS中轻松复制相同的功能。让我们花点时间回顾一下本章中我们所学到的内容。
- en: We kicked off with a brief introduction to using grid-based development, before
    swiftly moving on to beginning the transition process to using PostCSS. Our first
    stop was a look at automating the compilation process so we can make the switch
    to using Gulp.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先简要介绍了基于网格的开发方法，然后迅速过渡到开始使用PostCSS的过程。我们的第一个目标是查看自动化编译过程，以便我们可以切换到使用Gulp。
- en: Next up, we then took a look at making the switch from using pure SASS to using
    the SASS-based grid system, Bourbon Neat; we covered how easy it is for Bourbon
    to build the structure of our grid system with minimal effort.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了从使用纯SASS切换到使用基于SASS的网格系统Bourbon Neat的过程；我们介绍了Bourbon如何以最小的努力构建我们的网格系统结构。
- en: We then moved on to exploring the plugin options available from within PostCSS,
    before making the transition to using the `postcss-neat` plugin. We then explored
    how easy it is to refine our Gulp task process, by adding in tasks that we introduced
    from earlier in the book, to help build up a process that more closely represents
    real-world development. To confirm the process works, we performed a test using
    an adapted version of the original demo from Bourbon Neat, before moving on to
    converting our Japanese-themed demo to using PostCSS equivalent plugins. We then
    rounded out the chapter with a brief look at refining the responsive capabilities
    within our design, to ensure it works better on smaller devices.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向探索PostCSS内部可用的插件选项，在过渡到使用`postcss-neat`插件之前。我们接着探讨了如何通过添加书中早期介绍的任务来简化我们的Gulp任务流程，以构建一个更接近现实世界开发的流程。为了确认流程有效，我们使用Bourbon
    Neat原始演示的改编版本进行了测试，然后继续将我们的日式演示转换为使用PostCSS等价插件。最后，我们简要地审视了设计中的响应能力优化，以确保它在较小的设备上表现更好。
- en: 'Phew, it may not seem like much, but we certainly covered a lot over the last
    few pages! But, as always, we continue apace: in the next chapter, we''ll really
    get animated (sorry, pun intended!), with a look at how PostCSS can help with
    animating content.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，可能看起来并不多，但我们在过去的几页中确实覆盖了大量的内容！但是，就像往常一样，我们继续稳步前进：在下一章中，我们将真正地变得生动起来（抱歉，这里用了双关语！），我们将探讨PostCSS如何帮助实现内容的动画效果。
