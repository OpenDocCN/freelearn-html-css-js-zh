- en: Chapter 6.  Building a Customer Feedback App with a Restful API and Loopback.io
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用Restful API和Loopback.io构建客户反馈应用程序
- en: As previously commented, the Node.js ecosystem has various frameworks for developing
    powerful web applications. In previous chapters, we used the most popular of all
    the Express framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Node.js生态系统有各种框架用于开发强大的Web应用程序。在之前的章节中，我们使用了最流行的Express框架。
- en: In this chapter, we will explore another framework known as loopback.io. This
    framework is heavily based on Express, however, it provides us with some more
    features to create Restful APIs very quickly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索另一个名为loopback.io的框架。该框架在很大程度上基于Express，但它为我们提供了一些更多的功能，可以快速创建Restful
    API。
- en: It has a **Command-line Interface** (**CLI**) where it is possible to create
    APIs without using code, plus it exposes an interface for manipulation of HTTP
    verbs, a kind of Restful client embedded in your application, and a few more advantages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个**命令行界面**（**CLI**），可以在不使用代码的情况下创建API，还公开了一个用于操作HTTP动词的接口，一种嵌入在应用程序中的Restful客户端，以及其他一些优势。
- en: We also see how to consume this API on the frontend of our application using
    the React.js library.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到如何使用React.js库在我们的应用程序前端消耗此API。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the LoopBack framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装LoopBack框架
- en: The fundamentals of LoopBack CLI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LoopBack CLI的基础知识
- en: Creating models using command line
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行创建模型
- en: Dealing with datasource and database relations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据源和数据库关系
- en: Creating a simple React.js application to consume the API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的React.js应用程序来消耗API
- en: What we are building
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: 'In this chapter we will build an API to store any type of product, in this
    case a classic model of motorcycle, and store comments/feedback from users of
    this motorcycle. The result will look like the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个API来存储任何类型的产品，例如经典的摩托车模型，并存储用户对该摩托车的评论/反馈。结果将看起来像以下屏幕截图：
- en: '![What we are building](img/image_06_001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建什么](img/image_06_001.jpg)'
- en: Screenshot of Home page
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 主页的屏幕截图
- en: Creating the baseline structure
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基线结构
- en: 'First let''s install the LoopBack framework:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们安装LoopBack框架：
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端/Shell并键入以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端/Shell并键入以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Enter the name: chapter-06 for the directory option.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称：目录选项为chapter-06。
- en: Choose the empty-server (An empty LoopBack API, without any
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择empty-server（一个没有任何内容的LoopBack API）
- en: configured models or datasources) option.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 配置模型或数据源）选项。
- en: Don't worry about the end of the output, we will explain this in the next topic.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心输出的结尾，我们将在下一个主题中解释这一点。
- en: 'The result will be the following structure of folders and files:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是以下文件夹和文件的结构：
- en: '![Creating the baseline structure](img/image_06_002.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![创建基线结构](img/image_06_002.jpg)'
- en: Screenshot of folders and files
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹和文件的屏幕截图
- en: The structure is pretty simple; almost all configurations from LoopBack are
    inside JSON files, as we can see for **component-config.json**, **config.json**,
    **datasources.json**, and all the other files inside the **server** folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 结构非常简单；几乎所有LoopBack的配置都在JSON文件中，如**component-config.json**，**config.json**，**datasources.json**，以及**server**文件夹中的所有其他文件。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find out more about the **slc** command line by typing: slc -help in
    your terminal window.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在终端窗口中键入以下命令来了解有关**slc**命令行的更多信息：slc -help。
- en: Creating models with command line
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行创建模型
- en: At this time, we have the necessary structure to start the development of our
    API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了开始开发API所需的结构。
- en: 'We will now use the command line to create the models of our application. We
    will build two models: one model for the product/motorcycle and another for the
    user/consumer.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用命令行来创建应用程序的模型。我们将构建两个模型：一个用于产品/摩托车，另一个用于用户/消费者。
- en: 'Open terminal/shell inside the chapter-06 folder and type the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在chapter-06文件夹中打开终端/Shell并键入以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Fill in the following information for motorcycle model, as shown in the following
    screenshot:![Creating models with command line](img/image_06_003.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写摩托车模型的以下信息，如下图所示：![使用命令行创建模型](img/image_06_003.jpg)
- en: Screenshot of the terminal output after model motorcycle created
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建摩托车模型后的终端输出的屏幕截图
- en: 'Fill in the property name:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写属性名称：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s create the customer model. Open terminal/shell and type the following
    command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建客户模型。打开终端/Shell并键入以下命令：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Fill in the information for review model, as shown in the following figure:![Creating
    models with command line](img/image_06_004.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写审查模型的信息，如下图所示：![使用命令行创建模型](img/image_06_004.jpg)
- en: Screenshot of the terminal output after model review created
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模型审查后的终端输出的屏幕截图
- en: 'Fill in the property name:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写属性名称：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Even using the command line, we can check and edit the model you just created.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用命令行，我们也可以检查和编辑刚刚创建的模型。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: An important point to note here is that the property common creates a directory
    and shares it with the client and server folders. If you are using the property
    server, the code is stored in the server folder and is not shared with the client
    folder.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要点是，common属性创建一个目录并与client和server文件夹共享。如果使用server属性，代码将存储在server文件夹中，并且不与client文件夹共享。
- en: Editing models after creation with command line
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行创建模型后编辑模型
- en: We can edit the models right into the common/models/ folder. We have two files
    for each model created.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接在common/models/文件夹中编辑模型。我们为每个创建的模型有两个文件。
- en: 'The first is a JSON file with all the properties, as we can see in the following
    code for review.json file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是一个带有所有属性的JSON文件，如我们在review.json文件中所见的代码：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The second is a JavaScript file, as we can see in the following code for review.js
    file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是一个JavaScript文件，如我们在review.js文件中所见的代码：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The JavaScript file is where you can configure the application methods. You
    may notice that while creating the model, its function is empty; this is due to
    the fact that the LoopBack framework abstracts the CRUD operations, commonly found
    in other applications, by using the Express framework as we did in the previous
    chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript文件是您可以配置应用程序方法的地方。您可能会注意到，在创建模型时，其功能是空的；这是因为LoopBack框架通过使用Express框架来抽象常见的CRUD操作，这与我们在上一章中所做的操作相同。
- en: Creating a datasource through the command line
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过命令行创建数据源
- en: 'We will use a database to store the feedback of our customers, so we will create
    the datasource using the LoopBack CLI:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数据库存储客户的反馈，因此我们将使用LoopBack CLI创建数据源：
- en: 'Open terminal/shell in the root project and type the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目中打开终端/ shell并输入以下命令：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Fill in the options with the following information:![Creating a datasource through
    the command line](img/image_06_005.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下信息填写选项：![通过命令行创建数据源](img/image_06_005.jpg)
- en: Screenshot of the datasource terminal output
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源终端输出的屏幕截图
- en: 'Note that the final option is to install the MongoDB connector. So, don''t
    forget to create the database: motorcycle-feedback on your MongoDB instance.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最终选项是安装MongoDB连接器。因此，请不要忘记在MongoDB实例上创建数据库：motorcycle-feedback。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For the book example, we are not using User and Password for the database, but
    it is strongly recommended that you use a User and a strong Password in a production
    environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书示例中，我们不使用数据库的用户名和密码，但强烈建议您在生产环境中使用用户名和强密码。
- en: 'The datasource configuration can be found at: server/datasources.json file,
    as we can see in the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源配置可以在server/datasources.json文件中找到，如下代码所示：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Loopback API offers us the possibility to configure more on a datasource
    with different databases.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Loopback API为我们提供了在不同数据库上配置数据源的可能性。
- en: Connecting models to datasources
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型连接到数据源
- en: The next step is to make a relationship between models and datasources, for
    this we will edit the file manually.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是建立模型和数据源之间的关系，为此我们将手动编辑文件。
- en: 'Remember that the command line also offers this feature with slc loopback:relation:
    however, at the time of writing, there is a bug in the generator and we cannot
    use this feature at the moment. However, this does not prevent us from continuing
    with our application, since the command-line tool is not mandatory:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，命令行也提供了此功能，使用slc loopback:relation:，但是在撰写本文时，生成器中存在错误，我们目前无法使用此功能。但是，这并不妨碍我们继续进行应用程序开发，因为命令行工具并非强制使用：
- en: 'Open server/model-config.json and add the following highlighted code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开server/model-config.json并添加以下突出显示的代码：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this stage, it is very common to use the visual interface known as the ARC
    tool for building, deploying, and managing our Node APIs, but for the book's examples
    we will not use it, thus keeping all our attention on the code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，通常会使用称为ARC工具的可视界面来构建、部署和管理我们的Node API，但是对于本书的示例，我们不会使用它，因此将所有注意力都集中在代码上。
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about the ARC at this link: [https://docs.strongloop.com/display/APIS/Using+Arc](https://docs.strongloop.com/display/APIS/Using+Arc).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接找到有关ARC的更多信息：[https://docs.strongloop.com/display/APIS/Using+Arc](https://docs.strongloop.com/display/APIS/Using+Arc)。
- en: Using the API Explorer
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API Explorer
- en: One of the best features of the LoopBack API Explorer is to generate a localhost
    API endpoint that allows us to view and test all endpoints generated by our API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: LoopBack API Explorer最好的功能之一是生成一个本地主机API端点，允许我们查看和测试API生成的所有端点。
- en: Also, it could be worth as documentation, containing all the necessary instructions
    as HTTP verbs GET, POST, UPDATE, DELETE, sending token access if necessary, the
    data type, and JSON format.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它可能值得作为文档，包含所有必要的指令，如HTTP动词GET、POST、UPDATE、DELETE，如果需要发送令牌访问，数据类型和JSON格式。
- en: 'Open terminal/shell and type the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Go to http://localhost:3000/explorer/#/. The result will be the following screenshot:![Using
    the API Explorer](img/image_06_006.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/explorer/#/。结果将是以下屏幕截图：![使用API Explorer](img/image_06_006.jpg)
- en: Screenshot of the API Explorer
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: API Explorer的屏幕截图
- en: It is possible to see the API base URL and the API version, our project name
    and the application endpoints.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到API基本URL和API版本，我们的项目名称和应用程序端点。
- en: When we click on the **review** model we can see all the endpoints with the
    HTTP verb, as we can see in the following image:![Using the API Explorer](img/image_06_007.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们点击**review**模型时，我们可以看到所有带有HTTP动词的端点，如下图所示：![使用API Explorer](img/image_06_007.jpg)
- en: Screenshot of the review endpoint and the HTTP verbs
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 评论端点和HTTP动词的屏幕截图
- en: 'The endpoints created are the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的端点如下：
- en: http://localhost:3000/api/reviews
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: http://localhost:3000/api/reviews
- en: http://localhost:3000/api/motorcycles
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: http://localhost:3000/api/motorcycles
- en: And of course, it is possible to access them directly with your browser.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以直接使用浏览器访问它们。
- en: 'It is important to note that the GET and POST endpoints are the same, the difference
    is: when we want to retrieve content we use GET method and when we want to insert
    content we use POST method, and the same goes for PUT and DELETE, where we need
    to pass the ID at the end of the URL as http://localhost:3000/api/reviews/23214.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意GET和POST端点是相同的，区别在于：当我们想要检索内容时，我们使用GET方法，当我们想要插入内容时，我们使用POST方法，PUT和DELETE也是一样，我们需要在URL的末尾传递ID，如http://localhost:3000/api/reviews/23214。
- en: We can also see that at the right-hand side of each endpoint is a brief description
    of its purpose.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到每个端点右侧有一个简要描述其目的的描述。
- en: 'It also has some additional and very useful endpoints, as shown in the following
    image:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有一些其他非常有用的端点，如下图所示：
- en: '![Using the API Explorer](img/image_06_008.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用API Explorer](img/image_06_008.jpg)'
- en: Screenshot of the additional methods from review endpoint
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 评论端点的附加方法的屏幕截图
- en: Inserting records using endpoint
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用端点插入记录
- en: 'Now we will use the API Explorer interface to insert a record in the database.
    We will insert a product, in our case, a motorcycle:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用API Explorer界面向数据库中插入一条记录。我们将插入一个产品，即我们的摩托车：
- en: Go to http://localhost:3000/explorer/#!/motorcycle/motorcycle_create.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/explorer/#!/motorcycle/motorcycle_create。
- en: 'Place the following content inside the data value field and press the **try
    it out** button:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容放入数据值字段中，然后点击“尝试一下”按钮：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The response body will be as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 响应主体将如下截图所示：
- en: '![Inserting records using endpoint](img/image_06_009.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用端点插入记录](img/image_06_009.jpg)'
- en: Screenshot of the success of POST
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: POST成功的屏幕截图
- en: Note that we have a HTTP status code **200** and an ID for the newly created
    data.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有一个HTTP状态码**200**和一个新创建数据的ID。
- en: Retrieving records using endpoint
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用端点检索记录
- en: 'Now we will use the API Explorer interface to retrieve a record from the database.
    We will use the motorcycle endpoint:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用API Explorer界面从数据库中检索记录。我们将使用摩托车端点：
- en: Go to http://localhost:3000/explorer/#!/motorcycle/motorcycle_find.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/explorer/#!/motorcycle/motorcycle_find。
- en: Click on the **try it out** button, and we have the same as the previous screenshot.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“尝试一下”按钮，我们将得到与之前截图相同的结果。
- en: Note that we are using the API explorer, but we have all the API endpoints exposed
    through http://localhost:3000/api/.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用API资源管理器，但我们所有的API端点都通过http://localhost:3000/api/公开。
- en: Go to http://localhost:3000/api/motorcycles and you can see the following result
    on your browser:![Retrieving records using endpoint](img/image_06_010.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/api/motorcycles，您可以在浏览器上看到以下结果：![使用端点检索记录](img/image_06_010.jpg)
- en: Screenshot of the motorcycles endpoint
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 摩托车端点的屏幕截图
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that we are using a Chrome extension called **JSON VIEW** that you can
    get here: [https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用一个名为**JSON VIEW**的Chrome扩展程序，您可以在这里获取：[https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc)。
- en: It is very useful when dealing with large JSON files.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型JSON文件时非常有用。
- en: Adding database relations
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据库关系
- en: Now that we already have our configured endpoints, we need to create the relationship
    between the application models.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了端点，我们需要在应用程序模型之间创建关系。
- en: 'Our feedback will be inserted into a particular type of product, in this case,
    our motorcycle example, then each motorcycle model can receive various feedbacks.
    Let''s see how simple it is to create the relationship between the models by directly
    editing the source code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的反馈将被插入到特定类型的产品中，例如我们的摩托车示例，然后每个摩托车型号都可以接收各种反馈。让我们看看如何通过直接编辑源代码来创建模型之间的关系有多简单：
- en: 'Open common/models/motorcycle.json and add the following highlighted code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开common/models/motorcycle.json并添加以下突出显示的代码：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Re-launch the application, open terminal window, and type the following command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动应用程序，打开终端窗口，然后输入以下命令：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Go to http://localhost:3000/explorer.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/explorer。
- en: 'We can see that LoopBack has created new endpoints for this relationship, as
    shown in the following figure:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到LoopBack已经为这种关系创建了新的端点，如下图所示：
- en: '![Adding database relations](img/image_06_011.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![添加数据库关系](img/image_06_011.jpg)'
- en: Screenshot of the new endpoints created
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 新端点创建的屏幕截图
- en: 'Now we can get all feedback related to a motorcycle model using:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下方式获取与摩托车模型相关的所有反馈：
- en: http://localhost:3000/api/motorcycles/<id>/review.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: http://localhost:3000/api/motorcycles/<id>/review。
- en: 'We can also get one comment by simply adding the review ID as the following
    URL:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过简单地将评论ID添加到以下URL中来获取一个评论：
- en: http://localhost:3000/api/motorcycles/<id>/review/<id>.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: http://localhost:3000/api/motorcycles/<id>/review/<id>。
- en: Dealing with LoopBack boot files
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理LoopBack引导文件
- en: Boot files are very important in applications using a LoopBack framework. These
    files are started when the application is executed, and can perform various kinds
    of task.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用LoopBack框架的应用程序中，引导文件非常重要。这些文件在应用程序执行时启动，并可以执行各种任务。
- en: The application already has all the endpoints that it needs. So, let's see how
    to create a boot file and use another feature from the LoopBack framework to migrate
    our models to the database.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序已经具备了所有需要的端点。因此，让我们看看如何创建一个引导文件，并使用LoopBack框架的另一个功能来将我们的模型迁移到数据库。
- en: 'In this example, we will see how to use the automigrate function to insert
    some content in the database at the time we start the application:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将看到如何使用automigrate函数在启动应用程序时向数据库中插入一些内容：
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can read more about the LoopBack API at [http://apidocs.strongloop.com/](http://apidocs.strongloop.com/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://apidocs.strongloop.com/](http://apidocs.strongloop.com/)上阅读更多关于LoopBack
    API的信息。
- en: 'Inside server/boot, create a new file called create-sample-models.js and place
    the following content in it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在server/boot中，创建一个名为create-sample-models.js的新文件，并将以下内容放入其中：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous code is pretty simple; we just created objects using the objects
    properties from models. Now, every time the application starts, we send one motorcycle
    record and three motorcycle feedbacks to the database.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码非常简单；我们只是使用模型的对象属性创建对象。现在，每次应用程序启动时，我们都会向数据库发送一条摩托车记录和三条摩托车反馈。
- en: This step completes our API. Despite being a very trivial example, we explored
    several powerful features of the LoopBack framework.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步完成了我们的API。尽管这是一个非常琐碎的例子，但我们探索了LoopBack框架的几个强大功能。
- en: Also, we can use the ARC editor. As mentioned, it is possible to create models
    and migrations using only the graphical interface. It is also very useful for
    other purposes, such as deploying and other things.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用ARC编辑器。正如前面提到的，只需使用图形界面就可以创建模型和迁移。它还非常有用，比如部署和其他用途。
- en: Consuming the API
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API
- en: 'Now we will explore how to consume this API. We have seen that the API is contained
    in: localhost:3000/api/, and our root path only has some information regarding
    the API, as we can see by visiting localhost:3000:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探讨如何使用此API。我们已经看到API包含在：localhost:3000/api/，我们的根路径只有一些关于API的信息，我们可以通过访问localhost:3000来查看：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's change the root.js and middleware.json files and use some client side
    libraries to interact with the API.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改root.js和middleware.json文件，并使用一些客户端库与API进行交互。
- en: Adding HTML content to client side
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将HTML内容添加到客户端
- en: Change the name of the root.js file inside server/boot to _root.js.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将server/boot中的root.js文件更改为_root.js。
- en: 'Open middleware.json from server/ folder and add the following highlighted
    code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开server/文件夹中的middleware.json，并添加以下突出显示的代码：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a new file called index.html and save it in the client folder.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在client文件夹中创建一个名为index.html的新文件，并将其保存在client文件夹中。
- en: Now we configure the application to map the client folder and make it public
    access. This is very similar to when we set the static route for the Express framework.
    There are other ways we can set routes to application, but for this example let's
    keep it that way.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们配置应用程序以映射客户端文件夹并使其公开访问。这与我们为Express框架设置静态路由时非常相似。我们可以以其他方式设置应用程序的路由，但在此示例中，让我们保持这种方式。
- en: Adding Bootstrap framework and React library
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Bootstrap框架和React库
- en: Now let's add the dependencies to our HTML file; we will use Bootstrap and React.js.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将依赖项添加到我们的HTML文件中；我们将使用Bootstrap和React.js。
- en: 'Note the highlighted files are serving from a **Content Delivery Network**
    (**CDN**), but if you want you can store these files inside the client folder
    or subdirectories for CSS and JavaScript:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，突出显示的文件是从**内容传送网络**（**CDN**）提供的，但如果您愿意，您可以将这些文件存储在client文件夹或用于CSS和JavaScript的子目录中：
- en: 'Open the newly created file index.html and add the following code:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新创建的index.html文件，并添加以下代码：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, on the previous code we added two files in a script text/babel
    type. These files will be our application components built with the React.js library.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在上一个代码中，我们添加了两个文件，类型为script text/babel。这些文件将是我们使用React.js库构建的应用程序组件。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about the React.js here: [https://facebook.github.io/react/](https://facebook.github.io/react/).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到有关React.js的更多信息：[https://facebook.github.io/react/](https://facebook.github.io/react/)。
- en: Inside the client folder, create a new folder called images.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在client文件夹中，创建一个名为images的新文件夹。
- en: You can copy and paste the motorcycle sample image to this folder. Also, you
    can download all the example code for the book at the Packt Publishing website
    and at the official GitHub repository of the book.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将摩托车示例图像复制并粘贴到此文件夹中。此外，您可以在Packt Publishing网站和书籍的官方GitHub存储库中下载所有示例代码。
- en: Creating React components
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建React组件
- en: Similar jQuery widget and AgularJS directives there is React.js, which is  very
    useful library for creating interface components. However, it is not a complete
    framework like AngularJS or Ember.js.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于jQuery小部件和AgularJS指令，有React.js，这是一个非常有用的库，用于创建界面组件。但是，它不像AngularJS或Ember.js那样是一个完整的框架。
- en: 'The way to think about React.js is by thinking about interface components:
    everything is a component and a component may be composed of one or more components.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 思考React.js的方式是通过思考界面组件：一切都是一个组件，一个组件可能由一个或多个组件组成。
- en: 'See the following figure:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下图：
- en: '![Creating React components](img/image_06_012.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![创建React组件](img/image_06_012.jpg)'
- en: Screenshot simulating React.js components
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟React.js组件的屏幕截图
- en: 'Let''s create the components one by one for a better understanding:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个创建组件，以便更好地理解：
- en: Inside the client folder, create a new folder called js.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在client文件夹中，创建一个名为js的新文件夹。
- en: 'Inside the js folder, create a new file called review.js and add the following
    content:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在js文件夹中，创建一个名为review.js的新文件，并添加以下内容：
- en: '[PRE19]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is the list-item component.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列表项组件。
- en: 'Now let''s add the ReviewBox. Add the following code right after the previous
    one:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们添加ReviewBox。在上一个代码之后添加以下代码：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is the ReviewBox component and its two received components; one is the
    ReviewList component, and the second one is the ReviewForm component. Note that
    we are using the $.get() function from jQuery to get the reviews from the localhost:3000/api/reviews,
    using the GET method.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ReviewBox组件及其两个接收组件；一个是ReviewList组件，另一个是ReviewForm组件。请注意，我们使用jQuery的$.get()函数从localhost:3000/api/reviews获取评论，使用GET方法。
- en: 'Also, we have a function called handleReviewSubmit() for dealing with the form
    submit action to the same endpoint: localhost:3000/api/reviews, using the POST
    method.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们有一个名为handleReviewSubmit()的函数，用于处理表单提交操作到相同的端点：localhost:3000/api/reviews，使用POST方法。
- en: 'We have the getInitialState() function to set an array of data, which waits
    for a promise function on a componentDidMount() function:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有getInitialState()函数来设置一个数据数组，它在componentDidMount()函数上等待一个promise函数：
- en: 'Now let''s add the ReviewList component to reviews.js. Add the following code
    right after the previous one:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将ReviewList组件添加到reviews.js中。在上一个代码之后添加以下代码：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we add the ReviewForm component. Add the following code right after the
    previous one:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们添加ReviewForm组件。在上一个代码之后添加以下代码：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we just need to create a React method to render all the contents.
    Add the following code right after the previous one:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们只需要创建一个React方法来呈现所有内容。在上一个代码之后添加以下代码：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This previous piece of code will render the ReviewBox component inside: <div
    id="content"></div>; making a brief analogy of CSS classes, we have a component
    structure like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此前的代码片段将在<div id="content"></div>中呈现ReviewBox组件；简要类比CSS类，我们有以下组件结构：
- en: ReviewBox
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReviewBox
- en: ReviewList
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReviewList
- en: Review
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾
- en: ReviewForm
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReviewForm
- en: 'So, the render() method of the ReviewBox component renders two components:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ReviewBox组件的render()方法呈现两个组件：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we do the same for the motorcycle component:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对摩托车组件做同样的操作：
- en: 'Create a new file called motorcycle.js inside the common/js folder and add
    the following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在common/js文件夹中创建一个名为motorcycle.js的新文件，并添加以下代码：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s add the MotorcycleBox component. Add the following code right after
    the previous one:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加MotorcycleBox组件。在上一行之后添加以下代码：
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s create a motorcycleList component. Add the following code right after
    the previous one:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个motorcycleList组件。在上一行之后添加以下代码：
- en: '[PRE27]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that we create a list to render all the motorcycle models from our database.
    This is recommended if you want to add or render more items in this collection.
    For our example, we have only one.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了一个列表来渲染数据库中的所有摩托车型号。如果您想要在此集合中添加或渲染更多项目，这是推荐的做法。对于我们的示例，我们只有一个。
- en: The last method is the render() function to render the MotorcycleBox component
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的方法是render()函数来渲染MotorcycleBox组件
- en: 'Add the following line, right after the previous one:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一行之后添加以下行：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This render method tells to render the MotorcycleBox component inside the HTML
    motorcycle div tag: <div id="motorcycle"></div>.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此渲染方法告诉在HTML摩托车div标签内渲染MotorcycleBox组件：<div id="motorcycle"></div>。
- en: Creating new feedbacks
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的反馈
- en: 'Now it is time to create new feedbacks using the application we built:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用我们构建的应用程序创建新的反馈了：
- en: 'Open terminal/shell and type the following command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/Shell并输入以下命令：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Go to http://localhost:3000/ and fill in the form with the following data and
    press the **submit** button:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/，填写以下数据并点击**提交**按钮：
- en: 'Name: **John Doe**'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓名：**约翰·多**
- en: 'E-mail: **john@doe.com**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件：**john@doe.com**
- en: 'Feedback: **Great red and white classic bike!**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反馈：**很棒的红白经典摩托车！**
- en: The result is shown instantly on the screen, as we can see in the following
    screenshot.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 结果会立即显示在屏幕上，如下截图所示。
- en: '![Creating new feedbacks](img/image_06_013.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的反馈](img/image_06_013.jpg)'
- en: Screenshot of the newly created feedback
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的反馈的屏幕截图
- en: Simple checking endpoints
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单检查端点
- en: Let's make a simple checking on our API. The preceding image shows four feedbacks
    for a particular model of motorcycle; we can see that counting the comments appear
    in the image, but our API has an endpoint that shows this data.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对我们的API进行简单的检查。前面的图像显示了特定型号摩托车的四条反馈；我们可以看到在图像中出现了评论的计数，但我们的API有一个端点显示这些数据。
- en: 'Go to http://localhost:3000/api/reviews/count and we can see the following
    result:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/api/reviews/count，我们可以看到以下结果：
- en: '[PRE30]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Disable remote LoopBack endpoints
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用远程LoopBack端点
- en: By default, LoopBack creates a number of additional endpoints than the traditional
    CRUD operations. We saw this earlier, including the previous example. But sometimes,
    we don't need to expose all the endpoints through the API explorer.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，LoopBack创建了许多额外的端点，而不仅仅是传统的CRUD操作。我们之前看到了这一点，包括前面的例子。但有时，我们不需要通过API资源公开所有端点。
- en: 'Let''s see how we can reduce the number of endpoints using just a few lines
    of code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用几行代码来减少端点的数量：
- en: 'Open common/models/review.js and add the following highlighted lines of code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开common/models/review.js并添加以下突出显示的代码行：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Re-launch the application, open your terminal/shell, and type the following
    command:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动应用程序，打开您的终端/Shell，并输入以下命令：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Go to http://localhost:3000/explorer/ and click on **review** model.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到http://localhost:3000/explorer/，点击**review**模型。
- en: 'The result will be as in the following image, with only the CRUD endpoints:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下图所示，只有CRUD端点：
- en: '![Disable remote LoopBack endpoints](img/image_06_014.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![禁用远程LoopBack端点](img/image_06_014.jpg)'
- en: Screenshot of the review endpoints
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 评论端点的屏幕截图
- en: Tip
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about hiding and showing endpoints at: [https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels](https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels).'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关隐藏和显示端点的更多信息：[https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels](https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels)。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we discussed the creation of robust APIs using a LoopBack framework,
    and approached some very important points regarding the web application as a database,
    relationships between models, and datasources.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用LoopBack框架创建健壮API的过程，并涉及了关于Web应用作为数据库、模型之间关系和数据源的一些非常重要的点。
- en: We also saw some similarities between Express and Loopback and learned how to
    use the web interface of API explorer.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了Express和Loopback之间的一些相似之处，并学会了如何使用API资源的Web界面。
- en: We built an interactive interface using the React.js library and approached
    the main concept of React.js, which is the creation of components.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用React.js库构建了一个交互式界面，并接近了React.js的主要概念，即组件的创建。
- en: In the next chapter, we will see how to build a real-time application using
    some very useful resources from Node.js.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用Node.js的一些非常有用的资源构建实时应用程序。
