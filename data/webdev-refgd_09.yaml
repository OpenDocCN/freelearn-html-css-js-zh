- en: Chapter 9. JavaScript Expressions, Operators, Statements, and Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。JavaScript 表达式、运算符、语句和数组
- en: JavaScript is the most commonly used web programming language and is very popular
    among developers around the world. This chapter will cover most of the expressions,
    operators, statements, and arrays used in this language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是最常用的网络编程语言，并且在全世界开发者中非常受欢迎。本章将涵盖该语言中使用的几乎所有表达式、运算符、语句和数组。
- en: Expressions
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式
- en: 'A valid unit of code required to resolve a value is known as an **expression**.
    It is a set of literals, operators, variables, and expressions required to evaluate
    a value. This value can be a string or any logical value. An expression results
    in a value that can be written wherever a value is expected. There are two types
    of expressions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用来解析值的有效代码单元被称为**表达式**。它是一组字面量、运算符、变量和表达式，用于评估一个值。这个值可以是字符串或任何逻辑值。表达式产生一个值，可以在需要值的地方写入。表达式有两种类型：
- en: An expression that assigns a value to a variable
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将值分配给变量的表达式
- en: An expression that has a value
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有值的表达式
- en: 'Consider the following example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, a value is assigned to variable `A`, and for assigning
    that value to the variable, we use an assignment operator. Now consider another
    example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，一个值被分配给变量`A`，为了将这个值分配给变量，我们使用赋值运算符。现在考虑另一个例子：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, no value is assigned to a variable; however, it evaluates the
    result of `2+3` as `5`. The operator used in this expression is known as an **addition
    operator**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，没有值被分配给变量；然而，它评估`2+3`的结果为`5`。在这个表达式中使用的运算符被称为**加法运算符**。
- en: 'Expressions in JavaScript can be broadly classified into three types:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的表达式可以大致分为三种类型：
- en: '**Arithmetic**: These evaluate numbers. This means that these expressions perform
    mathematical calculations between values.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算术**：这些评估数字。这意味着这些表达式在值之间执行数学计算。'
- en: '**Logical**: These are used to evaluate and give the result in the form of
    `true` or `false`.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑**：这些用于评估并以`true`或`false`的形式给出结果。'
- en: '**String**: These are used to evaluate strings.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：这些用于评估字符串。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is another type of expression known as a **conditional expression**.
    These expressions are usually used in the `if-else` and `loop` conditions. These
    conditional expressions evaluate the result in the form of `true` or `false` and
    have only two values `True` and `False`. If the first condition is `true`, then
    it will evaluate first, otherwise it will evaluate second, for example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的表达式称为**条件表达式**。这些表达式通常用于`if-else`和`loop`条件中。这些条件表达式以`true`或`false`的形式评估结果，并且只有两个值`True`和`False`。如果第一个条件是`true`，则首先评估，否则将评估第二个，例如：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Primary expressions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要表达式
- en: In JavaScript, primary expressions are basic keywords and they are special objects,
    identifiers, and literals, which do not need any further evaluation to resolve
    their value. They may also be the result of another expression that is surrounded
    by brackets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，主要表达式是基本关键字，它们是特殊对象、标识符和字面量，不需要进一步评估即可解析它们的值。它们也可能是另一个表达式的结果，该表达式被括号包围。
- en: For example, `this` and `function` are keywords and these are primary expressions
    in JavaScript. The `this` keyword always returns a value whenever it enters an
    execution context. Identifiers are also primary expressions, and they refer to
    a function or an object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`this`和`function`是关键字，这些是JavaScript中的主要表达式。`this`关键字在进入执行上下文时始终返回一个值。标识符也是主要表达式，它们指代一个函数或对象。
- en: 'There are four types of literals, as primary expressions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种字面量类型，作为主要表达式：
- en: '**Boolean literals**: These contain `1`/`0` or `true`/`false`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔字面量**：这些包含`1`/`0`或`true`/`false`'
- en: '**Null literals**: These contain a `null` value'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空字面量**：这些包含一个`null`值'
- en: '**Undefined literals**: These contain any type of data type'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未定义字面量**：这些包含任何类型的数据类型'
- en: '**String literals**: These contain a string of characters'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串字面量**：这些包含字符字符串'
- en: Object initializer
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象初始化器
- en: In JavaScript, an object initializer is used to initialize an object. It is
    an expression known as an **object initializer**. Every object in JavaScript is
    an entity that has a type. Every object has some property associated with it.
    There are functions associated with objects and these functions are called **methods**.
    Objects properties are basically JavaScript variables. A property associated with
    an object tells you about the object's characteristics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，对象初始化器用于初始化对象。它是一个称为**对象初始化器**的表达式。JavaScript中的每个对象都是一个具有类型的实体。每个对象都与其一些属性相关联。与对象相关联的函数被称为**方法**。对象属性基本上是JavaScript变量。与对象相关联的属性会告诉你关于对象特性的信息。
- en: 'Object properties can belong to primitive data types such as `int` or other
    data types such as `char`. An object can have an empty property as well. We can
    create an object with an empty property, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对象属性可以属于原始数据类型，如`int`或其他数据类型，如`char`。对象也可以有一个空属性。我们可以创建一个具有空属性的对象，如下所示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In these curly brackets, you can easily and quickly create objects. These are
    comma-separated name-value pairs. The object initializer is basically used to
    create a new object. These object initializers are called **object literals**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些大括号中，你可以轻松快速地创建对象。这些是逗号分隔的名称-值对。对象初始化器基本上用于创建一个新的对象。这些对象初始化器被称为**对象字面量**。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In JavaScript, the property name and object name are case sensitive, so when
    you create an object, this should be kept in mind.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，属性名和对象名是区分大小写的，所以当你创建一个对象时，应该记住这一点。
- en: 'An object initializer creates an object with a literal notation, for example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对象初始化器使用字面量表示法创建一个对象，例如：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is covered in more detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Object-Oriented
    Programming*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这在[第8章](ch08.html "第8章。JavaScript实现、语法基础和变量类型")中有更详细的介绍，*JavaScript面向对象编程*。
- en: The function definition expression
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数定义表达式
- en: Functions in JavaScript are defined with a function keyword. Expressions are
    defined on these functions. They are used to declare a function or function expression.
    You can define a function anywhere in your script. Functions use expressions to
    define their prototype.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的函数使用函数关键字定义。在这些函数上定义表达式。它们用于声明函数或函数表达式。你可以在脚本中的任何地方定义函数。函数使用表达式来定义它们的原型。
- en: 'There are many ways to define a function in JavaScript, for example, we have
    the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中定义函数有很多方法，例如，我们有以下几种：
- en: The function declaration
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数声明
- en: The function expression
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数表达式
- en: The function declaration
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数声明
- en: 'When a browser thinks of executing a script, a function declaration is a pre-executed
    stage. A function can be declared anywhere in your code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器考虑执行脚本时，函数声明是一个预执行阶段。函数可以在你的代码的任何地方声明：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The function expression
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数表达式
- en: When a function takes the form of an expression, it is called a **function expression**.
    This expression can be a large expression, meaning that the function declaration
    requires several expressions. The function that is assigned with a function expression
    can be named or can be without a name. This is commonly referred to as an anonymous
    function. It is a first-class value, which means that it allows passing values
    in the function as parameters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个函数的形式是一个表达式时，它被称为**函数表达式**。这个表达式可以是一个大的表达式，这意味着函数声明需要多个表达式。使用函数表达式赋值的函数可以是有名字的，也可以是没有名字的。这通常被称为匿名函数。它是一个一等值，这意味着它允许将值作为参数传递给函数。
- en: 'Consider the following example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A function value can also be assigned to another function parameter. In this
    way, a function value is passed to another function parameter as a pass-by-value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 函数值也可以赋给另一个函数参数。这样，函数值作为值传递传递给另一个函数参数。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A function in JavaScript is also a regular value. If you do not want your variables
    to be set in the global scope, then put these variables into a function. We do
    this because it's not always a good choice to set a global variable, as it can
    be accessed by any function anywhere in the program, which may alter the value
    of the variable and overwrite the original value that was supposed to be used.
    Functions are generally written inside brackets because JavaScript allows expressions
    to be all in the same space.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的函数也是一个常规值。如果你不希望你的变量在全局作用域中设置，那么将这些变量放入一个函数中。我们这样做是因为设置全局变量并不总是一个好的选择，因为它可以被程序中的任何函数在任何地方访问，这可能会改变变量的值并覆盖原本应该使用的原始值。函数通常在括号内编写，因为JavaScript允许表达式全部在同一空间中。
- en: The property access expression
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性访问表达式
- en: 'In JavaScript, to access a value of an object or value of an array element,
    we use the property access operation. There are two ways of writing the property
    access expression to access values from these expressions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，要访问对象或数组元素的值，我们使用属性访问操作。从这些表达式访问值有两种编写属性访问表达式的写法：
- en: Bracket notation
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中括号表示法
- en: Dot notation
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点表示法
- en: The bracket notation
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中括号表示法
- en: 'A bracket notation is also known as an array notation. The syntax for writing
    a bracket notation is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 中括号表示法也称为数组表示法。编写中括号表示法的语法如下：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The dot notation
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点表示法
- en: 'A dot notation is also known as an object notation. The syntax for writing
    a dot notation is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点表示法也称为对象表示法。编写点表示法的语法如下：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The invocation expression
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用表达式
- en: 'In JavaScript, an invocation expression is used to execute or invoke a function
    or an expression. When a function invocation starts, it first evaluates its expression
    and then its arguments. Here are the two targets on an invocation expression:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，调用表达式用于执行或调用函数或表达式。当函数调用开始时，它首先评估其表达式，然后评估其参数。以下是调用表达式上的两个目标：
- en: The invocation target
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用目标
- en: The optional argument list
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选参数列表
- en: Invocation target
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用目标
- en: 'An invocation target followed by an open bracket then a target list and then
    a closing bracket target list must be classified as a method or object. There
    are two types of argument lists:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个调用目标后跟一个开括号，然后是一个目标列表，最后是一个闭括号目标列表，必须被分类为方法或对象。有两种类型的参数列表：
- en: Positional arguments
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置参数
- en: Named arguments
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名参数
- en: 'Positional arguments are expressions and named arguments are identifiers. Here
    is an example of an invocation expression:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 位置参数是表达式，命名参数是标识符。以下是一个调用表达式的示例：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Named arguments are the arguments that are passed with its name.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 命名参数是带有其名称的参数。
- en: The optional argument list
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选参数列表
- en: 'Variable is assigned a value that is passed as a parameter to the function.
    If the value is not passed, a default value is assigned to the variable:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 变量被分配一个作为函数参数传递的值。如果没有传递值，则变量将被分配一个默认值：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The object creation expression
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象创建表达式
- en: 'In JavaScript, this expression is used to create an object using the constructor
    method. This method is used to initialize an object''s properties. This method
    first creates new objects and then initializes the objects using object initializer
    methods in JavaScript. The constructors that are used to initialize the object
    do not return any value, and this value becomes the value of the object. Consider
    the following example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，此表达式用于使用构造函数方法创建对象。此方法用于初始化对象的属性。此方法首先创建新对象，然后使用JavaScript中的对象初始化方法初始化对象。用于初始化对象的构造函数不返回任何值，此值成为对象的值。考虑以下示例：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Evaluation expression
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估表达式
- en: The evaluation expression is used to evaluate a string. This is a property of
    the global object in JavaScript. When it evaluates a string, it gives a value
    as the output.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 评估表达式用于评估一个字符串。这是JavaScript中全局对象的一个属性。当它评估一个字符串时，它会给出一个值作为输出。
- en: 'The `Eval()` function is used in JavaScript to get a value. In this function,
    we do the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Eval()`函数在JavaScript中用于获取值。在这个函数中，我们执行以下操作：'
- en: As the input, we pass one argument
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为输入，我们传递一个参数
- en: If it does not return a value, then it means that there is an error in the code,
    and it will send an exception
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它没有返回值，那么意味着代码中存在错误，并且它会抛出异常
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are two ways you can invoke an eval() function:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两种方式可以调用`eval()`函数：
- en: 'Direct: Calls a function directly named ''eval''. Direct eval() executes code
    in its local scope. For example:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接：直接调用名为 'eval' 的函数。直接 eval() 在其局部作用域中执行代码。例如：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Indirect: By calling it through call() function, method of window or by storing
    it with a different name and calling from there, etc. Indirect eval() executes
    code in its global scope. For example:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间接：通过调用 call() 函数、window 的方法或通过不同的名称存储并从那里调用等方式调用它。间接 eval() 在其全局作用域中执行代码。例如：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Operators
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: 'In programming languages, operators are operations to be performed on operands.
    Basically, operators are symbols used to perform various operations. Consider
    the following example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，运算符是对操作数执行的操作。基本上，运算符是用于执行各种操作的符号。考虑以下示例：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, `9` and `11` are operands and `+` is the additional
    operator.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`9` 和 `11` 是操作数，`+` 是加法运算符。
- en: Overview
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Like other languages, in JavaScript, there are several operators to perform
    an operation, such as addition, multiplication, subtraction, and so on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他语言一样，在 JavaScript 中，存在执行操作的各种运算符，例如加法、乘法、减法等。
- en: 'In JavaScript, there are different operators such as:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，存在不同的运算符，例如：
- en: The logical operator
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: The bitwise operator
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位运算符
- en: The conditional operator
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件运算符
- en: The arithmetic operator
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术运算符
- en: The assignment operator
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: Binary operator
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二元运算符
- en: 'As the name suggests, binary operators require two operands; for example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，二元运算符需要两个操作数；例如：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `A` and `B` are operands and `+` is the operator to perform addition between
    them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`A` 和 `B` 是操作数，`+` 是执行它们之间加法运算的运算符。
- en: Unary operator
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一元运算符
- en: 'In programming languages, unary operators have just one operand and operator
    with them, for example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，一元运算符只有一个操作数和与之相关的运算符，例如：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This can also be written as:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以写成：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`A++` is a post increment operator. It will first evaluate `A` and then increment
    it; whereas,`++A` is a pre-increment operator. It increments the value of `A`
    and then evaluates the expression.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`A++` 是一个后递增运算符。它将首先评估 `A`，然后递增它；而 `++A` 是一个前递增运算符。它递增 `A` 的值，然后评估表达式。'
- en: Ternary operator
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三元运算符
- en: 'The ternary operators require three operands to perform different operations;
    for example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符需要三个操作数来执行不同的操作；例如：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding statement, `?` is the ternary operator.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语句中，`?` 是三元运算符。
- en: Arithmetic operators
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算符
- en: 'In programming languages, arithmetic operators are use to perform arithmetic
    operations on values and variables. The basic arithmetic operations are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，算术运算符用于对值和变量执行算术运算。基本的算术运算如下：
- en: '`+`: Addition'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`：加法'
- en: '`-`: Subtraction'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`：减法'
- en: '`*`: Multiplication'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：乘法'
- en: '`/`: Division'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：除法'
- en: '`%`: Modulus operator'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%`：取模运算符'
- en: '`++`: Increment operator'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`++`：递增运算符'
- en: '`--`: Decrement operator'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--`：递减运算符'
- en: These operators perform operations on numeric operands and return a result as
    a numeric value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符对数值操作数执行操作，并返回一个数值结果。
- en: 'In JavaScript, operators are the same as those in other programming languages;
    for example, if you want to perform division between variables, then you will
    write the expression as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，运算符与其他编程语言中的运算符相同；例如，如果你想对变量执行除法运算，那么你应该写成以下形式：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In JavaScript, arithmetic operators are the most useful and powerful operators.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，算术运算符是最有用且功能强大的运算符。
- en: The + operator
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+` 运算符'
- en: The `+` operator performs an addition of two or more numbers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符执行两个或更多数字的加法。'
- en: Returns
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `+` operator returns the addition of the numbers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符返回数字的加法。'
- en: Parameter
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `+` operator does not have any parameters.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符没有参数。'
- en: Description
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `+` operator is used to add two numbers or two variables in which numbers
    are stored.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符用于将两个数字或两个存储数字的变量相加。'
- en: 'For example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of this will be:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出的结果将是：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This operator can also be used to append or concat two strings; for example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符还可以用于连接或连接两个字符串；例如：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output will be as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The - operator
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-` 运算符'
- en: The `-` operator performs a subtraction between two numbers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`-` 运算符在两个数字之间执行减法运算。'
- en: Returns
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result of the `-` operator returns subtraction between two numbers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`-` 运算符的结果返回两个数字之间的减法。'
- en: Parameter
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `-` operator has no parameters.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`-` 运算符没有参数。'
- en: Description
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `-` operator is used to subtract two numbers or two variables in which numbers
    are stored.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`-` 运算符用于减去两个数字或存储数字的两个变量。'
- en: 'Consider the following example:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of this will be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果如下：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The * operator
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*` 运算符'
- en: The `*` operator performs a multiplication between two or more numbers.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 运算符执行两个或更多数字之间的乘法。'
- en: Returns
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result of the multiplication between the numbers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 数字之间乘法的结果。
- en: Parameter
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This operator is used to multiply two or more numbers or two or more variables
    in which numbers are stored.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符用于乘以两个或更多数字或存储数字的两个或更多变量。
- en: 'Consider the following example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output of this will be as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果如下：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The / operator
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/` 运算符'
- en: The `/` operator performs a division between two numbers.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`/` 运算符在两个数字之间执行除法。'
- en: Returns
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result of the division between the numbers.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 数字之间除法的结果。
- en: Parameter
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also called the **remainder operator**, since the value returned is
    not an absolute value (in that, it retains the sign of the first operand, not
    the second).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为 **余数运算符**，因为返回的值不是绝对值（即，它保留第一个操作数的符号，而不是第二个操作数的符号）。
- en: 'Consider the following example:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE30]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output will be as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE31]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The % operator
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '% 运算符'
- en: The `%` modulus operator is used to calculate the remainder.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`%` 模数运算符用于计算余数。'
- en: Returns
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result of the multiplication between the numbers.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 数字之间乘法的结果。
- en: Parameter
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This operator is used to multiply two or more numbers or two or more variables
    in which numbers are stored.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符用于乘以两个或更多数字或存储数字的两个或更多变量。
- en: 'Consider the following example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE32]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output will be as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE33]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The ++ Operator
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ++ 运算符
- en: The `++` operator is used to increment a value.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`++` 运算符用于增加一个值。'
- en: Returns
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result is the incremented value.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是递增的值。
- en: Parameter
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: Increment. the value and stores the value in itself.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 增量。增加值并将值存储在自身中。
- en: 'Consider the following example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output of this will be:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果如下：
- en: '[PRE35]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The -- Operator
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: -- 运算符
- en: The `--` operator is used to decrement a value.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`--` 运算符用于递减一个值。'
- en: Returns
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The result is the decremented value.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是递减的值。
- en: Parameter
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `--` operator decrements the value and stores the value in itself.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`--` 运算符递减值并将值存储在自身中。'
- en: 'For example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output will be as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE37]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Logical operators
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: 'In programming languages, logical operators are Boolean operators. These operators
    work on Boolean logic. Like other languages, JavaScript works on Boolean evaluation.
    These Boolean operators always return a Boolean value. There are two possible
    results of any logical operator:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，逻辑运算符是布尔运算符。这些运算符在布尔逻辑上工作。像其他语言一样，JavaScript 在布尔评估上工作。这些布尔运算符总是返回布尔值。任何逻辑运算符都有两种可能的结果：
- en: '`True`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True`'
- en: '`False`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False`'
- en: 'The following are the logical operators used in programming languages as well
    as JavaScript:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在编程语言以及JavaScript中使用的逻辑运算符：
- en: Logical AND (`&&`)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑与 (`&&`)
- en: Logical OR(`||`)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑或(`||`)
- en: Logical NOT(`!`)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑非(`!`)
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Arithmetic operators get priority over logical operators.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符比逻辑运算符有更高的优先级。
- en: Let's say, if there is an expression and there are logical and arithmetic operators
    in it, then the arithmetic operators will be evaluated first because of their
    higher priority. Logical operators work from left to right.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，如果有一个表达式，并且其中包含逻辑和算术运算符，那么由于它们的优先级较高，算术运算符将首先被评估。逻辑运算符从左到右工作。
- en: Logical operations are applicable on everything. A non-Boolean value can result
    in a Boolean value after evaluation.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算适用于所有内容。一个非布尔值在评估后可以产生一个布尔值。
- en: The && Operator
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '&& 运算符'
- en: The `&&` operator is the translation of the English word "and". For example,
    if we have to write apples and oranges, we write *apples && oranges*.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`&&` 运算符是英语单词 "and" 的翻译。例如，如果我们必须写苹果和橙子，我们写 *apples && oranges*。'
- en: Returns
  id: totrans-233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: This returns the most specific value on an operand; if a non-Boolean value is
    used, then a non-Boolean value is returned.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回操作数上最具体的价值；如果使用非布尔值，则返回非布尔值。
- en: Parameter
  id: totrans-235
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: We normally write an expression or a condition that is to be evaluated separated
    by the '`&&'` sign.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常用 `&&` 符号分隔要评估的表达式或条件。
- en: Description
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is called the **AND** operator.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 **AND** 操作符。
- en: 'Here is an example of the `&&` operator:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `&&` 操作符的一个示例：
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The || Operator
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`||` 操作符'
- en: This operator is the translation of the English word "or". For example, if we
    have to write apples or oranges, we write *apples || oranges*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符是英语单词 "or" 的翻译。例如，如果我们必须写苹果或橙子，我们写 *apples || oranges*。
- en: Returns
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: This returns the most specific value on an operand; if a non-Boolean value is
    used, then a non-Boolean value is returned.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回操作数上最具体的价值；如果使用非布尔值，则返回非布尔值。
- en: Parameter
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: We normally write an expression or a condition that is to be evaluated separated
    by the '`||'` sign.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常用 `||` 符号分隔要评估的表达式或条件。
- en: Description
  id: totrans-247
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is called the **OR** operator.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 **OR** 操作符。
- en: 'Here is an example of the `||` operator:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `||` 操作符的一个示例：
- en: '[PRE39]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The ! Operator
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`!` 操作符'
- en: 'This is the `NOT` operator. NOT operator evaluates if the values are not equal
    to each other. For instance:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `NOT` 操作符。`NOT` 操作符评估值是否不相等。例如：
- en: '[PRE40]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Returns
  id: totrans-254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: Boolean value.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值。
- en: Parameter
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`null`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`'
- en: Description
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is called as the **NOT** operator.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 **NOT** 操作符。
- en: 'Here is an example of the `!` operator:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `!` 操作符的一个示例：
- en: '[PRE41]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In JavaScript, these logical operators are used in conditional statements and
    in the `while` loop.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，这些逻辑操作符用于条件语句和 `while` 循环中。
- en: Assignment operators
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值操作符
- en: In JavaScript, assignment operators are used to assign values to variables.
    The assignment operator `=` assigns the value of the operand on it right to the
    operand on its left. For instance, `abc = xyz`, here `xyz` is right operand whose
    value is being assigned to `abc`, which is the left operand. An assignment operator
    can assign the value of a single variable to multiple variables. In the following
    sections, we will discuss the assignment operators in JavaScript.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，赋值操作符用于将值赋给变量。赋值操作符 `=` 将其右侧操作数的值赋给其左侧的操作数。例如，`abc = xyz`，在这里
    `xyz` 是右侧操作数，其值被赋给 `abc`，即左侧操作数。赋值操作符可以将单个变量的值赋给多个变量。在以下各节中，我们将讨论 JavaScript 中的赋值操作符。
- en: The = operator
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`=` 操作符'
- en: The `=` operator is used to assign the value to a variable.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`=` 操作符用于将值赋给变量。'
- en: Returns
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: There are no parameters but it is used between two or more operands.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数，但它用于两个或多个操作数之间。
- en: Parameters
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is the simplest of all assignment operators and is used commonly. It assigns
    the value of the right side operand to the left side operand.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有赋值操作符中最简单的一个，并且被广泛使用。它将右侧操作数的值赋给左侧操作数。
- en: 'Consider the following example:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE42]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output of this will be:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出的结果将是：
- en: '[PRE43]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The += operator
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`+=` 操作符'
- en: This operator is known as addition assignment operator.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符被称为加法赋值操作符。
- en: Returns
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: This adds the value to the variable and returns the result of the addition.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这将值加到变量上，并返回加法的结果。
- en: Parameters
  id: totrans-282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The addition assignment operator is used to add a value to a variable and assign
    the value to another or the same variable in the same operation.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 加法赋值操作符用于在单个操作中将值加到变量上，并将值赋给另一个或相同的变量。
- en: 'Consider the following example:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE44]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This is short hand of writing `abc = abc + 10`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `abc = abc + 10` 的简写。
- en: The -= operator
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`-=` 操作符'
- en: This operator is known as subtraction assignment operator.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符被称为减法赋值操作符。
- en: Returns
  id: totrans-291
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: This operator subtracts the given value from the variable and returns the result
    of the subtraction.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符从变量中减去给定的值，并返回减法的结果。
- en: Parameters
  id: totrans-293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `-=` operator is used to subtract a value from a variable and assign the
    given value to another or the same variable in the same operation.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`-=` 操作符用于从变量中减去一个值，并在同一操作中将给定的值赋给另一个或相同的变量。'
- en: 'Consider the following example:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE45]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This is short hand of writing `abc = abc - 2`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `abc = abc - 2` 的简写。
- en: The *= Operator
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`*=` 操作符'
- en: This operator is known as multiplication assignment operator.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符被称为乘法赋值操作符。
- en: Returns
  id: totrans-302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回
- en: This multiplies the variable and the value and returns the result of the multiplication.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这将变量和值相乘，并返回乘法的结果。
- en: Parameters
  id: totrans-304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-306
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This operator is used to multiply a value with a variable and assign the value
    to another or the same variable in the same operation.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作符用于将一个值与变量相乘，并在同一操作中将结果赋给另一个或相同的变量。
- en: 'Consider the following example:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE46]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This is short hand of writing `abc = abc * 5`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简写形式，相当于 `abc = abc * 5`。
- en: The /= Operator
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: /= 操作符
- en: This operator is known as division assignment operator.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符被称为除法赋值操作符。
- en: Returns
  id: totrans-313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: It divides the variable with the value of right operand and assign it to the
    variable.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 它将变量除以右操作数的值，并将结果赋给变量。
- en: Parameters
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: There are no parameters.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数。
- en: Description
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This operator is used to divide a variable with the value and assign the result
    to the variable.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作符用于将变量除以值，并将结果赋给变量。
- en: 'Consider the following example:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE47]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This is short hand of writing `abc = abc / 5`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简写形式，相当于 `abc = abc / 5`。
- en: The %= Operator
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '%= 操作符'
- en: The `%=` operator is also called remainder assignment operator.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`%=` 操作符也称为余数赋值操作符。'
- en: Parameters
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `%=` operator takes a null parameter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '%= 操作符接受一个空参数。'
- en: Returns
  id: totrans-326
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `%=` operator returns the remainder.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '%= 操作符返回余数。'
- en: Description
  id: totrans-328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'It divides the variable with the value of right operand and assigns the remainder
    value it to the variable. For example:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 它将变量除以右操作数的值，并将余数赋给变量。例如：
- en: '[PRE48]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This is short hand of writing `abc = abc % 3`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简写形式，相当于 `abc = abc % 3`。
- en: Note
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is an experimental technology, part of the ECMAScript 2016 (ES7) proposal.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实验性技术，是 ECMAScript 2016（ES7）提案的一部分。
- en: Exponentiation assignment (**=)
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幂赋值（**=**）
- en: This operator returns the result of raising power of left operand to the value
    of second operand.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作符返回左操作数幂的值，其幂为第二个操作数的值。
- en: '[PRE49]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This is short hand of writing `abc = abc ** 2`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简写形式，相当于 `abc = abc ** 2`。
- en: Relational operators
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系操作符
- en: In programming languages, relational operators are also known as comparison
    operators. These operators show the relative order of two values. These comparison
    operators are covered in the following sections.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，关系操作符也称为比较操作符。这些操作符显示两个值的相对顺序。以下各节将介绍这些比较操作符。
- en: The < operator
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: < 操作符
- en: The `<` (Less Than) operator operator is used to compare the values on both
    sides of the expression and check whether the value of the left-hand side is less
    than the value on the right-hand side of the operator.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`<`（小于）操作符用于比较表达式两边的值，并检查操作符左边的值是否小于操作符右边的值。'
- en: Returns
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then expression returns `true` else `false`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则表达式返回 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-346
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **less than** operator.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**小于**操作符。
- en: 'A simple example of the usage of this operator is as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用此操作符的简单示例：
- en: '[PRE50]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The <= Operator
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <= 操作符
- en: The `<=` operator is used to compare the values on both sides of the expression
    and check whether the value on the left-hand side is less than or equal to the
    value on the right-hand side of the operator.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`<=` 操作符用于比较表达式两边的值，并检查操作符左边的值是否小于或等于操作符右边的值。'
- en: Returns
  id: totrans-352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则它返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-354
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **less than or equal to** operator.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**小于等于**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用此操作符的简单示例：
- en: '[PRE51]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The > Operator
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '> 操作符'
- en: The `>` operator is used to compare the values on both sides of the expression
    and check whether the value on the left-hand side is greater than the value on
    the right-hand side of the operator.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`>` 操作符用于比较表达式两边的值，并检查操作符左边的值是否大于操作符右边的值。'
- en: Returns
  id: totrans-362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则它返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-364
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-366
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **greater than** operator.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**大于**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此操作符的一个简单示例如下：
- en: '[PRE52]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The >= Operator
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '>= 操作符'
- en: The `>=` operator is used to compare the values on both the sides of the expression
    and check whether the value on the left-hand side is greater than or equal to
    the value on the right-hand side of the operator.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`>=` 操作符用于比较表达式两边的值，并检查操作符左边的值是否大于或等于操作符右边的值。'
- en: Returns
  id: totrans-372
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-374
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **greater than or equal to** operator.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**大于或等于**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此操作符的一个简单示例如下：
- en: '[PRE53]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The != Operator
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '!= 操作符'
- en: The `!=` operator is used to compare the values on both the sides of the expression
    and check whether the value on the left-hand side is not equal to the value on
    the right-hand side of the operator.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`!=` 操作符用于比较表达式两边的值，并检查操作符左边的值是否不等于操作符右边的值。'
- en: Returns
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-386
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **not equal to** operator.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**不等于**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此操作符的一个简单示例如下：
- en: '[PRE54]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The == Operator
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: == 操作符
- en: The `==` operator is used to compare the values on both sides of the expression
    and check whether the value of the left-hand side is equal to the value on the
    right-hand side of the operator.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`==` 操作符用于比较表达式两边的值，并检查操作符左边的值是否等于操作符右边的值。'
- en: Returns
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-394
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: Here, both the operands must be numbers or both must be strings.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，两个操作数必须是数字或两者都必须是字符串。
- en: Description
  id: totrans-396
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **Equal To** operator.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**等于**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此操作符的一个简单示例如下：
- en: '[PRE55]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The === Operator
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: === 操作符
- en: The `===` operator is used to compare the values on both sides of the expression
    and see if the value of the left is equal to the value on the right of the operator
    and to also check if both the operands are of the same datatype.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`===` 操作符用于比较表达式两边的值，并查看操作符左边的值是否等于操作符右边的值，同时也要检查两个操作数是否为同一数据类型。'
- en: Returns
  id: totrans-402
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件为真，则返回布尔值 `true`，否则返回 `false`。
- en: Parameter
  id: totrans-404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `===` operator takes parameter `null`.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`===` 操作符接受参数 `null`。'
- en: Description
  id: totrans-406
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is also known as the **equal value and equal type** operator.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**值相等且类型相等**操作符。
- en: 'A simple example of the usage of this is as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此操作符的一个简单示例如下：
- en: '[PRE56]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Statements
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语句
- en: 'JavaScript works on sets of statements. These statements have an appropriate
    syntax where the syntax depends on what the statements contain. A statement can
    have multiple lines in it. Basically, a statement is a set of instructions given
    to a computer browser to execute JavaScript code. A statement can return a value
    that is terminated with a semicolon. A statement can be a call for a certain action,
    for example:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在一组语句上工作。这些语句具有适当的语法，语法取决于语句包含的内容。一个语句可以包含多行。基本上，一个语句是一组给计算机浏览器执行
    JavaScript 代码的指令。一个语句可以用分号结束，并返回一个值。一个语句可以是一个对特定动作的调用，例如：
- en: '[PRE57]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The preceding statement calls the in-built `Write()` function and prints the
    message **hello world** on the screen.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句调用了内置的 `Write()` 函数，并在屏幕上打印了消息 **hello world**。
- en: 'We can write multiple statements in one line separated by a semicolon; for
    example:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一行中写多个语句，用分号分隔；例如：
- en: '[PRE58]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'A statement can also be terminated with a line break, for example:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 语句也可以用换行符结束，例如：
- en: '[PRE59]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Each statement in JavaScript runs one by one in order of the given instructions
    in the JavaScript program.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的每个语句都按照JavaScript程序中给出的指令顺序依次执行。
- en: Expression statements
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式语句
- en: In JavaScript, there is a difference between a statement and an expression.
    Whenever a value is expected in your script or code, an expression produces that
    value using a statement.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，语句和表达式之间有一个区别。每当在脚本或代码中期望一个值时，表达式通过语句产生这个值。
- en: An expression is made of literals, variables, operators, and methods. The data
    type of the returned value depends on the variable used in the expression. We
    can create a compound expression from a smaller expression's group depending on
    their data type.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式由字面量、变量、运算符和方法组成。返回值的数据类型取决于表达式中使用的变量。我们可以根据数据类型从一组较小的表达式中创建一个复合表达式。
- en: '[PRE60]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Statements are basically actions performed in scripts, for example, loops and
    `if-else` are statements in JavaScript. Wherever JavaScript expects a statement
    and you can also write an expression, is called an expression statement. It fulfills
    purpose of both statement and expression. But this can not be reversed. We can
    not write a statement where JavaScript is expecting an expression. For instance,
    if statement can not be used as an argument to a function.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 语句基本上是在脚本中执行的动作，例如循环和`if-else`在JavaScript中都是语句。无论JavaScript期望一个语句还是表达式，都可以称为表达式语句。它既满足语句的功能，也满足表达式的功能。但这是不可逆的。我们不能在JavaScript期望表达式的地方写一个语句。例如，if语句不能用作函数的参数。
- en: 'To prevent this from happening JavaScript doesn''t allow us to use function
    expressions and object literals as statements, that is, **expression statement**
    should not start with:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，JavaScript不允许我们将函数表达式和对象字面量用作语句，也就是说，**表达式语句**不应该以下列方式开始：
- en: Curly brace
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大括号
- en: Keyword function
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字`function`
- en: Compound empty statements
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合空语句
- en: A compound statement is a set of statements written in curly brackets and all
    these statements are separated by a semicolon. It combines multiple statements
    in a program into a single statement. A compound statement is also known as a
    **block statement**.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 复合语句是一组用大括号括起来的语句，所有这些语句都由分号分隔。它将程序中的多个语句组合成一个单一的语句。复合语句也称为**块语句**。
- en: 'This type of statement is usually used with conditional statements such as
    `if`, `else`, `for`, `while` loop, and so on. Consider the following example:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的语句通常与条件语句如`if`、`else`、`for`、`while`循环等一起使用。考虑以下例子：
- en: '[PRE61]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'An empty statement is the opposite of a compound statement. There is no statement
    in an empty statement but just a semicolon. This semicolon means that no statement
    will be executed. Usually, empty statements are used when you need to put comments
    in your code. Consider the following example:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 空语句是复合语句的反面。空语句中没有语句，只有一个分号。这个分号意味着不会执行任何语句。通常，空语句用于需要在代码中添加注释的情况。考虑以下例子：
- en: '[PRE62]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Declaration statements
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明语句
- en: This statement is use to declare a variable or a function in JavaScript.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句用于在JavaScript中声明变量或函数。
- en: function
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`function`'
- en: In JavaScript, the `function` keyword is used to declare a function in a program.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，`function`关键字用于在程序中声明一个函数。
- en: 'Here is a simple example where the `myFunction` function is declared:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子，其中声明了`myFunction`函数：
- en: '[PRE63]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: var
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`var`'
- en: In JavaScript, to declare a variable, we use the `var` keyword. We need to declare
    a variable before using it.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，要声明一个变量，我们使用`var`关键字。在使用变量之前，我们需要声明它。
- en: 'Consider the following example:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE64]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Here is an example of both `var` and `function`:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个同时使用`var`和`function`的例子：
- en: '[PRE65]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的输出将如下所示：
- en: '[PRE66]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Conditional statements
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'In JavaScript, when we want to perform different actions for different statements,
    we use a conditional statement. These are a set of commands to perform different
    actions on different conditions. In JavaScript, there are three types of conditional
    statements, which are as follows:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，当我们想要对不同的语句执行不同的操作时，我们使用条件语句。这些是一组根据不同条件执行不同操作的命令。在JavaScript中，有三种类型的条件语句，如下所示：
- en: '`if`'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`'
- en: '`else`'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else`'
- en: '`switch`'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`'
- en: Basically, these statements show the flow of your code. Conditional statements
    control the flow of your program, that is, which action will be perform on which
    condition.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这些语句显示了代码的流程。条件语句控制程序的流程，即根据哪个条件执行哪个操作。
- en: Consider an example where you have an e-commerce website and you want to display
    an offer label on a product when there is special offer on it. In such a scenario,
    you can place the appropriate code inside conditional statements.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个例子，假设你有一个电子商务网站，并且你想要在产品有特别优惠时显示一个优惠标签。在这种情况下，你可以在条件语句中放置适当的代码。
- en: If statements
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: If 语句
- en: 'In programming languages, the `if` statement is a control statement. An `if`
    statement has two important parts:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，`if` 语句是一个控制语句。`if` 语句有两个重要的部分：
- en: A condition
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件
- en: A code to perform the action
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行动作的代码
- en: In JavaScript and other languages, the `if` statement makes decisions based
    on the variable and type of data. For example, if you write a script asking to
    be notified on your birthday, then when the time arrives, the message "**It's
    your birthday today**" will be displayed.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 和其他语言中，`if` 语句根据变量和数据类型做出决策。例如，如果你编写一个脚本要求在生日时通知你，那么当时间到来时，将显示消息
    "**今天是你的生日**"。
- en: The `if` statement is only executed when the condition is `true`. If the expression
    is `false`, then it will not execute.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当条件为 `true` 时，`if` 语句才会执行。如果表达式是 `false`，则不会执行。
- en: Syntax
  id: totrans-460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for an `if` statement in JavaScript:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 JavaScript 中 `if` 语句的语法：
- en: '[PRE67]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Example
  id: totrans-463
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'For example, in JavaScript, we can write an `if` statement code as follows:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 JavaScript 中，我们可以这样编写一个 `if` 语句代码：
- en: '[PRE68]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Else if statements
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Else if 语句
- en: 'In JavaScript, there may be some situations when we require to make a decision
    based on different possibilities. The `else if` statement will only be executed
    when the previous statement is `false` and its condition is `true`. There are
    two major points of the `else if` statement, they are as follows:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，可能会有一些情况，我们需要根据不同的可能性做出决定。`else if` 语句只有在前面的语句为 `false` 且其条件为
    `true` 时才会执行。`else if` 语句有两个主要点，如下：
- en: There should be an `if` statement before any `else if` statement
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何 `else if` 语句之前都应该有一个 `if` 语句
- en: You may use as many `else if` statements as desired, but at the end, you must
    have an `else` statement.
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用任意数量的 `else if` 语句，但最后必须有一个 `else` 语句。
- en: Syntax
  id: totrans-470
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for a simple `if` statement in JavaScript:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 JavaScript 中简单 `if` 语句的语法：
- en: '[PRE69]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In the preceding syntax, two conditions can be checked for their validity.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，可以检查两个条件是否有效。
- en: 'Here is the syntax for a slightly more complex `else if` statement in JavaScript:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 JavaScript 中稍微复杂一点的 `else if` 语句的语法：
- en: '[PRE70]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In the preceding syntax, three conditions can be checked for their validity.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，可以检查三个条件是否有效。
- en: Example
  id: totrans-477
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'For example, if you have a web page and you want to check who is accessing
    that web page. You will put two custom messages in your script inside the `Else
    if` statement. You will write these as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个网页，并且你想检查谁在访问该网页。你将在 `Else if` 语句的脚本中放置两个自定义消息。你将这样编写它们：
- en: '[PRE71]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `Else if` statement is one of the most advanced forms of statements in JavaScript.
    It makes a decision after checking all the `if` conditions. It is just a type
    of complex statement where every `if` is a part of an `else` statement. All conditions
    must be `true` within the parenthesis following the `else if` keyword. If any
    of the conditions are `false`, then the `else` part will be executed.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`Else if` 语句是 JavaScript 中最先进的语句形式之一。它在检查所有 `if` 条件后做出决定。它是一种复杂的语句类型，其中每个 `if`
    都是 `else` 语句的一部分。所有条件都必须在 `else if` 关键字后面的括号内为 `true`。如果任何条件为 `false`，则执行 `else`
    部分。'
- en: Switch statement
  id: totrans-481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Switch 语句
- en: In programming languages, the `switch` statement execution depends only on the
    value of the expression. There are lists of cases against which checks are done.
    The checks are done sequentially; JavaScript interpreter checks the first case
    and its condition to check whether it is `true` or not. Similarly, checks are
    done for all case statements to check whether their conditions are `true` and
    to find a break statement. When the interpreter encounters the break statement,
    it exits the `switch` loop. The break statement is meant to ensure that the `switch`
    statement returns control to the calling function once one case is executed, interpreter
    does not forward the control to the next applicable case.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，`switch`语句的执行仅取决于表达式的值。有多个情况列表，对这些情况进行检查。检查是顺序进行的；JavaScript解释器检查第一个情况及其条件，以检查它是否为`true`。同样，对所有的`case`语句进行检查，以检查它们的条件是否为`true`，并找到`break`语句。当解释器遇到`break`语句时，它退出`switch`循环。`break`语句的目的是确保一旦执行了一个`case`，`switch`语句就返回控制权给调用函数，解释器不会将控制权传递给下一个适用的`case`。
- en: Syntax
  id: totrans-483
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for a simple `switch` statement in JavaScript:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是JavaScript中简单`switch`语句的语法：
- en: '[PRE72]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Example
  id: totrans-486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Following is an example of a valid `switch` statement:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个有效的`switch`语句的示例：
- en: '[PRE73]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: If the preceding code does not find a matching case then it executes the default
    statement. Basically a `switch` statement is an expression which evaluates different
    statements in order to execute some code based on some conditions.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的代码没有找到匹配的情况，则执行默认语句。基本上，`switch`语句是一个表达式，它根据某些条件评估不同的语句以执行某些代码。
- en: Loops
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环
- en: In programming languages, loops are used to execute a block of code a number
    of times, depending on a condition. For example, if you have a statement and you
    want to execute it over and over, you just put it in a loop. Loops are basically
    used for repetitive tasks.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，循环用于根据条件执行代码块多次。例如，如果你有一个语句并且想要反复执行它，你只需将其放入循环中。循环基本上用于重复性任务。
- en: Another specific example of a loop is that if you want to traverse an array
    to find a specific number, you have to iterate through array elements. Each iteration
    will get the next array index.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个循环的特定例子是，如果你想遍历一个数组以找到特定的数字，你必须遍历数组元素。每次迭代将获取下一个数组索引。
- en: 'There are four types of loops in JavaScript, they are as follows:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中有四种类型的循环，如下所示：
- en: '`for`'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`'
- en: '`while`'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`'
- en: '`do-WHILE`'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do-WHILE`'
- en: '`for-in`'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for-in`'
- en: For repetitive tasks we put a set of instructions in a loop. To control the
    number of times a loop executes, we use control variables in a loop for incrementing
    or decrementing value of an iterator or counter variable, which will repeat the
    block of code. You can also use the `break` and `continuous` statements in a loop.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 对于重复性任务，我们将一系列指令放入循环中。为了控制循环执行的次数，我们使用循环中的控制变量来增加或减少迭代器或计数器的值，这将重复执行代码块。你还可以在循环中使用`break`和`continue`语句。
- en: For loop
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环
- en: The `for` loops are used to loop through or execute a block of code, until a
    condition returns a `false` result. In a `for` loop, we mention how many times
    the script should perform. For example, you might want to execute your script
    12 times.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环用于循环遍历或执行代码块，直到条件返回`false`结果。在`for`循环中，我们说明脚本应该执行多少次。例如，你可能想要执行你的脚本12次。'
- en: Syntax
  id: totrans-501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'A `for` loop in JavaScript is the same as in other languages, such as C, C++,
    and Python. The `for` loop syntax has three important parts:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的`for`循环与其他语言（如C、C++和Python）中的`for`循环相同。`for`循环的语法有三个重要部分：
- en: '**Initialization**: This is where loop initializes the counter variable. This
    is the first statement when a loop starts its execution.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化**：这是循环初始化计数器变量的地方。这是循环开始执行时的第一条语句。'
- en: '**Condition**: This is an expression to be evaluated before every loop iteration.
    If the condition is satisfied and is `true`, we enter the loop; otherwise, if
    the condition is not satisfied and the condition returns `false`, then we exit
    the `for` loop.'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件**：这是一个在每次循环迭代之前要评估的表达式。如果条件满足且为`true`，我们进入循环；否则，如果条件不满足且返回`false`，则退出`for`循环。'
- en: '**Increment/Decrement**: This is used for iteration and for increasing or decreasing
    the counter variable value. This is an update statement where increment or decrement
    is executed.'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量/减量**：这用于迭代和增加或减少计数器变量的值。这是一个更新语句，其中执行增量或减量。'
- en: '[PRE74]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Example
  id: totrans-507
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider the following example of a basic counter code in JavaScript:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下JavaScript中基本计数器代码的示例：
- en: '[PRE75]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The output will be as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE76]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: While loop
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`while`循环'
- en: This is also a commonly used loop in JavaScript. The `while` loop executes a
    block of statements repeatedly as long as its condition is `true`. The loop exits
    when the condition becomes `false`.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是JavaScript中常用的一个循环。`while`循环在条件为`true`的情况下重复执行一系列语句，直到条件变为`false`。当条件变为`false`时，循环退出。
- en: Syntax
  id: totrans-514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for a `while` loop in JavaScript:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JavaScript中`while`循环的语法：
- en: '[PRE77]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'There are two parts of a `while` loop:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环有两个部分：'
- en: The condition statement
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句
- en: The `while` loop code written in curly brackets
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用大括号编写的`while`循环代码
- en: The `while` loop conditions have to be met in order for the loop to work. If
    the condition breaks, then the loop breaks.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使循环工作，必须满足`while`循环的条件。如果条件中断，则循环中断。
- en: Example
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is an example of the `while` loop, which will print numbers from `1` to
    `4`:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`while`循环的一个示例，它将打印出从`1`到`4`的数字：
- en: '[PRE78]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The output will be as follows:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE79]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Do while loop
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`do while`循环'
- en: The `do while` loop is also known as a **post-test loop** because it first executes
    the statement and then checks the condition. If the condition is `true`, then
    it will enter the loop, and if the condition is `false`, it will break out from
    the loop.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`do while`循环也称为**后测试循环**，因为它首先执行语句，然后检查条件。如果条件为`true`，则进入循环；如果条件为`false`，则跳出循环。'
- en: Syntax
  id: totrans-528
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for the `do` `while` loop in JavaScript:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JavaScript中`do while`循环的语法：
- en: '[PRE80]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'There are two important parts of the `do while` loop:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`do while`循环有两个重要部分：'
- en: A statement
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句
- en: A condition
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件
- en: The `do while` loop is similar to the `while` loop, but it checks the condition
    at the end of the loop. The `do while` loop executes the specified statement at
    least once before checking the condition.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`do while`循环与`while`循环类似，但它是在循环的末尾检查条件。`do while`循环至少执行一次指定的语句，然后再检查条件。'
- en: Example
  id: totrans-535
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is an example of the `do while` loop that prints the values `1` to `5`:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个`do while`循环的示例，它会打印出`1`到`5`的值：
- en: '[PRE81]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The output will be as follows:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE82]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Tip
  id: totrans-540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `do while` loop can be used where we need to execute the loop at least once,
    irrespective of whether or not the condition is met.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`do while`循环可以在我们需要至少执行一次循环，无论条件是否满足的情况下使用。'
- en: For in loop
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for in`循环'
- en: There is another type on loop used in JavaScript that is known as the `for in`
    loop. This loop is used for object properties in JavaScript. In this loop, one
    property of the object is assigned to a variable name.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，还有一种循环类型，称为`for in`循环。这个循环用于JavaScript中的对象属性。在这个循环中，对象的一个属性被分配给一个变量名。
- en: Syntax
  id: totrans-544
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is a syntax for the `for in` loop in JavaScript:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JavaScript中`for in`循环的语法：
- en: '[PRE83]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Example
  id: totrans-547
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is an example of the `for in` loop:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`for in`循环的一个示例：
- en: '[PRE84]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Jumps and labeled statements
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳转和标签语句
- en: 'In JavaScript, the `jump` statements are used to force the flow of execution
    to jump to another condition in the script. Basically, it is used to terminate
    iterative statements. There are two types of `jump` statements in JavaScript:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，`jump`语句用于强制执行流程跳转到脚本中的另一个条件。基本上，它用于终止迭代语句。JavaScript中有两种`jump`语句：
- en: '`Break`'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Break`'
- en: '`Continue`'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`继续`'
- en: These statements are used when you immediately leave a loop or when you want
    to jump to another condition due to a condition in a code.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句用于当你立即离开循环或因为代码中的条件而想要提前跳转到另一个条件时。
- en: Break statement
  id: totrans-555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`break`语句'
- en: In JavaScript, a `break` statement is used with a `switch` statement. It is
    used to exit a loop or a condition earlier than planned. Break statements are
    also used in the `for` loop and the `while` loop.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，`break`语句与`switch`语句一起使用。它用于提前退出循环或条件。`break`语句也用于`for`循环和`while`循环中。
- en: Syntax
  id: totrans-557
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for the `break` statement in JavaScript:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JavaScript中`break`语句的语法：
- en: '[PRE85]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Example
  id: totrans-560
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider the following simple example:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下简单示例：
- en: '[PRE86]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The output will be as follows:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE87]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Continue statement
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`continue`语句'
- en: The keyword `continue` will skip the current iteration.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`continue`将跳过当前迭代。
- en: Syntax
  id: totrans-567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for the `continue` statement in JavaScript:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JavaScript中`continue`语句的语法：
- en: '[PRE88]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Example
  id: totrans-570
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider the following simple example:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下简单示例：
- en: '[PRE89]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The output will be as follows:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE90]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return statement
  id: totrans-575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`return`语句'
- en: In JavaScript, a `return` statement is used to return a value from a function.
    After returning the value, it stops the function execution. Every function and
    statement returns a value. If no return statement is provided, undefined value
    is returned instead.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`return` 语句用于从函数中返回一个值。返回值后，它停止函数执行。每个函数和语句都返回一个值。如果没有提供 `return`
    语句，则返回未定义值。
- en: Syntax
  id: totrans-577
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for the `return` statement in JavaScript:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 JavaScript 中 `return` 语句的语法：
- en: '[PRE91]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Example
  id: totrans-580
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider the following simple example showing the working of a `return` statement:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下简单示例，展示 `return` 语句的工作原理：
- en: '[PRE92]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output will be as follows:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE93]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Throw statement
  id: totrans-585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抛出语句
- en: A `throw` statement is used to create a user-defined error condition for the
    `try` and `catch` block. These errors are also called **exceptions**. We can create
    our own exceptions in a code script.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw` 语句用于为 `try` 和 `catch` 块创建用户定义的错误条件。这些错误也称为 **异常**。我们可以在代码脚本中创建自己的异常。'
- en: Syntax
  id: totrans-587
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'Here is the syntax for the `throw` statement in JavaScript:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 JavaScript 中 `throw` 语句的语法：
- en: '[PRE94]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Example
  id: totrans-590
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Let''s take a look at the following code snippet:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段：
- en: '[PRE95]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Try catch finally statement
  id: totrans-593
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Try catch finally 语句
- en: In a `try` statement we write the code that needs error testing when it is being
    executed. In a `catch` block, you write code to handle errors occurring in the
    `try` block. When you write code inside the `try` block, you must write a `catch`
    block to handle any error that might occur in the the `try` block. The `finally`
    statement executes when the `try` and `catch` statements are executed successfully.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `try` 语句中，我们编写在执行时需要错误测试的代码。在 `catch` 块中，你编写处理 `try` 块中发生的错误的代码。当你将代码写入 `try`
    块中时，你必须编写一个 `catch` 块来处理 `try` 块中可能发生的任何错误。当 `try` 和 `catch` 语句成功执行时，`finally`
    语句执行。
- en: Syntax
  id: totrans-595
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语法
- en: 'The syntax for a `try`, `catch`, and `finally` block is as shown in the following
    code snippet:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`、`catch` 和 `finally` 块的语法如下所示：'
- en: '[PRE96]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Arrays
  id: totrans-598
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Arrays are use to store ordered collections of data. If we have multiple items,
    then we can use arrays to store these values. Array prototype methods are used
    to perform mutation operations in JavaScript. There is no fixed length of an array.
    An array can contain multiple value types and the number of items can be mutated
    at any point after initialization.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 数组用于存储有序数据集合。如果我们有多个项目，则可以使用数组来存储这些值。数组原型方法用于在 JavaScript 中执行变异操作。数组没有固定长度。数组可以包含多个值类型，并且可以在初始化后任何时刻修改项目数量。
- en: Array types
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组类型
- en: 'There are two array types in JavaScript:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中有两种数组类型：
- en: '**Nominal type**: This type of array has a unique identity.'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名义类型**：这种类型的数组具有唯一的标识。'
- en: '**Structure type**: This array type looks like an interface; it is also known
    as duck type. It uses a specific implementation of a behavior.'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构类型**：这种数组类型看起来像接口；它也被称为鸭子类型。它使用特定行为的具体实现。'
- en: Note
  id: totrans-604
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Sparse array**'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '**稀疏数组**'
- en: In programming languages, a sparse array denotes an array that has the same
    values such as `0` or `null`. There is a large number of zeroes in an array storage,
    which occurs in a sparse array. In a sparse array, indexes do not start from `0`.
    In a sparse array, lengths of the elements are less than the length of the property.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，稀疏数组表示具有相同值（如 `0` 或 `null`）的数组。在数组存储中存在大量零，这在稀疏数组中发生。在稀疏数组中，索引不从 `0`
    开始。在稀疏数组中，元素的长度小于属性的长度。
- en: 'In JavaScript, the length property is not the actual amount of elements in
    the array, it is last *index+1*. So, in case of a sparse array, this is crucial
    to deal with the blank indexes. Consider the following example:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`length` 属性不是数组中实际元素的数量，而是最后一个 *索引+1*。因此，在稀疏数组的情况下，这一点至关重要，需要处理空白索引。考虑以下示例：
- en: '[PRE97]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Array type object
  id: totrans-609
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组类型对象
- en: Some objects in JavaScript look like an array, but in reality, they are not
    arrays. They are known as **array-like** objects.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 JavaScript 对象看起来像数组，但实际上它们不是数组。它们被称为 **类似数组** 对象。
- en: 'An array-like object:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 类似数组的对象：
- en: '**Has**: This tells you the number of elements an object has'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有**：这告诉你对象有多少个元素'
- en: '**Does not have**: These are array methods such as `indexOf`, `push`, and `forEach`'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不具有**：这些是数组方法，例如 `indexOf`、`push` 和 `forEach`'
- en: Note
  id: totrans-614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Strings as an array**'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串作为数组**'
- en: There are some strings in JavaScript that behave like an array. If we make a
    string like an array, then it will only be treated as an array. There are some
    methods in arrays such as `push()`, `reverse()`, and so on, which do not work
    on strings.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，有一些字符串表现得像数组。如果我们把一个字符串当作数组，那么它就只能被当作数组。数组中有些方法，如`push()`、`reverse()`等，在字符串上不起作用。
- en: Creating arrays
  id: totrans-617
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组
- en: 'In JavaScript, there are two ways to create arrays:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，有两种创建数组的方法：
- en: Using an array initializer
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组初始化器
- en: Using an array constructor
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组构造函数
- en: You can use either of these two methods.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这两种方法中的任何一种。
- en: 'We have a comma-separated string in brackets in an array initializer; for example:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 数组初始化器中有一个用方括号括起来的逗号分隔的字符串；例如：
- en: '[PRE98]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'In JavaScript, you can also create an array using an array constructor using
    a new keyword, which creates an array and assigns values to it; for example:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，您也可以使用数组构造函数通过使用new关键字来创建一个数组，这会创建一个数组并将值赋给它；例如：
- en: '[PRE99]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Tip
  id: totrans-626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The array initializer method is a quick and good way of initializing an array
    because its execution speed is higher than that of the constructor method. If
    you do not pass any argument in an array constructor, then it will set its length
    to zero.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 数组初始化器方法是一种快速且好的初始化数组的方法，因为它的执行速度比构造函数方法要高。如果您在数组构造函数中不传递任何参数，那么它将设置其长度为零。
- en: Array initializer
  id: totrans-628
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组初始化器
- en: Arrays are used to store ordered collections of data in a single variable. It
    means that when you want to store a list of items then you should use an array.
    Before using an array in your program you need to first initialize it.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 数组用于在单个变量中存储有序数据集合。这意味着当您想要存储一个项目列表时，应该使用数组。在您的程序中使用数组之前，您需要首先初始化它。
- en: 'In an array initializer, there are comma separated lists of items stored in
    a variable, for example:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组初始化器中，有一个变量中存储的项目逗号分隔列表，例如：
- en: '[PRE100]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Tip
  id: totrans-632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When you initialize an array using an array initializer, the type does not have
    to be the same for all items. Also, arrays can have zero length.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用数组初始化器初始化数组时，所有项的类型不必相同。此外，数组可以有零长度。
- en: Array constructor
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组构造函数
- en: 'There are three different ways in which you can use an array constructor. Their
    syntax is as follows:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用数组构造函数的以下三种不同方式。它们的语法如下：
- en: '[PRE101]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: If you call an array constructor without argument it will set its length to
    zero.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不带参数调用数组构造函数，它将设置其长度为零。
- en: If an array constructor has only one argument then this argument will initialize
    its new length.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组构造函数只有一个参数，则此参数将初始化其新长度。
- en: If you call an array with two or more elements, the the argument will initialize
    an array with size equal to the number of parameters.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调用一个包含两个或更多元素的数组，参数将初始化一个大小等于参数数量的数组。
- en: Reading and writing array elements
  id: totrans-640
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取和写入数组元素
- en: To read and write elements from an array we use square brackets `[]`. It works
    as accessing object properties. Inside the brackets there should be a non-negative
    number. The syntax for both reading and writing in an array is the same. Values
    are also indexed in an array. You read values index by index. The array's reference
    should be on left side of bracket.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 要从数组中读取和写入元素，我们使用方括号`[]`。它就像访问对象属性一样工作。在括号内应该是一个非负数。在数组中读取和写入的语法是相同的。值也在数组中索引。您通过索引读取值。数组的引用应该在括号的左侧。
- en: 'Consider the following example:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE102]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The output of this would be as follows:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果如下：
- en: '[PRE103]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Multidimensional arrays in JavaScript
  id: totrans-646
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript中的多维数组
- en: Like other programming languages, you can also create multidimensional arrays
    in JavaScript. Their syntax is same as in other languages. In multidimensional
    arrays you create arrays within arrays of nested array loops.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言一样，您也可以在JavaScript中创建多维数组。它们的语法与其他语言相同。在多维数组中，您在嵌套数组循环中创建数组内的数组。
- en: 'You can create an array by adding more arrays for each dimension you need.
    Creating a multidimensional array is useful when you need to cover the whole storage
    with information. If most of your data is sparse, meaning if array is empty, then
    a better technique to store the information is using an associative array. Here
    is an example of creating a multidimensional array in JavaScript:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过为每个需要的维度添加更多数组来创建一个数组。当您需要用信息覆盖整个存储空间时，创建多维数组很有用。如果大部分数据是稀疏的，也就是说数组是空的，那么使用关联数组来存储信息是一种更好的技术。以下是在JavaScript中创建多维数组的示例：
- en: '[PRE104]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Properties in an array
  id: totrans-650
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组中的属性
- en: An array has a prototype, length, and a constructor as its properties.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 数组具有原型、长度和构造器作为其属性。
- en: Length
  id: totrans-652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长度
- en: In JavaScript, the array length property returns the number of elements in an
    array.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，数组长度属性返回数组中的元素数量。
- en: Returns
  id: totrans-654
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: This returns an integer value of 32 bit.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回一个 32 位整数值。
- en: Description
  id: totrans-656
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: We can also use an array length property when we want to empty an array at any
    time. When you increase the length of any array, it will not increase the number
    of elements in it. We can set or return the length of any array using the array
    length property.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在需要时使用数组长度属性来清空数组。当你增加任何数组的长度时，它不会增加其中的元素数量。我们可以使用数组长度属性设置或返回任何数组的长度。
- en: 'Consider the following example:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE105]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The output will be as follows:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE106]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Constructor
  id: totrans-662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造器
- en: An array contractor is used to initialize an array. An array can contain zero
    or more elements and has the following syntax where array elements are separated
    by a comma inside square brackets.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 数组构造器用于初始化一个数组。一个数组可以包含零个或多个元素，其语法如下，其中数组元素由方括号内的逗号分隔。
- en: '[PRE107]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Prototype
  id: totrans-665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原型
- en: All array instances inherit from `Array.prototype`. The prototype constructor
    of an array allows to add new methods and properties to the `Array()` object.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数组实例都从 `Array.prototype` 继承。数组的原型构造器允许向 `Array()` 对象添加新方法和属性。
- en: '[PRE108]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: You can find detailed information on how to make these changes at MDN ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype)).
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 MDN 上找到有关如何进行这些更改的详细信息（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype)）。
- en: Array methods
  id: totrans-669
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组方法
- en: There are several methods that can be performed on arrays to obtain different
    results. Some of these methods are defined in the following sections.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以对数组执行以获得不同的结果。其中一些方法在以下章节中定义。
- en: concat()
  id: totrans-671
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: concat()
- en: The `concat()` method performs concatenation between two arrays.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()` 方法在两个数组之间执行连接操作。'
- en: Returns
  id: totrans-673
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `concat()` method returns the concatenated array.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()` 方法返回连接后的数组。'
- en: Parameter
  id: totrans-675
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `concat()` method takes a string to concatenate with.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()` 方法接受一个要连接的字符串。'
- en: Description
  id: totrans-677
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This takes two arrays and joins them.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要两个数组并将它们连接起来。
- en: '[PRE109]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: every()
  id: totrans-680
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: every()
- en: The `every()` method tests a function for every array element.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '`every()` 方法对每个数组元素测试一个函数。'
- en: Returns
  id: totrans-682
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `every()` method returns a Boolean `true` or `false`.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '`every()` 方法返回布尔值 `true` 或 `false`。'
- en: Parameter
  id: totrans-684
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A call back function to be applied on every element of the array.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组的每个元素上应用的一个回调函数。
- en: Description
  id: totrans-686
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: If every element in an array provides the testing function, then it returns
    `true`.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中的每个元素都提供了测试函数，则它返回 `true`。
- en: '[PRE110]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: foreach()
  id: totrans-689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: foreach()
- en: The `foreach()` method executes a function passed as a parameter for every element
    of the array.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach()` 方法对数组中的每个元素执行一个作为参数传递的函数。'
- en: Returns
  id: totrans-691
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The output of each function.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数的输出。
- en: Parameter
  id: totrans-693
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A call back function to be called for every element of the array.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 一个回调函数，用于调用数组的每个元素。
- en: Description
  id: totrans-695
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `foreach()` method calls the functions of each element:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach()` 方法调用每个元素的函数：'
- en: '[PRE111]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: join()
  id: totrans-698
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: join()
- en: This joins all elements into a string.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 这将所有元素连接成一个字符串。
- en: Returns
  id: totrans-700
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A joined string.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 一个连接的字符串。
- en: Parameter
  id: totrans-702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`Null` or a separator to place between array elements.'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '`Null` 或一个分隔符，用于在数组元素之间放置。'
- en: Description
  id: totrans-704
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: It joins all elements into a string.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 它将所有元素连接成一个字符串。
- en: '[PRE112]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: pop()
  id: totrans-707
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pop()
- en: The `pop()` method removes the last element of an array, just like a stack.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop()` 方法移除数组的最后一个元素，就像一个栈。'
- en: Returns
  id: totrans-709
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `pop()` method returns a `null` parameter.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop()` 方法返回一个 `null` 参数。'
- en: Parameter
  id: totrans-711
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `pop()` method takes the `null` parameter.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop()` 方法接受 `null` 参数。'
- en: Description
  id: totrans-713
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: It removes the last element of an array, just like a stack.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 它移除数组的最后一个元素，就像一个栈。
- en: '[PRE113]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: push()
  id: totrans-716
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: push()
- en: It adds elements on the last index on an array.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 它在数组的最后一个索引上添加元素。
- en: Returns
  id: totrans-718
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: '`null`.'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Parameter
  id: totrans-720
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`null`.'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Description
  id: totrans-722
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This adds elements at the last index on an array.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 这在数组的最后一个索引上添加元素。
- en: '[PRE114]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: indexOf()
  id: totrans-725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: indexOf()
- en: The `indexOf()` method returns the first index of an array.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexOf()` 方法返回数组的第一个索引。'
- en: Returns
  id: totrans-727
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `indexOf()` method returns an index.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexOf()` 方法返回一个索引。'
- en: Parameter
  id: totrans-729
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `indexOf()` method takes an array element as a parameter.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexOf()` 方法接受一个数组元素作为参数。'
- en: Description
  id: totrans-731
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: It returns the first index of an array.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回数组的第一个索引。
- en: '[PRE115]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: lastIndexOf()
  id: totrans-734
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lastIndexOf()
- en: The `lastIndexOf()` method returns the last index at which a given element is
    found inside an array.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '`lastIndexOf()` 方法返回给定元素在数组中最后一次出现的位置索引。'
- en: Returns
  id: totrans-736
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: It returns the last index of an array.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回数组的最后一个索引。
- en: Parameter
  id: totrans-738
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: An array element.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素。
- en: Description
  id: totrans-740
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: '[PRE116]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: reverse()
  id: totrans-742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: reverse()
- en: The `reverse()` method reverses the order of all the elements in an array.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '`reverse()` 方法反转数组中所有元素的顺序。'
- en: Returns
  id: totrans-744
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The array.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 数组。
- en: Parameter
  id: totrans-746
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`null`.'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Description
  id: totrans-748
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `reverse()` method reverses the order of the elements in an array. The first
    element becomes the last element and so on.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '`reverse()` 方法反转数组中元素的顺序。第一个元素变为最后一个元素，依此类推。'
- en: '[PRE117]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: shift()
  id: totrans-751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: shift()
- en: In an array, the `shift()` method removes the very first element and returns
    that element.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中，`shift()` 方法移除并返回第一个元素。
- en: Returns
  id: totrans-753
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: '`null`.'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Parameter
  id: totrans-755
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`null`.'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Description
  id: totrans-757
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: In an array, it removes the very first element and returns the removed element.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中，它移除并返回第一个元素。
- en: '[PRE118]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: unshift()
  id: totrans-760
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: unshift()
- en: This method adds a new element at the beginning of the array and returns the
    new array length.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在数组的开头添加一个新元素，并返回新的数组长度。
- en: Returns
  id: totrans-762
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The new length of the array.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的新长度。
- en: Parameter
  id: totrans-764
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The element(s) to add in the array.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加到数组中的元素。
- en: Description
  id: totrans-766
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method adds a new element at the beginning of the array and returns the
    new array length:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在数组的开头添加一个新元素，并返回新的数组长度：
- en: '[PRE119]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: slice()
  id: totrans-769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: slice()
- en: The `slice()` method slices an array into a new array.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '`slice()` 方法将数组切片到一个新数组。'
- en: Returns
  id: totrans-771
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The new sliced array.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 新的切片数组。
- en: Parameter
  id: totrans-773
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The indices of elements to slice.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 要切片的元素索引。
- en: Description
  id: totrans-775
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method slices an array into a new array:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将数组切片到一个新数组：
- en: '[PRE120]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: splice()
  id: totrans-778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: splice()
- en: The `splice()` method is also used to add new elements to an array by removing
    existing elements.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '`splice()` 方法也通过移除现有元素来向数组中添加新元素。'
- en: Returns
  id: totrans-780
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The new spliced array.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 新的切片数组。
- en: Parameter
  id: totrans-782
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The indices of elements to remove and the elements to add.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除的元素索引和要添加的元素。
- en: Description
  id: totrans-784
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'This method is also used to add new elements to an array by removing existing
    elements:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法也通过移除现有元素来向数组中添加新元素：
- en: '[PRE121]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: sort()
  id: totrans-787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sort()
- en: This sorts an array alphabetically.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法按字母顺序对数组进行排序。
- en: Returns
  id: totrans-789
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: '`null`.'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Parameter
  id: totrans-791
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '`null`.'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '`null`。'
- en: Description
  id: totrans-793
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'Called as an array method, this sorts an array alphabetically (unicode characters)
    and will not work well with numbers:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数组方法调用，此方法按字母顺序（Unicode字符）对数组进行排序，并且与数字不兼容：
- en: '[PRE122]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: toString()
  id: totrans-796
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: toString()
- en: The `toString()` method converts the object into a string.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString()` 方法将对象转换为字符串。'
- en: Returns
  id: totrans-798
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The `toString()` method returns a `string`.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString()` 方法返回一个字符串。'
- en: Parameter
  id: totrans-800
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: The `toString()` method takes a `null` parameter.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString()` 方法接受一个 `null` 参数。'
- en: Description
  id: totrans-802
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: Converts the array object into a string with its elements separated by commas
    character.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组对象转换为以逗号分隔的字符串。
- en: '[PRE123]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: ECMA5 Array methods
  id: totrans-805
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMA5 数组方法
- en: New array methods were added into the ECMA5 script, which is also known as **arrays
    extras**. These are nine new methods. These methods perform common operations
    working with arrays. These new methods are covered in the following sections.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的数组方法被添加到 ECMA5 脚本中，也称为 **数组扩展**。这些是九个新方法。这些方法执行与数组相关的常见操作。这些新方法将在以下章节中介绍。
- en: array.prototype.map()
  id: totrans-807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.map()
- en: The `map()` method creates a new array on the result values from each iteration.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '`map()` 方法根据每次迭代的返回值创建一个新数组。'
- en: Returns
  id: totrans-809
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A modified array.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的数组。
- en: Parameters
  id: totrans-811
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数。
- en: Description
  id: totrans-813
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: It loops through an array, running a function, and creates a new array based
    on the return values from each iteration. It takes the same arguments as the `forEach()`
    method.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 它遍历数组，运行一个函数，并根据每次迭代的返回值创建一个新数组。它接受与 `forEach()` 方法相同的参数。
- en: 'Here is a simple example:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子：
- en: '[PRE124]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The roots are now as follows:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 根现在如下所示：
- en: '[PRE125]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: array.prototype.filter()
  id: totrans-819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.filter()
- en: The `filter()` function creates a new or modified array that consist of values
    that are processed by the function.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()` 函数创建一个新数组或修改后的数组，该数组包含通过函数处理的值。'
- en: Returns
  id: totrans-821
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A modified array.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的数组。
- en: Parameters
  id: totrans-823
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数。
- en: Description
  id: totrans-825
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: It creates a new array of only those elements that returned `true` to their
    callbacks.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建一个新数组，仅包含那些回调返回 `true` 的元素。
- en: 'Here is a simple example:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例：
- en: '[PRE126]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The output is as follows:'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE127]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: array.prototype.reduce()
  id: totrans-831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.reduce()
- en: The `reduce()` function simultaneously applies a function to two values of the
    array to reduce them to a single value. The direction of selection of values is
    from left to right.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce()` 函数同时将一个函数应用于数组的两个值，以将它们减少到一个单一值。值的选取方向是从左到右。'
- en: Returns
  id: totrans-833
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A modified array.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的数组。
- en: Parameters
  id: totrans-835
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 一个回调函数。
- en: Description
  id: totrans-837
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `array.prototype.reduce()` method is used to accumulate all values in an
    array to a single value by the operations performed in the callback function.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.reduce()` 方法通过在回调函数中执行的操作，将数组的所有值累积到一个单一值。'
- en: 'Here is a simple example:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例：
- en: '[PRE128]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The callbacks are executed as follows:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 回调的执行方式如下：
- en: '|   | previousValue | currentValue | index | array | return value |'
  id: totrans-842
  prefs: []
  type: TYPE_TB
  zh: '|   | previousValue | currentValue | index | array | return value |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-843
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| **First call** | `0` | `1` | `1` | `[0, 1, 2, 3, 4]` | `1` |'
  id: totrans-844
  prefs: []
  type: TYPE_TB
  zh: '| **第一次调用** | `0` | `1` | `1` | `[0, 1, 2, 3, 4]` | `1` |'
- en: '| **Second call** | `1` | `2` | `2` | `[0, 1, 2, 3, 4]` | `3` |'
  id: totrans-845
  prefs: []
  type: TYPE_TB
  zh: '| **第二次调用** | `1` | `2` | `2` | `[0, 1, 2, 3, 4]` | `3` |'
- en: '| **Third call** | `3` | `3` | `3` | `[0, 1, 2, 3, 4]` | `6` |'
  id: totrans-846
  prefs: []
  type: TYPE_TB
  zh: '| **第三次调用** | `3` | `3` | `3` | `[0, 1, 2, 3, 4]` | `6` |'
- en: '| **Fourth call** | `6` | `4` | `4` | `[0, 1, 2, 3, 4]` | `10` |'
  id: totrans-847
  prefs: []
  type: TYPE_TB
  zh: '| **第四次调用** | `6` | `4` | `4` | `[0, 1, 2, 3, 4]` | `10` |'
- en: array.prototype.forEach()
  id: totrans-848
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.forEach()
- en: The `array.prototype.forEach()` method executes a function passed as a parameter
    for every element of the array.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.forEach()` 方法对数组中的每个元素执行一个作为参数传递的函数。'
- en: Returns
  id: totrans-850
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: The output of each function.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数的输出。
- en: Parameter
  id: totrans-852
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function to be called for every element of the array.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 一个要为数组每个元素调用的回调函数。
- en: Description
  id: totrans-854
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `array.prototype.forEach()` method calls functions of each element. Here
    is a simple example:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.forEach()` 方法调用每个元素的函数。以下是一个简单的示例：'
- en: '[PRE129]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: array.prototype.indexOf()
  id: totrans-857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.indexOf()
- en: The `array.prototype.indexOf()` method returns the first index of an array.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.indexOf()` 方法返回数组的第一个索引。'
- en: Returns
  id: totrans-859
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: An index.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 一个索引。
- en: Parameter
  id: totrans-861
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: An array element.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数组元素。
- en: Description
  id: totrans-863
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `array.prototype.indexOf()` method returns the first index of an array.
    Here is a simple example:'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.indexOf()` 方法返回数组的第一个索引。以下是一个简单的示例：'
- en: '[PRE130]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: array.prototype.lastIndexOf()
  id: totrans-866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.lastIndexOf()
- en: The `array.prototype.lastIndexOf()` method returns the last index at which a
    given element is found inside an array.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.lastIndexOf()` 方法返回给定元素在数组中找到的最后一个索引。'
- en: Returns
  id: totrans-868
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: It returns the last index of an array.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回数组的最后一个索引。
- en: Parameter
  id: totrans-870
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: An array element.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数组元素。
- en: Description
  id: totrans-872
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'As stated in the preceding descriptions, the `array.prototype.lastIndexOf()`
    function will return the last index of the specified element if found within the
    array. Here is a simple example:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果数组中存在指定的元素，`array.prototype.lastIndexOf()` 函数将返回该元素的最后一个索引。以下是一个简单的示例：
- en: '[PRE131]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: array.prototype.every()
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.every()
- en: The `array.prototype.every()` method tests a function for every array element.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.every()` 方法对每个数组元素进行函数测试。'
- en: Returns
  id: totrans-877
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A Boolean `true` or `false`.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 一个布尔值 `true` 或 `false`。
- en: Parameter
  id: totrans-879
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function to be applied on every element of the array.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 一个要应用于数组每个元素的回调函数。
- en: Description
  id: totrans-881
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'If every element in an array provides the testing function, then it returns
    `true`. Here is a simple example:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中的每个元素都提供了测试函数，则返回 `true`。以下是一个简单的示例：
- en: '[PRE132]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: array.prototype.some()
  id: totrans-884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.some()
- en: This method tests if any element passes the test implemented by the provided
    function.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法测试是否有任何元素通过了由提供的函数实现的测试。
- en: Returns
  id: totrans-886
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A Boolean `True` or `False`.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 一个布尔值 `True` 或 `False`。
- en: Parameters
  id: totrans-888
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 一个回调函数。
- en: Description
  id: totrans-890
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `array.prototype.some()` method is similar to `Array.prototype.every()`,
    but here the condition is that at least one callback should return `true`.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.some()` 方法与 `Array.prototype.every()` 类似，但这里的条件是至少有一个回调应该返回
    `true`。'
- en: 'A simple example is as follows:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的示例如下：
- en: '[PRE133]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: array.prototype.reduceRight()
  id: totrans-894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: array.prototype.reduceRight()
- en: The `array.prototype.reduceRight()` method applies a function simultaneously
    against two values of the array (from right to left) so as to reduce them to a
    single value.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '`array.prototype.reduceRight()` 方法从右到左同时应用一个函数到数组的两个值（值），以便将它们减少到一个单一值。'
- en: Returns
  id: totrans-896
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 返回值
- en: A modified array.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的数组。
- en: Parameters
  id: totrans-898
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: A callback function.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 一个回调函数。
- en: Description
  id: totrans-900
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: This is exactly the same as reduce, but it starts from right and moves toward
    the left while accumulating the values.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 这与reduce操作完全相同，但它从右侧开始，向左侧移动，同时累积值。
- en: 'Here is a simple example:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子：
- en: '[PRE134]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: This returns the sum as `6`.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回总和为`6`。
