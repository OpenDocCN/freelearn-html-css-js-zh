- en: '*Chapter 4*: Learning the Major Nodes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：学习主要节点'
- en: In this chapter, you will learn about the major nodes used in Node-RED. Node-RED,
    which is an open source project, provides some major nodes by default, but it
    is possible to import and use nodes from the public library as required.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解Node-RED中使用的主要节点。Node-RED是一个开源项目，默认情况下提供了一些主要节点，但可以根据需要导入和使用来自公共库的节点。
- en: 'Node-RED has a lot of nodes. Therefore, this book is not sufficient to explain
    all of them. So, in this chapter, let''s pick up the main nodes and most commonly
    used basic nodes and learn how to use them, exploring these topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED有很多节点。因此，本书不足以解释所有这些节点。因此，在本章中，让我们挑选主要节点和最常用的基本节点，并学习如何使用它们，探索本章中的这些主题：
- en: What is a node?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是节点？
- en: How to use nodes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用节点
- en: Getting various nodes from the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从库中获取各种节点
- en: By the end of this chapter, you will have mastered how to use major nodes in
    the Node-RED flow editor.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将掌握如何在Node-RED流编辑器中使用主要节点。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To progress in this chapter, you will need the following technical requirements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中取得进展，您需要以下技术要求：
- en: Node-RED (v1.1.0 or above).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node-RED（v1.1.0或更高版本）。
- en: The code used in this chapter can be found in `Chapter04` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在[https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)的`Chapter04`文件夹中找到。
- en: What is a node?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是节点？
- en: Let's first understand what exactly a node is in Node-RED.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们了解Node-RED中的节点到底是什么。
- en: Node-RED is a tool for programming Node.js applications with **Graphical User
    Interface** (**GUI**) tools. Node-RED also serves as an environment for executing
    software (Node-RED Flow) programmed on Node-RED.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是一个使用**图形用户界面**（**GUI**）工具编程Node.js应用程序的工具。Node-RED还作为在Node-RED上编程的软件（Node-RED
    Flow）的执行环境。
- en: Normally, when programming with Node.js, the source code is written with a code
    editor or **Integrated Development Environment** (**IDE**). An executable file
    is generated by building the written source code (compiling, associating with
    dependency files, and so on).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用Node.js进行编程时，源代码是用代码编辑器或**集成开发环境**（**IDE**）编写的。通过构建编写的源代码（编译，与依赖文件关联等），生成可执行文件。
- en: Visual programming on Node-RED basically follows the same process. The difference
    is that the coding part is the act of placing the node on Node-RED instead of
    the editor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node-RED上进行可视化编程基本上遵循相同的过程。不同之处在于，编码部分是将节点放置在Node-RED上，而不是编辑器。
- en: In Node-RED, the basic processing used when programming with Node.js is provided
    by implemented parts called nodes. In normal object-oriented programming, these
    parts may often be provided as library files in the form of common parts.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node-RED中，使用Node.js编程时提供的基本处理由称为节点的实现部分提供。在正常的面向对象编程中，这些部分通常以常见部分的形式提供为库文件。
- en: Since Node-RED is a GUI-based visual programming tool, these common parts are
    more than just library files. These common parts are shaped like boxes and are
    called nodes in Node-RED. Also, except for some nodes, generally nodes can set
    the things that can be variables (arguments, parameters, and so on) as node properties
    when programming.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Node-RED是基于GUI的可视化编程工具，这些常见部分不仅仅是库文件。这些常见部分形状像盒子，在Node-RED中称为节点。此外，除了一些节点外，通常在编程时，节点可以将可以作为节点属性的变量（参数，参数等）设置为节点属性。
- en: 'In other words, since there are already programmed parts (nodes), programming
    is completed simply by placing them in the GUI. The following figure compares
    pure Node.js programming with flow creation in Node-RED:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，由于已经编程了部分（节点），因此只需将它们放置在GUI中即可完成编程。以下图比较了纯Node.js编程与在Node-RED中创建流的情况：
- en: '![Figure 4.1 – Node-RED versus Node.js programming'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – Node-RED与Node.js编程'
- en: '](img/Figure_4.1_B16353.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.1_B16353.jpg)'
- en: Figure 4.1 – Node-RED versus Node.js programming
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – Node-RED与Node.js编程
- en: Now that you understand the concepts of Node-RED and nodes, let's take a closer
    look at nodes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了Node-RED和节点的概念，让我们更仔细地看看节点。
- en: As you can see when you start Node-RED, the basic processing nodes are provided
    in the Node-RED flow editor by default. This is called a **pre-installed node**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动Node-RED时，基本处理节点默认提供在Node-RED流编辑器中。这称为**预安装节点**。
- en: 'The following are typical categories of pre-installed nodes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预安装节点的典型类别：
- en: '**Common**: This includes nodes that inject specific data into the flow, nodes
    that judge the processing status, and nodes that output logs for debugging.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见**：这包括将特定数据注入流的节点，判断处理状态的节点以及用于调试输出日志的节点。'
- en: '**Function**: This includes nodes that can write directly in JavaScript and
    HTML, nodes that convert parameter variables, and nodes that make conditional
    branches depending on the contents of those parameters.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：这包括可以直接在JavaScript和HTML中编写的节点，可以转换参数变量的节点以及根据这些参数的内容进行条件分支的节点。'
- en: '**Network**: This includes nodes that handle the protocol processing required
    for communication, such as MQTT, HTTP, and WebSockets.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：这包括处理通信所需的协议处理的节点，如MQTT，HTTP和WebSockets。'
- en: Of course, the examples given here are just a few. There are actually many more
    categories and nodes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里给出的示例只是一小部分。实际上有许多更多的类别和节点。
- en: Important note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The pre-installed nodes also depend on the Node-RED version. It''s a good idea
    to check the official documentation for information on your Node-RED version:
    [https://nodered.org/docs/](https://nodered.org/docs/).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 预安装的节点也取决于Node-RED版本。建议查看官方文档以获取有关您的Node-RED版本的信息：[https://nodered.org/docs/](https://nodered.org/docs/)。
- en: Nodes are arranged like parts on the Node-RED flow editor and can be used simply
    by connecting up the wiring. As mentioned earlier, you don't have to code it yourself,
    except for some nodes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 节点在Node-RED流程编辑器中排列像零件一样，并且可以通过简单连接电线来使用。如前所述，除了一些节点外，您不必自己编写代码。
- en: 'Basically, the flow editor has the appearance of a box and has a settings window
    inside it. In the settings window, you can set the required parameters and configurations
    for each node:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，流程编辑器看起来像一个框，里面有一个设置窗口。在设置窗口中，您可以为每个节点设置所需的参数和配置：
- en: '![Figure 4.2 – Nodes'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 - 节点'
- en: '](img/Figure_4.2_B16353.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.2_B16353.jpg)'
- en: Figure 4.2 – Nodes
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 - 节点
- en: That's all the concepts you need to know about nodes. In the next section, you
    will learn how to actually use nodes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要了解的有关节点的所有概念。在下一节中，您将学习如何实际使用节点。
- en: How to use nodes
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用节点
- en: In this section, we will learn how to use nodes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用节点。
- en: Visual programming in Node-RED is a little different from other visual programming
    tools because it uses flow-based programming. But rest assured, it's not difficult
    at all. If you actually create a few simple flows, you should be able to master
    how to use nodes in Node-RED.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node-RED中进行可视化编程与其他可视化编程工具有些不同，因为它使用基于流的编程。但请放心，这一点并不难。如果您实际创建了一些简单的流程，您应该能够掌握如何在Node-RED中使用节点。
- en: So, let's now create a sample flow using some typical preinstalled nodes. The
    environment is the same for Raspberry Pi, Windows, and macOS systems. Please use
    your favorite environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在让我们使用一些典型的预安装节点创建一个示例流程。树莓派、Windows和macOS系统的环境是相同的。请使用您喜欢的环境。
- en: Common category
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见类别
- en: Let's introduce the nodes that we'll use to make our flow. You can pick all
    of the nodes up and place them on the palette from the common category.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们介绍一下我们将用来制作流程的节点。您可以从常见类别中将所有节点放置在调色板上。
- en: 'Create a sample flow with nodes in the common category. The following four
    nodes are used:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用常见类别中的节点创建一个示例流程。使用以下四个节点：
- en: The **inject** node
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**inject**节点'
- en: The **complete** node
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**complete**节点'
- en: The **catch** node
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**catch**节点'
- en: The **debug** node
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debug**节点'
- en: 'Place and wire up the nodes as shown in the following figure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下图示放置和连接节点：
- en: '![Figure 4.3 – The flow with our common category nodes'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 - 具有常见类别节点的流程'
- en: '](img/Figure_4.3_B16353.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.3_B16353.jpg)'
- en: Figure 4.3 – The flow with our common category nodes
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 - 具有常见类别节点的流程
- en: 'The data in the **inject** node is simple JSON data here. Double-click the
    placed **inject** node to open the settings panel and set the JSON data. Please
    refer to the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里**inject**节点中的数据是简单的JSON数据。双击放置的**inject**节点以打开设置面板并设置JSON数据。请参考以下内容：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can change the JSON data in the **inject** node for what you want to send.
    Also, you should set the properties for the **complete** node. Open the settings
    panel and set a node to watch the status.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改**inject**节点中的JSON数据以发送您想要发送的数据。此外，您应该设置**complete**节点的属性。打开设置面板并设置一个节点来观察状态。
- en: 'Set each node''s parameters as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个节点的参数设置如下：
- en: 'The `msg.payload` with the following JSON:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下JSON创建`msg.payload`：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can set any value here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里设置任何值：
- en: '![Figure 4.4 – An inject node for inserting data'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 - 用于插入数据的注入节点'
- en: '](img/Figure_4.4_B16353.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.4_B16353.jpg)'
- en: Figure 4.4 – An inject node for inserting data
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 - 用于插入数据的注入节点
- en: 'The **complete** node:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**complete**节点：'
- en: 'Check the first option of the **Properties** tab to watch the status of the
    **inject** node:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 检查**属性**选项卡的第一个选项以观察**inject**节点的状态：
- en: '![Figure 4.5 – A complete node for watching the status'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.5 - 用于观察状态的完整节点'
- en: '](img/Figure_4.5_B16353.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.5_B16353.jpg)'
- en: Figure 4.5 – A complete node for watching the status
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 - 用于观察状态的完整节点
- en: No properties of other nodes need to be changed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 其他节点的属性无需更改。
- en: After the setting changes, you need to deploy and click the button of the **inject**
    node. After that, you can see the JSON data in the right-hand panel of the **debug**
    tab.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 设置更改后，您需要部署并单击**inject**节点的按钮。之后，您可以在**debug**选项卡的右侧面板中看到JSON数据。
- en: You can get the flow definition from the book's GitHub repo at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书的GitHub存储库中获取流程定义[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json)。
- en: Function category
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数类别
- en: In this section, we will learn how to use some major nodes from the function
    category, and will make a flow with these nodes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用函数类别中的一些主要节点，并将使用这些节点制作一个流程。
- en: 'Create a sample flow using the nodes in the function category. Here, we will
    use the following six nodes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数类别中的节点创建一个示例流程。在这里，我们将使用以下六个节点：
- en: The **inject** node
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**inject**节点'
- en: The **function** node
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**function**节点'
- en: The **switch** node
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**switch**节点'
- en: The **change** node
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**change**节点'
- en: The **template** node
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**template**节点'
- en: The **debug** node
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debug**节点'
- en: 'Place and wire the nodes as shown in the following figure:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下图示放置和连接节点：
- en: '![Figure 4.6 – The flow with function category nodes'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 - 具有函数类别节点的流程'
- en: '](img/Figure_4.6_B16353.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.6_B16353.jpg)'
- en: Figure 4.6 – The flow with function category nodes
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 - 具有函数类别节点的流程
- en: 'Please follow these steps to make the flow:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤制作流程：
- en: Place the **inject** node and **debug** node on the palette. These two nodes
    can be used with their default parameters. No change of settings is required here.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**inject**节点和**debug**节点放置在调色板上。这两个节点可以使用其默认参数。这里不需要更改设置。
- en: Place a **function** node on the palette.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调色板上放置一个**function**节点。
- en: 'Open the settings panel of the **function** node and enter the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**function**节点的设置面板，并输入以下代码：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After coding, click on **Done** to save the settings:![Figure 4.7 – Function
    node settings
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码后，点击**Done**保存设置：![图4.7 - 函数节点设置
- en: '](img/Figure_4.7_B16353.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.7_B16353.jpg)'
- en: Figure 4.7 – Function node settings
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7–功能节点设置
- en: Place the `6`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置`6`
- en: The `5`
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`5`'
- en: 'This should look as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 应该如下所示：
- en: '![Figure 4.8 – The switch node settings'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.8–开关节点设置'
- en: '](img/Figure_4.8_B16353.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.8_B16353.jpg)'
- en: Figure 4.8 – The switch node settings
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8–开关节点设置
- en: If the input parameter is `5` or less, the output route is `1`, and if the input
    parameter is `6` or more, the output route is `2`. This means that the next node
    depends on the number of input parameters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入参数为`5`或更少，则输出路由为`1`，如果输入参数为`6`或更多，则输出路由为`2`。这意味着下一个节点取决于输入参数的数量。
- en: Place two **template** nodes on the palette.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调色板上放置两个**template**节点。
- en: The previous function was the **switch** node, so the data splits depending
    on the result of the output.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的功能是**switch**节点，因此数据根据输出结果而分割。
- en: 'Open the settings panel of each `1` of the **switch** node:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**switch**节点的每个`1`的设置面板：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The **template** node will look something like the following screenshot once
    we add the preceding code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们添加了前面的代码，**template**节点将看起来像以下屏幕截图：
- en: '![Figure 4.9 – The first template node settings'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.9–第一个模板节点设置'
- en: '](img/Figure_4.9_B16353.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.9_B16353.jpg)'
- en: Figure 4.9 – The first template node settings
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9–第一个模板节点设置
- en: 'Enter the following code for the second `2` of the **switch** node:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入第二个`2`的**switch**节点的以下代码：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will look something like the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它将看起来像以下屏幕截图：
- en: '![Figure 4.10 – The second template node settings'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.10–第二个模板节点设置'
- en: '](img/Figure_4.10_B16353.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B16353.jpg)'
- en: Figure 4.10 – The second template node settings
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10–第二个模板节点设置
- en: Place the **change** node on the palette, open the settings panel of the **change**
    node, and look at the settings box below **Rules**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**change**节点放置在调色板上，打开**change**节点的设置面板，并查看**规则**下方的设置框。
- en: Select **string** from the drop-down menu in the box next to **to** and enter
    the desired character string in the text box next to this. Here, it says **It
    has been changed to string data!**. Please refer to the following screenshot:![Figure
    4.11 – The change node settings
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**to**旁边的下拉菜单中选择**string**，并在旁边的文本框中输入所需的字符串。这里写着**已更改为字符串数据！**。请参考以下屏幕截图：![图4.11–更改节点设置
- en: '](img/Figure_4.11_B16353.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B16353.jpg)'
- en: Figure 4.11 – The change node settings
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11–更改节点设置
- en: After changing the settings, you need to deploy and click the button of the
    **inject** node.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改设置后，您需要部署并单击**inject**节点的按钮。
- en: 'Once you do this, you can see the data in the debug tab in the right-hand panel,
    as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您这样做，您可以在右侧面板的调试选项卡中看到数据，如下所示：
- en: '![Figure 4.12 – Showing the results in the debug tab'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.12–在调试选项卡中显示结果'
- en: '](img/Figure_4.12_B16353.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B16353.jpg)'
- en: Figure 4.12 – Showing the results in the debug tab
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12–在调试选项卡中显示结果
- en: The first debug message is the default **inject** node value as a timestamp.
    The second one is the debug message of the **debug** node placed after the **change**
    node. The last one depends on the random number and is formatted by the **template**
    node.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个调试消息是默认的**inject**节点值作为时间戳。第二个是**change**节点后放置的**debug**节点的调试消息。最后一个取决于随机数，并由**template**节点格式化。
- en: You can get the flow definition from the book's GitHub repo at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从书的GitHub存储库中获取流程定义：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json)。
- en: Next, let's learn about nodes that are not provided by default.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解一些默认未提供的节点。
- en: Getting several nodes from the library
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从库中获取几个节点
- en: 'You can get several more attractive nodes that have been developed by Node-RED
    contributors and install them in your Node-RED flow editor. You can find new nodes,
    share your flows, and see what other people have done with Node-RED. In this section,
    we will learn how to get several other nodes from the Node-RED library. Let''s
    first access the Node-RED library site: [https://flows.nodered.org/](https://flows.nodered.org/).
    In the following screenshot, you can see how the Node-RED library looks:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获得由Node-RED贡献者开发的几个更有吸引力的节点，并将它们安装在您的Node-RED流编辑器中。您可以找到新节点，分享您的流程，并查看其他人如何使用Node-RED。在本节中，我们将学习如何从Node-RED库中获取几个其他节点。让我们首先访问Node-RED库站点：[https://flows.nodered.org/](https://flows.nodered.org/)。在以下屏幕截图中，您可以看到Node-RED库的外观：
- en: '![Figure 4.13 – Node-RED Library'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.13–Node-RED库'
- en: '](img/Figure_4.13_B16353.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B16353.jpg)'
- en: Figure 4.13 – Node-RED Library
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13–Node-RED库
- en: 'It''s easy to use this library in your own Node-RED environment''s flow editor.
    Let''s see how to install a node from the library:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的Node-RED环境的流编辑器中使用此库非常容易。让我们看看如何从库中安装节点：
- en: Select **Manage palette** from the sidebar menu. You will see the **User Settings**
    panel open with the **Palette** tab selected.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从侧边栏菜单中选择**管理调色板**。您将看到**用户设置**面板打开，并选择了**调色板**选项卡。
- en: Type `watson` in the search field, or the name of any other node you want to
    use. If you find the node you want, click the **Install** button:![Figure 4.14
    – Opening the User Settings panel and finding the node you want to use
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索字段中键入`watson`，或者您想要使用的任何其他节点的名称。如果找到想要的节点，请单击**安装**按钮：![图4.14–打开用户设置面板并找到要使用的节点
- en: '](img/Figure_4.14_B16353.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.14_B16353.jpg)'
- en: Figure 4.14 – Opening the User Settings panel and finding the node you want
    to use
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14–打开用户设置面板并找到要使用的节点
- en: After clicking on the **Install** button, a pop-up window will appear, on which
    you will need to click on **Install** once again.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**安装**按钮后，将出现一个弹出窗口，您需要再次单击**安装**。
- en: Once you do this and the installation has completed, you will get a pop-up message
    saying **Nodes added to palette**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您这样做并且安装完成，您将收到一个弹出消息，上面写着**节点已添加到调色板**。
- en: 'That''s all! You can see all the nodes you have installed in your palette as
    shown in the following figure:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你可以在调色板中看到你安装的所有节点，如下图所示：
- en: '![Figure 4.15 – Nodes you have installed are added to your palette'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.15 - 你安装的节点被添加到你的调色板中'
- en: '](img/Figure_4.15_B16353.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.15_B16353.jpg)'
- en: Figure 4.15 – Nodes you have installed are added to your palette
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 - 你安装的节点被添加到你的调色板中
- en: Tip
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can search for useful nodes on the Node-RED Library website. It''s possible
    to search by keywords, and sort the results in terms of most recently added, number
    of downloads, and ratings. I recommend sorting by number of downloads first because
    nodes that have been downloaded by lots of developers are likely to be very useful:
    [https://flows.nodered.org/search?type=node&sort=downloads](https://flows.nodered.org/search?type=node&sort=downloads).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Node-RED库网站上搜索有用的节点。可以通过关键词搜索，并按照最近添加、下载次数和评分进行排序。我建议首先按下载次数排序，因为被许多开发者下载的节点很可能非常有用：[https://flows.nodered.org/search?type=node&sort=downloads](https://flows.nodered.org/search?type=node&sort=downloads)。
- en: Now you have become a great Node-RED user and have mastered how to use the Node-RED
    flow editor to make some flows (applications).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成为了一个优秀的Node-RED用户，并且掌握了如何使用Node-RED流编辑器制作一些流程（应用程序）。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've learned how to use each major node in the Node-RED flow
    editor. You have successfully made your Node-RED flows! The flow steps you've
    created here are most of the steps you will need to do to create various flows
    in the future.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在Node-RED流编辑器中使用每个主要节点。你已经成功地制作了你的Node-RED流程！你在这里创建的流程步骤是你将来需要创建各种流程的大部分步骤。
- en: The important point learned in this chapter is that each node has its own unique
    features. By combining these like a puzzle, we can create an application similar
    to one made through regular programming just by creating a flow.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本章学到的重要一点是，每个节点都有自己独特的特性。通过像拼图一样组合它们，我们可以创建一个类似于通过常规编程创建的应用程序的流程。
- en: In the next chapter, let's create a more practical sample flow (application)
    for IoT edge devices.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们为物联网边缘设备创建一个更实用的示例流程（应用程序）。
