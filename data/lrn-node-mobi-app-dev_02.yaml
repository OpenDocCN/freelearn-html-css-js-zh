- en: Chapter 2. Configuring Persistence with MongoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 配置MongoDB持久化
- en: In this chapter, we will show you how to configure the persistence layer of
    your app, which is responsible for the provision of the central data storage and
    retrieval services. For this, we will use MongoDB, the widely popular NoSQL database,
    and its associated driver and interface for Node.js.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何配置应用程序的持久化层，该层负责提供中央数据存储和检索服务。为此，我们将使用MongoDB，这个广受欢迎的NoSQL数据库，以及其针对Node.js的驱动程序和接口。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Configuring documents, collections, and databases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文档、集合和数据库
- en: Connecting to MongoDB using a product order database as an example
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用产品订单数据库连接到MongoDB作为示例
- en: Creating relations between documents
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档之间的关系
- en: Querying data and displaying results in the command line
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询数据并在命令行中显示结果
- en: Learning outcomes of MongoDB
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB的学习成果
- en: After reading this chapter, you will have a solid understanding of the basics
    of how MongoDB stores data. You will also learn how to run queries against a MongoDB
    instance in order to store, manipulate, and retrieve data on it. You will also
    understand how to use the Node.js MongoDB driver for the same ends in order to
    manipulate your data directly from Node.js.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您将对MongoDB存储数据的基础有扎实的理解。您还将学会如何对MongoDB实例运行查询，以便在其中存储、操作和检索数据。您还将了解如何使用Node.js
    MongoDB驱动程序来直接从Node.js操作数据。
- en: Finally, you will have a healthy dose of refreshment of memory as regards the
    internal workings of Node.js in order to help you understand how it interconnects
    with MongoDB.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将对Node.js的内部工作方式有一个健康的回顾，以帮助您理解它如何与MongoDB相互连接。
- en: An introduction to MongoDB
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB简介
- en: Let's start with a short but informative tour of MongoDB, which will give you
    the essential knowledge that you need in order to effectively work with it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简短但信息丰富的MongoDB导览开始，这将为您提供必要的知识，以便有效地使用它。
- en: First, let's get a good grasp of how data is organized in a MongoDB instance.
    This will give us the foundation that is required to understand how storage and
    retrieval operations work later on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们深入了解一下数据在MongoDB实例中是如何组织的。这将为我们提供后续理解存储和检索操作的基础。
- en: Documents
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: 'MongoDB is a NoSQL **Database Management System** (**DBMS**). This means that
    it eschews the traditional table-based data storage model used by SQL-oriented
    systems such as MySQL, Oracle, and Microsoft SQL Server. Instead, it stores data
    as documents, which are data structures that are almost identical to standard
    JSON objects. For example, a MongoDB document can look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是一个NoSQL数据库管理系统（DBMS）。这意味着它摒弃了SQL导向系统（如MySQL、Oracle和Microsoft SQL Server）使用的传统基于表的数据存储模型。相反，它将数据存储为文档，这些数据结构几乎与标准的JSON对象完全相同。例如，MongoDB文档可以如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This document represents a pharmacy, with some basic information such as the
    name, address, and national license number. If you are familiar with JSON, you
    will feel right at home; this is the standard object notation. However, note an
    unusual datatype in here—the `ObjectId`. This is a built-in datatype in MongoDB,
    and it is the default method that is used to uniquely identify a single document.
    Every single document you store in a MongoDB database is guaranteed to have a
    unique `_id` member with respect to that database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文档代表了一家药店，包括一些基本信息，如名称、地址和国家许可证号。如果您熟悉JSON，您会感到非常熟悉；这是标准的对象表示法。但是，请注意这里的一个不寻常的数据类型——`ObjectId`。这是MongoDB中的内置数据类型，它是用于唯一标识单个文档的默认方法。您在MongoDB数据库中存储的每个文档都保证具有相对于该数据库的唯一`_id`成员。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are familiar with SQL, you may be tempted to think about it as a column
    ID. Don't! An `_id` uniquely identifies a document in the entire database, whereas
    an SQL column ID only uniquely identifies a row in a table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉SQL，您可能会倾向于将其视为列ID。但是！`_id`在整个数据库中唯一标识一个文档，而SQL列ID仅在表中唯一标识一行。
- en: Collections
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: Even though you can uniquely identify a document by its `_id`, life would be
    a lot simpler if we could somehow organize documents according to some common
    characteristics. This is where the concept of a collection comes into play. Simply
    put, a collection is nothing more than a group of documents that exist in a common
    folder. For example, we can have a collection named `Pharmacies`, which will store
    documents like our preceding example.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以通过其`_id`唯一标识一个文档，但如果我们能以某种方式根据一些共同特征组织文档，生活将会简单得多。这就是集合概念发挥作用的地方。简单地说，集合只是存在于一个共同文件夹中的一组文档。例如，我们可以有一个名为“药店”的集合，其中存储类似我们之前示例的文档。
- en: If you are used to SQL, you may instinctively feel that the documents in the
    same collection must somehow have the same structure, just like rows in an SQL
    table do. Surprisingly, this is not even remotely true. Collections only group
    documents; they do not impose any structural demands on them (apart from the need
    to have an `_id`, but this holds for all the documents and has nothing to do with
    a particular collection). This means that in the collection that we store our
    pharmacy-related data in, we may also store documents that describe fruit, people,
    cars, or movies. Whether we should do so is left entirely up to the programmer.
    This great freedom of structure is one of the most powerful aspects of MongoDB
    and a key factor that sets it apart from the more traditional DBMS.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您习惯于SQL，您可能本能地认为同一集合中的文档必须以某种方式具有相同的结构，就像SQL表中的行一样。令人惊讶的是，这甚至远非真实。集合只是对文档进行分组；它们不对其施加任何结构上的要求（除了需要有一个`_id`，但这适用于所有文档，与特定集合无关）。这意味着在我们存储药店相关数据的集合中，我们也可以存储描述水果、人、汽车或电影的文档。是否应该这样做完全取决于程序员。这种结构的自由度是MongoDB最强大的方面之一，也是它与传统DBMS的关键因素之一。
- en: Databases
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: We now know that MongoDB stores data as documents in collections. The last storage
    concept that we need to mention is the database itself. Simply put, a database
    in MongoDB is a top-level organizational structure, which holds a group of collections
    along with information about users who may access the database, security settings,
    optimizations, and other configuration options. A single MongoDB instance can
    manage as many databases as server resources will allow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道MongoDB将数据存储为集合中的文档。我们需要提到的最后一个存储概念就是数据库本身。简而言之，MongoDB中的数据库是一个顶层的组织结构，其中包含一组集合以及有关可以访问数据库的用户、安全设置、优化和其他配置选项的信息。单个MongoDB实例可以管理尽可能多的数据库，只要服务器资源允许。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is easy to be misled into thinking that MongoDB itself is the database. Rather,
    MongoDB is a DBMS, which can manage an arbitrary number of databases.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易被误导以为MongoDB本身就是数据库。相反，MongoDB是一个DBMS，可以管理任意数量的数据库。
- en: An example – a product order database
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个示例 - 产品订单数据库
- en: Let's put what we have learned so far into practice and construct a simple MongoDB
    database that contains data about products, customers, and the orders that the
    customers have made for specific products. If you are accustomed to other DBMS
    such as MySQL, you may be surprised to see how simple and intuitive the process
    is.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将迄今为止学到的东西付诸实践，并构建一个包含有关产品、客户和客户为特定产品下的订单数据的简单MongoDB数据库。如果您习惯于其他DBMS，如MySQL，您可能会惊讶地发现这个过程是多么简单和直观。
- en: Connecting to MongoDB
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到MongoDB
- en: In order to be able to interact with a MongoDB instance, we first need to be
    sure that our server is running it. Then, we can access it through the Mongo shell
    application. In [Chapter 1](ch01.html "Chapter 1. Setting Up Your Workspace"),
    *Setting Up Your Workspace*, we covered in some detail how to install and get
    MongoDB running on your specific operating system. You should go through these
    steps if you have not done so already. Once you have verified that MongoDB is
    running, open the MongoDB shell for your operating system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够与MongoDB实例进行交互，我们首先需要确保我们的服务器正在运行它。然后，我们可以通过Mongo shell应用程序访问它。在[第1章](ch01.html
    "第1章。设置您的工作空间")*设置您的工作空间*中，我们详细介绍了如何在特定操作系统上安装和运行MongoDB。如果您还没有这样做，您应该按照这些步骤进行。一旦您验证了MongoDB正在运行，打开适用于您的操作系统的MongoDB
    shell。
- en: Linux and Mac OS X
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux和Mac OS X
- en: 'Start a console and run the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启动控制台并运行以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Windows
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'Start your command prompt and run the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 启动命令提示符并运行以下命令：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will see a prompt starting with the `>` character. From here, we can issue
    commands to MongoDB interactively and read the resulting output.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个以`>`字符开头的提示符。从这里，我们可以与MongoDB交互地发出命令并阅读生成的输出。
- en: Creating a database
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: 'Let''s start by defining the database that we are going to work with. In your
    shell, execute the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义我们要使用的数据库。在您的shell中，执行以下操作：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will ask MongoDB to switch to a new database, called `OrderBase`, that
    we wish to run the commands against. The response will be as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求MongoDB切换到一个名为`OrderBase`的新数据库，我们希望对其运行命令。响应将如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But wait, how can we switch to a database that does not exist yet? MongoDB flexibility
    to the rescue! When you tell MongoDB to use a database, it will create that database
    for you automatically before switching to it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们如何切换到尚不存在的数据库？MongoDB的灵活性来拯救！当您告诉MongoDB使用数据库时，它将在切换到该数据库之前自动为您创建该数据库。
- en: Creating our collections
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的集合
- en: 'Now that we have created a database, let''s populate it with some collections
    by performing the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个数据库，让我们通过以下步骤填充一些集合：
- en: 'Run the following to create a collection for `Products`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令为`Products`创建一个集合：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'MongoDB will respond with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB将以以下方式做出响应：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code indicates that the command was executed successfully. Note
    that the response is returned to us in the JSON format.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码表明命令已成功执行。请注意，响应以JSON格式返回给我们。
- en: 'Let''s pause for a minute and break down the preceding command so that we understand
    what we just did:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们停下来一分钟，分解一下前面的命令，以便理解我们刚刚做了什么：
- en: The `db` is a JavaScript object that represents the currently selected database.
    In our case, it is `OrderBase`.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`是一个JavaScript对象，表示当前选择的数据库。在我们的案例中，它是`OrderBase`。'
- en: The `createCollection('Products')` function is one of the many member methods
    of `db`. Needless to say, it creates a new collection and adds it to `db`. Its
    parameter, a string, is the name of the new collection.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createCollection(''Products'')`函数是`db`的许多成员方法之一。不用说，它会创建一个新的集合并将其添加到`db`中。它的参数是一个字符串，是新集合的名称。'
- en: In other words, working with MongoDB is actually a matter of issuing commands
    in pure JavaScript. Not only that, but the data itself and the responses to the
    commands are encoded as JSON! It's obvious right away why MongoDB makes a perfect,
    seamless fit for JavaScript projects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，使用MongoDB实际上是在纯JavaScript中发出命令的问题。不仅如此，数据本身和对命令的响应都被编码为JSON！很明显，MongoDB为JavaScript项目提供了完美无缝的适配。
- en: 'Let''s create two other collections as well to store our orders while we are
    at it:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也创建另外两个集合来存储我们的订单：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will get the same **ok** responses as before.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到与之前相同的**ok**响应。
- en: 'Now, let''s add some products to our `Product` collection. In our case, let''s
    say that a product has the following defining characteristics:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们向我们的`Product`集合添加一些产品。在我们的案例中，让我们假设一个产品具有以下定义特征：
- en: A name of the string type
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串类型的名称
- en: A price of the float type
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点类型的价格
- en: 'We can represent this as a simple JSON object, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其表示为一个简单的JSON对象，如下所示：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inserting name and price into the `Products` collection is equally simple:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称和价格插入`Products`集合同样简单：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The response will be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding result contains a `WriteResult` object, giving details about the
    outcome of a write operation against the MongoDB instance. This particular `WriteResult`
    instance tells us that the write was successful (as no error was returned), and
    that we inserted a total of one new document.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的结果包含一个`WriteResult`对象，提供了针对MongoDB实例的写操作结果的详细信息。这个特定的`WriteResult`实例告诉我们写入成功了（因为没有返回错误），并且我们插入了一个新文档。
- en: 'Again, let''s take a closer look at the command that we just issued:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，让我们仔细看一下我们刚刚发出的命令：
- en: The `db` is still the database that we are operating on, which is `OrderBase`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`仍然是我们正在操作的数据库，即`OrderBase`。'
- en: '`Products` is our products collection that belongs to `db`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Products`是我们的产品集合，属于`db`。'
- en: The `insert()`method belongs to the products collection (note that even collections
    are represented as plain JavaScript objects with properties and methods). It takes
    a JSON object, such as the one that we defined in the preceding code, and inserts
    it into the collection as a new document.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert()`方法属于产品集合（请注意，甚至集合都表示为带有属性和方法的普通JavaScript对象）。它接受一个JSON对象，比如我们在前面的代码中定义的对象，并将其插入到集合中作为新文档。'
- en: Now that one of our collections actually contains a document, we can ask MongoDB
    to tell us what is in it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集合中实际包含一个文档，我们可以要求MongoDB告诉我们其中包含什么。
- en: 'Issue the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出以下命令：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `find()`method tells MongoDB to look up in the documents from the associated
    collection. If you pass no parameters to it (an empty find), it will return all
    the documents in the collection. Fortunately for us, we do not have enough documents
    (yet) to cause too much screen-scrolling from doing so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法告诉MongoDB在关联集合的文档中查找。如果您不向其传递任何参数（空查找），它将返回集合中的所有文档。对我们来说，幸运的是，我们还没有足够的文档（尚未）导致屏幕滚动太多：'
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the same apple that we inserted earlier...or is it? Note that MongoDB
    created an `ObjectId` instance for it and automatically added it to the objects
    members. This will always be done (unless you specify a manual `_id`), since all
    the documents in a MongoDB database are required to have their own unique `_id`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前插入的同一个苹果...还是吗？请注意，MongoDB为其创建了一个`ObjectId`实例，并自动将其添加到对象成员中。这将始终执行（除非您指定手动`_id`），因为MongoDB数据库中的所有文档都需要具有自己独特的`_id`。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are running this example on your own machine, you will quickly note that
    the `_id` values for your objects will differ from the ones seen here since the
    IDs are randomly generated at the time of insertion.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在自己的机器上运行此示例，您会很快注意到您的对象的`_id`值与此处看到的值不同，因为ID是在插入时随机生成的。
- en: 'Let''s go ahead and insert two more products. However, rather than executing
    one `insert` statement for each of them, we can instead perform a bulk insertion
    this time by passing all the objects that we want to insert in a JSON array, as
    follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续插入两个产品。但是，与其为它们中的每一个执行一个`insert`语句，这次我们可以通过传递我们想要插入的所有对象的JSON数组来执行批量插入，如下所示：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The response will be as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将如下所示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This response, a `BulkWriteResult` method, is clearly a lot more complex than
    an ordinary `WriteResult`. We do not need to concern ourselves with what its properties
    mean just yet. It is enough that we can read from it that two documents were written
    to the database (`"nInserted" : 2`).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '这个响应，一个`BulkWriteResult`方法，显然比普通的`WriteResult`复杂得多。我们暂时不需要关心它的属性意味着什么。我们只需要从中读取到两个文档被写入数据库（`"nInserted"
    : 2`）。'
- en: 'Let''s issue another `find()` method to make sure that our database contains
    what we expect:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再发出一个`find()`方法，以确保我们的数据库包含我们期望的内容：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s wrap up by adding some customers as well. We will add our orders
    a bit later:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过添加一些客户来结束。我们稍后会添加我们的订单：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, verify that we now have customers to work with by executing the following
    command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过执行以下命令验证我们现在有客户可以使用：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The response will be as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将如下所示：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Creating relations between documents
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文档之间的关系
- en: We now know how to create documents in the collections of a database. However,
    in real life, it is usually never enough to simply have standalone documents.
    We will also want to establish some kind of relations between the documents.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何在数据库的集合中创建文档。然而，在现实生活中，通常仅仅拥有独立的文档是远远不够的。我们还希望在文档之间建立某种关系。
- en: For example, in our database, we store information about customers and products,
    but we also want to store information about orders, which essentially are bills
    of sale stating that customer *X* has ordered product *Y*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的数据库中，我们存储有关客户和产品的信息，但我们还希望存储有关订单的信息，这些订单本质上是说明客户*X*已经订购产品*Y*的销售单据。
- en: 'Let''s say that *Jane* wants to order an *Pear*. To achieve this, we could
    let our orders look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设*Jane*想要订购一个*梨*。为了实现这一点，我们的订单可以看起来像这样：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, the disadvantages of this become clear immediately. It leads to massive
    data bloating, since the same customer or product can occur in several orders.
    Hence, its data will need to be repeated in each of the orders. It also makes
    maintenance a nightmare. If we want to update, say, the price of a product, we
    need to comb through the database for every single instance where that product
    appears and make the change.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的缺点立即变得清晰。它会导致数据膨胀，因为同一个客户或产品可能出现在多个订单中。因此，它的数据将需要在每个订单中重复。这也使得维护变得一团糟。如果我们想要更新，比如说，产品的价格，我们需要在数据库中搜索出该产品出现的每一个实例并进行更改。
- en: A much better approach, as recommended by the MongoDB developers, is to use
    manual references. In this approach, we only store the `_id` of the document that
    we wish to refer to rather than the full document.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为MongoDB开发人员建议的更好的方法是使用手动引用。在这种方法中，我们只存储我们希望引用的文档的`_id`，而不是完整的文档。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are alternative methods built into MongoDB, but generally, they deal with
    corner cases and are not optimal for general use. Throughout this book, we will
    only use the method described here.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB内置了替代方法，但通常它们处理边缘情况并不适用于一般用途。在本书中，我们只会使用这里描述的方法。
- en: 'We then let the application accessing the database retrieve information about
    the other document(s), which are referred to as needed. Going back to our order
    example, this means that the final order document will instead look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让访问数据库的应用程序检索所需的其他文档的信息。回到我们的订单示例，这意味着最终订单文档将如下所示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that we appended `Id` to the property names in the preceding code. This
    is a normal convention when dealing with references to other documents, and it
    is highly recommended that you follow it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码中，我们在属性名称后面添加了`Id`。这是处理对其他文档的引用时的正常约定，强烈建议你遵循它。
- en: 'As we have come to expect from MongoDB by now, inserting this new document
    is no harder than the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在已经习惯的那样，插入这个新文档并不比以下更难：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can then run `db.Orders.find()`to assure ourselves that everything went
    as expected:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以运行`db.Orders.find()`来确保一切都如预期那样：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It is important to note that even though our order serves no other purpose but
    to tie two other documents together, it still has its own unique ID.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，即使我们的订单除了将两个其他文档联系在一起之外没有其他目的，它仍然有自己独特的ID。
- en: That's it! We have now constructed a simple database for the storage of information
    about customers, products, and orders. Next, we will learn how to query it in
    order to retrieve data for it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们现在已经构建了一个简单的数据库，用于存储有关客户、产品和订单的信息。接下来，我们将学习如何查询它以检索数据。
- en: Querying MongoDB
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询MongoDB
- en: We are now familiar with the overall structure of data storage in MongoDB as
    well as how to insert and perform some rudimentary retrieval using the `find()`method.
    Here, we will look at the more advanced usage of `find()`in order to do some more
    fine-grained data retrieval.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在熟悉了MongoDB中数据存储的总体结构，以及如何使用`find()`方法插入和执行一些基本的检索。在这里，我们将看一下更高级的`find()`用法，以便进行更精细的数据检索。
- en: Searching by ID
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按ID搜索
- en: One of the most common operations on a MongoDB instance is lookups based on
    ID. As you may recall, every document in a database has a unique `_id` field,
    and MongoDB makes it easy to find documents using it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB实例上最常见的操作之一是基于ID进行查找。正如你可能记得的那样，数据库中的每个文档都有一个唯一的`_id`字段，MongoDB使得使用它来查找文档变得很容易。
- en: 'Let''s try this out! Start your Mongo shell and open the `OrderBase` database
    again. If you closed it after the last example, you can reopen the database by
    issuing the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试吧！启动你的Mongo shell并再次打开`OrderBase`数据库。如果你在上一个示例之后关闭了它，你可以通过发出以下命令重新打开数据库：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once the database has been selected, let''s say that we want to look up a given
    product by ID. We select an ID from the earlier example at random and see what
    we end up with. Remember that the ID will be different on your own machine. So,
    you will need to select the one that is associated with your own objects:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据库被选择，假设我们想要按ID查找给定的产品。我们随机从之前的示例中选择一个ID，看看我们最终得到了什么。请记住，ID在你自己的机器上会有所不同。因此，你需要选择与你自己对象相关联的ID：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The response that we will get for our example is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到的示例响应如下：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Sure looks like our pear! Now, let''s backtrack a bit and see how the lookup
    works. Note that we essentially did the same thing as we did when we wanted to
    see all the available `Products`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很像我们的梨！现在，让我们回溯一下，看看查找是如何工作的。请注意，我们基本上做的事情与我们想要查看所有可用的`Products`时所做的事情相同：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'However, we qualified what we want to find this time by passing a parameter
    to `find()`. As we have grown accustomed to this process by now, the parameter,
    like most things in MongoDB, is just in JSON:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次我们通过向`find()`传递参数来限定我们要查找的内容。由于我们现在已经习惯了这个过程，参数像大多数MongoDB中的东西一样，只是JSON格式：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What we do through this parameter is tell MongoDB that we want to find all the
    documents in the `Products` collection whose `_id` property is equal to the corresponding
    value in our JSON parameter, which is `ObjectId("54f8f6b8598e782be72d6295")`in
    this case.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个参数，我们告诉MongoDB我们想要找到`Products`集合中所有`_id`属性等于我们JSON参数中相应值的文档，这种情况下是`ObjectId("54f8f6b8598e782be72d6295")`。
- en: 'Note that the `find()` method can return several results. When searching for
    an ID, this makes little sense, since only one ID can belong to any given document
    and as such, there can be at the most one result. To accommodate situations like
    this, MongoDB provides another method for collections—`findOne()`. It works like
    find(), with the sole exception being that it returns at most one result, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`find()`方法可以返回多个结果。当搜索ID时，这没有多大意义，因为只有一个ID可以属于任何给定的文档，因此最多只能有一个结果。为了适应这种情况，MongoDB为集合提供了另一种方法——`findOne()`。它的工作方式与find()相同，唯一的例外是它最多返回一个结果，如下所示：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Searching by property value
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按属性值搜索
- en: 'We have seen how easy it is to find documents by ID, and it should come as
    no surprise that searching by general property values is equally simple. For example,
    let''s say that we want to find all the products with the name `Orange`. We can
    do the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了通过ID查找文档有多么容易，毫无疑问，通过一般属性值进行搜索同样简单。例如，假设我们想找到所有名称为`Orange`的产品。我们可以这样做：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'MongoDB will return the following result:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB将返回以下结果：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In some cases, several documents in a collection will have the same value for
    the property that we are searching for. In that case, MongoDB will return all
    the matching ones. Here''s an example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，集合中的几个文档将具有我们要搜索的属性的相同值。在这种情况下，MongoDB将返回所有匹配的文档。以下是一个例子：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will return all the products with a price of `3.0`. In our case, it will
    return the following result:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有价格为`3.0`的产品。在我们的情况下，它将返回以下结果：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Advanced queries
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级查询
- en: What we have covered here barely scratches the surface of everything that you
    can possibly do with `find()`, but it is all that we need to know to be able to
    configure a basic persistence layer. Throughout the remainder of this book, we
    will incrementally introduce more advanced queries as the need arises.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所涵盖的内容仅仅是你可以通过`find()`做的一切的冰山一角，但这已经足够让我们能够配置一个基本的持久层。在本书的其余部分，随着需要的出现，我们将逐步引入更多高级的查询。
- en: Connecting MongoDB and Node.js
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接MongoDB和Node.js
- en: We now have a solid understanding of the most basic concepts of how MongoDB
    works, and it is high time we put them to good work by integrating MongoDB with
    Node.js. In this section, we will cover this process step-by-step, and see how
    we can interact with the MongoDB databases directly from within a running Node.js
    instance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对MongoDB的最基本概念有了扎实的理解，是时候将它们与Node.js集成起来，让它们发挥作用了。在本节中，我们将逐步介绍这个过程，并看看我们如何可以直接从正在运行的Node.js实例中与MongoDB数据库进行交互。
- en: Setting up a basic project
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立一个基本项目
- en: Before we start, please make sure that you have Node.js and **Node Package Manager**
    (**NPM**) installed on your system. Refer to [Chapter 1](ch01.html "Chapter 1. Setting
    Up Your Workspace"), *Setting Up Your Workspace*, for the steps for your particular
    operating system.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保你的系统上已经安装了Node.js和**Node Package Manager**（**NPM**）。参考[第1章](ch01.html
    "第1章. 设置你的工作区")，*设置你的工作区*，了解你特定操作系统的步骤。
- en: 'Once you are set, start off by creating a basic project to experiment a bit
    with the MongoDB instance. Create a folder somewhere and call it MongoNode. Next,
    open a terminal (OS X/Linux) or the command prompt (Windows), navigate to this
    folder, and issue the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备就绪，首先创建一个基本项目，以便对MongoDB实例进行一些实验。在某个地方创建一个名为MongoNode的文件夹。接下来，打开一个终端（OS
    X/Linux）或命令提示符（Windows），导航到这个文件夹，并输入以下命令：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will launch an interactive wizard for the bootstrapping of a basic Node.js
    application. In the following code, we provide some standard answers to the questions
    that the wizard will ask:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个用于引导基本Node.js应用程序的交互式向导。在下面的代码中，我们提供了一些标准答案，以回答向导将要问的问题：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once the bootstrapping finishes, create a new file named `index.js`. Open it
    in your favorite text editor and type the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦引导完成，创建一个名为`index.js`的新文件。在你喜欢的文本编辑器中打开它，并输入以下内容：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Save the file and then open a terminal. Navigate into the folder that we just
    created and run the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后打开一个终端。进入我们刚创建的文件夹，并运行以下命令：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should get the following familiar output:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到以下熟悉的输出：
- en: '**Hello World!**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**你好，世界！**'
- en: We are now assured that Node.js works as expected. So, let's go ahead and see
    how we can get in touch with the database that we constructed earlier.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以确信Node.js按预期工作了。所以，让我们继续看看如何与之前构建的数据库联系起来。
- en: Connecting to MongoDB
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到MongoDB
- en: 'Now, let''s set up the bare metal to interface with a MongoDB instance. The
    first thing that we will need to do is install the official MongoDB driver for
    Node.js. Inside your project folder, issue the following command in the terminal:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置底层接口，与MongoDB实例进行交互。我们需要做的第一件事是安装官方的MongoDB驱动程序，用于Node.js。在项目文件夹中，在终端中输入以下命令：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will make `npm` carry out the complete installation procedure. Once this
    is done, we will have all the basic functionalities that we need to interact with
    the MongoDB instance.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使`npm`执行完整的安装过程。一旦完成，我们将拥有所有需要与MongoDB实例进行交互的基本功能。
- en: 'After the install finishes, create a new file named `database.js`, open it
    in your text editor, and insert the following. Don''t worry if it is quite a lot
    of code as compared to what we have seen so far; I added quite a lot of commentary
    to explain what is going on:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，创建一个名为`database.js`的新文件，在文本编辑器中打开它，并插入以下内容。如果与我们迄今为止看到的相比，这是相当多的代码，不要担心；我添加了相当多的注释来解释正在发生的事情：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, let''s import the database module in the `index.js` file. Remove everything
    from this file and insert the following in it:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`index.js`文件中导入数据库模块。删除这个文件中的所有内容，并插入以下内容：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This will allow us to use our database interface like a regular Node.js module.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够像使用常规的Node.js模块一样使用我们的数据库接口。
- en: 'Finally, let''s give it a run and make sure that everything works. Insert the
    following line in the `index.js` file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们运行一下，确保一切正常。在`index.js`文件中插入以下行：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The preceding command should immediately seem familiar to you; it is the same
    as when we ran the following command in our earlier example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令对你来说应该立即显得很熟悉；它与我们在之前的示例中运行以下命令时相同：
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, we simply wrapped the parameters in logic so that it can be run in the
    Node.js instance.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们简单地将参数包装在逻辑中，以便在Node.js实例中运行。
- en: 'To run the Node.js instance, issue the following command in your terminal again:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Node.js实例，请再次在终端中输入以下命令：
- en: '[PRE42]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should receive something like the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到类似以下的内容：
- en: '**Successfully connected to MongoDB instance!**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**成功连接到MongoDB实例！**'
- en: 'MongoDB returned the following documents:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB返回了以下文档：
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That's it! You just wrote your first Node.js app by making use of MongoDB! It
    is very simple. Note that as we go ahead, we will structure our code a bit differently,
    but now, you have the basic know-how that is needed to make it work. Next, we
    will study some advanced topics and look at how we can use Node.js and MongoDB
    in order to construct a full-fledged API.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你刚刚通过使用MongoDB编写了你的第一个Node.js应用程序！这非常简单。请注意，随着我们的继续，我们将以稍微不同的方式组织我们的代码，但现在，你已经掌握了使其工作所需的基本知识。接下来，我们将学习一些高级主题，并看看如何使用Node.js和MongoDB来构建一个完整的API。
- en: With this chapter, we provided you with the basic knowledge that is needed to
    start building your very own database for your Ionic mobile application, which
    is one of the first stepping stones in building your very own backend for your
    cross-platform mobile application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们为您提供了开始为Ionic移动应用构建自己的数据库所需的基本知识，这是构建跨平台移动应用后端的第一步。
- en: As we move further along, you will realize that the essentials that we learned
    through this chapter will provide us with the necessary knowledge that is required
    to start building our own API, which will be done in the next chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，您将意识到通过本章学到的基本知识将为我们提供开始构建自己的API所需的必要知识，这将在下一章中完成。
