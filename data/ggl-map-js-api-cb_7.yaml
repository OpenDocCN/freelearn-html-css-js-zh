- en: Chapter 7. Working with Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用服务
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Finding coordinates for an address
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找地址的坐标
- en: Finding addresses on a map with a click
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击在地图上查找地址
- en: Getting elevations on a map with a click
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击在地图上获取海拔
- en: Creating a distance matrix for the given locations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为给定位置创建距离矩阵
- en: Getting directions for the given locations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取给定位置的路线
- en: Adding Street View to your maps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将街景添加到您的地图中
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter focuses on the various services offered by the Google Maps JavaScript
    API. These services add significant functionality that largely differentiates
    Google Maps from its competitors. The reliability and the quality of the underlying
    data makes these services even more appreciated, as this allows applications making
    use of Google Maps to provide added functionalities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍Google Maps JavaScript API提供的各种服务。这些服务增加了显著的功能，在很大程度上将Google Maps与其竞争对手区分开来。底层数据的可靠性和质量使得这些服务更加受到重视，因为这允许使用Google
    Maps的应用程序提供额外的功能。
- en: These services generally follow an asynchronous pattern in which a request is
    sent to an external server and a callback method is provided to process the responses.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务通常遵循异步模式，其中请求发送到外部服务器，并提供一个回调方法来处理响应。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These services are not available all over the world; there are restrictions
    or quotas—even if it is available—to prevent the abuse of these services. Detailed
    information will be given on these services in related recipes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务并非在全世界范围内都可用；存在限制或配额——即使可用——以防止滥用这些服务。在相关食谱中将提供关于这些服务的详细信息。
- en: The good part of these services is, as they are part of the Google Maps JavaScript
    API, they are fully compatible with the classes and objects of the API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务的优点在于，作为Google Maps JavaScript API的一部分，它们与API的类和对象完全兼容。
- en: For instance, you can find directions between two addresses using the Google
    Maps API Directions Service. Firstly, you make the request supplying the necessary
    parameters. Then, by using your callback function, you will get the directions
    if everything goes on track. But, for a time lapse, you may have to think of ways
    to overlay these directions on the base maps. Luckily, the API provides the infrastructure
    for this so that with one line of additional code, you can observe your requested
    directions on top of your base maps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用Google Maps API路线服务查找两个地址之间的路线。首先，您提供必要的参数进行请求。然后，通过使用您的回调函数，如果一切顺利，您将获得路线。但是，对于时间延迟，您可能需要考虑将路线叠加到基础地图上的方法。幸运的是，API提供了这样的基础设施，因此只需一行额外的代码，您就可以在基础地图上观察您请求的路线。
- en: This chapter will describe each of the service types in detail, including geocoding,
    directions, elevation, distance matrix, and Street View, with each recipe consisting
    of a related scenario.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细描述每种服务类型，包括地理编码、路线、海拔、距离矩阵和街景，每个食谱都包含一个相关场景。
- en: Finding coordinates for an address
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找地址的坐标
- en: Locating an address or place on the map has always been a tedious task, and
    the Google Maps JavaScript API eases this task with the geocoding service. Geocoding,
    in its simplest definition, is to associate geographic coordinates with the address
    information, be it only a street name, the detailed building number and zip code,
    or only a locality name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上定位地址或地点一直是一项繁琐的任务，Google Maps JavaScript API通过地理编码服务简化了这项任务。地理编码在其最简单的定义中，是将地理坐标与地址信息相关联，无论是仅一个街道名称，详细的建筑编号和邮政编码，还是仅一个地区名称。
- en: By having the coordinates of your respective addresses, you can easily overlay
    them in your map applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过拥有您各自地址的坐标，您可以在地图应用程序中轻松地将它们叠加。
- en: In this recipe, you will succeed in entering your holiday places and addresses
    and then map them as markers on top of your base maps in your application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将成功输入您的假日地点和地址，然后在您的应用程序中将它们作为标记映射到基础地图上。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will make use of the concepts related to adding vector layers, particularly
    markers, introduced in the *Adding markers to maps* recipe in [Chapter 3](ch03.html
    "Chapter 3. Adding Vector Layers"), *Adding Vector Layers*. It is advised to go
    through this recipe to have a general understanding of vector layers and their
    properties.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将利用在[第3章](ch03.html "第3章。添加矢量图层")中“向地图添加标记”食谱中引入的与添加矢量图层相关概念，特别是标记。建议您阅读此食谱，以便对矢量图层及其属性有一个整体的理解。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can locate your addresses by following the given steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤定位您的地址：
- en: 'Create HTML markup so that you can enter your addresses and search for them:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建HTML标记，以便您可以输入您的地址并搜索它们：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Define the global `geocoder` object:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义全局`geocoder`对象：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Initialize the `geocoder` object in your `initMap()` function:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`initMap()`函数中初始化`geocoder`对象：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Get the `listAddressBtn` button element and add a `click` event listener:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`listAddressBtn`按钮元素并添加一个`click`事件监听器：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a function for listing addresses on the `addressList` element and send
    the geocoding request:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于在`addressList`元素上列出地址并发送地理编码请求：
- en: '[PRE4]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a function for geocoding the addresses entered:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于地理编码输入地址的函数：
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Place a marker on the map and attach an `InfoWindow` object to display its
    details:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图上放置一个标记，并将其`InfoWindow`对象附加以显示其详细信息：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will have your addresses pinned on your map as shown in the following screenshot:![How
    to do it…](img/ch07_recipe01_img01.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的地址将如以下截图所示在地图上标记：![如何做到这一点…](img/ch07_recipe01_img01.jpg)
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Making a geocoding request is in fact quite simple. Firstly, you create a `Geocoder`
    object:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 发起地理编码请求实际上非常简单。首先，您创建一个`Geocoder`对象：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, you call the `geocode()` method from the `geocoder` object, supplying
    its address parameter with an address, place, or locality name:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您从`geocoder`对象调用`geocode()`方法，向其地址参数提供一个地址、地点或地区名称：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method takes the address, sends it to the Google servers to be geocoded,
    and by a callback function, gets back the results in the form of the `GeocoderResult`
    object array.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接收地址，将其发送到谷歌服务器进行地理编码，并通过回调函数以`GeocoderResult`对象数组的形式返回结果。
- en: 'The responses come in an array in order of the most relevant matches. For instance,
    when you search for `Colosseum`, the `formatted_address` property of the first
    `GeocoderResult` object is:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 响应以数组形式按最相关匹配的顺序返回。例如，当您搜索`Colosseum`时，第一个`GeocoderResult`对象的`formatted_address`属性是：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The second is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can quickly grasp that the ancient and highly touristic Colosseum in Rome
    is more popular than the second result. You can, of course, bias results through
    the restriction of map boundaries and country codes (we will review this in detail
    in the upcoming sections). However, without any intervention, you will see the
    geocoded results of high popularity at the top through various countries and continents.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以迅速理解，古罗马的著名且高度旅游的斗兽场比第二个结果更受欢迎。当然，您可以通过限制地图边界和国家代码来偏置结果（我们将在接下来的章节中详细回顾）。然而，如果没有任何干预，您将通过各种国家和大陆看到高人气地理编码结果位于顶部。
- en: 'The `GeocoderResult` object has its `geometry` property so that you can view
    it via a marker overlay on top of base maps. In our recipe, the `pinpointResult()`function
    makes use of this, where it takes the `GeocoderResult` object named `result` as
    its only parameter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeocoderResult`对象具有`geometry`属性，这样您就可以通过在基础地图上叠加标记来查看它。在我们的配方中，`pinpointResult()`函数利用了这一点，其中它将名为`result`的`GeocoderResult`对象作为其唯一参数：'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The geocoding service request and response has an extensive set of options
    and properties. Let''s start with the request first. In addition to the `address`
    parameter, which is the primary and required parameter of the `GeocodeRequest`
    object (supplied as the first parameter for the `geocode()` method of the `Geocoder`
    object), there is a `bounds` property that you can use to specify the returning
    geocoded results, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码服务请求和响应有一系列广泛的选择和属性。让我们首先从请求开始。除了是`GeocodeRequest`对象的主要和必需参数的`address`参数（作为`Geocoder`对象的`geocode()`方法的第一个参数提供）之外，还有一个`bounds`属性，您可以使用它来指定返回的地理编码结果，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you supply the `bounds` property, such as the one used in the preceding
    code covering Europe, and then when you search for Sun Street, the first result
    is the UK. This is because the `bounds` property biases the geocoding results
    present inside the `LatLngBounds` object supplied. When you delete the `bounds`
    property, the first result from the same search comes from the USA.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您提供`bounds`属性时，例如前面代码中用于覆盖欧洲的属性，然后当您搜索Sun Street时，第一个结果是英国。这是因为`bounds`属性偏置了在提供的`LatLngBounds`对象内部存在的地理编码结果。当您删除`bounds`属性时，相同搜索的第一个结果来自美国。
- en: In addition, you can bias the results by using the `region` parameter, in which
    an IANA language region subtag is accepted.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以通过使用`region`参数来偏置结果，其中接受IANA语言区域子标签。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing for IANA language region subtags can be found at [http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: IANA语言区域子标签的完整列表可以在[http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)找到。
- en: Detailed information on the `GeocodeRequest` object can be found at [https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest](https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`GeocodeRequest`对象的详细信息可以在[https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest](https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest)找到。
- en: 'For instance, supplying the `region` parameter with `''ve''` for Venezuela
    as shown in the following code and searching for `''Valencia''` returns the city
    of `''Valencia'' in Venezuela` in the first place:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下代码中，将`region`参数设置为`'ve'`（如委内瑞拉所示），并搜索`'Valencia'`，将首先返回委内瑞尔的`'Valencia'`市：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Without the `region` parameter, this would return the city of `'Valencia' in
    Spain` in the first place.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`region`参数，将首先返回西班牙的`'Valencia'`市。
- en: Passing the returned results and their properties to the `GeocoderResult` object,
    this object carries an accuracy indicator since certain geocoding processes are
    about interpolation and matching and not about one-to-one equality.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回的结果及其属性传递给`GeocoderResult`对象，该对象携带一个精度指示器，因为某些地理编码过程涉及插值和匹配，而不是一对一的相等。
- en: 'The value of the result is stored in the `geometry` property of the `GeocoderResult`
    object, which contains the `location_type` property. These values are in the order
    of their highest to lowest accuracies:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的值存储在`GeocoderResult`对象的`geometry`属性中，该属性包含`location_type`属性。这些值按照从高到低的精度顺序排列：
- en: '`google.maps.GeocoderLocationType.ROOFTOP`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderLocationType.ROOFTOP`'
- en: '`google.maps.GeocoderLocationType.RANGE_INTERPOLATED`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderLocationType.RANGE_INTERPOLATED`'
- en: '`google.maps.GeocoderLocationType.GEOMETRIC CENTER`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderLocationType.GEOMETRIC CENTER`'
- en: '`google.maps.GeocoderLocationType.APPROXIMATE`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderLocationType.APPROXIMATE`'
- en: In the preceding code, the `ROOFTOP` value represents the exact address, `RANGE_INTERPOLATED`
    represents that there is an interpolation between certain sections of the road,
    `GEOMETRIC_CENTER` represents the geometric center of the road or region, and
    finally `APPROXIMATE` tells us that the returned result's location is an approximation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`ROOFTOP`值表示确切的地址，`RANGE_INTERPOLATED`表示道路的某些部分之间存在插值，`GEOMETRIC_CENTER`表示道路或区域的几何中心，最后`APPROXIMATE`告诉我们返回的结果位置是一个近似值。
- en: 'For instance, when we search for `''William Village`'', the first result''s
    `formatted_address` is:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们搜索“William Village”时，第一个结果的`formatted_address`是：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `location_type` property of the geometry of the result is `APPROXIMATE`.
    This generally happens when there is no direct linkage between the search phrase
    and the returned result, as it is in our case.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的几何形状的`location_type`属性是`APPROXIMATE`。这通常发生在搜索短语与返回结果之间没有直接联系的情况下，正如我们的例子一样。
- en: Apart from the accuracy of the geocoding process, we can get the type of the
    `GeocoderResult` object through its `types` property. The `types` property is
    an array that is of the category to which the returned result belongs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了地理编码过程的精度之外，我们还可以通过`GeocoderResult`对象的`types`属性获取该对象类型。`types`属性是一个数组，表示返回结果所属的类别。
- en: 'For instance, for the Colosseum in Rome, the `types` property is:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于罗马的斗兽场，`types`属性是：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'While for Via del Corso, Rome, it is:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于罗马的Via del Corso，它是：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For Uffizi Gallery, Florence, it is:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于佛罗伦萨的乌菲齐美术馆，它是：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete listing for the possible values of the `types` property of the
    `GeocoderResult` object can be found at [https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes](https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeocoderResult`对象的`types`属性的可能值的完整列表可以在[https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes](https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes)找到。'
- en: 'It is important to note that the callback function through which we get our
    results of the geocoding request requires another parameter, which is about the
    status of the request. The most prominent possible values for this parameter are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，通过回调函数获取的地理编码请求结果需要另一个参数，这个参数是关于请求状态的。这个参数最显著的可能值包括：
- en: '`google.maps.GeocoderStatus.OK`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderStatus.OK`'
- en: '`google.maps.GeocoderStatus.ZERO_RESULTS`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderStatus.ZERO_RESULTS`'
- en: '`google.maps.GeocoderStatus.OVER_QUERY_LIMIT`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderStatus.OVER_QUERY_LIMIT`'
- en: '`google.maps.GeocoderStatus.REQUEST_DENIED`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderStatus.REQUEST_DENIED`'
- en: '`google.maps.GeocoderStatus.INVALID_REQUEST`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.GeocoderStatus.INVALID_REQUEST`'
- en: The values except `GeocoderStatus.OK` point to a problem. Among all, `GeocoderStatus.OVER_QUERY_LIMIT`
    requires special attention. In the introduction of this chapter, we have mentioned
    that all of these Google Maps services are subject to limited use in terms of
    geography and request rates. And, this status code is fired when you go beyond
    the limit of the usage of the geocoding services.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`GeocoderStatus.OK`之外的所有值都指向一个问题。在所有这些问题中，`GeocoderStatus.OVER_QUERY_LIMIT`需要特别注意。在本章的介绍中，我们已经提到，所有这些Google
    Maps服务在地理和请求速率方面都受到限制。当你的地理编码服务使用超出限制时，就会触发此状态码。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A detailed explanation of the `OVER_QUERY_LIMIT` status code can be found at
    [https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded](https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded](https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded)找到关于`OVER_QUERY_LIMIT`状态码的详细解释。
- en: The complete listing for the possible values of the `GeocoderStatus` object
    can be found at [https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes](https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes](https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes)找到`GeocoderStatus`对象可能值的完整列表。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The *Adding markers to maps* recipe in [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。添加矢量图层)中的*在地图上添加标记*配方，*添加矢量图层*'
- en: Finding addresses on a map with a click
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过点击地图查找地址
- en: In the previous recipe, we had the address in our hand and our aim was to find
    the map location; in other terms, the coordinates of the address on earth. But,
    what happens if we have the exact coordinates and try to find the address that
    matches these exact coordinates?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中，我们手头有地址，我们的目标是找到地图位置；换句话说，地球上的地址坐标。但是，如果我们有确切的坐标并尝试找到与这些确切坐标匹配的地址会发生什么呢？
- en: This process is known as reverse geocoding, and it is the process of converting
    coordinates to human-readable addresses.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被称为逆向地理编码，它是将坐标转换为可读地址的过程。
- en: In this recipe, we will make use of the reverse geocoding capabilities of the
    Google Maps JavaScript API. When the user clicks on the map, we will find the
    address where the user clicked and imminently display it to him/her.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将利用Google Maps JavaScript API的逆向地理编码功能。当用户点击地图时，我们将找到用户点击的地址并立即显示给他/她。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Reviewing the recipe *Drawing shapes on the map* in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*, will ease your
    work because greater detail on drawing shapes and their background is required
    for this recipe.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅[第6章](ch06.html "第6章。Google Maps JavaScript库")中的“在地图上绘制形状”配方 *Drawing shapes
    on the map*，这将使你的工作更加轻松，因为该配方需要更详细地了解绘制形状及其背景。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to allow your user to click on the map and find the address
    of the place that he/she clicked on:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是允许用户点击地图并找到他/她点击的地方的地址的步骤：
- en: 'Define the `geocoder` object as global:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`geocoder`对象定义为全局变量：
- en: '[PRE18]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Define the `popup` object as global:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`popup`对象定义为全局变量：
- en: '[PRE19]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Initialize the `geocoder` and `popup` objects, inside the `initMap()` function:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中初始化`geocoder`和`popup`对象：
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the `drawingManager` object inside `initMap()`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数内部创建`drawingManager`对象：
- en: '[PRE21]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Enable the drawing functionality:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用绘图功能：
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add an event listener for the completion of the user-drawn marker, perform
    the reverse geocoding task, and find the address:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户绘制的标记完成添加事件监听器，执行逆向地理编码任务并找到地址：
- en: '[PRE23]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a function for displaying the address on the `InfoWindow` object of
    the marker drawn:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于在标记绘制的`InfoWindow`对象上显示地址：
- en: '[PRE24]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can now click on and get the address information in the info window as shown
    in the following screenshot:![How to do it…](img/ch07_recipe02_img01.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击并获取以下截图所示的信息窗口中的地址信息：![如何操作…](img/ch07_recipe02_img01.jpg)
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you have looked at the *Finding coordinates for an address* recipe in this
    chapter, you may have realized that we are again using the same `geocoder` object
    as shown:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经查看本章的“根据地址查找坐标”菜谱，你可能已经意识到我们再次使用了前面展示的相同的`geocoder`对象：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'However, this time we are supplying the coordinate pairs in the form of the
    `LatLng` object instead of the address text for the familiar `geocode()` method
    of the `geocoder` object:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次我们是以`LatLng`对象的形式提供坐标对，而不是地址文本，用于熟悉的`geocoder`对象的`geocode()`方法：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In fact, there was another property that the `geocode()` method has which we
    have not discussed in the previous recipe; that is, the `latlng` property that
    accepts the `LatLng` object.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`geocode()`方法还有一个我们没有在前一个菜谱中讨论的属性；那就是接受`LatLng`对象的`latlng`属性。
- en: Therefore, the `geocode()` method of the `geocoder` object can be used bi-directionally,
    both for geocoding and reverse geocoding. For geocoding, we must use the `address`
    property to fill in the address for which we want to have the location. For reverse
    geocoding, we must use the `latlng` property to fill in the `LatLng` object for
    which we want the address information.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`geocoder`对象的`geocode()`方法可以双向使用，既可以用于地理编码，也可以用于反向地理编码。对于地理编码，我们必须使用`address`属性来填写我们想要获取位置的地址。对于反向地理编码，我们必须使用`latlng`属性来填写我们想要获取地址信息的`LatLng`对象。
- en: 'We get the `LatLng` object of the marker that the user draws by using the `getPosition()`
    method of the marker:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用标记的`getPosition()`方法来获取用户绘制的标记的`LatLng`对象：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In our callback function, which we have to supply for our reverse geocoding
    request, we have two parameters that get their values when we get the replies
    of our request:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的回调函数中，我们必须为我们的反向地理编码请求提供，当我们的请求回复时，我们有两个参数会获取它们的值：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The first parameter is an array of the `GeocoderResult` objects, and the second
    one is an array of the `GeocoderStatus` object.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个`GeocoderResult`对象数组，第二个参数是一个`GeocoderStatus`对象数组。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can review the available for the `GeocoderStatus` object as a well-detailed
    breakdown on the `GeocoderResult` object in the *Finding coordinates for an address*
    recipe of this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本章的“根据地址查找坐标”菜谱中查看`GeocoderStatus`对象的可用的详细分解，该菜谱在`GeocoderResult`对象中。
- en: 'After testing the service status, we can work with our array of the `GeocoderResult`
    objects if everything is OK:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试服务状态后，如果一切正常，我们可以与我们的`GeocoderResult`对象数组一起工作：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We have picked the first object because it is the most precise one. For instance,
    for the marker position in our recipe, the complete array of address information
    is:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了第一个对象，因为它是最精确的。例如，对于我们的菜谱中的标记位置，完整的地址信息数组是：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can observe that iterating from the start of the array to the end, we end
    up in `"United States"`, the least precise address information for our reverse
    geocoding request.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到，从数组的开始迭代到结束，我们最终到达了“United States”，这是我们反向地理编码请求中最不精确的地址信息。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Finding coordinates for an address* recipe in this chapter
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的“根据地址查找坐标”菜谱
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。Google Maps JavaScript库")“在地图上绘制形状”菜谱'
- en: Getting elevations on a map with a click
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过点击地图获取高程
- en: The Google Maps JavaScript API provides information on elevation data, returning
    positive values on the terrain relative to the sea surface. It also gives information
    on the depth of ocean floors in negative values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API提供了关于高程数据的信息，相对于海平面返回正值。它还以负值提供关于海底深度的信息。
- en: Using the `ElevationService` object, we can get elevation information on individual
    locations as well as paths.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ElevationService`对象，我们可以获取单个位置以及路径上的高程信息。
- en: In this recipe, firstly we will show how to get an elevation data from a single
    point that the user selects, and then we will go over the same scenario with the
    paths.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先将展示如何从用户选择的单个点获取高程数据，然后我们将使用路径重复相同的场景。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: It is a good idea to have a quick glance at the *Drawing shapes on the map*
    recipe in [Chapter 6](ch06.html "Chapter 6. Google Maps JavaScript Libraries"),
    *Google Maps JavaScript Libraries*, as the recipe covers every detail on how to
    draw a shape using the Google Maps JavaScript API.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 建议快速浏览[第6章](ch06.html "第6章。Google Maps JavaScript库")中的*在地图上绘制形状*配方，因为该配方涵盖了使用Google
    Maps JavaScript API绘制形状的每个细节。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can view the elevation data of a location of your choice if you follow
    the given steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循给定的步骤，你可以查看你选择的地点的海拔数据：
- en: 'Define the `elevator` object as global:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`elevator`对象定义为全局变量：
- en: '[PRE31]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Define the `popup` object as global:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`popup`对象定义为全局变量：
- en: '[PRE32]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Initialize the `elevator` and `popup` objects, inside the `initMap()` function:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数内部初始化`elevator`和`popup`对象：
- en: '[PRE33]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the `drawingManager` object inside `initMap()`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数内部创建`drawingManager`对象：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Enable the drawing functionality:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用绘制功能：
- en: '[PRE35]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add an event listener for the completion of the user-drawn marker, send the
    request using the `elevator` object, and find the elevation data for the location
    of the marker:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户绘制的标记完成添加事件监听器，使用`elevator`对象发送请求，并找到标记位置的海拔数据：
- en: '[PRE36]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a function for displaying the elevation data on the `InfoWindow` object
    of the marker drawn:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为在标记的`InfoWindow`对象上显示海拔数据创建一个函数：
- en: '[PRE37]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You will now get the elevation of the point that you have clicked on, as shown
    in the following screenshot:![How to do it…](img/ch07_recipe03_img01.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将得到你点击的点的海拔，如下面的截图所示：![如何做到这一点…](img/ch07_recipe03_img01.jpg)
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We get the elevation data using the `ElevationService` object:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ElevationService`对象获取海拔数据：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `elevator` object has the `getElevationForLocations()` method that takes
    an array of `LatLng` objects to return the elevation data for each position that
    the specific `LatLng` object is standing for. In other words, if you allocate
    three `LatLng` objects in your array, you get three `ElevationResult` objects
    as an array in your callback function:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`elevator`对象有一个`getElevationForLocations()`方法，它接受一个`LatLng`对象数组，以返回特定`LatLng`对象所代表每个位置的海拔数据。换句话说，如果你在数组中分配了三个`LatLng`对象，你将在回调函数中获得一个包含三个`ElevationResult`对象的数组：'
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: However, bear in mind that the accuracy of the elevation is lowered when the
    number of the `LatLng` objects are embedded in the array. Therefore, if you want
    to have high accuracy, you must opt for the `LatLng` array containing a single
    element, as seen in our case.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，当`LatLng`对象的数量嵌入在数组中时，海拔的准确性会降低。因此，如果你想获得高精度，你必须选择只包含单个元素的`LatLng`数组，正如我们案例中所示。
- en: 'The `LatLng` object array is given for the locations property of the `getElevationForLocations()`
    method. However, we have one `marker` object in hand to handle the `markercomplete`
    event when it is fired upon the drawing of the marker by the user:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为`getElevationForLocations()`方法的`locations`属性提供了`LatLng`对象数组。然而，我们手头有一个`marker`对象来处理当用户绘制标记时触发的`markercomplete`事件：
- en: '[PRE40]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Therefore, we are converting the single marker position to an array containing
    only one element:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将单个标记位置转换为只包含一个元素的数组：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the callback function, we get the status of the service together with the
    `ElevationResult` object array:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中，我们获取服务状态以及`ElevationResult`对象数组：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `status` parameter is of the type `ElevationStatus`, and it is very similar
    to the `GeocoderStatus` object in terms of its constants, which are listed as
    follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`status`参数的类型为`ElevationStatus`，其常量与`GeocoderStatus`对象非常相似，如下列所示：'
- en: '`google.maps.ElevationStatus.OK`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.ElevationStatus.OK`'
- en: '`google.maps.ElevationStatus.UNKNOWN_ERROR`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.ElevationStatus.UNKNOWN_ERROR`'
- en: '`google.maps.ElevationStatus.OVER_QUERY_LIMIT`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.ElevationStatus.OVER_QUERY_LIMIT`'
- en: '`google.maps.ElevationStatus.REQUEST_DENIED`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.ElevationStatus.REQUEST_DENIED`'
- en: '`google.maps.ElevationStatus.INVALID_REQUEST`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.ElevationStatus.INVALID_REQUEST`'
- en: Apart from `ElevationStatus.OK`, all the status values point to a problem. Other
    values are self-explanatory within their names.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`ElevationStatus.OK`之外，所有状态值都指向一个问题。其他值在其名称中都有明确的解释。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing and details for the possible values of the `ElevationStatus`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus](https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`ElevationStatus`对象的可能值完整列表和详细信息可以在[https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus](https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus)找到。'
- en: 'The `results` parameter is of the type `ElevationResult`. The `ElevationResult`
    object has three properties called `elevation`, `location`, and `resolution`.
    We are making use of the `elevation` property in our `showElevationOfResult()`
    function:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`results`参数的类型是`ElevationResult`。`ElevationResult`对象有三个属性，称为`elevation`、`location`和`resolution`。我们在`showElevationOfResult()`函数中使用了`elevation`属性：'
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The elevation data is the positive number for the terrain and the negative number
    for the ocean floor.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 高程数据是地形为正数，海洋底部为负数。
- en: The location property is the `LatLng` object of `ElevationResult`, and the resolution
    property is the distance in meters between the sample points that is used to generate/interpolate
    this elevation data. The higher the resolution, the less accurate the elevation
    data.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 位置属性是`ElevationResult`的`LatLng`对象，而分辨率属性是用于生成/插值此高程数据的样本点之间的距离（以米为单位）。分辨率越高，高程数据越不准确。
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。Google Maps JavaScript库")中的*在地图上绘制形状*配方'
- en: Creating a distance matrix for the given locations
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为给定位置创建距离矩阵
- en: The Google Maps JavaScript API carries some interesting and particularly helpful
    properties, one of them being the Distance Matrix Service. Using this service,
    you can compute the travel time and distance between multiple origins and destination
    locations.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API包含一些有趣且特别有用的属性，其中之一就是距离矩阵服务。使用此服务，您可以计算多个起点和目的地之间的旅行时间和距离。
- en: This is especially useful when you want to have a one-to-one report of your
    travel nodes, be it a delivery business or only a summertime holiday. This service
    gives you the travel time and distances within your choice of travel mode (driving,
    walking, and cycling); you can see the results oriented for each origin and destination.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这特别有用，当您想要对您的旅行节点有一个一对一的报告时，无论是配送业务还是仅夏季节日。此服务为您提供了您选择的旅行方式（驾驶、步行和骑行）的旅行时间和距离；您可以看到针对每个起点和终点的结果。
- en: It is worth noting that the output of this service cannot be mapped onto the
    base maps; you can have the information about the travel time and duration, but
    for the directions, you have to use the Directions service, explained in detail
    in the *Getting a direction for the given locations* recipe later in this chapter.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，此服务的输出不能映射到基础地图上；您可以获取关于旅行时间和持续时间的详细信息，但对于路线，您必须使用本章后面详细解释的路线服务*获取给定位置的路线*。
- en: In this recipe, we will locate the origin and destination locations and get
    the distance matrix result for our locations.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将定位起点和目的地，并获取我们位置的距离矩阵结果。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will make use of the drawing library; therefore, it is advisable
    to go through the *Drawing shapes on the map* recipe in [Chapter 6](ch06.html
    "Chapter 6. Google Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*,
    and gain some understanding on the subject matter.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将使用绘图库；因此，建议您阅读[第6章](ch06.html "第6章。Google Maps JavaScript库")中的*在地图上绘制形状*配方，*Google
    Maps JavaScript库*，并了解相关主题。
- en: How to do it…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You can draw your origin and destination points and then request for a distance
    matrix by clicking on the button. You can see how to do this by following the
    given steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以绘制起点和终点，然后通过点击按钮请求距离矩阵。您可以通过遵循以下步骤了解如何操作：
- en: 'Add the HTML `input` element of the `button` type to kick off the distance
    matrix request:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加HTML `input`元素，类型为`button`，以启动距离矩阵请求：
- en: '[PRE44]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Define the global variables:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义全局变量：
- en: '[PRE45]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Initialize the global variables in the `initMap()` function:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中初始化全局变量：
- en: '[PRE46]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Get the `button` element and add a `click` event handler:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`button`元素并添加一个`click`事件处理器：
- en: '[PRE47]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Initialize the `distanceMatrixService` object in the `initMap()` function:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中初始化`distanceMatrixService`对象：
- en: '[PRE48]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the `drawingManager` object inside `initMap()`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数内创建`drawingManager`对象：
- en: '[PRE49]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Enable the drawing functionality:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用绘制功能：
- en: '[PRE50]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add an event listener for the completion of the user-drawn marker, set the
    marker icons based upon the positions they are pointing towards, whether origin
    or destination, and limit the total number of markers:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户绘制的标记完成添加事件监听器，根据标记指向的位置设置标记图标，是起点还是目的地，并限制标记的总数：
- en: '[PRE51]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a function for preparing the request properties and sending the request
    for the `distanceMatrixService` object by using the `getDistanceMatrix()` method:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，通过使用 `getDistanceMatrix()` 方法为 `distanceMatrixService` 对象准备请求属性并发送请求：
- en: '[PRE52]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a callback function named `getDistanceMatrixResult` for the `getDistanceMatrix()`
    method call of the `distanceMatrixService` object:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `distanceMatrixService` 对象的 `getDistanceMatrix()` 方法调用创建一个名为 `getDistanceMatrixResult`
    的回调函数：
- en: '[PRE53]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a function to be called by the callback function listed earlier to write
    the results to the `matrixResultDiv` object:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，由前面列出的回调函数调用，将结果写入 `matrixResultDiv` 对象：
- en: '[PRE54]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create a function for converting counts to letters; the aim is to match the
    counts with the marker icons:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将计数转换为字母的函数；目的是将计数与标记图标匹配：
- en: '[PRE55]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You will now have the distance matrix between the points of your selection,
    as shown in the following screenshot:![How to do it…](img/ch07_recipe04_img01.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将拥有你选择点之间的距离矩阵，如下截图所示：![如何操作…](img/ch07_recipe04_img01.jpg)
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In our recipe, we are allowing the users to point the markers downward at the
    location of their choice. However, we are just following a scheme such that the
    first marker will point to the first origin, the second will point to the first
    destination, the third will point to the second origin, the fourth will point
    to the second destination location, and so on. In addition, we are limiting the
    number of markers that have to be drawn to 10.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的菜谱中，我们允许用户将标记指向他们选择的地点下方。然而，我们遵循的方案是，第一个标记将指向第一个起点，第二个将指向第一个目的地，第三个将指向第二个起点，第四个将指向第二个目的地位置，依此类推。此外，我们限制绘制的标记数量为10个。
- en: 'This was about drawing markers. Then, we will prepare the origin and destination
    locations to be supplied to the `distanceMatrixService` object. The object is
    initialized as shown in the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是绘制标记的过程。然后，我们将准备要提供给 `distanceMatrixService` 对象的起点和目的地位置。对象初始化如下代码所示：
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The user pressed the input button element and we fire the request via the `getDistanceMatrix()`
    method:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 用户按下输入按钮元素，我们通过 `getDistanceMatrix()` 方法触发请求：
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Here, we supply `originLatLngs` to the `origins` property, where `originLatLngs`
    is an array of the `LatLng` objects collected out of user-drawn markers—the odd-numbered
    ones—in the `markercomplete` event listener for the `drawingManager` object:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `originLatLngs` 传递给 `origins` 属性，其中 `originLatLngs` 是从用户绘制的标记中收集的 `LatLng`
    对象数组——在 `drawingManager` 对象的 `markercomplete` 事件监听器中的奇数标记：
- en: '[PRE58]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `destinations` property is set for the `destimationLatLngs` array in the
    same logic.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`destinations` 属性在 `destimationLatLngs` 数组中按照相同的逻辑设置。'
- en: As a quick reminder, the `destinations` and `origins` properties can take an
    array of address strings as well as an array of `LatLng` objects, as in our case.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快速提醒，`destinations` 和 `origins` 属性可以接受地址字符串数组以及 `LatLng` 对象数组，就像在我们的例子中一样。
- en: 'The third property that we have used in our request is the `travelMode` property,
    which is used to set the mode of travel. The options other than `TravelMode.DRIVING`
    available for this property are:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在请求中使用的第三个属性是 `travelMode` 属性，它用于设置旅行模式。除了 `TravelMode.DRIVING` 之外，此属性还有其他选项：
- en: '`TravelMode.WALKING`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TravelMode.WALKING`'
- en: '`TravelMode.BICYCLING`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TravelMode.BICYCLING`'
- en: 'In addition to the `DistanceMatrixRequest` object carrying the `origins`, `destinations`,
    and `travelMode` properties, we are supplying a callback function named `getDistanceMatrixResult`
    for the `getDistanceMatrix()` method call. The `getDistanceMatrixResult` function
    has two parameters: one is for the response of the service and the other one is
    for the status of the service. It is shown in the following code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 除了携带 `origins`、`destinations` 和 `travelMode` 属性的 `DistanceMatrixRequest` 对象外，我们还为
    `getDistanceMatrix()` 方法调用提供了一个名为 `getDistanceMatrixResult` 的回调函数。`getDistanceMatrixResult`
    函数有两个参数：一个是服务的响应，另一个是服务状态。如下代码所示：
- en: '[PRE59]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In this function, firstly we check whether the service is working properly:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，首先我们检查服务是否正常工作：
- en: '[PRE60]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing and details for the possible values of the `DistanceMatrixStatus`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus](https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`DistanceMatrixStatus`对象的完整列表和可能值的详细信息可以在[https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus](https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus)找到。'
- en: 'Then, we process the results of the type `DistanceMatrixResponse` object, which
    carries the `originAddresses` and `destinationAddresses` arrays of strings and
    a `DistanceMatrixResponseRow` array called `rows`. Firstly, we get the `originAddresses`
    and `destinationAddresses` arrays:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们处理类型为`DistanceMatrixResponse`对象的结果，该对象携带字符串数组`originAddresses`和`destinationAddresses`以及名为`rows`的`DistanceMatrixResponseRow`数组。首先，我们获取`originAddresses`和`destinationAddresses`数组：
- en: '[PRE61]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `rows` array consists of another array called `elements`, in which its
    children are of the type `DistanceMatrixResponseElement`. Therefore, we have to
    have two loops to iterate through the `DistanceMatrixResponseElement` objects:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`rows`数组由另一个名为`elements`的数组组成，其中其子元素是`DistanceMatrixResponseElement`类型。因此，我们必须有两个循环来遍历`DistanceMatrixResponseElement`对象：'
- en: '[PRE62]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `DistanceMatrixResponseElement` object has two prominent properties that
    we have used in our recipe: one is distance and the other is duration. They are
    elaborated in the following code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`DistanceMatrixResponseElement` 对象有两个突出的属性，我们在我们的配方中使用了它们：一个是距离，另一个是持续时间。它们在以下代码中进行了详细说明：'
- en: '[PRE63]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: By using these properties, we reach the particular distance and duration properties
    of the corresponding origin address and destination address.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些属性，我们达到了相应起始地址和目标地址的特定距离和持续时间属性。
- en: See also
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。Google Maps JavaScript库")的*在地图上绘制形状*配方中，*Google Maps JavaScript库*中
- en: Getting directions for the given locations
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为给定位置获取路线
- en: Having directions between two or more locations has always been a favorite among
    users, car drivers, tourists, and so on. The need for navigation products either
    for driving, walking, or any other transit options is qualified by the sales of
    these products.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个或更多位置之间拥有路线图一直是用户、驾驶员、游客等人的最爱。对于驾驶、步行或任何其他交通方式，导航产品的需求通过这些产品的销售来衡量。
- en: A good Directions service would need comprehensive road data with several attributes
    filled in such as the direction of traffic flow, turn restrictions, bridges, and
    underground tunnels. Hopefully, Google Maps has this data in the background; therefore,
    it is very natural for Google to include this functionality in Google Maps.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的路线服务需要包含综合道路数据，并填充多个属性，如交通流向、转弯限制、桥梁和地下隧道。希望Google Maps在后台有这些数据；因此，对于Google来说，在Google
    Maps中包含此功能是非常自然的。
- en: In Google Maps, directions is perhaps one of the most used features. It is also
    included in the Google Maps JavaScript API, giving developers the ability to generate
    directions programmatically between locations of their choice with a broad range
    of options.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google Maps中，路线可能是最常用的功能之一。它也包含在Google Maps JavaScript API中，为开发者提供了在所选位置之间以广泛选项生成路线的编程能力。
- en: In this recipe, firstly we will have the user enter an address or any location
    of a place, map them using the Geocoder service, and then provide the directions
    between them in the order of their entrance.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，首先我们将让用户输入一个地址或任何地点的位置，使用Geocoder服务将其标记出来，然后按照它们进入的顺序提供它们之间的路线。
- en: Getting ready
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will make use of concepts related to the Geocoder service introduced
    in the *Finding coordinates for an address* recipe at the beginning of this chapter.
    It is highly advisable to go through this recipe to have a general understanding
    of Geocoder and its usage.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将使用与本章开头*为地址查找坐标*配方中引入的Geocoder服务相关的概念。强烈建议您阅读此配方，以便对Geocoder及其用法有一个全面的了解。
- en: How to do it…
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can enter your addresses and get directions between them by executing the
    following steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下步骤输入您的地址并获取它们之间的路线：
- en: 'Insert a `ContainerDiv` element of HTML that will be placed on the right-hand
    side of the `div` element of the map:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入一个`ContainerDiv` HTML元素，该元素将被放置在地图的`div`元素的右侧：
- en: '[PRE64]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Define the global variables:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义全局变量：
- en: '[PRE65]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Initialize the global variables in the `initMap()` function:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中初始化全局变量：
- en: '[PRE66]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Give the instructions on `directionsRenderer` so that it will draw the directions
    on the map and will list the directions on the right-hand side of the map:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出`directionsRenderer`的指令，以便它在地图上绘制路线，并在地图的右侧列出路线：
- en: '[PRE67]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create a function for listing the addresses the user has entered and calling
    the function that does the geocoding:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于列出用户输入的地址并调用执行地理编码的函数：
- en: '[PRE68]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Create a function that does the real geocoding task:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个执行实际地理编码任务的函数：
- en: '[PRE69]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create a function for placing a marker for the geocoding result of the user-entered
    address information and attaching an `InfoWindow` object to display its details:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，用于放置用户输入地址信息的地理编码结果标记，并将`InfoWindow`对象附加到其上以显示其详细信息：
- en: '[PRE70]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'At last, the real directions can be called upon by using the `getDirectionsBtn`
    button handler. Create a function for sending the request to the `directionsService`
    object, ensuring that the results are drawn and listed on the map:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，可以通过使用`getDirectionsBtn`按钮处理程序来调用实际路线。创建一个函数，用于向`directionsService`对象发送请求，确保结果在地图上绘制并列出：
- en: '[PRE71]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: You will now have the directions mapped between the points of your selection,
    as shown in the following screenshot:![How to do it…](img/ch07_recipe05_img01.jpg)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将看到您选择点之间的路线，如下面的截图所示：![如何操作…](img/ch07_recipe05_img01.jpg)
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we are making use of both `GeocoderService` and `DirectionsService`.
    However, in order to avoid redundancy (it is strongly recommended to go through
    the *Finding coordinates for an address* recipe of this chapter), we will mostly
    concentrate on `DirectionsService`, preparing the request properties, sending
    and getting back the results to draw on the map, and also its step-by-step textual
    descriptions.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们同时使用了`GeocoderService`和`DirectionsService`。然而，为了避免冗余（强烈建议阅读本章的*查找地址坐标*菜谱），我们将主要关注`DirectionsService`，准备请求属性，发送和获取绘制到地图上的结果，以及它的逐步文本描述。
- en: 'At first, we are waiting for the user to enter addresses to be geocoded and
    shown on the map. These are the places that we will generate directions for. We
    are collecting all the markers that are the results of the user''s geocoding requests
    so that we can use them for directions:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们正在等待用户输入要地理编码并在地图上显示的地址。这些是我们将生成路线的地点。我们正在收集用户地理编码请求的结果标记，以便我们可以使用它们来生成路线：
- en: '[PRE72]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'As soon as the numbers of the geocoded addresses are more than 1, the button
    labeled **Get Directions** gets enabled so that users can request for directions
    between their geocoded addresses:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦地理编码地址的数量超过1，标有**获取路线**的按钮就会启用，以便用户可以请求在他们的地理编码地址之间获取路线：
- en: '[PRE73]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'After this, everything is ready for generating directions provided that we
    have prepared the infrastructure, so use the following code:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，只要我们准备好了基础设施，就可以生成路线，所以使用以下代码：
- en: '[PRE74]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `DirectionsService` object is responsible for sending the `DirectionsRequest`
    object to the service servers at Google, while the `DirectionsRenderer` object,
    as its name implies, renders the `DirectionsResult` object onto the map and its
    textual description.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`DirectionsService`对象负责将`DirectionsRequest`对象发送到谷歌的服务器，而`DirectionsRenderer`对象，正如其名称所暗示的，将`DirectionsResult`对象渲染到地图上及其文本描述。'
- en: An origin and a destination are compulsory for `DirectionsRequest` logically;
    however, there may be waypoints in between the origin and the destination. If
    the user geocodes two addresses and presses the **Get Directions** button, there
    is no place for waypoints, and the first address becomes the origin, while the
    second becomes the destination.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`DirectionsRequest`来说，起点和终点是逻辑上的必需项；然而，在起点和终点之间可能有途经点。如果用户地理编码了两个地址并点击了**获取路线**按钮，就没有途经点的位置，第一个地址成为起点，而第二个地址成为终点。
- en: 'If there are more than two addresses on the list of the geocoded addresses,
    the first will be the origin and the last will be the destination again. In addition
    to this, the waypoints will be present in between the addresses. We are preparing
    the `DirectionsRequest` parameters considering these factors, as shown in the
    following code:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果地理编码地址列表中有超过两个地址，第一个将是起点，最后一个将再次是终点。此外，在地址之间将存在途经点。我们正在考虑这些因素来准备`DirectionsRequest`参数，如下面的代码所示：
- en: '[PRE75]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'You may have realized that we are supplying the `LatLng` objects for the `origin`
    and `destination` properties of the `directionsRequest` object. This does not
    have to be the case: you can also provide addresses as strings for the `origin`
    and `destination` properties, as well as the `location` property of the `DirectionsWaypoint`
    object that we are adding to our `waypnts` array. Also, there is a `stopover`
    property for the `DirectionsWaypoint` object. It specifies that the waypoint is
    actually a stop and splits the route. Another property for the `DirectionsRequest`
    object is `travelMode,` where we have opted for `DRIVING`.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经意识到，我们为 `directionsRequest` 对象的 `origin` 和 `destination` 属性提供了 `LatLng`
    对象。这并不一定非得如此：您也可以为 `origin` 和 `destination` 属性，以及我们添加到 `waypnts` 数组中的 `DirectionsWaypoint`
    对象的 `location` 属性提供字符串形式的地址。此外，`DirectionsWaypoint` 对象还有一个 `stopover` 属性。它指定了航点实际上是一个停靠点，并分割了路线。`DirectionsRequest`
    对象的另一个属性是 `travelMode`，我们选择了 `DRIVING`。
- en: Note
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing and details for the possible values of the `TravelMode`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#TravelMode](https://developers.google.com/maps/documentation/javascript/reference#TravelMode).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`TravelMode` 对象可能值的完整列表和详细信息可以在[https://developers.google.com/maps/documentation/javascript/reference#TravelMode](https://developers.google.com/maps/documentation/javascript/reference#TravelMode)找到。'
- en: We have included a few properties that are mostly required; however, the `DirectionsRequest`
    object has a lot more.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了一些大多数情况下都需要用到的属性；然而，`DirectionsRequest` 对象还有更多。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing of the properties of the `DirectionsRequest` object can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`DirectionsRequest` 对象属性的完整列表可以在[https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)找到。'
- en: 'After preparing our `directionsRequest` object, we can send the request using
    our `directionsService` object through its `route()` method:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好我们的 `directionsRequest` 对象后，我们可以通过 `directionsService` 对象的 `route()` 方法发送请求：
- en: '[PRE76]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The `route()` method takes two parameters: one is the `DirectionsRequest` object
    and the other is the callback function that has the `DirectionsResult` and `DirectionsStatus`
    objects as parameters in return.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`route()` 方法接受两个参数：一个是 `DirectionsRequest` 对象，另一个是返回 `DirectionsResult` 和 `DirectionsStatus`
    对象的回调函数。'
- en: We test whether everything is on track using our `status` object, which is of
    the type `DirectionsStatus`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `status` 对象测试一切是否按计划进行，该对象是 `DirectionsStatus` 类型。
- en: Note
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing of constants of the DirectionsStatus object can be found
    at [https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus](https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`DirectionsStatus` 对象的常量完整列表可以在[https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus](https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus)找到。'
- en: 'Then, we map the results and have textual descriptions on a `div` element using
    our old `directionsRenderer` object:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用旧的 `directionsRenderer` 对象将结果映射到 `div` 元素上，并添加文本描述：
- en: '[PRE77]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'But how did the `directionsRenderer` object know where to map the results,
    or which `div` to write the step-by-step instructions to? Hopefully, we have given
    the instructions earlier to the `DirectionsRenderer` object in our `initMap()`
    function:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`directionsRenderer` 对象是如何知道在哪里映射结果，或者写入哪个 `div` 元素上的？希望我们已经在 `initMap()`
    函数中提前向 `DirectionsRenderer` 对象提供了指令：
- en: '[PRE78]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The `setMap()` method of the `DirectionsRenderer` object maps the `DirectionsResult`
    object to the selected map object. And, similarly, the `setPanel()` method is
    used for selecting an HTML `div` element to have the step-by-step instructions
    written on it. This is so that we can have both our directions mapped in our map
    instance. The map imminently gets zoomed out to show the entire route, and we
    can see the order of our journey with the help of additional markers with letters
    on each.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`DirectionsRenderer` 对象的 `setMap()` 方法将 `DirectionsResult` 对象映射到选定的地图对象。同样，`setPanel()`
    方法用于选择一个 HTML `div` 元素，以便在它上面写入逐步说明。这样我们就可以在我们的地图实例中同时显示我们的路线。地图立即放大以显示整个路线，我们可以借助带有字母的额外标记来查看我们的行程顺序。'
- en: See also
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Finding coordinates for an address* recipe in this chapter
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于*查找地址坐标*的配方
- en: Adding Street View to your maps
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将街景添加到您的地图中
- en: Google Maps already has good map data updated continuously with the ultimate
    cartographic quality. In addition, there comes the up-to-date satellite imagery.
    Although these were sufficient for Google Maps to be so popular and successful,
    there is another view that takes much interest—Street View.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps 已经拥有高质量的地图数据，并且持续更新，同时还有最新的卫星图像。尽管这些已经足够让 Google Maps 变得如此受欢迎和成功，但还有一种观点引起了极大的兴趣——街景。
- en: Street View is the 360-degree panorama view from the roads that are covered
    under this service.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 街景是该服务覆盖的道路的 360 度全景视图。
- en: Note
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete listing of countries and cities where Street View is available
    can be found at [http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/](http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/](http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/)找到提供街景的国家和城市的完整列表。
- en: In this recipe, we will go over how to add Street View panoramas to the current
    view, switch between the map view and Street View, and set the panorama properties.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将介绍如何向当前视图添加街景全景，在地图视图和街景之间切换，并设置全景属性。
- en: Getting ready
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will make use of the concepts related to the geocoding service
    introduced in the *Finding coordinates for an address recipe* in this chapter.
    It is highly advisable to read this recipe to have a general understanding of
    Geocoder and its usage.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将利用本章中“*寻找地址坐标配方*”中介绍的与地理编码服务相关的概念。强烈建议阅读这个配方，以便对 Geocoder 及其用法有一个大致的了解。
- en: How to do it…
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following steps will enable your geocoded addresses to be seen on Street
    View:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将使您的地理编码地址在街景中可见：
- en: 'Firstly, use the HTML markup:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用 HTML 标记：
- en: '[PRE79]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Define the global objects:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义全局对象：
- en: '[PRE80]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Initialize the global objects in the `initMap()` function:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `initMap()` 函数中初始化全局对象：
- en: '[PRE81]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create a function for listing addresses on the `addressList` element and for
    calling the geocoding function:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于在 `addressList` 元素上列出地址并调用地理编码函数的函数：
- en: '[PRE82]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create a function for geocoding the addresses:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于地理编码地址的函数：
- en: '[PRE83]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create a function for placing the marker in the map for the geocoded addresses:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于在地图上放置标记的函数，用于地理编码的地址：
- en: '[PRE84]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Create a function for setting the Street View panorama properties:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于设置街景全景属性的函数：
- en: '[PRE85]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Create a function for displaying the familiar map view, which is called by
    the HTML click button labeled **Show Map**:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于显示熟悉地图视图的函数，该函数通过带有“**显示地图**”标签的 HTML 点击按钮调用：
- en: '[PRE86]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Create a function for displaying the Street View panorama taking the location
    as the map''s center location, which is called by the HTML click button labeled
    **Show StreetView**:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于显示以地图中心位置为位置的街景全景的函数，该函数通过带有“**显示街景**”标签的 HTML 点击按钮调用：
- en: '[PRE87]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: You will now have the geocoded addresses with Street View, as shown in the following
    screenshot:![How to do it…](img/ch07_recipe06_img01.jpg)
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将拥有带有街景的地理编码地址，如下面的截图所示：![如何操作…](img/ch07_recipe06_img01.jpg)
- en: How it works...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In our recipe, our aim is to perform the ordinary task of geocoding addresses,
    in addition to providing the availability of the Street View feature of the Google
    Maps JavaScript API in the same map''s `div` element. To do this, we need the
    `StreetViewPanorama` object available:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配方中，我们的目标是执行地理编码地址的普通任务，同时在同一地图的 `div` 元素中提供 Google Maps JavaScript API
    的街景功能。为此，我们需要可用的 `StreetViewPanorama` 对象：
- en: '[PRE88]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: This object enables us to display the Street View either within our map's `div`
    element or within a separate `div` element of our will.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象使我们能够在我们的地图 `div` 元素内或在我们自己的单独 `div` 元素内显示街景。
- en: Note
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete description of properties and methods of the `StreetViewPanorama`
    class can be found at [https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreetViewPanorama` 类的属性和方法完整描述可以在[https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)找到。'
- en: 'Then, we can display the Street View when the button labeled **Show Street
    View** is clicked, providing the `map` object''s center location as the `LatLng`
    object:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当点击带有“**显示街景**”标签的按钮时，我们可以显示街景，提供 `map` 对象的中心位置作为 `LatLng` 对象：
- en: '[PRE89]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Then, we set the properties of the `StreetViewPanorama` object by specifying
    the position and setting the point of view of the `streetView object`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过指定位置和设置 `streetView 对象` 的视角来设置 `StreetViewPanorama` 对象的属性：
- en: '[PRE90]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The `setPosition()` method takes the `LatLng` object as its parameter, and we
    are providing either the map center or the geocoded address' location. By using
    the `setPov()` method, we are arranging the camera view of the Street View. To
    have a camera view, the object must have an angle towards both true north and
    the street view origin—the street vehicle mostly.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPosition()` 方法接受 `LatLng` 对象作为其参数，我们提供地图中心或地理编码地址的位置。通过使用 `setPov()` 方法，我们安排了街景的相机视角。要有一个相机视角，对象必须对准真实北方和街景的起点——通常是街道上的车辆。'
- en: The `heading` property of the `StreetViewPov` object is for the angle in reference
    to true north, where 0 degrees is true north, 90 degrees is east, 180 degrees
    is south, and 270 degrees is west. In our recipe, we have set the `heading` property
    to 0 degrees.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreetViewPov` 对象的 `heading` 属性是相对于真实北方的角，其中0度是真实北方，90度是东方，180度是南方，270度是西方。在我们的配方中，我们将
    `heading` 属性设置为0度。'
- en: The `pitch` property is for the angle in reference to the Street View vehicle.
    This means that 90 degrees is totally upwards, viewing the sky or clouds, whereas
    -90 degrees is totally downwards, viewing the road ground in most cases.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`pitch` 属性是相对于街景车辆的角。这意味着90度是完全向上，观看天空或云朵，而-90度通常是完全向下，观看道路地面。'
