- en: Chapter 2. Controllers and Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 控制器和扩展
- en: A set of instructions that can react on the user's interaction with Visualforce
    markup (for example, a button click or a link click) is called as a controller.
    A controller can control the behavior of a page and it can be used to access the
    data which should be displayed on the page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一组可以响应用户与Visualforce标记（例如，按钮点击或链接点击）交互的指令称为控制器。控制器可以控制页面的行为，并可以用来访问应在页面上显示的数据。
- en: This chapter will introduce you to a few types of controllers and extensions
    that can be used for Visualforce pages. We will learn the types of controllers
    with examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍几种可用于Visualforce页面的控制器和扩展类型。我们将通过示例学习控制器的类型。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Standard controllers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准控制器
- en: Standard list controllers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准列表控制器
- en: Custom controllers and controller extensions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义控制器和控制器扩展
- en: Working with large sets of data on a Visualforce page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visualforce页面上处理大量数据
- en: Order of execution of a Visualforce page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visualforce页面的执行顺序
- en: Validation rules and standard controllers or custom controllers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证规则和标准控制器或自定义控制器
- en: Using the transient keyword
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用transient关键字
- en: Considerations for creating custom controllers and controller extensions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义控制器和控制器扩展的注意事项
- en: Let's look closer at controllers and extensions…
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看控制器和扩展...
- en: 'This chapter includes a set of examples to explain the important elements and
    features of Visualforce. Starting from this chapter we will build an order processing
    application. There are four custom objects (API names: `Customer__c`, `Item__c`,
    `Order__c`, `Order_Line__c`) in this application. The following is the E-R diagram
    of an order processing application which we will create on the Force.com platform:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含一系列示例，以解释Visualforce的重要元素和功能。从本章开始，我们将构建一个订单处理应用程序。该应用程序中有四个自定义对象（API名称：`Customer__c`、`Item__c`、`Order__c`、`Order_Line__c`）。以下是我们将在Force.com平台上创建的订单处理应用程序的E-R图：
- en: '![Controllers and Extensions](img/9818_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![控制器和扩展](img/9818_02_01.jpg)'
- en: The E-R diagram of an order processing application
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 订单处理应用程序的E-R图
- en: Standard controllers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准控制器
- en: The Force.com platform provides a few types of controllers. The first one is
    standard controller and every **sObject** has a standard controller. They have
    the same logic and functionality as they are originally used in standard pages.
    Therefore we can use standard controllers with Visualforce pages. For example,
    if we use Contact standard controller for a Visualforce page, we can implement
    the standard `Save` method for Contact without writing any additional Apex code.
    This behavior is the same as implementing the `Save` method on the standard Contact
    edit page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com平台提供了几种类型的控制器。第一种是标准控制器，每个**sObject**都有一个标准控制器。它们具有与它们最初在标准页面中使用的相同逻辑和功能。因此，我们可以使用标准控制器与Visualforce页面一起使用。例如，如果我们为Visualforce页面使用联系人标准控制器，我们可以实现联系人的标准`Save`方法，而无需编写任何额外的Apex代码。这种行为与在标准联系人编辑页面上实现`Save`方法的行为相同。
- en: How to use a standard controller with a Visualforce page
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在Visualforce页面上使用标准控制器
- en: 'The `<apex:page>` tag has an attribute called `standardController` which is
    used to associate a standard controller with a Visualforce Page. The value of
    the `standardController` attribute would be the API name of an sObject:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`<apex:page>`标签有一个名为`standardController`的属性，用于将标准控制器与Visualforce页面关联。`standardController`属性的值将是sObject的API名称：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code shows the usage of the `standardController` attribute.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码显示了`standardController`属性的用法。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You cannot use the `standardController` and `controller` attributes at the same
    time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能同时使用`standardController`和`controller`属性。
- en: Standard controller actions
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准控制器操作
- en: 'In Visualforce pages, we can define the `action` attribute for the following
    standard Visualforce components:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visualforce页面上，我们可以为以下标准Visualforce组件定义`action`属性：
- en: '`<apex:commandButton>`: This component creates a button that calls an action'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:commandButton>`：此组件创建一个按钮，调用一个操作'
- en: '`<apex:commandLink>`: This component creates a link that calls an action'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:commandLink>`：此组件创建一个链接，调用一个操作'
- en: '`<apex:actionPoller>`: This component periodically calls an action'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:actionPoller>`：此组件定期调用一个操作'
- en: '`<apex:actionSupport>`: This component makes an event (such as `onclick`, `onmouseover`,
    and so on) on another named component and calls an action'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:actionSupport>`：此组件在另一个命名的组件上触发事件（例如`onclick`、`onmouseover`等）并调用一个操作'
- en: '`<apex:actionFunction>`: This component defines a new JavaScript function that
    calls an action'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:actionFunction>`: 此组件定义了一个新的JavaScript函数，该函数调用一个动作'
- en: '`<apex:page>`: This component calls an action when the page is loaded'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<apex:page>`: 此组件在页面加载时调用一个动作'
- en: An action method can be called from the page using the {`!`} notation. For example,
    if your action method's name is `MyFirstMethod`, then you can use the {`!MyFirstMethod`}
    notation for calling the action method from the page markup.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用{`!`}符号从页面调用动作方法。例如，如果您的动作方法名称是`MyFirstMethod`，则可以从页面标记中使用`{!MyFirstMethod}`符号来调用动作方法。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This action method can be from a standard controller or a custom controller
    or a controller extension.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此动作方法可以来自标准控制器、自定义控制器或控制器扩展。
- en: 'A standard controller has a few standard action methods, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 标准控制器有几个标准动作方法，如下所示：
- en: '`save`: This method inserts/updates a record. Upon successful completion it
    will be redirected to the standard detail page or a custom Visualforce page.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`: 此方法插入/更新一条记录。成功完成后，将重定向到标准详情页面或自定义Visualforce页面。'
- en: '`quicksave`: This method inserts/updates a record. There are no redirections
    to a detail page or custom Visualforce page.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quicksave`: 此方法插入/更新一条记录。没有重定向到详情页面或自定义Visualforce页面。'
- en: '`edit`: This method navigates the user to the edit page for current record.
    Upon successful completion it will be returned to the page that invoked the action.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`: 此方法将用户导航到当前记录的编辑页面。成功完成后，将返回调用动作的页面。'
- en: '`delete`: This method deletes the current record. It redirects the user to
    the list view page by selecting the most recently viewed list filter.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`: 此方法删除当前记录。通过选择最近查看的列表过滤器将用户重定向到列表视图页面。'
- en: '`cancel`: This method cancels an edit operation. Upon successful completion
    it will be returned to the page that invoked the edit action.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cancel`: 此方法取消编辑操作。成功完成后，将返回调用编辑动作的页面。'
- en: '`list`: This method redirects to the list view page by selecting the most recently-viewed
    list filter.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`: 此方法通过选择最近查看的列表过滤器重定向到列表视图页面。'
- en: For example, the following page allows us to insert a new customer or update
    an existing customer record. If we are going to use this page to update a customer
    record, then the URL must be specified with the ID query string parameter. Every
    standard controller has a getter method that returns the record specified by the
    ID query string parameter in the page URL. When we click on **Save**, the `save`
    action is triggered on the standard controller, and the details of the customer
    are updated. If we are going to use this page to insert a customer record, then
    the URL must not be specified as a parameter. In this scenario, when we click
    on **Save**, the `save` action is triggered on the standard controller, and a
    new customer record is inserted.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下页面允许我们插入新客户或更新现有客户记录。如果我们打算使用此页面来更新客户记录，则必须使用ID查询字符串参数指定URL。每个标准控制器都有一个getter方法，该方法返回页面URL中指定的ID查询字符串参数指定的记录。当我们点击**保存**时，标准控制器上的`save`动作被触发，并更新客户详情。如果我们打算使用此页面来插入客户记录，则不得指定URL作为参数。在这种情况下，当我们点击**保存**时，标准控制器上的`save`动作被触发，并插入新的客户记录。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The page markup allows you to access fields of a particular sObject by using
    `{!sObjectAPIName.FieldAPIName}`. For example, if you want to access the `Email`
    field of the `Customer` object, the page that uses the `Customer__c` standard
    controller can use `{!Customer__c.Email__c}` to return the value of the `Email`
    field of the customer who is in the current context.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 页面标记允许您通过使用`{!sObjectAPIName.FieldAPIName}`来访问特定sObject的字段。例如，如果您想访问`Customer`对象的`Email`字段，使用`Customer__c`标准控制器的页面可以使用`{!Customer__c.Email__c}`来返回当前上下文中客户的`Email`字段的值。
- en: 'The following page allows us to view a customer record. In this page also,
    the URL must be specified in the ID query string parameter. The getter method
    of the `Customer__c` standard controller returns the record specified by the ID
    query string parameter in the page URL:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下页面允许我们查看客户记录。在此页面中，也必须在ID查询字符串参数中指定URL。`Customer__c`标准控制器的getter方法返回页面URL中指定的ID查询字符串参数指定的记录：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To check the accessibility of a particular object for the logged user, you can
    use the `{!$ObjectType.objectname.accessible}` notation. This expression returns
    a Boolean value. For a example, if you want to check the accessibility of the
    `Customer` object, you can use `{!$ObjectType.Customer__c.accessible}`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查特定对象对登录用户的可访问性，您可以使用 `{!$ObjectType.objectname.accessible}` 语法。此表达式返回一个布尔值。例如，如果您想检查
    `Customer` 对象的可访问性，您可以使用 `{!$ObjectType.Customer__c.accessible}`。
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code explains the usage of object accessibility. According to
    the example, you can see the **Save** button, only if the particular user has
    security permission to access the customer record.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码解释了对象可访问性的用法。根据示例，您可以看到**保存**按钮，只有当特定用户具有访问客户记录的安全权限时才会显示。
- en: Standard list controllers
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准列表控制器
- en: The second controller type is the standard list controller which can be used
    for displaying or performing an action on a set of records (including related
    lists, list pages, and mass action pages). It allows us to filter records on a
    particular page. We can use standard list controllers for Account, Asset, Campaign,
    Case, Contact, Contract, Idea, Lead, Opportunity, Order, Product2, Solution, User,
    and all the custom objects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种控制器类型是标准列表控制器，可用于显示或对一组记录（包括相关列表、列表页面和批量操作页面）执行操作。它允许我们在特定页面上过滤记录。我们可以使用标准列表控制器来处理账户、资产、活动、案例、联系人、合同、想法、潜在客户、机会、订单、产品2、解决方案、用户以及所有自定义对象。
- en: How to use a standard list controller with Visualforce
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Visualforce 中使用标准列表控制器
- en: Similar to the standard controller, we can specify the `standardController`
    attribute of the `<apex:page>` component. Additionally, we need to specify the
    `recordSetVar` attribute of the `<apex:page>` component.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准控制器类似，我们可以指定 `<apex:page>` 组件的 `standardController` 属性。此外，我们还需要指定 `<apex:page>`
    组件的 `recordSetVar` 属性。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `standardController` attribute specifies the type of records that we want
    to access. The `recordSetVar` attribute indicates that the page uses a list controller
    and the variable name (used to access data in the record collection) of the record
    collection.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`standardController` 属性指定了我们想要访问的记录类型。`recordSetVar` 属性表示页面使用列表控制器，以及记录集合的变量名（用于访问记录集合中的数据）。'
- en: The following markup explains how the page can access a list of records when
    the page is associated with a list controller. In the following example, you can
    refer to a list of customer records.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标记解释了当页面与列表控制器相关联时，页面如何访问记录列表。在以下示例中，您可以引用客户记录列表。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot illustrates the result of the preceding code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了前述代码的结果：
- en: '![How to use a standard list controller with Visualforce](img/9818_02_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![如何在 Visualforce 中使用标准列表控制器](img/9818_02_02.jpg)'
- en: The result page of the customer list example
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 客户列表示例的结果页面
- en: Standard list controller actions
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准列表控制器操作
- en: 'All the standard Visualforce components that have the `action` attribute can
    be used with a Visualforce page with a standard list controller. The usage of
    those components is same as for a standard controller. The following action methods
    are supported by all standard list controllers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有 `action` 属性的标准 Visualforce 组件都可以与具有标准列表控制器的 Visualforce 页面一起使用。这些组件的使用方式与标准控制器相同。以下操作方法由所有标准列表控制器支持：
- en: '`save`: This action method inserts/updates a record. Upon successful completion
    it will be redirected to the standard detail page or custom Visualforce page.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`：此操作方法插入/更新记录。在成功完成后，它将重定向到标准详情页面或自定义 Visualforce 页面。'
- en: '`quicksave`: This method inserts/updates a record. There are no redirections
    to a detail page or a custom Visualforce page.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quicksave`：此方法插入/更新记录。没有重定向到详情页面或自定义 Visualforce 页面。'
- en: '`List`: This method redirects to the list view page by selecting the most recently
    viewed list filter when the filter ID is not specified by the user.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`：此方法在用户未指定筛选器 ID 时，通过选择最近查看的列表筛选器将重定向到列表视图页面。'
- en: '`cancel`: This method cancels an edit operation. Upon successful completion
    it will be returned to the page which invoked the edit action.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cancel`：此方法取消编辑操作。在成功完成后，它将返回到调用编辑操作的页面。'
- en: '`first`: This method displays the first page of records in the set.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first`：此方法显示集合中的第一页记录。'
- en: '`last`: This method displays the last page of records in the set.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last`：此方法显示集合中的最后一页记录。'
- en: '`next`: This method displays the next page of records in the set.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：此方法显示集合中的下一页记录。'
- en: '`previous`: This method displays the previous page of records in the set.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`previous`：此方法显示集合中的上一页记录。'
- en: List views in Salesforce standard pages can be used for filtering records that
    are displayed on the page. For example, on the customer home page, you can select
    **start with c view** from the list view dropdown and view the customers whose
    name starts with the letter c. You can implement this functionality on a page
    associated with a list controller.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce标准页面中的列表视图可用于过滤页面上的显示记录。例如，在客户主页上，您可以从列表视图下拉菜单中选择**以c开头的视图**，查看以字母c开头的客户。您可以在与列表控制器关联的页面上实现此功能。
- en: Pagination can be added to a page associated with a list controller. The pagination
    feature allows you to implement the next and previous actions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向与列表控制器关联的页面添加分页功能。分页功能允许您实现下一页和上一页的操作。
- en: 'For example, to create a simple list of customers with a list view and pagination,
    create a page with the following markup:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个包含列表视图和分页的简单客户列表页面，创建一个具有以下标记的页面：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result of the preceding code is shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的结果：
- en: '![Standard list controller actions](img/9818_02_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![标准列表控制器操作](img/9818_02_03.jpg)'
- en: Viewing customer list with pagination
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分页查看客户列表
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By default, a list controller returns 20 records per page. To control the number
    of records displayed on each page, use a controller extension to set the `pageSize`
    attribute.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列表控制器每页返回20条记录。要控制每页显示的记录数，请使用控制器扩展来设置`pageSize`属性。
- en: Custom controllers and controller extensions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义控制器和控制器扩展
- en: Custom controllers are used to implement the logic and functionality without
    using a standard controller and controller extensions are used to extend the logic
    and functionality of a standard controller or a custom controller. Custom controllers
    and Controller extension are written using Apex.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义控制器用于实现逻辑和功能，而不使用标准控制器；控制器扩展用于扩展标准控制器或自定义控制器的逻辑和功能。自定义控制器和控制器扩展都是使用Apex编写的。
- en: Understanding custom controllers
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解自定义控制器
- en: 'Custom controllers are used to implement logic and functionality without using
    a standard controller. Custom controllers are written using Apex. The following
    are the instances where you might want to use use a custom controller:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义控制器用于实现逻辑和功能，而不使用标准控制器。自定义控制器使用Apex编写。以下是一些您可能想要使用自定义控制器的情况：
- en: Implement a completely different functionality without relying on the standard
    controller's behavior
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现完全不同的功能，而不依赖于标准控制器的行为
- en: Override existing functionality
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖现有功能
- en: Make new actions for the page
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为页面创建新操作
- en: Customize the navigation
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义导航
- en: Use HTTP callouts or web services
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP调用或Web服务
- en: Use a wizard
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用向导
- en: Have a greater control over accessing information on a page
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对页面上的信息访问有更大的控制权
- en: Run your page without applying permissions
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不应用权限的情况下运行页面
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Only one controller can be used in a particular page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个页面只能使用一个控制器。
- en: Building a custom controller
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自定义控制器
- en: You can build a custom controller via the **Setup** page and theVisualforce
    editor. All the administrator and developer functionality are included in the
    **Setup** page, and you can find the **Setup** page from the menu which appears
    after clicking on your name (at the top of the page).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过**设置**页面和Visualforce编辑器来构建自定义控制器。所有管理员和开发人员功能都包含在**设置**页面中，您可以从点击页面顶部的您的名字后出现的菜单中找到**设置**页面。
- en: 'The Visualforce editor allows us to edit the markup of a Visualforce page in
    the same window and we can see that the result of the page will also be displayed
    on the same page. This editor has important functionality such as autocompletion,
    syntax highlighting, quick fix features (developers can create components on the
    fly), and compile on save using the following methods:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce编辑器允许我们在同一窗口中编辑Visualforce页面的标记，并且我们可以看到页面的结果也将显示在同一页上。此编辑器具有自动完成、语法高亮、快速修复功能（开发者可以即时创建组件）以及使用以下方法在保存时编译：
- en: 'Via the **Setup** page: This can be done by navigating to **Your Name** | **Setup**
    | **Develop** | **Apex Classes** | **New**.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**设置**页面：可以通过导航到**你的名字** | **设置** | **开发** | **Apex类** | **新建**来完成此操作。
- en: 'Via the Visualforce editor: After creating the page you can specify the custom
    controller''s name in the controller attribute of the `<apex:page>` tag and then
    click on the **Save** button. Then, if you are a developer, the page will be asking
    you to create the class with the name that you entered. Then, the newly-created
    controller will be shown on the Visualforce editor, as shown in the next screenshot.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Visualforce 编辑器：在创建页面后，您可以在 `<apex:page>` 标签的控制器属性中指定自定义控制器的名称，然后点击 **保存**
    按钮。然后，如果您是开发者，页面将要求您创建一个与您输入的名称相同的类。然后，新创建的控制器将在 Visualforce 编辑器中显示，如图下截图所示。
- en: Tip
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You have the choice to write controller classes using the `sharing` or `without
    sharing` keyword, which is influenced to run the particular page in the system
    mode or user mode.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以选择使用 `sharing` 或 `without sharing` 关键字编写控制器类，这会影响页面在系统模式或用户模式下运行。
- en: '![Building a custom controller](img/9818_02_04.jpg)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![构建自定义控制器](img/9818_02_04.jpg)'
- en: Creating a custom controller via the Visualforce editor
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 Visualforce 编辑器创建自定义控制器
- en: 'The following class is an example of custom controllers. This custom controller
    has the functionality for retrieving the existing item list from the `Item__c`
    custom object and adding a new item record. `insertNewItem` is the action method
    of `ItemController`. `ExistingITems` is a list of item properties which is used
    to retrieve the existing item records. The `ExistingITems` property has an overriden
    `get` method:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类是自定义控制器的一个示例。这个自定义控制器具有从 `Item__c` 自定义对象检索现有项目列表并添加新项目记录的功能。`insertNewItem`
    是 `ItemController` 的动作方法。`ExistingITems` 是一个项目属性列表，用于检索现有项目记录。`ExistingITems`
    属性有一个重写的 `get` 方法：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A custom controller uses a nonparameterized constructor. You cannot create a
    constructor that includes parameters for a custom controller.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义控制器使用非参数化构造函数。您不能为自定义控制器创建包含参数的构造函数。
- en: 'The preceding controller is associated with the following Visualforce page.
    This page has two `<apex:pageBlock>` components: one for displaying the existing
    item records table and other for inserting new items:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述控制器与以下 Visualforce 页面相关联。该页面有两个 `<apex:pageBlock>` 组件：一个用于显示现有项目记录表，另一个用于插入新项目：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Understanding controller extension
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解控制器扩展
- en: 'Controller extensions are used to extend the logic and functionality of a standard
    controller or a custom controller. A controller extension cannot be on a page
    without a standard controller or a custom controller. Controller extensions are
    written using Apex. Use controller extensions when you want to:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器扩展用于扩展标准控制器或自定义控制器的逻辑和功能。控制器扩展不能在没有标准控制器或自定义控制器的情况下存在于页面上。控制器扩展是用 Apex 编写的。当您想要：
- en: Keep the majority of functionality of a standard or custom controller as it,
    is and add more functionality
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持标准或自定义控制器的大部分功能不变，并添加更多功能
- en: Build a Visualforce page that should run according to the user's permissions
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个根据用户权限运行的 Visualforce 页面
- en: Building a controller extension
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建控制器扩展
- en: We can build a controller extension in the same way as for building the custom
    controller.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像构建自定义控制器一样构建控制器扩展。
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Extensions cannot live by themselves on a page. They can be used on a Visualforce
    page with a custom controller or a standard controller.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展不能独立存在于页面上。它们可以用于带有自定义控制器或标准控制器的 Visualforce 页面。
- en: 'The following class is a simple example of a controller extension. This controller
    extension is used to extend the logic and the functionality of the `Order__c`
    custom object''s standard controller. In this extension, we have a one-parameterized
    constructor to fetch the order record from the standard controller. `getRecord()`
    is the method for fetching records from the standard controller. The `prepareFullOrder()`
    method is a custom method that is implemented for querying the order lines of
    a particular order:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类是控制器扩展的一个简单示例。这个控制器扩展用于扩展 `Order__c` 自定义对象的标准控制器的逻辑和功能。在这个扩展中，我们有一个参数化构造函数来从标准控制器获取订单记录。`getRecord()`
    是从标准控制器获取记录的方法。`prepareFullOrder()` 是一个自定义方法，用于查询特定订单的订单行：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A controller extension uses one-parameterized constructor with the `ApexPages.StandardController`
    type of argument or a custom controller type.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器扩展使用一个参数化构造函数，带有 `ApexPages.StandardController` 类型的参数或自定义控制器类型。
- en: 'The following Visualforce page uses the preceding controller extension. On
    the page, we have a page block with two sections. The first section shows us the
    order header details. The second section is there to show the order lines of a
    particular order:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Visualforce 页面使用了前面的控制器扩展。在页面上，我们有一个包含两个部分的页面块。第一部分显示了订单头部的详细信息。第二部分用于显示特定订单的订单行：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Controller methods
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器方法
- en: 'There are three types of methods which can be used within a custom controller
    or a controller extension:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义控制器或控制器扩展中可以使用三种类型的方法：
- en: Getter methods
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取方法
- en: Setter methods
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置方法
- en: Action methods
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作方法
- en: Getter methods
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取方法
- en: Developers can use getter methods to display a database or other computed values
    in the Visualforce markup. This means that getter methods are used to pass data
    from Apex controllers to the Visualforce page. There are two ways to define getter
    methods.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以使用获取方法在 Visualforce 标记中显示数据库或其他计算值。这意味着获取方法用于将数据从 Apex 控制器传递到 Visualforce
    页面。定义获取方法有两种方式。
- en: 'Typically, getter methods are named as `getVariable`, where the variable is
    the name of the attribute that is returned by the getter method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，获取方法命名为 `getVariable`，其中变量是获取方法返回的属性的名称：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A getter method can define an attribute by using the default getter and setter
    methods:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 获取方法可以使用默认的获取和设置方法定义一个属性：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The variable can be accessed on the Visualforce page with the `{!}` expression.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以通过 `{!}` 表达式在 Visualforce 页面上访问。
- en: Setter methods
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置方法
- en: 'Setter methods are used to pass user-defined values to the Apex controller.
    Setter methods are defined in the same way as getter methods are defined. The
    following example uses default getter and setter methods to search for items that
    are already in the database:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 设置方法用于将用户定义的值传递到 Apex 控制器。设置方法与获取方法的定义方式相同。以下示例使用默认的获取和设置方法搜索数据库中已存在的项目：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the Visualforce page that uses the preceding controller. The
    `Keyword` attribute has the default getter and setter methods for the `<apex:inputText>`
    component, which is used to acquire the user''s input. The `ExistingItems` list
    attribute also has the default getter and setter methods to search and display
    the search result. When the user enters a keyword to search for and clicks on
    the **Search** button, the `SearchItems()` action method will be executed and
    this will acquire the keyword search text and run the query to search for the
    items. Before the action method executes, the keyword setter method will be executed.
    Then the query result will be collected to the `ExistingItems` list attribute
    and then the `ExistingItems` getter method will be executed and the page will
    display the search result:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用前面控制器的 Visualforce 页面。`Keyword` 属性具有 `<apex:inputText>` 组件的默认获取和设置方法，用于获取用户的输入。`ExistingItems`
    列属性也有默认的获取和设置方法，用于搜索和显示搜索结果。当用户输入搜索关键字并点击 **搜索** 按钮时，`SearchItems()` 动作方法将被执行，这将获取关键字搜索文本并运行查询以搜索项目。在动作方法执行之前，将执行关键字设置方法。然后查询结果将被收集到
    `ExistingItems` 列属性中，然后执行 `ExistingItems` 获取方法，页面将显示搜索结果：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Action methods
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动作方法
- en: Action methods are used to implement our custom or extended logic and functionality
    in a custom controller or a controller extension. Action methods can be triggered
    on page events such as button clicks or JavaScript events. In Visualforce pages,
    we can define the action attribute in many standard Visualforce components. The
    components are `<apex:commandButton>`, `<apex:commandLink>`, `<apex:actionPoller>`,
    `<apex:actionSupport>`, `<apex:actionFunction>`, and `<apex:page>`. The preceding
    item search example has an action method called `SearchItems`. `SearchItems` is
    used to query items according to the user input given for item search.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 动作方法用于在自定义控制器或控制器扩展中实现我们的自定义或扩展逻辑和功能。动作方法可以在页面事件（如按钮点击或 JavaScript 事件）上触发。在
    Visualforce 页面上，我们可以在许多标准 Visualforce 组件中定义 action 属性。这些组件是 `<apex:commandButton>`、`<apex:commandLink>`、`<apex:actionPoller>`、`<apex:actionSupport>`、`<apex:actionFunction>`
    和 `<apex:page>`。前面的项目搜索示例有一个名为 `SearchItems` 的动作方法。`SearchItems` 用于根据用户输入的项目搜索条件查询项目。
- en: Working with large sets of data on the Visualforce page
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visualforce 页面上处理大量数据
- en: On a Visualforce page, we have to work with a single record as well as large
    sets of data. When we work with large sets of data, we may use iteration components
    such as `<apex:pageBlockTable>`, `<apex:repeat>`, and `<apex:dataTable>`. These
    iteration components are limited to a maximum of 1000 items in a collection. Refer
    the search item example for the usage of the iteration component. We have used
    `<apex:pageBlockTable>` in the previous search item example.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visualforce 页面上，我们不得不处理单个记录以及大量数据集。当我们处理大量数据集时，我们可以使用迭代组件，如 `<apex:pageBlockTable>`、`<apex:repeat>`
    和 `<apex:dataTable>`。这些迭代组件在集合中的最大项目数限制为 1000 项。请参考迭代组件的使用示例。我们已经在之前的搜索项示例中使用了
    `<apex:pageBlockTable>`。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Custom controllers and controller extensions adhere to the Apex governor limits.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义控制器和控制器扩展遵循 Apex 管理员限制。
- en: 'Visualforce provides the "read-only mode" feature to overcome the limit on
    the number of rows that can be queried within one request and the limit on the
    number of collection items that can be iterated on the page. There are two ways
    to set up the Visualforce''s read-only mode feature, which are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 提供了“只读模式”功能，以克服单个请求中可查询的行数限制和页面中可迭代的集合项目数限制。设置 Visualforce 的只读模式功能有两种方法，如下所示：
- en: '**Setting the read-only mode for controller methods**: For this setting, we
    can define Visualforce controller methods with the `@ReadOnly` annotation. This
    read-only mode relaxes the number of records queried within one query from 50,000
    to 1 million rows. The `@ReadOnly` annotation for the read-only mode is used in
    JavaScript remoting as the target of remote JavaScript call to load the data set
    for the `<apex:chart>` component and display some values in a component.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为控制器方法设置只读模式**：为此设置，我们可以使用 `@ReadOnly` 注解定义 Visualforce 控制器方法。这种只读模式将单个查询中查询的记录数从
    50,000 增加到 1,000,000 行。只读模式的 `@ReadOnly` 注解在 JavaScript 远程调用中用作目标，用于加载 `<apex:chart>`
    组件的数据集并在组件中显示一些值。'
- en: '**Setting the read-only mode for an entire page**: This read-only mode can
    be enabled by adding a `true` value for the `readOnly` attribute, which is on
    `<apex:page>.` This read-only mode relaxes the number of records queried within
    one query from 50,000 to 1 million. It also increases the maximum number of items
    in a collection for an iteration component. Because this is a read-only mode,
    you have to note that the page cannot execute any DML operation.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为整个页面设置只读模式**：通过为 `<apex:page>` 上的 `readOnly` 属性添加 `true` 值，可以启用此只读模式。这种只读模式将单个查询中查询的记录数从
    50,000 增加到 1,000,000。它还增加了迭代组件中集合项目的最大数量。由于这是一个只读模式，请注意，页面不能执行任何 DML 操作。'
- en: Order of execution of a Visualforce page
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visualforce 页面的执行顺序
- en: 'A Visualforce page has a life cycle or life-time. This time is defined as the
    period between the creation of the page and its destruction during the user session.
    The life cycle is defined by the type of Visuaforce page request and the content
    of the page. There are two types of Visualforce page requests, which are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 页面有一个生命周期或生存期。这个时间定义为页面创建与用户会话期间销毁之间的时间段。生命周期由 Visualforce 页面请求的类型和页面内容定义。有两种类型的
    Visualforce 页面请求，如下所示：
- en: Get request
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Get 请求
- en: Postback request
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postback 请求
- en: Order of execution for a Visualforce page's get requests
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visualforce 页面的 get 请求执行顺序
- en: 'When we request a new page by entering a URL or by clicking on a button or
    a link, a get request is created. The following diagram illustrates how a Visualforce
    page interacts with a custom controller or a controller extension during a get
    request:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过输入 URL 或点击按钮或链接来请求新页面时，会创建一个 get 请求。以下图表说明了 Visualforce 页面在 get 请求期间如何与自定义控制器或控制器扩展交互：
- en: '![Order of execution for a Visualforce page''s get requests](img/9818_02_05.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Visualforce 页面的 get 请求执行顺序](img/9818_02_05.jpg)'
- en: Order of Execution for Visualforce page's get requests
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 页面的 get 请求执行顺序
- en: 'The order of execution is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 执行顺序如下：
- en: Constructor methods are called by initiating the controller objects.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造方法是通过初始化控制器对象来调用的。
- en: If there are any custom components, they are created and constructor methods
    are called on their associated class. If any attribute is specified in a component
    using an expression, those expressions are also evaluated.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有任何自定义组件，它们将被创建，并且在其关联类上调用构造方法。如果组件中指定了任何使用表达式的属性，这些表达式也将被评估。
- en: Any `assignTo` attributes and expressions are evaluated. After that, the `action`
    attribute on the `<apex:page>` component is evaluated and all the getter or setter
    methods are called.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何 `assignTo` 属性和表达式都会被评估。之后，`<apex:page>` 组件上的 `action` 属性会被评估，并调用所有获取器或设置器方法。
- en: If the page contains an `<apex:form>` tag, then all of the information representing
    the state of the database is encrypted and saved in the view state between page
    requests. Whenever the page is updated, that view state is also updated.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果页面包含 `<apex:form>` 标签，那么表示数据库状态的全部信息都会被加密并保存在页面请求之间的视图状态中。每当页面更新时，该视图状态也会相应更新。
- en: Finally, the resultant HTML is sent to the browser. If there are any client-side
    technologies (such as JavaScript, and CSS), the browser executes them.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，生成的 HTML 会被发送到浏览器。如果存在任何客户端技术（例如 JavaScript 和 CSS），浏览器将执行它们。
- en: Order of execution for a Visualforce page's postback requests
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visualforce 页面回发请求的执行顺序
- en: 'Some user interactions (for example, a `save` action triggered by the user''s
    button click) require page updates, typically those page updates are performed
    by postback requests. The following diagram illustrates how a Visualforce page
    interacts with a custom controller or a controller extension during a postback
    request:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户交互（例如，由用户点击按钮触发的 `save` 操作）需要页面更新，通常这些页面更新是通过回发请求来执行的。以下图表展示了在回发请求期间，Visualforce
    页面如何与自定义控制器或控制器扩展进行交互：
- en: '![Order of execution for a Visualforce page''s postback requests](img/9818_02_06.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Visualforce 页面回发请求的执行顺序](img/9818_02_06.jpg)'
- en: Order of execution for a Visualforce page's postback requests
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 页面回发请求的执行顺序
- en: 'The order is as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 执行顺序如下：
- en: The view state is decoded and used as the basis for updating the values on the
    page during a postback request.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图状态会被解码，并用作在回发请求期间更新页面值的依据。
- en: Expressions are evaluated and setters are executed.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表达式会被评估，并执行设置器。
- en: The action is executed. On its successful completion, the data is updated. If
    the postback request redirects the user to the same page, the view state is updated.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行操作。在成功完成后，数据会被更新。如果回发请求将用户重定向到同一页面，视图状态也会更新。
- en: The results are sent to the browser.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果会被发送到浏览器。
- en: Tip
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If we want to execute an action without performing validations on the input
    or data changes on the page, we can use an immediate attribute with the `true`
    value for a particular component.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在页面不执行输入验证或数据更改的情况下执行操作，可以为特定组件使用具有 `true` 值的立即属性。
- en: The postback request can end with a page redirect and sometimes the custom controller
    or the controller extension may be shared on both the originating page and the
    redirected page. If the postback request contains an `<apex:form>` component,
    only the ID query parameter is returned.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 回发请求可以以页面重定向结束，有时自定义控制器或控制器扩展可能会在原始页面和重定向页面上共享。如果回发请求包含 `<apex:form>` 组件，则只返回
    ID 查询参数。
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `action` attribute of the `<apex:page>` component is evaluated only during
    a get request. Once the user is redirected to another page, the view state and
    controller objects are deleted.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`<apex:page>` 组件的 `action` 属性仅在 get 请求期间被评估。一旦用户被重定向到另一个页面，视图状态和控制器对象就会被删除。'
- en: Validation rules and standard controllers/custom controllers
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证规则和标准控制器/自定义控制器
- en: Validation rules can be applied to custom or standard objects for validating
    data on insert and update operations. When we perform such operations on a Visualforce
    page, it uses a standard controller or a custom controller, and that record may
    cause a validation rule error, which we can display on the Visualforce page as
    we do on standard pages. A validation rule has two options to select the position
    for displaying the error for a particular field. If we choose **top of the page**,
    the error can be displayed by using the `<apex:pageMessages>` or `<apex:messages>`
    component within the `<apex:page>` component. If we choose the **field** option,
    the error will be shown in the associated field residing next to the `<apex:inputField>`
    component. For an example, you can see the sample page given in the *Building
    a custom controller* section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将验证规则应用于自定义或标准对象，以在插入和更新操作中验证数据。当我们对Visualforce页面执行此类操作时，它使用标准控制器或自定义控制器，该记录可能引起验证规则错误，我们可以在Visualforce页面上显示这些错误，就像在标准页面上做的那样。验证规则有两个选项来选择显示特定字段错误的位置。如果我们选择**页面顶部**，错误可以通过在`<apex:page>`组件内的`<apex:pageMessages>`或`<apex:messages>`组件中显示。如果我们选择**字段**选项，错误将显示在位于`<apex:inputField>`组件旁边的相关字段中。例如，你可以在*构建自定义控制器*部分中查看提供的示例页面。
- en: You can try the example by entering a non-numeric character for the **Unit Price**
    field. An error message will be displayed near to the `Unit_Price__c` field, related
    to the `<apex:inputField>` component.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为**单价**字段输入非数字字符来尝试这个示例。将显示一个错误消息，位于`Unit_Price__c`字段附近，与`<apex:inputField>`组件相关。
- en: Using the transient keyword
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用transient关键字
- en: The `transient` keyword is used for declaring variables, and is used in Apex
    classes. Declaring a variable as transient reduces the view state size. Variables
    with the `transient` keyword cannot be saved and should not be transmitted as
    a part of the view state of the particular Visualforce page. Transient variables
    are needed only for the duration of a page request.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`transient`关键字用于声明变量，并在Apex类中使用。将变量声明为transient可以减少视图状态的大小。带有`transient`关键字的变量不能被保存，不应作为特定Visualforce页面的视图状态的一部分传输。transient变量仅在页面请求期间需要。'
- en: 'The `transient` keyword is used in a serializable Apex class, which means the
    classes that implement the `Batchable` or `Schedulable` interfaces. The following
    Apex objects are natively considered as `transient`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`transient`关键字用于可序列化的Apex类，这意味着实现`Batchable`或`Schedulable`接口的类。以下Apex对象被原生认为是`transient`：'
- en: '`PageReference`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PageReference`'
- en: '`XmlStreamClasses`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XmlStreamClasses`'
- en: '`Collections` (only if the type of object that they hold is automatically marked
    as `transient`)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections`（只有当它们持有的对象类型自动标记为`transient`时）'
- en: Most objects generated by system methods such as `Schema.getGlobalDescribe`
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由系统方法如`Schema.getGlobalDescribe`生成的多数对象
- en: Static variables
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态变量
- en: Instances of the `JSONParser` class
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSONParser`类的实例'
- en: 'The following example has a transient `datatime` variable and a non-transient
    `datatime` variable. This example shows the major feature of transient variables,
    which is that they cannot be saved and should not be a part of the view state.
    When we click on the **Refresh** button, the transient date will be recreated
    but the non-transient date will have its original value:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包含一个transient `datatime`变量和一个非transient `datatime`变量。这个示例展示了transient变量的主要特性，即它们不能被保存，不应成为视图状态的一部分。当我们点击**刷新**按钮时，transient日期将被重新创建，但非transient日期将保持其原始值：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Considerations for creating custom controllers and controller extensions
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义控制器和控制器扩展时的注意事项
- en: 'When you are creating custom controllers and controller extensions, keep the
    following consideration in mind:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建自定义控制器和控制器扩展时，请记住以下注意事项：
- en: The most important thing to keep in your mind is Apex governor limits.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要牢记的是Apex限制器。
- en: Apex classes can be run in the system mode and user mode by using `without sharing`
    and `with sharing` respectively. Sensitive data can be exposed without sharing
    controllers.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apex类可以通过使用`without sharing`和`with sharing`分别以系统模式和用户模式运行。在不共享控制器的情况下可以暴露敏感数据。
- en: The `webservice` methods must be defined as global. All other methods are public.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须将`webservice`方法定义为全局的。所有其他方法都是公开的。
- en: Try to access the database in less time by using sets, maps, or lists. This
    will increase the efficiency of your code.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用集合、映射或列表来尝试减少访问数据库的时间。这将提高你代码的效率。
- en: Apex methods and variables are not instantiated in a guaranteed order.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apex方法和变量不是按照保证的顺序实例化的。
- en: You cannot implement **Data Manipulation Language** (**DML**) in the constructor
    method of a controller.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能在控制器构造方法中实现**数据操作语言（DML**）。
- en: You cannot define the `@future` annotation for any getter method, setter method,
    or constructor method of a controller.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能为控制器中的任何getter方法、setter方法或构造方法定义`@future`注解。
- en: Primitive data types (String, Integer, and so on) are passed by value and non-primitive
    Apex data types (list, maps, set, sObject, and so on) are passed by the reference
    to a component's controller.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据类型（如String、Integer等）是通过值传递的，而非原始Apex数据类型（如list、maps、set、sObject等）是通过引用传递到组件控制器的。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we became familiar with types of controllers and extensions.
    We learned the differences and the usage of standard controller, standard list
    controller, custom controller, and controller extension. We learned how to handle
    the code in order work with a large set of data. Further, we have seen the order
    of execution of a Visualforce page, usage of the transient keyword, and the interconnection
    between validation rules and controllers.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们熟悉了控制器的类型和扩展。我们学习了标准控制器、标准列表控制器、自定义控制器和控制器扩展之间的差异及其用法。我们学习了如何处理代码以便与大量数据一起工作。此外，我们还看到了Visualforce页面的执行顺序、transient关键字的使用以及验证规则和控制器的相互连接。
