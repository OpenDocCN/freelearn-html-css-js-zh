- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: 'SportsStore: A Real Application'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SportsStore：一个真实的应用程序
- en: In each of the previous chapters, I focused on a particular feature required
    by web applications, which allowed me to dig into detail. In this part of the
    book, I show how the features described in earlier chapters are combined to build
    a simple but realistic e-commerce application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的每一章中，我专注于网络应用程序所需的一个特定功能，这使我能够深入了解细节。在这本书的这一部分，我展示了前面章节中描述的功能是如何组合起来构建一个简单但真实的电子商务应用的。
- en: My application, called SportsStore, will follow the classic approach taken by
    online stores everywhere. I will create an online product catalog that customers
    can browse or search through, a shopping cart where users can add and remove products,
    and a checkout where customers can enter their shipping details. I will also create
    an administration area that provides facilities to manage the catalog, and I will
    protect it so that only authorized users can make changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我的应用程序，名为SportsStore，将遵循全球在线商店采用的经典方法。我将创建一个在线产品目录，客户可以浏览或搜索，一个购物车，用户可以添加和删除产品，以及一个结账页面，客户可以输入他们的送货详情。我还会创建一个管理区域，提供管理目录的设施，并且我会保护它，以确保只有授权用户才能进行更改。
- en: My goal in this part of the book is to give you a sense of what real web application
    development is by creating as realistic an example as possible. I want to focus
    on Node.js, of course, so I have simplified integration with external systems,
    such as the database, and omitted others entirely, such as payment processing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我的目标是通过对尽可能真实的示例进行创建，让你对真正的网络应用开发有一个感性的认识。当然，我想要专注于Node.js，因此我简化了与外部系统的集成，例如数据库，并完全省略了其他一些系统，例如支付处理。
- en: Understanding the project structure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目结构
- en: The SportsStore application spans six chapters and contains many files, some
    of which have the same name, either because that’s what TypeScript/JavaScript
    requires or because of my development style. There will be multiple `index.ts`
    files, for example, because that’s the filename that JavaScript uses when importing
    from modules. There will also be multiple files whose name contains the term *helper*
    because that’s how I tend to write code that supports some other part of the application.
    For quick reference, *Table 16.1* provides a high-level overview of the structure
    of the completed SportsStore project, which will provide context as you read through
    the chapters and follow the examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SportsStore应用程序跨越六个章节，包含许多文件，其中一些文件具有相同的名称，这可能是TypeScript/JavaScript的要求，也可能是我的开发风格所致。例如，会有多个`index.ts`文件，因为这是JavaScript在从模块导入时使用的文件名。也会有多个文件名称包含术语*helper*，因为这是我编写支持应用程序其他部分的代码的方式。为了快速参考，*表16.1*提供了完成后的SportsStore项目的结构的高级概述，这将为你阅读章节和跟随示例提供上下文。
- en: 'Table 16.1: The project layout and key files'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.1：项目布局和关键文件
- en: '| Folder | Description |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹 | 描述 |'
- en: '|'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| This folder will contain the JavaScript files created by the TypeScript compiler,
    which will be executed by Node.js. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹将包含由TypeScript编译器创建的JavaScript文件，这些文件将由Node.js执行。 |'
- en: '|'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| This folder will contain all of the source code for the SportsStore application
    and will be compiled into the `dist` folder. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹将包含SportsStore应用程序的所有源代码，并将编译到`dist`文件夹中。 |'
- en: '|'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| This folder supports the administration features created in *Chapter 20*.
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹支持在第20章中创建的管理功能。 |'
- en: '|'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| This folder contains the code that provides configuration settings to the
    rest of the application, which is read from configuration files and environment
    settings. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含为应用程序其余部分提供配置设置的代码，这些设置是从配置文件和环境设置中读取的。 |'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| This folder contains all the functionality related to handling data. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含所有与处理数据相关的功能。 |'
- en: '|'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| This folder contains the `Sequelize` implementation of the data model. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含数据模型的`Sequelize`实现。 |'
- en: '|'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| This folder contains the code to validate user input. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含验证用户输入的代码。 |'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| This folder contains helpers for the logicless template package. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含无逻辑模板包的辅助工具。 |'
- en: '|'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| This folder contains the HTTP routes that match and handle requests. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含匹配和处理请求的HTTP路由。 |'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| The code in this file configures user authentication. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 此文件中的代码配置用户身份验证。 |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| The code in this file creates HTTP error responses. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 此文件中的代码创建HTTP错误响应。 |'
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| The code in this file is executed when the SportsStore application starts
    and is responsible for setting up the application features and creating the HTTP
    server. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 当SportsStore应用程序启动时，此文件中的代码被执行，负责设置应用程序功能和创建HTTP服务器。|'
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| The code in this file sets up cookie-based HTTP sessions. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 此文件中的代码设置基于cookie的HTTP会话。|'
- en: '|'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| This folder contains templates the server will use to render content for
    HTML clients. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 此文件夹包含服务器将用于为HTML客户端渲染内容的模板。|'
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| This file contains product data that will be used to populate the catalog.
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 此文件包含用于填充目录的产品数据。|'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| This is the main configuration file for the application. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 这是应用程序的主要配置文件。|'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| This file is used to store secrets as environment variables during development.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 此文件用于在开发期间将秘密作为环境变量存储。|'
- en: The structure of the *SportsStore* project reflects, at least in part, the way
    that I like to write software. You don’t have to follow this pattern in your projects,
    and I encourage you to find ways to organize features such that they correspond
    to how you think about the problems you need to solve.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*SportsStore*项目的结构至少部分反映了我喜欢编写软件的方式。你不必在你的项目中遵循这种模式，我鼓励你找到组织功能的方法，使它们与你思考需要解决的问题的方式相对应。'
- en: Creating the project
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: Open a new command prompt, navigate to a convenient location, and create a folder
    named `sportsstore`. Navigate to the `sportsstore` folder, run the command shown
    in *Listing 16.1* to initialize the project, and create the `package.json` file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的命令提示符，导航到一个方便的位置，并创建一个名为`sportsstore`的文件夹。导航到`sportsstore`文件夹，运行*清单16.1*中显示的命令以初始化项目，并创建`package.json`文件。
- en: '**Tip**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)下载本章的示例项目——以及本书中所有其他章节的示例项目。有关运行示例时遇到问题的帮助，请参阅*第1章*。
- en: 'Listing 16.1: Initializing the project'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.1：初始化项目
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Setting up the development tools
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置开发工具
- en: I am going to start by setting up a toolchain that will monitor the TypeScript
    files in the project, and then compile and execute them when there is a change.
    Run the commands shown in *Listing 16.2* in the `sportsstore` folder to install
    the development tool packages.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我将首先设置一个工具链，该工具链将监视项目中的TypeScript文件，并在有更改时编译和执行它们。在`sportsstore`文件夹中运行*清单16.2*中显示的命令以安装开发工具包。
- en: 'Listing 16.2: Installing the development tool packages'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.2：安装开发工具包
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: These packages are described in *Table 16.2* for quick reference.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包在*表16.2*中有描述，供快速参考。
- en: 'Table 16.2: The development packages'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.2：开发包
- en: '| Name | Description |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `typescript` | This package contains the TypeScript compiler. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `typescript` | 此包包含TypeScript编译器。|'
- en: '| `tsc-watch` | This package monitors the TypeScript files in a project and
    compiles them when there is a change. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `tsc-watch` | 此包监视项目中的TypeScript文件，并在有更改时编译它们。|'
- en: '| `nodemon` | This package monitors a wider range of file types and executes
    a command when a change is detected. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `nodemon` | 此包监视更广泛的文件类型，并在检测到更改时执行命令。|'
- en: '| `@tsconfig/node20` | This package contains a TypeScript compiler configuration
    file for Node.js projects. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `@tsconfig/node20` | 此包包含适用于Node.js项目的TypeScript编译器配置文件。|'
- en: '| `@types/node` | This package contains type descriptions for the Node.js API.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `@types/node` | 此包包含Node.js API的类型描述。|'
- en: Create the `src` folder, and add to it a file named `server.ts` with the content
    shown in *Listing 16.3*, which will act as a placeholder while setting up the
    development tools.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`src`文件夹，并向其中添加一个名为`server.ts`的文件，其内容如*清单16.3*所示，该文件将在设置开发工具时充当占位符。
- en: 'Listing 16.3: The contents of the server.ts file in the src folder'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.3：src文件夹中server.ts文件的内容
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To configure the TypeScript compiler, add a file named `tsconfig.json` to the
    `sportsstore` folder with the content shown in *Listing 16.4*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置TypeScript编译器，请将一个名为`tsconfig.json`的文件添加到`sportsstore`文件夹中，其内容如*清单16.4*所示。
- en: 'Listing 16.4: The contents of the tsconfig.json file in the sportsstore folder'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.4：sportsstore文件夹中tsconfig.json文件的内容
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The configuration builds on the basic settings provided by the `@tsconfig/node20`
    package, specifying that the source files can be found in the `src` folder and
    the compiled JavaScript files should be written to the `src` folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置基于`@tsconfig/node20`包提供的基本设置，指定源文件位于`src`文件夹中，编译后的JavaScript文件应写入`src`文件夹。
- en: To set up the file watchers, replace the `scripts` section of the `package.json`
    file and add the `nodemonConfig` section, as shown in *Listing 16.5*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置文件监视器，替换`package.json`文件的`scripts`部分并添加`nodemonConfig`部分，如*清单16.5*所示。
- en: 'Listing 16.5: Setting the scripts section of the package.json file in the sportsstore
    folder'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.5：设置sportsstore文件夹中package.json文件的scripts部分
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Earlier chapters used only the `tsc-watch` package to monitor and build TypeScript
    files, and restart the application when there is a change. This can be frustrating
    when working with other file types, such as templates, where changes do not trigger
    a restart. Bundler packages, such as webpack (used in *Chapter 7*), can be used
    to create complex build pipelines, but my preference is to combine `tsc-watch`
    with the `nodemon` package, which restarts a process when a file is changed. The
    `start` script uses `nodemon` to run `tsc-watch`, which in turn starts the TypeScript
    compiler in watch mode. If a TypeScript file is changed, then the TypeScript compiler
    compiles the TypeScript files into JavaScript, which is then executed by the `tsc-watch`
    package. If a non-TypeScript file is changed, then the `nodemon` package restarts
    `tsc-watch`, which ensures that the application is restarted. The `nodemonConfig`
    section specifies the file extension that `nodemon` reacts to and a set of directories
    to ignore. This is not a perfect arrangement of tools, but it is reliable and
    responsive, and I have had fewer problems using these packages than when trying
    to configure webpack, which has some limitations when dealing with TypeScript
    files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 早期章节仅使用`tsc-watch`包来监视和构建TypeScript文件，并在有更改时重新启动应用程序。当与其他文件类型（如模板）一起工作时，这种做法可能会令人沮丧，因为更改不会触发重启。Bundler包，如webpack（在第7章中使用），可以用于创建复杂的构建管道，但我的偏好是将`tsc-watch`与`nodemon`包结合使用，当文件更改时，它会重新启动进程。`start`脚本使用`nodemon`运行`tsc-watch`，然后`tsc-watch`以监视模式启动TypeScript编译器。如果TypeScript文件发生更改，则TypeScript编译器将TypeScript文件编译成JavaScript，然后由`tsc-watch`包执行。如果非TypeScript文件发生更改，则`nodemon`包重新启动`tsc-watch`，确保应用程序重新启动。`nodemonConfig`部分指定`nodemon`响应的文件扩展名和一组要忽略的目录。这不是一个完美的工具配置，但它可靠且响应迅速，我使用这些包时遇到的问题比尝试配置webpack要少，因为webpack在处理TypeScript文件时有一些限制。
- en: Open a new command prompt, navigate to the `sportsstore` folder, and run the
    command shown in *Listing 16.6* to start the build process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的命令提示符，导航到`sportsstore`文件夹，并运行*清单16.6*中显示的命令以启动构建过程。
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The build tools will generate pure JavaScript files, which will be executed
    by Node.js, producing the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建工具将生成纯JavaScript文件，这些文件将由Node.js执行，产生以下输出：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Changes to files will be detected automatically, triggering a new build and
    then executing the output.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 文件更改将被自动检测，触发新的构建然后执行输出。
- en: Handling HTTP requests
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理HTTP请求
- en: The next step is to add support to handle HTTP requests, which is the foundation
    for the SportsStore application and everything that it does. Run the commands
    shown in *Listing 16.7* in the `sportsstore` folder to add the HTTP packages.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加处理HTTP请求的支持，这是SportsStore应用程序及其所有功能的基础。在`sportsstore`文件夹中运行*清单16.7*中显示的命令以添加HTTP包。
- en: 'Listing 16.7: Installing the basic application packages'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16.7：安装基本应用程序包
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These packages are described in *Table 16.3* for quick reference, but they provide
    enhancements to the basic Node.js HTTP features and set a sensible content security
    policy.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包在*表16.3*中描述，以便快速参考，但它们提供了对基本Node.js HTTP功能的增强，并设置了一个合理的内联安全策略。
- en: 'Table 16.3: The HTTP handling packages'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表16.3：HTTP处理包
- en: '| Name | Description |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `express` | This package contains the Express HTTP framework, which was introduced
    in *Chapter 5*. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `express` | 此包包含Express HTTP框架，该框架在第5章中介绍。|'
- en: '| `helmet` | This package is used to set an HTTP content security policy, as
    described in *Chapter 7*. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `helmet` | 此包用于设置HTTP内容安全策略，如*第7章*所述。|'
- en: '| `@types/express` | This package contains type descriptions for the Express
    API. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `@types/express` | 此包包含Express API的类型描述。|'
- en: Replace the contents of the `server.ts` file with the code shown in *Listing
    16.8* to create a basic HTTP server. (Plain HTTP will be used for development,
    and HTTPS will be introduced in *Chapter 21* when the application is prepared
    for deployment.)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `server.ts` 文件的内容替换为 *列表 16.8* 中所示的代码，以创建一个基本的 HTTP 服务器。（开发时将使用纯 HTTP，当应用程序准备部署时，将在
    *第 21 章* 中介绍 HTTPS。）
- en: 'Listing 16.8: Creating a basic HTTP server in the server.ts file in the src
    folder'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.8：在 src 文件夹中的 server.ts 文件中创建基本的 HTTP 服务器
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The new code uses Express and enables support to decode JSON and form-encoded
    content, using the `json` and `urlencoded` methods. There is a single route that
    handles `GET` requests and responds with a string. Open a web browser, request
    `http://localhost:5500`, and you should see the response shown in *Figure 16.1*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码使用 Express 并启用了解码 JSON 和表单编码内容的支持，使用 `json` 和 `urlencoded` 方法。有一个单独的路由处理
    `GET` 请求并返回一个字符串。打开网页浏览器，请求 `http://localhost:5500`，你应该会看到 *图 16.1* 中所示的响应。
- en: '![](img/B21959_16_01.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_16_01.png)'
- en: 'Figure 16.1: A response from the application'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1：应用程序的响应
- en: Creating a configuration system
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建配置系统
- en: The port on which the server listens for HTTP requests is hardcoded into the
    `server.ts` file, which means that changing ports will require a new version of
    the application to be built and deployed. A more flexible approach is to define
    settings in a configuration file, which is read when the application starts and
    can be modified without requiring a code change.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器监听 HTTP 请求的端口硬编码在 `server.ts` 文件中，这意味着更改端口将需要构建和部署应用程序的新版本。一种更灵活的方法是在配置文件中定义设置，该文件在应用程序启动时读取，并且可以修改而无需更改代码。
- en: Create the `src/config` folder, and add to it a file named `environment.ts`,
    with the content shown in *Listing 16.9*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `src/config` 文件夹，并向其中添加一个名为 `environment.ts` 的文件，其内容如 *列表 16.9* 所示。
- en: 'Listing 16.9: The contents of the environment.ts file in the src/config folder'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.9：src/config 文件夹中 environment.ts 文件的内容
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Most applications require different configurations for different environments,
    such as development and production. The convention for Node.js is to specify the
    environment using an environment variable, named `NODE_ENV`. Applications can
    support as many environments as needed, but a minimal approach is to support development
    and production environments. If the `NODE_ENV` variable isn’t set or has been
    set to `development`, then the application is in the development environment.
    The code in *Listing 16.9* allows the environment to be read consistently, without
    the need for different parts of the application to inspect and interpret environment
    variables.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序需要针对不同环境的不同配置，例如开发和生产。Node.js 的约定是使用名为 `NODE_ENV` 的环境变量来指定环境。应用程序可以支持所需的环境数量，但最小的方法是支持开发和生产环境。如果
    `NODE_ENV` 变量未设置或已设置为 `development`，则应用程序处于开发环境。*列表 16.9* 中的代码允许一致地读取环境，而无需应用程序的不同部分检查和解释环境变量。
- en: The environment is important for a configuration system because it allows a
    base configuration file to be supplemented with settings that are specific to
    each environment. The simplest way to define configuration settings is to use
    the JSON format, which can be parsed into JavaScript objects at runtime. Objects
    read from multiple configuration files can be merged to create the overall configuration.
    JavaScript doesn’t have integrated support for merging objects, so add a file
    named `merge.ts` to the `src/config` folder with the content shown in *Listing
    16.10*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于配置系统来说，环境非常重要，因为它允许基本配置文件通过针对每个环境的特定设置进行补充。定义配置设置的最简单方法是使用 JSON 格式，该格式可以在运行时解析为
    JavaScript 对象。可以从多个配置文件中读取对象，以创建整体配置。JavaScript 没有集成合并对象的支持，因此向 `src/config` 文件夹中添加一个名为
    `merge.ts` 的文件，其内容如 *列表 16.10* 所示。
- en: 'Listing 16.10: The contents of the merge.ts file in the src/config folder'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.10：src/config 文件夹中 merge.ts 文件的内容
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `merge` function accepts `source` and `target` objects and copies the properties
    defined by the `source` object to the `target`, overriding the existing values.
    Next, add a file named `index.ts` to the `src/config` folder, with the content
    shown in *Listing 16.11*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge` 函数接受 `source` 和 `target` 对象，并将 `source` 对象中定义的属性复制到 `target` 中，覆盖现有值。接下来，将一个名为
    `index.ts` 的文件添加到 `src/config` 文件夹中，其内容如 *列表 16.11* 所示。'
- en: 'Listing 16.11: The contents of the index.ts file in the src/config folder'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.11：src/config 文件夹中 index.ts 文件的内容
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The code in *Listing 16.11* uses an environment variable named `SERVER_CONFIG`
    to get the name of the configuration file, falling back to `server.config.json`
    if the variable isn’t defined. The contents of the file are read and merged with
    an environment-specific file, the name of which is determined by appending the
    current environment, such as `production.server.config.json`. The `getConfig`
    function accepts a string in the form `http:port`, where keys are separated by
    colons (the `:` character). The keys are used to navigate through the configuration
    data to find a value. A default value can be provided, which will be returned
    if a value has not been loaded from the configuration files.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.11* 中的代码使用一个名为 `SERVER_CONFIG` 的环境变量来获取配置文件名称，如果变量未定义，则回退到 `server.config.json`。文件内容被读取并与特定环境的相关文件合并，该文件名称通过附加当前环境名称确定，例如
    `production.server.config.json`。`getConfig` 函数接受形式为 `http:port` 的字符串，其中键由冒号（`:`
    字符）分隔。键用于在配置数据中导航以找到值。可以提供一个默认值，如果配置文件中没有加载值，则返回该默认值。'
- en: '**Note**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Environment variables can be set on most platforms, but Node.js also supports
    `.env` files, which can be used to set values and are loaded with the Node `--env-file`
    argument. In *Chapter 21*, I will set environment variables as part of the containerization
    process used to prepare the application for deployment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上都可以设置环境变量，但 Node.js 还支持 `.env` 文件，可以用来设置值，并且可以通过 Node 的 `--env-file` 参数加载。在
    *第 21 章* 中，我将设置环境变量作为准备应用程序部署的容器化过程的一部分。
- en: To start the configuration, add a file named `server.config.json` to the `sportsstore`
    folder with the content shown in *Listing 16.12*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始配置，请将一个名为 `server.config.json` 的文件添加到 `sportsstore` 文件夹中，其内容如 *清单 16.12*
    所示。
- en: 'Listing 16.12: The contents of the server.config.json file in the SportsStore
    folder'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.12*：`SportsStore` 文件夹中 `server.config.json` 文件的内容'
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The configuration file defines a section named `http` that contains a `port`
    setting. *Listing 16.13* updates the `server.ts` file to use this configuration
    setting to listen to HTTP requests, with a fallback value that will be used if
    no configuration setting has been defined.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件定义了一个名为 `http` 的部分，其中包含 `port` 设置。*清单 16.13* 更新了 `server.ts` 文件以使用此配置设置来监听
    HTTP 请求，如果未定义配置设置，则使用回退值。
- en: 'Listing 16.13: Using configuration data in the server.ts file in the src folder'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.13*：在 `src` 文件夹中的 `server.ts` 文件中使用配置数据'
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The configuration file will be populated as new features are added, but the
    overall effect is to allow the settings used by the application to change without
    altering code files.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新功能的添加，配置文件将被填充，但总体效果是允许应用程序使用的设置更改而不修改代码文件。
- en: Adding application routes
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加应用程序路由
- en: As the application grows, there will be a large number of HTTP routes to define
    and manage, so it will be useful to introduce a structure that allows related
    routes to be grouped and easily located. Create the `src/routes` folder, and add
    to it a file named `catalog.ts` with the content shown in *Listing 16.14*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的增长，将会有大量 HTTP 路由需要定义和管理，因此引入一种允许相关路由分组并易于定位的结构将非常有用。创建 `src/routes` 文件夹，并向其中添加一个名为
    `catalog.ts` 的文件，其内容如 *清单 16.14* 所示。
- en: 'Listing 16.14: The contents of the catalog.ts file in the src/routes folder'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.14*：`src/routes` 文件夹中 `catalog.ts` 文件的内容'
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This file will contain the routes that present a catalog of products to the
    user, but it contains a placeholder for now. To combine the individual route modules
    so that they can be applied in a single step, add a file named `index.ts` to the
    `src/routes` folder with the content shown in *Listing 16.15*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含向用户展示产品目录的路由，但目前包含一个占位符。为了将单个路由模块合并以便在单个步骤中应用，请将一个名为 `index.ts` 的文件添加到
    `src/routes` 文件夹中，其内容如 *清单 16.15* 所示。
- en: 'Listing 16.15: The contents of the index.ts file in the src/routes folder'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.15*：`src/routes` 文件夹中 `index.ts` 文件的内容'
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*Listing 16.16* uses the new module to enable the routes it defines.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.16* 使用新模块来启用其定义的路由。'
- en: 'Listing 16.16: Applying routes to the server.ts file in the src folder'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16.16*：将路由应用到 `src` 文件夹中的 `server.ts` 文件'
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Use a web browser request, `http://localhost:5000`, and you will see the response
    shown in *Figure 16.2*, which shows the response has been generated by the request
    handler defined in *Listing 16.14*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络浏览器请求 `http://localhost:5000`，你将看到 *图 16.2* 中所示的响应，该响应显示请求处理程序已由 *清单 16.14*
    中定义。
- en: '![](img/B21959_16_02.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B21959_16_02.png]'
- en: 'Figure 16.2: The effect of a separate module for routes'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16.2*：单独模块对路由的影响'
- en: Adding support for HTML templates
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对 HTML 模板的支持
- en: HTML templates will be used to render the content presented to the user. Run
    the commands shown in *Listing 16.17* in the `sportsstore` folder to install the
    packages required to support templates.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 HTML 模板来渲染呈现给用户的内容。在 `sportsstore` 文件夹中运行 *列表 16.17* 中显示的命令来安装支持模板所需的包。
- en: 'Listing 16.17: Installing template packages'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.17：安装模板包
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: These packages are described in *Table 16.4* for quick reference.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包在 *表 16.4* 中描述，以便快速参考。
- en: 'Table 16.4: The template packages'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.4：模板包
- en: '| Name | Description |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `bootstrap` | This package contains CSS stylesheets that are used to style
    the HTML content produced by the application. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `bootstrap` | 此包包含用于样式化应用程序生成的 HTML 内容的 CSS 样式表。|'
- en: '| `handlebars` | This package contains the Handlebars template engine, which
    was introduced in *Chapter 10*. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `handlebars` | 此包包含 Handlebars 模板引擎，该引擎在第 10 章中介绍。|'
- en: '| `express-handlebars` | This package integrates the Handlebars template engine
    with the Express package. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `express-handlebars` | 此包将 Handlebars 模板引擎与 Express 包集成。|'
- en: As explained in *Chapter 10*, the templates rendered by the Handlebars package
    rely on helper functions instead of including code expressions. Create the `src/helpers`
    folder, and add to it a file named `env.ts` with the content shown in *Listing
    16.18*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如第 10 章所述，Handlebars 包渲染的模板依赖于辅助函数而不是包含代码表达式。创建 `src/helpers` 文件夹，并向其中添加一个名为
    `env.ts` 的文件，其内容如 *列表 16.18* 所示。
- en: 'Listing 16.18: The contents of the env.ts file in the src/helpers folder'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.18：src/helpers 文件夹中 env.ts 文件的内容
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `isDevelopment` helper can be used to determine whether the application
    has been configured for development or production. To set up the template system,
    add a file named `index.ts` to the `src/helpers` folder with the content shown
    in *Listing 16.19*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`isDevelopment` 辅助函数可用于确定应用程序是否已配置为开发或生产模式。为了设置模板系统，将一个名为 `index.ts` 的文件添加到
    `src/helpers` 文件夹中，其内容如 *列表 16.19* 所示。'
- en: Listing 16.19\. The contents of the index.ts file in the src/helpers folder
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.19\. src/helpers 文件夹中 index.ts 文件的内容
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `createTemplates` function configures the template engine and registers
    it with Express. Add the settings to the configuration file, as shown in *Listing
    16.20*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`createTemplates` 函数配置模板引擎并将其注册到 Express 中。将设置添加到配置文件中，如 *列表 16.20* 所示。'
- en: 'Listing 16.20: Adding settings to the server.config.json file in the SportsStore
    folder'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.20：向 SportsStore 文件夹中的 server.config.json 文件添加设置
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `getConfig` function defined in *Listing 16.11* can be used to get entire
    configuration sections, as well as individual values, and these sections can be
    used to directly configure packages. This statement is used to get a configuration
    section:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *列表 16.11* 中定义的 `getConfig` 函数可用于获取整个配置部分以及单个值，并且可以使用这些部分直接配置包。此语句用于获取配置部分：
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result is an object whose properties correspond to the `templates:config`
    section of the configuration file, which has been parsed from JSON into a JavaScript
    object and is used to configure the template engine:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个对象，其属性对应于配置文件的 `templates:config` 部分，该部分已从 JSON 解析为 JavaScript 对象并用于配置模板引擎：
- en: '[PRE40]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The properties read from the configuration file are combined with the helper
    functions imported from the `helpers` module.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从配置文件中读取的属性与从 `helpers` 模块导入的辅助函数相结合。
- en: '**Note**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Listing 16.20* configures the template engine so that templates, partials,
    and layouts are all in the same folder. This is not a requirement, but I prefer
    to keep the files together and use the filename to indicate the content rendered
    by a template.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16.20* 配置了模板引擎，使得模板、部分和布局都在同一个文件夹中。这并非强制要求，但我更喜欢将文件放在一起，并使用文件名来指示模板渲染的内容。'
- en: Creating layouts and templates
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建布局和模板
- en: Create the `sportsstore/templates` folder, and add to it a file named `index.handlebars`
    with the placeholder contents shown in *Listing 16.21*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `sportsstore/templates` 文件夹，并向其中添加一个名为 `index.handlebars` 的文件，其占位符内容如 *列表
    16.21* 所示。
- en: 'Listing 16.21: The contents of the index.handlebars file in the templates folder'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.21：模板文件夹中 index.handlebars 文件的内容
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Add a file named `main_layout.handlebars` to the templates folder with the content
    shown in *Listing 16.22*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个名为 `main_layout.handlebars` 的文件添加到模板文件夹中，其内容如 *列表 16.22* 所示。
- en: 'Listing 16.22: The contents of the main_layout.handlebars file in the templates
    folder'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.22：模板文件夹中 main_layout.handlebars 文件的内容
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The layout contains an HTML document that includes a `link` element for the
    CSS stylesheet from the `Bootstrap` package and a *SportsStore* header. *Listing
    16.23* completes the setup for the templates.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 布局包含一个包含来自 `Bootstrap` 包的 CSS 样式表 `link` 元素和 *SportsStore* 标头的 HTML 文档。*清单 16.23*
    完成了模板的设置。
- en: 'Listing 16.23: Completing the template setup in the server.ts file in the src
    folder'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.23：在 src 文件夹中的 server.ts 文件中完成模板设置
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In addition to calling the `createTemplates` function, *Listing 16.23* uses
    the Express `static` middleware to serve content from the Bootstrap package. *Listing
    16.24* uses a template to render a response instead of returning a plain string.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调用 `createTemplates` 函数外，*清单 16.23* 还使用 Express 的 `static` 中间件来服务 Bootstrap
    包的内容。*清单 16.24* 使用模板来渲染响应，而不是返回一个纯字符串。
- en: 'Listing 16.24: Using a template in the catalog.ts file in the src/routes folder'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.24：在 src/routes 文件夹中的 catalog.ts 文件中使用模板
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Use a browser to request `http://localhost:5000`, and you will see the response
    shown in *Figure 16.3*, which is produced using a template and a layout.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000`，您将看到 *图 16.3* 中显示的响应，该响应使用模板和布局生成。
- en: '![](img/B21959_16_03.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_16_03.png)'
- en: 'Figure 16.3: Adding layouts to the application'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3：向应用程序添加布局
- en: Creating error handlers
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建错误处理器
- en: Express includes support to generate responses when a request is made for a
    URL for which there is no handler, or when a handler throws an error. To demonstrate
    the default error handlers and prepare for custom replacements, *Listing 16.25*
    defines routes that always create errors.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求一个没有处理器的 URL 或处理器抛出错误时，Express 包括生成响应的支持。为了演示默认错误处理器并准备自定义替换，*清单 16.25* 定义了总是创建错误的路由。
- en: 'Listing 16.25: Creating errors in the catalog.ts file in the src/routes folder'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.25：在 src/routes 文件夹中的 catalog.ts 文件中创建错误
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Use a browser to request `http://localhost:5000/nosuchfile`, and you will see
    the default response created by Express, which is shown on the left side of *Figure
    16.3*. This error is shown when no handler generates a response. Use a browser
    to request `http://localhost:5000/err`, and you will see the other error message
    shown in *Figure 16.4*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000/nosuchfile`，您将看到 Express 创建的默认响应，如 *图 16.3* 左侧所示。当没有处理器生成响应时，将显示此错误。使用浏览器请求
    `http://localhost:5000/err`，您将看到 *图 16.4* 中显示的其他错误消息。
- en: '![](img/B21959_16_04.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_16_04.png)'
- en: 'Figure 16.4: A default Express error message'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4：默认 Express 错误消息
- en: The handler for errors doesn’t deal with errors thrown by asynchronous handlers.
    You can see the problem by requesting `http://localhost:5000/asyncerr`. A stack
    trace will be written at the Node.js console, but no response is sent to the browser,
    which will eventually assume that the application has refused to accept the HTTP
    request.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理器不处理由异步处理器抛出的错误。您可以通过请求 `http://localhost:5000/asyncerr` 来查看问题。堆栈跟踪将被写入
    Node.js 控制台，但不会向浏览器发送任何响应，浏览器最终会假设应用程序已拒绝接受 HTTP 请求。
- en: There is an excellent package that adds support for errors in asynchronous handlers.
    Run the command shown in *Listing 16.26* in the `sportsstore` folder to add the
    package, which is called `express-async-errors`, to the project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个优秀的包增加了对异步处理器中错误的支持。在 `sportsstore` 文件夹中运行 *清单 16.26* 中显示的命令，将名为 `express-async-errors`
    的包添加到项目中。
- en: 'Listing 16.26: Adding the asynchronous error package'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.26：添加异步错误包
- en: '[PRE46]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: For quick reference, this package is described in *Table 16.5*.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速参考，此包在 *表 16.5* 中进行了描述。
- en: 'Table 16.5: The errors package'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.5：错误包
- en: '| Name | Description |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `express-async-errors` | This package adds support to process errors produced
    by asynchronous request handlers. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `express-async-errors` | 此包增加了对异步请求处理器产生的错误的支持。|'
- en: The custom error handlers will use templates to display formatted responses.
    Add a file named `not_found.handlebars` to the `templates` folder with the content
    shown in *Listing 16.27*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义错误处理器将使用模板来显示格式化的响应。将一个名为 `not_found.handlebars` 的文件添加到 `templates` 文件夹中，其内容如
    *清单 16.27* 所示。
- en: 'Listing 16.27: The contents of the not_found.handlebars file in the templates
    folder'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.27：`templates` 文件夹中 not_found.handlebars 文件的内容
- en: '[PRE47]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This template will be rendered when a request isn’t matched by a route. It doesn’t
    include any dynamic content, but it will be displayed within the default layout.
    Next, add a file named `error.handlebars` to the `templates` folder with the content
    shown in *Listing 16.28*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求不匹配路由时，将渲染此模板。它不包含任何动态内容，但将在默认布局中显示。接下来，将名为 `error.handlebars` 的文件添加到 `templates`
    文件夹中，其内容如 *清单 16.28* 所示。
- en: 'Listing 16.28: The contents of the error.handlebars file in the templates folder'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16.28：模板文件夹中 error.handlebars 文件的内容
- en: '[PRE48]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This template uses the `isDevelopment` helper to include details of the error
    when the application is configured in the development environment. *Listing 16.29*
    adds a new configuration section that specifies the error template files.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板使用 `isDevelopment` 辅助器在开发环境中配置应用程序时包含错误的详细信息。*清单 16.29* 添加了一个新的配置部分，指定错误模板文件。
- en: 'Listing 16.29: Adding a configuration section to the server.config.json file
    in the SportsStore folder'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16.29：在 SportsStore 文件夹中的 server.config.json 文件中添加配置部分
- en: '[PRE49]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Add a file named `errors.ts` to the `src` folder with the content shown in *Listing
    16.30*. This file imports the `express-async-errors` module, which is all that’s
    required to use the package, and defines error handlers that use templates to
    generate responses.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 `errors.ts` 的文件添加到 `src` 文件夹中，其内容如 *清单 16.30* 所示。此文件导入 `express-async-errors`
    模块，这是使用此包所需的所有内容，并定义了使用模板生成响应的错误处理器。
- en: 'Listing 16.30: The contents of the errors.ts file in the src folder'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16.30：src 文件夹中 errors.ts 文件的内容
- en: '[PRE50]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `createErrorHandlers` function sets up a request handler that will generate
    a 404 response, and that will be the last handler to run when a request is received.
    There is also an error handler, which works like a middleware component but with
    an additional `error` parameter. There is a danger that something will go wrong
    when rendering an error response, in which case the default error handler will
    be used. To prevent the new error from being the one displayed to the user, a
    try/catch block is used, and the `catch` clause invokes the `next` method using
    the original error, which tells Express which error needs to be processed.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`createErrorHandlers` 函数设置了一个请求处理器，该处理器将生成 404 响应，并且当收到请求时将是最后一个运行的处理器。还有一个错误处理器，它类似于中间件组件，但有一个额外的
    `error` 参数。在渲染错误响应时可能会出错，在这种情况下将使用默认的错误处理器。为了防止新的错误被显示给用户，使用了 try/catch 块，并且 `catch`
    子句使用原始错误调用 `next` 方法，这告诉 Express 需要处理哪个错误。'
- en: To complete the setup, *Listing 16.31* calls the `createErrorHandlers` function
    as part of the application startup.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成设置，*清单 16.31* 在应用程序启动时调用 `createErrorHandlers` 函数。
- en: 'Listing 16.31: Setting up error handlers in the server.ts file in the src folder'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16.31：在 src 文件夹中的 server.ts 文件中设置错误处理器
- en: '[PRE51]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Save the changes, and use a browser to request `http://localhost:5000/nosuchfile`,
    `http://localhost:5000/err`, and `http://localhost:5000/asyncerr`. Asynchronous
    errors are now handled correctly, and users will see the custom error responses,
    which are shown in *Figure 16.5*.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改，并使用浏览器请求 `http://localhost:5000/nosuchfile`、`http://localhost:5000/err`
    和 `http://localhost:5000/asyncerr`。现在异步错误被正确处理，用户将看到自定义的错误响应，如 *图 16.5* 所示。
- en: '![](img/B21959_16_05.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_16_05.png)'
- en: 'Figure 16.5: Custom error responses'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.5：自定义错误响应
- en: Starting the data model
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始数据模型
- en: Once the basic building blocks are in place, it is time to start working on
    the data model. For the SportsStore application, the key data is a catalog of
    products from which customers will make selections. Run the commands shown in
    *Listing 16.32* in the `sportsstore` folder to install the data storage packages.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦基本构建块就位，就到了开始工作于数据模型的时候了。对于 SportsStore 应用程序，关键数据是从中客户将进行选择的商品目录。在 `sportsstore`
    文件夹中运行 *清单 16.32* 中显示的命令以安装数据存储包。
- en: 'Listing 16.32: Adding data storage packages'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16.32：添加数据存储包
- en: '[PRE52]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: For quick reference, these packages are described in *Table 16.6*. I am going
    to use SQLite during development because it is easy to set up and then change
    to PostgreSQL, which is a more conventional database server, in *Chapter 21* to
    prepare for deployment.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速参考，这些包在 *表 16.6* 中进行了描述。我将在开发期间使用 SQLite，因为它易于设置，然后在 *第 21 章* 中将其更改为 PostgreSQL，这是一个更传统的数据库服务器，以准备部署。
- en: 'Table 16.6: The data packages'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.6：数据包
- en: '| Name | Description |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `sqlite3` | This package contains the SQLite database manager, which stores
    its data in a file and was first used in *Chapter 12*. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `sqlite3` | 此包包含 SQLite 数据库管理器，其数据存储在文件中，并在*第 12 章*中首次使用。|'
- en: '| `sequelize` | This package contains the `Sequelize` ORM framework, which
    maps between relational data and JavaScript objects and was introduced in *Chapter
    12*. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `sequelize` | 此包包含 `Sequelize` ORM 框架，它将关系数据映射到 JavaScript 对象，并在*第 12 章*中介绍。|'
- en: There are different ways to create data models for web applications. As I explained
    in *Chapter 12*, I like to use a repository that allows the details of how the
    data is stored to be hidden from the rest of the application. Create the `src/data`
    folder, and add to it a file named `catalog_models.ts` file with the content shown
    in *Listing 16.33*.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网络应用的数据模型有多种方式。正如我在*第 12 章*中解释的，我喜欢使用一个仓库，它允许隐藏数据存储的细节，不让应用的其他部分知道。创建 `src/data`
    文件夹，并向其中添加一个名为 `catalog_models.ts` 的文件，其内容如*列表 16.33*所示。
- en: 'Listing 16.33: The contents of the catalog_models.ts file in the src/data folder'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.33：src/data 文件夹中 catalog_models.ts 文件的内容
- en: '[PRE53]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This file defines three model interfaces that provide the building blocks for
    a basic product catalog. A real online store would have a more complex data model,
    but much of the additional complexity relates to external processes, such as procurement,
    dispatch, customer service, and so on, which won’t be part of the *SportsStore*
    application. These three interfaces in *Listing 16.33* are enough to get started.
    To describe a repository, add a file named `catalog_repository.ts` to the `src/data`
    folder, with the content shown in *Listing 16.34*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件定义了三个模型接口，为基本产品目录提供了构建块。一个真正的在线商店会有更复杂的数据模型，但其中许多额外的复杂性都与外部流程相关，例如采购、配送、客户服务等，这些都不会是
    *SportsStore* 应用程序的一部分。*列表 16.33*中的这三个接口足以开始。要描述一个仓库，请向 `src/data` 文件夹中添加一个名为
    `catalog_repository.ts` 的文件，其内容如*列表 16.34*所示。
- en: 'Listing 16.34: The contents of the catalog_repository.ts file in the src/data
    folder'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.34：src/data 文件夹中 catalog_repository.ts 文件的内容
- en: '[PRE54]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `CatalogRepository` interface defines methods to query and store objects
    that implement the `Product`, `Category`, and `Supplier` interfaces.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`CatalogRepository` 接口定义了查询和存储实现 `Product`、`Category` 和 `Supplier` 接口的对象的方法。'
- en: Implementing the repository
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现仓库
- en: The use of a repository means that the details of how data is stored don’t have
    to align with how data is used by the rest of the application. In *Chapter 12*,
    for example, I used a set of conversion functions to convert the data read from
    the database into the format expected by the rest of the application. This works
    well because it means that the application gets data in a format that is natural
    to work with, and the repository gets data that is easily stored and queried.
    The downside is that data must be transformed as it passes between the repository
    and the rest of the application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使用仓库意味着数据存储的细节不必与应用其他部分使用数据的方式相匹配。例如，在*第 12 章*中，我使用了一组转换函数将数据库读取的数据转换为应用其他部分期望的格式。这很好，因为它意味着应用以自然的方式获取数据，而仓库则获取易于存储和查询的数据。缺点是数据必须在仓库和应用其他部分之间传递时进行转换。
- en: An alternative approach is to implement the repository so that it stores data
    without transformation, ensuring that the results of querying the database, for
    example, are objects whose type matches the expectations of the rest of the application.
    This approach doesn’t require conversion functions, but it can require some effort
    to override the default behavior of the ORM package. This is the approach that
    I am going to take for the SportsStore application.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是实现仓库以不进行转换的方式存储数据，确保查询数据库的结果，例如，是符合应用其他部分期望的对象类型。这种方法不需要转换函数，但可能需要一些努力来覆盖
    ORM 包的默认行为。这就是我打算为 SportsStore 应用程序采取的方法。
- en: '**Note**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: This isn’t an issue if you are using an object database, such as MongoDB, or
    if you are writing native SQL queries without using an ORM package. However, as
    noted in *Chapter 12*, relational databases are used by the majority of projects,
    and ORM packages allow developers to perform complex queries without needing deep
    SQL knowledge.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是对象数据库，如 MongoDB，或者如果你在不需要 ORM 包的情况下编写原生 SQL 查询，这并不是问题。然而，正如*第 12 章*中提到的，关系数据库被大多数项目使用，ORM
    包允许开发者执行复杂的查询，而无需深入了解 SQL。
- en: To get started, create the `src/data/orm/models` folder, and add to it a file
    named `catalog_models.ts`, with the content shown in *Listing 16.35*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，创建 `src/data/orm/models` 文件夹，并向其中添加一个名为 `catalog_models.ts` 的文件，其内容如 *列表
    16.35* 所示。
- en: 'Listing 16.35: The contents of the catalog_models.ts file in the src/data/orm/models
    folder'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.35：src/data/orm/models 文件夹中 catalog_models.ts 文件的内容
- en: '[PRE55]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `ProductModel`, `CategoryModel`, and `SupplierModel` classes conform to
    the interfaces defined in *Listing 16.33*, with some additions required for storage
    in a relational database, which means that the objects created by the ORM package
    will have a superset of the properties expected by the rest of the application
    – notably, the `categoryId` and `supplierId` properties defined by the `ProductModel`
    class, which represent relationships between tables in the database.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProductModel`、`CategoryModel` 和 `SupplierModel` 类符合 *列表 16.33* 中定义的接口，需要添加一些用于关系数据库存储的额外功能，这意味着
    ORM 包创建的对象将具有应用程序其他部分期望的属性的超集——特别是 `ProductModel` 类定义的 `categoryId` 和 `supplierId`
    属性，这些属性代表了数据库表中之间的关系。'
- en: To describe the format and relationships between the model classes, add a file
    named `catalog_helpers.ts` to the `src/data/orm/models` folder with the content
    shown in *Listing 16.36*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述模型类之间的格式和关系，请将一个名为 `catalog_helpers.ts` 的文件添加到 `src/data/orm/models` 文件夹中，其内容如
    *列表 16.36* 所示。
- en: '**The iterative process of defining a data model**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义数据模型的迭代过程**'
- en: Figuring out the `Sequelize` configuration for this example took a couple of
    hours of trial and error, which is not easily conveyed in the linear progression
    shown by a book example. I wrote the code in *Listing 16.35* at the same time
    as the initial implementation of the repository. This allowed me to make sure
    that the data storage and queries worked as expected, and to reset the database
    each time I made a change.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此示例的 `Sequelize` 配置花费了几个小时的时间进行试错，这在书籍示例的线性进展中不容易传达。我在实现存储库的初始实现的同时编写了 *列表
    16.35* 中的代码。这确保了数据存储和查询按预期工作，并且每次我进行更改时都会重置数据库。
- en: 'There are two challenges in this process: ensuring that the database schema
    makes sense and that results conform to the model interfaces.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中有两个挑战：确保数据库模式合理，并且结果符合模型接口。
- en: To check the schema, I use the excellent DB Browser for SQLite ([https://sqlitebrowser.org](https://sqlitebrowser.org))
    package, which allows SQLite databases to be opened and inspected. This allows
    me to check that I have configured `Sequelize` to correctly create the relationships
    between tables, and it also allows me to check that data is written as it should
    be.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查模式，我使用了出色的 DB Browser for SQLite ([https://sqlitebrowser.org](https://sqlitebrowser.org))
    包，它允许打开和检查 SQLite 数据库。这使我能够检查是否已正确配置 `Sequelize` 来创建表之间的关系，并且它还允许我检查数据是否按预期写入。
- en: To check that data objects are created correctly, I query the database and write
    out the results as JSON data. This reveals the structure of the objects created
    by `Sequelize` and lets me see how columns in the database are represented as
    JavaScript object properties.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查数据对象是否正确创建，我查询数据库并将结果作为 JSON 数据写入。这揭示了 `Sequelize` 创建的对象的结构，并让我看到数据库中的列是如何表示为
    JavaScript 对象属性的。
- en: Once you have confirmed that `Sequelize` creates data objects correctly, the
    final step is to make sure that you have described those objects accurately with
    the `declare` keyword. Bear in mind that the TypeScript annotations applied to
    the model classes are not used by `Sequelize` and only exist so that the TypeScript
    compiler can check the way that data is used. The type annotations have no effect
    at runtime because `Sequelize` creates objects dynamically, so it is important
    to confirm that the data is stored and retrieved as you intended and that the
    type annotations correctly describe those processes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确认 `Sequelize` 正确创建了数据对象，最后一步就是确保你已经使用 `declare` 关键字准确描述了这些对象。请注意，应用于模型类的
    TypeScript 注释不会被 `Sequelize` 使用，它们只存在是为了让 TypeScript 编译器检查数据的使用方式。类型注解在运行时没有效果，因为
    `Sequelize` 会动态创建对象，所以重要的是确认数据是以你期望的方式存储和检索的，并且类型注解正确地描述了这些过程。
- en: This can be a time-consuming process – and for some, it is an argument in favor
    of object databases – but working methodically and checking the results after
    each change will keep you on the right path.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个耗时的过程——对于一些人来说，这是支持对象数据库的一个论点——但有条不紊地工作并在每次更改后检查结果将帮助你保持正确的方向。
- en: 'Listing 16.36: The contents of the catalog_helpers.ts file in the src/data/orm/models
    folder'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16.36*：`src/data/orm/models` 文件夹中 catalog_helpers.ts 文件的内容'
- en: '[PRE56]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The `initializeCatalogModels` function accepts a `Sequelize` object, which is
    used to initialize the model classes and create the relationships between them.
    The `belongsTo` and `hasMany` methods used to create the relationships between
    models accept a configuration object, which is used to override the default names
    used for the foreign key and association properties.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`initializeCatalogModels` 函数接受一个 `Sequelize` 对象，用于初始化模型类并创建它们之间的关系。用于创建模型之间关系的
    `belongsTo` 和 `hasMany` 方法接受一个配置对象，用于覆盖用于外键和关联属性的默认名称。'
- en: To complete the initial ORM models, add a file named `index.ts` to the `src/data/orm/models`
    folder with the content shown in *Listing 16.37*.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成初始 ORM 模型，请将一个名为 `index.ts` 的文件添加到 `src/data/orm/models` 文件夹中，其内容如 *Listing
    16.37* 所示。
- en: 'Listing 16.37: The contents of the index.ts file in the src/data/orm/models
    folder'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16.37*：`src/data/orm/models` 文件夹中 index.ts 文件的内容'
- en: '[PRE57]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This file will be updated as new model classes are created and will help organize
    the features required for different parts of the application.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将在创建新的模型类时更新，并有助于组织应用程序不同部分所需的功能。
- en: Creating the repository class
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储库类
- en: My preference for repositories is to break up the code into smaller sections
    that are more easily maintained. This is purely a matter of personal style, but
    I don’t like large code files, and I am willing to accept some degree of complexity
    if I can split up something like a repository into more manageable pieces.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我对存储库的偏好是将代码拆分成更小的部分，这样更容易维护。这纯粹是个人风格的问题，但我不喜欢大型的代码文件，如果我可以将像存储库这样的东西拆分成更易于管理的部分，我愿意接受一定程度的复杂性。
- en: The way that JavaScript supports this style of development is called *mixins*,
    where classes are defined as function results, which allows complex functionality
    to be built up piece by piece. To start the implementation of the repository,
    add a file named `core.ts` to the `src/data/orm` folder, with the content shown
    in *Listing 16.38*.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 支持这种开发方式的方式被称为 *混入*，其中类被定义为函数的结果，这允许逐步构建复杂的功能。要开始实现存储库，请将一个名为 `core.ts`
    的文件添加到 `src/data/orm` 文件夹中，其内容如 *Listing 16.38* 所示。
- en: 'Listing 16.38: The contents of the core.ts file in the src/data/orm folder'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16.38*：`src/data/orm` 文件夹中 core.ts 文件的内容'
- en: '[PRE58]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `BaseRepo` class is responsible for configuring `Sequelize`, which is done
    by reading a configuration section, appending the logging settings, and invoking
    the constructor. There is an `initModelsAndDatabase` model that calls the `initializeModels`
    function and, if configured, resets the database and invokes the `addSeedData`
    method to populate the database with seed data. The `addSeedData` method reads
    a JSON data file and uses the `Sequelize` `bulkCreate` method to store multiple
    objects in a single operation, which is a good way to populate the database. The
    last statement in *Listing 16.38* defines a type that will be used to create the
    `mixin` and represents a type that can be instantiated with the `new` keyword.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseRepo` 类负责配置 `Sequelize`，这是通过读取配置部分，附加日志设置并调用构造函数来完成的。有一个名为 `initModelsAndDatabase`
    的模型，它调用 `initializeModels` 函数，如果配置了，则重置数据库并调用 `addSeedData` 方法用种子数据填充数据库。`addSeedData`
    方法读取一个 JSON 数据文件，并使用 `Sequelize` 的 `bulkCreate` 方法在单个操作中存储多个对象，这是一种填充数据库的好方法。*Listing
    16.38* 中的最后一条语句定义了一个类型，它将被用于创建 `mixin`，并代表一个可以用 `new` 关键字实例化的类型。'
- en: The next step is to define the query features. Add a file named `queries.ts`
    to the `src/data/orm` folder with the content shown in *Listing 16.39*.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义查询功能。将一个名为 `queries.ts` 的文件添加到 `src/data/orm` 文件夹中，其内容如 *Listing 16.39*
    所示。
- en: 'Listing 16.39: The contents of the queries.ts file in the src/data/orm folder'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16.39*：`src/data/orm` 文件夹中 queries.ts 文件的内容'
- en: '[PRE59]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `AddQueries` function accepts a base class and returns a new class that
    adds the `getProducts`, `getCategories`, and `getSuppliers` methods. The `getProducts`
    method includes associated data in its query, and the `model` and `as` properties
    are required to match the configuration in *Listing 16.36*, where the default
    property names used by `Sequelize` were overridden so that query results conformed
    to the data model interfaces.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddQueries` 函数接受一个基类并返回一个新的类，该类添加了 `getProducts`、`getCategories` 和 `getSuppliers`
    方法。`getProducts` 方法在其查询中包含关联数据，并且需要 `model` 和 `as` 属性与 *Listing 16.36* 中的配置匹配，在那里
    `Sequelize` 使用的默认属性名称被覆盖，以便查询结果符合数据模型接口。'
- en: All of the query methods are configured with the `raw` and `nest` options set
    to `true`. The objects created by `Sequelize` cannot be used directly with the
    Handlebars template engine, which places restrictions on how properties are defined.
    The `Sequelize` object appears like a regular JavaScript object, but values are
    presented in a way that allows for changes to be tracked so that the database
    can be updated, which is contrary to the expectations Handlebars has for the data
    it processes. The `raw` option tells `Sequelize` not to process the data it receives,
    which means that simple data objects are created. The `nest` option ensures that
    nested values, such as those produced for associated data, are presented as nested
    data objects.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 所有查询方法都配置了`raw`和`nest`选项设置为`true`。由`Sequelize`创建的对象不能直接与Handlebars模板引擎一起使用，这限制了属性的定义方式。`Sequelize`对象看起来像一个普通的JavaScript对象，但值以允许跟踪更改的方式呈现，以便数据库可以更新，这与Handlebars对处理的数据的期望相反。`raw`选项告诉`Sequelize`不要处理它接收到的数据，这意味着创建了简单的数据对象。`nest`选项确保嵌套值，如为关联数据生成的值，以嵌套数据对象的形式呈现。
- en: These configuration settings were not required in *Part 2* of this book because
    conversion functions were used, which meant that the objects created by `Sequelize`
    were not the ones consumed by the template engine. Using the `raw` setting works
    when the structure of the data read from the database naturally matches the data
    structure the application requires, which depends on the query being executed.
    For queries with complex associations between data – of which there are examples
    in later chapters – the `raw` keyword will produce results that cannot be used
    directly, and in these cases, the best approach is to allow `Sequelize` to process
    the results, and then use the `toJSON` method that is inherited by all `Sequelize`
    model objects to create simple objects that can be used with templates.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置设置在本书的*第二部分*中不是必需的，因为使用了转换函数，这意味着由`Sequelize`创建的对象不是模板引擎所消费的对象。使用`raw`设置在从数据库读取的数据结构自然匹配应用程序所需的数据结构时有效，这取决于正在执行的查询。对于具有复杂数据关联的查询——其中一些示例将在后续章节中给出——`raw`关键字将产生无法直接使用的结果，在这些情况下，最佳方法是允许`Sequelize`处理结果，然后使用所有`Sequelize`模型对象继承的`toJSON`方法创建可以用于模板的简单对象。
- en: The generic type arguments used to describe the `AddQueries` function allow
    TypeScript to understand that the result combines the features defined by the
    base class, plus the new methods. As noted previously, working this way is not
    required, but it does allow small amounts of related functionality to be defined
    in a way that is easy to maintain and combined to produce a more complex component.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 用于描述`AddQueries`函数的泛型类型参数允许TypeScript理解结果结合了基类定义的功能以及新方法。如前所述，这种方式不是必需的，但它确实允许以易于维护的方式定义少量相关功能，并将它们组合以生成更复杂的组件。
- en: To implement the repository storage methods, add a file named `storage.ts` to
    the `src/data/orm` folder, with the content shown in *Listing 16.40*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现存储库存储方法，将名为`storage.ts`的文件添加到`src/data/orm`文件夹中，其内容如*列表16.40*所示。
- en: 'Listing 16.40: The contents of the storage.ts file in the src/data/orm folder'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 列表16.40：src/data/orm文件夹中storage.ts文件的内容
- en: '[PRE60]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `storeCategory` and `storeSupplier` methods define optional parameters that
    allow operations to be included in a transaction. Because these parameters are
    optional, these methods are valid implementations of the ones defined by the repository
    interface. The `storeProduct` method uses the transaction parameter to ensure
    that data is written atomically, and the use of the mixin means that the `sequelize`
    property defined in *Listing 16.38* is accessible in *Listing 16.40*. All three
    methods use the `upsert` method to create or update data if it already exists,
    which means they can be used to both store and update data.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`storeCategory`和`storeSupplier`方法定义了可选参数，允许操作包含在事务中。因为这些参数是可选的，所以这些方法是存储库接口定义的有效实现。`storeProduct`方法使用事务参数确保数据以原子方式写入，而使用混合函数意味着在*列表16.38*中定义的`sequelize`属性在*列表16.40*中是可访问的。所有三个方法都使用`upsert`方法创建或更新数据（如果它已存在），这意味着它们可以用于存储和更新数据。'
- en: To combine the three parts of the mixin into a single class, add a file named
    `index.ts` to the `src/data/orm` folder with the content shown in *Listing 16.41*.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要将混合函数的三个部分组合成一个类，将名为`index.ts`的文件添加到`src/data/orm`文件夹中，其内容如*列表16.41*所示。
- en: 'Listing 16.41: The contents of the index.ts file in the src/data/orm folder'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.41：src/data/orm 文件夹中 index.ts 文件的内容
- en: '[PRE61]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The process of creating a mixin starts by calling the function that adds the
    query methods to the `BaseRepo` class, like this:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 mixin 的过程首先是通过调用向 `BaseRepo` 类添加查询方法的函数开始的，如下所示：
- en: '[PRE62]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The result is a class that combines the base features and the query methods,
    and this is passed to the function that adds the storage methods:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个结合了基功能和查询方法的类，并将其传递给添加存储方法的函数：
- en: '[PRE63]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The result is a class that defines all the methods and can be instantiated
    with the new keyword. The combined class can be instantiated and used as an implementation
    of the `CategoryRepository` interface:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个定义了所有方法的类，可以使用新关键字实例化。组合后的类可以实例化并用作 `CategoryRepository` 接口的实现：
- en: '[PRE64]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: I like being able to compose features this way, and I find it useful to be able
    to keep the storage methods separate from the query methods, for example, but
    I appreciate that not everyone dislikes long code files as much as I do. However,
    even if you don’t want to adopt this technique in your projects, it does serve
    as a demonstration of the flexibility that JavaScript provides to compose features
    with class expressions.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢以这种方式组合功能，我发现能够将存储方法与查询方法分开很有用，例如，但我欣赏不是每个人都像我一样不喜欢长代码文件。然而，即使你不想在你的项目中采用这种技术，它也证明了
    JavaScript 提供的将功能与类表达式组合的灵活性。
- en: '**Note**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: I use a repository for the main parts of the *SportsStore* application. However,
    just to show the alternative, the administration features in *Chapter 20* are
    implemented by working directly with `Sequelize` in the HTTP request handlers.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用一个仓库来处理 *SportsStore* 应用程序的主要部分。然而，为了展示替代方案，*第 20 章* 中的管理功能是通过在 HTTP 请求处理器中直接与
    `Sequelize` 交互来实现的。
- en: To instantiate the repository implementation so that an instance can be used
    by the rest of the application, add a file named `index.ts` to the `src/data`
    folder with the content shown in *Listing 16.42*.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实例化仓库实现，以便整个应用程序可以使用该实例，请将一个名为 `index.ts` 的文件添加到 `src/data` 文件夹中，其内容如 *列表
    16.42* 所示。
- en: 'Listing 16.42: The contents of the index.ts file in the src/data folder'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.42：src/data 文件夹中 index.ts 文件的内容
- en: '[PRE65]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This file will be the point at which the implementations of repository interfaces
    will be created and added to in later chapters, as different types of data are
    added to the application. But for now, the file exports an object named `catalog_repository`
    that implements the `CatalogRepository` interface. Notice that the TypeScript
    compiler can determine that the combination of methods conforms to the `CatalogRepository`
    interface.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将成为在后续章节中创建和添加仓库接口实现的地方，因为随着不同类型的数据被添加到应用程序中。但到目前为止，该文件导出一个名为 `catalog_repository`
    的对象，该对象实现了 `CatalogRepository` 接口。请注意，TypeScript 编译器可以确定方法的组合符合 `CatalogRepository`
    接口。
- en: Defining the configuration settings
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义配置设置
- en: The repository is set up using configuration settings, which are defined in
    *Listing 16.43*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库是通过配置设置设置的，这些设置在 *列表 16.43* 中定义。
- en: 'Listing 16.43: Adding settings to the server.config.json file in the SportsStore
    folder'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.43：向 SportsStore 文件夹中的 server.config.json 文件添加设置
- en: '[PRE66]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The `catalog:orm_repo` section is read by the base class defined in *Listing
    16.38*. The `settings` section is passed to the `Sequelize` constructor and specifies
    that data should be stored in an SQLite database file named `catalog.db`. The
    `logging` setting determines whether the repository configures `Sequelize` to
    log messages, and the `rest_db` setting determines whether the database is reset
    and seeded every time the repository is created, which can be useful during development
    but will be disabled when the application is prepared for deployment in *Chapter
    21*.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`catalog:orm_repo` 部分由 *列表 16.38* 中定义的基类读取。`settings` 部分传递给 `Sequelize` 构造函数，并指定数据应存储在名为
    `catalog.db` 的 SQLite 数据库文件中。`logging` 设置确定仓库是否配置 `Sequelize` 记录消息，而 `rest_db`
    设置确定每次创建仓库时数据库是否重置并初始化，这在开发期间可能很有用，但在 *第 21 章* 中准备应用程序部署时将被禁用。'
- en: Defining the seed data
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义种子数据
- en: The `seed_file` setting added in *Listing 16.43* specifies the name of the file
    that will be used to seed the catalog database with product data. To define the
    data, add a file named `products.json` to the `sportsstore` folder with the content
    shown in *Listing 16.44*.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16.43* 中添加的 `seed_file` 设置指定了用于用产品数据填充目录数据库的文件名。要定义数据，请将名为 `products.json`
    的文件添加到 `sportsstore` 文件夹中，其内容如 *列表 16.44* 所示。'
- en: 'Listing 16.44: The contents of the products.json file in the SportsStore folder'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.44：SportsStore 文件夹中 products.json 文件的内容
- en: '[PRE67]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This data defines three suppliers, three categories, and nine products. Real
    online stores have larger catalogs, of course, but this data will be enough to
    continue building the application.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据定义了三个供应商、三个类别和九个产品。当然，真正的在线商店拥有更大的目录，但这些数据足以继续构建应用程序。
- en: Using the catalog data
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用目录数据
- en: The next step is to confirm that the repository works as expected by presenting
    the user with a list of products. *Listing 16.45* uses the repository to read
    the product data from the database.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确认存储库按预期工作，通过向用户展示产品列表来验证。*列表 16.45* 使用存储库从数据库中读取产品数据。
- en: 'Listing 16.45: Querying data in the catalog.ts file in the src/routes folder'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.45：在 src/routes 文件夹中的 catalog.ts 文件中查询数据
- en: '[PRE68]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Replace the contents of the `index.handlebars` file in the `templates` folder
    with the content shown in *Listing 16.46*.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `templates` 文件夹中 `index.handlebars` 文件的内容替换为 *列表 16.46* 中显示的内容。
- en: 'Listing 16.46: The contents of the index.handlebars file in the templates folder'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16.46：在模板文件夹中 index.handlebars 文件的内容
- en: '[PRE69]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This isn’t the final presentation of the data, but putting the product data
    into a table is a good way to check that all of the fields are accessible and
    read from the database, before figuring out the detailed formatting. Use a browser
    to request `http://localhost:5000`, and you will see the data shown in *Figure
    16.6*.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是数据的最终展示，但将产品数据放入表格是一个很好的方法，以确保所有字段都是可访问的，并且可以从数据库中读取，然后再确定详细的格式。使用浏览器请求 `http://localhost:5000`，你将看到
    *图 16.6* 中显示的数据。
- en: '![](img/B21959_16_06.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_16_06.png)'
- en: 'Figure 16.6: Displaying data'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.6：显示数据
- en: Summary
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we started work on the *SportsStore* project, and we demonstrated
    how the key features described in earlier chapters are combined to create a more
    realistic web application:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始着手 *SportsStore* 项目，并展示了如何将前面章节中描述的关键特性结合起来，创建一个更真实的 Web 应用程序：
- en: The development tools monitor TypeScript files and other project resources so
    that the code is built and executed when changes are detected.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发工具监控 TypeScript 文件和其他项目资源，以便在检测到更改时构建和执行代码。
- en: The configuration system locates and merges JSON files to present consolidated
    settings that can be read consistently by the rest of the application and overridden
    with environment-specific values.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置系统定位并合并 JSON 文件，以提供可以由应用程序的其他部分一致读取并可以由特定环境值覆盖的汇总设置。
- en: Routes defined using the Express package handle HTTP requests and generate responses,
    using templates rendered by the Handlebars template engine.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Express 包定义的路由处理 HTTP 请求并生成响应，使用 Handlebars 模板引擎渲染的模板。
- en: Custom error handlers produce responses consistent with the rest of the application
    and deal with errors in asynchronous request handlers.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义错误处理器生成与应用程序其他部分一致的响应，并处理异步请求处理器中的错误。
- en: The `Sequelize` package creates a database that stores product data in an SQLite
    database, which will be replaced with PostgreSQL before deployment.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sequelize` 包创建一个数据库，该数据库将产品数据存储在 SQLite 数据库中，在部署前将被 PostgreSQL 替换。'
- en: The database is reset and reseeded with data every time the application starts.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次应用程序启动时，数据库都会重置并重新填充数据。
- en: In the next chapter, we will continue building the SportsStore application by
    completing the product catalog and introducing a shopping cart.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续构建 SportsStore 应用程序，通过完成产品目录并引入购物车来继续。
