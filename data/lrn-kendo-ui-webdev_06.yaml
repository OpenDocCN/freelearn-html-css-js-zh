- en: Chapter 6. Menu and ListView
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 菜单和ListView
- en: The Kendo UI Menu widget is designed to give you an easy way to implement an
    interactive JavaScript menu that opens and closes as the user commands and providers
    a rich visual display on a web page. These types of menus are available through
    other tricks as well, such as CSS, but the Kendo UI widget gives you a much more
    configurable framework and access to a simplified JavaScript API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI菜单小部件旨在为您提供一种简单的方法来实现交互式JavaScript菜单，该菜单根据用户的命令打开和关闭，并在网页上提供丰富的视觉显示。这些类型的菜单也可以通过其他技巧实现，例如CSS，但Kendo
    UI小部件为您提供了一个更可配置的框架和访问简化的JavaScript API。
- en: The Kendo UI ListView widget is a control for visualizing a collection of data
    elements in a graphically pleasing way, especially if the data contains images
    or special styles. Like all Kendo UI options, the configuration is consistent
    and sensible and allows you to create great-looking content, and provides display
    options for editing and selection.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI ListView小部件是一个用于以图形方式可视化数据元素集合的控制项，特别是如果数据包含图像或特殊样式。像所有Kendo UI选项一样，配置是一致的、合理的，并允许您创建外观出色的内容，并提供用于编辑和选择的显示选项。
- en: These controls are a good addition to your toolset for creating modern web pages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些控件是您创建现代网页工具集的良好补充。
- en: Learning the Menu widget basics
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习菜单小部件基础
- en: 'The Menu widget creates a fantastic drop-down menu with fly-out sections for
    the menu''s contents. It is functionally rich and requires very little code for
    most implementations. As an introduction, here is a code sample of a basic menu
    created from a static unordered HTML list:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件创建了一个出色的下拉菜单，其中包含飞出部分以显示菜单内容。它功能丰富，对于大多数实现来说，代码量非常少。作为介绍，这里是一个从静态无序列表HTML创建的基本菜单的代码示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a menu showing different music styles, videos, and some other options
    just to demonstrate how the code looks. The top-level `<li>` elements in the unordered
    list all appear as actual menu headings in the output, in this example they are
    **Music**, **Videos**, **Events**, and **News**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个显示不同音乐风格、视频以及其他一些选项的菜单，仅用于演示代码的外观。无序列表中的顶级`<li>`元素在输出中均显示为实际的菜单标题，在本例中它们是**音乐**、**视频**、**活动**和**新闻**。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that each of these top-level elements contains its own name and then
    can optionally contain a nested unordered list (`<ul>`) within itself, which becomes
    the choices that appear when that top-level item is selected on the page.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些顶级元素每个都包含自己的名称，并且可以可选地包含一个嵌套的无序列表（`<ul>`），它将成为在页面上选择顶级项时出现的选项。
- en: Moving down the chain, each of the `<li>` elements in the nested list can also
    contain its own `<ul>` for a further nested menu of options. This creates a cascading
    effect where menu options can continue to expand as you move your mouse to different
    options. Also note that the final top-level `<li>` item, `News`, is marked with
    a disabled attribute which means that it will still display in the output but
    not be selectable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在向下移动链的过程中，嵌套列表中的每个`<li>`元素也可以包含它自己的`<ul>`，以创建进一步的嵌套菜单选项。这会产生级联效果，当您将鼠标移动到不同的选项时，菜单选项可以继续展开。此外，请注意，最终的顶级`<li>`项“新闻”带有禁用属性，这意味着它仍然会在输出中显示，但不能被选择。
- en: 'Here is the output from this code as the page is first loaded:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面首次加载时的输出：
- en: '![Learning the Menu widget basics](img/4346OT_06_08.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![学习菜单小部件基础](img/4346OT_06_08.jpg)'
- en: Here is the Menu widget once the mouse is hovered over some of the elements
    in the menu. Try this on your own and see how fast and fluid the menu reacts to
    these events; it is very impressive.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在菜单中的某些元素上时，这就是菜单小部件的外观。自己试一试，看看菜单对这些事件反应有多快、多流畅；这非常令人印象深刻。
- en: '![Learning the Menu widget basics](img/4346OT_06_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![学习菜单小部件基础](img/4346OT_06_01.jpg)'
- en: 'Like most of the widgets in the Kendo UI framework, the Menu widget does not
    have to run from static HTML, it can be fuelled by a `DataSource` object of either
    local or remote data. Here is the code adapted to use a local `DataSource` object
    instead of static HTML:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kendo UI框架中的大多数小部件一样，菜单小部件不必从静态HTML运行，它可以由本地或远程数据的`DataSource`对象提供动力。以下是使用本地`DataSource`对象而不是静态HTML的代码示例：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the `DataSource` object can be configured with all the options that
    you have seen in the earlier chapters, and could just as easily be configured
    with a transport property for remote data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`DataSource`对象可以配置您在前面章节中看到的所有选项，并且可以轻松地配置一个用于远程数据的传输属性。
- en: 'The output is identical to the static HTML we used the first time:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与第一次使用的静态HTML相同：
- en: '![Learning the Menu widget basics](img/4346OT_06_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![学习菜单小部件基础](img/4346OT_06_02.jpg)'
- en: 'As is the case with most of the Kendo UI widgets, the interactive content on
    the page is identical whether the data comes from the page mark-up or from a JavaScript
    data source. To adapt this to use the MVC extension methods, we can create an
    MVC View with the following source code in the `cshtml` file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数Kendo UI小部件一样，无论数据来自页面标记还是JavaScript数据源，页面上的交互内容都是相同的。为了适应使用MVC扩展方法，我们可以在`cshtml`文件中创建一个MVC视图，其源代码如下：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note, how in this code sample, I have declared the data statically. It could
    just as easily be gathered from a different source using logic within C# code,
    or even left as part of the JavaScript and retrieved from a remote source across
    HTTP.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个代码示例中，我声明了数据是静态的。它也可以很容易地从C#代码中的不同源收集，或者甚至将其作为JavaScript的一部分，并通过HTTP从远程源检索。
- en: 'The output, as you can see from this screenshot, is identical to the other
    two code samples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个屏幕截图可以看出，输出与另外两个代码示例相同：
- en: '![Learning the Menu widget basics](img/4346OT_06_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![学习菜单小部件基础](img/4346OT_06_03.jpg)'
- en: This illustrates three unique ways to create a Kendo UI Menu widget and the
    differences between them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了创建Kendo UI菜单小部件的三种独特方法及其之间的区别。
- en: Menu items with images
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有图像的菜单项
- en: Menu items so far have only included text. The Menu widget, however, can also
    contain an `imageUrl` property or a `spriteCssClass` property to display an image
    along with the text. The image or sprite will appear as an icon to the left of
    the menu item text.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，菜单项仅包括文本。然而，菜单小部件还可以包含一个`imageUrl`属性或一个`spriteCssClass`属性，以显示与文本一起的图像。图像或精灵将作为图标出现在菜单项文本的左侧。
- en: 'Here is an example of using the `imageUrl` property to show an icon for the
    `Videos` menu item:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用`imageUrl`属性来显示`Videos`菜单项图标的示例：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'By adding this property, the output now displays the image in the menu:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加此属性，输出现在在菜单中显示了图像：
- en: '![Menu items with images](img/4346OT_06_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![带有图像的菜单项](img/4346OT_06_04.jpg)'
- en: 'This is how the code sample would look in MVC:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码示例在MVC中的样子：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice the `ImageUrl` extension method that adds the image to the output.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意添加到输出中的`ImageUrl`扩展方法。
- en: 'To use a sprite, you would first set the background image of the menu items
    that should display the icons and then indicate a CSS class using the `spriteCssClass`
    property that will specify the pixel offset for each particular icon. Each menu
    item that has a `spriteCssClass` property specified will automatically be decorated
    with the `k-sprite` CSS class so that this is wired up properly. Here is a potential
    example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用精灵图，您首先需要设置应显示图标的菜单项的背景图像，然后使用`spriteCssClass`属性指定一个CSS类，该类将指定每个特定图标的像素偏移。任何指定了`spriteCssClass`属性的菜单项都将自动装饰上`k-sprite`
    CSS类，以确保正确连接。以下是一个可能的示例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The CSS section of this sample shows assigning the `background-image` property
    for all of the `k-sprite` class-decorated elements and also designating two sprite
    pixel `background-position` styles. The script section shows the `spriteCssClass`
    property in use, which will assign that portion of the sprites image as the icon
    for that menu item.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的CSS部分显示了为所有`k-sprite`类装饰的元素分配`background-image`属性，并指定了两个精灵像素`background-position`样式。脚本部分显示了正在使用的`spriteCssClass`属性，它将为该菜单项分配精灵图像的相应部分作为图标。
- en: Menu items with URLs
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有URL的菜单项
- en: 'So far all of the examples I have shown are menu items that do not perform
    any actions when selected. All that you have to do is add the `url` property to
    the menu item in order to make it navigate when clicked on. So, for any menu item
    that you want to navigate the user to a different page, include a `url` property,
    as shown here, and it will do so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我展示的所有示例都是当选择时不会执行任何操作的菜单项。您需要做的只是将`url`属性添加到菜单项中，以便在点击时导航。因此，对于您想要将用户导航到不同页面的任何菜单项，请包括一个`url`属性，如这里所示，它将这样做：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Menu items with URLs](img/4346OT_06_09.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![带有URL的菜单项](img/4346OT_06_09.jpg)'
- en: Notice how the web browser in this screenshot is showing the URL that the **Videos**
    menu item now navigates to.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个屏幕截图中的网络浏览器显示了**Videos**菜单项现在导航到的URL。
- en: Menu API configuration options
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单API配置选项
- en: The Kendo UI Menu widget, as should be expected by now, is configurable through
    a full set of API properties and methods. These options are properties that can
    be configured, so that the Menu widget becomes suited to the needs of your web
    page and style. These configurations are specified at the point in code where
    you create the Menu widget. These sections will show you the options you can use.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如您现在所期望的，Kendo UI菜单小部件可以通过一组完整的API属性和方法进行配置。这些选项是可以配置的属性，以便菜单小部件能够满足您的网页和风格需求。这些配置是在创建菜单小部件的代码点中指定的。以下部分将向您展示您可以使用哪些选项。
- en: The animation property
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画属性
- en: 'The animation action of the Kendo UI Menu can be configured for style, speed,
    and direction. When you configure the open action of the menu, Kendo will automatically
    assign the reverse behavior for the `close` action. If you want to configure the
    `close` action independently of the `open` action, then you should configure them
    both separately, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI菜单的动画动作可以配置为样式、速度和方向。当您配置菜单的打开动作时，Kendo会自动为`close`动作分配相反的行为。如果您想独立于`open`动作配置`close`动作，那么您应该分别配置它们，如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The direction property
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方向属性
- en: The `direction` property determines which direction the menus will open when
    the user hovers over them. The available options here are `top`, `bottom`, `left`,
    and `right`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`direction`属性决定了当用户悬停在菜单上时，菜单将打开的方向。这里可用的选项有`top`、`bottom`、`left`和`right`。'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Some more options
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多选项
- en: 'There are a few additional options available for configuring menu behavior.
    You can configure how the menu behaves in relation to mouse movement and clicks
    with the `closeOnClick` , `openOnClick`, and `hoverDelay` properties. You can
    configure whether the overall menu is oriented horizontally or vertically with
    the `orientation` property, and you can instruct the Kendo UI framework on how
    you want menus to fit to a page with the `popupCollision` property. All of this
    is shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置菜单行为方面，还有一些额外的选项可供选择。您可以使用`closeOnClick`、`openOnClick`和`hoverDelay`属性来配置菜单如何根据鼠标移动和点击行为进行操作。您可以使用`orientation`属性来配置整个菜单是水平还是垂直排列，并且可以通过`popupCollision`属性来指导Kendo
    UI框架如何使菜单适应页面。所有这些配置都可以在这里找到：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring menu methods
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置菜单方法
- en: 'Some of the methods for the Kendo UI Menu widget require that you get a reference
    to an existing menu item object (not just the HTML element) as a reference point
    for appending or inserting some additional menu items. In this case, you can access
    the menu item objects through a reference to the Kendo Menu like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI菜单小部件的一些方法需要您获取现有菜单项对象的引用（而不仅仅是HTML元素）作为附加或插入一些额外菜单项的参考点。在这种情况下，您可以通过对Kendo菜单的引用来访问菜单项对象，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this code, you can get a reference to the Kendo Menu object from the same
    line of code where you instantiate it. This way, you can reference this object
    in other parts of your page and JavaScript logic. You can also get a reference
    to the Kendo Menu object by calling `.data(…)` on the HTML element that contains
    it at any point in your code, but doing it in one step is nice.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，您可以从实例化它的同一行代码中获取Kendo菜单对象的引用。这样，您可以在页面的其他部分和JavaScript逻辑中引用此对象。您还可以在任何代码点通过在包含它的HTML元素上调用`.data(…)`来获取Kendo菜单对象的引用，但一次性完成是更好的选择。
- en: 'Once you have this reference, you can access the children inside of the Kendo
    Menu through the `element` property:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了这个引用，您就可以通过`element`属性访问Kendo菜单内部的子项：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code sample, we are accessing the fourth `li` element in the children
    of this particular menu object. The return value here will be a JavaScript object
    that can be used as the reference point for the `append`, `insertAfter`, and `insertBefore`
    methods.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码示例中，我们正在访问这个特定菜单对象的子代中的第四个`li`元素。这里的返回值将是一个JavaScript对象，可以用作`append`、`insertAfter`和`insertBefore`方法的参考点。
- en: The append(), insertAfter(), and insertBefore() methods
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: append()、insertAfter()和insertBefore()方法
- en: 'The `append` method takes two arguments: the JSON notation of the new menu
    item(s) to be appended as children, and a reference to the menu item that will
    be the parent of the newly appended items:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`append`方法接受两个参数：要附加为子项的新菜单项的JSON表示，以及将作为新附加项父项的菜单项的引用：'
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code would append this menu item as a child to the second menu item on
    the page. The `insertAfter` and `insertBefore` methods work exactly the same way,
    except that they insert the new menu items at the same menu level and either after
    or before the reference item respectively.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将此菜单项作为子项附加到页面上的第二个菜单项。`insertAfter` 和 `insertBefore` 方法的工作方式完全相同，只是它们在相同的菜单级别插入新的菜单项，分别是在参考项之后或之前。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All of these methods return the Menu object to support method chaining.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都返回菜单对象以支持方法链。
- en: The close(), enable(), open(), and remove() methods
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: close()、enable()、open() 和 remove() 方法
- en: These methods for the Kendo UI Menu do not require a JavaScript object reference;
    they operate directly on the HTML elements within the menu on the page. Because
    of this, you can use a jQuery selector type syntax to choose which item(s) to
    act upon in a familiar syntax.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Kendo UI 菜单的方法不需要 JavaScript 对象引用；它们直接在页面菜单中的 HTML 元素上操作。因此，您可以使用 jQuery
    选择器类型语法来选择要操作的项目（项），并使用熟悉的语法。
- en: 'The `enable` method takes two parameters: the selector for the HTML element(s)
    and then a `true` or `false` value to indicate whether the item should be enabled
    (true) or disabled (false):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable` 方法接受两个参数：HTML 元素（元素）的选择器和表示项目应启用（true）或禁用（false）的 `true` 或 `false`
    值：'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This particular code sample will disable the element with an HTML `id` value
    of `secondItem`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此特定的代码示例将禁用具有 HTML `id` 值为 `secondItem` 的元素。
- en: 'The other methods here, that is, `close`, `open`, and `remove`, only take a
    single parameter which is the selector of the HTML element(s). Please note that
    the element''s ID values or class names are not assigned by the framework for
    you, you have to assign these values to your elements yourself in order to select
    them:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里其他的方法，即 `close`、`open` 和 `remove`，只接受一个参数，即 HTML 元素（元素）的选择器。请注意，框架不会为您分配元素的
    ID 值或类名，您必须自己将这些值分配给您的元素，以便选择它们：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All of these methods return the Menu object to support method chaining.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都返回菜单对象以支持方法链。
- en: Menu events
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单事件
- en: 'There are three events fired by the Kendo UI Menu: `close`, `open`, and `select`.
    Each of these is given an event argument with an `item` property that contains
    the HTML `<li>` element that was closed, opened, or selected, as shown here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 菜单触发三个事件：`close`、`open` 和 `select`。每个事件都提供了一个包含关闭、打开或选择的 HTML `<li>`
    元素的 `item` 属性的事件参数，如下所示：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code sample shows a method wired up to handle the select event, which
    will then disable all menu items with a class name of `green`. Since this code
    is not considering which specific element was selected, it will fire the same
    code regardless of which element was selected. Here is a different example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了连接到处理选择事件的某个方法，该事件将禁用所有具有类名 `green` 的菜单项。由于此代码没有考虑选择了哪个特定元素，因此无论选择了哪个元素，它都会触发相同的代码。以下是一个不同的示例：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code examines the specific element that was selected and alerts its `innerHTML`
    property back to the user.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检查所选的特定元素，并将它的 `innerHTML` 属性弹回用户。
- en: The Kendo UI ListView
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kendo UI ListView
- en: The Kendo UI ListView widget is designed to present a collection of data on
    a web page with a richer set of functionality than a standard HTML list. The ListView
    widget retrieves its data through a Kendo `DataSource` object, it presents its
    data through one or more Kendo Template blocks, and it allows interaction with
    its data by giving the user the ability to both select and edit the data on the
    page.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI ListView 小部件旨在在网页上以比标准 HTML 列表更丰富的功能集展示数据集合。ListView 小部件通过 Kendo `DataSource`
    对象检索其数据，通过一个或多个 Kendo 模板块展示其数据，并允许用户通过在页面上选择和编辑数据与数据交互。
- en: ListView basics
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ListView 基础
- en: 'Basically, the ListView widget displays a collection of data by using a template
    and a `DataSource` object:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，ListView 小部件通过使用模板和 `DataSource` 对象来显示数据集合：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following code sample, from the top down, shows some styles for the elements
    that will appear inside the ListView widget. These style declarations are important
    in order to properly lay out the images inside the ListView widget on the web
    page:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例从上到下显示了将出现在 ListView 小部件内部的元素的一些样式。这些样式声明对于在网页上正确布局 ListView 小部件内部的图像非常重要：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We then create the `div` element that will contain the ListView widget and
    the Kendo UI Template that structures the individual ListView elements. This template
    determines how each item in the ListView will be rendered inside the web page.
    Any changes to the ListView items must occur here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个 `div` 元素，它将包含 ListView 小部件和 Kendo UI 模板，该模板结构化单个 ListView 元素。这个模板决定了
    ListView 中的每个项目如何在网页内渲染。对 ListView 项的任何更改都必须在这里进行：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then have the JavaScript object literal that contains some data and the
    instantiation of the ListView where the `dataSource` and `template` properties
    are set:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有包含一些数据和 ListView 实例化的 JavaScript 对象字面量，其中设置了 `dataSource` 和 `template`
    属性：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As always, remember that the `DataSource` object can be fully configured to
    point to remote data sources, can be structured using a schema, or can use any
    of the other options that you might want to take advantage of in a production
    scenario.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，请记住，`DataSource` 对象可以完全配置以指向远程数据源，可以使用模式进行结构化，或者可以使用您在生产场景中可能想要利用的任何其他选项。
- en: '![ListView basics](img/4346OT_06_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![ListView 基础](img/4346OT_06_05.jpg)'
- en: You can see how each element from the `DataSource` object has been rendered
    with the template, styled, and presented on the page as you would expect.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到 `DataSource` 对象中的每个元素是如何使用模板渲染的，并且按照预期在页面上进行了样式化和展示。
- en: Selecting elements with ListView
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ListView 选择元素
- en: 'The ListView widget has a richer set of behaviors to offer than simply displaying
    data, however, and to start let''s look at how it allows "selection" of elements.
    In this code sample, I have added some more properties and an event handler to
    the ListView instantiation logic to demonstrate this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ListView 小部件提供的功能远不止显示数据，首先让我们看看它是如何允许“选择”元素的。在这个代码示例中，我向 ListView 实例化逻辑中添加了一些更多属性和事件处理程序来演示这一点：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `selectable` property has been set with `multiple` to allow for multiple
    selection of items (you can select multiple items on the page by holding the *Ctrl*
    button on the keyboard while clicking with a mouse). We also added an event handler
    for the `change` event so that we can see an alert box that displays which elements
    have been selected.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectable` 属性已设置为 `multiple` 以允许多选项目（您可以通过在键盘上按住 *Ctrl* 键并使用鼠标点击来在页面上选择多个项目）。我们还添加了一个
    `change` 事件的事件处理程序，以便我们可以看到一个显示已选择元素的警告框。'
- en: In the `notifyUser` event handler function, I want to explain what is happening
    because it looks a bit confusing at first glance. The variable selected is given
    an array value of all of the selected elements' `animalName` property values.
    It does this by using `$.map` on the results of `this.select()`. What is `this.select()`?
    Well, when Kendo fires an event from a widget, it sets the context of that event
    handler so that this refers to the Kendo widget that fired the event. So, in this
    case, this is a reference to the ListView itself. This means that calling `this.select()`
    in this event handler will return a collection of all of the selected elements
    within the ListView. The function as the second parameter of `$.map` then grabs
    the `animalName` property from each of these elements by using its index from
    the `animals` array. The result of this code is an array of strings containing
    all of the `animalName` values of the selected elements from the ListView. This
    is then displayed to the user using `[array].join()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `notifyUser` 事件处理函数中，我想解释一下正在发生的事情，因为乍一看可能有点令人困惑。变量 `selected` 被赋予了一个包含所有已选择元素
    `animalName` 属性值的数组。它是通过在 `this.select()` 的结果上使用 `$.map` 来做到这一点的。什么是 `this.select()`？好吧，当
    Kendo 从小部件触发事件时，它会设置该事件处理程序的范围，使得 `this` 指向触发事件的 Kendo 小部件。所以，在这种情况下，`this` 是对
    ListView 的引用。这意味着在这个事件处理程序中调用 `this.select()` 将返回 ListView 中所有已选择元素的集合。`$.map`
    的第二个参数函数然后通过使用 `animals` 数组的索引从这些元素中获取 `animalName` 属性。这段代码的结果是一个包含所有已选择元素的 `animalName`
    值的字符串数组。然后使用 `[array].join()` 将其显示给用户。
- en: 'Here is the output with some items selected and the alert box showing from
    the event handler:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是选择了一些项目并显示从事件处理程序中出现的警告框的输出：
- en: '![Selecting elements with ListView](img/4346OT_06_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ListView 选择元素](img/4346OT_06_06.jpg)'
- en: Notice how the names of the animals are all showing up in the alert box that
    has popped up on the page. This is great because it means that you can accurately
    track selections that the user makes within your ListView and respond to those
    actions however you need to.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意动物名称是如何全部显示在页面上弹出的 alert 框中的。这很好，因为这意味着您可以准确地跟踪用户在 ListView 中所做的选择，并按需对这些操作做出响应。
- en: Editing elements with ListView
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ListView 编辑元素
- en: The ListView widget also provides a good syntax for allowing edits to the data
    within the `DataSource` object. You need to create a separate template to display
    that allows the user to make edits and then make sure that you assign some of
    the Kendo-specific class names, so that it displays and understand the commands
    correctly. Here is the code of the new template. Place it right beneath the template
    we created in the last example.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ListView 小部件还提供了一种良好的语法，允许编辑 `DataSource` 对象内的数据。您需要创建一个单独的模板来显示允许用户进行编辑的内容，然后确保您分配了一些
    Kendo 特定的类名，以便它能够正确显示和理解命令。以下是新模板的代码。将其放置在最后一个示例中创建的模板下方。
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Did you notice the unusual characters in the `href` attribute of the two buttons
    in the template? The double-backslash characters, `\\#`, prevent the hash mark
    from being rendered as part of the Kendo template. If this hash mark was not escaped
    with these backslashes, the template would not render at all.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您注意到模板中两个按钮的 `href` 属性中的不寻常字符了吗？双反斜杠字符 `\\#` 防止哈希标记被渲染为 Kendo 模板的一部分。如果这个哈希标记没有被这些反斜杠转义，模板将根本无法渲染。
- en: 'Next, we have added some more configurations to the JavaScript block that creates
    our ListView widget. Specifically, we now have an `editTemplate` property that
    points to the template that we just created:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在创建我们的 ListView 小部件的 JavaScript 块中添加了一些更多配置。具体来说，我们现在有一个 `editTemplate`
    属性，它指向我们刚刚创建的模板：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is a screenshot where the name of the Caribou has been edited to Reindeer:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个截图，其中 Caribou 的名称已被编辑为 Reindeer：
- en: '![Editing elements with ListView](img/4346OT_06_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ListView 编辑元素](img/4346OT_06_07.jpg)'
- en: ListView API and configuration
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ListView API 和配置
- en: 'We have already covered several of the aspects of the ListView in our preceding
    examples; here are the remaining configuration properties from the documentation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在先前的示例中涵盖了 ListView 的几个方面；以下是文档中剩余的配置属性：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: ListView methods
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ListView 方法
- en: 'The ListView widget has several methods available. Most of them are designed
    to manipulate the items within the ListView, so that you can control the behavior
    through code. Like with any widget, you need a reference to the listView JavaScript
    object before you can call these methods, like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ListView 小部件有几种可用方法。大多数方法都是设计用来操作 ListView 中的项目，以便您可以通过代码来控制行为。像任何小部件一样，在调用这些方法之前，您需要获得
    listView JavaScript 对象的引用，如下所示：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Get the reference through the `.data(...)` method and then you can call the
    ListView-specific methods. Here is a brief overview of the methods that take no
    parameters:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `.data(...)` 方法获取引用，然后您可以调用 ListView 特定的方法。以下是无需参数的方法的简要概述：
- en: '`add`: Inserts an empty item into the ListView and prepares it for editing'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`：将空项目插入到 ListView 中并准备它进行编辑'
- en: '`cancel`: Cancels changes in currently edited items'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cancel`：取消当前编辑项中的更改'
- en: '`clearSelection`: Clears ListView''s selected items and triggers the `change`
    event'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearSelection`：清除 ListView 的选中项并触发 `change` 事件'
- en: '`refresh`: Reloads the data and reprints the ListView'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refresh`：重新加载数据并重新打印 ListView'
- en: '`save`: Saves the edited ListView item. If validation succeeds, it will call
    the datasource''s `sync` method.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`：保存编辑后的 ListView 项目。如果验证成功，它将调用数据源的 `sync` 方法。'
- en: There are a few additional methods that do take parameters.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种其他方法确实接受参数。
- en: The edit method
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑方法
- en: 'This method edits the specified ListView item and triggers the `edit` event.
    This method takes a single parameter which is the ListView item that needs to
    be edited. Here is a sample:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法编辑指定的 ListView 项目并触发 `edit` 事件。此方法接受一个参数，即需要编辑的 ListView 项目。以下是一个示例：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The remove method
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除方法
- en: This method removes the specified ListView item and triggers the `remove` event.
    It also triggers the datasource's `sync` method.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法删除指定的 ListView 项目并触发 `remove` 事件。它还会触发数据源的 `sync` 方法。
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The select method
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选择方法
- en: 'This method selects the specified ListView item. If this method is called without
    any arguments, it will return a collection of all of the selected items in the
    ListView. This is what we did in the code sample for selecting items. Here is
    a code sample for using the method with a parameter:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法选择指定的 ListView 项目。如果没有提供任何参数调用此方法，它将返回 ListView 中所有选中项目的集合。这正是我们在选择项目的代码示例中所做的。以下是一个使用参数调用此方法的代码示例：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: ListView events
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ListView 事件
- en: 'The ListView widget exposes several events for hooking into its lifecycle and
    behavior. We have already seen some of these in our examples. These events can
    all be assigned to handlers during the ListView instantiation as we save earlier
    in the chapter. Here is a list:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ListView 小部件公开了几个事件，用于挂钩其生命周期和行为。我们已经在我们的示例中看到了一些。这些事件都可以在 ListView 实例化期间分配给处理程序，正如我们在本章前面所保存的。以下是一个列表：
- en: '`change`: Fires when the ListView selection is changed'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`change`: 当 ListView 选择项发生变化时触发'
- en: '`dataBound`: Fires when the ListView has received data from the `DataSource`
    object and is about to render it'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataBound`: 当 ListView 从 `DataSource` 对象接收数据并即将渲染时触发'
- en: '`dataBinding`: Fires when the data is about to be rendered on the page'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataBinding`: 当数据即将在页面上渲染时触发'
- en: '`edit`: Fires when the ListView enters edit mode'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`: 当 ListView 进入编辑模式时触发'
- en: '`remove`: Fires before the ListView item is removed'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`: 在 ListView 项目被移除之前触发'
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Menu and ListView widgets are great tools for structuring data on your web
    pages. The Menu widget makes it simple to create interactive JavaScript menus
    for navigation and even for displaying data with graphics. The ListView widget
    should become a standard option for you when you want a standard way of rendering
    collections of data elements on a web page. It gives you the ability to hook up
    functionality that would otherwise require a lot of code and debugging.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单和 ListView 小部件是结构化网页上数据的优秀工具。菜单小部件使得创建用于导航的交互式 JavaScript 菜单以及显示带有图形的数据变得简单。当您想在网页上以标准方式渲染数据元素集合时，ListView
    小部件应该成为您的标准选项。它为您提供了连接功能的能力，否则这将需要大量的代码和调试。
- en: In the next chapter, we will take a look at the Kendo UI PanelBar widget. Its
    API is very similar to the Kendo UI Menu widget, as you will see, and it is a
    powerful way to render accordion controls in a web page. Much like the Kendo UI
    Menu widget, its primary responsibility is to organize hierarchical content in
    a way that saves screen space, but still provides a sensible structure for users
    to understand.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Kendo UI PanelBar 小部件。它的 API 与 Kendo UI Menu 小部件非常相似，正如您将看到的，它是一种在网页中渲染手风琴控件的有效方式。与
    Kendo UI Menu 小部件类似，它的主要职责是以节省屏幕空间的方式组织层次化内容，同时仍然为用户提供一个合理的结构来理解。
