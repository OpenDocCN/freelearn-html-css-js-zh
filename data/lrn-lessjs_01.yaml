- en: Chapter 1. Introducing Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。介绍 Less
- en: Are you tired of writing the same old CSS styles for client websites only to
    find out that you're repeating yourself? Wish you could cut down on what you write
    and still produce the same results…?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你厌倦了为客户网站编写相同的旧 CSS 样式，却发现你只是在重复自己？希望你能减少你写的代码量，同时仍然产生相同的结果…？
- en: Well, you can. Welcome to the world of CSS preprocessors, and in particular,
    Less! CSS preprocessors such as Less are designed to help you reorganize your
    styles to smaller, more manageable chunks of reusable code that you can store
    and reference as and when your projects demand.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你可以。欢迎来到 CSS 预处理器的世界，特别是 Less！Less 这样的 CSS 预处理器旨在帮助你重新组织你的样式，使其成为更小、更易于管理的可重用代码块，你可以根据项目需求存储和引用这些代码块。
- en: Less, designed as a superset or extension of CSS, is very much about making
    your development work easier—it incorporates variables and functions that are
    more likely to be seen in scripting languages such as JavaScript while still compiling
    in valid CSS. While the initial thought of working with code might scare you,
    you'll see that Less is really just CSS, but with some additions to help make
    development easier. Less will help you cut down the development time, as you can
    reuse code from one project in another—how much is all up to you!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Less，作为 CSS 的超集或扩展，旨在使你的开发工作更加容易——它结合了在脚本语言（如 JavaScript）中更常见到的变量和函数，同时仍然编译成有效的
    CSS。虽然一开始想到与代码一起工作可能会让你感到害怕，但你很快会发现 Less 实际上只是 CSS，但增加了一些有助于使开发更容易的功能。Less 将帮助你减少开发时间，因为你可以从一项项目中重用代码到另一项——具体多少取决于你！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The roles of HTML and CSS, and the limitations of using CSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 和 CSS 的作用，以及使用 CSS 的局限性
- en: Why CSS preprocessors are needed
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要 CSS 预处理器
- en: Why you should use Less
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你应该使用 Less
- en: The advent of CSS4, and what this means for Less
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS4 的出现，以及这对 Less 的意义
- en: The role of HTML and CSS
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 和 CSS 的作用
- en: If you spend time developing websites for clients, it is likely that you will
    have used both HTML and CSS to create your masterpiece.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为客户开发网站，你很可能已经使用 HTML 和 CSS 来创建你的杰作。
- en: 'HTML, created in 1990, has been the *de facto* standard for placing content
    on a web page. Over the years, it has evolved into what we now know as HTML5,
    which we can use to produce some very detailed websites or online applications.
    To use a cooking analogy, HTML is effectively the creation of the cake base; it
    is content that makes sense to any Internet browser. HTML forms the base of any
    website available on the Internet—it won''t look very exciting, but it will have
    all the elements you need, such as headings, paragraphs, and images, to produce
    well-formed pages. Well-formed pages are made up of two elements: **accessibility**
    and **validation**.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 是在 1990 年创建的，一直是放置网页内容的*事实上的*标准。多年来，它已经发展成我们现在所知道的 HTML5，我们可以用它来制作一些非常详细的网站或在线应用程序。用烹饪的比喻来说，HTML
    有效地是蛋糕底座的制作；它是任何互联网浏览器都能理解的内容。HTML 构成了互联网上任何网站的基石——它看起来可能不太吸引人，但它将包含你需要的所有元素，例如标题、段落和图像，以产生格式良好的页面。格式良好的页面由两个元素组成：**可访问性**和**验证**。
- en: Accessibility is the equivalent of building a new house, where we can add ramps
    or make doorways wider than normal to make it accessible for everyone. Basic accessibility
    isn't difficult or complex, but it must become a part of the development process;
    when left to its own devices, it will make it harder to move around the house,
    for those who need extra help to do so! In tandem with accessibility comes validation,
    which is very much like the Physics of cooking; if we work within the rules of
    validation, we can produce a masterpiece, while working outside of best practices
    is likely to lead to disaster.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可访问性相当于建造一座新房子，我们可以添加斜坡或使门道比正常更宽，以便让每个人都能进入。基本可访问性并不困难或复杂，但它必须成为开发过程的一部分；如果让它自行发展，它将使那些需要额外帮助的人在家中移动变得更加困难！与可访问性相伴而来的是验证，这非常类似于烹饪的物理学；如果我们遵守验证规则，我们就能创作出杰作，而如果超出最佳实践，很可能会导致灾难。
- en: It would be hard to produce a website without some form of decoration though;
    using HTML alone won't produce a very exciting effect! It's for this reason that
    we employ CSS to add final touches to our website, where we can tweak the positioning,
    add animation, or alter the colors of the elements on the page. Just as you can't
    build a house without cement, you can't produce a website without using CSS at
    some point in its creation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，没有某种形式的装饰很难制作出一个网站；仅使用HTML无法产生非常吸引人的效果！正因为如此，我们才使用CSS来为我们的网站添加最后的修饰，我们可以调整位置、添加动画或改变页面元素的色彩。就像你不能没有水泥建造房子一样，你也不能在网站创建过程中某个时刻不使用CSS。
- en: Using CSS does not come without its limitations though—as it has evolved over
    the years, the support for its functionality has changed. One can argue that it
    has come a long way since its incarnation back in 1996, but at its very heart,
    it will always suffer from some core deficiencies. Let's take a look at these
    in more detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS并非没有限制——随着它多年的发展，其功能支持已经发生了变化。有人可能会说，自从1996年诞生以来，它已经走了很长的路，但它的核心始终会存在一些基本缺陷。让我们更详细地看看这些。
- en: The limitations of using CSS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS的限制
- en: 'If you''ve spent time working with CSS, you will know the pain and heartache
    suffered when working with CSS—and all in the pursuit of creating that perfect
    site! Those who are still somewhat new to working with CSS will, at some point,
    fall foul of some of the limitations of CSS, which include:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经花时间使用过CSS，你会知道在处理CSS时遭受的痛苦和心碎——这一切都是为了创建一个完美的网站！对于那些对使用CSS还不太熟悉的人来说，他们迟早会遭遇CSS的一些限制，包括：
- en: CSS is heavily dependent on browser capability—it is impossible to display the
    same content in every browser in the same way. We can get around this, but not
    without the expense of having to add vendor-prefixed statements. This can lead
    to pages with a lot of repeated code, making them slow and difficult to maintain,
    where even the smallest change requires a lot of effort.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS高度依赖于浏览器的功能——不可能以相同的方式在所有浏览器中显示相同的内容。我们可以解决这个问题，但不是不付出代价的，这需要添加供应商前缀语句。这可能导致页面中有很多重复的代码，使页面变慢且难以维护，即使是微小的更改也需要大量的努力。
- en: Not every browser supports every feature within CSS—this is particularly true
    of CSS3\. This means we need to implement some form of graceful fallback for the
    affected browsers if we are to maintain some form of visitor experience.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非每个浏览器都支持CSS中的每个功能——这一点在CSS3中尤为明显。这意味着如果我们想保持某种形式的访客体验，我们需要为受影响的浏览器实现某种形式的优雅降级。
- en: The advent of CSS made a functionality such as columns on a magazine website
    much easier, although it is still not perfect. To achieve perfect columns, we
    will require JavaScript or jQuery to tweak the code, which makes the page less
    accessible (for example, making it harder for those using screen readers). It
    also has an effect on the use of progressive enhancement, where content should
    be enhanced using a functionality, such as CSS3 or jQuery, and not reliant on
    it.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS的出现使得在杂志网站上创建列等功能的操作变得容易得多，尽管它仍然不完美。要实现完美的列，我们需要使用JavaScript或jQuery来调整代码，这使得页面更难以访问（例如，对于那些使用屏幕阅读器的人来说）。它还对渐进增强的使用产生了影响，内容应该使用CSS3或jQuery等功能进行增强，而不是依赖于它们。
- en: It is impossible to target specific ranges of content, without altering the
    markup to include placeholders; should these placeholders change, then the associated
    CSS must also change.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有改变标记以包含占位符，就无法针对特定内容范围进行定位；如果这些占位符发生变化，那么相关的CSS也必须相应更改。
- en: We can't include a rule from one CSS style in another, nor can we name a rule—the
    latter of which could be used by client-side scripts, even if the selector that
    is being referenced changes.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能在另一个CSS样式中包含一个规则，也不能命名一个规则——后者可能会被客户端脚本使用，即使被引用的选择器发生了变化。
- en: By now, you're probably thinking that it is all doom and gloom when using CSS;
    fear not, we can fix this with the help of CSS preprocessors to help make our
    development more effective.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能认为使用CSS时一切都是厄运和阴霾；别担心，我们可以借助CSS预处理器来帮助我们更有效地开发。
- en: The benefits of using CSS preprocessors
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS预处理器的好处
- en: If you've spent time working with CSS, one of the first questions you may ask
    yourself is "Why do I need to use a preprocessor?" It's a valid question and you
    certainly won't have been the first person to ask this either! Let me explain
    this in more detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花时间使用过CSS，你可能会问自己第一个问题是“为什么我需要使用预处理器？”这是一个合理的问题，你肯定也不是第一个问这个问题的人！让我更详细地解释一下。
- en: 'CSS is known as a declarative language—this means that the rules we use to
    declare what happens to an element will be the rules that the browser uses to
    paint the results on the screen. If, for example, we want a block of text, such
    as a printed comment, to be in italics, then we will use something akin to the
    following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CSS被称为声明性语言——这意味着我们用来声明元素如何显示的规则将是浏览器用来在屏幕上绘制结果的规则。例如，如果我们想让一段文本，比如一个打印的注释，显示为斜体，我们将使用类似于以下代码的东西：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The browser will then render this on the screen in 12 px italicized text.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器然后将这段文本以12像素的斜体形式渲染到屏幕上。
- en: This example is very straightforward—it could be used anywhere. The trouble
    is, we may need to specify the same styling attributes elsewhere. We could use
    the `.comment` class, but what happens if we want to change the size? Or, perhaps
    render the text in bold instead?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子非常直接——它可以在任何地方使用。问题是，我们可能需要在其他地方指定相同的样式属性。我们可以使用`.comment`类，但如果我们想更改大小怎么办？或者，也许我们想将文本以粗体显示呢？
- en: 'Changing the style rules to suit one element could break them for the original
    element, which is not ideal. Instead, we will need to create multiple style rules
    that apply to specific elements, but which duplicate this code—this could make
    for very verbose CSS! Just imagine that we end up having to create a selector
    such as the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应一个元素而更改样式规则可能会破坏原始元素的样式，这并不是理想的情况。相反，我们需要创建多个适用于特定元素的样式规则，但这些规则会重复这段代码——这可能会导致非常冗长的CSS！想象一下，我们最终可能需要创建一个如下所示的选择器：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This isn't an easy selector to understand, let alone apply styling to, right?
    We can eliminate this issue of duplication using Less—it is possible to set one
    style block at the start of our Less style sheet and then reuse this style at
    every instance in our code, in the same way as you might use the `autotext` function
    to add predefined text to a document in Word, based on a key phrase. If we make
    a change, we only need to do it once—Less will automatically update our code,
    avoiding the need to do it manually. Imagine doing this for the dozens of buttons
    you might have on an e-commerce site and the benefits will soon be apparent!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器并不容易理解，更不用说应用样式了，对吧？我们可以通过使用Less来消除这种重复问题——在Less样式表的开始处设置一个样式块，然后可以在代码的每个实例中重用这个样式，就像你可能在Word文档中使用`autotext`函数根据关键词添加预定义文本一样。如果我们进行更改，我们只需要做一次——Less会自动更新我们的代码，避免手动操作的需要。想象一下，如果你在一个电子商务网站上可能有数十个按钮，这样做的好处将很快显现出来！
- en: This might come across as an alien concept in CSS—after all, I am sure we are
    used to writing code manually and spending many hours perfecting it. You might
    well have some misgivings about using a CSS preprocessor to take out some of the
    grunt work, particularly as it is satisfying when you manage to achieve that stunning
    piece of CSS artwork for a client. It's perfectly natural—let's take a moment
    to consider some of the common misgivings about using CSS preprocessors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，这可能会显得很陌生——毕竟，我相信我们都习惯于手动编写代码，并花费许多小时来完善它。你可能会对使用CSS预处理器来处理一些繁琐的工作有所顾虑，尤其是当你为客户完成那件令人惊叹的CSS艺术品时，这会让人感到满足。这是很自然的——让我们花点时间来考虑一些关于使用CSS预处理器的一些常见顾虑。
- en: Why not just write normal CSS?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不直接写正常的CSS呢？
- en: Many people will often ask, "If we're producing CSS, why aren't we just writing
    it instead?" It's a common reaction; after all, we use CSS every day to solve
    any layout problem thrown at us while building beautiful responsive sites that
    work in any browser. The last thing we want is to not look like we know what we're
    doing, right?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人经常会问，“如果我们正在生成CSS，为什么我们不直接编写它呢？”这是一种常见的反应；毕竟，我们每天都在使用CSS来解决我们在构建美丽响应式网站时遇到的任何布局问题。我们最不希望的就是看起来不知道自己在做什么，对吧？
- en: 'Let me be clear from the outset: the purpose of using Less is not to write
    better CSS. If you don''t understand how to use CSS now, then Less won''t help
    you fill that gap. What it will do is help you write CSS faster and more easily,
    while making your style sheets more manageable at the same time. Let''s explore
    some of the reasons why we should switch to using a CSS preprocessor, such as
    Less, in more detail:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我从一开始就明确：使用 Less 的目的不是编写更好的 CSS。如果您现在还不懂如何使用 CSS，那么 Less 不会帮助您填补这个空白。它将帮助您更快、更轻松地编写
    CSS，同时使样式表更易于管理。让我们更详细地探讨一些我们应该切换到使用 CSS 预处理器（如 Less）的原因：
- en: CSS preprocessors, such as Less, don't break browser compatibility—each CSS
    preprocessor produces valid CSS
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 预处理器，如 Less，不会破坏浏览器兼容性——每个 CSS 预处理器都产生有效的 CSS。
- en: CSS preprocessors help to make our CSS **DRY** (**Don't Repeat Yourself**)—we
    can create variables from reusable CSS properties, which helps us to make our
    code more scalable and manageable, as we can break it down into smaller files
    that automatically compile into one larger style sheet
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 预处理器有助于使我们的 CSS **DRY**（**不要重复自己**）——我们可以从可重用的 CSS 属性中创建变量，这有助于我们使代码更具可扩展性和可管理性，因为我们可以将它分解成更小的文件，这些文件会自动编译成一个更大的样式表。
- en: CSS preprocessors, as we'll see throughout the book, contain some useful features
    that help remove some of the tedium that frequently appears when writing CSS styles,
    by automating some of the low-value tasks that have to be performed
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如我们在整本书中将要看到的，CSS 预处理器包含一些有用的功能，可以帮助我们在编写 CSS 样式时自动化一些低价值任务，从而减少一些常见的繁琐工作。
- en: We can take advantage of the nesting capabilities of CSS preprocessors, which
    leads to a more natural style of writing, where we can use a form of shorthand
    to produce the desired effect
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以利用 CSS 预处理器的嵌套功能，这导致了一种更自然的编写风格，我们可以使用一种简写形式来产生所需的效果。
- en: Now that we've explored some of the advantages of using a CSS preprocessor,
    let's delve in and get acquainted with Less for the first time. We'll go on a
    whistle-stop tour in order to give you a flavor of what to expect in Less. Don't
    worry if you don't understand it just yet; we will cover everything in more detail
    throughout the book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了一些使用 CSS 预处理器的优势，让我们深入探讨并首次了解 Less。我们将进行一次快速浏览，以便让您对 Less 的预期有所了解。如果您现在还不理解，请不要担心；我们将在整本书中详细讲解所有内容。
- en: Introducing Less as a solution
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Less 作为解决方案
- en: First created in 2009 by Alexis Sellier, Less is a dynamic style sheet language
    originally written to use Ruby; this was soon deprecated in favor of the significant
    increase in speed gained by rebasing the library in JavaScript. It is designed
    to be used by both the client and the server—the latter with help from Node.js,
    which we will cover in [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting
    Started with Less"), *Getting Started with Less*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Less 首次由 Alexis Sellier 在 2009 年创建，最初是用 Ruby 编写的动态样式表语言；很快，由于在 JavaScript 中重新构建库所获得的显著速度提升，它被弃用了。它旨在由客户端和服务器端使用——后者通过
    Node.js 的帮助，我们将在第 3 章[Chapter 3](part0031_split_000.html#page "Chapter 3. Getting
    Started with Less")中介绍，*Less 入门*。
- en: Less was built as a superset of CSS, which means that it contains more advanced
    tools than traditional CSS. This allows us to write less code while still compiling
    it to valid CSS. The key to this lies in how we can use Less to produce better
    organized, more readable code. To see this in practice, let's take a look at a
    quick example of what we mean.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Less 是作为 CSS 的超集构建的，这意味着它包含比传统 CSS 更高级的工具。这允许我们在编写更少的代码的同时，仍然将其编译成有效的 CSS。这个关键在于我们如何使用
    Less 来产生更有组织、更易读的代码。为了在实践中学到这一点，让我们看看一个快速示例，说明我们的意思。
- en: 'Imagine that you''ve written the following sample of CSS code—it''s a perfectly
    valid CSS, even though it won''t actually produce any useable results:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您已经编写了以下 CSS 代码示例——它是一个完全有效的 CSS，尽管实际上它不会产生任何可用的结果：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You might have noticed though that we've had to repeat ourselves a little, which
    is not ideal, but a necessary evil when writing such styles. The code is readable
    in our example, but if we had developed this to any degree, the repetitive nature
    of the selectors (such as `header nav div.first div.thumb .img-wrapper img`) could
    make it harder to follow the code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们不得不重复一些内容，这并不理想，但在编写此类样式时是必要的恶行。在我们的例子中，代码是可读的，但如果我们将它发展到任何程度，选择器的重复性（如
    `header nav div.first div.thumb .img-wrapper img`）可能会使代码更难理解。
- en: 'One of the core concepts of Less is to use the DRY principle when writing code—we
    can take advantage of its **nested metalanguage** syntax to reduce the code by
    nesting our statements. If we take the previous block of code and reform it using
    Less, it will look as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Less的一个核心概念是在编写代码时使用DRY原则——我们可以利用其**嵌套元语言**语法通过嵌套我们的语句来减少代码。如果我们用Less重新组织前面的代码块，它将看起来如下：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we compile to the CSS we've just seen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将编译成我们刚刚看到的CSS。
- en: Notice how we managed to reduce the amount of code we had to write while making
    the code easier to read, by grouping styles and adopting a more natural flow.
    Nested metalanguages are hierarchy based, where we can group related declarations
    together and reorder them in some form of hierarchy that abstracts each level
    while including the higher level. Less will naturally group these related declarations
    together, which is a great benefit if a CSS style sheet is edited by multiple
    individuals.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何通过分组样式和采用更自然的流程，减少了必须编写的代码量，同时使代码更容易阅读。嵌套元语言是基于层次结构的，我们可以将相关的声明分组在一起，并以某种形式对它们进行重新排序，这种形式抽象了每一级，同时包括了高级别。Less会自然地将这些相关的声明分组在一起，如果CSS样式表由多个人编辑，这将是一个巨大的好处。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about nested metalanguages, you may want to
    browse to [http://en.wikipedia.org/wiki/Metalanguage#Nested_metalanguage](http://en.wikipedia.org/wiki/Metalanguage#Nested_metalanguage).
    Note that it's a somewhat dry reference (pun intended!).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于嵌套元语言的信息，您可能想浏览到[http://en.wikipedia.org/wiki/Metalanguage#Nested_metalanguage](http://en.wikipedia.org/wiki/Metalanguage#Nested_metalanguage)。请注意，这是一个相当枯燥的参考资料（有意为之！）
- en: 'To prove that this does indeed compile to valid CSS, you can see the results
    of compiling the previous Less code in Crunch!. Crunch! is a CSS editor and compiler
    for Less, which we will cover in more detail in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. You can code in Crunch! as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这确实编译成有效的CSS，您可以看到编译前面Less代码在Crunch!中的结果。Crunch!是一个Less的CSS编辑器和编译器，我们将在第2章中更详细地介绍它，*构建Less开发工具包*。[Chapter
    2](part0025_split_000.html#page "Chapter 2. Building a Less Development Toolkit")。您可以在Crunch!中像以下截图所示进行编码：
- en: '![Introducing Less as a solution](img/00002.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Less作为解决方案](img/00002.jpeg)'
- en: Don't worry if nesting code doesn't mean a great now—we will cover nesting in
    more detail in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with
    Variables, Mixins, and Functions"), *Working with Variables, Mixins, and Functions*.
    This is just one of the many functions in Less that will help revolutionize your
    CSS development. Let's take this a step further by delving into some of the reasons
    why you should use Less, in more detail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果嵌套代码现在看起来并不那么伟大，请不要担心——我们将在第4章中更详细地介绍嵌套，*使用变量、混合和函数*。[Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions")。这是Less中许多将帮助革命化您的CSS开发的函数之一。让我们进一步深入探讨您应该使用Less的一些原因，更详细地了解。
- en: Why you should use Less
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该使用Less
- en: We've already seen that Less is designed to help make CSS easier to manage and
    maintain. Let's explore some of the key features in more detail, which will give
    you a taste of what to expect with Less and demonstrate how Less can make writing
    CSS easier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，Less旨在帮助使CSS更容易管理和维护。让我们更详细地探讨一些关键特性，这将让您对Less的预期有所了解，并展示Less如何使编写CSS变得更加容易。
- en: Reducing redundancy with variables
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量减少冗余
- en: 'How many times have you worked on a website where you needed to declare the
    value of a color in CSS, such as `#ececec`? 10 times? 20 times? It''s rare that
    you will get the color in the first time; it is more likely that you will need
    to revise it, which can create a real burden when working in CSS. No matter how
    many times it ends up being, one thing is true: it is not easy to remember the
    hex value for each color.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你在需要声明CSS中颜色值的网站上工作过多少次，比如`#ececec`？10次？20次？您很少能一次就得到正确的颜色；更有可能的是，您需要对其进行修改，这在CSS中工作时可能会造成真正的负担。不管它最终变成多少次，有一点是肯定的：记住每个颜色的十六进制值并不容易。
- en: 'Less can help by allowing us to define colors as variables, with more memorable
    names. A variable is merely a mechanism for referencing a value; take a look at
    the following three examples:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Less可以通过允许我们使用更具记忆性的名称定义颜色作为变量来帮助我们。变量仅仅是一个引用值的机制；请看以下三个示例：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The beauty of Less is that once we've defined these variables, Less will automatically
    update any instance where they are used if we decide to change the hex values
    at a later date.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Less 的美妙之处在于，一旦我们定义了这些变量，如果我们在以后更改十六进制值，Less 会自动更新它们被使用的任何实例。
- en: Understanding the syntax of variables
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解变量的语法
- en: 'In Less, the `@` sign indicates that we are defining a variable; following
    this (`@`) symbol, we normally have the name of the variable (with no spaces),
    and the colon indicates the end of the variable name. This is followed by the
    value, with a semicolon used to close the statement. In this case, the `@red`
    variable refers to the red color we want as a hex value. Once we''ve defined these
    variables, we can use them anywhere in our Less style sheet shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Less 中，`@` 符号表示我们正在定义一个变量；紧随其后的是变量名（没有空格），冒号表示变量名的结束。之后是值，用分号来结束语句。在这种情况下，`@red`
    变量指的是我们想要的红色颜色的十六进制值。一旦我们定义了这些变量，我们就可以在 Less 样式表中任何地方使用它们，如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we compile it, the following valid CSS is produced:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译它时，会生成以下有效的 CSS：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Less, compile just means to go from Less to CSS. We will use this term frequently
    throughout the book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Less 中，编译仅仅意味着从 Less 转换到 CSS。我们将在整本书中频繁使用这个术语。
- en: Writing and remembering variable names is far easier than remembering unnatural
    hex values, right? Moreover, when these values need to change, we only need to
    update them in one location and Less takes care of updating everything else. No
    more need to perform a "find and replace" when changing colors—this can be a huge
    timesaver!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 编写和记住变量名比记住不自然的十六进制值要容易得多，对吧？此外，当这些值需要更改时，我们只需要在一个地方更新它们，Less 就会负责更新其他所有内容。不再需要在更改颜色时执行“查找和替换”——这可以节省大量时间！
- en: Creating reusable blocks of code
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建可重用的代码块
- en: So we've created some variables…but reusable blocks of code?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们创建了一些变量……但是可重用的代码块？
- en: 'One of the benefits of using Less is that we can group together multiple lines
    of code and turn them into a reusable block that we can drop in our code. Let''s
    take a look at an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Less 的一个好处是我们可以将多行代码组合在一起，并将它们转换成一个可重用的代码块，我们可以将其添加到我们的代码中。让我们看看一个例子：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a very simple example of a reusable block of code, or mixin. If you've
    spent any time developing JavaScript or jQuery, then you may recognize a similar
    behavior in the form of classes; mixins work in pretty much the same way.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可重用代码块或 mixin 的非常简单的例子。如果你在开发 JavaScript 或 jQuery 任何时间，你可能会在类形式中认出类似的行为；mixins
    以几乎相同的方式工作。
- en: 'Mixins, by themselves, won''t do anything and to make them useful, we need
    to call them from our code using a placeholder, as highlighted in the following
    code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Mixins 本身不会做任何事情，为了使它们变得有用，我们需要从我们的代码中使用占位符来调用它们，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This compiles to valid CSS:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这会编译成有效的 CSS：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See how, with just one short keyword, we've asked Less to drop in something
    more involved? One small point to note is the use of `()` against the mixin name—Less
    will compile the reusable code (or mixin) to valid CSS, but it will not render
    the compiled mixin on the screen. The great thing though is that we can simply
    call `.serif;` wherever we need to render text using the defined `font-family`
    attribute.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 看看，仅仅用一个简短的单词，我们就让 Less 添加了一些更复杂的内容？有一点需要注意，就是使用括号`()`来对 mixin 名称进行操作——Less
    会将可重用的代码（或 mixin）编译成有效的 CSS，但它不会在屏幕上渲染编译后的 mixin。不过，最棒的是我们可以简单地调用 `.serif;` 来在任何需要使用定义的
    `font-family` 属性渲染文本的地方。
- en: Generating values automatically
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动生成值
- en: In more recent browsers, you are likely to find websites using RGBA (Red Green
    Blue Alpha) and HSLA (Hue Saturation Lightness Alpha) colors, rather than the
    typical hex values that we saw in the previous section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在较新的浏览器中，你可能会发现一些网站使用 RGBA（红绿蓝透明度）和 HSLA（色调饱和度亮度透明度）颜色，而不是我们在上一节中看到的典型十六进制值。
- en: 'Not every browser supports these color formats—to get around this, we can declare
    a hex value first, followed by its RGBA or HSL equivalents. As an example, we
    might write something similar to the following code in order to turn the text
    set with the `h1` attribute to dark brown:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个浏览器都支持这些颜色格式——为了解决这个问题，我们可以先声明一个十六进制值，然后是它的 RGBA 或 HSL 等效值。例如，我们可能会编写类似于以下代码的内容，以便将使用
    `h1` 属性设置的文本设置为深棕色：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we're choosing colors in a graphics package such as Photoshop or GIMP, we
    might occasionally struggle to get both the values and might need to resort to
    alternative means. Thankfully, this is not an issue with Less as it allows us
    to use functions to create new values automatically.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在像Photoshop或GIMP这样的图形包中选择颜色，我们有时可能会难以同时获得值，可能需要求助于其他方法。幸运的是，Less没有这个问题，因为它允许我们使用函数自动创建新值。
- en: 'Why will we do this? The answer is simple: all we need to do is provide a color
    value using one format, such as RGBA. We can then use Less'' functions to convert
    it to a different format—we can then avoid any confusion about ensuring we''ve
    provided the right values, as these will be worked out automatically by Less.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要这样做？答案很简单：我们只需要使用一种格式提供颜色值，例如RGBA。然后我们可以使用Less的函数将其转换为不同的格式——这样我们就可以避免任何关于确保我们提供了正确值的混淆，因为Less会自动处理这些值。
- en: 'Let''s take a look at a quick example of how this will work:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这将如何工作：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we''ve used a simple variable to define the base color before using the
    `rgba` color function to convert it to its RGBA equivalent value, with the alpha
    value set to `0.5`. If we compile the Less code, it produces the following CSS:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个简单的变量来定义基本颜色，然后在`rgba`颜色函数中将它转换为其RGBA等效值，alpha值设置为`0.5`。如果我们编译Less代码，它将生成以下CSS：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The alpha channel in our example is set at 50 percent. This means that we can
    see 50 percent of whatever is behind the color in the browsers that understand
    RGBA. The use of functions will really come into their own when creating themes
    for sites—we could potentially create a whole host of colors from just two to
    three base colors!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，alpha通道设置为50%。这意味着在支持RGBA的浏览器中，我们可以看到颜色背后的50%的内容。当为网站创建主题时，函数的使用将真正发挥其作用——我们可能只需要两种到三种基本颜色就能创建出一整套颜色！
- en: We will explore more about the color functions later in this book, in [Chapter
    12](part0106_split_000.html#page "Chapter 12. Color Processing with Less"), *Color
    Processing with Less*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的[第12章](part0106_split_000.html#page "第12章。使用Less处理颜色")中进一步探讨颜色函数，*使用Less处理颜色*。
- en: Forgetting about vendor prefixes
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忘记供应商前缀
- en: The beauty about using CSS3 is that there's no need to always use images, when
    we can often achieve the same result using pure styling alone. Trouble is, catering
    to all these new features, such as background gradients, animations, box shadows,
    and the like, means that we often have to use vendor prefixes or different syntaxes
    to ensure that the site can be viewed by the widest possible audience.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3的好处是，我们不需要总是使用图像，因为我们经常可以仅使用纯样式就达到相同的效果。问题是，为了适应所有这些新特性，如背景渐变、动画、盒阴影等，我们通常必须使用供应商前缀或不同的语法，以确保网站可以被尽可能广泛的受众查看。
- en: 'This can be a real pain but not so much with preprocessors. As you will see
    later in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, we can
    create a mixin or a small block of predefined code that can literally be mixed
    in our Less style sheet and can be used to create valid CSS. Take, for example,
    the following block of code, which is used to produce rounded corners:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个真正的麻烦，但在预处理器中就不会这么麻烦。正如你将在[第4章](part0041_split_000.html#page "第4章。使用变量、混合和函数")中看到的，*使用变量、混合和函数*，我们可以创建一个混合或一小块预定义的代码，可以直接混合到我们的Less样式表中，并用于创建有效的CSS。例如，以下代码块用于生成圆角：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With Less, there are hundreds of mixins that are available online (more of
    which we will cover later in the book), which we can use in our code. Instead
    of having to remember what each style needs in terms of prefixes and syntax, we
    can just use the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Less，有成百上千的混合函数可以在网上找到（本书后面将详细介绍），我们可以在代码中使用它们。我们不需要记住每种样式在术语前缀和语法方面需要什么，我们只需使用以下代码：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code produces exactly the same CSS that was once compiled; Less
    automatically adds all the vendor prefixes, which is a great time saver.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成的CSS与之前编译的CSS完全相同；Less自动添加所有供应商前缀，这是一个节省时间的好方法。
- en: Creating media queries and animation the simple way
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单创建媒体查询和动画
- en: The advent of mobile devices has created a need for responsive websites, which
    will display content only if the rules meet a specific environmental condition
    or breakpoint. A good example is determining the size of the screen in use when
    browsing a responsive website.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的出现创造了对响应式网站的需求，这些网站只有在满足特定环境条件或断点时才会显示内容。一个很好的例子是在浏览响应式网站时确定正在使用的屏幕大小。
- en: 'This normally means having to write a number of queries for each breakpoint
    in a design. As an example, we could write the following (simplified) CSS to change
    the typography for a particular device:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着需要为设计中的每个断点编写多个查询。例如，我们可以编写以下（简化后的）CSS来更改特定设备的排版：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Even though this is only setting the size for the `h1` attribute, it seems
    like a lot to remember. We can simplify the code using the power of Less:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这只是为了设置`h1`属性的尺寸，但看起来需要记住的东西很多。我们可以利用Less的强大功能来简化代码：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We start by declaring three variables, each containing the media query statements.
    These are static values and will only change if we decide to add or modify any
    of the supported breakpoints. It isn't essential to use them in this instance,
    but it will help make the nesting solution easier to read!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明三个变量，每个变量包含一个媒体查询语句。这些是静态值，只有在决定添加或修改任何支持的断点时才会改变。在这个例子中，使用它们并不是必需的，但它们将有助于使嵌套解决方案更容易阅读！
- en: We then call each media query using `@media`, followed by the variable that
    contains the breakpoint we wish to test against. The key point here is that while
    it might look like `@media` is repeated, we can't base our nesting style on `@media`
    as the code will fail to compile. Instead, we need to base it on the `h1` selector
    for the code to compile correctly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用`@media`调用每个媒体查询，后面跟着包含我们希望测试的断点的变量。这里的关键点是，尽管看起来`@media`被重复了，但我们不能基于`@media`来构建嵌套样式，因为代码将无法正确编译。相反，我们需要基于`h1`选择器来确保代码能够正确编译。
- en: Reusing code across multiple projects
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多个项目中重用代码
- en: One of the limitations of CSS is that we often find ourselves applying the same
    values across multiple elements, throughout each site that we build. On a small
    site, this is less of an inconvenience, but for larger sites, there is a greater
    risk that we may miss updating a value, which could produce unexpected results.
    We've seen how you can reduce (or even eliminate, with good planning), the risk
    using variables—what if we could *reuse* our code in future projects?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CSS的一个局限性是，我们经常发现自己需要在构建的每个网站上跨多个元素应用相同的值。在小网站上，这不太方便，但在大网站上，我们可能会错过更新一个值的风险更大，这可能会导致意外的结果。我们已经看到，您可以使用变量来减少（甚至通过良好的规划消除）这种风险——如果我们能够在未来的项目中**重用**我们的代码会怎样呢？
- en: This is not as crazy as it might seem—we may develop a specific drop-shadow
    style for buttons that we like and want to reuse. The conventional way is to store
    this in a text file, database, or the likes, and then dig it out each time we
    need to reuse it. It's a cumbersome way to do it, even if it does work—the need
    to do this is eliminated if we use a preprocessor.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不像看起来那么疯狂——我们可能会为按钮开发一个特定的阴影样式，我们喜欢并希望重用。传统的方法是将它存储在文本文件、数据库或其他类似的地方，然后每次需要重用时都挖出来。即使它确实可行，这种方法也很繁琐——如果我们使用预处理器，就可以消除这种需求。
- en: 'We can simply store the code in a file, in the form of **mixins** or reusable
    blocks of code. If we need to reuse any of them, we simply add the file to our
    project and use the following command to import the contents:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将代码简单地存储在文件中，以**混合**或可重用代码块的形式。如果我们需要重用其中任何一部分，我们只需将文件添加到我们的项目中，并使用以下命令来导入内容：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The beauty of using Less though means that it will only import those mixins
    that are needed for our project in the main CSS file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用Less的美丽之处在于，它只会导入主CSS文件中我们项目所需的那些混合。
- en: Compressing CSS automatically for faster websites
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动压缩CSS以加快网站速度
- en: So far, we've talked about some of the compelling features of Less—a fraction
    of what it offers—there is a lot more that we will cover throughout the book as
    well as taking a look at some of the more practical uses of Less.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了Less的一些令人信服的特性——这只是它提供的一部分功能——在本书的其余部分，我们还将探讨一些Less的更实际的应用。
- en: 'There is one key thing to writing CSS that we''ve not mentioned: the ability
    to compress your style sheets as part of releasing your site into production.
    Compressing our style sheets removes white space and allows us to concatenate
    multiple files in one master CSS file.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写CSS时，有一件关键的事情我们没有提到：压缩你的样式表作为将网站发布到生产环境的一部分的能力。压缩我们的样式表可以移除空白，并允许我们在一个主CSS文件中连接多个文件。
- en: 'Why should you do this? The answer is easy: it will make style sheets a fraction
    of the size of the original, which saves on bandwidth. While this is probably
    less of an issue for normal Internet connections, it is critical for those using
    mobile devices with limited bandwidth.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你应该这样做？答案很简单：这将使样式表的大小减少到原始大小的几分之一，这可以节省带宽。虽然这可能对普通互联网连接来说问题不大，但对于那些使用有限带宽的移动设备的人来说，这是至关重要的。
- en: How will you compress your CSS? Sure, we could compress it using an online tool,
    but this means using an extra tool, which adds to your already busy development.
    There is no need to do this when using Less—if you compile your code using one
    of the GUI tools, such as WinLess, or even the command line, you can set it to
    compress the code at the same time.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如何压缩你的CSS？当然，我们可以使用在线工具来压缩，但这意味着使用额外的工具，这会增加你繁忙的开发工作。如果你使用GUI工具（如WinLess）或命令行编译代码，你可以设置它同时压缩代码。
- en: This is just a taste of what Less can offer. Before getting up and running the
    development tools we will need for using Less, let's take a brief look at what
    CSS4 will offer and how this might affect preprocessor tools such as Less.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Less能提供的一小部分。在我们开始运行使用Less所需的发展工具之前，让我们简要地看看CSS4将提供什么，以及这可能会如何影响像Less这样的预处理器工具。
- en: Supporting CSS4 standards within Less
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Less中支持CSS4标准
- en: With the advent of CSS2 and CSS3, it is natural to assume that CSS4 will arrive
    at some point in the future. You are probably wondering how it might affect CSS
    preprocessors—let's take a look at what CSS4 is likely to mean for Less.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 随着CSS2和CSS3的出现，自然地假设CSS4将在未来的某个时刻到来。你可能想知道它会如何影响CSS预处理器——让我们看看CSS4对Less可能意味着什么。
- en: Officially, there is no such thing as CSS4\. Strange as it might seem, we won't
    see the appearance of a new global standard; CSS4 instead will be grouped under
    smaller headings, of which each will have its own level. There is still a long
    way to go, but one of the groupings that is closest to being finalized is CSS4
    Selectors.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正式来说，并没有所谓的CSS4。虽然这听起来可能有些奇怪，我们不会看到新的全球标准的出现；CSS4将被归类到更小的标题下，其中每个标题都有自己的级别。还有很长的路要走，但最接近最终确定的一个分组是CSS4选择器。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see more details about the proposed changes for CSS Selectors in the
    W3C's draft proposal at [http://dev.w3.org/csswg/selectors4/](http://dev.w3.org/csswg/selectors4/).
    There is an interesting discussion on the possibilities of using Selectors at
    [http://vandelaydesign.com/blog/design/some-interesting-possibilities-with-css4/](http://vandelaydesign.com/blog/design/some-interesting-possibilities-with-css4/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在W3C的草案提案中查看关于CSS选择器提议的更多详细信息：[http://dev.w3.org/csswg/selectors4/](http://dev.w3.org/csswg/selectors4/)。关于使用选择器的可能性有一个有趣的讨论：[http://vandelaydesign.com/blog/design/some-interesting-possibilities-with-css4/](http://vandelaydesign.com/blog/design/some-interesting-possibilities-with-css4/)。
- en: 'Although these have been around since the beginning of CSS, CSS4 brings a number
    of new logical operators, such as `:not` and `:matches`, as well as some new local
    pseudo classes in the form of `:any-link` or `:local-link`. The latter, in particular,
    brings some useful features to styling links, as shown in the following code example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些功能从CSS开始就已经存在，但CSS4引入了许多新的逻辑运算符，如`:not`和`:matches`，以及一些新的局部伪类，如`:any-link`或`:local-link`。特别是后者，为链接的样式提供了有用的功能，如下面的代码示例所示：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can rewrite this using the following code in Less:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下Less代码重写：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we compile this code, we can see the results within a page that has a breadcrumb
    trail—take, for example, the URL as `http://internetlink.com/2014/08/21/some-title/`,
    and this in the form of a breadcrumb trail as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们编译这段代码，我们可以在一个带有面包屑导航的页面上看到结果——例如，URL为`http://internetlink.com/2014/08/21/some-title/`，面包屑导航如下所示：
- en: Home (`http://internetlink.com/`)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首页 (`http://internetlink.com/`)
- en: 2014 (`http://internetlink.com/2014/`)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2014年 (`http://internetlink.com/2014/`)
- en: August 2014 (`http://internetlink.com/2014/08/`)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2014年8月 (`http://internetlink.com/2014/08/`)
- en: 21 August 2014 (`http://internetlink.com/2014/08/21/`)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2014年8月21日 (`http://internetlink.com/2014/08/21/`)
- en: Article (`http://internetlink.com/2014/08/21/some-title/`)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文章（`http://internetlink.com/2014/08/21/some-title/`）
- en: The first link will be red, the second will be green, the third blue, then yellow,
    and finally gray.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个链接将是红色，第二个是绿色，第三个是蓝色，然后是黄色，最后是灰色。
- en: Supporting future CSS standards within Less
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Less中支持未来的CSS标准
- en: Support for future CSS standards (or CSS4, as it is frequently termed) is still
    very much in its early stages within Less. Some progress has been made to allow
    the use of selectors in Less, which can be used with the ampersand symbol, as
    we saw earlier in the *Supporting CSS4 standards within Less* section in this
    chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Less中支持未来的CSS标准（或通常称为CSS4）仍然处于早期阶段。在Less中已经取得了一些进展，允许使用选择器，这可以通过我们之前在本章“在Less中支持CSS4标准”部分中看到的使用井号符号来实现。
- en: At the time of writing this book, the developers have refrained from adding
    too many new features for CSS4, as most of the current proposed changes are still
    in the draft state and are subject to change. The main feature added so far is
    that of support for attributes, which appeared in Version 1.4 of Less—others will
    appear once the specification has been finalized and support has appeared in more
    than one browser. The key thing to note though is that any CSS4 standard with
    CSS3 syntax is automatically supported in Less.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，开发者们已经避免为CSS4添加太多新特性，因为大多数当前提出的更改仍然处于草案状态，并且可能发生变化。迄今为止添加的主要特性是对属性的支撑，这出现在Less的1.4版本中——其他特性将在规范最终确定并在多个浏览器中提供支持后出现。不过，需要注意的是，任何使用CSS3语法的CSS4标准在Less中都是自动支持的。
- en: There will still be a need for Less once CSS4 standards become mainstream; Less
    will evolve to include the new standards while still allowing us to be more efficient
    when writing CSS.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 即使CSS4标准成为主流，Less仍然会有需求；Less将进化以包含新的标准，同时仍然允许我们在编写CSS时更加高效。
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**How much support does my browser offer for CSS4?**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的浏览器对CSS4的支持程度如何？**'
- en: As an aside, you may like to test your browser of choice to see how much support
    it offers for CSS4; browse to [http://css4-selectors.com/browser-selector-test/](http://css4-selectors.com/browser-selector-test/)
    and then click on **Start test!** to see the results.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁注，你可能想测试你选择的浏览器以查看它对CSS4的支持程度；浏览到[http://css4-selectors.com/browser-selector-test/](http://css4-selectors.com/browser-selector-test/)并点击**开始测试**以查看结果。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with a brief look at the role of HTML and CSS in
    designing websites, and covered a few of the limitations that CSS has when styling
    elements on web pages.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先简要地回顾了HTML和CSS在网页设计中的作用，并讨论了CSS在网页元素样式化时的一些局限性。
- en: We then talked about how CSS preprocessors can help solve some of these issues;
    we covered the critical question that people will often ask, which is, why we
    should need to use them when we are perfectly *au fait* with writing valid CSS.
    We then introduced Less as one of the preprocessors available and as a possible
    solution to some of the issues we face with CSS.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着讨论了CSS预处理器如何帮助解决这些问题；我们涵盖了人们经常提出的关键问题，即当我们完全熟悉编写有效的CSS时，为什么还需要使用它们。然后我们介绍了Less作为可用的预处理器之一，以及作为解决我们面临的一些CSS问题的可能解决方案。
- en: We then rounded up the chapter with a look at some of the reasons why Less should
    become part of your development toolkit, as well as some of the features available
    for helping you to manage your CSS development. In the next chapter, we'll start
    to take a more in-depth look at the syntax of Less and how we can compile it to
    create valid CSS.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过探讨为什么Less应该成为你的开发工具包的一部分，以及一些有助于你管理CSS开发的特性来结束本章。在下一章中，我们将更深入地探讨Less的语法以及如何将其编译成有效的CSS。
