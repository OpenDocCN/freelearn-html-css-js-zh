- en: Chapter 10. Adding Real-time Chat
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。添加实时聊天
- en: 'In the previous two chapters, we extended our social network by adding new
    features to create pages and share posts. In this chapter, we will discuss real-time
    communication between users in the system. The technology that we are going to
    use is called WebSockets. The plan for this part of the book is as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们通过添加新功能来扩展了我们的社交网络，以创建页面和分享帖子。在本章中，我们将讨论系统中用户之间的实时通信。我们将使用的技术称为WebSockets。本书的这一部分计划如下：
- en: Getting to know WebSockets
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解WebSockets
- en: Bringing Socket.IO to the project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Socket.IO引入项目
- en: Preparing the UI of the chat area
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备聊天区域的用户界面
- en: Exchanging messages between the client and the server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端和服务器之间交换消息
- en: Sending messages to the user's friends only
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅向用户的朋友发送消息
- en: Customizing the output of the chat
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义聊天输出
- en: Getting to know WebSockets
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解WebSockets
- en: WebSockets is a technology that opens a two-way (bidirectional) interactive
    channel between the server and the browser. By using this type of communication,
    we are able to exchange messages without the need of an initial request. Both
    sides simply dispatch events to each other. The other benefits of WebSockets are
    lower bandwidth requirement and latency.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets是一种在服务器和浏览器之间打开双向交互通道的技术。通过使用这种类型的通信，我们能够在没有初始请求的情况下交换消息。双方只需向对方发送事件。WebSockets的其他好处包括较低的带宽需求和延迟。
- en: 'There are a couple of ways to transfer data from the server to the client and
    vice versa. Let''s check the most popular ones and see why WebSockets is considered
    the best option for real-time web apps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种从服务器传输数据到客户端以及反之的方式。让我们检查最流行的几种方式，并看看为什么WebSockets被认为是实时Web应用的最佳选择：
- en: '**Classic HTTP communication**: The client requests a resource from the server.
    The server figures out what the response should be and sends it. In the context
    of real-time applications, this is not very practical because we have to manually
    ask for more data.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经典的HTTP通信**：客户端请求服务器的资源。服务器确定响应内容并发送。在实时应用的情况下，这并不是很实用，因为我们必须手动请求更多的数据。'
- en: '**Ajax polling**: It is similar to the classical HTTP request except for the
    fact that we have the code that constantly sends requests to the server, for instance,
    in an interval of half a second. This is not really a good idea because our server
    will receive a huge amount of requests.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ajax轮询**：它类似于经典的HTTP请求，不同之处在于我们的代码会不断向服务器发送请求，例如，每隔半秒一次。这并不是一个好主意，因为我们的服务器将收到大量的请求。'
- en: '**Ajax long-polling**: We again have a client that performs HTTP requests,
    but this time, the server delays the result and does not respond immediately.
    It waits till there is new information available and then answers the request.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ajax长轮询**：我们再次有一个执行HTTP请求的客户端，但这次服务器延迟结果并不立即响应。它会等到有新信息可用时才回应请求。'
- en: '**HTML5 Server-sent Events (EventSource)**: In this type of communication,
    we have a channel from the server to the client and the server automatically sends
    data to the browser. This technique is used mostly when we need a one-directional
    data flow.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5服务器发送事件（EventSource）**：在这种通信类型中，我们有一个从服务器到客户端的通道，服务器会自动向浏览器发送数据。当我们需要单向数据流时，通常会使用这种技术。'
- en: '**WebSockets**: As mentioned before, if we use WebSockets, we have a two-way
    (bidirectional) data flow. Both sides, the client and the server, can send messages
    without asking the other side.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebSockets**：如前所述，如果我们使用WebSockets，我们将拥有双向数据流。客户端和服务器双方都可以在不询问对方的情况下发送消息。'
- en: 'Server-sent Events may work in some cases, but for real-time chat, we definitely
    need WebSockets because we want users to be able to send messages to each other.
    The solution to this that we will implement looks like the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器发送事件在某些情况下可能有效，但对于实时聊天，我们绝对需要WebSockets，因为我们希望用户能够互相发送消息。我们将实现的解决方案如下截图所示：
- en: '![Getting to know WebSockets](img/image00186.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![了解WebSockets](img/image00186.jpeg)'
- en: Every user will connect to the server and start sending messages. Our backend
    will be in charge of distributing the messages to the rest of the users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都将连接到服务器并开始发送消息。我们的后端将负责将消息分发给其他用户。
- en: Working with the raw WebSockets API may be not so easy. In the next section,
    we will introduce a really helpful Node.js module to deal with WebSockets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始WebSockets API可能并不那么容易。在下一节中，我们将介绍一个非常有用的Node.js模块来处理WebSockets。
- en: Bringing Socket.IO to the project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Socket.IO引入项目
- en: Socket.IO ([http://socket.io/](http://socket.io/)) is a real-time engine built
    on the top of WebSockets technology. It is a layer that makes web development
    easy and straightforward. Like every new thing nowadays, WebSockets comes with
    its own problems. Not every browser supports this technology. We may have problems
    with the protocol and missing events such as heartbeats, timeouts, or disconnection
    support. Thankfully, Socket.IO fixes these issues. It even provides fallbacks
    for the browsers that do not support WebSockets and goes with techniques such
    as long-polling.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO（[http://socket.io/](http://socket.io/)）是建立在WebSockets技术之上的实时引擎。它是一个使Web开发变得简单和直接的层。像现在的每一样新事物一样，WebSockets也有自己的问题。并非每个浏览器都支持这项技术。我们可能会遇到协议问题和缺少心跳、超时或断开支持等事件。幸运的是，Socket.IO解决了这些问题。它甚至为不支持WebSockets的浏览器提供了备用方案，并采用长轮询等技术。
- en: 'Before making changes in our backend, we need to install the module. The engine
    is distributed in the same way as every other Node.js module; it is available
    via the package manager. So, we have to add Socket.IO to the `package.json` file
    in the following way:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端进行更改之前，我们需要安装该模块。该引擎与每个其他Node.js模块一样分发；它可以通过包管理器获得。因此，我们必须以以下方式将Socket.IO添加到`package.json`文件中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that change, we will run `npm install` and get the `node_modules/socket.io`
    folder populated. Having installed the module, we can start updating our social
    network. Let''s add a `Chat.js` file to the backend directory containing the following
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些更改之后，我们将运行`npm install`并获取`node_modules/socket.io`文件夹。安装了该模块后，我们可以开始更新我们的社交网络。让我们在后端目录中添加一个`Chat.js`文件，其中包含以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The new module exports a function that accepts the HTTP server. In `server.js`,
    we can initialize it by using `http.createServer`, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 新模块导出一个接受HTTP服务器的函数。在`server.js`中，我们可以使用`http.createServer`来初始化它，如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Socket.IO is entirely built on the concept of event firing and listening. The
    `io` variable represents our communication hub. Every time a new user connects
    to our server, we get a connection event, and the handler that is invoked receives
    a `socket` object that we will use to process messages from and to the browser.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO完全建立在事件触发和监听的概念上。`io`变量代表我们的通信中心。每当新用户连接到我们的服务器时，我们都会收到一个连接事件，并且被调用的处理程序会接收一个`socket`对象，我们将使用它来处理从浏览器到和从浏览器的消息。
- en: In the preceding example, we sent (`emit`) an event with the `news` name containing
    some simple data. After this, we started listening to the other event that would
    come from the client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们发送（`emit`）了一个带有`news`名称的事件，其中包含一些简单的数据。之后，我们开始监听来自客户端的其他事件。
- en: 'Now, even if we restart the server, we are not going to receive any socket
    connections. This is because we did not change the frontend code. In order to
    make Socket.IO work on the client side, we need to include the `/socket.io/socket.io.js`
    file in our pages. The layout of our application is stored in `backend/tpl/page.html`,
    and after the modification, it looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使我们重新启动服务器，我们也不会收到任何socket连接。这是因为我们没有更改前端代码。为了使Socket.IO在客户端工作，我们需要在页面中包含`/socket.io/socket.io.js`文件。我们应用程序的布局存储在`backend/tpl/page.html`中，在修改后，它看起来像这样：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `socket.io.js` file does not exist in our codebase. It is a part of the
    Socket.IO module. The engine automatically registers a route to it and takes care
    that it serves the file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`socket.io.js`文件在我们的代码库中不存在。它是Socket.IO模块的一部分。引擎会自动注册一个路由，并确保它提供文件。'
- en: 'The final step in the testing of our WebSockets implementation is the connecting
    to the server. For the sake of simplicity, let''s add a few lines of code to the
    `frontend/js/app.js` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们WebSockets实现测试的最后一步是连接到服务器。为了简单起见，让我们在`frontend/js/app.js`文件中添加几行代码：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will put our code in the `onload` handler because we want to make sure that
    all the external JavaScript files are fully loaded. Then, we will initialize a
    connection to `http://localhost:9000`, which is the same host and port that the
    Node.js server runs on. The rest of the code does only one thing—it listens for
    a `news` event and responds with the other event message. If we run the server
    and load `http://localhost:9000` in a browser, we will get the following result
    in the terminal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的代码放在`onload`处理程序中，因为我们希望确保所有外部JavaScript文件都已完全加载。然后，我们将初始化到`http://localhost:9000`的连接，这是Node.js服务器运行的相同主机和端口。代码的其余部分只做一件事——监听`news`事件，并响应其他事件消息。如果我们在浏览器中运行服务器并加载`http://localhost:9000`，我们将在终端中得到以下结果：
- en: '![Bringing Socket.IO to the project](img/image00187.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![将Socket.IO引入项目](img/image00187.jpeg)'
- en: 'We got `{ my: ''data'' }` as an output because we have `console.log(data)`
    in the `backend/Chat.js` file.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '我们得到`{ my: ''data'' }`作为输出，因为在`backend/Chat.js`文件中有`console.log(data)`。'
- en: Preparing the UI of the chat area
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备聊天区域的UI
- en: 'Because real-time chat is an important part of our social network, we will
    create a separate page for it. As we did in the previous chapters, we will start
    with a new link in the main navigation, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因为实时聊天是我们社交网络的重要部分，我们将为其创建一个单独的页面。就像我们在之前的章节中所做的那样，我们将在主导航中添加一个新链接，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The latest link in the list will forward the user to the `http://localhost:9000/chat`
    URL where he/she will see the interface of the chat.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的最新链接将把用户转到`http://localhost:9000/chat`的URL，用户将在那里看到聊天的界面。
- en: 'Let''s handle the `/chat` route by tweaking the `frontend/js/app.js` file.
    Let''s make another addition to our router, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调整`frontend/js/app.js`文件来处理`/chat`路由。让我们对路由进行另一个添加，如下所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the same file, we will require the `frontend/js/controllers/Chat.js` module.
    It will contain the chat logic in the client side. We will start with something
    simple—a basic Ractive.js component, which can be implemented as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个文件中，我们将需要`frontend/js/controllers/Chat.js`模块。它将包含客户端的聊天逻辑。我们将从一些简单的东西开始——一个基本的Ractive.js组件，可以实现如下：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Like every other controller in our application, `Chat.js` has an associated
    template that contains an empty `<div>` element to display chat messages, a text
    field, and a button to send data to the server:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 像我们应用程序中的每个其他控制器一样，`Chat.js`有一个关联的模板，其中包含一个空的`<div>`元素来显示聊天消息，一个文本字段和一个发送数据到服务器的按钮：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is worth a mentioning that if you want to update the content of the `chat-output`
    element, you need to change the value of the `output` variable. The button also
    dispatches a `send` event, and we will catch this in the next section. After the
    compilation of the assets, if you go to the chat''s URL, you will see the following
    screen:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，如果要更新`chat-output`元素的内容，需要更改`output`变量的值。按钮还会触发一个`send`事件，我们将在下一节中捕获这个事件。在编译资产之后，如果您转到聊天的URL，您将看到以下屏幕：
- en: '![Preparing the UI of the chat area](img/image00188.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![准备聊天区域的UI](img/image00188.jpeg)'
- en: Exchanging messages between the client and the server
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端和服务器之间交换消息
- en: 'We are ready to write some working Socket.IO code. So far, we placed code snippets
    that only proved that the socket connection works. For example, the code that
    was added to `frontend/js/app.js` should be moved to `frontend/js/controllers/Chat.js`,
    which is the controller responsible for the chat page. Because it acts as a base
    for this real-time feature, we will start from there. Let''s add a couple of local
    variables to the component, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备编写一些可工作的Socket.IO代码。到目前为止，我们放置了一些代码片段，只是证明了套接字连接的工作。例如，添加到`frontend/js/app.js`的代码应该移动到`frontend/js/controllers/Chat.js`，这是负责聊天页面的控制器。因为它充当了这个实时功能的基础，我们将从那里开始。让我们向组件添加一些本地变量，如下所示：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These variables have default values, and they are available in the component''s
    template. The first one, `messages`, will keep all the messages that come from
    the users in the chat, including the current user. The `output` variable is used
    to populate the message container on the screen. The last one, `socketConnected`,
    controls the visibility of the text field and the button. If it is set to `false`,
    the controls will be hidden. Before initializing the connection with the server
    or getting disconnected for some reason, it is better to hide the chat input text
    field until the connection with the server is initialized. Otherwise, we may get
    disconnected for some reason. Here is how the updated template looks:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量具有默认值，并且可以在组件模板中使用。第一个变量`messages`将保存来自聊天用户的所有消息，包括当前用户。`output`变量用于在屏幕上填充消息容器。最后一个`socketConnected`控制文本字段和按钮的可见性。如果设置为`false`，则控件将被隐藏。在与服务器初始化连接或由于某种原因断开连接之前，最好隐藏聊天输入文本字段，直到与服务器的连接初始化。否则，我们可能会因某种原因断开连接。更新后的模板如下所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The difference is the `{{if}}` operator that wraps the field and the button.
    At the end of the chapter, we will colorize the messages, and we will be required
    to pass HTML tags. We will use `{{{output}}}` instead of `{{output}}` so that
    the framework displays them correctly (by turning off autoescaping).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 差异在于包裹字段和按钮的`{{if}}`运算符。在本章末尾，我们将对消息进行着色，并需要传递HTML标签。我们将使用`{{{output}}}`而不是`{{output}}`，以便框架正确显示它们（通过关闭自动转义）。
- en: 'Let''s go back to the frontend controller. We mentioned that the code placed
    in `app.js` moves here. It was the actual connection to the socket server. We
    will extend it in the following way:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到前端控制器。我们提到的代码放在`app.js`中移动到这里。这是与套接字服务器的实际连接。我们将以以下方式扩展它：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After receiving the `connect` event, we will add the `Connected!` string to
    the `messages` array. So, after receiving the **Loading. Please wait.** message,
    the user will see a confirmation that informs him/her that the application has
    established a successful socket connection. By setting `socketConnected` to `true`,
    we reveal the input controls and give an option to the user to send chat messages.
    The last thing in this handler is forcing the browser to focus on the input field,
    a nice little detail that saves a mouse click of the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 收到`connect`事件后，我们将`Connected!`字符串添加到`messages`数组中。因此，在收到**加载中，请稍候。**消息后，用户将看到一条确认消息，告知他/她应用程序已经建立了成功的套接字连接。通过将`socketConnected`设置为`true`，我们显示输入控件，并为用户提供发送聊天消息的选项。此处理程序中的最后一件事是强制浏览器聚焦在输入字段上，这是一个很好的细节，可以节省用户的鼠标点击。
- en: The `socket` object may dispatch another event—`disconnect`. There are two actions
    that we can take in this situation—hiding the input controls and notifying the
    user by showing the `Disconnected!` string in the browser.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`socket`对象可能会分派另一个事件 - `disconnect`。在这种情况下，我们可以采取两种行动 - 隐藏输入控件，并通过在浏览器中显示`Disconnected!`字符串来通知用户。'
- en: The last event that we were listening to was `server-talking`. This is our own
    event—a message that our backend code will dispatch. In the beginning, the `data`
    object will contain only one `text` property, which will be the chat message.
    We will simply append it to the rest of the elements of the `messages` array.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们监听的最后一个事件是`server-talking`。这是我们自己的事件 - 后端代码将分派的消息。一开始，`data`对象将只包含一个`text`属性，这将是聊天消息。我们将简单地将其附加到`messages`数组的其余元素中。
- en: 'The lines that we talked about earlier listen to the events that come from
    the backend. Let''s write some code that sends information from the client to
    the server:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈到的行监听来自后端的事件。让我们编写一些代码，将信息从客户端发送到服务器：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `send` function is called when the user clicks the button. We use the same
    `socket` object and its `emit` method to transfer the text to the server. We also
    clear the content of the input field so that the user can start composing a new
    message. Pressing the button every time is probably annoying. The following code
    triggers the `send` function when the user presses the *Enter* key:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户单击按钮时，将调用`send`函数。我们使用相同的`socket`对象及其`emit`方法将文本传输到服务器。我们还清除输入字段的内容，以便用户可以开始撰写新消息。每次按按钮可能很烦人。以下代码在用户按下*Enter*键时触发`send`函数：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `this.find` method returns a valid DOM element. We attach the `keypress`
    listener to the `form` element because the `input` variable is not always visible.
    Thanks to events bubbling, we are able to catch the event in the upper element.
    It is also worth a mention that in some browsers, a different code is required
    to listen to DOM events.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.find`方法返回一个有效的DOM元素。我们将`keypress`监听器附加到`form`元素，因为`input`变量并不总是可见。由于事件冒泡，我们能够在上层元素中捕获事件。还值得一提的是，在某些浏览器中，需要不同的代码来监听DOM事件。'
- en: 'The last thing that we have to take care of is the displaying of the content
    of the `messages` array on the screen. If you check the code that we''ve written
    so far, you will see that we did not update the `output` variable. Here is a new
    component method that will handle this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须处理的最后一件事是在屏幕上显示`messages`数组的内容。如果您检查到目前为止我们编写的代码，您会发现我们没有更新`output`变量。以下是一个新的组件方法，将处理这个问题：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Instead of looping through all the elements of the array, we use the `join`
    method. It joins all the elements of the array into a string separated by the
    given parameter. In our case, we need a new line after every message. Once we
    start receiving more data, we will need to scroll the `<div>` element down so
    that the user sees the latest ones. The other two lines of the function position
    the scroller of the container at the bottom.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`join`方法而不是循环遍历数组的所有元素。它将数组的所有元素连接成一个由给定参数分隔的字符串。在我们的情况下，我们需要在每条消息后面换行。一旦我们开始接收更多数据，我们将需要将`<div>`元素滚动到底部，以便用户看到最新的消息。函数的另外两行将容器的滚动条定位在底部。
- en: 'The `updateOutput` function should be called once a new message arrives. The
    Ractive.js observing is perfect for such cases:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateOutput`函数应该在新消息到达时被调用。Ractive.js的观察对于这种情况非常完美：'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Only one line is needed to wire the updating of a `messages` array to the `updateOutput`
    method. After this addition, every `push` to the message array will force the
    render of the `chat-output` element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要一行代码将`messages`数组的更新连接到`updateOutput`方法。添加了这个之后，每次对消息数组进行`push`操作都会强制渲染`chat-output`元素。
- en: 'The code for the component is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的代码如下：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The frontend is ready to send and receive messages through the socket. However,
    the backend still contains the initial example code that we started with. A small
    update of the `Chat` module will make it possible to send messages to the users:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前端已准备好通过套接字发送和接收消息。但是，后端仍然包含我们开始时的初始示例代码。对`Chat`模块进行小小的更新将使其能够向用户发送消息：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are still listening for the `connection` event. The `socket` object that
    we receive in the handler represents the connection with the user. After this,
    we will start listening to the `client-talking` event that is dispatched by the
    frontend when the user types something in a field or presses the button or the
    *Enter* key. Once the data is received, we broadcast it to all the users in the
    system. The `io.sockets.emit` variable sends a message to all the clients who
    are currently using the server.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍在监听`connection`事件。在处理程序中收到的`socket`对象代表与用户的连接。之后，我们将开始监听`client-talking`事件，该事件由前端在用户在字段中输入内容或按下按钮或*Enter*键时触发。一旦接收到数据，我们就会将其广播给系统中的所有用户。`io.sockets.emit`变量向当前使用服务器的所有客户端发送消息。
- en: Sending messages to the user's friends only
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅向用户的朋友发送消息
- en: The last change in our backend dispatches the received chat messages to all
    the users in our social network. This is of course not really practical, because
    we may exchange text with people who do not know each other. We have to change
    our code accordingly so that we send messages only to the users in our friends
    list.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们后端的最后一个更改是将接收到的聊天消息分发给我们社交网络中的所有用户。当然，这实际上并不太实用，因为我们可能会与彼此不认识的人交换文本。我们必须相应地更改我们的代码，以便只向我们朋友列表中的用户发送消息。
- en: 'With Socket.IO, we do not have access to the `request` and `response` objects
    as we do in the backend API by default. This will make the solving of the problem
    a bit more interesting because we can''t recognize the user sending the message.
    Thankfully, Socket.IO gives us access to the active session. It is in a raw format.
    So, we will need to parse it and extract the user''s profile data. To do this,
    we will use the `cookie` Node.js module. Let''s add it to the `package.json` file
    in the following way:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Socket.IO时，我们无法像在后端API中那样默认访问`request`和`response`对象。这将使得解决问题变得更有趣，因为我们无法识别发送消息的用户。幸运的是，Socket.IO让我们可以访问活动会话。它是以原始格式存在的。因此，我们需要解析它并提取用户的个人资料数据。为此，我们将使用`cookie`
    Node.js模块。让我们以以下方式将其添加到`package.json`文件中：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With another `npm install` in the terminal, we will be able to `require` the
    module. In [Chapter 8](part0054.xhtml#aid-1JFUC1 "Chapter 8. Creating Pages and
    Events"), *Creating Pages and Events*, we refactored our API and created the `backend/api/helpers.js`
    file that contains utility functions. We will add another file similar to `getCurrentUser`
    by using only the `session` object, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中进行另一个`npm install`后，我们将能够`require`该模块。在[第8章](part0054.xhtml#aid-1JFUC1 "第8章。创建页面和事件")中，*创建页面和事件*，我们重构了我们的API并创建了`backend/api/helpers.js`文件，其中包含实用函数。我们将使用仅使用`session`对象的方式添加另一个类似于`getCurrentUser`的文件，如下所示：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we compare both methods, we will see that there are two differences. The
    first difference is that we do not receive the usual request and response objects;
    we receive only a callback and a `session` object. The second change is that the
    result is always sent to the callback even if it is an error.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们比较这两种方法，我们会发现有两个不同之处。第一个不同之处是我们没有收到通常的请求和响应对象；我们只收到一个回调和一个`session`对象。第二个变化是即使出现错误，结果也总是发送到回调中。
- en: 'Armed with the `getCurrentUserBySessionObj` function, we can modify `backend/Chat.js`
    so that it sends messages only to the friends of the current user. Let''s initialize
    the needed helpers first. We will add the following lines to the top of the file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`getCurrentUserBySessionObj`函数，我们可以修改`backend/Chat.js`，使其只向当前用户的朋友发送消息。让我们首先初始化所需的辅助程序。我们将在文件顶部添加以下行：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We already talked about the `cookie` module. The session data that is available
    throughout the Socket.IO engine is reachable through `socket.request.headers.cookie`.
    If we print the value in the console, we will get something like the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过`cookie`模块。在Socket.IO引擎中可用的会话数据可以通过`socket.request.headers.cookie`访问。如果我们在控制台中打印该值，将会得到以下截图中的内容：
- en: '![Sending messages to the user''s friends only](img/image00189.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![仅向用户的朋友发送消息](img/image00189.jpeg)'
- en: 'The preceding output is a Base64-encoded string that we definitely cannot directly
    use. Thankfully, Node.js has interfaces to easily decode such values. Here is
    a short function that will extract the needed JSON object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出是一个Base64编码的字符串，我们肯定不能直接使用它。幸运的是，Node.js有接口可以轻松解码这样的值。以下是一个提取所需JSON对象的简短函数：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We passed the string from the cookie and received the normal `user` object that
    we will later use in `getCurrentUserBySessionObj`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从cookie中传递了字符串，并接收了稍后将在`getCurrentUserBySessionObj`中使用的普通`user`对象。
- en: 'So, we have mechanisms to find out who the current user is and who his/her
    friends are. All we have to do is cache the available socket connections and associated
    users. We will introduce a new global (for the module) `users` variable. It will
    act as a hash map where the key will be the ID of the user and the value will
    contain the socket and the friends. In order to broadcast messages to the right
    users, we can summarize the logic in the following method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有机制来找出当前用户是谁以及他/她的朋友是谁。我们所要做的就是缓存可用的套接字连接和相关用户。我们将引入一个新的全局（对于模块来说）`users`变量。它将作为一个哈希映射，其中键将是用户的ID，值将包含套接字和朋友。为了向正确的用户广播消息，我们可以总结以下方法的逻辑：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code provides a function that accepts the ID of a user and the text message.
    We will first check whether a socket reference is cached. If it is, then we will
    make sure that the user has friends. If this is valid too, then we will start
    dispatching messages. The first `emit` item is to the user himself/herself so
    that he/she receives his/her own message. The rest of the code loops over the
    friends and sends the text to all of them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码提供了一个接受用户ID和文本消息的函数。我们首先检查是否缓存了套接字引用。如果是，我们将确保用户有朋友。如果这也是有效的，我们将开始分发消息。第一个`emit`项是给用户自己，以便他/她接收自己的消息。其余的代码循环遍历朋友并将文本发送给所有人。
- en: 'We, of course, have to update the code that accepts the socket connection.
    Here is the new version of the same:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们必须更新接受套接字连接的代码。以下是相同代码的新版本：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We will now fetch the cookie value and determine the current user. The `socket`
    object and the user's friends are cached. Then, we will continue listening for
    the `client-talking` event, but now, we will send messages via the `broadcastMessage`
    function. A small but very important addition is made towards the end; we listen
    for the `disconnect` event and remove the cached data. That is needed to prevent
    sending data to the disconnected users.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将获取cookie值并确定当前用户。`socket`对象和用户的朋友已被缓存。然后，我们将继续监听`client-talking`事件，但现在，我们将通过`broadcastMessage`函数发送消息。在最后做了一个小但非常重要的添加；我们监听`disconnect`事件并移除缓存的数据。这是为了防止向断开连接的用户发送数据。
- en: Customizing the output of the chat
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义聊天输出
- en: It is nice that we can send messages to the right people, but the chat is still
    a bit confusing because every text message that appears on the screen is in the
    same color and we don't know which of our friends sent it. In this section, we
    are going to make two improvements—we will append the user's name to the front
    of the message and colorize the text.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 能够向正确的人发送消息是很好的，但聊天仍然有点混乱，因为屏幕上出现的每条文本消息都是相同的颜色，我们不知道哪个朋友发送的。在本节中，我们将进行两项改进——我们将在消息前附加用户的名称并给文本着色。
- en: 'Let''s start with the colors and add a new helper method to the `backend/api/helpers.js`
    file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从颜色开始，并在`backend/api/helpers.js`文件中添加一个新的辅助方法：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following function generates a valid RGB color that is ready for use in
    CSS. The right moment for you to pick a color for the user is when you cache the
    `socket` object, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数生成一个有效的RGB颜色，可以在CSS中使用。你选择用户颜色的时机是在缓存`socket`对象时：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So, along with the `socket` object and `friends`, we store a randomly picked
    color. There is another small update. We no longer pass the user's ID to the `broadcastMessage`
    function. We send the whole object because we need to fetch the first and last
    name of the user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除了`socket`对象和`friends`，我们还存储了一个随机选择的颜色。还有一个小的更新。我们不再将用户的ID传递给`broadcastMessage`函数。我们发送整个对象，因为我们需要获取用户的名字和姓氏。
- en: 'Here is the updated `broadcastMessage` helper:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更新后的`broadcastMessage`辅助方法：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, the `data` object that goes to the client contains two additional properties—the
    name of the current user and his/her randomly picked color.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，发送到客户端的`data`对象包含两个额外的属性——当前用户的名称和他/她随机选择的颜色。
- en: 'The backend does its job. All we have to do now is tweak the frontend controller
    so that it uses the name and color, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 后端已经完成了它的工作。现在我们要做的就是调整前端控制器，以便它使用名称和颜色，如下所示：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Instead of sending only text, we wrap the message in a `<span>` tag. It has
    a text color applied. Also, the message starts with the name of the user.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再只发送文本，而是将消息包装在`<span>`标签中。它应用了文本颜色。此外，消息以用户的名称开头。
- en: 'The final result of our work looks like the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作的最终结果如下截图所示：
- en: '![Customizing the output of the chat](img/image00190.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![自定义聊天输出](img/image00190.jpeg)'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Socket.IO is one of the most popular Node.js tools used to develop real-time
    applications. In this chapter, we successfully used it to build an interactive
    chat. The users in our network were able to not only post content that appeared
    in their feeds but also exchange messages with other users in real time. The WebSockets
    technology made this possible.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO是最流行的用于开发实时应用程序的Node.js工具之一。在本章中，我们成功地使用它构建了一个交互式聊天。我们网络中的用户不仅能够发布出现在其动态中的内容，还能够与其他用户实时交换消息。WebSockets技术使这一切成为可能。
- en: The next chapter is dedicated to testing. We will learn about a few popular
    modules that will help us write tests.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章专门讲解测试。我们将了解一些流行的模块，这些模块将帮助我们编写测试。
