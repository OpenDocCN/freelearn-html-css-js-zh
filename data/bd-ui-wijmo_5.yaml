- en: Chapter 5. Advanced Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。高级小部件
- en: Wijmo includes many advanced widgets commonly used in web development. These
    components of applications are often implemented with libraries or plugins. In
    this chapter, we cover the tooltip, upload, video, and editor widgets. The main
    advantage of using these Wijmo widgets over other libraries for the developer
    is its consistent API. For the user, the interface components look more consistent.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 包含许多在 Web 开发中常用的高级小部件。这些应用程序组件通常使用库或插件实现。在本章中，我们涵盖了 tooltip、上传、视频和编辑器小部件。对于开发者来说，使用这些
    Wijmo 小部件而不是其他库的主要优势是其一致的 API。对于用户来说，界面组件看起来更一致。
- en: Using the tooltip widget
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 tooltip 小部件
- en: 'Browsers, by default, display a textbox or balloon when hovering over image
    elements that have title attributes. To make these text balloons user friendly,
    Wijmo''s tooltip widget uses JavaScript and CSS to enhance them. By default, Wijmo
    shows the text in the `title` attribute of the tooltip elements. Consider a simple
    example with an input element:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器会在鼠标悬停在具有 title 属性的图像元素上时显示文本框或气球。为了让这些文本气球更易于用户使用，Wijmo 的 tooltip
    小部件使用 JavaScript 和 CSS 来增强它们。默认情况下，Wijmo 在 tooltip 元素的 `title` 属性中显示文本。考虑一个简单的示例，包含一个输入元素：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Calling `$("input[title]").wijtooltip()` generates a tooltip that shows when
    hovering over the element. In addition, the jQuery selector only applies the tooltip
    on those input elements that have titles. In this section, we explore how to position
    the tooltip, load AJAX content within it, and change its style.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `$("input[title]").wijtooltip()` 会在鼠标悬停在元素上时显示 tooltip。此外，jQuery 选择器仅应用于具有标题的输入元素。在本节中，我们将探讨如何定位
    tooltip、在内部加载 AJAX 内容以及更改其样式。
- en: Positioning the tooltip widget
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位 tooltip 小部件
- en: 'Wijmo uses jQuery UI''s position method which takes four main parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 使用 jQuery UI 的位置方法，该方法包含四个主要参数：
- en: '| Field | Values | Description |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `my` | `left`/`right`/`center`/`top`/`bottom`/`center` | The position on
    the element being moved |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `my` | `left`/`right`/`center`/`top`/`bottom`/`center` | 被移动元素上的位置 |'
- en: '| `at` | `left`/`right`/`center`/`top`/`bottom`/`center` | The position on
    the target element to be aligned against |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `at` | `left`/`right`/`center`/`top`/`bottom`/`center` | 目标元素上对齐的位置 |'
- en: '| `of` | `selector` | The target element to be positioned against |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `of` | `selector` | 要定位的目标元素 |'
- en: '| `offset` | `Integer` | The x y offset that specifies how much to move horizontally
    and vertically |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `offset` | `Integer` | 指定水平和垂直移动的 x y 偏移量 |'
- en: 'The syntax reads almost like a sentence. Suppose we wanted to position a box
    with ID `move-it` so that its top left is at the right bottom of the target; then
    we could use the `position` method in the following way:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 语法几乎就像一个句子。假设我们想要定位一个 ID 为 `move-it` 的框，使其左上角位于目标元素的右下角；那么我们可以使用以下方式调用 `position`
    方法：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot depicts the elements in the preceding example as boxes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面示例中的元素作为框：
- en: '![Positioning the tooltip widget](img/6067OT_5_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![定位 tooltip 小部件](img/6067OT_5_01.jpg)'
- en: jQuery UI has an example page where you can play around with the different position
    settings at [http://jqueryui.com/position/](http://jqueryui.com/position/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 有一个示例页面，您可以在其中尝试不同的位置设置，[http://jqueryui.com/position/](http://jqueryui.com/position/)。
- en: 'In the context of the tooltip, the `my` parameter specifies the position of
    the tooltip arrow. The following diagram shows each of the configurations for
    the `my` parameter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tooltip 的上下文中，`my` 参数指定 tooltip 箭头的位置。以下图表显示了 `my` 参数的每种配置：
- en: '![Positioning the tooltip widget](img/6067OT_5_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![定位 tooltip 小部件](img/6067OT_5_02.jpg)'
- en: The `at` parameter for the tooltip works exactly the same way as with jQuery
    UI's position method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: tooltip 的 `at` 参数与 jQuery UI 的位置方法完全相同。
- en: Loading AJAX content in the tooltip widget
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 tooltip 小部件中加载 AJAX 内容
- en: 'A commonly used pattern for tooltips is loading external content. Wijmo tooltips
    have the `ajaxCallback` option for inserting content into the tooltip. Our example
    sends a request to the server and displays its response. We set the `data-id`
    attribute on the links to be the indexes of the content we want. For instance,
    this link refers to the first element in a table:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 tooltip，一个常用的模式是加载外部内容。Wijmo tooltip 具有用于在 tooltip 中插入内容的 `ajaxCallback`
    选项。我们的示例向服务器发送请求并显示其响应。我们设置了链接的 `data-id` 属性，使其成为我们想要的内容的索引。例如，此链接指向表格中的第一个元素：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since you''re sending the request to the server, `data-id` would be the primary
    key of the row in the table or model you''re querying. The following code snippet
    demonstrates how to retrieve AJAX content:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您正在向服务器发送请求，`data-id` 将是您正在查询的表或模型中行的主键。以下代码片段演示了如何检索 AJAX 内容：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `ajaxCallback` function, the ID associated with each link is retrieved
    with `$tooltip.attr("data-id")`, which returns the value of the `data-id` attribute.
    This ID is then used to retrieve the tooltip contents, which is set with `$tooltip.wijtooltip("option",
    "content", "text")`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ajaxCallback` 函数中，使用 `$tooltip.attr("data-id")` 获取与每个链接关联的 ID，它返回 `data-id`
    属性的值。然后使用此 ID 获取提示信息内容，该内容通过 `$tooltip.wijtooltip("option", "content", "text")`
    设置。
- en: Styling the tooltip widget
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计提示信息小部件
- en: 'By default, Wijmo styles tooltips using the theme you selected, but we want
    tooltips to stand out from the rest of the user interface. By applying a few CSS
    classes, we can quickly change a Rocket-themed tooltip to a customized tooltip
    as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Wijmo 使用您选择的主题来设计提示信息，但我们要使提示信息从用户界面中脱颖而出。通过应用一些 CSS 类，我们可以快速将火箭主题的提示信息更改为自定义提示信息，如以下截图所示：
- en: '![Styling the tooltip widget](img/6067OT_5_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![设计提示信息小部件](img/6067OT_5_03.jpg)'
- en: 'When styling the tooltip, the idea is to set the border, background, and text
    colors without overriding the default theme classes such as `.ui-container`. We
    do this by setting the colors on the tooltip classes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计提示信息时，想法是设置边框、背景和文字颜色，而不覆盖默认主题类，如 `.ui-container`。我们通过在提示信息类上设置颜色来实现这一点：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `.wijmo-wijtooltip-pointer-inner` class is applied to the tail in the speech
    bubble, so we set its background color to be the same as the `.wijmo-wijtooltip-container`
    class. The text color is also set within the `.wijmo-wijtooltip-container` class.
    Finally, we set the border colors on the tooltip and the pointer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`.wijmo-wijtooltip-pointer-inner` 类应用于气泡中的尾巴，因此我们将它的背景颜色设置为与 `.wijmo-wijtooltip-container`
    类相同。文字颜色也在 `.wijmo-wijtooltip-container` 类中设置。最后，我们在提示信息和指针上设置边框颜色。'
- en: 'To make it easier to adjust the colors, I set the tooltip to show automatically
    with the `closeBehavior` option set to `sticky`. Making the tooltip sticky makes
    it stay on the page after moving the mouse outside of the `target` element. In
    this case, it''s the label. The complete example is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易调整颜色，我设置了提示信息自动显示，并将 `closeBehavior` 选项设置为 `sticky`。使提示信息保持粘性，使其在鼠标移出 `target`
    元素（在这种情况下是标签）后仍然停留在页面上。完整的示例如下：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the upload widget with the ProgressBar element
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带有 ProgressBar 元素的上传小部件
- en: The Wijmo `upload` widget can upload multiple files at once, and supports a
    progress bar. File uploads use `HttpHandler` to reduce the load on the server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 的 `upload` 小部件可以一次性上传多个文件，并支持进度条。文件上传使用 `HttpHandler` 减少服务器负载。
- en: '![Using the upload widget with the ProgressBar element](img/6067OT_5_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用带有 ProgressBar 元素的上传小部件](img/6067OT_5_04.jpg)'
- en: When initialized, the upload widget only has the **Upload files** button as
    shown in the preceding screenshot. Once a file is selected, the upload file user
    interface has the **Upload files** button to open the file browser, a **Cancel
    All** button, and an **Upload All** button. Each file that is selected has an
    individual upload or cancel button next to it. While uploading, the upload progress
    is shown in a progress bar element.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当初始化时，上传小部件只有前面截图所示的 **上传文件** 按钮。一旦选择文件，上传文件用户界面将包含 **上传文件** 按钮以打开文件浏览器，一个 **取消全部**
    按钮，以及一个 **全部上传** 按钮。每个选定的文件旁边都有一个单独的上传或取消按钮。在上传过程中，上传进度在进度条元素中显示。
- en: 'We will look at an example of replacing file inputs in web forms, where the
    file uploads are submitted with the form:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看一个示例，该示例涉及在网页表单中替换文件输入，其中文件上传与表单一起提交：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With `supportXhr = $("#upload").wijupload("supportXhr")`, we check whether the
    upload widget can be hooked up with AJAX to display file upload progress. Although
    hidden, the progress bar is initialized when AJAX hooks are available.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `supportXhr = $("#upload").wijupload("supportXhr")`，我们检查上传小部件是否可以与 AJAX 连接以显示文件上传进度。尽管进度条是隐藏的，但在
    AJAX 连接可用时进度条会被初始化。
- en: The `upload` widget is initialized with three event handlers to enable the progress
    bar. First, `totalUpload` is the event that gets fired when the **Upload All**
    button is clicked. In this example, we show the progress bar. Since `<div id="progressbar"></div>`
    is an empty element, calling the jQuery `show` method does not render anything
    visible. Next, the `totalComplete` event is triggered when all the files have
    been uploaded. We fadeout the progress bar and set its value to zero for its next
    use. Finally, as the file is getting uploaded, the function defined for `totalProgress`
    receives the upload progress and the number of bytes uploaded to display in the
    progress bar. The `action` option for the upload widget is the URL where the form
    is submitted on the server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`upload`小部件通过三个事件处理器初始化以启用进度条。首先，当点击**上传全部**按钮时，会触发`totalUpload`事件。在这个例子中，我们显示了进度条。由于`<div
    id="progressbar"></div>`是一个空元素，调用jQuery的`show`方法不会渲染任何可见内容。接下来，当所有文件都已上传时，会触发`totalComplete`事件。我们淡出进度条并将其值设置为零，以便下次使用。最后，当文件正在上传时，为`totalProgress`定义的函数会接收到上传进度和已上传的字节数，以便在进度条中显示。上传小部件的`action`选项是表单在服务器上提交的URL。'
- en: Applying Wijmo themes to HTML5 videos
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Wijmo主题应用于HTML5视频
- en: 'The Wijmo video widget works with the HTML5 video tag and adds controls using
    jQuery UI theming. The video player has the common play/stop, volume, and full-screen
    controls. To initialize the widget, just call the `wijvideo` method on a video
    element. To support all browsers, the video element needs to have the video encoded
    in at least two formats. The browser support for each format is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo视频小部件与HTML5视频标签一起工作，并使用jQuery UI主题添加控件。视频播放器具有常见的播放/停止、音量和全屏控制。要初始化小部件，只需在视频元素上调用`wijvideo`方法。为了支持所有浏览器，视频元素需要至少以两种格式编码。每种格式的浏览器支持情况如下：
- en: '| Browser | MP4 | WebM | Ogg |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | MP4 | WebM | Ogg |'
- en: '| --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Internet Explorer 9+ | YES | NO | NO |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Internet Explorer 9+ | YES | NO | NO |'
- en: '| Chrome 6+ | YES | YES | YES |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Chrome 6+ | YES | YES | YES |'
- en: '| Firefox 3.6+ | NO | YES | YES |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Firefox 3.6+ | NO | YES | YES |'
- en: '| Safari 5+ | YES | NO | NO |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Safari 5+ | YES | NO | NO |'
- en: '| Opera 10.6+ | NO | YES | YES |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Opera 10.6+ | NO | YES | YES |'
- en: 'For older browsers that don''t support HTML5 such as IE8, it is recommended
    to not use the video widget. However, you can insert text content to display a
    message in place of the video. The full markup looks like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持HTML5的老旧浏览器，例如IE8，建议不要使用视频小部件。然而，你可以插入文本内容以显示视频的替代信息。完整的标记如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you change the width or height, the video automatically resizes to fit the
    area. To initialize the video widget, we would call `$("video").wijvideo()`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更改宽度或高度，视频会自动调整大小以适应区域。要初始化视频小部件，我们会调用`$("video").wijvideo()`。
- en: Using the editor widget
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用编辑器小部件
- en: 'The Wijmo editor allows non-technical users to manage and write HTML content.
    Unlike other HTML editing tools for the browser on the market, Wijmo sports a
    Microsoft Office 2007 style Ribbon UI, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo编辑器允许非技术用户管理和编写HTML内容。与其他市场上的浏览器HTML编辑工具不同，Wijmo具有类似于Microsoft Office 2007样式的功能区用户界面，如下面的截图所示：
- en: '![Using the editor widget](img/6067OT_5_05.jpg)![Using the editor widget](img/6067OT_5_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用编辑器小部件](img/6067OT_5_05.jpg)![使用编辑器小部件](img/6067OT_5_06.jpg)'
- en: 'The Ribbon UI automatically resizes to fit within the textarea dimensions that
    create the widget, as shown in the preceding screenshot. It supports three views
    for editing HTML. For non-technical users, there is a **WYSIWYG** view that acts
    like Microsoft Word. The formatting and layout is exactly what you see in the
    editor. In addition, there is a source code view for those who know HTML. Furthermore,
    the **split** view is a combination of these two so that the HTML and its preview
    are both visible. To initialize an editor, just call the `wijeditor` method on
    a textarea; for example, `$("#wijeditor").wijeditor({ mode: "ribbon"})`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '功能区用户界面会自动调整大小以适应创建小部件的textarea维度，如前面的截图所示。它支持三种编辑HTML的视图。对于非技术用户，有一个**WYSIWYG**视图，其功能类似于Microsoft
    Word。格式和布局与编辑器中看到的一模一样。此外，还有一个源代码视图，供了解HTML的用户使用。此外，**分割**视图是这两种视图的结合，以便HTML及其预览都可见。要初始化编辑器，只需在textarea上调用`wijeditor`方法；例如，`$("#wijeditor").wijeditor({
    mode: "ribbon"})`。'
- en: Using the editor widget with BBCode for forums
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在论坛中使用编辑器小部件与BBCode
- en: 'For forum and blog use, the editor supports BBCode, namely tags such as `[url=http://example.com]Example[/url]`.
    If BBCode is used, the source view is in the BBCode format. The editor must be
    initialized in the `bbcode` mode:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于论坛和博客的使用，编辑器支持BBCode，即如 `[url=http://example.com]Example[/url]` 这样的标签。如果使用BBCode，源视图将以BBCode格式显示。编辑器必须在`bbcode`模式下初始化：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Calling `$("#wijeditor").wijeditor({ mode: "bbcode"})` generates an editor
    with BBCode controls.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '调用 `$("#wijeditor").wijeditor({ mode: "bbcode"})` 将生成一个带有BBCode控件的编辑器。'
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the tooltip, upload, video, and editor widgets.
    These widgets are commonly used in web applications. We took a look at customizing
    the tooltip styling so that it stands out from the rest of the UI and loading
    AJAX content in it. We've seen how to upload multiple files with Wijmo while showing
    a progress bar, a video widget, and the Ribbon style editor. In the next chapter,
    you will learn how to combine Wijmo with Knockout to build interactive user interfaces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于工具提示、上传、视频和编辑器小部件的内容。这些小部件在Web应用程序中常用。我们查看如何自定义工具提示样式，使其在UI中脱颖而出，并在其中加载AJAX内容。我们看到了如何使用Wijmo上传多个文件，同时显示进度条、视频小部件和带状风格编辑器。在下一章中，你将学习如何将Wijmo与Knockout结合使用来构建交互式用户界面。
