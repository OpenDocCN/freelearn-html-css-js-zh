- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: 'SportsStore: Orders and Validation'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SportsStore：订单和验证
- en: In this chapter, we continue to build the SportsStore application by adding
    support for placing orders, which includes validating the form data provided by
    the user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续通过添加支持下单功能来构建 SportsStore 应用程序，这包括验证用户提供的表单数据。
- en: Preparing for this chapter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为本章做准备
- en: This chapter uses the `sportsstore` project from *Chapter 17*. No changes are
    required for this chapter. Open a new command prompt, navigate to the `sportsstore`
    folder, and run the command shown in *Listing 18.1* to start the development tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用 *第 17 章* 中的 `sportsstore` 项目。本章不需要任何更改。打开一个新的命令提示符，导航到 `sportsstore` 文件夹，并运行
    *列表 18.1* 中显示的命令以启动开发工具。
- en: '**Tip**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* to get help if you have problems running the examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)
    下载本章的示例项目——以及本书中所有其他章节的示例项目。如果你在运行示例时遇到问题，请参阅 *第 1 章* 以获取帮助。
- en: 'Listing 18.1: Starting the development tools'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.1：启动开发工具
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the product catalog, as shown in *Figure 18.1*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器窗口，导航到 `http://localhost:5000`，你将看到产品目录，如 *图 18.1* 所示。
- en: '![](img/B21959_18_01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_18_01.png)'
- en: 'Figure 18.1: Running the application'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.1：运行应用程序
- en: Handling orders
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理订单
- en: 'The data model for handling orders comes in two parts: the order and the user
    profile. The order describes the products that have been selected and provides
    the shipment status of the order. As noted in *Chapter 16*, the SportsStore application
    doesn’t extend to implementing the payment and fulfillment processes, which are
    typically handled by integration with separate platforms.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 处理订单的数据模型分为两部分：订单和用户配置文件。订单描述了已选择的产品并提供订单的发货状态。如 *第 16 章* 所述，SportsStore 应用程序不扩展到实现支付和履行过程，这些通常由与单独平台的集成来处理。
- en: Creating the data model
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据模型
- en: To get started, add a file named `customer_models.ts` to the `src/data` folder,
    with the content shown in *Listing 18.2*. This is a placeholder to represent customers
    with just enough functionality to start working on orders.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请将一个名为 `customer_models.ts` 的文件添加到 `src/data` 文件夹中，内容如 *列表 18.2* 所示。这是一个占位符，用于表示客户，具有仅够开始处理订单的功能。
- en: 'Listing 18.2: The contents of the customer_models.ts file in the src/data folder'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.2：src/data 文件夹中 customer_models.ts 文件的内容
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To describe orders, add a file named `order_models.ts` to the `src/data` folder
    with the content shown in *Listing 18.3*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述订单，请将一个名为 `order_models.ts` 的文件添加到 `src/data` 文件夹中，内容如 *列表 18.3* 所示。
- en: 'Listing 18.3: The contents of the order_models.ts file in the src/data folder'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.3：src/data 文件夹中 order_models.ts 文件的内容
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `Order` interface describes a single order, with `ProductSelection` objects
    that represent the products the user has purchased, including the price at the
    time of purchase. The customer is represented by a `Customer` object and the addresses
    for shipping and billing are represented by `Address` objects. The details required
    for real online stores vary based on local laws and customs and the type of products
    being sold, but these interfaces are a reasonable approximation of the basic order
    characteristics that can be adapted as needed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Order` 接口描述了一个订单，其中包含代表用户购买的产品（包括购买时的价格）的 `ProductSelection` 对象。客户由 `Customer`
    对象表示，而发货和账单地址由 `Address` 对象表示。实际在线商店所需的详细信息取决于当地法律和习俗以及销售的产品类型，但这些接口是对基本订单特征的合理近似，可以根据需要调整。'
- en: To describe the access to order data, add a file named `order_repository.ts`
    to the `src/data` folder, with the content shown in *Listing 18.4*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述对订单数据的访问，请将一个名为 `order_repository.ts` 的文件添加到 `src/data` 文件夹中，内容如 *列表 18.4*
    所示。
- en: 'Listing 18.4: The contents of the order_repository.ts file in the src/data
    folder'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.4：src/data 文件夹中 order_repository.ts 文件的内容
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `getOrder` method returns a single order, identified by its `id` value.
    The `getOrders` method retrieves all orders, with a parameter that allows shipped
    orders to be excluded from the results. The `storeOrder` method stores or updates
    an order.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`getOrder` 方法返回一个订单，通过其 `id` 值进行标识。`getOrders` 方法检索所有订单，有一个参数允许排除已发货的订单。`storeOrder`
    方法存储或更新订单。'
- en: Implementing the model classes
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现模型类
- en: I am going to extend the existing Sequelize implementation of the `CatalogRepository`
    interface to implement the methods defined by the `OrderRepository` interface,
    which will allow a single database to store both catalog and order data. Add a
    file named `customer_models.ts` to the `src/data/orm/models` folder with the content
    shown in *Listing 18.5*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算扩展现有的 Sequelize 实现 `CatalogRepository` 接口，以实现 `OrderRepository` 接口定义的方法，这将允许单个数据库存储目录和订单数据。在
    `src/data/orm/models` 文件夹中添加一个名为 `customer_models.ts` 的文件，其内容如 *清单 18.5* 所示。
- en: '**One versus Many Databases**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**单数据库与多数据库**'
- en: 'It can be appealing from a design perspective to keep each category of data
    in its own database, so that catalog data, for example, is stored separately from
    order or user data. In practice, separate databases are difficult to manage, especially
    since most categories of data used by an application have some kind of relationship:
    orders need to refer to products, user accounts need to be associated with orders,
    and so on. Putting an application’s data in a single database makes it easier
    to use database features like transactions to ensure data integrity and simplifies
    correlating data in queries.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从设计角度来看，将每种类型的数据存储在其自己的数据库中可能很有吸引力，例如，目录数据可以单独存储，与订单或用户数据分开。在实践中，单独的数据库难以管理，尤其是大多数应用程序使用的数据类别之间都存在某种关系：订单需要引用产品，用户账户需要与订单关联，等等。将应用程序的数据存储在单个数据库中，可以更方便地使用数据库功能，如事务，以确保数据完整性，并简化查询中的数据关联。
- en: If you decide to use multiple databases, then you assume responsibility for
    managing transactions across databases, and ensuring that data remains consistent
    so that relationships between databases are consistent. There are tools available
    to help, such as distributed transaction managers, for example, but they can be
    complex and difficult to use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用多个数据库，那么你需要负责管理数据库之间的事务，并确保数据保持一致性，以便数据库之间的关系保持一致。有一些工具可以帮助，例如分布式事务管理器，但它们可能很复杂且难以使用。
- en: My advice, from a purely practical perspective, is to use a single database
    for all an application’s data whenever possible. When a single database isn’t
    possible, such as when employee data is stored in a central HR database to which
    your application has read-only access, then you should pay close attention to
    how the relationships between data are managed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从纯粹实用的角度来看，我的建议是在可能的情况下，始终使用单个数据库来存储应用程序的所有数据。当不可能使用单个数据库时，例如当员工数据存储在中央 HR 数据库中，而你的应用程序只有只读访问权限时，你应该密切关注数据之间关系的管理。
- en: 'Listing 18.5: The contents of the customer_models.ts file in the src/data/orm/models
    folder'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.5：`src/data/orm/models` 文件夹中 `customer_models.ts` 文件的内容
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `CustomerModel` class implements the `Customer` interface to allow customer
    data to be stored by Sequelize. To tell Sequelize how to initialize the model
    class, add a file named `customer_helpers.ts` to the `src/data/orm/models` folder
    with the content shown in *Listing 18.6*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomerModel` 类实现了 `Customer` 接口，以便通过 Sequelize 存储客户数据。为了告诉 Sequelize 如何初始化模型类，在
    `src/data/orm/models` 文件夹中添加一个名为 `customer_helpers.ts` 的文件，其内容如 *清单 18.6* 所示。'
- en: 'Listing 18.6: The contents of the customer_helpers.ts file in the src/data/orm/models
    folder'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.6：`src/data/orm/models` 文件夹中 `customer_helpers.ts` 文件的内容
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `initializeCustomerModels` function initializes the `CustomerModel` class
    and specifies the SQL datatype and configuration for each model property.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`initializeCustomerModels` 函数初始化 `CustomerModel` 类，并指定每个模型属性的 SQL 数据类型和配置。'
- en: Creating the order models
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建订单模型
- en: To create the implementations of the interfaces that describe an order, add
    a file named `order_models.ts` to the `server/data/orm/models` folder, with the
    content shown in *Listing 18.7*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建描述订单的接口的实现，在 `server/data/orm/models` 文件夹中添加一个名为 `order_models.ts` 的文件，其内容如
    *清单 18.7* 所示。
- en: 'Listing 18.7: The contents of the order_models.ts file in the src/data/orm/models
    folder'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.7：`src/data/orm/models` 文件夹中 `order_models.ts` 文件的内容
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The model classes use Sequelize features described in earlier examples and implement
    the `Order`, `ProductSelection`, and `Address` interfaces. As noted in earlier
    chapters, it can be a fiddly process to get the data model just right, and I find
    it easier to define the model classes and the helper code that initializes them
    at the same time. Add a file named `order_helpers.ts` to the `server/data/orm/models`
    folder with the content shown in *Listing 18.8*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模型类使用了在早期示例中描述的Sequelize特性，并实现了`Order`、`ProductSelection`和`Address`接口。正如前几章所述，获取准确的数据模型可能是一个繁琐的过程，我发现同时定义模型类和初始化它们的辅助代码更容易。将一个名为`order_helpers.ts`的文件添加到`server/data/orm/models`文件夹中，其内容如*清单18.8*所示。
- en: 'Listing 18.8: The contents of the order_helpers.ts file in the server/data/orm/models
    folder'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.8*：`server/data/orm/models`文件夹中`order_helpers.ts`文件的内容'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to initializing the model classes, the `initializeOrderModels` function
    describes the relationship between them, which shapes the structure of the database
    tables that will be created to store the data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了初始化模型类之外，`initializeOrderModels`函数描述了它们之间的关系，这决定了将要创建以存储数据的数据库表的结构。
- en: 'As noted in *Chapter 15*, Sequelize adds methods to model classes that allow
    related data to be managed. This is done using the same mixin technique I used
    to build up the repository in *Chapter 16*. One of the methods that will be created
    as a consequence of the one-to-many relationship between the `ProductSelectionModel`
    and `OrderModel` classes will be named `setSelections`, which is why I added this
    `declare` statement to the `OrderModel` class:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在*第15章*中所述，Sequelize为模型类添加了方法，允许管理相关数据。这是通过使用我在*第16章*中构建仓库时使用的相同混合技术来实现的。由于`ProductSelectionModel`和`OrderModel`类之间的一对多关系，将创建一个名为`setSelections`的方法，这就是为什么我在`OrderModel`类中添加了这个`declare`语句的原因：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Sequelize` adds methods for all of the model properties, but this is the only
    one that I need for the SportsStore application. Therefore, it is the only one
    for which I added a `declare` statement. *Listing 18.9* invokes the `initializeCustomerModels`
    and `initializeOrderModels` functions so that the model classes are initialized
    alongside those used by the product catalog.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sequelize`为所有模型属性添加了方法，但这是SportsStore应用程序唯一需要的方法。因此，这是我唯一添加了`declare`语句的方法。*清单18.9*调用了`initializeCustomerModels`和`initializeOrderModels`函数，以便模型类与产品目录中使用的类一起初始化。'
- en: 'Listing 18.9: Initializing models in the index.ts file in the src/data/orm/models
    folder'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.9*：`src/data/orm/models`文件夹中`index.ts`文件中初始化模型'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `initializeModels` function now initializes all three categories of model
    classes used by the application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`initializeModels`函数现在初始化了应用程序使用的所有三类模型类。'
- en: Implementing the repository
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现仓库
- en: The next step is to create implementations of the methods defined by the `OrderRepository`
    interface. Add a file named `order_queries.ts` to the `src/data/orm` folder with
    the content shown in *Listing 18.10*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建`OrderRepository`接口定义的方法的实现。将一个名为`order_queries.ts`的文件添加到`src/data/orm`文件夹中，其内容如*清单18.10*所示。
- en: 'Listing 18.10: The contents of the order_queries.ts file in the src/data/orm
    folder'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.10*：`src/data/orm`文件夹中`order_queries.ts`文件的内容'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `AddOrderQueries` function returns a class that implements the `getOrder`
    and `getOrders` methods required by the `OrderRepository` interface. To keep queries
    consistent, I have used the types provided by Sequelize to describe the options
    used to query the database. Query options for `OrderModel` data are described
    using the `FindOptions<Attributes<OrderModel>>` type. The `queryConfig` object
    uses the `include` property to incorporate related `AddressModel` and `CustomerModel`
    data in the results and sets the `raw` and `nest` properties to specify the format
    of the results. To implement the remaining interface method, add a file named
    `order_storage.ts` to the `src/data/orm` folder with the content shown in *Listing
    18.11*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddOrderQueries`函数返回一个实现了`getOrder`和`getOrders`方法的类，这些方法是`OrderRepository`接口所要求的。为了保持查询的一致性，我使用了Sequelize提供的类型来描述用于查询数据库的选项。使用`FindOptions<Attributes<OrderModel>>`类型描述`OrderModel`数据的查询选项。`queryConfig`对象使用`include`属性将相关的`AddressModel`和`CustomerModel`数据包含在结果中，并将`raw`和`nest`属性设置为指定结果的格式。为了实现剩余的接口方法，将一个名为`order_storage.ts`的文件添加到`src/data/orm`文件夹中，其内容如*清单18.11*所示。'
- en: 'Listing 18.11: The contents of the order_storage.ts file in the src/data/orm
    folder'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.11*：`src/data/orm`文件夹中`order_storage.ts`文件的内容'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Sequelize` `upsert` method is used to update or create the order, customer,
    and address data. The product selections are stored using the `bulkCreate` method,
    which allows multiple rows to be stored in a single operation, and the `mixin`
    `setSelections` method is used to associate the stored product selections with
    the order. These operations are all performed within the same transaction to ensure
    data consistency. *Listing 18.12* uses the JavaScript `mixin` feature to incorporate
    the order functionality into the combined repository class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Sequelize` 的 `upsert` 方法来更新或创建订单、客户和地址数据。产品选择使用 `bulkCreate` 方法存储，该方法允许在单个操作中存储多行，并使用
    `mixin` `setSelections` 方法将存储的产品选择与订单关联。这些操作都在同一事务中执行，以确保数据一致性。*清单 18.12* 使用 JavaScript
    `mixin` 功能将订单功能合并到仓库类中。
- en: 'Listing 18.12: Adding orders to the index.ts file in the src/data/orm folder'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.12：在 src/data/orm 文件夹中的 index.ts 文件中添加订单
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `CatalogRepoImpl` class exported from this module implements the methods
    required by the `CatalogRepository` and `OrderRepository` interfaces. Even though
    a single class implements all repository methods, I prefer to present the functionality
    separately to the rest of the application, as shown in *Listing 18.13*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从本模块导出的 `CatalogRepoImpl` 类实现了 `CatalogRepository` 和 `OrderRepository` 接口所需的方法。尽管单个类实现了所有仓库方法，但我更喜欢将功能单独呈现给应用程序的其他部分，如
    *清单 18.13* 所示。
- en: 'Listing 18.13: Creating the repository in the index.ts file in the src/data
    folder'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.13：在 src/data 文件夹中的 index.ts 文件中创建仓库
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The TypeScript type annotations will ensure that each of the constants exported
    by this module will present only the methods defined by one of the repository
    interfaces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 类型注解将确保此模块导出的每个常量都只呈现由仓库接口之一定义的方法。
- en: Implementing the order flow
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现订单流程
- en: Now that the data model extends to describe and store order data, the next step
    is to create the workflow that allows orders to be created and stored.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据模型扩展到描述和存储订单数据，下一步是创建允许创建和存储订单的工作流程。
- en: Validating data
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证数据
- en: The process of creating an order requires data from the user, which will be
    validated before it is used and stored. To install the validation package and
    its TypeScript descriptions, use a command prompt to run the commands shown in
    *Listing 18.14* in the `sportsstore` folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建订单的过程需要用户数据，这些数据在使用和存储之前将进行验证。要安装验证包及其 TypeScript 描述，请在 `sportsstore` 文件夹中运行
    *清单 18.14* 中显示的命令。
- en: 'Listing 18.14: Installing the validation packages'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.14：安装验证包
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These packages are described in *Table 18.1* for quick reference.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包在 *表 18.1* 中进行了描述，以便快速参考。
- en: 'Table 18.1: The validation packages'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18.1：验证包
- en: '| Name | Description |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| This package contains validators for common data types. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含常见数据类型的验证器。|'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| This package contains TypeScript descriptions of the validator API. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含验证器 API 的 TypeScript 描述。|'
- en: To start the validation functionality, create the `src/data/validation` folder
    and add to it a file named `validation_types.ts` with the content shown in *Listing
    18.15*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动验证功能，创建 `src/data/validation` 文件夹，并向其中添加一个名为 `validation_types.ts` 的文件，其内容如
    *清单 18.15* 所示。
- en: 'Listing 18.15: The contents of the validation_types.ts file in the src/data/validation
    folder'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 18.15：src/data/validation 文件夹中 validation_types.ts 文件的内容
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `ValidationStatus` class represents the validation status of a single model
    property, which will allow rules to validate the data. The `ValidationRule` type
    describes a rule that receives a `ValidationStatus` object and validates the data
    value it defines. The validity of a value can be set using the `setInvalid` method
    defined by the `ValidationStatus` class, which latches so that once a value has
    been marked as `invalid`, it cannot be returned to the `valid` state by another
    rule.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidationStatus` 类表示单个模型属性的验证状态，这将允许规则验证数据。`ValidationRule` 类型描述了一个接收 `ValidationStatus`
    对象并验证其定义的数据值的规则。可以使用 `ValidationStatus` 类定义的 `setInvalid` 方法设置值的有效性，该方法锁定值，一旦值被标记为
    `invalid`，则无法通过另一个规则返回到 `valid` 状态。'
- en: The `ValidationRuleSet<T>` type describes the set of rules that are applied
    to a model class, `T`. Each property defined by the model class must have at least
    one validation rule.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidationRuleSet<T>` 类型描述了应用于模型类 `T` 的规则集。模型类定义的每个属性都必须至少有一个验证规则。'
- en: The `ValidationResults<T>` type describes the validation results for a model
    object, with a `ValidationStatus` object defined for each model property.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidationResults<T>` 类型描述了模型对象的验证结果，为每个模型属性定义了一个 `ValidationStatus` 对象。'
- en: 'The `ValidationRuleSet<T>` and `ValidationResults<T>` types use the TypeScript
    utility types to describe how validation requirements and results are expressed
    for models:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidationRuleSet<T>` 和 `ValidationResults<T>` 类型使用 TypeScript 实用类型来描述模型验证要求和结果的表示方式：'
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This incantation tells the TypeScript compiler that properties are required
    for each property defined by the type `T`, including optional properties, except
    for the property named `id`. TypeScript provides a range of useful utility types
    (described at [https://www.typescriptlang.org/docs/handbook/utility-types.html](https://www.typescriptlang.org/docs/handbook/utility-types.html))
    that can be used to describe how one type relates to another and, in this case,
    the effect is that validation requirements and results are comprehensive.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个咒语告诉 TypeScript 编译器，对于类型 `T` 定义的每个属性，包括可选属性，都需要属性，除了名为 `id` 的属性。TypeScript
    提供了一系列有用的实用类型（在 [https://www.typescriptlang.org/docs/handbook/utility-types.html](https://www.typescriptlang.org/docs/handbook/utility-types.html)
    中描述），可以用来描述一个类型如何与另一个类型相关联，在这种情况下，效果是验证要求和结果都是全面的。
- en: Add a file named `validator.ts` to the `src/data/validation` folder with the
    contents shown in *Listing 18.16*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 `validator.ts` 的文件添加到 `src/data/validation` 文件夹中，其内容如 *列表 18.16* 所示。
- en: 'Listing 18.16: The contents of the validator.ts file in the src/data/validation
    folder'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.16：src/data/validation 文件夹中 validator.ts 文件的内容
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Validator<T>` class provides validation for the model type `T`. The constructor
    parameters are a `ValidationRuleSet<T>` value that provides the rules to apply
    and a `boolean` argument that specifies whether validation for a property will
    stop after the rule reports whether a value is invalid, or whether validation
    will continue to apply all of the rules.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Validator<T>` 类为模型类型 `T` 提供验证。构造函数参数是一个 `ValidationRuleSet<T>` 值，它提供了要应用的规则，以及一个
    `boolean` 参数，指定是否在规则报告值无效后停止对属性的验证，或者是否继续应用所有规则。'
- en: The `validate` method accepts a value to validate, applies the rules, and builds
    a `ValidationResult<T>` object that describes the outcome. *Listing 18.16* includes
    a utility function named `isValid` that checks the validation results produced
    for a value and determines whether all of the properties are valid. The `getData`
    method extracts the data from the validation results, which will be used to ensure
    that the application only uses properties for which validation rules have been
    defined and values that have passed validation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate` 方法接受一个要验证的值，应用规则，并构建一个描述结果的 `ValidationResult<T>` 对象。*列表 18.16*
    包含一个名为 `isValid` 的实用函数，该函数检查为值产生的验证结果，并确定所有属性是否有效。`getData` 方法从验证结果中提取数据，这将用于确保应用程序只使用已定义验证规则和通过验证的属性。'
- en: Defining validation rules
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义验证规则
- en: To create the basic validation rules for properties, add a file named `basic_rules.ts`
    to the `src/data/validation` folder with the content shown in *Listing 18.17*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要为属性创建基本的验证规则，请将名为 `basic_rules.ts` 的文件添加到 `src/data/validation` 文件夹中，其内容如 *列表
    18.17* 所示。
- en: 'Listing 18.17: The contents of the basic_rules.ts file in the src/data/validation
    folder'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.17：src/data/validation 文件夹中 basic_rules.ts 文件的内容
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `minLength`, `email`, and `required` functions ensure that a value has
    a minimum length, is a correctly formatted email address, and that a value isn’t
    undefined or an empty string. All three functions use the features provided by
    the `validator` package. The `no_op` function doesn’t perform any validation and
    is a consequence of requiring validation rules for every property defined by a
    model class except the `id` property: some properties won’t require validation
    but must be included in the validation configuration, and the `no_op` (short for
    *no operation*) function can be used.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`minLength`、`email` 和 `required` 函数确保值具有最小长度，是格式正确的电子邮件地址，并且值不是未定义或空字符串。所有三个函数都使用了
    `validator` 包提供的功能。`no_op` 函数不执行任何验证，是要求模型类定义的每个属性（除了 `id` 属性）都需要验证规则的结果：某些属性可能不需要验证，但必须包含在验证配置中，而
    `no_op`（简称为 *no operation*）函数可以用来实现这一点。'
- en: To describe the validation requirements for the data the user will provide for
    orders, add a file named `order_rules.ts` to the `src/data/validation` folder
    with the content shown in *Listing 18.18*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述用户将为订单提供的数据的验证要求，将名为`order_rules.ts`的文件添加到`src/data/validation`文件夹中，其内容如*清单18.18*所示。
- en: 'Listing 18.18: The contents of the order_rules.ts file in the src/data/validation
    folder'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.18*：src/data/validation文件夹中order_rules.ts文件的内容'
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 18.18* defines the validation rules for the `Customer` and `Address`
    model types, which will be combined with the contents of the user’s cart to create
    an order. Notice that the `zip` property for addresses uses the `no_op` rule,
    which tells the validator that this property is optional and has no specific validation
    requirements.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.18*定义了`Customer`和`Address`模型类型的验证规则，这些规则将与用户购物车的内容结合以创建订单。请注意，地址的`zip`属性使用`no_op`规则，这告诉验证器该属性是可选的，没有特定的验证要求。'
- en: This is a more comprehensive way to define validation than the approach I used
    in *Part 2* of this book because it uses TypeScript to ensure that validation
    requirements are specified for every property defined by a type, except for the
    `id` property, which I have omitted because I generally want to let the database
    figure out what IDs are required for objects.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种比我在本书*第2部分*中使用的方法更全面的定义验证方式，因为它使用TypeScript确保为每个类型定义的每个属性指定验证要求，除了`id`属性，我已省略，因为我通常希望让数据库确定对象所需的ID。
- en: When an id value is provided by the client, I will validate it separately from
    the rest of the data. To complete the validation feature, add a file named `index.ts`
    to the `src/data/validation` folder with the content shown in *Listing 18.19*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端提供id值时，我将将其与其他数据分开进行验证。为了完成验证功能，将名为`index.ts`的文件添加到`src/data/validation`文件夹中，其内容如*清单18.19*所示。
- en: 'Listing 18.19: The contents of the index.ts file in the src/data/validation
    folder'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.19*：src/data/validation文件夹中index.ts文件的内容'
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This file simply exports the contents of the other files in the validation folder
    so the contents can be consumed more easily by the rest of the application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件仅导出验证文件夹中其他文件的内容，以便其余应用程序更容易消费这些内容。
- en: Creating the HTTP handlers
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建HTTP处理器
- en: 'The next step is to define the three HTTP handlers that will be used to complete
    the order process: a `GET` handler that renders an HTML form for collecting the
    user’s details, a `POST` handler that receives and validates the user’s details,
    and a `GET` handler that displays a summary message once the order has been completed.
    Add a file named `orders.ts` to the `src/routes` folder with the content shown
    in *Listing 18.20*.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义将用于完成订单流程的三个HTTP处理器：一个渲染用于收集用户详情的HTML表单的`GET`处理器，一个接收并验证用户详情的`POST`处理器，以及一个在订单完成后显示总结信息的`GET`处理器。将名为`orders.ts`的文件添加到`src/routes`文件夹中，其内容如*清单18.20*所示。
- en: 'Listing 18.20: The contents of the orders.ts file in the src/routes folder'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18.20*：src/routes文件夹中orders.ts文件的内容'
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `declare` statement tells TypeScript that the session will be used to store
    an object using the name `orderData`, with `customer` and `address` properties
    whose values are validation results.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`declare`语句告诉TypeScript，会话将用于使用名称`orderData`存储一个对象，其中包含`customer`和`address`属性，其值是验证结果。'
- en: The first handler accepts `GET` requests sent to the `/checkout` URL and responds
    by rendering a template named `order_details`, passing the `customer` and `address`
    data stored in the session as context data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个处理器接受发送到`/checkout` URL的`GET`请求，并通过渲染名为`order_details`的模板来响应，将存储在会话中的`customer`和`address`数据作为上下文数据传递。
- en: This template renders the HTML form, which will be empty the first time the
    user sends a `GET` request because no customer or address data has been stored
    in the session.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板渲染HTML表单，当用户第一次发送`GET`请求时，表单将是空的，因为会话中尚未存储任何客户或地址数据。
- en: 'The second handler accepts `POST` requests to the `/checkout` URL, where the
    customer and address data is read from the request and validated, like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个处理器接受发送到`/checkout` URL的`POST`请求，从请求中读取客户和地址数据并进行验证，如下所示：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `through` assignment used in this statement ensures that the validation
    results are stored in the session and stored in a local constant named `data`,
    just for ease of use.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在此语句中使用的`through`赋值确保验证结果存储在会话中，并存储在一个名为`data`的本地常量中，以便于使用。
- en: If the data is invalid, a redirection to the `/checkout` URL renders the form
    but, this time, there will be validation data for the template to display to give
    the user feedback.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据无效，重定向到 `/checkout` URL 将渲染表单，但这次，模板将显示验证数据以向用户提供反馈。
- en: 'If the data is valid, then an order is created by calling a function called
    `createAndStoreOrder`, which is defined in *Listing 18.21*, and combines the customer
    and address data with the contents of the user’s cart to create and store an order.
    The data passed to the `createAndStoreOrder` function is extracted from the validation
    results, like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据有效，则通过调用一个名为 `createAndStoreOrder` 的函数来创建订单，该函数在 *清单 18.21* 中定义，并将客户和地址数据与用户的购物车内容结合起来创建和存储订单。传递给
    `createAndStoreOrder` 函数的数据是从验证结果中提取的，如下所示：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This ensures that only the properties defined by the model types are used, which
    is one of the reasons why the validation types defined earlier in the chapter
    require validation information for every model property. Once the order is stored,
    a redirection to the third handler is performed, which includes the ID of the
    order in the URL, and which can be used to display a confirmation message to the
    user. The `cart`, customer, and address data are removed from the session so that
    the user can start shopping afresh.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了只使用由模型类型定义的属性，这也是为什么本章早期定义的验证类型需要为每个模型属性提供验证信息的原因之一。一旦订单被存储，就会执行重定向到第三个处理器的操作，该操作在
    URL 中包含订单 ID，并可用于向用户显示确认消息。`cart`、客户和地址数据从会话中删除，以便用户可以重新开始购物。
- en: To define the function that combines the customer, address, and cart data and
    stores the order, add a file named `order_helpers.ts` to the `src/routes` folder
    with the content shown in *Listing 18.21*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个组合客户、地址和购物车数据并存储订单的函数，请将一个名为 `order_helpers.ts` 的文件添加到 `src/routes` 文件夹中，其内容如
    *清单 18.21* 所示。
- en: 'Listing 18.21: The contents of the order_helpers.ts file in the src/routes
    folder'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18.21*：`src/routes` 文件夹中 `order_helpers.ts` 文件的内容'
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Example applications usually contrive to avoid the messy reality of merging
    and formatting data, but it is something that should be expected in every project.
    In this case, the cart data has to be matched up with product prices, which is
    an awkward process that requires awkward code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应用程序通常试图避免合并和格式化数据的混乱现实，但这是每个项目中都应该预期的。在这种情况下，购物车数据必须与产品价格匹配，这是一个尴尬的过程，需要编写尴尬的代码。
- en: There is often an “Oh, no!” moment when reaching the point where you realize
    that the data you have isn’t the data you need, and that additional queries and
    transforms are required. It can be tempting to go back and smooth out the rough
    edges in the data model, but my advice is not to do that because it just breaks
    up the problem so that none of the data models exactly suit their purpose, which
    leaves little bits of awkwardness all over the place. Instead, my preference is
    to define each model so that it suits the part of the application that it serves
    and accept that there will be crunch points where data from one part of the application
    is bent into the shape required by another part. *Listing 18.22* enables the routes
    required for orders.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你意识到你拥有的数据不是你需要的数据，并且需要额外的查询和转换时，常常会有一个“哦，不！”的时刻。可能会诱使你回到数据模型中平滑处理粗糙的边缘，但我的建议是不要这样做，因为这只会把问题拆散，使得没有一个数据模型完全适合其目的，这会在各个地方留下一些尴尬的部分。相反，我的偏好是定义每个模型，使其适合它所服务的应用程序部分，并接受在应用程序的一个部分的数据被弯曲成另一个部分所需的形状时，会有一些压力点。*清单
    18.22* 启用了所需的订单路由。
- en: 'Listing 18.22: Enabling routes in the index.ts file in the src/routes folder'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18.22*：在 `src/routes` 文件夹中的 `index.ts` 文件中启用路由'
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating the templates and helpers
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模板和辅助函数
- en: New template helpers are required to render the order form. Add a file named
    `order_helpers.ts` to the `src/helpers` folder, with the content shown in *Listing
    18.23*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 需要新的模板辅助函数来渲染订单表单。将一个名为 `order_helpers.ts` 的文件添加到 `src/helpers` 文件夹中，其内容如 *清单
    18.23* 所示。
- en: 'Listing 18.23: The contents of the order_helpers.ts file in the src/helpers
    folder'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18.23*：`src/helpers` 文件夹中 `order_helpers.ts` 文件的内容'
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The purpose of each helper will be explained as they are used, but they all
    manipulate data values so they can be included in the template output. *Listing
    18.24* enables the new helpers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每个辅助函数的用途将在使用时进行解释，但它们都操作数据值，因此可以包含在模板输出中。*清单 18.24* 启用了新的辅助函数。
- en: 'Listing 18.24: Adding helpers to the index.ts file in the src/helpers folder'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18.24*：在 `src/helpers` 文件夹中的 `index.ts` 文件中添加辅助函数'
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Starting with the simplest templates, add a file named `order_complete.handlebars`
    to the `templates` folder with the content shown in *Listing 18.25*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 从最简单的模板开始，将一个名为 `order_complete.handlebars` 的文件添加到 `templates` 文件夹中，其内容如 *列表
    18.25* 所示。
- en: 'Listing 18.25: The contents of the order_complete.handlebars file in the templates
    folder'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.25：模板文件夹中 order_complete.handlebars 文件的内容
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This template displays a simple confirmation message once an order has been
    placed, which includes the order ID value. The remaining templates relate to the
    form used to collect the customer and address data and present validation feedback.
    Add a file named `validation_messages.handlebars` to the `templates` folder, with
    the content shown in *Listing 18.26*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板在订单已创建后显示一个简单的确认消息，其中包含订单 ID 值。其余模板与用于收集客户和地址数据的表单以及呈现验证反馈相关。将一个名为 `validation_messages.handlebars`
    的文件添加到 `templates` 文件夹中，其内容如 *列表 18.26* 所示。
- en: 'Listing 18.26: The contents of the validation_messages.handlebars file in the
    templates folder'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.26：模板文件夹中 validation_messages.handlebars 文件的内容
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The template will receive an array of strings that are displayed using the `each`
    expression, referring to the current string value with `this`. To create the form
    elements for the user’s name and email address, which are required for the `Customer`
    data, add a file named `order_details_customer.handlebars` to the `templates`
    folder with the content shown in *Listing 18.27*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模板将接收一个字符串数组，这些字符串使用 `each` 表达式显示，使用 `this` 引用当前字符串值。要创建用户姓名和电子邮件地址的表单元素，这些元素对于
    `Customer` 数据是必需的，请将一个名为 `order_details_customer.handlebars` 的文件添加到 `templates`
    文件夹中，其内容如 *列表 18.27* 所示。
- en: 'Listing 18.27: The contents of the order_details_customer.handlebars in the
    templates folder'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.27：模板文件夹中 order_details_customer.handlebars 的内容
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The template duplicates the same set of elements for each value and relies on
    a combination of template engine features and helpers that require explanation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板为每个值重复相同的元素集，并依赖于需要解释的模板引擎功能和辅助工具。
- en: 'The built-in `with` helper is used to change the context, which can simplify
    nested expressions, like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 `with` 辅助工具用于更改上下文，这可以简化嵌套表达式，如下所示：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `with` helper is used to change the context to the `order.customer.name`
    value, so that the `value` expression is evaluated as `order.customer.name.value`.
    The `with` helper won’t render content if its expression is undefined, which presents
    a problem the first time that the template is rendered because the user’s session
    doesn’t contain this value until after the first time the form is evaluated. To
    solve this, the `get` helper defined in *Listing 18.23* is used, like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`with` 辅助工具用于将上下文更改为 `order.customer.name` 值，因此 `value` 表达式被评估为 `order.customer.name.value`。如果
    `with` 辅助工具的表达式未定义，则它不会渲染内容，这在模板第一次渲染时会出现问题，因为用户的会话在表单第一次评估之后才包含此值。为了解决这个问题，使用了
    *列表 18.23* 中定义的 `get` 辅助工具，如下所示：'
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The parentheses denote a subexpression, which the template engine evaluates
    to obtain the argument for the `with` helper. The `get` helper returns an empty
    object if a value is not defined, which ensures the content contained by the `with`
    helper is always rendered.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 括号表示一个子表达式，模板引擎将其评估为 `with` 辅助工具的参数。如果未定义值，`get` 辅助工具返回一个空对象，这确保了 `with` 辅助工具包含的内容始终被渲染。
- en: To create the form elements for the user’s address, add a file named `order_details_address.handlebars`
    to the `templates` folder, with the content shown in *Listing 18.28*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建用户地址的表单元素，请将一个名为 `order_details_address.handlebars` 的文件添加到 `templates` 文件夹中，其内容如
    *列表 18.28* 所示。
- en: 'Listing 18.28: The contents of order_details_address.handlebars in the templates
    folder'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.28：模板文件夹中 order_details_address.handlebars 的内容
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Unlike the previous template, which repeated the same content for each data
    property, this template generates elements programmatically, using the values
    in an array:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的模板不同，该模板使用数组中的值以编程方式生成元素：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The built-in `each` helper repeats sections of content but doesn’t have support
    for literal arrays. This shortcoming is addressed by the `toArray` helper, which
    accepts a series of arguments and combines them into an array that can be processed
    by the `each` helper.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 `each` 辅助工具重复内容部分，但不支持字面数组。这个问题通过 `toArray` 辅助工具得到解决，它接受一系列参数并将它们组合成一个可以由
    `each` 辅助工具处理的数组。
- en: 'The built-in `with` helper is used to change the context to the data values
    required for each of the form fields. The `getValue` helper is used to produce
    the value for the `with` helper, which is done by looking up a property on a source
    object. The `with` helper changes the context, but it is still possible to get
    values from the original data by using a navigation expression, like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的`with`辅助函数用于将上下文更改为每个表单字段所需的数据值。`getValue`辅助函数用于为`with`辅助函数生成值，这是通过在源对象上查找属性来完成的。`with`辅助函数更改了上下文，但仍然可以通过使用导航表达式从原始数据中获取值，如下所示：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `lower` helper is used to set the name of the `input` element, which is
    structured using square brackets so that related values are grouped when read
    by the server from the HTTP request. The overall effect is to create elements
    whose names are `address[street]`, `address[city]`, `address[state]`, and `address[zip]`,
    which will be passed into a JavaScript object named `address` with `street`, `city`,
    `state`, and `zip` properties.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower`辅助函数用于设置`input`元素的名称，该名称使用方括号结构化，以便在服务器从HTTP请求中读取时将相关值分组。整体效果是创建名称为`address[street]`、`address[city]`、`address[state]`和`address[zip]`的元素，这些元素将被传递到一个名为`address`的JavaScript对象中，该对象具有`street`、`city`、`state`和`zip`属性。'
- en: To combine the customer and address templates, create a file named `order_details.handlebars`
    in the `templates` folder, with the content shown in *Listing 18.29*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并客户和地址模板，在`templates`文件夹中创建一个名为`order_details.handlebars`的文件，内容如图*列表18.29*所示。
- en: 'Listing 18.29: The contents of the order_details.handlebars file in the templates
    folder'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 列表18.29：templates文件夹中order_details.handlebars文件的内容
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `form` element sends a `POST` request to the `/checkout` URL when the user
    clicks the **Place Order** button. There is also a link styled to appear as a
    button that directs the user back to the shopping cart.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**提交订单**按钮时，`form`元素向`/checkout` URL发送`POST`请求。还有一个样式设置为按钮的链接，将用户引导回购物车。
- en: Use a browser to request `http://localhost:5000`, add an item to the cart, and
    click the **Checkout** button, which will lead the application to present the
    order details form. Click the **Place Order** button to see the validation errors.
    To complete the order, fill out the form and click the **Place Order** button.
    The sequence is shown in *Figure 18.2*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求`http://localhost:5000`，将商品添加到购物车，并点击**结账**按钮，这将引导应用程序展示订单详情表单。点击**提交订单**按钮以查看验证错误。要完成订单，填写表单并点击**提交订单**按钮。整个过程如图*图18.2*所示。
- en: '![](img/B21959_18_02.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_18_02.png)'
- en: 'Figure 18.2: Creating an order'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.2：创建订单
- en: Fixing the return URL
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复返回URL
- en: In the catalog, the user’s preferences for category, page, and page size are
    preserved using a query string, but these are lost when checking out when data
    is preserved in the session instead. I don’t care too much about preserving the
    category and page, because they are temporary choices, but I would like to preserve
    the page size so that it is used when the user completes an order or cancels the
    order process.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录中，用户对类别、页面和页面大小的偏好通过查询字符串来保留，但当数据保存在会话中而不是在结账时，这些偏好就会丢失。我对保留类别和页面不太关心，因为它们是临时选择，但我希望保留页面大小，以便在用户完成订单或取消订单流程时使用。
- en: I could store all of the user’s choices in a session or use the query string
    throughout the order process, but I want to preserve these separate approaches
    because they demonstrate different ways of solving similar problems. With this
    in mind, I am going to store the user’s preferred page size in the session at
    the start of the order process and use the value when generating the URLs that
    will return the user to the catalog.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以将所有用户的选择保存在会话中或在整个订单流程中使用查询字符串，但我希望保留这些不同的方法，因为它们展示了解决类似问题的不同方式。考虑到这一点，我将在订单流程开始时将用户首选的页面大小保存在会话中，并在生成将用户返回目录的URL时使用该值。
- en: The first step is to store the page size as session data when the user transitions
    from the cart to the ordering process, as shown in *Listing 18.30*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在用户从购物车过渡到订单流程时将页面大小作为会话数据存储，如图*列表18.30*所示。
- en: 'Listing 18.30: Storing page size in the orders.ts file in the src/routes folder'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 列表18.30：在src/routes文件夹中的orders.ts文件中存储页面大小
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*Listing 18.31* adds the return URL to the target of the anchor element that
    the user clicks to leave the cart summary.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表18.31*将返回URL添加到用户点击以离开购物车摘要的锚点元素的target中。'
- en: 'Listing 18.31: Adding the URL to the cart.handlebars file in the templates
    folder'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.31：在模板文件夹中的cart.handlebars文件中添加 URL
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*Listing 18.32* adds the return URL to the **Back** button on the **Order Details**
    page.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 18.32* 将返回 URL 添加到“**订单详情**”页面上的“**返回**”按钮。'
- en: 'Listing 18.32: Adding the URL in the order_details.handlebars file in the templates
    folder'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.32：在模板文件夹中的order_details.handlebars文件中添加 URL
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The final step is to add the URL to the button the user clicks to return to
    the catalog once an order has been placed, as shown in *Listing 18.33*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是添加用户点击以返回目录的按钮的 URL，如图*列表 18.33*所示。
- en: 'Listing 18.33: Adding the URL to the order_complete.handlebars file in the
    templates folder'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18.33：在模板文件夹中的order_complete.handlebars文件中添加 URL
- en: '[PRE43]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Use a browser to request `http://localhost:5000` and change the page size to
    **6** items. Add items to the cart and complete the order. Click the **Return**
    **to Store** button displayed with the order summary and the page size will be
    preserved when the catalog is displayed, as shown in *Figure 18.3*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求`http://localhost:5000`并将页面大小更改为**6**个项目。将商品添加到购物车并完成订单。点击订单摘要中显示的“**返回商店**”按钮，当目录显示时页面大小将被保留，如图*图
    18.3*所示。
- en: '![](img/B21959_18_03.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_18_03.png)'
- en: 'Figure 18.3: Fixing the return URL'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3：修复返回 URL
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I continued developing the SportsStore application by adding
    support for placing orders.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我继续开发 SportsStore 应用程序，通过添加订单支持。
- en: The data model for orders is presented through a separate repository interface
    but is implemented using the `ORM mixin` class.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单的数据模型通过一个独立的仓库接口展示，但使用的是`ORM mixin`类来实现。
- en: The order data is stored in the same database as the catalog, which simplifies
    data consistency and makes it easier to use transactions for updates.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单数据存储在与目录相同的数据库中，这简化了数据一致性并使得使用事务进行更新变得更容易。
- en: The data provided by the user is validated before it is stored.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储之前，会验证用户提供的数据。
- en: The validation system relies on TypeScript to ensure that rules are defined
    for all data model properties.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证系统依赖于 TypeScript 来确保所有数据模型属性都定义了规则。
- en: The session feature is used to store the user’s pagination preferences during
    the checkout process.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话功能用于在结账过程中存储用户的分页偏好设置。
- en: In the next chapter, I will add support for letting users identify themselves
    using their Google accounts, which is done using the `OAuth` protocol.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将添加支持用户使用他们的 Google 账户进行身份验证的功能，这是通过`OAuth`协议完成的。
