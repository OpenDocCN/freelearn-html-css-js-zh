- en: Chapter 3. Form Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。表单组件
- en: Wijmo form decorator widgets for radio button, checkbox, dropdown, and textbox
    elements give forms a consistent visual style across all platforms. There are
    separate libraries for decorating the dropdown and other form elements, but Wijmo
    gives them a consistent theme. jQuery UI lacks form decorators, leaving the styling
    of form components to the designer. Using Wijmo form components saves time during
    development and presents a consistent interface across all browsers. To use these
    form components with custom styles, see [Chapter 8](ch08.html "Chapter 8. Extending
    Wijmo"), *Extending Wijmo*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 表单装饰器小部件为单选按钮、复选框、下拉列表和文本框元素提供了跨所有平台的统一视觉风格。有单独的库用于装饰下拉列表和其他表单元素，但 Wijmo
    为它们提供了一个统一的主题。jQuery UI 缺乏表单装饰器，将表单组件的样式留给了设计师。使用 Wijmo 表单组件可以在开发过程中节省时间，并在所有浏览器中提供一致的界面。要使用这些具有自定义样式的表单组件，请参阅第
    8 章 [扩展 Wijmo](ch08.html "第 8 章。扩展 Wijmo")。
- en: Checkbox
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复选框
- en: 'The checkbox widget is an excellent example of the style enhancements that
    Wijmo provides over default form controls. The checkbox is used if multiple choices
    are allowed. The following screenshot shows the different checkbox states:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框小部件是 Wijmo 提供的样式增强的绝佳例子，它优于默认表单控件。当允许选择多个选项时使用复选框。以下截图显示了不同的复选框状态：
- en: '![Checkbox](img/6067OT_3_04.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![复选框](img/6067OT_3_04.jpg)'
- en: 'Wijmo adds rounded corners, gradients, and hover highlighting to the checkbox.
    Also, the increased size makes it more usable. Wijmo checkboxes can be initialized
    to be checked. The code for this purpose is as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 为复选框添加了圆角、渐变和悬停高亮效果。此外，尺寸的增加使其更易于使用。Wijmo 复选框可以被初始化为选中状态。用于此目的的代码如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this instance, `checkbox3` is set to **Checked** as it is initialized.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`checkbox3` 在初始化时被设置为 **选中**。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will not get the same result if one of the checkboxes is initialized twice.
    Here, we avoid that by selecting the checkboxes that are not checked after `checkbox3`
    is set to be **Checked**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个复选框初始化了两次，您将不会得到相同的结果。在这里，我们通过在将 `checkbox3` 设置为 **选中** 后选择未选中的复选框来避免这种情况。
- en: Radio buttons
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮
- en: 'Radio buttons, in contrast with checkboxes, allow only one of the several options
    to be selected. In addition, they are customized through the HTML markup rather
    than a JavaScript API. To illustrate, the checked option is set by the `checked`
    attribute:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与复选框相比，单选按钮只允许选择多个选项中的一个。此外，它们通过 HTML 标记进行自定义，而不是通过 JavaScript API。例如，通过 `checked`
    属性设置选中选项：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'jQuery UI offers a button widget for radio buttons, as shown in the following
    screenshot, which in my experience causes confusion as users think that they can
    select multiple options:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 提供了一个单选按钮小部件，如以下截图所示，根据我的经验，这会让用户产生混淆，因为他们认为可以选择多个选项：
- en: '![Radio buttons](img/6067OT_3_05.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![单选按钮](img/6067OT_3_05.jpg)'
- en: 'The Wijmo radio buttons are closer in appearance to regular radio buttons so
    that users would expect the same behavior, as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 单选按钮在外观上与常规单选按钮相似，这样用户就会期望相同的行为，如下面的截图所示：
- en: '![Radio buttons](img/6067OT_3_06.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![单选按钮](img/6067OT_3_06.jpg)'
- en: 'Wijmo radio buttons are initialized by calling the `wijradiomethod` method
    on radio button elements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo 单选按钮通过在单选按钮元素上调用 `wijradiomethod` 方法进行初始化：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the `changed` option, which is also available for checkboxes,
    is set to a handler. The handler is passed a `jQuery.Event` object as the first
    argument. It is just a JavaScript event object normalized for consistency across
    browsers. The second argument exposes the state of the widget. For both checkboxes
    and radio buttons, it is an object with only the `checked` property.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`changed` 选项（复选框也有此选项）被设置为一个处理程序。处理程序将一个 `jQuery.Event` 对象作为第一个参数传递。它只是一个针对浏览器一致性进行规范化的
    JavaScript 事件对象。第二个参数暴露了小部件的状态。对于复选框和单选按钮，它是一个仅包含 `checked` 属性的对象。
- en: Dropdown
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下拉列表
- en: 'Styling a dropdown to be consistent across all browsers is notoriously difficult.
    Wijmo offers two options for styling the HTML `select` and `option` elements.
    When there are no option groups, the `ComboBox` is the better widget to use. This
    is covered in the next section. For a dropdown with nested options under option
    groups, only the `wijdropdown` widget will work. As an example, consider a country
    selector categorized by continent:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有浏览器中保持下拉菜单样式的一致性是非常困难的。Wijmo 提供了两种样式 HTML `select` 和 `option` 元素的方法。当没有选项组时，`ComboBox`
    是更好的小部件。这将在下一节中介绍。对于具有嵌套在选项组下的选项的下拉菜单，只有 `wijdropdown` 小部件才能工作。例如，考虑一个按大陆分类的国家选择器：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `select` element''s width is set to 170 pixels so that when the dropdown
    is initialized, both the dropdown menu and items have a width of 170 pixels. This
    allows the **North America** option category to be displayed on a single line,
    as shown in the following screenshot. Although the dropdown widget lacks a `width`
    option, it takes the `select` element''s width when it is initialized. To initialize
    the dropdown, call the `wijdropdown` method on the `select` element:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `select` 元素的宽度设置为 170 像素，以便在下拉菜单初始化时，下拉菜单和项目都具有 170 像素的宽度。这允许 **北美** 选项类别在单行中显示，如下面的截图所示。尽管下拉小部件没有
    `width` 选项，但在初始化时它会采用 `select` 元素的宽度。要初始化下拉菜单，请在 `select` 元素上调用 `wijdropdown`
    方法：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The dropdown element uses the blind animation to show the items when the menu
    is toggled.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单切换时，下拉元素使用盲动画来显示项目。
- en: '![Dropdown](img/6067OT_3_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Dropdown](img/6067OT_3_01.jpg)'
- en: 'Also, it applies the same click animation as on buttons to the slider and menu:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还将与按钮相同的点击动画应用到滑块和菜单：
- en: '![Dropdown](img/6067OT_3_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Dropdown](img/6067OT_3_02.jpg)'
- en: To reset the dropdown to a select box, I've added a reset button that calls
    the `destroy` method. If you have JavaScript code that dynamically changes the
    styling of the dropdown, the `refresh` method applies the Wijmo styles again.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将下拉菜单重置为选择框，我添加了一个调用 `destroy` 方法的重置按钮。如果你有动态更改下拉菜单样式的 JavaScript 代码，`refresh`
    方法将再次应用 Wijmo 样式。
- en: ComboBox
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ComboBox
- en: 'The Wijmo ComboBox works on the `select` and `option` elements. The options
    can either be loaded through HTML markup or JavaScript Object Notation (JSON).
    For our example, we load the menu items by using markup:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Wijmo ComboBox 在 `select` 和 `option` 元素上工作。选项可以通过 HTML 标记或 JavaScript 对象表示法
    (JSON) 加载。在我们的示例中，我们通过使用标记来加载菜单项：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `showingAnimation` method specifies the animation to use when the options
    become visible. All of the jQuery UI effects can be used, and you can try them
    on the jQuery UI effects demo page: [http://jqueryui.com/effect/](http://jqueryui.com/effect/).
    For the `hidingAnimation` method, I use the fade effect, which gradually decreases
    the opacity to 0\. We bind to the event type `wijcomboboxselectedindexchanged`
    that is triggered when the selected index of the ComboBox is changed to display
    a message involving the old item and the new item.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`showingAnimation` 方法指定了当选项变为可见时使用的动画。所有 jQuery UI 效果都可以使用，你可以在 jQuery UI 效果演示页面上尝试它们：[http://jqueryui.com/effect/](http://jqueryui.com/effect/).
    对于 `hidingAnimation` 方法，我使用了淡入淡出效果，逐渐将不透明度降低到 0。我们绑定到 `wijcomboboxselectedindexchanged`
    事件类型，该事件在 ComboBox 的选中索引改变时触发，用于显示涉及旧项和新项的消息。'
- en: InputDate
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InputDate
- en: 'The InputDate widget provides a convenient visual mechanism for helping users
    to select dates. This widget supports a wide range of date formats, making it
    easier for the user to select a date and provide the information to you in a consistent
    way. The InputDate widget only works on an `input` element. To display a calendar
    without the `input` element, use the calendar widget, which looks as shown in
    the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: InputDate 小部件提供了一个方便的视觉机制，帮助用户选择日期。这个小部件支持广泛的日期格式，使用户选择日期并提供信息的方式更加一致。InputDate
    小部件仅在 `input` 元素上工作。要显示没有 `input` 元素的日历，请使用日历小部件，其外观如下面的截图所示：
- en: '![InputDate](img/6067OT_3_11.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![InputDate](img/6067OT_3_11.jpg)'
- en: 'To display an InputDate widget with a button to trigger the calendar, wrap
    the `input` element in a fixed width block, initialize the widget with the `showTrigger`
    option, and remove the `wijmo-wijinput-trigger` class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个带有触发日历的按钮的 InputDate 小部件，请将 `input` 元素包裹在一个固定宽度的块中，使用 `showTrigger` 选项初始化小部件，并移除
    `wijmo-wijinput-trigger` 类：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similarly, showing an InputDate with a spinner for incrementing or decrementing
    the day, month, and year fields needs extra configuration. While the `input` field
    still accepts keystrokes that are valid within the date format, the spinner gives
    another option. Clicking once on the spinner changes the value of the selected
    date segment by one. Holding the click gradually accelerates the rate at which
    the date segment changes. Try it for yourself to get a feel of the visual effect:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，显示一个带有用于增加或减少日、月和年字段的旋转按钮的输入日期，需要额外的配置。虽然`input`字段仍然接受在日期格式内有效的按键，但旋转按钮提供了另一种选择。点击一次旋转按钮将所选日期段的价值增加或减少一个。按住点击将逐渐加速日期段变化的速度。自己试一试，感受一下视觉效果：
- en: '![InputDate](img/6067OT_3_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![输入日期](img/6067OT_3_09.jpg)'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When working with a date input field, the most important part is sending the
    date to the server. Wijmo offers a variety of `dateFormat` options depending on
    your server setup and the date format that it accepts. In particular, if your
    server accepts the short date (mm/dd/yyyy) and short time (hh:mmtt) formats, then
    the general date format `g` will work for you. Simply initialize the InputDate
    widget with the `dateFormat` option set to `g`. With the previous example, it
    would be:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理日期输入字段时，最重要的部分是将日期发送到服务器。Wijmo根据您的服务器设置和它接受的日期格式提供各种`dateFormat`选项。特别是，如果您的服务器接受短日期（mm/dd/yyyy）和短时间（hh:mmtt）格式，那么通用的日期格式`g`将适用于您。只需将`dateFormat`选项设置为`g`来初始化InputDate小部件。在先前的示例中，它将是：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To get the date from the input, call the `getText` method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要从输入中获取日期，请调用`getText`方法：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: which returns the text displayed in the input box.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回输入框中显示的文本。
- en: 'The `wijinput` format string follows the same convention as Java''s `SimpleDateFormat`
    class, except for the AM/PM designator. The following table summarizes the formatting
    options:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`wijinput`格式字符串遵循与Java的`SimpleDateFormat`类相同的约定，除了AM/PM指示符。以下表格总结了格式化选项：'
- en: '| Letter | Date or Time Component | Example | Output |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 字母 | 日期或时间组件 | 示例 | 输出 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `y` | Year | yyyy; yy | 1996; 96 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `y` | 年 | yyyy; yy | 1996; 96 |'
- en: '| `M` | Month in year | MMMM;MMM;MM | July;Jul;07 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 年中的月份 | MMMM;MMM;MM | July;Jul;07 |'
- en: '| `d` | Day in month | dd | 10 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 月份中的日 | dd | 10 |'
- en: '| `H` | Hour in day (0-23) | H | 0 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 天中的小时（0-23） | H | 0 |'
- en: '| `h` | Hour in am/pm (1-12) | hh | 12 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `h` | 上午/下午的小时（1-12） | hh | 12 |'
- en: '| `m` | Minute in hour | mm | 30 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 小时中的分钟 | mm | 30 |'
- en: '| `s` | Second in minute | ss | 55 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 分钟中的秒 | ss | 55 |'
- en: '| `t` | AM/PM | tt | AM |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 上午/下午 | tt | AM |'
- en: To illustrate, if the `dateFormat` is set as `MMM-dd-yyyy`, you can expect to
    see a date of the form `Jul-14-2013` in the field.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`dateFormat`设置为`MMM-dd-yyyy`，你可以在字段中看到类似`Jul-14-2013`的日期。
- en: InputMask
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入掩码
- en: 'The InputMask widget shows the user the correct format for an input box. In
    addition, it prevents invalid input and gives visual cues about the data required.
    An example is shown as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输入掩码小部件向用户显示输入框的正确格式。此外，它防止无效输入并提供关于所需数据的视觉提示。以下是一个示例：
- en: '![InputMask](img/6067OT_3_10.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![输入掩码](img/6067OT_3_10.jpg)'
- en: 'The input format is specified by a mask. A list of options are available on
    [http://wijmo.com/wiki/index.php/InputMask](http://wijmo.com/wiki/index.php/InputMask).
    For our example, we make an input mask for U.S. phone numbers where the area codes
    are optional. These optional characters can be left blank:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输入格式由掩码指定。有关选项的列表，请参阅[http://wijmo.com/wiki/index.php/InputMask](http://wijmo.com/wiki/index.php/InputMask)。对于我们的示例，我们为美国电话号码创建了一个输入掩码，其中区号是可选的。这些可选字符可以留空：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The masking element `9` indicates an optional digit, while `0` indicates a
    required digit. Literals such as the dash and parenthesis are displayed as they
    appear in the mask. By default, invalid inputs do not show up in the input element.
    To give the user feedback when the input is invalid, we add an error CSS class
    that is triggered on such inputs:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码元素`9`表示可选数字，而`0`表示必需数字。如破折号和括号之类的文字按掩码中的显示方式显示。默认情况下，无效输入不会显示在输入元素中。为了在输入无效时给用户反馈，我们添加一个错误CSS类，该类在此类输入上触发：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the text changes, we remove the `error` class. On invalid input, we add
    the class again. Another useful input mask is the day, month abbreviation, and
    year format as shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本改变时，我们移除`error`类。在无效输入时，我们再次添加该类。另一个有用的输入掩码是显示在以下截图中的日期、月份缩写和年格式：
- en: '![InputMask](img/6067OT_3_12.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![输入掩码](img/6067OT_3_12.jpg)'
- en: This can be done with the input mask `00->L<LL-0000` where `>L` indicates an
    uppercase character from A to Z and `<LL` indicates two lowercase characters from
    a to z. To add a `clear` button for each of the fields, call the jQuery UI button
    function and register the click event on it. Since the clear button is placed
    next to the input, we call the `setText` method on its sibling input element.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过输入掩码 `00->L<LL-0000` 来完成，其中 `>L` 表示从 A 到 Z 的一个大写字母，`<LL` 表示从 a 到 z 的两个小写字母。要为每个字段添加一个
    `clear` 按钮，请调用 jQuery UI 按钮函数并在其上注册点击事件。由于清除按钮放置在输入旁边，我们在其兄弟输入元素上调用 `setText`
    方法。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we also override the CSS for the button padding so that the buttons
    are the same size as the inputs. With the `reset` button beside each field, the
    user would not need to fill out the form again if they make a mistake on one of
    the fields.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还覆盖了按钮填充的 CSS，以便按钮与输入框大小相同。在每个字段旁边都有一个 `reset` 按钮，如果用户在某个字段上出错，他们就不需要再次填写表单。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned about Wijmo's form components. A checkbox is used
    when multiple items can be selected. Wijmo's checkbox widget has style enhancements
    over the default checkboxes. Radio buttons are used when only one item is to be
    selected. While jQuery UI only supports button sets on radio buttons, Wijmo's
    radio buttons are much more intuitive. Wijmo's dropdown widget should only be
    used when there are nested or categorized `<select>` options. The ComboBox comes
    with more features when the structure of the options is flat. InputDate is used
    to display a date selector calendar widget, while the InputMask is meant to give
    users a hint of what the correct input format is.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Wijmo 的表单组件。复选框用于可以选择多个项目的情况。Wijmo 的复选框小部件在默认复选框的基础上增加了样式增强。单选按钮用于只选择一个项目的情况。虽然
    jQuery UI 只支持单选按钮上的按钮组，但 Wijmo 的单选按钮要直观得多。Wijmo 的下拉小部件应该只在存在嵌套或分类的 `<select>`
    选项时使用。当选项的结构是扁平的时，ComboBox 带有更多功能。InputDate 用于显示日期选择日历小部件，而 InputMask 的目的是为用户提供正确的输入格式的提示。
- en: Now that you have learned the form components in Wijmo, try building a form
    on your own before moving onto the next chapter. Try making a nested form where
    selecting a choice in a radio group shows or hides fields.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学习了 Wijmo 中的表单组件，在进入下一章之前，先尝试自己构建一个表单。尝试制作一个嵌套表单，其中在单选组中选择一个选项会显示或隐藏字段。
