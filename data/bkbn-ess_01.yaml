- en: Chapter 1. Building a Single-Page Site Using Backbone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：使用 Backbone 构建单页面网站
- en: 'In this chapter, you''ll learn both what Backbone is and why you will want
    to use it to create web applications. In particular, we''ll examine the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Backbone 是什么，以及为什么你想要使用它来创建网络应用。特别是，我们将探讨以下主题：
- en: Backbone's history and how it fits into the larger history of web development
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Backbone 的历史以及它如何融入网络开发的更大历史
- en: The advantages of Backbone's **single-page** architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Backbone 的 **单页面** 架构的优势
- en: How real-world companies are using Backbone to power their sites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真实世界中的公司如何使用 Backbone 为他们的网站提供动力
- en: What is Backbone?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Backbone？
- en: Created in 2010 by Jeremy Ashkenas, Backbone is a part of an entirely new breed
    of JavaScript libraries. Depending on who you ask, this type of library can be
    referred to as a rich application framework, a single page library, a thick client
    library, or just a JavaScript framework. Whatever you choose to call them, Backbone
    and its related libraries, such as Angular, Ember, and CanJS, provide tools that
    can be used to build websites that are so powerful that they go beyond being mere
    sites and become full-fledged web applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 是由 Jeremy Ashkenas 在 2010 年创建的，它是 JavaScript 库家族中一个全新的分支的一部分。根据你询问的对象不同，这种类型的库可以被称作富应用框架、单页面库、厚客户端库，或者仅仅是
    JavaScript 框架。无论你选择如何称呼它们，Backbone 及其相关库，如 Angular、Ember 和 CanJS，都提供了可以用来构建功能强大、超越传统网站，成为完整网络应用的工具。
- en: 'Backbone is made up of the following five major tools:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 由以下五个主要工具组成：
- en: A class system, which makes it easy to practice object-oriented programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类系统，它使得实践面向对象编程变得容易
- en: A `Model` class, which allows you to store and manipulate any kind of data as
    well as exchange this data with and from your remote server using AJAX
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `Model` 类，它允许你存储和操作任何类型的数据，以及使用 AJAX 与远程服务器交换这些数据
- en: A `Collection` class, which allows you to perform the same data manipulation
    and transmission but on groups of Models instead
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `Collection` 类，它允许你在模型组上执行相同的数据操作和传输
- en: A `View` class, which can be used both to render the DOM elements that make
    up the page and to manage any user interactions that occur on them
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `View` 类，它可以用来渲染构成页面的 DOM 元素，也可以用来管理在这些元素上发生的任何用户交互
- en: A `Router` class, which enables you to create an entire site, with any number
    of virtual pages, using only a single HTML file
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `Router` 类，它允许你仅使用一个 HTML 文件创建一个包含任意数量虚拟页面的整个网站
- en: While conceptually very simple, together these components allow you to create
    websites with a level of sophistication and robustness previously unseen on the
    **World Wide Web** (**WWW**).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在概念上非常简单，但所有这些组件结合起来，允许你创建具有前所未有的复杂性和鲁棒性的网站，这些网站在 **万维网**（**WWW**）上以前从未见过。
- en: Why choose Backbone?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Backbone？
- en: The question of why you will want to choose Backbone for your project really
    has two parts. First, there's the question of "Why use a rich application framework
    at all?," and second, there's the question of "Why choose Backbone over its alternatives?."
    Let's start with the first question.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你会想要在你的项目中选择 Backbone 真正有两个方面。首先，是“为什么根本要使用富应用框架？”的问题，其次，是“为什么选择 Backbone
    而不是其他替代品？”的问题。让我们先从第一个问题开始。
- en: To truly appreciate the value of a **single-page application** (**SPA**), it's
    essential to understand what came before. All previous websites can be grouped
    into three major categories, which I'll call static, server-based, and JavaScript-assisted.
    Each of these types correlates with a different era in web development history.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正理解 **单页面应用**（**SPA**）的价值，了解之前发生的事情是至关重要的。所有之前的网站都可以分为三大类，我将它们称为静态、基于服务器和
    JavaScript 辅助。每种类型都与网络开发历史的不同时期相对应。
- en: A Brief History of Web Development
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络开发简史
- en: 'In many ways, the history of web development can be seen as a progression from
    server-based logic to client-based logic. The story begins in 1993, with the introduction
    of the world''s first real web browser: Mosaic. At that time, the Web didn''t
    even have JavaScript (or CSS, for that matter), just HTML. In those early days,
    most sites were simple static sites, and any site with dynamic elements had to
    be entirely server based. The very first version of JavaScript would only be introduced
    two years later at the end of 1995, and it would take several more years before
    the language was useful for anything other than simple form validation.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，网络开发的历史可以看作是从基于服务器的逻辑到基于客户端逻辑的演变。这个故事始于1993年，当时推出了世界上第一个真正的网络浏览器：Mosaic。在当时，网络甚至还没有JavaScript（或者更不用说CSS了），只有HTML。在那些早期日子里，大多数网站都是简单的静态网站，任何包含动态元素的网站都必须完全基于服务器。JavaScript的第一个版本要到两年后的1995年底才被引入，而且要过好几年，这种语言才对除了简单的表单验证之外的其他事情有用。
- en: '![A Brief History of Web Development](img/image00164.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![网络开发简史](img/image00164.jpeg)'
- en: Yahoo!'s JavaScript-less website in 1997
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 1997年Yahoo!的无JavaScript网站
- en: Luckily, the Web did evolve, and soon JavaScript developers witnessed the birth
    of a whole new wave of JavaScript libraries, such as Dojo, MochiKit, YUI, and,
    of course, jQuery. These libraries allowed developers to easily manipulate the
    DOM, avoid the rampant cross-browser issues of the time, and take advantage of
    a newly introduced technology known as **AJAX**. In other words, they enabled
    developers to create a new type of site, the JavaScript-assisted but still largely
    server-based web application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，网络确实在发展，很快JavaScript开发者见证了整个新的JavaScript库的诞生，如Dojo、MochiKit、YUI，当然还有jQuery。这些库使得开发者能够轻松地操作DOM，避免当时普遍存在的跨浏览器问题，并利用一种新引入的技术，即**AJAX**。换句话说，它们使得开发者能够创建一种新的网站类型，即JavaScript辅助但仍然主要基于服务器的网络应用程序。
- en: 'Even with these advances, the server still maintained control over two critical
    pieces of a site''s infrastructure: navigation and page rendering. This problem
    wouldn''t be solved until years later, with the introduction of the modern generation
    of JavaScript frameworks, the first and popular one being Backbone. Using Backbone,
    web developers were finally able to control an entire site using only the client-side
    technologies of JavaScript, HTML, and CSS, which meant that they could create
    an entirely new type of web application, the thick client or single page site.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有了这些进步，服务器仍然控制着网站基础设施的两个关键部分：导航和页面渲染。这个问题要到几年后，随着现代JavaScript框架的引入，即第一个且最受欢迎的Backbone，才得到解决。使用Backbone，网络开发者终于能够仅使用客户端技术JavaScript、HTML和CSS来控制整个网站，这意味着他们可以创建一种全新的网络应用程序，即厚客户端或单页网站。
- en: Today, even with the advent of Backbone and related libraries, many developers
    still continue to create the three previous types of site, which is perfectly
    reasonable as long as their goals are modest. In other words, if you simply want
    to show off your wedding photos to friends, then you probably don't need the full
    power of Backbone. However, if your goal is to build a powerful and robust web
    application, then the advantages of a Backbone-powered site are clear.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，即使Backbone和相关库的出现，许多开发者仍然继续创建前三种类型的网站，只要他们的目标适度，这是完全合理的。换句话说，如果你只是想向朋友展示你的婚礼照片，那么你可能不需要Backbone的全部功能。然而，如果你的目标是构建一个强大而健壮的网络应用程序，那么Backbone网站的优势是显而易见的。
- en: Benefits of Backbone and single-page applications
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Backbone和单页应用程序的优势
- en: 'While there are numerous benefits of adopting thick client architecture for
    a site, they can be grouped into three main categories: asset control, easier
    data management, and improved performance.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然采用厚客户端架构对网站有许多好处，但它们可以归纳为三个主要类别：资产控制、更简单的数据管理和性能提升。
- en: Full User Interface Asset Control
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的用户界面资产控制
- en: One of the challenges of developing a traditional multipage website is the sharing
    of HTML assets. On such a site, the HTML is generated using server-side tools,
    such as Django templates, ERBs, or **JavaServer Pages** (**JSPs**) but, of course,
    the client-side logic also depends heavily on that same HTML. In smaller organizations,
    this means that programmers frequently have to divide their focus between JavaScript
    and a server-side language, which can be frustrating due to the frequent context
    switching.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开发传统多页网站的一个挑战是共享 HTML 资产。在这样的网站上，HTML 是通过服务器端工具生成的，例如 Django 模板、ERBs 或 **JavaServer
    Pages**（**JSPs**），但当然，客户端逻辑也严重依赖于相同的 HTML。在较小的组织中，这意味着程序员经常需要在 JavaScript 和服务器端语言之间分配注意力，这可能会因为频繁的上下文切换而感到沮丧。
- en: In large organizations where teams are separate, the HTML assets are usually
    managed by the server team. This sometimes makes it difficult for the client team
    to even make the most basic changes to the site's HTML, as they have to work across
    the aisle. When they fail to do so, often the result is such that they create
    parallel versions of the server team's work instead, with such duplication inevitably
    resulting in bugs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队分离的大型组织中，HTML 资产通常由服务器端团队管理。这有时会使客户端团队甚至难以对网站的 HTML 进行最基本的更改，因为他们必须跨越界限工作。当他们未能这样做时，结果往往是他们创建了服务器端团队工作的并行版本，这种重复必然会导致错误。
- en: Backbone-powered thick client applications solve these problems by leaving the
    site's HTML firmly under the control of the client team, either in the form of
    a template system, raw HTML files, or in DOM-manipulation JavaScript logic. Any
    interactions between the two teams happen through a carefully negotiated set of
    APIs, allowing both groups to focus on their core specialties without stepping
    on each others toes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 驱动的厚客户端应用程序通过让网站的 HTML 明确受客户端团队的严格控制来解决这些问题，无论是以模板系统、原始 HTML 文件还是 DOM
    操作 JavaScript 逻辑的形式。两个团队之间的任何交互都通过精心协商的 API 集合发生，使得两组都能够专注于自己的核心专业领域，而不会相互干扰。
- en: Simpler Data Management and Event Triggers
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化数据管理和事件触发
- en: As an application scales, it may become difficult to manage the interactions
    between its various components. One powerful approach to solve this problem is
    to use event-based control systems, but before Backbone, such systems were rarely
    found in JavaScript. True, DOM events have long been a part of web development,
    but without a framework such as Backbone, developers have been limited to just
    the user-generated events. To truly realize the power of an event-based system,
    you also need data-driven events, which are an integral part of Backbone.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用的扩展，管理其各个组件之间的交互可能会变得困难。解决这个问题的强大方法之一是使用基于事件的控制系统，但在 Backbone 出现之前，这样的系统在
    JavaScript 中很少见。诚然，DOM 事件长期以来一直是网络开发的一部分，但没有像 Backbone 这样的框架，开发者只能局限于用户生成的事件。要真正实现基于事件系统的强大功能，还需要数据驱动的事件，这是
    Backbone 的一个重要组成部分。
- en: Another common scaling challenge comes from JavaScript's lack of support for
    **object-oriented programming** (**OOP**). OOP allows programmers to organize
    large, complicated logic into smaller, more manageable classes and is very useful
    when growing an application. While JavaScript has a built-in class system, it
    is fairly unconventional and often discourages developers from employing OOP techniques.
    Backbone solves this problem by providing a more friendly system that, while still
    built within the limits of the JavaScript language, looks much closer to what
    you'd find in a solid OOP language, such as Java.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的扩展挑战来自 JavaScript 对面向对象编程（**OOP**）的支持不足。OOP 允许程序员将大型、复杂的逻辑组织成更小、更易于管理的类，这在扩展应用程序时非常有用。虽然
    JavaScript 有内置的类系统，但它相当不寻常，并且往往劝阻开发者采用 OOP 技术。Backbone 通过提供一个更友好的系统来解决此问题，虽然它仍然在
    JavaScript 语言的限制内构建，但看起来更接近于在像 Java 这样的强大 OOP 语言中找到的系统。
- en: Enhanced performance
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高性能
- en: On the Web, speed is paramount, and one significant factor in a site's speed
    is the weight of its HTML files. In a multipage application, every time the the
    user visits a new page, their browser has to send a request and wait for a response
    from the server. When the response comes back, it doesn't just contain a unique
    HTML for that page. Instead, the response contains the HTML for everything, including
    any common site components such as menus or footers. When the user visits the
    next page, they once again have to download that same common component HTML, even
    if it hasn't changed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上，速度至关重要，一个网站速度的重要因素是其HTML文件的大小。在多页应用中，每次用户访问新页面时，他们的浏览器都必须发送请求并等待服务器的响应。当响应返回时，它不仅仅包含该页面的唯一HTML。相反，响应包含了一切内容的HTML，包括任何常见的网站组件，如菜单或页脚。当用户访问下一页时，他们又必须下载相同的公共组件HTML，即使它没有变化。
- en: 'Moreover, that''s not the only redundant HTML downloaded: multiple rows in
    a table, multiple search results in a list, or any other repeated content also
    has to have its HTML downloaded multiple times. For instance, consider the following
    HTML:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，不仅仅是重复的HTML被下载：表格中的多行、列表中的多个搜索结果或任何其他重复内容也必须多次下载其HTML。例如，考虑以下HTML：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Only the names, descriptions, and URLs of the two books are unique in the preceding
    code, but even so all of the nonunique parts of the code have to be downloaded
    with it. If the site shows 50 books, the user downloads 50 copies of the book
    row HTML. Even when a site has no common components or repeated elements, there's
    still a performance cost when the user visits a new page because the browser has
    to go through an entire request-response cycle and then reload and redraw the
    page, all of which takes time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，只有两本书的名称、描述和URL是唯一的，但即便如此，所有非唯一部分的代码也必须与之一起下载。如果网站显示50本书，用户就需要下载50份书行HTML。即使一个网站没有公共组件或重复元素，当用户访问新页面时，浏览器仍需要经历整个请求-响应周期，然后重新加载和重新绘制页面，所有这些都需要时间。
- en: In a single-page application, none of this is an issue. The site's foundation
    HTML is downloaded only once, and after that, all page transitions happen entirely
    through JavaScript. Since the client knows how to render both common and repeated
    components, there's no need to download any HTML for them at all. On a Backbone
    site, the server sends only the unique data via AJAX, and if there is no unique
    data to download, the user can progress without making a single new request to
    the server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页应用中，这些问题都不存在。网站的基础HTML只下载一次，之后所有的页面转换都完全通过JavaScript完成。由于客户端知道如何渲染公共和重复的组件，因此根本不需要下载它们的任何HTML。在Backbone网站上，服务器只通过AJAX发送唯一数据，如果没有唯一数据需要下载，用户可以无需向服务器发出任何新的请求而继续前进。
- en: Backbone and Its Competitors
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Backbone及其竞争对手
- en: Many of the advantages we've just discussed apply to any single-page application,
    not just a Backbone one. This means that you can achieve many of those benefits
    even if you use one of Backbone's competing libraries, such as Ember or Angular.
    Whether you've considered using these frameworks or not, you're probably at least
    wondering, "Will Backbone provide me with everything I need to build my site,
    both now and in the future?"
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才讨论的许多优势适用于任何单页应用，而不仅仅是Backbone。这意味着即使你使用Backbone的竞争对手库，如Ember或Angular，你也可以实现许多这些好处。无论你是否考虑过使用这些框架，你可能至少会想知道：“Backbone能否提供我现在和未来构建网站所需的一切？”
- en: 'The first thing to consider when answering this question is whether or not
    Backbone has an active community and will continue to be actively developed. Backbone
    users can feel safe in this regard: at the time of writing this book, Backbone''s
    GitHub page had more than 1,500 watchers and more than 21,000 stars, beating its
    next closest competitor (Ember) by more than 400 watchers and 7,000 stars. Other
    frameworks such as CanJS and Google''s Angular have even less interest on GitHub.
    While this certainly doesn''t make Backbone better than those libraries, it shows
    the strength of its community and should provide you with the assurance that Backbone
    will be around for many years to come.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 回答这个问题时首先要考虑的是Backbone是否有活跃的社区并且会继续积极开发。Backbone用户在这方面可以感到安心：在撰写本书时，Backbone的GitHub页面有超过1500名关注者和超过21000颗星，比其最接近的竞争对手（Ember）多出400名关注者和7000颗星。其他框架如CanJS和Google的Angular在GitHub上的关注度更少。虽然这当然不能使Backbone优于那些库，但它显示了其社区的力量，并应该让你有信心Backbone将会存在很多年。
- en: Another reason to feel confident when selecting Backbone is that it only tries
    to do a specific set of tasks, leaving everything else to external libraries.
    This means that if you find a better template system, dependency management tool,
    or any other library in the future, you can easily switch to using it. Other frameworks
    tightly couple things such as their template systems to their framework, leaving
    you with less options in the future.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Backbone 时感到自信的另一个原因是，它只尝试执行一组特定的任务，将其他一切留给外部库。这意味着，如果你在未来发现了一个更好的模板系统、依赖管理工具或其他任何库，你可以轻松地切换到使用它。其他框架将模板系统等紧密耦合到框架中，这让你在未来的选择上更少。
- en: However, perhaps the biggest indicator of Backbone's vitality is the companies
    that are already using it to accomplish amazing things. Companies as varied as
    USA Today, Pandora, Hulu, Gawker Media, AirBnB, Khan Academy, Groupon, and even
    Walmart use Backbone to create powerful web applications. If Backbone is powerful
    enough to support these major companies, it's almost certain to be powerful enough
    for your project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可能是 Backbone 活力的最大指标是已经使用它来完成惊人成就的公司。从 USA Today 到 Pandora、Hulu、Gawker Media、AirBnB、Khan
    Academy、Groupon，甚至沃尔玛，这些多样化的公司都使用 Backbone 来创建强大的网络应用。如果 Backbone 足够强大以支持这些大型公司，那么它几乎可以肯定也足以支持你的项目。
- en: There's one other company that uses Backbone, which is the company that I work
    for—Syapse. At Syapse, we've built a precision medicine data platform that helps
    hospitals receive genetic data in a structured format, pull patients' clinical
    data from a variety of internal health IT systems, and present this data together
    in an interactive web application. Through this interface, physicians see their
    patients' genetic and clinical data in context, enabling them to choose the most
    effective drugs possible tailored to a patient's own genetic profile.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一家公司也使用 Backbone，那就是我所在的公司——Syapse。在 Syapse，我们构建了一个精准医疗数据平台，帮助医院以结构化格式接收遗传数据，从各种内部健康信息技术系统中提取患者的临床数据，并在一个交互式网络应用中将这些数据一起展示出来。通过这个界面，医生可以在上下文中看到他们的患者的遗传和临床数据，从而能够选择最适合患者自身遗传特征的药物。
- en: Creating an application like Syapse did isn't easy, and with serious diseases
    such as cancer on the line, there's little room for error. However, using Backbone,
    Syapse has managed to grow from just one developer to a six-person client-side
    team with over 21,000 lines of code (not counting libraries) in just 3 years.
    Were it not for Backbone's ability to scale, there's simply no way we could have
    grown that quickly, at least without making major changes to our architecture
    along the way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建像 Syapse 这样的应用并不容易，而且在癌症等严重疾病面前，几乎没有犯错的空间。然而，使用 Backbone，Syapse 已经在短短三年内从一名开发者成长为一个拥有六人客户端团队的团队，拥有超过
    21,000 行代码（不包括库）。如果不是 Backbone 的可扩展性，我们根本无法如此快速地成长，至少在过程中不会对架构进行重大更改。
- en: In short, while Backbone itself may be just under half a decade old, the real-world
    usage of the library has proven both its value and scalability. If your goal is
    to create a powerful and robust web application that a single developer can easily
    get off the ground but which can also grow and be supported by a full-sized team,
    you cannot go wrong with Backbone.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，尽管 Backbone 本身可能还不到五年历史，但其在现实世界中的应用已经证明了其价值和可扩展性。如果你的目标是创建一个强大且健壮的网络应用，单个开发者可以轻松启动，同时也能由一个完整的团队进行扩展和维护，那么
    Backbone 是一个不错的选择。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how Backbone represents a new chapter in web development
    and why it's the best framework for your project if your goal is to make powerful
    and scalable web applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Backbone 如何代表网络开发的新篇章，以及为什么如果你的目标是创建强大且可扩展的网络应用，Backbone 是你项目的最佳框架。
- en: In the next chapter, we'll begin to take a look at the components that make
    up Backbone, in particular its easy-to-use class system. We'll also look at Backbone's
    sister library, Underscore, which was also created by Jeremy Ashkenas and is a
    requirement for Backbone itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨构成 Backbone 的组件，特别是其易于使用的类系统。我们还将查看 Backbone 的姐妹库 Underscore，它也是由
    Jeremy Ashkenas 创建的，并且是 Backbone 本身的要求。
