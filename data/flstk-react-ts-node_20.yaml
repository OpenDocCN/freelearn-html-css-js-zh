- en: '*Chapter 17*: Deploying an Application to AWS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：将应用部署到AWS'
- en: An application, once finalized, must be deployed before it can be used. We have
    many options to choose from, including using our own infrastructure. These days,
    however, most companies prefer to use the services of a cloud provider in order
    to reduce their IT-related expenditures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序最终确定，就必须部署才能使用。我们有许多选择，包括使用我们自己的基础设施。然而，如今，大多数公司更倾向于使用云提供商的服务，以减少与IT相关的支出。
- en: In this chapter, we'll learn about deploying our application to **Amazon Web
    Services.** (**AWS**) is, of course, the standard when it comes to Cloud providers.
    We'll be setting up our application services Redis, Postgres, and NGINX on top
    of a Linux VM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何将我们的应用部署到**Amazon Web Services**。(**AWS**)当然是云提供商的标准。我们将在Linux VM上设置我们的应用服务Redis、Postgres和NGINX。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Setting up Ubuntu Linux on AWS Cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS云上设置Ubuntu Linux
- en: Setting up Redis, Postgres, and Node on Ubuntu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu上设置Redis、Postgres和Node
- en: Setting up and deploying our app on NGINX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NGINX上设置和部署我们的应用
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should now have a solid understanding of web technologies. Although it can
    take years to become a senior-level developer, you should now feel comfortable
    with TypeScript, JavaScript, React, Express, and GraphQL. In this chapter, we
    will once again be using Node and Visual Studio Code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该对Web技术有了扎实的了解。虽然成为高级开发人员可能需要多年时间，但您现在应该对TypeScript、JavaScript、React、Express和GraphQL感到满意。在本章中，我们将再次使用Node和Visual
    Studio Code。
- en: The GitHub repository is again available at [https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node).
    Use the code in the `Chap17` folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库再次可在[https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node](https://github.com/PacktPublishing/Full-Stack-React-TypeScript-and-Node)找到。使用`Chap17`文件夹中的代码。
- en: 'Let''s do some basic setup on your development machine:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在开发机器上进行一些基本设置：
- en: Create a `Chap17` folder and then copy the `super-forum-server` and `super-forum-client`
    folders from the source code of the `Chap15` folder.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Chap17`文件夹，然后从`Chap15`文件夹的源代码中复制`super-forum-server`和`super-forum-client`文件夹。
- en: If `node_modules` and `package-lock.json` get copied over, then delete those
    folders and files.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`node_modules`和`package-lock.json`被复制过来，那么删除这些文件夹和文件。
- en: 'Now, terminal into the `Chap17/super-forum-server` folder and run this command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，终端进入`Chap17/super-forum-server`文件夹并运行此命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, terminal into the `Chap17/super-forum-client` folder and run this command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，终端进入`Chap17/super-forum-client`文件夹并运行此命令：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Setting up Ubuntu Linux on AWS Cloud
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS云上设置Ubuntu Linux
- en: 'In this section, we''ll learn about selecting and setting up an Ubuntu Linux
    server on an AWS VM. I''ll assume you know how to create an AWS account already.
    The process is fairly straightforward, as an existing Ubuntu Linux image will
    already be available to use. Let''s start:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在AWS VM上选择和设置Ubuntu Linux服务器。我假设您已经知道如何创建AWS账户。这个过程非常简单，因为现有的Ubuntu
    Linux镜像已经可以使用。让我们开始：
- en: After we log in, the screenshot shown here will be the current AWS portal. Note
    that these screens change frequently, so your view may be different:![Figure 17.1
    – AWS Portal home
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，此处显示的截图将是当前的AWS门户。请注意，这些屏幕经常更改，因此您的视图可能会有所不同：![图17.1 – AWS门户首页
- en: '](img/Figure_17.01_B15508.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.01_B15508.jpg)'
- en: Figure 17.1 – AWS Portal home
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 – AWS门户首页
- en: We can see the **Launch a virtual machine** link. Select it and you will get
    to this next screen:![Figure 17.2 – Initial VM screen
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到**启动虚拟机**链接。选择它，您将进入下一个屏幕：![图17.2 – 初始VM屏幕
- en: '](img/Figure_17.02_B15508.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.02_B15508.jpg)'
- en: Figure 17.2 – Initial VM screen
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 – 初始VM屏幕
- en: Let's select the image for **Ubuntu 20.04 LTS**. This is the latest **Long Term
    Support** version of Ubuntu.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择**Ubuntu 20.04 LTS**的镜像。这是Ubuntu的最新**长期支持**版本。
- en: Once selected, you should see the following screen:![Figure 17.3 – VM instance
    type selector
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选择，您应该看到以下屏幕：![图17.3 – VM实例类型选择器
- en: '](img/Figure_17.03_B15508.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.03_B15508.jpg)'
- en: Figure 17.3 – VM instance type selector
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 – VM实例类型选择器
- en: I have gone ahead and selected a lower-end image with 1 vCPU and 2 GB of memory.
    Note that EBS is an AWS-specific performance optimization for storage.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经选择了一个低端的镜像，配备1个vCPU和2GB内存。请注意，EBS是AWS特定的存储性能优化。
- en: Let's keep things simple by keeping the default settings and select the **Review
    and Launch** button at the bottom of the screen after making our selection.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持默认设置简单，并在做出选择后选择屏幕底部的**审阅和启动**按钮。
- en: Here are the major details of what I have selected:![Figure 17.4 – Initial provisioning
    screen
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我选择的主要细节：![图17.4 – 初始配置屏幕
- en: '](img/Figure_17.04_B15508.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.04_B15508.jpg)'
- en: Figure 17.4 – Initial provisioning screen
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 – 初始配置屏幕
- en: Now, select the **Launch** button at the bottom to continue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在底部选择**启动**按钮继续。
- en: Next, you will see the following prompt:![Figure 17.5 – Select an existing key
    pair dialog
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到以下提示：![图17.5 – 选择现有密钥对对话框
- en: '](img/Figure_17.05_B15508.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.05_B15508.jpg)'
- en: Figure 17.5 – Select an existing key pair dialog
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 – 选择现有密钥对对话框
- en: This screen creates a set of encryption keys for use with SSH, one for you and
    one for AWS, so we can remote terminal into the VM. Download these files and keep
    them secure. Click the **Launch Instances** button to continue.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕创建一组用于SSH的加密密钥，一个用于您，一个用于AWS，这样我们就可以远程终端进入VM。下载这些文件并保持安全。点击**启动实例**按钮继续。
- en: Warning
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: You must keep your pem file somewhere safe and accessible. You will not be able
    to download it again.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须将pem文件保存在安全且可访问的位置。您将无法再次下载它。
- en: Once complete, you should see the **Launch Status** screen. Just click on the
    **View Instances** button at the bottom to continue to the portal:![Figure 17.6
    – VM setup complete screen
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您应该看到**启动状态**屏幕。只需点击底部的**查看实例**按钮继续访问门户网站：![图17.6 – VM设置完成屏幕
- en: '](img/Figure_17.06_B15508.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.06_B15508.jpg)'
- en: Figure 17.6 – VM setup complete screen
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 – VM设置完成屏幕
- en: This will be your VM instance portal:![Figure 17.7 – VM portal
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将是您的VM实例门户网站：![图17.7 – VM门户网站
- en: '](img/Figure_17.07_B15508.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.07_B15508.jpg)'
- en: Figure 17.7 – VM portal
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 – VM门户网站
- en: Click on **Instance ID** and you will get the **Instance summary** screen:![Figure
    17.8 – Instance summary
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**实例ID**，您将看到**实例摘要**屏幕：![图17.8 – 实例摘要
- en: '](img/Figure_17.08_B15508.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.08_B15508.jpg)'
- en: Figure 17.8 – Instance summary
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8 – 实例摘要
- en: You can see quick facts, such as the running instance state, the public IP address,
    and the public DNS name.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到一些快速信息，例如运行实例状态、公共IP地址和公共DNS名称。
- en: Near the top-right corner of this screen, you will see the **Connect** button.
    Click it to get the **Connect to instance** screen:![Figure 17.9 – Connect to
    instance screen
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此屏幕的右上角附近，您将看到**连接**按钮。单击它以获取**连接到实例**屏幕：![图17.9 – 连接到实例屏幕
- en: '](img/Figure_17.09_B15508.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.09_B15508.jpg)'
- en: Figure 17.9 – Connect to instance screen
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9 – 连接到实例屏幕
- en: 'The first tab is **EC2 Instance Connect**, which is a terminal provided for
    us by AWS. Click the **Connect** button and we will see a terminal to our Ubuntu
    server inside our browser, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项卡是**EC2实例连接**，这是AWS为我们提供的终端。单击**连接**按钮，我们将在浏览器内看到我们的Ubuntu服务器终端，如下所示：
- en: '![Figure 17.10 – AWS EC2 Instance Connect'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.10 – AWS EC2实例连接'
- en: '](img/Figure_17.10_B15508.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.10_B15508.jpg)'
- en: Figure 17.10 – AWS EC2 Instance Connect
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10 – AWS EC2实例连接
- en: This is an optional interface we can use if SSH is not working for some reason.
    For this demonstration, I will use the SSH interface.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选的界面，如果SSH由于某种原因无法工作，我们可以使用它。在本演示中，我将使用SSH界面。
- en: Go back to your **Connect to instance** screen and select the third tab, **SSH
    client**. You should see something like this. Of course, your values will be unique:![Figure
    17.11 – SSH how to instructions
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的**连接到实例**屏幕，并选择第三个选项卡**SSH客户端**。您应该看到类似于这样的内容。当然，您的值将是唯一的：![图17.11 – SSH如何操作说明
- en: '](img/Figure_17.11_B15508.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.11_B15508.jpg)'
- en: Figure 17.11 – SSH how to instructions
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.11 – SSH如何操作说明
- en: 'Here''s a sample of how I ran these instructions on my own terminal:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我在自己的终端上运行这些说明的示例：
- en: '![Figure 17.12 – First SSH terminal'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.12 – 第一个SSH终端'
- en: '](img/Figure_17.12_B15508.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.12_B15508.jpg)'
- en: Figure 17.12 – First SSH terminal
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.12 – 第一个SSH终端
- en: First, I changed the permissions of my local pem file as per the AWS instructions.
    Then, I ran SSH as shown. Note that I used `ubuntu` as the username, your VM should
    also be the same, and I used `DNS name` for my server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，根据AWS的说明更改了本地pem文件的权限。然后，我运行了如图所示的SSH。请注意，我使用`ubuntu`作为用户名，您的VM也应该是相同的，并且我使用了我的服务器的`DNS名称`。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If this does not work for you, try opening your network inbound rules for SSH
    to be **Source Anywhere**. If that, too, does not work, you can also revert to
    using the terminal provided by AWS, as shown previously.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对您不起作用，请尝试打开您的网络入站规则以使SSH为**任何来源**。如果这也不起作用，您还可以恢复使用AWS提供的终端，如之前所示。
- en: This completes our setup of Ubuntu Linux. Let's install Redis next.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对Ubuntu Linux的设置。接下来让我们安装Redis。
- en: Setting up Redis, Postgres, and Node on Ubuntu
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu上设置Redis、Postgres和Node
- en: In this section, we will install our main requirements onto our Linux server.
    We already covered the setup and configuration of Redis in [*Chapter 13*](B15508_13_Final_JC_ePub.xhtml#_idTextAnchor208),
    *Setting Up a Session State Using Express and Redis*, but let's do it one final
    time since we will now all have the same underlying OS.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Linux服务器上安装我们的主要要求。我们已经在[*第13章*](B15508_13_Final_JC_ePub.xhtml#_idTextAnchor208)中涵盖了Redis的设置和配置，*使用Express和Redis设置会话状态*，但让我们最后再做一次，因为我们现在都有相同的基础操作系统。
- en: Setting up Redis
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Redis
- en: 'In this section, we will install our Redis server and configure it for our
    application:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装我们的Redis服务器并为我们的应用程序进行配置：
- en: 'On your terminal, log in to the server and run these two commands:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端上，登录服务器并运行以下两个命令：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the installation is complete, open the `redis.conf` file like this:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，像这样打开`redis.conf`文件：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Find the `requirepass` entry, uncomment it, and then add your own password.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`requirepass`条目，取消注释，并添加您自己的密码。
- en: Warning
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The password in the source code folder's `super-forum-server/dev-config/.env`
    file for the `REDIS_PASSWORD` variable must match the password you entered in
    your `redis.conf` file. We will be including the files in the `dev-config` folder
    later when we do our deployment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码文件夹`super-forum-server/dev-config/.env`中的`REDIS_PASSWORD`变量的密码必须与您在`redis.conf`文件中输入的密码匹配。在部署时，我们将稍后包括`dev-config`文件夹中的文件。
- en: Next, find the `supervised` entry and set it to a value of `systemd`. This allows
    Ubuntu to control Redis via its `init` system, which uses a command called `systemctl`.
    Now, save and exit.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到`supervised`条目，并将其设置为`systemd`的值。这允许Ubuntu通过其`init`系统控制Redis，该系统使用一个名为`systemctl`的命令。现在，保存并退出。
- en: 'Now, let''s restart our Redis server to take the new settings:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们重新启动Redis服务器以应用新的设置：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to stop the service, we can run the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要停止服务，我们可以运行以下命令：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we want to start the service, we run the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要启动服务，我们运行以下命令：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you run this command, it will show whether Redis is running properly:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您运行此命令，它将显示Redis是否正常运行：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see something like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于这样的内容：
- en: '![Figure 17.13 – Redis status'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.13 – Redis状态'
- en: '](img/Figure_17.13_B15508.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.13_B15508.jpg)'
- en: Figure 17.13 – Redis status
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.13 – Redis状态
- en: In this section, we installed Redis onto our Ubuntu server and turned on the
    ability to start and stop the server as desired. We will now continue by installing
    Postgres.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在我们的Ubuntu服务器上安装了Redis，并打开了根据需要启动和停止服务器的能力。现在我们将继续安装Postgres。
- en: Setting up Postgres
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Postgres
- en: 'Now, let''s install Postgres for our app:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的应用安装Postgres：
- en: 'We''ll use `apt` again. Run this command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将再次使用`apt`。运行此命令：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's check that it's working by running the command shown in this screenshot:![Figure
    17.14 – The psql command
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行此屏幕截图中显示的命令来检查它是否正常工作：![图17.14 - psql命令
- en: '](img/Figure_17.14_B15508.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.14_B15508.jpg)'
- en: Figure 17.14 – The psql command
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.14 - psql命令
- en: The `postgres` role shown in the command is the global admin account created
    by default in Postgres. We are basically making our logged-in Linux account act
    as if it is the `postgres` account temporarily by using `-i` in the command. `-u`
    indicates which role we are using.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 命令中显示的`postgres`角色是Postgres中默认创建的全局管理员帐户。我们基本上通过在命令中使用`-i`，使我们登录的Linux帐户临时充当`postgres`帐户。`-u`表示我们正在使用哪个角色。
- en: Note
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are not using `pgAdmin` because we get the same capabilities using the `psql`
    command-line tool, and enabling `pgAdmin` with AWS is cumbersome and difficult.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不使用`pgAdmin`，因为我们可以使用`psql`命令行工具获得相同的功能，并且在AWS上启用`pgAdmin`很麻烦和困难。
- en: So, now we are running as the `postgres@<your ip>` user, as was shown in the
    screenshot. If we were not running as Postgres, we would need to prefix any Postgres
    commands with `sudo -u postgres`. But since we are running as the role of Postgres,
    we can just run the command as shown in *Figure 17.13*.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在我们正在以`postgres@<your ip>`用户身份运行，就像屏幕截图中显示的那样。如果我们不是以Postgres身份运行，我们需要在任何Postgres命令前加上`sudo
    -u postgres`前缀。但由于我们正在以Postgres的角色运行，我们可以像*图17.13*中显示的那样运行命令。
- en: 'The `createuser –-interactive` command creates a new user based on a series
    of prompts. Run this command and answer the prompts as shown:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`createuser --interactive`命令根据一系列提示创建新用户。运行此命令并按照提示进行回答。'
- en: '![Figure 17.15 – createuser'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.15 - createuser'
- en: '](img/Figure_17.15_B15508.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.15_B15508.jpg)'
- en: Figure 17.15 – createuser
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.15 - createuser
- en: I've set the username to `superforumsvc`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将用户名设置为`superforumsvc`。
- en: Now, we'll give our new user a password like this:![Figure 17.16 – Setting a
    new user password
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将给我们的新用户设置密码，就像这样：![图17.16 - 设置新用户密码
- en: '](img/Figure_17.16_B15508.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.16_B15508.jpg)'
- en: Figure 17.16 – Setting a new user password
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.16 - 设置新用户密码
- en: First, I enable the command-line tool, `psql`. Then I enter a SQL query to change
    the `superforumsvc` user's password.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我启用命令行工具`psql`。然后，我输入一个SQL查询来更改`superforumsvc`用户的密码。
- en: Note that I cut off the end after the keyword password, which shows what the
    password is, but it should be in single quotes like this, **'<your password>'**.
    Obviously, you'll want to create your own password.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在关键字密码后面截断了末尾，显示密码是什么，但它应该用单引号括起来，就像这样**'<your password>'**。显然，您会想要创建自己的密码。
- en: 'Now, let''s create the database for the app. First, exit the `psql` command
    and then create the database like this:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为应用创建数据库。首先，退出`psql`命令，然后像这样创建数据库：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s now add our `ThreadCategory` default to our database. In the `super-forum-server`
    project, you will find the `utils/InsertThreadCategories.txt` file. Therein are
    the `Categories` we''ve been using. Of course, you can add your own `Categories`
    if you like as well. Here''s a sample of my insert attempt for a category:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将我们的`ThreadCategory`默认添加到我们的数据库中。在`super-forum-server`项目中，您会找到`utils/InsertThreadCategories.txt`文件。其中包含我们一直在使用的`Categories`。当然，您也可以添加自己的`Categories`。这是我尝试插入类别的示例：
- en: '![Figure 17.17 – Inserting ThreadCategory'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.17 - 插入ThreadCategory'
- en: '](img/Figure_17.17_B15508.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.17_B15508.jpg)'
- en: Figure 17.17 – Inserting ThreadCategory
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.17 - 插入ThreadCategory
- en: As you can see, it fails the first few times. So, let's dig through this. First,
    you must be on the correct database. So, again use `\c` to do that. Note that
    the database name is case-sensitive. Then, make sure your table and field names
    have double quotes around them. For the `psql` command line, do not use the `pgAdmin`
    only.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，前几次失败了。所以，让我们深入研究一下。首先，您必须在正确的数据库上。因此，再次使用`\c`来执行。请注意，数据库名称区分大小写。然后，请确保您的表和字段名称周围有双引号。对于`psql`命令行，请不要仅使用`pgAdmin`。
- en: That's it for our Postgres setup. Next, let's set up Node.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的Postgres设置。接下来，让我们设置Node。
- en: Setting up Node
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Node
- en: 'Now, let''s install Node:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装Node：
- en: 'Run the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, run this to check and you should see the version number of your Node installation:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行此命令进行检查，您应该看到您的Node安装的版本号：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Your node version should be *at least* version 12 or higher. If not, you''ll
    need to run this command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Node版本应该*至少*是12或更高版本。如果不是，您需要运行此命令：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And then run this command again:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次运行此命令：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s install NPM by running the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行以下命令来安装NPM：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we need to install a way to manage our Node server, that is, to shut it
    down and autorestart it. So, we will use `pm2`, which is currently one of the
    most popular ways of managing Node. Notice we use the `-g` switch to install it
    globally:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要安装一种管理我们的Node服务器的方法，也就是关闭它并自动重新启动它。因此，我们将使用`pm2`，这是目前管理Node最流行的方法之一。请注意，我们使用`-g`开关全局安装它：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this section, we reviewed how to set up our core service dependencies: Redis,
    Postgres, and Node. We are now ready to begin setting up the actual server using
    NGINX.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了如何设置我们的核心服务依赖项：Redis，Postgres和Node。我们现在准备开始使用NGINX设置实际服务器。
- en: Setting up and deploying our app on NGINX
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和部署我们的应用在NGINX上
- en: In this section, we will install and configure our app for using NGINX. NGINX
    is a very popular high-performance web server, reverse proxy, and load balancer.
    It is respected for its strong performance and also its capabilities to handle
    different configurations for sites using multiple servers.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装和配置我们的应用以使用NGINX。NGINX是一个非常受欢迎的高性能Web服务器，反向代理和负载均衡器。它以其强大的性能和处理使用多个服务器的站点的不同配置的能力而受到尊重。
- en: 'We will use it to serve two sites. One will serve our React client, and the
    other will serve our GraphQL Express server. All of our site traffic will be going
    to NGINX first and then it will redirect those requests to the appropriate part
    of our application. Let''s start by installing NGINX:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用它来为两个站点提供服务。一个将为我们的React客户端提供服务，另一个将为我们的GraphQL Express服务器提供服务。我们所有的站点流量都将首先经过NGINX，然后它将将这些请求重定向到我们应用程序的适当部分。让我们首先安装NGINX：
- en: 'SSH into your server, as shown previously in the *Setting up Ubuntu Linux on
    AWS Cloud* section and run these commands to install NGINX:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH登录到您的服务器，如前面的*在AWS云上设置Ubuntu Linux*部分所示，并运行以下命令安装NGINX：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that NGINX is installed, let''s create a folder to store our server files:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在NGINX已安装好，让我们创建一个文件夹来存储我们的服务器文件：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Setting up super-forum-server
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置超级论坛服务器
- en: 'In this section, we will create the build and deployment process for our server
    code. It is good to have a standardized process for deployment so that your deployments
    are consistent and reliable:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们的服务器代码创建构建和部署过程。有一个标准化的部署过程是很好的，这样您的部署就会保持一致和可靠：
- en: 'Before we can start copying our files, we need to do some basic setup and a
    build of our server project. Open the `super-forum-server` project in VSCode.
    If you look at the `package.json` file''s scripts section, you will see that we
    have a new script called `build`. This will compile our server code and package
    it appropriately for distribution into the `dist` folder. Now, in order to get
    this command to work, we will need to install some NPM packages globally first.
    Run the following command on your developer machine, *not the Ubuntu server*:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始复制文件之前，我们需要进行一些基本设置和构建我们的服务器项目。在VSCode中打开`super-forum-server`项目。如果您查看`package.json`文件的scripts部分，您会发现我们有一个名为`build`的新脚本。这将编译我们的服务器代码，并将其适当地打包到`dist`文件夹中进行分发。现在，为了使此命令起作用，我们需要先在您的开发机器上全局安装一些NPM包。在您的开发机器上运行以下命令，*而不是Ubuntu服务器*：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Unfortunately, there seems to be some sort of bug with the latest Express NPM
    packages, so we will need to install one more NPM package dependency. Run this
    command on your development machine:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，最新的Express NPM包似乎存在某种bug，因此我们需要安装一个额外的NPM包依赖。在您的开发机器上运行以下命令：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note one thing. In the `super-forum-server/src/index.ts` file, I've added a
    new function, `loadEnv`, near the top of the file. This file will deal with relative
    path differences of the `.env` file between your development and server environments,
    using the Node `__dirname` variable.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意一件事。在`super-forum-server/src/index.ts`文件中，我在文件顶部添加了一个新函数`loadEnv`。这个文件将使用Node的`__dirname`变量处理`.env`文件在您的开发和服务器环境之间的相对路径差异。
- en: I've also tweaked the `super-forum-server/dev-config/ormconfig.js` file so that
    it uses `__dirname` for the path to the TypeORM entities.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我还调整了`super-forum-server/dev-config/ormconfig.js`文件，以便它使用`__dirname`作为TypeORM实体的路径。
- en: Warning
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: We have enabled the `synchronize` field in `ormconfig.js` to be `true`. This
    setting is for development deployments only. Do not use this setting in production,
    since it can trigger unwanted database changes. For production, you should use
    a pre-made database and then deploy that directly, with the `synchronize` setting
    set to `false`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`ormconfig.js`中启用了`synchronize`字段为`true`。此设置仅用于开发部署。在生产环境中，请勿使用此设置，因为它可能触发不需要的数据库更改。对于生产环境，您应该使用预先制作的数据库，然后直接部署，将`synchronize`设置为`false`。
- en: 'OK. Let''s now try running our build script. Run this command on your development
    machine:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的。现在让我们尝试运行我们的构建脚本。在您的开发机器上运行以下命令：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s try copying our `dist` folder to our server. On the terminal of
    your development machine, run this command with configurations appropriate to
    you:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将我们的`dist`文件夹复制到我们的服务器上。在您的开发机器终端上，使用适合您的配置运行以下命令：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Log back in to your Ubuntu SSH session and run the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新登录到您的Ubuntu SSH会话，并运行以下命令：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This command will open all access temporarily so that we can copy our files.
    We will close it back up after our copy has happened to reduce security risks.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将暂时打开所有访问权限，以便我们可以复制我们的文件。在复制完成后，我们将关闭它，以减少安全风险。
- en: Now, copy the files by using the same `scp` command from your development terminal.
    For example, here's my command, run from my developer machine, after opening permissions:![Figure
    17.20 – Scp copy
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过使用与您的开发终端相同的`scp`命令来复制文件。例如，这是我从我的开发机器上运行的命令，在打开权限后：![图17.20 – Scp复制
- en: '](img/Figure_17.20_B15508.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.20_B15508.jpg)'
- en: Figure 17.20 – Scp copy
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.20 – Scp复制
- en: Now, check that all the configuration files were copied onto the server by looking
    in the `server` folder, as follows:![Figure 17.21 – Server folder check
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过查看`server`文件夹来检查所有配置文件是否已复制到服务器中，如下所示：![图17.21 – 服务器文件夹检查
- en: '](img/Figure_17.21_B15508.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.21_B15508.jpg)'
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Again, the precise paths will be different for your machine.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，对于您的机器，确切的路径将有所不同。
- en: 'Now, we should close our permissions back up again with this command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该使用以下命令再次关闭我们的权限：
- en: '[PRE24]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This permission gives the owner full access, but gives others only execute and
    read access.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此权限给予所有者完全访问权限，但只给予其他人执行和读取权限。
- en: Note
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If we fall down the rabbit hole of security optimizations, we could end up writing
    another book. Since this will be a development server that will probably be thrown
    away, let's focus on the main tasks for now. Once you're ready to go live to production
    with your billion-dollar app, you'll need to exercise some due diligence on security
    or, better yet, hire someone with at least 10 years' experience.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们陷入安全优化的兔子洞，我们可能会写另一本书。由于这将是一个可能被丢弃的开发服务器，让我们现在专注于主要任务。一旦您准备好使用您的亿美元应用程序进行生产，您将需要对安全性进行一些尽职调查，或者更好的是，雇佣至少有10年经验的人。
- en: 'Now, on our SSH terminal session on the Ubuntu server, cd into the `/var/www/superforum/server`
    folder and then run this command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在Ubuntu服务器上的SSH终端会话中，cd进入`/var/www/superforum/server`文件夹，然后运行以下命令：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will, of course, install all the dependencies for our Node app server.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将安装我们Node应用服务器的所有依赖。
- en: 'Now, we need to set up our `pm2` system so that it will control our Node server.
    Run this command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要设置我们的`pm2`系统，以便它可以控制我们的Node服务器。运行此命令：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: So, copy and paste this command starting at `sudo`, and then run it on your
    SSH session of your Ubuntu server. Once run, you should see something like this:![Figure
    17.23 – Result of pm2 startup running
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，请复制并粘贴此命令，从`sudo`开始，然后在Ubuntu服务器的SSH会话中运行。运行后，您应该看到类似于这样的东西：![图17.23 – pm2启动运行的结果
- en: '](img/Figure_17.23_B15508.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.23_B15508.jpg)'
- en: Figure 17.23 – Result of pm2 startup running
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.23 – pm2启动运行的结果
- en: Next, we want to start our Node server as follows:![Figure 17.24 – Node server
    started
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要启动我们的Node服务器，如下所示：![图17.24 – Node服务器已启动
- en: '](img/Figure_17.24_B15508.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.24_B15508.jpg)'
- en: Figure 17.24 – Node server started
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.24 – Node服务器已启动
- en: 'We can now save this as part of pm2''s startup list by running this command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行此命令将其保存为pm2启动列表的一部分：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once run, you should see the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，您应该看到以下内容：
- en: '![Figure 17.25 – pm2 save run'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.25 – pm2保存运行'
- en: '](img/Figure_17.25_B15508.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.25_B15508.jpg)'
- en: Figure 17.25 – pm2 save run
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.25 – pm2保存运行
- en: By doing this save operation, our Node server will now start automatically whenever
    our server is restarted.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此保存操作，我们的Node服务器现在将在服务器重新启动时自动启动。
- en: In this section, we created a process to build, deploy, and start our Node server.
    Having configured this setup, we can be sure that it will be repeatable as we
    update our code in the future.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个过程来构建、部署和启动我们的Node服务器。通过配置这个设置，我们可以确保在将来更新我们的代码时可以重复使用。
- en: Setting up super-forum-client
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置超级论坛客户端
- en: 'OK, so now we have to do a similar process for our client-side project. You
    should have the `super-forum-client` already copied over to your `Chap17` folder,
    as that''s the first thing we did at the start of this chapter:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们必须为我们的客户端项目执行类似的过程。您应该已经将`super-forum-client`复制到`Chap17`文件夹中，因为这是本章开头我们做的第一件事：
- en: 'Now, go back to your SSH terminal session on your Ubuntu server and create
    the folder for the client project like this:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到您的Ubuntu服务器上的SSH终端会话，并像这样为客户端项目创建文件夹：
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, go back to your development terminal in the `super-forum-client` project
    folder so that we can do the client build and deploy. First, we need to do a minor
    tweak to our project. You saw that our server project uses an `.env` file for
    settings. We don''t need anything that involved our client project. However, we
    should be able to at least set the GraphQL server URL as required, depending on
    the deployment environment. Therefore, perform the following steps:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到`super-forum-client`项目文件夹中的开发终端，以便我们可以进行客户端构建和部署。首先，我们需要对我们的项目进行一些微小的调整。您看到我们的服务器项目使用`.env`文件进行设置。我们不需要任何涉及我们客户端项目的东西。但是，至少我们应该能够根据部署环境的需要设置GraphQL服务器URL。因此，请执行以下步骤：
- en: 'Open `index.ts` with VSCode and update the `ApolloClient` code like this:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用VSCode打开`index.ts`，并像这样更新`ApolloClient`的代码：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Open the `package.json` file and look at the scripts section. You should see
    a new script called `build-dev` that sets the `REACT_APP_GQL_URL` variable. Feel
    free to create multiple versions of this script for your own needs with differing
    variable values.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开`package.json`文件并查看脚本部分。您应该看到一个名为`build-dev`的新脚本，它设置了`REACT_APP_GQL_URL`变量。随意根据自己的需求创建多个版本的此脚本，具有不同的变量值。
- en: 'So, now let''s run the `build-dev` script:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在让我们运行`build-dev`脚本：
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we just need to open the server''s client folder temporarily so that we
    can do our copy. Run the following command:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要暂时打开服务器的客户端文件夹，以便我们可以进行复制。运行以下命令：
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we can deploy our client-side build files. From your development terminal,
    run this command, with your own proper paths of course:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以部署我们的客户端构建文件。从您的开发终端，运行这个命令，当然要用您自己正确的路径：
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result will look something like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将看起来像这样：
- en: '![Figure 17.27 – Copying client files to the server'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.27 – 复制客户端文件到服务器'
- en: '](img/Figure_17.27_B15508.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.27_B15508.jpg)'
- en: Figure 17.27 – Copying client files to the server
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.27 – 复制客户端文件到服务器
- en: 'Now, undo the permissions as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤撤消权限：
- en: '[PRE33]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Configuring NGINX
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置NGINX
- en: 'All right. We have done a lot of configuring of our server build, so now we
    can continue by configuring our installed NGINX server:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我们已经对服务器构建进行了大量配置，现在我们可以继续配置我们安装的NGINX服务器：
- en: We need to have NGINX start when starting the system in our Ubuntu server. Run
    the command shown on your SSH terminal and then authenticate as shown:![Figure
    17.28 – Enabling NGINX start when the system boots
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在Ubuntu服务器启动系统时启动NGINX。在您的SSH终端上运行所示的命令，然后按照所示进行身份验证：![图17.28 – 启用NGINX在系统启动时启动
- en: '](img/Figure_17.28_B15508.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.28_B15508.jpg)'
- en: Figure 17.28 – Enabling NGINX start when the system boots
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.28 – 启用NGINX在系统启动时启动
- en: Now, check that NGINX is running with the `status` command shown here:![Figure
    17.29 – NGINX status
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用此处显示的`status`命令检查NGINX是否正在运行：![图17.29 – NGINX状态
- en: '](img/Figure_17.29_B15508.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.29_B15508.jpg)'
- en: Figure 17.29 – NGINX status
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.29 – NGINX状态
- en: Now, we need to open Port 80 on our AWS VM firewall. Open the browser to the
    AWS portal and then select **Security Groups**, under the **Network & Security**
    menu. Then you'll see this:![Figure 17.30 – Security Groups
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在AWS VM防火墙上打开端口80。打开浏览器到AWS门户，然后选择**安全组**，在**网络和安全**菜单下。然后您会看到这个：![图17.30
    – 安全组
- en: '](img/Figure_17.30_B15508.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.30_B15508.jpg)'
- en: Figure 17.30 – Security Groups
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.30 – 安全组
- en: Now, select the non-default group and you'll see the screen shown in the following
    screenshot. Notice **Inbound rules** near the bottom:![Figure 17.31 – Networking
    tab; adding an inbound port rule
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择非默认组，您将看到以下截图中显示的屏幕。请注意**入站规则**在底部附近：![图17.31 – 网络选项卡；添加入站端口规则
- en: '](img/Figure_17.31_B15508.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.31_B15508.jpg)'
- en: Figure 17.31 – Networking tab; adding an inbound port rule
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.31 – 网络选项卡；添加入站端口规则
- en: Select the **Edit inbound rules** button and then, on that next screen, click
    the **Add rule** button.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**编辑入站规则**按钮，然后在下一个屏幕上，单击**添加规则**按钮。
- en: 'Once that''s selected, you should see this screen shown in *Figure 17.32*.
    Add the new inbound rule for HTTP, as in the following screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 选择后，您应该会看到*图17.32*中显示的屏幕。添加HTTP的新入站规则，如下截图所示：
- en: '![Figure 17.32 – New HTTP inbound rule'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.32 – 新的HTTP入站规则'
- en: '](img/Figure_17.32_B15508.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.32_B15508.jpg)'
- en: Figure 17.32 – New HTTP inbound rule
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.32 – 新的HTTP入站规则
- en: By selecting **0.0.0.0/0** as the source, you are allowing any IP addresses,
    which is what we want. Now, save the rule by clicking the **Save rules** button.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**0.0.0.0/0**作为源，您允许任何IP地址，这是我们想要的。现在，点击**保存规则**按钮保存规则。
- en: 'Usually, the local Ubuntu firewall is not enabled. However, if it is enabled,
    we also need to let traffic through to NGINX on the firewall. If necessary, run
    the following command:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，本地Ubuntu防火墙未启用。但是，如果启用了，我们还需要让防火墙通过到NGINX的流量。如果需要，运行以下命令：
- en: '[PRE34]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So, clearly our NGINX is installed and working. So now we need to make it serve
    up our site. Note that there appears to be a bug in NGINX for dealing with very
    long domain names, like the one I received after registering on AWS. Therefore,
    for our website, we will use the IP address instead.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显然，我们的NGINX已安装并正在运行。现在我们需要让它提供我们的网站。请注意，NGINX似乎存在处理非常长的域名的bug，就像我在AWS注册后收到的那样。因此，对于我们的网站，我们将使用IP地址。
- en: NGINX has two options for setting up sites. One allows us to use the configuration
    file in the `/etc/nginx/conf.d` folder. The other, called Server Blocks, uses
    the `/etc/nginx/sites-available` folder. We will use the `conf.d` method.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX有两种设置站点的选项。一种允许我们使用`/etc/nginx/conf.d`文件夹中的配置文件。另一种称为Server Blocks，使用`/etc/nginx/sites-available`文件夹。我们将使用`conf.d`方法。
- en: 'Run this command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令：
- en: '[PRE35]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now this is what your file should contain, again with your own folder paths
    and domain name:![Figure 17.35 – New NGINX conf file
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的文件应该包含以下内容，再次使用您自己的文件夹路径和域名：![图17.35 – 新的NGINX配置文件
- en: '](img/Figure_17.35_B15508.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.35_B15508.jpg)'
- en: Figure 17.35 – New NGINX conf file
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.35 – 新的NGINX配置文件
- en: 'Here are some things to note:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的事项：
- en: Do not forget the concluding semi-colon on each line. Without it, you will get
    errors.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记每行结尾的分号。如果没有，将会出现错误。
- en: '`server_name` is the domain name or IP address.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`server_name`是域名或IP地址。'
- en: '`root` is the folder that contains our HTML file.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`root`是包含我们的HTML文件的文件夹。'
- en: '`location / is` the root of our website.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`位置/`是我们网站的根目录。'
- en: '`location /graphql` is where our GraphQL server lives. We are using `proxy_pass`
    to redirect calls to `http://<domain or ip>/graphql` to our `http://localhost:5000/graphql`
    server (our Node server).'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`位置/graphql`是我们的GraphQL服务器所在的地方。我们使用`proxy_pass`将调用重定向到`http://<domain or ip>/graphql`到我们的`http://localhost:5000/graphql`服务器（我们的Node服务器）。'
- en: '`<prefix>_timeout` fields are to prevent Error 503 Gateway Timeout issues,
    which can sometimes happen with NGINX.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`<prefix>_timeout`字段用于防止错误503网关超时问题，这在NGINX中有时会发生。'
- en: 'Next, we need to test that our config changes are OK by running the following
    command:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过运行以下命令测试我们的配置更改是否正常：
- en: '[PRE36]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should see this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到这个：
- en: '![Figure 17.36 – NGINX config file status'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.36 – NGINX配置文件状态'
- en: '](img/Figure_17.36_B15508.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.36_B15508.jpg)'
- en: '[PRE37]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s now see whether our app on the browser comes up. First, let''s stop
    our Node server and restart it without using `pm2`, so that we can see any errors
    that might be occurring. Run these commands on your Ubuntu SSH terminal:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看浏览器上的应用程序是否出现。首先，让我们停止我们的Node服务器，并重新启动它，而不使用`pm2`，这样我们就可以看到可能发生的任何错误。在Ubuntu
    SSH终端上运行以下命令：
- en: '[PRE38]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see something like this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似于这样的内容：
- en: '![Figure 17.37 – First run of the Node server'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.37 – 第一次运行Node服务器'
- en: '](img/Figure_17.37_B15508.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.37_B15508.jpg)'
- en: Figure 17.37 – First run of the Node server
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.37 – 第一次运行Node服务器
- en: Again, your IP address will be different, and possibly your paths if you changed
    them. If you see errors instead, go to the troubleshooting section later.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，您的IP地址将不同，如果更改了路径，可能也会不同。如果看到错误，请稍后查看故障排除部分。
- en: Now, open your browser and go to your IP address as given by AWS. Then, click
    on the **Register** button and let's register a new user, as shown next:![Figure
    17.38 – Registering a new user test
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器，转到AWS给出的IP地址。然后，点击**注册**按钮，让我们注册一个新用户，如下所示：![图17.38 – 注册新用户测试
- en: '](img/Figure_17.38_B15508.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.38_B15508.jpg)'
- en: Figure 17.38 – Registering a new user test
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.38 – 注册新用户测试
- en: 'Fill in the values as you see fit and click the **Register** button. You should
    see something like this:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要填写值，然后点击**注册**按钮。您应该会看到类似于这样的内容：
- en: '![Figure 17.39 – Registration success'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.39 – 注册成功'
- en: '](img/Figure_17.39_B15508.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.39_B15508.jpg)'
- en: Figure 17.39 – Registration success
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.39 – 注册成功
- en: 'Now we need to confirm our new user. Run these commands on the Ubuntu SSH terminal:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要确认我们的新用户。在Ubuntu SSH终端上运行以下命令：
- en: '[PRE39]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s just confirm that all of our users are registered. Once the commands
    are complete, you should see a confirmation, as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认所有用户都已注册。完成命令后，您应该会看到确认，如下所示：
- en: '![Figure 17.40 – Confirm registered users'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.40 – 确认注册用户'
- en: '](img/Figure_17.40_B15508.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.40_B15508.jpg)'
- en: Figure 17.40 – Confirm registered users
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.40 – 确认注册用户
- en: Now, let's try and log in with our new user:![Figure 17.41 – Logged-in test3
    user
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用我们的新用户登录：![图17.41 – 登录测试3用户
- en: '](img/Figure_17.41_B15508.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.41_B15508.jpg)'
- en: Figure 17.41 – Logged-in test3 user
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.41 – 登录测试3用户
- en: 'Of course, currently we have no data, so now we''ll add one thread post, like
    this:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，目前我们没有数据，所以现在我们将添加一个主题帖，就像这样：
- en: '![Figure 17.42 – First post'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.42 – 第一篇文章'
- en: '](img/Figure_17.42_B15508.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.42_B15508.jpg)'
- en: Figure 17.42 – First post
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.42 – 第一篇文章
- en: 'And this is now our home page:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是我们的主页：
- en: '![Figure 17.43 – Home screen following the first post'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.43 – 第一篇文章后的主屏幕'
- en: '](img/Figure_17.43_B15508.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.43_B15508.jpg)'
- en: Figure 17.43 – Home screen following the first post
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.43 – 第一篇文章后的主屏幕
- en: That's it. We're done!
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们完成了！
- en: In this section, we finalized our setup of our application using NGINX and all
    of our other services. Congratulations! You've done a phenomenal job and have
    gotten through an enormous amount of highly technical material.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用NGINX和所有其他服务完成了应用程序的设置。恭喜！您做得非常出色，并且已经通过了大量高度技术性的材料。
- en: Troubleshooting
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Setting up and using cloud services can be a great deal more complex than just
    using a server on your own network. Here are some basic tips for dealing with
    issues:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和使用云服务可能比仅在自己的网络上使用服务器要复杂得多。以下是处理问题的一些基本提示：
- en: Any time you update client files, you must restart NGINX.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次更新客户端文件时，都必须重新启动NGINX。
- en: Any time you update the server files, you must restart the Node server.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次更新服务器文件时，都必须重新启动Node服务器。
- en: Always verify that your `.env` settings are correct and match the names you
    chose during setup; for example, the name of your Postgres database, its username,
    and password. Also make sure that the path to your `.env` file is correct and
    is being picked up by the Node server.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终验证您的`.env`设置是否正确，并与设置过程中选择的名称匹配；例如，您的Postgres数据库的名称、用户名和密码。还要确保`.env`文件的路径正确，并且Node服务器正在使用它。
- en: 'Make sure the `PG_ENTITIES` and `PG_ENTITIES_DIR` variables have the correct
    paths. For our current app, this would be the following:'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保`PG_ENTITIES`和`PG_ENTITIES_DIR`变量具有正确的路径。对于我们当前的应用程序，这将是以下内容：
- en: '`PG_ENTITIES="/repo/**/*.*"`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`PG_ENTITIES="/repo/**/*.*"`'
- en: '`PG_ENTITIES_DIR="/repo"`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`PG_ENTITIES_DIR="/repo"`'
- en: If these are not set properly, you may get an error, such as `No repository
    for <Entity Name> was found`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些设置不正确，您可能会收到错误消息，比如“找不到<Entity Name>的存储库”。
- en: If you edit your `.env` file on your server, make sure it is **not** being overwritten
    during the deploy process. In other words, don't edit your file on the server!
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在服务器上编辑`.env`文件，请确保在部署过程中**不会**被覆盖。换句话说，不要在服务器上编辑文件！
- en: Always use the `sudo nginx -t` command after updating any `.conf` files for
    NGINX and then restart the NGINX service once configuration changes are complete.
    If you do get an error, make sure all of your configuration lines end with a semi-colon.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更新任何NGINX的`.conf`文件后，始终使用`sudo nginx -t`命令，然后在配置更改完成后重新启动NGINX服务。如果出现错误，请确保所有配置行都以分号结尾。
- en: If you're making changes in your development environment and testing them there,
    make sure you have set the `NODE_ENV` environment variable to development. You'll
    need to set this permanently or else it will disappear on reboot.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在开发环境中进行更改并在那里进行测试，请确保已将`NODE_ENV`环境变量设置为开发。您需要永久设置这个变量，否则它将在重新启动时消失。
- en: NGINX has a common error of `504 Gateway Timeout`. Make sure your timeout configurations
    are sufficient. You'll have to play with them.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NGINX常见的错误是`504网关超时`。确保您的超时配置足够。您需要调整它们。
- en: Note that very long domain names seem to be an issue in NGINX. For testing purposes,
    see whether using the IP address works. If it does, and the domain does not, you
    then know your issue.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，非常长的域名似乎在NGINX中会出现问题。出于测试目的，请查看是否使用IP地址有效。如果有效，而域名无效，则您就知道了问题所在。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we cemented our knowledge of web development with React, Node,
    and GraphQL by finally deploying our application to the cloud. Learning how to
    deploy our app onto the AWS Cloud is extremely valuable since it is currently
    the most popular and widely used cloud service. Also, doing this with NGINX was
    the right move since NGINX is very performant and extremely popular in the Node
    community.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过将应用程序最终部署到云上，巩固了我们对React、Node和GraphQL的Web开发知识。学习如何将应用程序部署到AWS云上非常有价值，因为它目前是最受欢迎和广泛使用的云服务。此外，使用NGINX是正确的选择，因为NGINX在Node社区中非常高效和受欢迎。
- en: Thank you so much for joining me on this journey. As a developer, there is always
    something new to learn and try. But you have taken a huge step by gaining an understanding
    of some of the most important and key web technologies. You now have all the tools
    you need in order to create real, full stack, cutting-edge web applications. Again,
    congratulations!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢您加入我的旅程。作为开发人员，总是有新的东西可以学习和尝试。但是，通过了解一些最重要和关键的Web技术，您已经迈出了一大步。现在，您拥有了创建真正的、全栈、尖端Web应用所需的所有工具。再次恭喜！
- en: I wish you continued success.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您继续成功。
