- en: Chapter 5. Reaching Beyond the Offline Cache
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。超越离线缓存
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting network responses offline
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线获取网络响应
- en: Caching content from ZIP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 ZIP 文件中缓存内容
- en: Selecting the best content provider (load balancer)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择最佳内容提供者（负载均衡器）
- en: Redirecting a request
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向请求
- en: Setting request headers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置请求头
- en: Making a service worker act like a remote server (virtual server)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使服务工作者表现得像远程服务器（虚拟服务器）
- en: Making a service worker act as a dependency injector
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使服务工作者充当依赖注入器
- en: Forcing immediate control
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制立即控制
- en: Implementing fallback responses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现回退响应
- en: Deferring offline requests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟离线请求
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will reach beyond the offline cache and look into advance
    techniques such as offline network responses; advanced request handling including
    redirecting, setting request headers, deferring offline requests, and implementing
    fallback requests; and using a service worker as a load balancer or dependency
    injector, forcing immediate control, and also caching content from ZIP files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将超越离线缓存，探讨一些高级技术，例如离线网络响应；高级请求处理，包括重定向、设置请求头、延迟离线请求和实现回退请求；以及使用服务工作者作为负载均衡器或依赖注入器，强制立即控制，并从
    ZIP 文件中缓存内容。
- en: Let's start off this chapter by looking at how to get network responses offline.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从本章开始，看看如何离线获取网络响应。
- en: Getting network responses offline
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线获取网络响应
- en: Read-through caching is an assertive approach of all-out caching for the type
    of static content that you visit regularly. This is not very suitable for dynamic
    content such as news and sports. A selective caching approach would be better
    suited for such instances. Read-through caching saves us bandwidth for the server
    as well as requests over the network. The way read-through caching works is that
    after the service worker takes control of your page when the first `fetch()` request
    is called, the response will be cached and subsequent requests to the same URL
    will be served from the cache.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 读取缓存是一种对所有静态内容进行全面缓存 assertive approach，这些静态内容是你经常访问的。这并不适合动态内容，如新闻和体育。在这种情况下，选择性的缓存方法会更好。读取缓存可以为我们节省服务器带宽以及网络请求。读取缓存的工作方式是，当服务工作者在第一次
    `fetch()` 请求被调用时接管你的页面，响应将被缓存，后续对同一 URL 的请求将来自缓存。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考 [第 1 章](ch01.html "第 1 章。学习服务工作者基础")
    的第一个配方，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在 HTTPS 上运行。要了解如何设置支持此功能的发展环境，请参考 [第 1 章](ch01.html
    "第 1 章。学习服务工作者基础") 的以下配方，*学习服务工作者基础*：*设置 GitHub pages for SSL*、*设置 Windows 的 SSL*
    和 *设置 Mac 的 SSL*。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` files
    from the following location:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置复制 `index.html`、`index.js`、`service-worker.js` 和 `style.css` 文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/)'
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_03.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 `index.html`。![如何操作...](img/B05381_05_03.jpg)
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the message in the console. You will see the `style.css` file
    is served from the network, but the `index.js` file is served from the cache.![How
    to do it...](img/B05381_05_04.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具栏（*Cmd* + *Alt* + *I* 或 *F12*）。现在刷新页面并查看控制台中的消息。你会看到 `style.css` 文件是从网络中提供的，但
    `index.js` 文件是从缓存中提供的。![如何操作...](img/B05381_05_04.jpg)
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the service worker file is installing the service worker, it saves the
    `index.html` file and the `index.js` file in the cache. We are intentionally skipping
    the `style.css` file here, so when you refresh the page, the service worker first
    looks at the cached files, finds `index.html` and `index.js` files there, and
    serves them from the cache. The `style.css` file is not in the cache, however,
    so the service worker fetches it from the network.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务工作线程文件安装服务工作线程时，它会将`index.html`文件和`index.js`文件保存在缓存中。我们故意跳过了`style.css`文件，因此当您刷新页面时，服务工作线程首先查看缓存文件，找到那里的`index.html`和`index.js`文件，并从缓存中提供它们。然而，`style.css`文件不在缓存中，因此服务工作线程从网络中获取它。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Caching content from ZIP
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从ZIP中缓存内容
- en: If you are concerned about the speed of loading your application over the Internet,
    one of the areas you might look into is reducing the number of requests made by
    your app to download resources. One way of reducing HTTP requests is sending your
    resource files, such as, images as a ZIP package to the client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心应用程序在互联网上的加载速度，您可能需要考虑的一个领域是减少应用程序为下载资源而发出的请求数量。减少HTTP请求的一种方法是将资源文件，例如图像，作为ZIP包发送给客户端。
- en: In this recipe, we will look at how we can cache resources from a ZIP file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何从ZIP文件中缓存资源。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作线程，您需要在浏览器设置中开启服务工作线程实验功能。如果您还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作线程基础")的第一个食谱，*学习服务工作线程基础*：*设置服务工作线程*。服务工作线程仅在HTTPS上运行。要了解如何设置开发环境以支持此功能，请参考[第1章](ch01.html
    "第1章. 学习服务工作线程基础")的以下食谱，*学习服务工作线程基础*：*为SSL设置GitHub页面*，*为Windows设置SSL*，以及*为Mac设置SSL*。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置您的文件结构：
- en: 'First, we must create an `index.html` file and copy the code from the following
    location:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个`index.html`文件，并从以下位置复制代码：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` and copy the code from the following location:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`相同的文件夹中创建一个名为`service-worker.js`的JavaScript文件，并从以下位置复制代码：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
- en: 'Copy the third-party code from the following location into a new folder called
    `vendor`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三方代码从以下位置复制到一个名为`vendor`的新文件夹中：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor)'
- en: 'Add `archive.zip`, `cacheProvider.js`, `helper.js`, `index.js`, the `images`
    folder, and `style.css` into the same directory as the `index.html` file from
    the following location:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`archive.zip`、`cacheProvider.js`、`helper.js`、`index.js`、`images`文件夹和`style.css`添加到与`index.html`文件相同的目录中：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/)'
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_01.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件。![如何操作...](img/B05381_05_01.jpg)
- en: Select a brand from the drop-down menu and click **Load**.![How to do it...](img/B05381_05_02.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择一个品牌并点击**加载**。![如何操作...](img/B05381_05_02.jpg)
- en: Now click on the **Uninstall** button.![How to do it...](img/B05381_05_26.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**卸载**按钮。![如何操作...](img/B05381_05_26.jpg)
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In our `index.html` file, we check whether the service worker is controlling
    the page. If so, we display the images.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`index.html`文件中，我们检查服务工人是否控制着页面。如果是，我们显示图片。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the service worker is active at the time of installation, we show the
    drop-down list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务工人在安装时处于活动状态，我们显示下拉列表：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Uninstalling the package does not remove the resources from the cache because
    the offline cache will not be erased by uninstalling the service worker:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载包不会从缓存中删除资源，因为卸载服务工人不会擦除离线缓存：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s move on to the `service-worker.js` file. There we import some third-party
    scripts from the vendor folder, and also some of our own:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到`service-worker.js`文件。在那里，我们从供应商文件夹导入一些第三方脚本，以及我们的一些脚本：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the time of the installation, we are getting the content from the ZIP file,
    `responses-offline`, and storing it in the cache.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装时，我们从ZIP文件`responses-offline`获取内容，并将其存储在缓存中。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Gain control of the clients at the point of activation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活点控制客户端：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Query the cache and, if the request doesn''t match, send the request to the
    network:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 查询缓存，如果请求不匹配，则将请求发送到网络：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now let's look at the `cacheProvider.js` file for the functions handling the
    cache.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看处理缓存的`cacheProvider.js`文件。
- en: 'We don''t cache the folders, only the files inside them:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不缓存文件夹，只缓存其中的文件：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The blob writer is a supported format for the response object''s constructor.
    The data will be read the way the writer wants it to be read:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 块写入器是响应对象构造函数的支持格式。数据将以写入器想要的方式读取：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We identify the type of the file by looking at its extension:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过查看扩展名来识别文件的类型：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We have to clone the `response` object because once it is being used, you cannot
    use it again:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须克隆`response`对象，因为一旦它被使用，就不能再次使用：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s look at the `helper.js` file as well. The `getZipFileReader(data)` function
    wraps the `zip.js` API in a promise:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看`helper.js`文件。`getZipFileReader(data)`函数将`zip.js` API包装在Promise中：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `getContentType(filename)` method returns the content type of a file by
    the extension:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`getContentType(filename)`方法通过扩展名返回文件的类型：'
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Selecting the best content provider (load balancer)
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择最佳内容提供者（负载均衡器）
- en: In this recipe, we are going to look at how we can use the service worker as
    a load balancer so we can decide which content provider is the best suited for
    us to get content from, depending on the load of the content provider.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用服务工人作为负载均衡器，以便我们可以根据内容提供者的负载决定哪个内容提供者最适合我们从其获取内容。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*. You also need to make sure Node.js is available to you. You can read how
    to install Node.js at [https://nodejs.org/en/](https://nodejs.org/en/).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工人，您需要在浏览器设置中启用服务工人实验功能。如果您还没有这样做，请参阅[第1章](ch01.html "第1章。学习服务工人基础知识")的第一个菜谱，*学习服务工人基础知识*：*设置服务工人*。服务工人仅在HTTPS上运行。要了解如何设置支持此功能的开发生态，请参阅以下菜谱：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。您还需要确保Node.js可用。您可以在[https://nodejs.org/en/](https://nodejs.org/en/)上阅读如何安装Node.js。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置您的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/)'
- en: 'Run the following command in the command line (make sure you have Node.js installed
    or read how to do so on [https://nodejs.org/en/](https://nodejs.org/en/)):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中运行以下命令（确保已安装Node.js，或者阅读如何在[https://nodejs.org/en/](https://nodejs.org/en/)上安装）：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_05.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`。![如何做到这一点...](img/B05381_05_05.jpg)
- en: You can select the logo from the drop-down list and it will load the image from
    the best content provider, with less load. You can also manually set the server
    loads and click **Reset**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从下拉列表中选择标志，它将从最佳内容提供商加载图像，减少负载。你也可以手动设置服务器负载并点击**重置**。
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `service-worker.js` file, we are forcing the service worker to gain
    control of the clients straight away:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`service-worker.js`文件中，我们正在强制服务工作者立即控制客户端：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We use a regex pattern to check whether the request contains images:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用正则表达式模式来检查请求是否包含图像：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The method for the best server returns the server with the lowest load and
    then returns the image from that server:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳服务器的方法返回负载最低的服务器，然后从该服务器返回图像：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Express server will be queried to find the server loads:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Express服务器将被查询以找到服务器负载：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `index.js` file, we are setting the handlers for image selection:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，我们正在设置图像选择的处理器：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Also, when the user clicks on the **Reset** button, the manual load values
    will be sent to the Express server:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当用户点击**重置**按钮时，手动负载值将被发送到Express服务器：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When changing the image selection, in order to prevent caching, we add a cache
    bust parameter:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改图像选择时，为了防止缓存，我们添加了一个缓存破坏参数：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We are setting the session values with a random string and store them in `localStorage`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用随机字符串设置会话值并将它们存储在`localStorage`中：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `server.js` file is an Express server running on a specified port. The
    service worker requires the server to run over a SSL connection. To achieve this,
    we are using HTTP node module and we are setting the location of the key/value
    pairs we created in the following recipes of [Chapter 1](ch01.html "Chapter 1. Learning
    Service Worker Basics"), *Learning Service Worker Basics*: *Setting up GitHub
    pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.js`文件是一个在指定端口上运行的Express服务器。服务工作者需要服务器通过SSL连接运行。为了实现这一点，我们正在使用HTTP节点模块，并设置我们在以下[第1章](ch01.html
    "第1章。学习服务工作者基础")的以下食谱中创建的键/值对的位置，*学习服务工作者基础*：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。'
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We are also allowing cross-origin resource sharing for our web page to access
    this server.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还允许网页跨源资源共享以访问此服务器。
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Redirecting a request
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向请求
- en: Relative URLs, such as `test/`, should redirect to `index.html` if there is
    one in the `test/` directory. Let's test this scenario with the service worker.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 相对URL，例如`test/`，如果`test/`目录中有一个，则应重定向到`index.html`。让我们通过服务工作者测试这个场景。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中打开服务工作者实验功能。如果你还没有这样做，请参阅[第1章](ch01.html "第1章。学习服务工作者基础")的第一道食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的开发生态，请参阅以下食谱：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'First, we must create an `index.html` file as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个`index.html`文件，如下所示：
- en: '[PRE25]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`style.css`的CSS文件，其中包含以下代码：
- en: '[PRE26]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`index.js`的JavaScript文件，其中包含以下代码：
- en: '[PRE27]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`index.html`文件相同的文件夹中创建一个名为`service-worker.js`的JavaScript文件
- en: ':'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ':'
- en: '[PRE28]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_06.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html`。![如何操作...](img/B05381_05_06.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now click on the **Click** link. The page will be redirected
    to the `index.html` file of the `test/` directory.![How to do it...](img/B05381_05_07.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具 (*Cmd* + *Alt* + *I* 或 *F12*) 并确保点击了 **Preserve log** 复选框。现在点击 **Click**
    链接。页面将被重定向到 `test/` 目录下的 `index.html` 文件。![如何操作...](img/B05381_05_07.jpg)
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `service-worker.js` file, we let all the fetch requests through to the
    network:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，我们让所有 fetch 请求通过到网络：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This way, the relative URL will redirect to the HTTP version of `test/`, if
    the `test/index.html` file exists.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果 `test/index.html` 文件存在，相对 URL 将重定向到 `test/` 的 HTTP 版本。
- en: Setting request headers
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置请求头
- en: If we wanted to find out the request header details sent to the network, we
    can log the request header details to the console. In this recipe, we are going
    to find out how to do this.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想找出发送到网络的请求头详细信息，我们可以将请求头详细信息记录到控制台。在这个菜谱中，我们将了解如何做到这一点。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考第 1 章的第一道菜谱 [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics")，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在 HTTPS
    上运行。要了解如何设置支持此功能的发展环境，请参考以下菜谱：*设置 GitHub pages for SSL*，*设置 Windows 的 SSL* 和 *设置
    Mac 的 SSL*。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'First, we must create an `index.html` file, as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个 `index.html` 文件，如下所示：
- en: '[PRE30]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `service-worker.js` 的 JavaScript 文件，并包含以下代码：
- en: '[PRE31]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 `index.html` 文件相同的文件夹中创建一个名为 `style.css` 的 CSS 文件，并包含以下代码：
- en: '[PRE32]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open up a browser and go to the `index.html` file. You will see one pre-fetched
    bookmark.![How to do it...](img/B05381_05_08.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html` 文件。你会看到一个预取的书签。![如何操作...](img/B05381_05_08.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*), and refresh the page.
    Check out the log details on the console.![How to do it...](img/B05381_05_09.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具 (*Cmd* + *Alt* + *I* 或 *F12*)，并刷新页面。检查控制台上的日志详情。![如何操作...](img/B05381_05_09.jpg)
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In our `service-worker.js` file, the fetch event handler logs the request details,
    as well as the header details of any request:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `service-worker.js` 文件中，fetch 事件处理程序记录了请求详情，以及任何请求的头部详情：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the `index.html` file, we are loading an image which will be intercepted
    by the controlling service worker's fetch event.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件中，我们正在加载一个将被控制服务工作者的 fetch 事件拦截的图像。
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Making a service worker act like a remote server
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使服务工作者表现得像远程服务器
- en: Service workers not only act like load balancers, as we discussed in the *Selecting
    the best content provider (load balancer)* recipe of this chapter; they can also
    act like virtual servers. This allows us to decouple the UI from the typical server-side
    business logic.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者不仅像我们在本章的 *选择最佳内容提供者（负载均衡器）* 菜谱中讨论的那样充当负载均衡器；它们还可以充当虚拟服务器。这允许我们将 UI 与典型的服务器端业务逻辑解耦。
- en: In this recipe, we are going to learn how we can move the business logic portion
    to a service worker responding to traditional RESTful fetch requests. To demonstrate
    this feature, we are going to implement a to-do app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何将业务逻辑部分移动到响应传统 RESTful fetch 请求的服务工作者。为了演示这个功能，我们将实现一个待办事项应用。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下食谱：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/)'
- en: Open up a browser and go to the `index.html` file. You will see the to-do app
    with pre-fetched to-dos.![How to do it...](img/B05381_05_10.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件。你会看到带有预取待办事项的待办事项应用。![如何做...](img/B05381_05_10.jpg)
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the endpoint has been accessed.![How
    to do it...](img/B05381_05_11.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*）并刷新页面。检查控制台上的日志详情。你会看到已经访问了端点。![如何做...](img/B05381_05_11.jpg)
- en: You can add to-do items and their priorities, and you can also remove them by
    clicking on the remove icon.![How to do it...](img/B05381_05_12.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以添加待办事项及其优先级，也可以通过点击删除图标来删除它们。![如何做...](img/B05381_05_12.jpg)
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We need to implement the endpoints to start with. In the `worker.js` file, we
    are creating an instance of the `ServiceWorkerWare` module. We then declare the
    routes for our to-do items.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现端点以开始。在`worker.js`文件中，我们创建了一个`ServiceWorkerWare`模块的实例。然后我们声明了我们的待办事项的路由。
- en: 'We determine the root using `self.location`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`self.location`确定根：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Retrieve all to-do items:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有待办事项：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Retrieve the 0-based position (`id`) for deleting a specific to-do item:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 获取要删除的特定待办事项的0基于位置（`id`）：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To add a new to-do item to the collection, use the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新的待办事项添加到集合中，请使用以下代码：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `index.html` file, we are loading an image that will be intercepted
    by the controlling service worker''s fetch event:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`文件中，我们加载了一个将被控制服务工作者的fetch事件拦截的图片：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In our `service-worker.js` file, we are importing a third-party script called
    `ServiceWorkerWare.js` and our custom script, `worker.js`, and declaring a to-do
    list with pre-filled to-do items:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`service-worker.js`文件中，我们导入了一个名为`ServiceWorkerWare.js`的第三方脚本以及我们的自定义脚本`worker.js`，并声明了一个预填充待办事项的待办事项列表：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `index.js` file is where most of our work is taking place. When the service
    worker gets hold of the control of the page, it shows the list of to-do items:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.js`文件是我们大部分工作的地方。当服务工作者获得页面控制权时，它会显示待办事项列表：'
- en: '[PRE41]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Clicking the **+** button will retrieve the to-do item and post it to the backend:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**+**按钮将检索待办事项并将其发送到后端：
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Any to-do item with no priority provided will be left blank:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 没有提供优先级的任何待办事项都将留空：
- en: '[PRE43]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, send the to-do item to the backend via a post request:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过POST请求将待办事项发送到后端：
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Making a service worker act as a dependency injector
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使服务工作者充当依赖注入器
- en: Dependency injection is a great pattern for avoiding hardcoded dependencies
    for components. In this recipe, we are going to examine how we can use a service
    worker to development and production environments by passing in two injectors
    to our components without hardcoding the dependencies.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入是一个避免为组件硬编码依赖项的绝佳模式。在这个食谱中，我们将探讨我们如何通过向组件传递两个注入器而不硬编码依赖项来使用服务工作者进行开发和生产环境。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，您需要在浏览器设置中开启服务工作者实验功能。如果您还没有这样做，请参考第1章的第一个配方，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下配方：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置您的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/)'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_05_20.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html` 文件：![如何操作...](img/B05381_05_20.jpg)
- en: Click on the **Production** link. You will see a hash added in front of the
    URL, `#production`.![How to do it...](img/B05381_05_21.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **生产** 链接。您将看到URL前添加了一个哈希，`#production`。![如何操作...](img/B05381_05_21.jpg)
- en: Now click on the buttons. You will get the JavaScript alert messages as a result.![How
    to do it...](img/B05381_05_22.jpg)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击按钮。您将得到JavaScript警告消息作为结果。![如何操作...](img/B05381_05_22.jpg)
- en: Open up DevTools (*Cmd* + *Alt* + *I* or *F12*).
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具 (*Cmd* + *Alt* + *I* 或 *F12*)。
- en: Now click on the **Development** button and then click on the buttons. Check
    out the log details on the console. You will get the console messages as a result.![How
    to do it...](img/B05381_05_23.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 **开发** 按钮，然后点击按钮。检查控制台上的日志详情。您将得到控制台消息作为结果。![如何操作...](img/B05381_05_23.jpg)
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are adding a section to the `index.html` file with two links and three buttons;
    the links are for production and development, and the buttons are for prompts:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `index.html` 文件中添加了一个包含两个链接和三个按钮的部分；链接用于生产和发展，按钮用于提示：
- en: '[PRE45]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the `index.js` file, the service worker registration handler is given the
    `development-sw.js` file that we are going to implement soon:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.js` 文件中，服务工作者注册处理程序被赋予即将实现的 `development-sw.js` 文件：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We create a bootstrap file for identifying location URL hash changes and performing
    a dependency injection when we click on development or production links.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击开发或生产链接时，我们创建一个引导文件来识别位置URL哈希变化并执行依赖注入。
- en: 'This way, by checking the hash of the URL, we can switch between development
    and production environments:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，通过检查URL的哈希，我们可以在开发和生产环境之间切换：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now we force an initial check:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们强制进行初始检查：
- en: '[PRE48]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Depending on the type of environment, register a service worker:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 根据环境类型，注册服务工作者：
- en: '[PRE49]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If there are any registered service workers, get the current inspecting injector:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何已注册的服务工作者，获取当前正在检查的注入器：
- en: '[PRE50]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s look at the `injector.js` file now. Let''s make the service worker take
    control of the client straight away:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 `injector.js` 文件。让我们让服务工作者立即控制客户端：
- en: '[PRE51]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The rest of the code is responsible for retrieving actual and abstract resources,
    and responding to the request accordingly:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码负责检索实际和抽象资源，并根据请求相应地做出响应：
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `fake-dialogs.js` file is a mock implementation that console logs the prompts;
    that is, it doesn''t show the alert message, but instead logs to the console:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`fake-dialogs.js` 文件是一个模拟实现，它将提示信息控制台输出；也就是说，它不会显示警告消息，而是记录到控制台：'
- en: '[PRE53]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `real-dialogs.js` file instead generates an alert message:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`real-dialogs.js` 文件则生成一个警告消息：'
- en: '[PRE54]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `production-sw.js` file imports the default mapping, as well as the injector.
    We also wire the event listeners for the events:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`production-sw.js` 文件导入默认映射以及注入器。我们还为以下事件连接了事件监听器：'
- en: '[PRE55]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `development-sw.js` file imports the default mapping and the injector as
    well. But the difference is it overrides `utils/dialogs` to serve the mockup instead:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`development-sw.js` 文件导入默认映射以及注入器。但不同之处在于它覆盖了 `utils/dialogs` 以提供模拟数据：'
- en: '[PRE56]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Forcing immediate control
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制立即控制
- en: Usually, a service worker will take control of a page when a navigation event
    is fired. In this recipe, we are looking at how we can take control of a page
    without waiting for any kind of navigation event.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当导航事件触发时，服务工作者会接管页面。在这个菜谱中，我们探讨的是如何在不需要等待任何类型的导航事件的情况下接管页面。
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章。学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下菜谱：*设置GitHub页面以支持SSL*，*为Windows设置SSL*，和*为Mac设置SSL*。
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/)'
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_13.jpg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`index.html`文件。![如何操作...](img/B05381_05_13.jpg)
- en: Now refresh the page. You will see that there is no registration and no controller
    change event fired.![How to do it...](img/B05381_05_14.jpg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在刷新页面。你会看到没有注册，也没有触发控制器更改事件。![如何操作...](img/B05381_05_14.jpg)
- en: Open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the image has been served from
    the cache.![How to do it...](img/B05381_05_15.jpg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具 (*Cmd* + *Alt* + *I* 或 *F12*) 并刷新页面。检查控制台上的日志详情。你会看到图片是从缓存中提供的。![如何操作...](img/B05381_05_15.jpg)
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the `index.js` file, the `fetchServiceWorkerUpdate` method updates an image
    and the current version:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，`fetchServiceWorkerUpdate`方法更新图片和当前版本：
- en: '[PRE57]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The service worker will take control of the site on loading and handles offline
    fallbacks:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者在页面加载时接管网站并处理离线回退：
- en: '[PRE58]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `skipWaiting()` method will force the waiting service worker to become
    active by triggering the `onactivate` event. Along with `Clients.claim()`, this
    will allow the service worker to take effect immediately in the clients:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`skipWaiting()`方法将通过触发`onactivate`事件强制等待中的服务工作者变为活跃状态。结合`Clients.claim()`，这将允许服务工作者立即在客户端生效：'
- en: '[PRE59]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Usually, the `onactivate` method is called once a worker has been installed
    and the page is refreshed. However, because of the fact that we call `skipWaiting()`
    at the point of `oninstall`, the `onactivate` method is called immediately:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`onactivate`方法在工作者安装并刷新页面后调用一次。然而，由于我们在`oninstall`点调用`skipWaiting()`，`onactivate`方法立即被调用：
- en: '[PRE60]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Implementing fallback responses
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现回退响应
- en: Generally, you can trust the API endpoints your application is connecting to,
    but there is always a chance that those services could go down. It is good to
    have a plan B for situations such as this. In this recipe, we are going to use
    the service worker to provide us with a fallback response in such a situation.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可以信任你的应用程序连接到的API端点，但总有可能那些服务会中断。在这种情况下有一个备用计划是好的。在这个菜谱中，我们将使用服务工作者在这种情况下提供回退响应。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章。学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下菜谱：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/)'
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_16.jpg)
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件。![如何操作...](img/B05381_05_16.jpg)
- en: Click on the **Valid Request** button. You will see a list of three brands.![How
    to do it...](img/B05381_05_17.jpg)
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**有效请求**按钮。你将看到三个品牌的列表。![如何操作...](img/B05381_05_17.jpg)
- en: Now click on the **Invalid Request** button. You will see a list of three brands.![How
    to do it...](img/B05381_05_18.jpg)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**无效请求**按钮。你将看到三个品牌的列表。![如何操作...](img/B05381_05_18.jpg)
- en: Open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the fallback response in action.![How
    to do it...](img/B05381_05_19.jpg)
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*）并刷新页面。检查控制台上的日志详情。你将看到后备响应在起作用。![如何操作...](img/B05381_05_19.jpg)
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are adding a section to the `index.html` file with two buttons, one for
    valid requests and the other for invalid requests:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`index.html`文件中添加了一个包含两个按钮的部分，一个用于有效请求，另一个用于无效请求：
- en: '[PRE61]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the `index.js` file, the `enableRequestLinks` method wires up the event
    handlers for the buttons. Both handlers will fire a `fetchApiRequest` method with
    a link as a parameter:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，`enableRequestLinks`方法将按钮的事件处理程序连接起来。这两个处理程序都会以链接作为参数触发`fetchApiRequest`方法：
- en: '[PRE62]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We have a mock API response prepared for this recipe at the following location:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个菜谱中为此准备了一个模拟API响应，位置如下：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json)'
- en: 'It''s a simple JSON object with few brand names:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的JSON对象，包含少量品牌名称：
- en: '[PRE63]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `fetchApiRequest` method calls fetch to get a promise that will return
    the result in turn. We will use the response to build the list we need:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchApiRequest`方法调用fetch以获取一个返回结果的承诺。我们将使用响应来构建我们需要的列表：'
- en: '[PRE64]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The service worker is where we implement the fallback response if the API is
    not available. But first, we need tell the service worker to take control of the
    page immediately:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者是我们实现API不可用时的后备响应的地方。但首先，我们需要告诉服务工作者立即接管页面：
- en: '[PRE65]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In the fetch handler, we are checking for the response to see whether it is
    successful by checking `res.ok`. Otherwise, we will construct a response on the
    fly as the fallback:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在fetch处理程序中，我们检查响应以确定它是否成功，通过检查`res.ok`。否则，我们将动态构建一个响应作为后备：
- en: '[PRE66]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Deferring offline requests
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟离线请求
- en: Applications such as Gmail can enqueue requests in a buffer while the network
    is not available. When the connection is restored, it will perform the requests
    in order to complete the operation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如Gmail之类的应用程序可以在网络不可用时在缓冲区中排队请求。当连接恢复时，它将按顺序执行请求以完成操作。
- en: In this recipe, we are building an app, which can defer to-do items while offline.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们正在构建一个可以在离线时延迟待办事项的应用程序。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置开发环境以支持此功能，请参考以下食谱：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10)'
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_24.jpg)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件。![如何操作...](img/B05381_05_24.jpg)
- en: Add and delete to-do items, then go offline as instructed. Once you reconnect,
    the to-do items will automatically synchronize.![How to do it...](img/B05381_05_25.jpg)
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加和删除待办事项，然后按照指示离线。一旦重新连接，待办事项将自动同步。![如何操作...](img/B05381_05_25.jpg)
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are adding a section to the `index.html` file with inputs and a button:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在向`index.html`文件添加一个包含输入和按钮的部分：
- en: '[PRE67]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the `service-worker.js` file, we bring in two third-party libraries, `ServiceWorkerWare.js`
    and `localforage.js`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在`service-worker.js`文件中，我们引入了两个第三方库，`ServiceWorkerWare.js`和`localforage.js`：
- en: '[PRE68]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Determine the root for the routes:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 确定路由的根：
- en: '[PRE69]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We are using Mozilla''s `ServiceWorkerWare` library to build quick routes for
    the virtual server:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Mozilla的`ServiceWorkerWare`库为虚拟服务器构建快速路由：
- en: '[PRE70]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In order to mock responses, we enqueue the original request:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟响应，我们将原始请求入队：
- en: '[PRE71]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Logging API analytics* recipe of [Chapter 6](ch06.html "Chapter 6. Working
    with Advanced Libraries"), *Working with Advanced Libraries*
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章. 使用高级库")的*日志API分析*食谱，*使用高级库*'
