- en: Chapter 1. Patterns and Platform Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。模式和平台工具
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Defining an app namespace
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义应用程序命名空间
- en: CommonJS in practice
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实践中的CommonJS
- en: Using platform indicators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用平台指示器
- en: Global logging using Ti.App.Listener
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ti.App.Listener进行全局日志记录
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For many, building a Titanium app will be their first experience with a large,
    complete JavaScript project. Whether you are designing a small expense tracking
    system or a complete CRM tool, implementing proper design patterns in Titanium
    will improve the performance and maintainability of your app.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多人来说，构建钛金属应用程序将是他们第一次接触大型、完整的JavaScript项目。无论你是设计一个小型费用跟踪系统还是完整的CRM工具，在钛金属中实施适当的设计模式都将提高你应用程序的性能和可维护性。
- en: The cross-platform nature and underlying architecture of Titanium influences
    how many common design patterns can be implemented. In this chapter, we will demonstrate
    how to apply patterns to increase speed of development while implementing best
    practices for multiple device support.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属的跨平台特性和底层架构影响了众多常见设计模式的应用。在本章中，我们将展示如何应用这些模式以加快开发速度，并在支持多设备时实施最佳实践。
- en: Introducing Titanium
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍钛金属
- en: Appcelerator Titanium Mobile is a platform for building cross-platform native
    mobile applications using modern web technologies, such as JavaScript, CSS, and
    HTML. Titanium Mobile is an open source project developed by Appcelerator Inc
    and licensed under the OSI-approved Apache Public License (Version 2).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Appcelerator钛金属移动平台是一个使用现代网络技术（如JavaScript、CSS和HTML）构建跨平台原生移动应用程序的平台。钛金属移动平台是由Appcelerator
    Inc开发的开源项目，并许可在OSI批准的Apache公共许可证（版本2）下。
- en: The Titanium Mobile project is one of the most active on Github with a large
    number of commits each day. The Github repository is the focal point for many
    in the community including module developers, app developers needing night builds,
    and individual contributors to the Titanium project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属移动项目是GitHub上最活跃的项目之一，每天有大量的提交。GitHub仓库是社区中许多人的焦点，包括模块开发者、需要夜间构建的应用程序开发者以及钛金属项目的个人贡献者。
- en: The Titanium ecosystem is one of the largest in the industry with a community
    of more than 450,000 worldwide developers running apps on 10 percent of the world's
    devices. Appcelerator boasts one of the largest mobile marketplaces providing
    third-party components for Titanium Mobile platform.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属生态系统是行业内最大的之一，拥有超过45万全球开发者，他们的应用程序运行在世界10%的设备上。Appcelerator拥有最大的移动市场之一，为钛金属移动平台提供第三方组件。
- en: Architecture of Titanium
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钛金属架构
- en: Titanium is a module-based mobile development platform consisting of JavaScript
    and native platform code (Java, Objective-C, and C++). The architectural goal
    of Titanium is to provide a cross-platform JavaScript runtime and API for mobile
    development; this differs from other frameworks' approaches of building "native-wrapped"
    web applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属是一个基于模块的移动开发平台，由JavaScript和本地平台代码（Java、Objective-C和C++）组成。钛金属的架构目标是提供一个跨平台的JavaScript运行时和API，用于移动开发；这与其他框架构建“原生包装”网络应用程序的方法不同。
- en: Titanium uses a JavaScript interpreter to create a bridge between your app's
    JavaScript code and the underlying native platform. This approach allows Titanium
    to expose a large number of APIs, and native UI widgets without sacrificing performance.
    Titanium's UI controls are truly native and not visually emulated through CSS.
    Thus, when you create a `Ti.UI.Switch`, it is actually using the native UISwitch
    control on iOS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属使用JavaScript解释器在您的应用程序JavaScript代码和底层本地平台之间建立桥梁。这种方法允许钛金属公开大量API和本地UI小部件，而不会牺牲性能。钛金属的UI控件真正是原生的，而不是通过CSS进行视觉模拟。因此，当您创建一个`Ti.UI.Switch`时，它实际上是在iOS上使用本地的UISwitch控件。
- en: 'Each Titanium application is organized into layered architecture consisting
    of the following major components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个钛金属应用程序都组织成分层架构，包括以下主要组件：
- en: '**Your JavaScript code**: At compile time, this will be encoded and inserted
    into Java or Objective-C files'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的JavaScript代码**：在编译时，这将编码并插入到Java或Objective-C文件中'
- en: '**Titanium''s JavaScript interpreter**: On Android V8 or JavaScriptCore for
    iOS'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**钛金属的JavaScript解释器**：在Android上为V8或iOS上的JavaScriptCore'
- en: '**The Titanium API**: This is specific for a targeted platform created in Java,
    Objective-C, or C++'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**钛金属API**：这是为在Java、Objective-C或C++中创建的特定平台创建的'
- en: '**Native Custom Modules**: A large variety of open source and commercial modules
    are available![Architecture of Titanium](img/5343OT_01_07.jpg)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生自定义模块**：有大量开源和商业模块可供选择![Titanium 架构](img/5343OT_01_07.jpg)'
- en: At runtime, the Titanium SDK embedded within your app creates a native code
    JavaScript execution context. This execution content is then used to evaluate
    your app's JavaScript code. As your JavaScript is executed, it will create proxy
    objects to access native APIs such as buttons and views. These proxies are special
    objects that exist both in the JavaScript and native contexts acting as a bridge
    between the two environments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，嵌入您应用程序中的 Titanium SDK 创建了一个原生代码 JavaScript 执行上下文。然后，此执行上下文用于评估您的应用程序 JavaScript
    代码。随着 JavaScript 的执行，它将创建代理对象以访问原生 API，如按钮和视图。这些代理是存在于 JavaScript 和原生环境中的特殊对象，充当两个环境之间的桥梁。
- en: 'For example, if we have a `Ti.UI.View` object and we update the `backgroundColor`
    to `blue`, the property is changed in JavaScript and then the proxy then updates
    the correct property in the underlying native layer as shown in the following
    diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个 `Ti.UI.View` 对象，并将 `backgroundColor` 更改为 `blue`，该属性在 JavaScript 中发生变化，然后代理更新了底层原生层中的正确属性，如下所示图所示：
- en: '![Architecture of Titanium](img/5343OT_01_08.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Titanium 架构](img/5343OT_01_08.jpg)'
- en: Building a Cross-platform
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建跨平台应用
- en: Titanium provides a high-level cross-platform API, however it is not a write
    once, run anywhere framework. When building cross-platform apps, it is recommended
    to adopt a "write once, adapt everywhere" philosophy. With Titanium you can add
    platform-specific code to handle each platform's different UI requirements, while
    keeping your business logic 100 percent cross-platform compatible.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 提供了一个高级跨平台 API，但它不是一个“一次编写，到处运行”的框架。在构建跨平台应用程序时，建议采用“一次编写，适应所有地方”的哲学。使用
    Titanium，您可以添加特定于平台的代码来处理每个平台的不同的 UI 要求，同时保持您的业务逻辑 100% 跨平台兼容。
- en: 'Building best of breed cross-platform applications, Titanium provides tools
    to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 构建最佳跨平台应用程序，Titanium 提供了以下工具：
- en: Identify the platform and model at runtime
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时识别平台和型号
- en: Ability to handle platform-specific resources at build time
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在构建时处理特定于平台和设备的资源
- en: Apply platform and device-specific styling
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用平台和设备特定的样式
- en: In addition to platform tooling, the Titanium API is designed to assist with
    cross-platform development. Each major component such as `Maps`, `Contacts`, and
    `FileSystem` are separated into its own component namespaces under the top-level
    namespace called `Ti` or `Titanium`. These component namespaces then have their
    own child namespaces to segment platform-specific behavior.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了平台工具之外，Titanium API 还旨在协助跨平台开发。每个主要组件，如 `Maps`、`Contacts` 和 `FileSystem`，都被分离到顶级命名空间
    `Ti` 或 `Titanium` 下的单独组件命名空间中。这些组件命名空间然后有自己的子命名空间来分割特定于平台的行为。
- en: An example of this segmentation is the `Ti.UI namespace`, which contains all
    UI components. This namespace contains common APIs such as `Ti.UI.View` and `Ti.UI.TableView`.
    Additionally, the `Ti.UI` namespace has platform-specific child namespaces such
    as `Ti.UI.iPad` containing controls such as `Ti.UI.iPad.Popover`. The same design
    applies to non-visual APIs such as `Ti.Android`, a namespace which contains Android-specific
    behavior.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分段的例子是 `Ti.UI 命名空间`，其中包含所有 UI 组件。此命名空间包含常见的 API，例如 `Ti.UI.View` 和 `Ti.UI.TableView`。此外，`Ti.UI`
    命名空间还有特定于平台的子命名空间，例如包含 `Ti.UI.iPad.Popover` 等控件的 `Ti.UI.iPad`。同样的设计也适用于非视觉 API，如
    `Ti.Android` 命名空间，它包含 Android 特定的行为。
- en: Defining an app namespace
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义应用程序命名空间
- en: Using namespaces is important in Titanium app development, as it helps organize
    your code while not polluting the global namespace. The practice of creating variables
    and methods without being associated with a namespace or other scoping condition
    is called **polluting the global namespace** . Since these functions and objects
    are scoped globally, they will not be eligible for collection until the global
    namespace loses scope during application shutdown. This can often result in memory
    leaks or other unwanted side effects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Titanium 应用程序开发中，使用命名空间非常重要，因为它有助于组织您的代码，同时不会污染全局命名空间。创建与命名空间或其他作用域条件无关的变量和方法的做法被称为**污染全局命名空间**。由于这些函数和对象的作用域是全局的，它们将不会在全局命名空间在应用程序关闭时失去作用域之前被收集。这通常会导致内存泄漏或其他不希望出现的副作用。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following example shows how to create a namespace for our app in our `app.js`
    called `my` with three subnamespaces called `ui`, `tools`, and `controllers`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何在`app.js`中为我们的应用程序创建一个名为`my`的命名空间，其中包含三个子命名空间，分别称为`ui`、`tools`和`controllers`。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we build our recipes, we will continue to add functionality to the preceding
    namespaces.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建食谱的过程中，我们将继续向先前的命名空间添加功能。
- en: CommonJS in practice
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践中的CommonJS
- en: Organizing your application code using CommonJS modules is a best practice in
    Titanium development. CommonJS is a popular specification for creating reusable
    JavaScript modules and has been adopted by several major platforms and frameworks
    such as Node.js and MongoDb.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CommonJS模块组织您的应用程序代码是Titanium开发中的最佳实践。CommonJS是创建可重用JavaScript模块的流行规范，并被Node.js和MongoDb等几个主要平台和框架所采用。
- en: CommonJS modules help solve JavaScript scope problems, placing each module within
    its own namespace and execution context. Variables and functions are locally scoped
    to the module, unless explicitly exported for use by other modules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS模块有助于解决JavaScript作用域问题，将每个模块放置在其自己的命名空间和执行上下文中。变量和函数在模块内部是局部作用域的，除非明确导出供其他模块使用。
- en: In addition to assisting with JavaScript scope concerns, CommonJS provides a
    pattern to expose a public stable interface to program against. The information-hiding
    design pattern allows module developers to update the internals of the module
    without breaking the public contract or interface. The ability to maintain a stable
    public interface in JavaScript is the key part of writing maintainable code that
    will be shared across apps and teams.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助解决JavaScript作用域问题外，CommonJS还提供了一个模式，用于公开稳定的接口以供程序使用。信息隐藏设计模式允许模块开发者更新模块的内部结构，而不会破坏公共契约或接口。在JavaScript中维护稳定的公共接口是编写可维护代码的关键部分，这些代码将在应用程序和团队之间共享。
- en: Titanium has implemented CommonJS in a similar fashion to Node.js in that you
    use the `require` method to return a JavaScript object, with properties, functions,
    and other data assigned to it, which form the public interface to the module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium以类似于Node.js的方式实现了CommonJS，即您使用`require`方法返回一个JavaScript对象，该对象具有属性、函数和其他数据分配给它，这些数据形成了模块的公共接口。
- en: The following screenshots illustrate the example app used to demonstrate the
    CommonJS high-level concepts that will be used throughout the book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了用于演示本书中将使用的CommonJS高级概念的示例应用程序。
- en: '![CommonJS in practice](img/5343OT_01_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![实践中的CommonJS](img/5343OT_01_01.jpg)'
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Adding the CommonJS modules used in this recipe is straightforward and consists
    of copying the `datahelper.js` and `dateWin.js` files into the root of our Titanium
    project as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将本食谱中使用的CommonJS模块添加到项目中很简单，包括将`datahelper.js`和`dateWin.js`文件复制到Titanium项目的根目录，如下面的截图所示：
- en: '![Getting ready](img/5343OT_01_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_01_02.jpg)'
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following recipe illustrates how to use CommonJS to create both `UI` and
    `Tools` modules. In the following example, a simple app is created, which allows
    the user to increase or decrease the date by a day.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱展示了如何使用CommonJS创建`UI`和`Tools`模块。在下面的示例中，创建了一个简单的应用程序，允许用户增加或减少日期一天。
- en: Creating the project's app.js
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目的app.js
- en: In our `app.js` we create our application namespace. These namespace variables
    will be used to reference our CommonJS modules later in the example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`app.js`中，我们创建应用程序命名空间。这些命名空间变量将在示例的后续部分用于引用我们的CommonJS模块。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册以直接将文件通过电子邮件发送给您。
- en: '`Ti.UI.Window` is then created using the `my.ui.mod` already added to our app
    namespace. The `open` method is then called on our `win` object to open our example
    app''s main window.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用已添加到我们应用程序命名空间的`my.ui.mod`创建`Ti.UI.Window`。然后在我们的`win`对象上调用`open`方法以打开示例应用程序的主窗口。
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Building the datehelpers module
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建datehelpers模块
- en: 'In the `Resources` folder of our project, we have a CommonJS module `datehelpers.js`.
    This module has the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的 `Resources` 文件夹中，有一个 CommonJS 模块 `datehelpers.js`。此模块包含以下代码：
- en: The `helpers` method is created within the `datahelpers` module. This function
    is private by default until it is exposed using the `exports` object.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helpers` 方法是在 `datahelpers` 模块中创建的。默认情况下，此函数是私有的，直到使用 `exports` 对象暴露它。'
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `createdOn` method is added to the `helpers` function. This function returns
    the `createAt` variable. This function is used to provide a timestamp value to
    demonstrate how the module can be initialized several times. Each time a new session
    is created for the module, the `createAt` variable will display the newly initialized
    timestamp.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createdOn` 方法被添加到 `helpers` 函数中。此函数返回 `createAt` 变量。此函数用于提供时间戳值，以展示模块可以初始化多次。每次为模块创建新会话时，`createAt`
    变量将显示新的初始化时间戳。'
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `addDays` method is added to the `helpers` function. This method increases
    the provided date value by the number of days provided in the `n` argument.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`addDays` 方法被添加到 `helpers` 函数中。此方法通过 `n` 参数提供的天数增加提供的日期值。'
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `module.exports` is the object returned as the result of a `require` call.
    By assigning the `helpers` function to `module.exports`, we are able to make the
    private `helpers` function publically accessible.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports` 是在 `require` 调用结果中返回的对象。通过将 `helpers` 函数赋值给 `module.exports`，我们能够使私有的
    `helpers` 函数公开访问。'
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The dateWin module
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期Win模块
- en: Also included in the `Resources` folder of our project is a CommonJS module
    `dateWin.js`. The following code section discusses the contents of this module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样包含在我们项目的 `Resources` 文件夹中还有一个 CommonJS 模块 `dateWin.js`。以下代码部分讨论了此模块的内容。
- en: Use the `require` keyword to import the `datehelpers` CommonJS module. This
    is imported in the `mod` module level variable for later usage.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `require` 关键字导入 `datehelpers` CommonJS 模块。这个模块在 `mod` 模块级别变量中被导入，以便后续使用。
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `createWindow` function returns `Ti.UI.Window` allowing the user to work
    with the recipe.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createWindow` 函数返回 `Ti.UI.Window`，允许用户与食谱一起工作。'
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next a new instance of the `dateHelper` module is created.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `dateHelper` 模块的新实例。
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The next step in building the `createWindow` function is to set the `currentDateTime`
    module property to a default of the current date/time.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `createWindow` 函数的下一步是将 `currentDateTime` 模块属性设置为当前日期/时间的默认值。
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `Ti.UI.Window` object, which will be returned by the `createWindow` function,
    is then created. This will be used to attach all of our UI elements.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createWindow` 函数将返回的 `Ti.UI.Window` 对象，然后创建。这将用于附加所有我们的 UI 元素。'
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `dateDisplayLabel` is used to show the result of the `datehelper` module
    as the user increases or decreases the date value.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dateDisplayLabel` 用于显示用户增加或减少日期值时 `datehelper` 模块的结果。'
- en: '[PRE12]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `addButton` is used later in this recipe to call the `datehelper` module
    and add days to the current module value.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`addButton` 在此食谱的后续步骤中被用来调用 `datehelper` 模块，并给当前模块值添加天数。'
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `subtractButton` is used later in this recipe to call the `datehelper` module
    and reduce the date of the current module value.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`subtractButton` 在此食谱的后续步骤中被用来调用 `datehelper` 模块，并减少当前模块值的日期。'
- en: '[PRE14]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following code in the `addButton` and `subtractButton` click handlers shows
    how the `AddDays` method is called to increment the `currentDateTime` property
    of the module.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `addButton` 和 `subtractButton` 点击处理程序中的以下代码显示了如何调用 `AddDays` 方法来增加模块的 `currentDateTime`
    属性。
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following line demonstrates how to increase the `currentDateTime` value
    by a single day:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下行演示了如何通过一天来增加 `currentDateTime` 的值：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Update the `dateDisplayLabel` with the new module value.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的模块值更新 `dateDisplayLabel`。
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following code snippet demonstrates how to reduce the `currentDateTime`
    by a day:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何通过一天来减少 `currentDateTime`：
- en: '[PRE18]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Update the `dateDisplayLabel` with the new module value.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的模块值更新 `dateDisplayLabel`。
- en: '[PRE19]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Creating a module is easy. You simply add a JavaScript file to your project
    and write your application code. By default, any variables, objects, or functions
    are private unless you have added them to the `module` or `exports` objects. The
    `module` and `exports` objects are special JavaScript objects created by Titanium
    and returned by the `require` method.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模块很简单。你只需将一个 JavaScript 文件添加到你的项目中，并编写你的应用程序代码。默认情况下，任何变量、对象或函数都是私有的，除非你将它们添加到
    `module` 或 `exports` 对象中。`module` 和 `exports` 对象是由 Titanium 创建的特殊 JavaScript 对象，并由
    `require` 方法返回。
- en: Require
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要
- en: To use a CommonJS module you must use the globally available `require` function.
    This function has a single parameter through which you provide the path to your
    JavaScript module. The following line demonstrates how to load a CommonJS module
    called `datehelpers.js` located in the root of your Titanium project.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CommonJS 模块，你必须使用全局可用的 `require` 函数。此函数有一个单一参数，通过该参数你提供 JavaScript 模块的路径。以下行演示了如何加载位于
    Titanium 项目根目录的名为 `datehelpers.js` 的 CommonJS 模块。
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When providing the `require` function with an absolute path, Titanium will start
    from the `Resources` folder of your project.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当向 `require` 函数提供绝对路径时，Titanium 将从你的项目的 `Resources` 文件夹开始。
- en: Titanium has optimized the module loading process so that when a module is first
    loaded using the `require` method, it is then cached to avoid the need to re-evaluate
    the module's JavaScript. This approach significantly improves the load performance
    for modules which share common dependencies. It is helpful to keep in mind the
    JavaScript is not re-evaluated if you have the need to manage/alter the module
    on load.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 已经优化了模块加载过程，当模块首次使用 `require` 方法加载时，它将被缓存以避免重新评估模块的 JavaScript。这种方法显著提高了具有共同依赖项的模块的加载性能。如果你需要在加载时管理/修改模块，请记住
    JavaScript 不会被重新评估。
- en: Properties
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: Adding a property to your CommonJS module is easy. You simply attach a variable
    to the `exports` object.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的 CommonJS 模块添加属性很容易。你只需将一个变量附加到 `exports` 对象上。
- en: The following snippet demonstrates how to create a basic CommonJS property with
    a default value.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何创建具有默认值的基本 CommonJS 属性。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'More complex object properties can also be created, for example, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以创建更复杂的对象属性，例如如下所示：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can also use a private variable to set the initial property's value. This
    often makes for more readable and streamlined code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用私有变量来设置初始属性的值。这通常会使代码更易读和简洁。
- en: Create a local variable reflecting your business need.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个反映你业务需求的局部变量。
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can then assign the local variable to a property attached to the `exports`
    object, for example, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将局部变量分配给附加到 `exports` 对象上的属性，例如如下所示：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember these are just properties on the `exports` JavaScript object and can
    be changed by any caller.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些只是 `exports` JavaScript 对象上的属性，可以被任何调用者更改。
- en: Functions
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: Creating public functions is easy in CommonJS, you simply add a function to
    the `exports` object. Create an `Adddays` method as part of the `exports` object.
    This function accepts a date in the `value` parameter and an integer as the `n`
    value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CommonJS 中创建公共函数很容易，你只需将一个函数添加到 `exports` 对象中。将 `Adddays` 方法作为 `exports` 对象的一部分创建。此函数接受一个日期作为
    `value` 参数和一个整数作为 `n` 值。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a new variable to avoid the provided value from mutating.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新变量以避免提供的值被修改。
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Increase the date by using the `n` value provided. This could be either a positive
    or negative value. Negative values will decrease the date value provided.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的 `n` 值增加日期。这可以是正数或负数。负数值会减少提供的日期值。
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Return the new adjusted value.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 返回调整后的新值。
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can also assign an `exports` method to a privately scoped function. This
    can be helpful in managing large or complex functions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 `exports` 方法分配给私有作用域的函数。这有助于管理大型或复杂的函数。
- en: Create a locally scoped function named `addDays`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `addDays` 的局部作用域函数。
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `addDays` function is then assigned to `exports.AddDays` exposing it to
    callers outside of the module.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 `addDays` 函数分配给 `exports.AddDays`，使其对模块外部的调用者可见。
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember these are just methods on the `exports` JavaScript object and can be
    changed by any caller.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些只是 `exports` JavaScript 对象上的方法，可以被任何调用者更改。
- en: Instance object using module.exports
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 module.exports 创建实例对象
- en: Titanium provides the ability to create a module instance object using `module.exports`.
    This allows you to create a new instance of the function or object attached to
    `module.exports`. This is helpful in describing one particular object and the
    instance methods represent actions that this particular object can take.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 提供了使用 `module.exports` 创建模块实例对象的能力。这允许你创建与 `module.exports` 相关联的函数或对象的新实例。这有助于描述一个特定的对象，实例方法代表这个特定对象可以执行的操作。
- en: This pattern encourages developers to think more modularly and to follow the
    single responsibility principle as only one object or function can be assigned
    to the `module.exports`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式鼓励开发者更加模块化地思考，并遵循单一职责原则，因为只有一个对象或函数可以被分配给 `module.exports`。
- en: 'The following code snippets demonstrate how to create and call a module using
    this pattern:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何使用此模式创建和调用模块：
- en: Using Titanium Studio, create the employee (`employee.js`) module file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Titanium Studio，创建员工（`employee.js`）模块文件。
- en: Next create the `employee` function.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `employee` 函数。
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Then assign the `employee` function to `module.exports`. This will make the
    `employee` function publicly available to call using `require`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将 `employee` 函数分配给 `module.exports`。这将使 `employee` 函数可以通过 `require` 公开调用。
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Using `require`, a reference to the module is created and assigned to the `employee`
    variable.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `require`，创建了一个模块的引用并将其分配给 `employee` 变量。
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next the `bob` and `chris` objects are created using new instances of the `employee`
    object created earlier.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用之前创建的 `employee` 对象的新实例创建了 `bob` 和 `chris` 对象。
- en: '[PRE34]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, the properties and functions on the `bob` and `chris` objects are called
    to demonstrate each object's instance information.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用 `bob` 和 `chris` 对象上的属性和函数，以演示每个对象的实例信息。
- en: '[PRE35]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: CommonJS global scope anti-pattern
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonJS 全局作用域反模式
- en: The CommonJS implementation across Android and iOS is largely the same with
    one major scoping exception. If you are using a version of the Titanium framework
    below version 3.1, Android scopes all variable access to the module itself, while
    iOS allows the module to access objects outside of the module already loaded in
    the execution context. This should be considered an anti-pattern as it breaks
    many of the encapsulation principles the CommonJS specification was designed to
    prevent.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 和 iOS 上的 CommonJS 实现基本上是相同的，只有一个主要的范围异常。如果您使用的是低于版本 3.1 的 Titanium
    框架版本，Android 将所有变量访问范围限定在模块本身，而 iOS 允许模块访问执行上下文中已加载的模块之外的对象。这应该被视为一种反模式，因为它破坏了许多
    CommonJS 规范旨在防止的封装原则。
- en: In Titanium Version 3.1, the decision has been made to deprecate global scope
    access in both iOS and Android in favor of the new `Alloy.Globals` object. You
    can read more about the `Alloy.Globals` object at [http://docs.appcelerator.com/titanium/latest/#!/api/Alloy](http://docs.appcelerator.com/titanium/latest/#!/api/Alloy).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Titanium 版本 3.1 中，已经决定弃用 iOS 和 Android 中的全局作用域访问，以支持新的 `Alloy.Globals` 对象。您可以在
    [http://docs.appcelerator.com/titanium/latest/#!/api/Alloy](http://docs.appcelerator.com/titanium/latest/#!/api/Alloy)
    中了解更多关于 `Alloy.Globals` 对象的信息。
- en: The following recipe demonstrates this common anti-pattern and highlights the
    CommonJS implementation differences in this area between iOS and Android.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱演示了这种常见的反模式，并突出了 iOS 和 Android 在此领域的 CommonJS 实现差异。
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `testScope` method is called on the `tools` module. This demonstrates how
    CommonJS module scope anti-pattern works.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tools` 模块上调用 `testScope` 方法。这演示了 CommonJS 模块作用域反模式是如何工作的。
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `tools` module containing the `testScope` method is part of this recipe''s
    code and can be found in the `scope.js` file root of our project. This module
    contains the following code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 `testScope` 方法的 `tools` 模块是本食谱代码的一部分，可以在我们项目的 `scope.js` 文件根目录中找到。此模块包含以下代码：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The scope-access anti-pattern is shown when calling the `my.tools.testScope()`
    method. In iOS, `my.tools.testScope()` returns `"Session Value in context"`, because
    it has access to `my.session.foo` from the current execution context. In Android,
    prior to Titanium SDK Version 3.1, undefined object used to be returned as the
    module did not have access to the `my.session.foo` object. In the Titanium SDK
    Version 3.1 and greater, Android now returns `"Session Value in context"` as it
    has access to the `my.session.foo` object.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `my.tools.testScope()` 方法时，会显示出范围访问的反模式。在 iOS 中，`my.tools.testScope()` 返回
    `"Session Value in context"`，因为它可以从当前执行上下文中访问 `my.session.foo`。在 Android 中，在 Titanium
    SDK 版本 3.1 之前，未定义的对象通常会被返回，因为模块没有访问 `my.session.foo` 对象的权限。在 Titanium SDK 版本 3.1
    及更高版本中，Android 现在返回 `"Session Value in context"`，因为它可以访问 `my.session.foo` 对象。
- en: Access to global scope has been deprecated on both platforms starting with Titanium
    SDK Version 3.1 and will be removed in a future version of the SDK. If you have
    previously implemented this anti-pattern, corrective action is recommended as
    the deprecation of this feature will cause breaking changes within your app.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Titanium SDK 版本 3.1 开始，在两个平台上对全局作用域的访问已经弃用，并且将在 SDK 的未来版本中删除。如果您之前实现了这种反模式，建议采取纠正措施，因为该功能的弃用将在您的应用程序中引起破坏性更改。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about the CommonJS specification, please visit the wiki on CommonJS.org
    at [http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于CommonJS规范的信息，请访问CommonJS.org上的wiki，网址为[http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)。
- en: For more details and examples on Titanium's implementation of the CommonJS specification,
    please review their guides at [http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium](http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Titanium实现CommonJS规范的具体细节和示例，请查看他们的指南，网址为[http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium](http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium)。
- en: Using platform indicators
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用平台指示器
- en: Handling different devices, platforms, and models is often the biggest challenge
    with cross-platform development. Titanium provides the `Ti.Platform` namespace
    to help you make decisions in your code on how to handle runtime execution.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 处理不同的设备、平台和模型是跨平台开发中最大的挑战之一。Titanium提供了`Ti.Platform`命名空间，以帮助您在代码中做出决策，如何处理运行时执行。
- en: In the following recipes, we will walk through how to create a `PlatformHelpers`
    CommonJS module containing convenience methods to solve many of your platform-related
    queries. The following screenshots demonstrate this recipe while running on both
    the iPhone and Android platforms.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下菜谱中，我们将逐步介绍如何创建一个包含便利方法的`PlatformHelpers` CommonJS模块，这些方法可以解决许多与平台相关的查询。以下截图展示了在iPhone和Android平台上运行此菜谱的情况。
- en: '![Using platform indicators](img/5343OT_01_03.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![使用平台指示器](img/5343OT_01_03.jpg)'
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `Ti.Platform` namespace is helpful for providing platform and device-specific
    details, but often you need a high level of detail such as when you have a tablet
    running your app and if so if it is an iPad Mini.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ti.Platform`命名空间对于提供平台和设备特定细节很有帮助，但通常您需要更高级别的细节，例如当您的应用在一个平板电脑上运行时，以及它是否是一个iPad
    Mini。'
- en: Adding recipe components to your project
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将菜谱组件添加到您的项目中
- en: 'Adding the `PlatformHelpers` module to your project is easy. Simply copy the
    `platform_helpers.js` file into your project as shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将`PlatformHelpers`模块添加到您的项目中很简单。只需将`platform_helpers.js`文件复制到您的项目中，如下截图所示：
- en: '![Adding recipe components to your project](img/5343OT_01_04.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![将菜谱组件添加到您的项目中](img/5343OT_01_04.jpg)'
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following `app.js` demonstrates the `PlatformHelpers` module described earlier
    in this chapter. This sample app presents a window with your device details. Give
    it a try on all of your Android and iOS devices.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`app.js`演示了本章前面描述的`PlatformHelpers`模块。这个示例应用展示了一个包含设备详情的窗口。请在您的所有Android和iOS设备上尝试一下。
- en: To create our same app, first we declare our app namespace and import our `PlatformHelper`
    module.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建我们的相同应用，首先我们声明我们的应用命名空间并导入我们的`PlatformHelper`模块。
- en: '[PRE39]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Next we create the window in which we will present the device information.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个窗口，我们将在此窗口中展示设备信息。
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Next we create an empty array to store our device details.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个空数组来存储我们的设备详情。
- en: '[PRE41]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: An entry is added to `deviceData` if your device is running on a simulator.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的设备正在模拟器上运行，则会将条目添加到`deviceData`。
- en: The `isSimulator` property is used to show the simulator message, only if the
    recipe is currently running on a platform simulator or emulator.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`isSimulator`属性用于显示模拟器消息，仅当菜谱当前正在平台模拟器或仿真器上运行时。'
- en: '[PRE42]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Next the platform, operating system's name, and manufacturer are added to `deviceData`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将平台、操作系统名称和制造商添加到`deviceData`。
- en: '[PRE43]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following statement adds a flag to `deviceData` indicating if the current
    device is a tablet form factor:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下语句向`deviceData`添加一个标志，指示当前设备是否为平板电脑形态：
- en: '[PRE44]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Next we add the device model and specify if it supports background tasks in
    the `deviceData` array.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在`deviceData`数组中添加设备型号，并指定它是否支持后台任务。
- en: '[PRE45]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Screen dimensions are the most commonly used properties. The following snippet
    adds the height and width of the screen to the `deviceData` array:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕尺寸是最常用的属性。以下代码片段将屏幕的高度和宽度添加到`deviceData`数组中：
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If your app is currently running on an iOS device, the following snippet adds
    the device type and specifies if it is retina enabled, to the `deviceData` array.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的应用当前正在iOS设备上运行，以下代码片段会将设备类型添加到`deviceData`数组中，并指定是否启用retina。
- en: '[PRE47]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `PlatformHelper` module provides a great deal of data. To best display this,
    we will be using a `Ti.UI.TableView` with the `deviceData` array that we have
    built in an earlier code snippet.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlatformHelper`模块提供了大量数据。为了最佳显示，我们将使用`Ti.UI.TableView`和我们在早期代码片段中构建的`deviceData`数组。'
- en: '[PRE48]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The device platform lookups will frequently be accessed across your app. To
    avoid performance issues by repeatedly crossing the JavaScript Bridge, we import
    the values we will use and assign them to properties in our CommonJS `PlatformHelpers`
    module.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 设备平台查找将频繁地在您的应用中访问。为了避免通过重复跨越JavaScript桥接导致的性能问题，我们将导入我们将要使用的值并将它们分配给我们的CommonJS
    `PlatformHelpers`模块中的属性。
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It is often helpful to have a Boolean indicator for the platform with which
    you are working. The following snippet shows how to create `isAndroid` and `isIOS`
    properties to accomplish this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您正在工作的平台，有一个布尔指示器通常很有帮助。以下代码片段展示了如何创建`isAndroid`和`isIOS`属性来完成此操作：
- en: '[PRE50]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Simulator check
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟器检查
- en: Depending on your platform, several features may not work in that platform's
    simulator or emulator. By using the `isSimulator` property, detect which environment
    you are in and branch your code accordingly.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的平台，某些功能可能在该平台的模拟器或仿真器中无法工作。通过使用`isSimulator`属性，检测您所在的环境并根据情况分支您的代码。
- en: '[PRE51]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Background capabilities
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后台功能
- en: Mobile apps are often required to perform tasks in the background. This recipe
    demonstrates how to perform a version-based capability check to determine if the
    device your application is running on supports backgrounding/multitasking.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用通常需要在后台执行任务。此配方演示了如何执行基于版本的特性检查，以确定您的应用正在运行的设备是否支持后台处理/多任务处理。
- en: '[PRE52]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now perform the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下步骤：
- en: First check if the user is running on Android. If so, return `true` as most
    Android ROMs support background processing by default.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，检查用户是否正在Android上运行。如果是，则返回`true`，因为大多数Android ROM默认支持后台处理。
- en: '[PRE53]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Next confirm the recipe is running on an iOS device.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确认该配方是否在iOS设备上运行。
- en: '[PRE54]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The version is checked to ensure that the device is running iOS 4 or greater.
    This confirms the operating system supports background processing.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已检查版本以确保设备正在运行 iOS 4 或更高版本。这确认了操作系统支持后台处理。
- en: '[PRE55]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Finally the recipe confirms the device version is greater than the iPhone 3GS.
    This confirms the hardware supports background processing.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，该配方确认设备版本高于iPhone 3GS。这确认了硬件支持后台处理。
- en: '[PRE56]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on the platform, this feature may be turned off by the user. A secondary
    capacity check is also recommended.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据平台，此功能可能被用户关闭。还建议进行二级容量检查。
- en: Detecting tablets
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检测平板电脑
- en: 'Universal app development is a common requirement on both Android and iOS.
    The following helper provides a Boolean indicator if your app is running on a
    tablet form factor:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android和iOS上，通用应用开发是一个常见的需求。以下助手提供了一个布尔指示器，如果您的应用正在平板电脑形态上运行，则返回`true`：
- en: '[PRE57]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Check if the device is either an iPad or an Android device with at least one
    dimension of 700 pixels or greater.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 检查设备是否为iPad或至少有一个维度大于700像素的Android设备。
- en: '[PRE58]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For Android, this checks if there is a height or width greater than 700 pixels.
    You may wish to change this based on your targeted devices. For example, if you
    are targeting some of the larger screen Android phones, you would need to update
    the default 700 pixels/points to reflect them having a large screen yet still
    being considered a phone form factor.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android，此检查是否有高度或宽度大于700像素。您可能希望根据您的目标设备更改此值。例如，如果您正在针对一些大屏幕的Android手机，则需要将默认的700像素/点更新为反映它们具有大屏幕但仍被视为手机形态。
- en: A 4-inch iPhone
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一款4英寸的iPhone
- en: With the introduction of the iPhone 5, we need to be aware of two different
    iPhone screen sizes. The following snippet shows how to create a property indicating
    if your app is running on an iPhone with this new screen size.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iPhone 5的推出，我们需要注意两种不同的iPhone屏幕尺寸。以下代码片段展示了如何创建一个属性来指示您的应用是否运行在具有这种新屏幕尺寸的iPhone上。
- en: '[PRE59]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: First verify the recipe is running on an iPhone device.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，验证该配方是否在iPhone设备上运行。
- en: '[PRE60]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Next check the size to see if there is any dimension greater than 480 points.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，检查尺寸以查看是否有任何维度大于480点。
- en: '[PRE61]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note, the preceding `newIPhoneSize` method will only return `true`, if
    the app has been completed to support a 4-inch display. Otherwise, it will return
    `false` as your app is running in the letterbox mode.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的 `newIPhoneSize` 方法只有在应用已完全支持 4 英寸显示屏时才会返回 `true`。否则，它将返回 `false`，因为您的应用正在以信封模式运行。
- en: iPad
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: iPad
- en: 'Titanium allows you to create universal apps on iOS. Using the following property,
    you can branch your code to show different functionalities to your iPad users:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 允许您在iOS上创建通用应用程序。使用以下属性，您可以为iPad用户分支代码以显示不同的功能：
- en: '[PRE62]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: iPad Mini
  id: totrans-235
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: iPad Mini
- en: 'The iPad Mini was designed with the same resolution as the first and second
    generation iPads. Although designed to run iPad apps without modification, the
    smaller screen size often requires UI adjustments for smaller touch targets. The
    following code demonstrates how to determine if your app is running on an iPad
    Mini:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: iPad Mini的设计分辨率与第一代和第二代iPad相同。虽然设计为无需修改即可运行iPad应用，但较小的屏幕尺寸通常需要调整UI以适应较小的触摸目标。以下代码演示了如何确定您的应用是否在iPad
    Mini上运行：
- en: '[PRE63]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now perform the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: First check if the recipe is running on a nonretina iPad.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先检查配方是否在非视网膜iPad上运行。
- en: '[PRE64]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Next verify if the nonretina iPad is not an iPad 1 or iPad 2\. If not either
    of these modules, assume the recipe is running on an iPad Mini.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来验证非视网膜iPad不是iPad 1或iPad 2。如果不是这些模块中的任何一个，假设配方正在iPad Mini上运行。
- en: '[PRE65]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apple currently does not provide a platform indicator for the iPad Mini. This
    check uses model numbers and might not be future proof.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果目前不提供iPad Mini的平台指示器。此检查使用型号编号，可能不是未来的解决方案。
- en: Global logging using Ti.App.Listener
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ti.App.Listener 进行全局日志记录
- en: There is built-in ability of Titanium to fire and listen to application wide
    events. This powerful feature can be a perfect fit for creating loosely-coupled
    components. This pattern can provide a decoupled logging approach, which is helpful
    for specific situations such as analytics, logging, and process monitoring modules.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium具有内置的触发和监听应用程序级事件的能力。这个强大的功能非常适合创建松散耦合的组件。这种模式可以提供解耦的日志记录方法，这对于特定情况（如分析、日志记录和处理监控模块）非常有帮助。
- en: 'This recipe details how `Ti.App.Listener` can be used to create a decoupled
    re-useable application component. The following screenshot demonstrates this recipe
    running on both the iPhone and Android platforms:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方详细说明了如何使用 `Ti.App.Listener` 创建一个解耦的可重用应用程序组件。以下截图展示了此配方在 iPhone 和 Android
    平台上运行的情况：
- en: '![Global logging using Ti.App.Listener](img/5343OT_01_05.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ti.App.Listener 进行全局日志记录](img/5343OT_01_05.jpg)'
- en: Getting ready
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Adding the CommonJS modules used in this recipe is straightforward and consists
    of copying the `logger.js` and `mainWin.js` files into the root of our Titanium
    project as shown in the following screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 将此配方中使用的 CommonJS 模块添加到项目中非常简单，只需将 `logger.js` 和 `mainWin.js` 文件复制到钛项目根目录，如下截图所示：
- en: '![Getting ready](img/5343OT_01_06.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_01_06.jpg)'
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Application-level events allow you to implement a publish/subscribe pattern
    globally in your app, even across execution contexts. By simply adding a listener
    such as the following, you can receive messages fired from anywhere in your app:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序级别的事件允许您在应用程序中全局实现发布/订阅模式，即使在执行上下文中也是如此。通过简单地添加如下监听器，您可以从应用程序的任何地方接收消息：
- en: '[PRE66]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Firing a custom event in Titanium is easy. You simply use the `Ti.App.fireEvent`
    and provide the event name and an optional parameter payload. This example shows
    how to call the `app:myEvent` listener we defined earlier.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在Titanium中触发自定义事件非常简单。您只需使用 `Ti.App.fireEvent` 并提供事件名称和可选的参数负载。此示例展示了如何调用我们之前定义的
    `app:myEvent` 监听器。
- en: '[PRE67]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Tip
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is recommended that you name your events using a descriptive convention.
    For example, `app:myEvent` describes that this is an application event and is
    defined in my `app.js` file.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用描述性约定命名事件。例如，`app:myEvent` 表示这是一个应用程序事件，并在我的 `app.js` 文件中定义。
- en: Designing global logging using events
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用事件设计全局日志记录
- en: The following recipes show how to use application-level custom events to implement
    logging across the different contexts of our app.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配方展示了如何使用应用程序级别的自定义事件在应用程序的不同上下文中实现日志记录。
- en: Defining our app.js
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义我们的 app.js
- en: In the `app.js`, we define our application namespace and import the logger and
    UI CommonJS modules.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.js` 中，我们定义了应用程序命名空间并导入日志和UI CommonJS模块。
- en: '[PRE68]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Next in our `app.js`, the `setup` method is called on the `logger` module. This
    ensures our database logging tables are created.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `app.js` 中，接下来调用 `logger` 模块的 `setup` 方法。这确保我们的数据库日志表被创建。
- en: '[PRE69]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The application-level listener is then defined in our `app.js`. This listener
    will wait for the `app:log` event to be fired and then call the logger's `add`
    method with the payload provided.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `app.js` 中定义应用程序级监听器。此监听器将等待触发 `app:log` 事件，然后使用提供的有效负载调用日志器的 `add` 方法。
- en: '[PRE70]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The logging module
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 日志模块
- en: The following code snippet demonstrates how to create the basic CommonJS module,
    `logger.js`, used in our global listener recipe. This module has two methods;
    `setup`, which creates our database objects, and `add`, which the listener calls
    to log our messages.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何创建基本 CommonJS 模块 `logger.js`，该模块用于我们的全局监听器配方。此模块有两个方法；`setup`，用于创建我们的数据库对象，以及
    `add`，监听器调用它来记录我们的消息。
- en: Create a constant with the logging database name.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有日志数据库名称的常量。
- en: '[PRE71]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Create the `setup` module-level method. This is used to create the `LOG_HISTORY`
    table, which will later be used to record all log statements.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `setup` 模块级方法。此方法用于创建 `LOG_HISTORY` 表，该表将用于记录所有日志语句。
- en: '[PRE72]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Create the `add` module-level method. This method is used to record the information
    to be added to the log table.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `add` 模块级方法。此方法用于记录要添加到日志表中的信息。
- en: '[PRE73]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Bringing it all together
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: The following sections show the contents of our `mainWin.js` module. This module
    returns a window with a single button that when pressed fires our logging event.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分展示了我们的 `mainWin.js` 模块的内容。此模块返回一个包含单个按钮的窗口，当按钮被按下时，会触发我们的日志事件。
- en: Window and module variable setup
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 窗口和模块变量设置
- en: The `fetchWindow` function returns a simple window demonstrating how to fire
    an application-level event. To demonstrate, a new message is sent each time, and
    we add a module level variable named `_press_Count`, which increments with each
    click.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchWindow` 函数返回一个简单的窗口，展示了如何触发应用程序级事件。为了演示，每次都会发送一条新消息，并且我们添加一个名为 `_press_Count`
    的模块级变量，每次点击都会增加。'
- en: Create the module-level variable `_press_Count` to record the number of times
    `addLogButton` has been pressed.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模块级变量 `_press_Count` 以记录 `addLogButton` 被按下的次数。
- en: '[PRE74]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `fetchWindow` method returns a `Ti.UI.Window` containing the UI elements
    for this recipe.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchWindow` 方法返回一个包含此配方 UI 元素的 `Ti.UI.Window`。'
- en: '[PRE75]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: A `Ti.UI.Window` is created for all of our UI elements to be attached.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有 UI 元素创建一个 `Ti.UI.Window`。
- en: '[PRE76]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The `addLogButton Ti.UI.Button` is created. This button will be used to trigger
    the `Ti.App.fireEvent` used to demonstrate global listeners in this recipe.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `addLogButton Ti.UI.Button`。此按钮将用于触发用于在此配方中演示全局监听器的 `Ti.App.fireEvent`。
- en: '[PRE77]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Firing the application-level event
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 触发应用程序级事件
- en: On clicking on the `addLogButton` button, the `_press_Count` variable is increased
    by one and a logging object is created. The following code demonstrates how the
    `Ti.App.fireEvent` method is called for the `app:log` event and a JavaScript object
    containing our logging details is provided. The listener we defined in our `app.js`
    will then receive this message and log our results.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击 `addLogButton` 按钮时，`_press_Count` 变量增加一，并创建一个日志对象。以下代码演示了如何调用 `Ti.App.fireEvent`
    方法来触发 `app:log` 事件，并提供包含我们的日志详细信息的 JavaScript 对象。然后，我们在 `app.js` 中定义的监听器将接收此消息并记录我们的结果。
- en: '[PRE78]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The first action taken after the user taps the `addLogButton` is to increase
    the `_pressCount` by one.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 用户点击 `addLogButton` 后采取的第一个动作是将 `_pressCount` 增加。
- en: '[PRE79]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Next the `logObject` containing information to be submitted for logging is created.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建包含要提交的日志信息的 `logObject`。
- en: '[PRE80]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Finally, the `Ti.App.fireEvent` is called for the `app:log` event. The `logObject`
    is also provided as a parameter when calling this application global event.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用 `Ti.App.fireEvent` 以触发 `app:log` 事件。在调用此应用程序全局事件时，还提供了 `logObject` 作为参数。
- en: '[PRE81]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Note
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: App logging is just one of the many examples of how you can use application-level
    events to decouple your app's components. This pattern will be used several times
    over the course of this book when decoupled component interaction is required.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序日志记录只是众多示例之一，展示了您如何使用应用程序级事件来解耦应用程序的组件。在整个书籍的阅读过程中，当需要解耦组件交互时，此模式将被多次使用。
- en: There's more...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Since application-level listeners are globally scoped, you need to take caution
    where and when they are defined. A general rule of thumb is to define application-level
    listeners in an area of your app that is always available and never reloaded,
    such as your `app.js`, CommonJS file which is only loaded once, or another bootstrapping
    method.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序级别的监听器是全局作用域的，你在定义它们的位置和时间需要格外小心。一个一般性的规则是，在应用程序始终可用且永远不会重新加载的区域定义应用程序级别的监听器，例如你的`app.js`文件，这是一个只加载一次的CommonJS文件，或者另一种引导方法。
- en: 'If you must define them within a window or other module that is loaded repeatedly,
    make sure you remove the listener when the object is no longer needed. To remove
    the event listener, you need to call the `Ti.App.removeEventListener` method with
    the same arguments used on creation. The following snippet shows how to remove
    the `app:myEvent` listener created earlier:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你必须在窗口或其他重复加载的模块内定义它们，确保当对象不再需要时移除监听器。要移除事件监听器，你需要使用与创建时相同的参数调用`Ti.App.removeEventListener`方法。以下代码片段展示了如何移除之前创建的`app:myEvent`监听器：
- en: '[PRE82]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Tip
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you do not remove a listener, all associated JavaScript objects will not
    be eligible for garbage collection, often resulting in a memory leak.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有移除监听器，所有相关的JavaScript对象将不符合垃圾回收的条件，这通常会导致内存泄漏。
