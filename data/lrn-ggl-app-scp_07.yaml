- en: Chapter 7. Creating Interactive Webpages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章. 创建交互式网页
- en: In the previous chapter, you learned to create an RSS/Atom feed reader, stock
    quote ticker, language translator, and to create a document reviewing and commenting
    application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何创建 RSS/Atom 源阅读器、股票报价器、语言翻译器，以及创建文档审查和评论应用程序。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: To create web applications that return Sheet data as HTML, JSON, and PDF
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建返回电子表格数据作为 HTML、JSON 和 PDF 的网络应用程序
- en: To send HTTP/HTTPS request with the query string
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送带有查询字符串的 HTTP/HTTPS 请求
- en: To create an RSS feed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个 RSS 源
- en: To create a file upload application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个文件上传应用程序
- en: To create a timesheet application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个时间表应用程序
- en: Creating a web app to render Sheet data as HTML
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个将电子表格数据渲染为 HTML 的网络应用程序
- en: 'We will create an application to return Sheet data as HTML in the browser.
    Create a Sheet, rename it as `Data`, and populate it with some test data as shown
    in the next screenshot. You can populate the Sheet with any random data with the
    three columns named `First Name`, `Last Name`, and `Full Name`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，在浏览器中返回电子表格数据作为 HTML。创建一个电子表格，将其重命名为 `Data`，并填充一些测试数据，如下一个截图所示。你可以使用具有名为
    `First Name`、`Last Name` 和 `Full Name` 的三列的任何随机数据填充电子表格：
- en: '![Creating a web app to render Sheet data as HTML](img/B05010_07_03.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个将电子表格数据渲染为 HTML 的网络应用程序](img/B05010_07_03.jpg)'
- en: 'In the `Code.gs` file, create the `doGet` function as shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Code.gs` 文件中创建如下所示的 `doGet` 函数：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `HtmlService` function can be used to create any HTML content. The preceding
    `doGet` function returns HTML content created by `HtmlService` to the browser.
    Publish the script as explained earlier, and enter the URL in the browser's address
    bar. You can see the result as shown in the following screenshot. The data shown
    may vary as per your input data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`HtmlService` 函数可以用来创建任何 HTML 内容。前面的 `doGet` 函数将 `HtmlService` 创建的 HTML 内容返回给浏览器。按照前面解释的方法发布脚本，并在浏览器地址栏中输入
    URL。你可以看到如下所示的截图中的结果。显示的数据可能因你的输入数据而异。'
- en: '![Creating a web app to render Sheet data as HTML](img/B05010_07_04.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个将电子表格数据渲染为 HTML 的网络应用程序](img/B05010_07_04.jpg)'
- en: Creating a web app to return JSON
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个返回 JSON 的网络应用程序
- en: 'Now, we will see how to return JSON string instead of HTML content. In the
    `Data` Sheet, add another column named `DOB` as shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何返回 JSON 字符串而不是 HTML 内容。在 `Data` 电子表格中添加另一个名为 `DOB` 的列，如下所示：
- en: '![Creating a web app to return JSON](img/B05010_07_05.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个返回 JSON 的网络应用程序](img/B05010_07_05.jpg)'
- en: 'Create the `doGet` function as shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建如下所示的 `doGet` 函数：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output in the browser will be JSON string as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的输出将是以下 JSON 字符串：
- en: '![Creating a web app to return JSON](img/B05010_07_06.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个返回 JSON 的网络应用程序](img/B05010_07_06.jpg)'
- en: Converting Sheet data as a PDF file
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将电子表格数据转换为 PDF 文件
- en: 'You can create an application to convert Sheet data into a PDF file and store
    it in Drive, and return the PDF file''s URL to the user:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个应用程序，将电子表格数据转换为 PDF 文件并存储在 Drive 中，并将 PDF 文件的 URL 返回给用户：
- en: 'In the `Code.gs` file, create the `doGet` function as listed here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Code.gs` 文件中创建如下所示的 `doGet` 函数：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new HTML file, `Template.html`, and enter the following HTML code.
    In this code, the `data` array is a 2-dimensional array already assigned to the
    `template` object in the `doGet` function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 文件，`Template.html`，并输入以下 HTML 代码。在此代码中，`data` 数组是一个二维数组，已经分配给 `doGet`
    函数中的 `template` 对象：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the mentioned code, the template markers `<?` and `?>` enclose the script
    code, which is identical to the `script` tag in the normal HTML code. The enclosed
    code executes, but does not return anything. The markers `<?=` and `?>` return
    the result of the enclosed code. For example, `<?= data[i][j] ?>` returns the
    *i*th row *j*th column value of a 2-dimensional `data` array.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在提到的代码中，模板标记 `<?` 和 `?>` 包围脚本代码，这与正常 HTML 代码中的 `script` 标签相同。包围的代码会执行，但不返回任何内容。标记
    `<?=` 和 `?>` 返回包围代码的结果。例如，`<?= data[i][j] ?>` 返回二维 `data` 数组的第 *i* 行第 *j* 列的值。
- en: 'For your understanding the server script without template markup in the previous
    code is reproduced here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解前一个代码中没有模板标记的服务器脚本，这里将其重新呈现：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Publish and enter the published URL in a browser''s address bar. The result
    will be as shown in the following screenshot. Click on the hyperlink to open the
    PDF file in Drive:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 发布并将在浏览器地址栏中输入发布的 URL。结果将如下所示。点击超链接在 Drive 中打开 PDF 文件：
- en: '![Converting Sheet data as a PDF file](img/B05010_07_07.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![将电子表格数据转换为 PDF 文件](img/B05010_07_07.jpg)'
- en: 'A sample output of the created PDF as per the Sheet data is shown in the following
    screenshot. The output may vary as per your input data:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据表格数据创建的PDF的示例输出如下所示截图。输出可能因您的输入数据而异：
- en: '![Converting Sheet data as a PDF file](img/B05010_07_08.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![将表格数据转换为PDF文件](img/B05010_07_08.jpg)'
- en: Sending an HTTP/HTTPS request with query string
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有查询字符串的HTTP/HTTPS请求发送
- en: You can send an HTTP/HTTPS request along with the query string. To do this,
    append the published URL with your query string.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以发送一个带有查询字符串的HTTP/HTTPS请求。为此，将发布的URL与您的查询字符串附加在一起。
- en: 'For example: `https://script.google.com/macros/s/AKfycbxa4ErKHiX_0gQ0JUU-Q1qMhvRrOsrx3HXuVZp7pzX8UVxMu4w/exec?`**fname=John**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`https://script.google.com/macros/s/AKfycbxa4ErKHiX_0gQ0JUU-Q1qMhvRrOsrx3HXuVZp7pzX8UVxMu4w/exec?`**fname=John**
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A sample of the logged HTTP/HTTPS request''s `event` object is shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 已记录的HTTP/HTTPS请求的`event`对象的示例如下所示：
- en: '![Sending an HTTP/HTTPS request with query string](img/B05010_07_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![带有查询字符串的HTTP/HTTPS请求发送](img/B05010_07_09.jpg)'
- en: 'The `doGet` function listed in the following code snippet shows how you can
    use the `event` object to get the required parameters for further processing:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段中列出的`doGet`函数显示了您如何使用`event`对象获取进一步处理所需的参数：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The mentioned `doGet` function gets the `fname` parameter from the query string
    and returns the calculated `age` value along with `dob` for matching `fname`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所提到的`doGet`函数从查询字符串中获取`fname`参数，并返回与`fname`匹配的`age`值和`dob`。
- en: '![Sending an HTTP/HTTPS request with query string](img/B05010_07_10.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![带有查询字符串的HTTP/HTTPS请求发送](img/B05010_07_10.jpg)'
- en: Creating RSS feed using ContentService
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ContentService创建RSS源
- en: 'You created an RSS reader application in [Chapter 6](ch06.html "Chapter 6. Creating
    Feed Reader and Translator Applications"), *Creating Feed Reader and Translator
    Applications*. Now, you can create an application to publish an RSS feed. Put
    the RSS data in a Sheet as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您在[第6章](ch06.html "第6章。创建订阅阅读器和翻译器应用程序")*创建订阅阅读器和翻译器应用程序*中创建了一个RSS阅读器应用程序。现在，您可以创建一个发布RSS源的应用程序。将RSS数据放入如下所示的表格中：
- en: '![Creating RSS feed using ContentService](img/B05010_07_11.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![使用ContentService创建RSS源](img/B05010_07_11.jpg)'
- en: 'Also, edit/enter the following `doGet` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以编辑/输入以下`doGet`函数：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Publish the script as you did before. You can use the published URL as the RSS
    URL in your RSS reader application built in the previous chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的方式发布脚本。您可以将发布的URL用作上一章中构建的RSS阅读器应用程序的RSS URL。
- en: Creating a file upload application
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件上传应用程序
- en: 'You can create an application to upload any file to Drive from the browser.
    Create the `doGet` and `uploadFiles` functions in the `Code.gs` file as listed
    here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个应用程序，从浏览器上传任何文件到Drive。在`Code.gs`文件中创建`doGet`和`uploadFiles`函数，如下所示：
- en: 'In the `Code.gs` file, add this code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Code.gs`文件中添加以下代码：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `uploadFiles` function looks for an existing folder with the name `Uploaded
    Files`. If not found, then it creates the same within root, `My Drive,` folder.
    Subsequently, it creates the file passed with the argument and returns the created
    file's URL.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`uploadFiles`函数查找名为`Uploaded Files`的现有文件夹。如果没有找到，则在根目录`My Drive`文件夹中创建相同的文件夹。随后，它创建传递给参数的文件，并返回创建的文件的URL。'
- en: 'Update the code in the `Form.html` file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`Form.html`文件中的代码：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code renders the upload form controls, and if **Upload** is clicked,
    then it calls the `uploadFiles` server function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码渲染了上传表单控件，如果点击**上传**，则调用`uploadFiles`服务器函数。
- en: 'A sample of the file upload form''s controls is shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 文件上传表单的控件示例如下所示：
- en: '![Creating a file upload application](img/B05010_07_12.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![创建文件上传应用程序](img/B05010_07_12.jpg)'
- en: Click on the **Browse…** button to select any file stored locally. Then, click
    on the **Upload** button to upload to Drive. The selected file will be uploaded
    to the `Uploaded Files` folder within the `My Drive` folder.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**浏览…**按钮选择任何本地存储的文件。然后，点击**上传**按钮将文件上传到Drive。所选文件将被上传到`My Drive`文件夹中的`Uploaded
    Files`文件夹。
- en: After a successful upload, an alert box with the uploaded file's URL will be
    displayed as shown in the following screenshot. You can use the URL to verify
    the successful file upload.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上传成功后，将显示一个包含上传文件URL的警告框，如下所示截图。您可以使用此URL验证文件上传是否成功。
- en: '![Creating a file upload application](img/B05010_07_13.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建文件上传应用程序](img/B05010_07_13.jpg)'
- en: Creating an employee timesheet application
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建员工考勤应用程序
- en: From the knowledge and experience gathered by creating the preceding applications,
    you can create this full blown timesheet application. This application can be
    used in an organization or company to log employees, worked hours in a day or
    shift. The daily attendance data will be backed in the `Backup` Sheet for future
    reference.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建前面的应用程序所积累的知识和经验，您可以创建这个完整的考勤应用。此应用可用于组织或公司记录员工在一天或班次中的工作时间。每日出勤数据将被保存在
    `Backup` 工作表中以供将来参考。
- en: Create a new spreadsheet with a Sheet named `EmployeesList` and populate it
    with employee names. All these names will be listed as a dropdown automatically
    in the user interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的工作表，命名为 `EmployeesList`，并填充员工姓名。所有这些姓名将自动在用户界面中以下拉列表的形式列出。
- en: '![Creating an employee timesheet application](img/B05010_07_14.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工考勤应用](img/B05010_07_14.jpg)'
- en: Create another Sheet named `TimeSheet` and arrange the column headers as shown
    in the following screenshot. Ensure columns *C*, *D*, *E*, and *F* are formatted
    as `date`, otherwise date may be shown as epoch number. Leave column *A* blank
    as it will be used by the script to mark the status of a shift such as `sb` (shift
    begin), `bb` (break begin), `be` (break end), and `se` (shift end).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个名为 `TimeSheet` 的工作表，并按照以下截图所示排列列标题。确保列 *C*、*D*、*E* 和 *F* 格式化为 `date`，否则日期可能显示为纪元数字。将列
    *A* 留空，因为它将由脚本用于标记班次状态，例如 `sb`（班次开始）、`bb`（休息开始）、`be`（休息结束）、`se`（班次结束）。
- en: '![Creating an employee timesheet application](img/B05010_07_15.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工考勤应用](img/B05010_07_15.jpg)'
- en: Create another Sheet with the name `Backup`, which is used to back up every
    day's shift data from the `TimeSheet` Sheet. Arrange the columns as shown here.
    Remember to format columns *B*, *C*, *D*, and *E* as `date`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个名为 `Backup` 的工作表，用于从 `TimeSheet` 工作表备份每天的班次数据。按照以下所示排列列。请记住将列 *B*、*C*、*D*
    和 *E* 格式化为 `date`。
- en: '![Creating an employee timesheet application](img/B05010_07_16.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工考勤应用](img/B05010_07_16.jpg)'
- en: 'Create another new Sheet and name it as `Message`, which will be used to pass
    a message, if any, to employees:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建另一个新的工作表，命名为 `Message`，用于传递给员工的消息（如果有）：
- en: '![Creating an employee timesheet application](img/B05010_07_17.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工考勤应用](img/B05010_07_17.jpg)'
- en: 'In the `Code.gs` file, create the global variables as well as the `doGet` and
    `getEmpNames` functions. Replace `[[ this spreadsheet id ]]` with the actual ID/key
    (as a string) of the spreadsheet in which you are editing the code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Code.gs` 文件中，创建全局变量以及 `doGet` 和 `getEmpNames` 函数。将 `[[ this spreadsheet id
    ]]` 替换为实际的工作表 ID/键（作为字符串）：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This `getEmpList` function creates and returns employee names as an array:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`getEmpList` 函数创建并返回员工姓名数组：'
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `doGet` function, the message and employee list are assigned to the
    `template` object and returns evaluated HTML content:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `doGet` 函数中，消息和员工列表被分配给 `template` 对象，并返回评估后的 HTML 内容：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This `getEmpStatus` function returns employee shift status as an array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`getEmpStatus` 函数返回员工班次状态数组：'
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `fmtDate_` function is a helper function that returns the formatted date
    string:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`fmtDate_` 函数是一个辅助函数，它返回格式化的日期字符串：'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `postTime` function populates timesheet with respect to the employee name
    and what button he/she has clicked and these values are supplied as an argument
    (`name` and `val`). This function also throws errors, if any.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`postTime` 函数根据员工姓名和用户点击的按钮填充考勤表，这些值作为参数（`name` 和 `val`）提供。此函数也会抛出错误（如果有）。'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The keyword throw returns an error object and terminates the execution.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字 `throw` 返回一个错误对象并终止执行。
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding `postTime` function populates data to the `TimeSheet` Sheet as
    per the button clicked by the user. Also, it throws errors if there are any conflicts
    in the shift time. For example, a user cannot click on **Break End** before **Break
    Start** and cannot click on **Shift Start** without ending the previous shift,
    and so on.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `postTime` 函数根据用户点击的按钮将数据填充到 `TimeSheet` 工作表中。如果班次时间有冲突，它还会抛出错误。例如，用户不能在点击
    **Break End** 之前点击 **Break Start**，也不能在不结束上一个班次的情况下点击 **Shift Start**，等等。
- en: 'Create a new HTML file named as `Timesheet` and enter the following code in
    it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 文件，命名为 `Timesheet`，并在其中输入以下代码：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Publish the script and enter the published URL in the browser's address bar,
    then you will get the timesheet application loaded as shown in the screenshot.
    Experiment by selecting employee names from the dropdown and by clicking on buttons
    next to it. For every user action, the `Timesheet` and/or `Backup` Sheet data
    will be updated.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 发布脚本并将发布的URL输入到浏览器的地址栏中，然后你将看到截图所示的工时应用被加载。通过从下拉菜单中选择员工姓名以及点击其旁边的按钮进行实验。对于每个用户操作，`工时`和/或`备份`表的数据将被更新。
- en: '![Creating an employee timesheet application](img/B05010_07_18.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工工时应用](img/B05010_07_18.jpg)'
- en: 'A sample output of the `Timesheet` data is shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`工时`数据的示例输出：
- en: '![Creating an employee timesheet application](img/B05010_07_19.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工工时应用](img/B05010_07_19.jpg)'
- en: 'As soon as the user clicks on **Shift End**, then the corresponding data from
    the `TimeSheet` Sheet will be transferred to the `Backup` Sheet and formulas will
    be created for the `Shift Hours`, `Break Time`, and `Worked Hours` columns. These
    formulas calculate the date difference and multiply it by 24 to show it as an
    hour value. A sample output of the `Backup` Sheet is shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**班次结束**时，`工时`表中的相应数据将被转移到`备份`表中，并为`班次小时数`、`休息时间`和`工作时间`列创建公式。这些公式计算日期差异并将其乘以24，以显示为小时值。以下是`备份`表的示例输出：
- en: '![Creating an employee timesheet application](img/B05010_07_20.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![创建员工工时应用](img/B05010_07_20.jpg)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned and created many useful real-life applications
    including RSS publisher and a full-blown timesheet application. In the next chapter,
    you will create an order processing workflow application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了并创建了许多实用的实际应用，包括RSS发布者和一个完整的工时应用。在下一章中，你将创建一个订单处理工作流应用。
