- en: Chapter 7. Input Field with Clear Button
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：带清除按钮的输入字段
- en: In this chapter we will go through Stephen Friedrich's `ClearButton` plugin.
    This plugin is targeted for text components that show a "clear" button over the
    text field. When the clear button is clicked on, the text field is emptied. Also,
    the icon image and its positioning can be controlled using CSS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Stephen Friedrich的`ClearButton`插件。这个插件针对显示在文本字段上方的“清除”按钮的文本组件。当点击清除按钮时，文本字段将被清空。此外，可以使用CSS控制图标图像及其定位。
- en: 'The topics covered are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖的主题包括：
- en: Functional requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能需求
- en: Planning and coding of the clear button
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除按钮的规划和编码
- en: Functional requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能需求
- en: We want a plugin that will help users to clear the text within the text components,
    such as `Ext.form.field.Text`, `Ext.form.field.TextArea`, `Ext.form.field.ComboBox`,
    and `Ext.form.field.Date`. The plugin should provide a button to click on in order
    to clear the text within a text component. This plugin should have several useful
    configuration options and CSS styles, where we can set our requirements, such
    as the clear button should always/only show up when the mouse enters within the
    input field, or it should be shown when the input field is empty or is cleared
    when the user presses *Esc*. The clear button can be customized for button image/position
    via CSS, and so on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有一个插件，可以帮助用户清除文本组件中的文本，例如`Ext.form.field.Text`、`Ext.form.field.TextArea`、`Ext.form.field.ComboBox`和`Ext.form.field.Date`。这个插件应该提供一个按钮，用户可以点击以清除文本组件中的文本。这个插件应该有几个有用的配置选项和CSS样式，我们可以设置我们的要求，例如清除按钮应该始终/仅在鼠标进入输入字段时显示，或者当输入字段为空时显示，或者当用户按下*Esc*键时清除。清除按钮可以通过CSS自定义按钮图像/位置等。
- en: Planning and coding of the clear button
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除按钮的规划和编码
- en: 'To develop this plugin we will first create the clear button that will be rendered
    over the text component, and will apply the CSS styles according to the configuration
    options. After that, we need to add several event handlers for the clear button,
    such as `click`, `mouseover`, `mouseout`, `mouseup`, and `mousedown`, and also,
    several event handlers for the text component, such as `destroy`, `resize`, `change`,
    `mouseover`, and `mouseout`. Let us now start coding:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发这个插件，我们首先将创建一个将在文本组件上渲染的清除按钮，并根据配置选项应用CSS样式。之后，我们需要为清除按钮添加几个事件处理器，例如`click`、`mouseover`、`mouseout`、`mouseup`和`mousedown`，以及为文本组件添加几个事件处理器，例如`destroy`、`resize`、`change`、`mouseover`和`mouseout`。现在让我们开始编码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code snippet, you can see that we have defined several configuration
    options, and the required `init` function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，你可以看到我们定义了几个配置选项和必需的`init`函数。
- en: 'Now let us define the `handleAfterRender` function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`handleAfterRender`函数：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Within this `handleAfterRender` function, at first, we are checking whether
    the textfield is a `textarea` or not, as we need to handle `textarea` with custom
    functionality since this field may have a scrollbar. And then we call the `createClearButtonEl`
    function to create the element and the DOM for the clear button.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`handleAfterRender`函数中，首先，我们检查文本字段是否是`textarea`，因为我们需要处理可能带有滚动条的`textarea`的自定义功能。然后我们调用`createClearButtonEl`函数来创建清除按钮的元素和DOM。
- en: 'Now let us define the `createClearButtonEl` function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`createClearButtonEl`函数：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding function the clear button has been created and assigned an
    animation, based on the configuration options. In this function we also checked
    whether the browser supports CSS3 transitions or not, by calling the `supportsCssTransition`
    function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的函数中，清除按钮已经被创建并分配了一个基于配置选项的动画。在这个函数中，我们还通过调用`supportsCssTransition`函数来检查浏览器是否支持CSS3过渡。
- en: 'Now, let us define the `supportsCssTransition` function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`supportsCssTransition`函数：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next function we are calling within the `handleAfterRender` function is
    the `addListeners` function to add listeners to the field, its input element,
    and the clear button to handle resizing events such as `mouseover`, `mouseout`,
    and `click`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleAfterRender`函数中，我们接下来调用的函数是`addListeners`函数，用于向字段、其输入元素和清除按钮添加监听器，以处理如`mouseover`、`mouseout`和`click`等调整大小的事件。
- en: 'Now, let us define the `addListeners` function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`addListeners`函数：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next we define the `mouseover` event handler – `handleMouseOverInputField`,
    and the `mouseout` event handler – `handleMouseOutOfInputField`, for `bodyEl`
    of `textField`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们定义`mouseover`事件处理器`handleMouseOverInputField`和`mouseout`事件处理器`handleMouseOutOfInputField`，用于`textField`的`bodyEl`：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let us define the "destroy" event handler of `textField` since when the
    field is destroyed, we also need to destroy the clear button element to prevent
    memory leaks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义 `textField` 的 "destroy" 事件处理器，因为当字段被销毁时，我们还需要销毁清除按钮元素以防止内存泄漏：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let us start defining the handlers for the clear button''s `mouseover`,
    `mouseout`, `mousedown`, `mouseup`, and `click` events:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始定义清除按钮的 `mouseover`、`mouseout`、`mousedown`、`mouseup` 和 `click` 事件的处理程序：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next function we will call within the `handleAfterRender` function is the
    `repositionClearButton` function, to reposition the clear button element based
    on the `inputEl` element of `textField`. Now, let us define this function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `handleAfterRender` 函数中，我们将调用的下一个函数是 `repositionClearButton` 函数，根据 `textField`
    的 `inputEl` 元素重新定位清除按钮元素。现在，让我们定义这个函数：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see that we get the clear button''s position value by calling the `calculateClearButtonPosition`
    function. This function calculates the position of the clear button, based on
    the `inputEl` element of `textField`. Now, let us define this function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们通过调用 `calculateClearButtonPosition` 函数来获取清除按钮的位置值。此函数根据 `textField`
    的 `inputEl` 元素计算清除按钮的位置。现在，让我们定义这个函数：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can see that we checked whether the field has a scrollbar or not, and if
    the field has a scrollbar, we add the value of the `Ext.getScrollBarWidth` function
    to the `right` position. Now, let us define the `fieldHasScrollBar` function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们检查了字段是否有滚动条，如果有滚动条，我们将 `Ext.getScrollBarWidth` 函数的值添加到 `right` 位置。现在，让我们定义
    `fieldHasScrollBar` 函数：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then we called the `updateClearButtonVisibility` function within the `handleAfterRender`
    function for fixing the clear button''s visibility:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在 `handleAfterRender` 函数中调用了 `updateClearButtonVisibility` 函数来修复清除按钮的可见性：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can see that we took the value of the current visible state, and what will
    be the new visible state, by calling the `isButtonCurrentlyVisible` and `shouldButtonBeVisible`
    functions. The `isButtonCurrentlyVisible` function is a wrapper around `clearButtonEl.isVisible()`
    to handle the `setVisible` animation that may still be in progress, and the `shouldButtonBeVisible`
    function checks the configuration options and the current mouse status to determine
    whether the clear button should be visible or not. Now, let us define these functions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们通过调用 `isButtonCurrentlyVisible` 和 `shouldButtonBeVisible` 函数来获取当前可见状态值以及新的可见状态。`isButtonCurrentlyVisible`
    函数是 `clearButtonEl.isVisible()` 的包装器，用于处理可能仍在进行的 `setVisible` 动画，而 `shouldButtonBeVisible`
    函数检查配置选项和当前鼠标状态，以确定清除按钮是否应该可见。现在，让我们定义这些函数：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the last function that we called within the `handleAfterRender` function
    is the `addEscListener` function. What we need to do is, if the configuration
    option `clearOnEscape` is set to `true`, add a key listener that will clear this
    field. Now, let us define this function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `handleAfterRender` 函数中，我们调用的最后一个函数是 `addEscListener` 函数。我们需要做的是，如果配置选项 `clearOnEscape`
    设置为 `true`，则添加一个键监听器来清除此字段。现在，让我们定义这个函数：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot is the output where we''ve used this plugin for **textfield**,
    **textareafield**, **combobox**, and the date field:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用此插件为 **textfield**、**textareafield**、**combobox** 和日期字段生成的输出：
- en: '![Planning and coding of the clear button](img/3725OS_7_1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![清除按钮的规划和编码](img/3725OS_7_1.jpg)'
- en: You can see that on hovering over the **textfield** component, the clear button
    is visible and clicking on this button will clear the respective field.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在悬停在 **textfield** 组件上时，清除按钮是可见的，并且点击此按钮将清除相应的字段。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we've gone through an Ext JS plugin, which provides a clear
    button for text components to clear the content within it. We can see that developing
    a single plugin can be used in several types of components, and how easily we
    can inject the functionality of the plugin.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一个 Ext JS 插件，该插件为文本组件提供了一个清晰的清除按钮，用于清除其内部的内容。我们可以看到，单个插件可以用于多种类型的组件，以及我们如何轻松地注入插件的功能。
- en: In the next chapter we will develop an Ext JS extension for a fancy animated
    message bar. The message bar will provide a facility to have a configurable duration
    timer for showing a message. It will have a close button, and it will also be
    able to show an "error" and a "successful" icon, beside the message.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开发一个用于花哨动画消息栏的 Ext JS 扩展。消息栏将提供一个可配置的持续时间计时器来显示消息。它将有一个关闭按钮，并且它还可以在消息旁边显示
    "错误" 和 "成功" 图标。
