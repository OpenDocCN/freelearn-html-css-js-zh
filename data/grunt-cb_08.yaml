- en: Chapter 8. Creating Custom Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。创建自定义任务
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating an alias task
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建别名任务
- en: Creating a basic task
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本任务
- en: Accessing project configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问项目配置
- en: Checking for required configurations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所需配置
- en: Checking for the successful execution of other tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查其他任务的执行是否成功
- en: Running non-blocking code in a task
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务中运行非阻塞代码
- en: Failing a task
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务失败
- en: Using command-line parameters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: Enqueuing tasks to run
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任务入队以运行
- en: Creating a multi-task
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多任务
- en: Using options in a task
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务中使用选项
- en: Using files in a task
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务中使用文件
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: To truly begin appreciating the power and flexibility of Grunt, we have to delve
    into the creation of our own tasks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正开始欣赏Grunt的强大和灵活性，我们必须深入研究创建我们自己的任务。
- en: On top of the vast array of plugins at our disposal, each of the tasks provided
    by them can be configured in a variety of ways that should cover most of our requirements.
    If, however, we do encounter a problem we cannot solve using an existing task
    and configuration combination, we can easily create a new task to fill in the
    gap.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可用的各种插件中，每个插件提供的任务都可以以多种方式配置，应该能够满足我们的大部分需求。然而，如果我们遇到无法使用现有任务和配置组合解决的问题，我们可以轻松地创建一个新的任务来填补这个空白。
- en: We should also view the creation of tasks as the first stepping stone to creating
    plugins of our own. The methods of creating tasks discussed in this chapter will
    provide us with a simple laboratory, where we can build tasks that can eventually
    be transferred directly to a plugin.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也应该将创建任务视为创建我们自己的插件的第一步。本章中讨论的创建任务的方法将为我们提供一个简单的实验室，我们可以在这里构建最终可以直接转移到插件中的任务。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The following two URLs provide a wealth of information on creating tasks and
    the tools Grunt makes available to build them. It is highly recommended that you
    go through these links if you are serious about creating tasks:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个URL提供了有关创建任务和Grunt提供的构建它们的工具的大量信息。如果您认真考虑创建任务，强烈建议您查看这些链接：
- en: '[http://gruntjs.com/creating-tasks](http://gruntjs.com/creating-tasks)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/creating-tasks](http://gruntjs.com/creating-tasks)'
- en: '[http://gruntjs.com/api/inside-tasks](http://gruntjs.com/api/inside-tasks)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/api/inside-tasks](http://gruntjs.com/api/inside-tasks)'
- en: Creating an alias task
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建别名任务
- en: The tasks we configured for our project tend to perform a single function and
    nothing more. As a project grows, we will probably start to identify groups of
    tasks that we tend to run together, in a specific order. It is at this point that
    an alias task can become quite helpful to us as it allows us to group a set of
    tasks together under a new task name.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为项目配置的任务往往只执行一个功能，没有更多。随着项目的增长，我们可能会开始识别出我们倾向于按特定顺序一起运行的多个任务组。在这个时候，别名任务可以对我们非常有帮助，因为它允许我们将一组任务组合成一个新任务名下。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考。
- en: This recipe also contains an example that makes use of the *Setting up a basic
    web server* and the *Watching files for changes* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*, and the
    *Rendering Jade templates* recipe in [Chapter 3](part0031.xhtml#aid-TI1E1 "Chapter 3. Templating
    Engines"), *Templating Engines* in one setup. Be sure to refer to these if you'd
    like to gain a deeper understanding of each of these aspects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方还包含一个示例，它使用了[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“在项目中安装Grunt”配方中的*设置基本Web服务器*和*监视文件变化*配方，以及[第3章](part0031.xhtml#aid-TI1E1
    "第3章。模板引擎")中“模板引擎”配方中的*渲染Jade模板*配方，在一个设置中。如果您想深入了解这些方面，请务必参考这些内容。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through building a basic website development
    setup that continuously renders HTML files from templates, serves them using a
    basic web server, and ensures a clean environment before starting by removing
    all previously rendered templates:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们构建一个基本的网站开发设置，该设置会持续从模板渲染 HTML 文件，使用基本网络服务器提供服务，并在开始之前通过删除所有先前渲染的模板来确保干净的环境：
- en: We'll start by installing the packages that contains the `contrib-clean`, `contrib-connect`,
    `contrib-jade`, and `contrib-watch` plugins as per the instructions provided in
    the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting
    Started with Grunt"), *Getting Started with Grunt*.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第1章](part0015.xhtml#aid-E9OE1 "第1章。开始使用 Grunt") 的 *安装插件* 菜谱中提供的说明安装包含
    `contrib-clean`、`contrib-connect`、`contrib-jade` 和 `contrib-watch` 插件的包。
- en: 'Next, we''ll create a simple Jade template called `index.jade` in the `templates`
    directory, and provide it with the following contents:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `templates` 目录中创建一个简单的 Jade 模板，名为 `index.jade`，并为其提供以下内容：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can add tasks to watch, render, serve, and clean our configuration:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以添加任务来监视、渲染、提供服务和清理我们的配置：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With all our tasks in place, we can now create an alias task called `run`,
    which ties them all together in the appropriate order. This is done by adding
    the following to the end of the main function in our Grunt configurations file:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有任务就绪之后，我们现在可以创建一个名为 `run` 的别名任务，它将它们按适当的顺序全部关联起来。这是通过将以下内容添加到我们的 Grunt 配置文件中的主函数末尾来完成的：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now run the alias task just like a regular task by using the `grunt
    run` command, which should produce output similar to the following:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过使用 `grunt run` 命令来运行别名任务，就像运行常规任务一样，这应该会产生类似于以下内容的输出：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see from the output, our configured tasks have all run as per the
    order specified in the `run` task, and we are now serving the rendered `index.jade`
    template. To test the setup, we can navigate to `http://localhost:8000` in the
    browser, which will display the rendered template.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们从输出中看到的那样，我们配置的任务都按照 `run` 任务中指定的顺序运行，我们现在正在提供渲染后的 `index.jade` 模板。为了测试设置，我们可以在浏览器中导航到
    `http://localhost:8000`，这将显示渲染后的模板。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There may be situations where we have a specific task that we'd like to run
    much more than others, so much so that we may come to think of it as the default
    task. In such a case, we can make use of the `default` task alias. This alias
    is called when there is no specific task indicated along with the `grunt` command.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有这样的情况，我们有一个特定的任务，我们希望比其他任务运行得多得多，以至于我们可能会把它视为默认任务。在这种情况下，我们可以使用 `default`
    任务别名。当没有与 `grunt` 命令一起指定的特定任务时，将调用此别名。
- en: 'We can modify our main recipe to make use of the `default` task by changing
    the alias task declaration to the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改别名任务声明为以下内容来修改我们的主菜谱以使用 `default` 任务：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we now run the `grunt` command in our project without a task name following
    it, which should run all the tasks in the same way as it did in the previous section
    of this recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在我们的项目中运行 `grunt` 命令而不跟随着任务名称，它应该以与上一节中相同的方式运行所有任务。
- en: Creating a basic task
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本任务
- en: Despite the large array of plugins available to Grunt users, situations might
    still arise where we would want to create tasks of our own. These situations are
    well provided for by Grunt, as it provides a set of utilities that make creating
    new ones quite simple.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Grunt用户有大量的插件可用，但仍然可能发生我们想要创建自己的任务的情况。Grunt提供了很好的支持，因为它提供了一套使创建新任务变得相当简单的实用工具。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在 [第1章](part0015.xhtml#aid-E9OE1 "第1章。开始使用 Grunt") 的 *在项目中安装 Grunt*
    菜谱中创建的基本项目结构，*开始使用 Grunt*。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps will take us through creating a simple task that prints
    the current system date and time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个简单的任务，该任务会打印当前系统日期和时间。
- en: 'First, we''ll register our task with the name `datetime` and provide it with
    a description and an empty function as a placeholder. The following code shows
    the entire Grunt file with the task registration code highlighted:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用名称 `datetime` 注册我们的任务，并为其提供描述和一个空函数作为占位符。以下代码显示了带有任务注册代码高亮的整个 Grunt
    文件：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the task registered, we can now provide it with the code that will actually
    print the current date and time. The following code shows the task registration
    with the newly added code highlighted:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务注册后，我们现在可以提供代码，该代码将实际打印当前日期和时间。以下代码显示了带有新添加代码高亮的任务注册：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This bit of code makes use of the standard JavaScript `Date` object and Grunt's
    `grunt.log` utility, which is specifically made available to tasks for logging
    all types of messages.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码使用了标准的 JavaScript `Date` 对象和 Grunt 的 `grunt.log` 工具，该工具专门为任务提供，用于记录所有类型的消息。
- en: 'You can read more about the `grunt.log` utility at the following URL:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在以下网址了解更多关于 `grunt.log` 工具的信息：
- en: '[http://gruntjs.com/api/grunt.log](http://gruntjs.com/api/grunt.log)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/api/grunt.log](http://gruntjs.com/api/grunt.log)'
- en: 'We can now try out a newly created task by running the `grunt datetime` command,
    which should produce output similar to the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行 `grunt datetime` 命令来尝试运行新创建的任务，它应该产生类似于以下内容的输出：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the output of the task has presented us with the current system date and
    time, we have successfully created and executed our simple custom task.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果任务的输出显示了当前系统日期和时间，那么我们就成功创建并执行了我们的简单自定义任务。
- en: Accessing project configuration
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问项目配置
- en: In order for a task to function appropriately within a project, it often needs
    a way to get specific details about it. The standard practice for Grunt projects
    is to supply project-specific details in the configuration object provided in
    the `grunt.initConfig` function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使任务在项目中正常工作，它通常需要一种方式来获取有关它的特定细节。Grunt 项目的标准做法是在 `grunt.initConfig` 函数提供的配置对象中提供项目特定的细节。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在 [第1章](part0015.xhtml#aid-E9OE1 "第1章。使用 Grunt 入门") 的 *在项目中安装
    Grunt* 配方中创建的基本项目结构，*使用 Grunt 入门*。如果您还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个配方中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建基本任务* 配方。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps will take us through creating a task that prints out a message
    determined by the project's configuration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个打印出由项目配置确定的消息的任务。
- en: 'First, we''ll add some sample project configuration using the `grunt.initConfig`
    function. The following code shows the contents of the entire Grunt file with
    the configuration highlighted:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 `grunt.initConfig` 函数添加一些示例项目配置。以下代码显示了带有配置高亮的整个 Grunt 文件内容：
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Note the use of a template string in the `datetime` configuration. The following
    URL provides more information on using template strings in configuration values:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意在 `datetime` 配置中使用模板字符串。以下网址提供了有关在配置值中使用模板字符串的更多信息：
- en: '[http://gruntjs.com/configuring-tasks#templates](http://gruntjs.com/configuring-tasks#templates)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/configuring-tasks#templates](http://gruntjs.com/configuring-tasks#templates)'
- en: 'Next, we''ll register our task with the name `describe` and provide it with
    a description and an empty function as a placeholder:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用名称 `describe` 注册我们的任务，并为其提供描述和一个空函数作为占位符：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the task registered, we can fill the empty function with the following
    code, which retrieves some project configurations and uses it when printing our
    message:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务注册后，我们可以用以下代码填充空函数，该代码检索一些项目配置并在打印我们的消息时使用它：
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Here, we make use of the `grunt.config` function to fetch data from the configuration
    object provided in the `grunt.initConfig` function.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `grunt.config` 函数从 `grunt.initConfig` 函数提供的配置对象中获取数据。
- en: Note that dot notation can be used when retrieving the properties from objects
    in the configuration object, as demonstrated with the `projectName` variable.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在从配置对象中的对象检索属性时可以使用点符号，如 `projectName` 变量所示。
- en: Another concept demonstrated with the `datetime` variable is that values retrieved
    using the `grunt.config` function are rendered, meaning that any string containing
    templates will be parsed and rendered. If, for some reason, we'd like to fetch
    the un-rendered value, we can do so by making use of the `grunt.config.getRaw`
    function.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `datetime` 变量演示的另一个概念是，使用 `grunt.config` 函数检索的值是渲染过的，这意味着任何包含模板的字符串都将被解析和渲染。如果出于某种原因我们想要获取未渲染的值，我们可以通过使用
    `grunt.config.getRaw` 函数来实现。
- en: 'We can now try out our custom task by running the `grunt describe` command,
    which should produce output similar to the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行 `grunt describe` 命令来尝试我们的自定义任务，应该会产生类似于以下输出的结果：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the output of the task has presented us with a message containing the values
    we supplied in our project configuration, we have successfully created and executed
    a task that makes use of the project configuration.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果任务的输出显示了一个包含我们在项目配置中提供的值的消息，那么我们已经成功创建并执行了一个利用项目配置的任务。
- en: Checking for required configurations
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查所需配置
- en: It's quite common for tasks to require a minimum set of configurations in order
    for them to function properly. The Grunt framework provides the `grunt.config.requires`
    function specifically for this case, failing a task if the indicated configuration
    is not found.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任务来说，通常需要一组最小配置才能正常工作是很常见的。Grunt 框架专门为此提供了 `grunt.config.requires` 函数，如果找不到指定的配置，则会失败任务。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用在 [第1章](part0015.xhtml#aid-E9OE1 "第1章。开始使用 Grunt") 中 *在项目中安装 Grunt*
    食谱中创建的基本项目结构，*开始使用 Grunt*。如果你还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个食谱中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建基本任务* 食谱。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating two tasks: the first will
    check for the required configurations that we will supply and the second will
    check for the configurations we will not supply.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建两个任务：第一个将检查我们提供的所需配置，第二个将检查我们未提供的配置。
- en: 'First, we''ll add some sample project configurations using the `grunt.initConfig`
    function. The following code shows the contents of the entire Grunt file with
    the configurations highlighted:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 `grunt.initConfig` 函数添加一些示例项目配置。以下代码显示了包含配置高亮的整个 Grunt 文件的内容：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we''ll register a task called `complete` that checks for the configurations
    that we supplied, by adding the following code after our `grunt.initConfig` call:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `grunt.initConfig` 调用之后添加以下代码，以注册一个名为 `complete` 的任务，该任务检查我们提供的配置：
- en: '[PRE13]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we can register a task called `incomplete`, which checks for a configuration
    that we have not supplied, by adding the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过添加以下代码来注册一个名为 `incomplete` 的任务，该任务检查我们未提供的配置：
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With our tasks added, we''ll first run the task that will succeed by using
    the `grunt complete` command, which should produce output similar to the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了我们的任务之后，我们首先将运行一个成功的任务，使用 `grunt complete` 命令，应该会产生类似于以下输出的结果：
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we can run the task that should fail by using the `grunt incomplete`
    command, which should produce output similar to the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `grunt incomplete` 命令运行应该失败的任务，应该会产生类似于以下输出的结果：
- en: '[PRE16]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we can see from the output of the last task, it failed due to the `missing`
    configuration property not being found.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们从最后一个任务的输出中看到的那样，它由于找不到 `missing` 配置属性而失败。
- en: Checking for the successful execution of other tasks
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查其他任务的执行成功
- en: Due to it being detrimental to the reusability of a task, it's not at all common
    to have tasks depending on one another, due to it being detrimental to the reusability
    of a task. If tasks are so tightly coupled that they can't run independently,
    it should strongly be considered to combine them into a single task.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于任务相互依赖会损害其可重用性，因此任务之间相互依赖的情况并不常见。如果任务紧密耦合到无法独立运行，应强烈考虑将它们合并为一个单独的任务。
- en: That being said, there are always exceptions, and Grunt provides for this by
    way of the `grunt.task.requires` function. When called, this function will check
    whether the task with the specified name has been successfully executed. If it
    finds that this is not the case, it will fail the current task.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，总有例外，Grunt通过`grunt.task.requires`函数提供了对此的处理。当调用此函数时，它会检查指定名称的任务是否已成功执行。如果它发现情况并非如此，它将使当前任务失败。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构，即“使用Grunt入门”。如果你还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本配方中的任何步骤看起来难以理解，请务必查看本章前面提供的“创建基本任务”配方。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps will take us through creating two tasks. The first task
    will print a simple message, and the second task will check whether the first
    one has been successfully executed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建两个任务。第一个任务将打印一条简单的消息，第二个任务将检查第一个任务是否已成功执行。
- en: 'First, we''ll register a task called `independent` that can run without any
    tasks having been run, and prints a message when it has done so. This is done
    by adding the following code to the main function in our Grunt file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将注册一个名为`independent`的任务，该任务可以在没有运行任何任务的情况下运行，并在完成时打印一条消息。这是通过将以下代码添加到我们的Grunt文件中的主函数中实现的：
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we''ll register a task called `dependent`, which will fail if the `independent`
    task did not run successfully. This is done by adding the following code to the
    main function in our Grunt file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将注册一个名为`dependent`的任务，如果`independent`任务没有成功运行，它将会失败。这是通过将以下代码添加到我们的Grunt文件中的主函数中实现的：
- en: '[PRE18]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To test this setup, we can first run the `dependent` task using the `grunt
    dependent` command, which should produce output similar to the following:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试这个设置，我们可以首先使用`grunt dependent`命令运行`dependent`任务，这应该会产生类似于以下内容的输出：
- en: '[PRE19]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we can see from the output, this task has failed due to the `independent`
    task not having been executed successfully before attempting to run the `dependent`
    task.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输出中我们可以看到，这个任务失败了，因为在尝试运行“依赖”任务之前，“独立”任务并没有成功执行。
- en: 'Finally, we can run the two tasks we created in succession using the `grunt
    independent dependent` command, which should produce output similar to the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`grunt independent dependent`命令连续运行我们创建的两个任务，这应该会产生类似于以下内容的输出：
- en: '[PRE20]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time around we can see that both the tasks ran without encountering any
    problems, and printed their respective messages.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次我们可以看到，这两个任务都运行得很好，没有遇到任何问题，并打印了它们各自的消息。
- en: Running non-blocking code in a task
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在任务中运行非阻塞代码
- en: The majority of libraries available in the Node.js sphere tend to be implemented
    in such a way as to be non-blocking. This means that calling a function provided
    by a library will usually continue to execute the next line of code after being
    called, even though it has not fulfilled its intended purpose.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js领域可用的大多数库通常都是按照非阻塞的方式实现的。这意味着调用库提供的函数后，通常会继续执行被调用之后的下一行代码，即使它还没有完成其预期的目的。
- en: These types of functions tend to use either, or both, the event-driven approach
    or callback functions to indicate their progress. In either of these situations,
    we will require a function we can call once a task has been completed and for
    this purpose, Grunt provides us with the `this.async` utility.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的函数通常会使用事件驱动方法或回调函数来指示它们的进度。在这两种情况下，我们都需要一个在任务完成后可以调用的函数，为此，Grunt为我们提供了`this.async`实用工具。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构，即“使用Grunt入门”。如果你还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本菜谱中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建基本任务* 菜谱。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps will take us through creating a task that prints the current
    system time every second for 5 seconds and then exits.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个任务，该任务每秒打印当前系统时间 5 秒，然后退出。
- en: 'First, we''ll register a task named `clock` with a description and an empty
    placeholder function by adding the following code to the end of the main function
    in our Grunt file:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在 Grunt 文件中的主函数末尾添加以下代码来注册一个名为 `clock` 的任务，包括一个描述和一个空的占位符函数：
- en: '[PRE21]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we''ll define some variables inside our placeholder function that we''ll
    be using in our time-printing code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的占位符函数内部定义一些变量，这些变量将用于我们的时间打印代码：
- en: '[PRE22]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `done` variable is the focus of this recipe as it demonstrates the usage
    of the `this.async` function. It is assigned the function that is returned by
    calling the `this.async` function. This returned function can be called to indicate
    whether the task has been completed.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`done` 变量是本菜谱的重点，因为它展示了 `this.async` 函数的使用。它被分配给调用 `this.async` 函数返回的函数。这个返回的函数可以被调用以指示任务是否已完成。'
- en: The `count` variable will be used to keep track of the number of times the system
    time has been printed out. It will be decremented every time we print the date
    and time, and we'll stop printing the time when it reaches a value of `0`.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`count` 变量将用于跟踪系统时间打印的次数。每次打印日期和时间时，它都会递减，并且当它达到 `0` 的值时，我们将停止打印时间。'
- en: The `interval` variable is used to store the ID of the **timer interval** that
    is started at the end of the task function. We need this ID to stop the timer
    interval from running once the `count` variable reaches a value of `0`.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`interval` 变量用于存储在任务函数末尾启动的 **计时器间隔** 的 ID。我们需要这个 ID 来在 `count` 变量达到 `0` 的值时停止计时器间隔的运行。'
- en: 'With all the required variables in place, we can now define the function that
    will print the current system date and time, and also stop the timer once it has
    run its course. The following code should be added immediately after the previous
    variable definitions:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有必要的变量都已就绪后，我们现在可以定义一个函数，该函数将打印当前系统日期和时间，并在运行完毕后停止计时器。以下代码应该在之前的变量定义之后立即添加：
- en: '[PRE23]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Here, we make use of the `grunt.log` utility to print the current system date
    and time by providing it with a newly created built-in JavaScript `Date` object,
    which, by default, will always contain the current date and time.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `grunt.log` 工具通过提供一个新创建的内置 JavaScript `Date` 对象来打印当前系统日期和时间，该对象默认将始终包含当前日期和时间。
- en: We also decrement the count variable and check whether it is less than or equal
    to `zero`. If we find that it is lower than or equal to zero, we make use of the
    built-in `clearInterval` function to stop the running of the timer interval. We'll
    be assigning the timer interval ID to the `interval` variable in the next step.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还递减了计数变量，并检查它是否小于或等于 `zero`。如果我们发现它小于或等于零，我们将使用内置的 `clearInterval` 函数来停止计时器间隔的运行。我们将在下一步将计时器间隔
    ID 分配给 `interval` 变量。
- en: Once we see that the counter has reached `0` and we've stopped the time interval,
    we can use the `done` function returned to us by the `this.async` function to
    indicate that the task has finished running.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们看到计数器达到 `0` 并且我们已经停止了时间间隔，我们可以使用 `this.async` 函数返回给我们的 `done` 函数来指示任务已运行完成。
- en: 'Finally, we''ll start a timer interval that runs the function defined in our
    previous step every `1000` milliseconds by adding the following code immediately
    after our `printTime` function definition:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在 `printTime` 函数定义之后立即添加以下代码来启动一个每 `1000` 毫秒运行一次之前步骤中定义的函数的计时器间隔：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With our task now containing all the necessary code, we can try it out by running
    the `grunt clock` command, which should produce output similar to the following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的任务中包含所有必要的代码后，我们可以通过运行 `grunt clock` 命令来尝试它，它应该产生类似于以下内容的输出：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As can be seen in the output of the task, it has printed the current system
    date and time five times, and then stopped.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如任务输出所示，它已打印当前系统日期和时间五次，然后停止。
- en: Failing a task
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务失败
- en: The success or failure of a task can be used to indicate whether a task was
    completed without issue, or if a problem was encountered before it could perform
    its intended function. By default, Grunt will assume that a task has succeeded
    but it also provides us with a simple way to indicate whether a task has failed
    and pass on the reason for its failure.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的成功或失败可以用来指示任务是否无问题完成，或者是否在执行其预期功能之前遇到了问题。默认情况下，Grunt会假设任务已成功，但它也提供了一个简单的方法来指示任务是否失败以及传递其失败的原因。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。开始使用Grunt")中“在项目中安装Grunt”配方中创建的基本项目结构，即*开始使用Grunt*。如果您还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Accessing project configuration* recipe provided earlier in this chapter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本配方中的任何步骤看起来难以理解，请务必查看本章前面提供的*访问项目配置*配方。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The following steps will take us through creating a task whose success is based
    on the value of a project configuration property:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个任务，其成功基于项目配置属性的值：
- en: 'We''ll start by registering a task called `check` with a description and an
    empty placeholder function by adding the following code to the end of the main
    function in our Grunt file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先通过在Grunt文件中的主函数末尾添加以下代码来注册一个名为`check`的任务，并带有描述和空占位符函数：
- en: '[PRE26]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With the task registered, we can now fill the empty function with code that
    retrieves a project configuration property and uses it to decide whether it should
    fail the task:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务注册后，我们现在可以填充空函数，以检索项目配置属性并使用它来决定是否使任务失败：
- en: '[PRE27]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that we return a newly created `Error` object containing a message to indicate
    that the task has failed. If we simply wanted to fail the task without any message,
    we can just return the `false` value.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们返回一个包含消息的新创建的`Error`对象，以指示任务已失败。如果我们只想使任务失败而不提供任何消息，我们只需返回`false`值即可。
- en: 'With our task ready, we can add the required configuration property to indicate
    that it should not fail. The following code shows the entire `grunt.initConfig`
    call with the new configuration highlighted:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的任务准备就绪后，我们可以添加所需的配置属性以指示它不应失败。以下代码显示了带有新配置高亮的整个`grunt.initConfig`调用：
- en: '[PRE28]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we can run the task for the first time to see whether it succeeds as expected.
    This is done by using the `grunt check` command, which should produce output similar
    to the following:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行任务以查看它是否按预期成功。这可以通过使用`grunt check`命令来完成，它应该产生类似于以下内容的输出：
- en: '[PRE29]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we''ve seen the task succeed, we can change our configuration to indicate
    that we''d like for it to fail:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经看到任务成功执行，我们可以更改配置以指示我们希望它失败：
- en: '[PRE30]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we now run the task again using the `grunt check` command, it should produce
    output similar to the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在再次使用`grunt check`命令运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE31]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As we can see from the output, the task has failed as expected when setting
    the `shouldFail` configuration property to `true`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们从输出中看到的那样，当将`shouldFail`配置属性设置为`true`时，任务如预期那样失败了。
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Since a task comes in a variety of types and structures, there are a variety
    of ways in which we'd like to indicate their failure. We'll now look at failing
    a non-blocking task and aborting a task immediately on failure.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于任务有多种类型和结构，因此我们有多种方式来指示它们的失败。现在我们将查看如何使非阻塞任务失败以及如何在失败时立即终止任务。
- en: Failing a non-blocking task
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 失败的非阻塞任务
- en: In the case that we've made use of the `this.async` function to indicate whether
    our task should run in a non-blocking way, the return value of the task function
    becomes meaningless.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用了`this.async`函数来指示任务是否以非阻塞方式运行，那么任务函数的返回值就变得没有意义了。
- en: If we'd like to fail a non-blocking task, we can do so using the first parameter
    of the function returned from the call to the `this.async` method. Providing either
    `false` or an `Error` object using this parameter will indicate that the task
    has failed.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望使一个非阻塞任务失败，我们可以通过调用`this.async`方法返回的函数的第一个参数来实现。使用此参数提供`false`或一个`Error`对象将指示任务已失败。
- en: 'In the following example, we altered the task from our main recipe to run in
    a non-blocking way, and fail appropriately:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将任务从主配方中修改为以非阻塞方式运行，并适当失败：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Aborting a task immediately on failure
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在失败时立即终止任务
- en: At times, we might want to have a failing task abort the entire Grunt process
    as soon as a failure is encountered. This type of behavior is usually associated
    with what is commonly known as a fatal error.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望遇到失败时立即终止整个Grunt进程。这种类型的行为通常与通常所说的致命错误相关联。
- en: 'The following example makes use of the `grunt.fail.fatal` utility to indicate
    that a fatal error has occurred, and that the Grunt process should exit without
    any further delay:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了`grunt.fail.fatal`实用工具来指示发生了致命错误，并且Grunt进程应该立即退出，而无需任何进一步的延迟：
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Using command-line parameters
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行参数
- en: In the case that a configurable aspect of a task needs to change quite often,
    it can be inefficient to add it to the project configuration. This is where the
    use of command-line parameters can be useful as they provide us with a way to
    easily provide options to our task, without having to alter our configuration.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个任务的配置方面需要经常更改，将其添加到项目配置中可能效率不高。这就是使用命令行参数可以派上用场的地方，因为它们为我们提供了一种轻松地为任务提供选项的方法，而无需更改我们的配置。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用在[第1章](part0015.xhtml#aid-E9OE1 "第1章。开始使用Grunt")中创建的基本项目结构，即*在项目中安装Grunt*配方中的内容。如果您还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个配方中的任何步骤看起来难以理解，请务必查看本章前面提供的*创建基本任务*配方。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a task that receives two
    strings using command-line parameters and uses them to print a message:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个任务，该任务使用命令行参数接收两个字符串，并使用它们来打印一条消息：
- en: 'We''ll start by registering a task called `welcome` with a description and
    an empty placeholder function by adding the following code to the end of the main
    function in our Grunt file:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先通过在Grunt文件中的主函数末尾添加以下代码来注册一个名为`welcome`的任务，并添加一个描述和一个空的占位符函数：
- en: '[PRE34]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'With the task registration setup, we can now fill the empty function with code
    that receives the command-line parameters and uses them to print a message:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务注册设置完成后，我们现在可以填充空函数，以接收命令行参数并使用它们来打印消息：
- en: '[PRE35]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we can run the task using some example parameters. This is done by using
    the `grunt welcome:Aaron:London` command, which should produce output similar
    to the following:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用一些示例参数来运行任务。这是通过使用`grunt welcome:Aaron:London`命令来完成的，它应该产生类似于以下内容的输出：
- en: '[PRE36]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that if your task makes use of targets, the first parameter will always
    be assumed to be the name of the target, and will not be passed on to the task
    function.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果您的任务使用了目标，第一个参数将始终被认为是目标的名称，并且不会传递给任务函数。
- en: As we can see from the output, the task has successfully received the parameters
    we supplied to it and used them to display a welcome message.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输出中我们可以看到，任务已成功接收我们提供的参数，并使用它们来显示欢迎消息。
- en: Enqueuing tasks to run
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将任务排队运行
- en: There might come a time that we would like to enqueue the running of the existing
    tasks from within our own task. This practice is not recommended because a well-designed
    task should usually be focused on a particular function and remain loosely coupled
    from other tasks. Tasks designed in this fashion generally tend to be more robust
    and useful in a larger variety of situations.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们可能希望在任务内部排队运行现有任务。这种做法并不推荐，因为设计良好的任务通常应该专注于特定的功能，并与其他任务保持松散耦合。以这种方式设计的任务通常在更广泛的场景中更健壮且更有用。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在 [第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门") 中 *在项目中安装Grunt*
    菜谱中创建的基本项目结构，该菜谱在 *使用Grunt入门* 中。如果你还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个菜谱中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建基本任务* 菜谱。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating two simple tasks that print
    a string with one of the tasks enqueuing the other inside itself:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建两个简单的任务，其中一个任务打印一个字符串，而另一个任务在内部将其入队：
- en: 'We''ll start by registering a task called `first` that prints out a string.
    This can be done by adding the following code to the end of the main function
    in our Grunt file:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先注册一个名为 `first` 的任务，该任务会打印出一个字符串。这可以通过将以下代码添加到我们的Grunt文件中的主函数末尾来完成：
- en: '[PRE37]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, we''ll register another task after the one we just added called `second`.
    This task will also print a string and then proceed to enqueue the `first` task
    for running:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将注册另一个任务，该任务将紧跟在我们刚刚添加的任务之后。这个任务也会打印一个字符串，然后继续将 `first` 任务入队以运行：
- en: '[PRE38]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now that we''ve created our two tasks, we can try them out by running the `grunt
    second` command, which should produce output similar to the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了两个任务，我们可以通过运行 `grunt second` 命令来尝试它们，这应该会产生类似于以下输出的结果：
- en: '[PRE39]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As we can see from the output, the `second` task that we ran enqueued the `first`
    task, which also ran.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们从输出中看到的那样，我们运行的第二个任务将第一个任务入队，该任务也运行了。
- en: Creating a multi-task
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多任务
- en: Task configurations provide the most common way of tweaking the functionality
    of the tasks that we use in our project. With configurations, we can set up a
    task to fulfill our specific needs, and it also allows us to use the same task
    in various ways within a single project. The different configurations applied
    to the same task are called **task targets**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 任务配置为我们使用在项目中的任务的功能调整提供了最常见的方式。通过配置，我们可以设置一个任务以满足我们的特定需求，并且它还允许我们在单个项目中以不同的方式使用同一个任务。应用于同一任务的不同的配置被称为
    **任务目标**。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在 [第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门") 中 *在项目中安装Grunt*
    菜谱中创建的基本项目结构，该菜谱在 *使用Grunt入门* 中。如果你还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个菜谱中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建基本任务* 菜谱。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a simple task that prints
    the name of the target configuration and the data supplied to it:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个简单的任务，该任务打印目标配置的名称和提供给它的数据：
- en: 'We''ll start by registering a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先使用 `registerMultiTask` 函数在Grunt文件的主函数末尾添加以下代码来注册一个名为 `display` 的多任务。
- en: '[PRE40]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'With the task registered, we can fill the empty function with the following
    code that prints a message containing the name of the specified target and the
    data provided for it:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务注册后，我们可以用以下代码填充空函数，该代码打印包含指定目标名称和提供的数据的消息：
- en: '[PRE41]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tip
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that it's only inside the scope of task functions registered using `registerMultiTask`
    that `this.target` and `this.data` will be populated with the target name and
    configuration data.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，只有在使用 `registerMultiTask` 注册的任务函数的范围内，`this.target` 和 `this.data` 才会被填充为目标名称和配置数据。
- en: 'Now that we have a registered and functional task, we can set up some sample
    configuration to our `grunt.initConfig` call, which we''ll use to demonstrate
    the task''s behavior:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经注册了一个功能正常的任务，我们可以为我们的 `grunt.initConfig` 调用设置一些示例配置，我们将用它来演示任务的行为：
- en: '[PRE42]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'With our task created and configured, we can try it out by running the `grunt
    display` command, which should produce output similar to the following:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的任务创建和配置后，我们可以通过运行`grunt display`命令来尝试它，该命令应该产生类似于以下输出的结果：
- en: '[PRE43]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can now also try to indicate that we''d like to use only the `foo` configuration
    target by running the `grunt display:foo` command, which should produce output
    similar to the following:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们也可以尝试通过运行`grunt display:foo`命令来指示我们只想使用`foo`配置目标，该命令应该产生类似于以下输出的结果：
- en: '[PRE44]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Using options in a task
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在任务中使用选项
- en: The most common way of tweaking the functionality of a task is by providing
    options in the project configurations. Options can be specified by providing an
    object to the `options` property at either the task or target levels. If an option
    is provided at both the task and target levels, the one provided at the target
    level will take precedence.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 调整任务功能的最常见方式是在项目配置中提供选项。选项可以通过在任务或目标级别提供一个对象到`options`属性来指定。如果同时在任务和目标级别提供了选项，则目标级别的选项将具有优先权。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中创建的基本项目结构，即“在项目中安装Grunt”配方中的结构，来工作。如果你还不熟悉其内容，请务必参考它。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a multi-task* recipe provided earlier in this chapter.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个配方中的任何步骤看起来难以理解，请务必查看本章前面提供的“创建多任务”配方。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a multi-task that prints
    out the value of an option provided at the two available levels in two different
    tasks:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个多任务，该任务打印出在两个不同任务的两个可用级别提供的选项值：
- en: 'We''ll start by registering a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先使用`registerMultiTask`函数在Grunt文件中的主函数末尾添加以下代码来注册一个名为`display`的多任务：
- en: '[PRE45]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'With the task registered, we can fill the empty function with the following
    code that prints a message containing the value of the `foo` option:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务注册后，我们可以用以下代码填充空函数，该代码打印包含`foo`选项值的消息：
- en: '[PRE46]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tip
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the `this.options` method provided in the scope of the task function
    will automatically merge the task and target options, overriding the task options
    if they are provided in the target.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在任务函数的作用域中提供的`this.options`方法将自动合并任务和目标选项，如果目标中提供了任务选项，则将覆盖任务选项。
- en: 'For more information about the `this.options` method, visit the following URL:'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 想要了解更多关于`this.options`方法的信息，请访问以下网址：
- en: '[http://gruntjs.com/api/inside-tasks#this.options](http://gruntjs.com/api/inside-tasks#this.options)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/api/inside-tasks#this.options](http://gruntjs.com/api/inside-tasks#this.options)'
- en: 'Now that we have a registered and functional task, we can set up some sample
    configuration, which we''ll use to demonstrate the task''s behavior:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经注册并启用了一个任务，我们可以设置一些样本配置，我们将使用它来演示任务的行为：
- en: '[PRE47]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'With our task created and supplied with a sample configuration, we can try
    it out with the `first` target by running the `grunt display:first` command, which
    should provide output similar to the following:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的任务创建并提供了样本配置后，我们可以通过运行`grunt display:first`命令来尝试使用`first`目标，该命令应该提供类似于以下输出的结果：
- en: '[PRE48]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now that we''ve seen how the `first` target behaves, we can try it out with
    the `second` target by running the `grunt display:second` command, which should
    produce output similar to the following:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经看到了`first`目标的行为，我们可以通过运行`grunt display:second`命令来尝试使用`second`目标，该命令应该产生类似于以下输出的结果：
- en: '[PRE49]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Using files in a task
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在任务中使用文件
- en: Tasks are commonly required to access a specific set of files, either using
    the data they contain, or altering it in some way. Grunt provides a uniform way
    of specifying sets of files using the `src`, `dest`, and `files` properties that
    can be used at either the task or target levels.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 任务通常需要访问一组特定的文件，无论是使用它们包含的数据，还是以某种方式修改它。Grunt通过`src`、`dest`和`files`属性提供了一种统一的方式来指定文件集，这些属性可以在任务或目标级别使用。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll be working with the basic project structure we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在第 1 章 [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting
    Started with Grunt") 中创建的 *在项目中安装 Grunt* 配方中的基本项目结构，即 *开始使用 Grunt*。如果您还不熟悉其内容，请务必参考。
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a multi-task* recipe provided earlier in this chapter.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个配方中的任何步骤看起来难以理解，请务必查看本章前面提供的 *创建多任务* 配方。
- en: How to do it...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating some sample data files and
    a simple task that prints their contents:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一些样本数据文件和一个简单的打印其内容的任务：
- en: 'Let''s start by creating two sample files called `one.dat` and `two.dat` in
    a new directory called `data` and providing them with the following contents:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在名为 `data` 的新目录中创建两个名为 `one.dat` 和 `two.dat` 的样本文件，并给它们以下内容：
- en: '[PRE50]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we''ll register a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `registerMultiTask` 函数注册一个名为 `display` 的多任务，通过将以下代码添加到我们的 Grunt 文件中的主函数末尾：
- en: '[PRE51]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'With the task registered, we can now fill the empty function with the following
    code that iterates over the indicated files and prints out their contents:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册任务后，我们现在可以填充空函数，以下代码将遍历指定的文件并打印其内容：
- en: '[PRE52]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Tip
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the `this.files` property is only provided inside the scope of a multi-task's
    function. It provides a normalized list of all file configurations provided at
    both the task and target levels.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`this.files` 属性仅在多任务函数的作用域内提供。它提供了一个标准化列表，包含在任务和目标级别提供的所有文件配置。
- en: 'For more information about the `this.files` property, visit the following URL:'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 `this.files` 属性的更多信息，请访问以下网址：
- en: '[http://gruntjs.com/api/inside-tasks#this.files](http://gruntjs.com/api/inside-tasks#this.files)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/api/inside-tasks#this.files](http://gruntjs.com/api/inside-tasks#this.files)'
- en: 'In order to demonstrate our task, we can now add some configuration to our
    `grunt.initConfig` call, which will target all the files contained in the `data`
    directory:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示我们的任务，我们现在可以在 `grunt.initConfig` 调用中添加一些配置，这将针对 `data` 目录中包含的所有文件：
- en: '[PRE53]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'With everything set up, we can now give the task a try by running the `grunt
    display` command, which should produce output similar to the following:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，我们现在可以通过运行 `grunt display` 命令来尝试任务，它应该产生类似于以下内容的输出：
- en: '[PRE54]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Apart from just reading from files, we will probably reach a point where we''d
    like to write to a file. The following steps alter the previous recipe in such
    a way as to write the contents of the indicated files to a destination file instead
    of printing it to the console:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从文件中读取之外，我们可能还会达到想要写入文件的程度。以下步骤将修改之前的配方，以便将指定文件的内容写入目标文件而不是打印到控制台：
- en: 'First, we''ll change the code in the function of the `display` task we registered
    earlier to the following:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将修改之前注册的 `display` 任务的函数中的代码，改为以下内容：
- en: '[PRE55]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, we''ll alter the project configuration to indicate a destination file
    that the output should be written to:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改项目配置，以指示输出应写入的目标文件：
- en: '[PRE56]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We can now try out our modified task by running the `grunt display` command
    again, which should produce output similar to the following:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过再次运行 `grunt display` 命令来尝试我们的修改后的任务，它应该产生类似于以下内容的输出：
- en: '[PRE57]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'A file named `output.dat` with the following contents should now be present
    in our project folder:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该现在在我们的项目文件夹中有一个名为 `output.dat` 的文件，其内容如下：
- en: '[PRE58]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
