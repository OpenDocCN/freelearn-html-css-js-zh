- en: '*Chapter 2:* Exploring TestCafe Under the Hood'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章：探索TestCafe的内部机制*'
- en: The main goal of this chapter is to learn how TestCafe works under the hood
    and how it can be used in **test automation** to cover different features of websites
    and portals. We will get acquainted with the architecture of TestCafe, its API,
    and custom client-side code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是学习TestCafe是如何在内部工作的，以及它如何被用于**测试自动化**来覆盖网站和门户的不同功能。我们将熟悉TestCafe的架构、其API和自定义客户端代码。
- en: These topics will give us the ability to understand what main methods and functions
    of TestCafe are available out of the box and how to invoke them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题将使我们能够了解TestCafe提供的哪些主要方法和函数，以及如何调用它们。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Scouting the TestCafe architecture.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索TestCafe架构。
- en: Learning about the TestCafe API.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解TestCafe API。
- en: Executing custom client-side code.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行自定义客户端代码。
- en: Scouting the TestCafe architecture
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索TestCafe架构
- en: 'From the beginning of time, end-to-end web testing frameworks have depended
    on external drivers to emulate user actions in real browsers. This approach, however,
    has a number of downsides:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从时间的开始，端到端Web测试框架一直依赖于外部驱动程序来在真实浏览器中模拟用户操作。然而，这种方法有几个缺点：
- en: '**Third-party dependencies and a limited number of supported browsers**: You
    had to download, install, configure, and update additional drivers or libraries
    for each test environment (and sometimes even for each test run). In addition
    to that, you could only use the browsers supported by each driver.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方依赖和有限支持的浏览器数量**：你必须为每个测试环境（有时甚至为每个测试运行）下载、安装、配置和更新额外的驱动程序或库。除此之外，你只能使用每个驱动程序支持的浏览器。'
- en: '**Lack of flexibility**: Old tools were unable to operate on the tested page
    directly. As long as the test code does not interfere with the app code, operating
    on the tested page directly enables the tool to execute many additional scenarios
    and workarounds. For example, this way it can add and remove styles or change
    the visibility of any elements on the tested page.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏灵活性**：旧工具无法直接在测试页面上操作。只要测试代码不干扰应用程序代码，直接在测试页面上操作可以使工具执行许多额外的场景和解决方案。例如，这样它可以添加和删除样式或更改测试页面上任何元素的可见性。'
- en: '**Code duplication**: Legacy testing frameworks ran with the same browser instance
    during the entire test run, maintaining the tested web application state from
    test to test (and keeping the same values in cookies and storage). As a consequence,
    end-to-end tests had a huge amount of duplicated code for clearing the web application
    state between tests to avoid interference.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码重复**：传统的测试框架在整个测试运行期间使用相同的浏览器实例，从测试到测试保持被测试的Web应用程序状态（并在cookies和存储中保持相同的值）。因此，端到端测试在测试之间清除Web应用程序状态以避免干扰时，有大量的重复代码。'
- en: However, TestCafe has a fix for each of these problems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，TestCafe为每个这些问题都提供了一个解决方案。
- en: The core idea behind the architecture of TestCafe is that users should not need
    any external drivers to run end-to-end browser tests. Instead, all the test scripts
    that emulate user actions can be executed from the page itself. This enables a
    true cross-platform and cross-browser approach as tests will be able to run on
    any device with a modern browser!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe架构背后的核心思想是用户不需要任何外部驱动程序来运行端到端浏览器测试。相反，所有模拟用户动作的测试脚本都可以从页面本身执行。这使得真正的跨平台和跨浏览器方法成为可能，因为测试将能够在任何具有现代浏览器的设备上运行！
- en: 'After each test finishes its execution, TestCafe purges the browser state:
    it deletes cookies, clears `localStorage` and `sessionStorage`, and reloads the
    page. If you launch several tests in parallel, TestCafe executes each test run
    in an independent server-side context to prevent server-side collisions.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试执行完成后，TestCafe都会清除浏览器状态：它会删除cookies，清除`localStorage`和`sessionStorage`，并重新加载页面。如果你并行启动多个测试，TestCafe会在独立的服务器端上下文中执行每个测试运行，以防止服务器端冲突。
- en: 'TestCafe execution can be split into two parts:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe的执行可以分为两个部分：
- en: Server-side (in the Node.js process).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端（在Node.js进程中）。
- en: Client-side (in the browser).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端（在浏览器中）。
- en: Let's take a look at each of these parts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些部分的每一个。
- en: The server side
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端
- en: Test code is performed in the Node.js environment on the **server side**. This
    enables TestCafe to use advantages of standalone server-side code, including the
    possibility of launching tested web application servers before tests and enhanced
    control over the testing environment and test execution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码在**服务器端**的 Node.js 环境中执行。这使得 TestCafe 能够利用独立服务器端代码的优点，包括在测试之前启动测试的 Web 应用程序服务器，以及增强对测试环境和测试执行的掌控。
- en: 'Executing test code in Node.js provides a lot of advantages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中执行测试代码提供了许多优点：
- en: Database preparation and the launching of the application can be done from within
    the tests.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在测试中完成数据库准备和应用程序的启动。
- en: Tests have access to the server's filesystem, so you can read data or create
    files needed for testing.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试可以访问服务器的文件系统，因此你可以读取测试所需的数据或创建文件。
- en: Tests can use all recent syntax features of Node.js. In addition to that, you
    can include and utilize any Node.js third-party packages.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试可以使用 Node.js 的所有最新语法功能。此外，你还可以包含并利用任何 Node.js 第三方包。
- en: Improved stability and speed of execution due to test logic separation from
    automation scripts.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于测试逻辑与自动化脚本分离，提高了稳定性和执行速度。
- en: Since Node.js code executes on the server, it doesn't have direct access to
    the **Document Object Model (DOM)** of the page or browser API, but this is handled
    by custom client-side functions that have access to the DOM and are executed in
    the browser context.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Node.js 代码在服务器上执行，它无法直接访问页面或浏览器的**文档对象模型 (DOM)**，但这由具有访问 DOM 并在浏览器上下文中执行的定制客户端函数处理。
- en: The client side
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端
- en: TestCafe automation scripts are designed to imitate user actions on any tested
    page. Their main goal is to enable you to write high-level cross-browser tests,
    so element-focusing, triggering events, and processing attributes are performed
    in the same way as a real human would in a browser.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 自动化脚本旨在模拟任何测试页面上用户的行为。它们的主要目标是让你能够编写高级跨浏览器测试，因此元素聚焦、触发事件和处理属性的方式与真实人类在浏览器中操作的方式相同。
- en: Scripts that emulate user activity (TestCafe internal scripts) run on the **client
    side** on the tested page in the browser. This enables TestCafe to utilize the
    advantages of browser scripts, including built-in smart waits, mobile testing,
    and user roles. For client-side code to work in the browser, TestCafe proxies
    the tested page on the server and injects the scripts into its code. This approach
    is also known as a reverse proxy. When you run TestCafe tests, the browser address
    bar shows a URL that is prefixed with some digits – this is because TestCafe uses
    its own open source URL-rewriting proxy ([https://github.com/DevExpress/testcafe-hammerhead](https://github.com/DevExpress/testcafe-hammerhead))
    and proxies the tested pages.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟用户活动的脚本（TestCafe 内部脚本）在浏览器中测试页面的**客户端**上运行。这使得 TestCafe 能够利用浏览器脚本的优点，包括内置的智能等待、移动测试和用户角色。为了使客户端代码在浏览器中工作，TestCafe
    在服务器上代理测试页面并将脚本注入其代码中。这种方法也被称为反向代理。当你运行 TestCafe 测试时，浏览器地址栏显示的 URL 前缀有一些数字——这是因为
    TestCafe 使用其自己的开源 URL 重写代理 ([https://github.com/DevExpress/testcafe-hammerhead](https://github.com/DevExpress/testcafe-hammerhead))
    并代理测试页面。
- en: 'When you run tests with TestCafe, a reverse proxy is automatically launched
    locally on your computer. It injects automation scripts into the tested page,
    so neither the page code nor the resources it communicates with can tell that
    the page has been modified. In other words, when TestCafe proxies the tested page,
    it adds automation scripts and rewrites all the URLs on the tested page to point
    to the proxy:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 TestCafe 运行测试时，反向代理会自动在你的计算机上本地启动。它将自动化脚本注入测试页面，因此页面代码或与之通信的资源都无法知道页面已被修改。换句话说，当
    TestCafe 代理测试页面时，它会添加自动化脚本并将测试页面上所有 URL 重写以指向代理：
- en: '![Figure 2.1 – TestCafe reverse proxies between the user''s browser and the
    web server'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.1 – TestCafe 反向代理在用户的浏览器和 Web 服务器之间'
- en: '](img/Figure_2.1_B16280.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.1_B16280.jpg](img/Figure_2.1_B16280.jpg)'
- en: Figure 2.1 – TestCafe reverse proxies between the user's browser and the web
    server
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.1 – TestCafe 反向代理在用户的浏览器和 Web 服务器之间
- en: When the browser refers to these new, rewritten URLs, the original resources
    are also proxied and enhanced in the same way. TestCafe also mocks the browser
    API to separate automation scripts from the rest of the page code. The proxying
    mechanism is absolutely safe – it guarantees that the page appears to be hosted
    at the original URL, even to the test code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器引用这些新的、重写的 URL 时，原始资源也会以相同的方式代理和增强。TestCafe 还模拟浏览器 API 以将自动化脚本与页面其余代码分离。代理机制绝对安全
    – 它保证页面看起来像是在原始 URL 上托管，即使是测试代码也是如此。
- en: In this section, we reviewed how TestCafe operates from the server and client
    sides. We also learned about the main advantages of this architecture, including
    the possibility to prelaunch applications before tests, extend control over testing
    environments, proxying and injecting scripts, which enables smart waiting, mobile
    testing, and user roles, which we will discuss a bit later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了 TestCafe 从服务器和客户端操作的方式。我们还了解了这种架构的主要优势，包括在测试之前预览应用程序的可能性、扩展对测试环境的控制、代理和注入脚本，这使智能等待、移动测试和用户角色成为可能，我们将在稍后讨论这些内容。
- en: TestCafe supports JavaScript – the most popular programming language for web
    development – which allows most users to use their existing coding skills and
    minimizes the learning curve for newcomers. In addition to that, its clear API
    makes tests easy to create, read, and maintain. So, let's see what methods TestCafe
    has to offer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 支持 JavaScript – 这是网页开发中最受欢迎的编程语言 – 这允许大多数用户使用他们现有的编码技能，并最小化了新手的学习曲线。除此之外，它清晰的
    API 使测试易于创建、阅读和维护。因此，让我们看看 TestCafe 提供了哪些方法。
- en: Learning about the TestCafe API
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 TestCafe API
- en: Since the server-side code runs in Node.js, tests should be written in JavaScript
    (TypeScript and CoffeeScript are also supported, but eventually, everything should
    be transpiled into JavaScript).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务器端代码在 Node.js 中运行，因此测试应该用 JavaScript（TypeScript 和 CoffeeScript 也受支持，但最终一切都应该转换为
    JavaScript）编写。
- en: 'TestCafe utilizes a minimalistic API that provides less than a few dozen methods,
    which are then transformed into user actions on the page. As our tests will be
    using the TestCafe API methods to interact with the pages, let''s review the main
    interaction groups supported in TestCafe:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 使用一个简约的 API，它提供不到几十个方法，这些方法随后被转换成页面上的用户操作。由于我们的测试将使用 TestCafe API 方法与页面交互，让我们回顾
    TestCafe 支持的主要交互组：
- en: Elements selection.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素选择。
- en: Actions.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作。
- en: Assertions.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言。
- en: User roles.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户角色。
- en: Let's discover each of these interactions in more detail.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解这些交互中的每一个。
- en: Elements selection
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素选择
- en: TestCafe utilizes an advanced mechanism with built-in waiting to locate target
    elements for an action or assertion. To perform an action (such as click, hover,
    type, and so on) or to make an assertion, you should first identify the target
    page element. This is as easy as specifying a standard CSS selector. For more
    complex situations, you can chain methods (such as, for example, getting an element
    by class name, then getting its second child, and then finally, getting its third
    sibling). Selector strings should be passed inside chainable `Selector` constructors
    to create a selector.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 使用一个具有内置等待的高级机制来定位目标元素以执行操作或断言。要执行操作（例如点击、悬停、输入等）或进行断言，您首先应识别目标页面元素。这就像指定一个标准的
    CSS 选择器一样简单。对于更复杂的情况，您可以链式调用方法（例如，例如，通过类名获取一个元素，然后获取其第二个子元素，最后获取其第三个兄弟元素）。选择器字符串应传递给链式
    `Selector` 构造函数以创建选择器。
- en: 'For example, you can click on a button with the `button-test` class, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以点击具有 `button-test` 类的按钮，如下所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For more complex situations, you can traverse the DOM tree by chaining selectors:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的情况，您可以通过链式选择器遍历 DOM 树：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What this chain of selectors does is the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器链所做的是以下内容：
- en: Selects an element with the `block-test` id.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择具有 `block-test` id 的元素。
- en: Selects its child elements.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择其子元素。
- en: Filters them by the `a` tag.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `a` 标签过滤它们。
- en: Selects elements with the `href` attribute that includes `https://test-site.com/main.html`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择具有包含 `https://test-site.com/main.html` 的 `href` 属性的元素。
- en: Selects elements that include the `Second link` text.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择包含 `Second link` 文本的元素。
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If a selector matches several elements, the subsequent methods return results
    for all the elements that were matched.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个选择器匹配多个元素，后续的方法将返回所有匹配的元素的结果。
- en: 'TestCafe provides a number of methods that search for elements relative to
    the selected element (keep in mind that all of these methods should be prepended
    with `Selector(cssSelector)`). Most of these methods accept `index` as an argument,
    which should be a zero-based number (0 will be the closest relative element in
    the set). If the number is negative, the index is counted from the end of the
    matched set. Here are the methods:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 提供了多种方法来搜索相对于所选元素的位置的元素（请注意，所有这些方法都应该以 `Selector(cssSelector)` 开头）。大多数这些方法接受
    `index` 作为参数，它应该是一个基于零的数字（0将是集合中最接近的相对元素）。如果数字是负数，则从匹配集的末尾开始计数。以下是一些方法：
- en: '`.find(cssSelector)`: Finds the descendant nodes of all the nodes in the matched
    set and uses a CSS selector to filter them (the CSS selector should be a string)
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html)).'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.find(cssSelector)`: 在匹配集中查找所有节点的后代节点，并使用 CSS 选择器进行筛选（CSS 选择器应该是一个字符串）([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html)).'
- en: '`.parent(index)`: Finds the parents of all the nodes in the matched set (the
    first element in the set is the closest parent) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html)).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.parent(index)`: 查找匹配集中所有节点之父元素（集合中的第一个元素是最接近的父元素）([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html)).'
- en: '`.child(index)`: Finds the child elements of all nodes in the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html)).'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.child(index)`: 查找匹配集中所有节点的子元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html)).'
- en: '`.sibling(index)`: Finds the sibling elements of all the nodes in the matched
    set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html)).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.sibling(index)`: 查找匹配集中所有节点的兄弟元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html)).'
- en: '`.nextSibling(index)`: Finds the succeeding sibling elements of all the nodes
    in the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html)).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.nextSibling(index)`: 查找匹配集中所有节点的后续兄弟元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html)).'
- en: '`.prevSibling(index)`: Finds the preceding sibling elements of all nodes in
    the matched set and filters them by index ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html)).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.prevSibling(index)`: 查找匹配集中所有节点的前一个兄弟元素，并通过索引进行筛选 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html)).'
- en: 'Now, let''s look at the methods that filter elements from the selector. The
    same as before, all of these methods should be prepended with `Selector(cssSelector)`.
    Here are the methods:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看从选择器中筛选元素的方法。与之前一样，所有这些方法都应该以 `Selector(cssSelector)` 开头。以下是一些方法：
- en: '`.nth(index)`: Selects an element with the specified index in the matched set.
    Here, the `index` argument should be a zero-based number (0 will be the closest
    relative element in the set). If it is negative, the index is counted from the
    end of the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html)).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.nth(index)`: 选择匹配集中指定索引的元素。在这里，`index` 参数应该是一个基于零的数字（0将是集合中最接近的相对元素）。如果它是负数，则从匹配集的末尾开始计数([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html)).'
- en: '`.withText(text)`: Selects elements that contain the specified text. Here,
    `text` is the element''s text content (the `text` argument is a case-sensitive
    string) or a **regular expression** (**RegExp**) that should match the element''s
    text ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html)).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.withText(text)`: 选择包含指定文本的元素。在这里，`text` 是元素的文本内容（`text` 参数是一个区分大小写的字符串）或一个应与元素文本匹配的
    **正则表达式**（**RegExp**）([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html)).'
- en: '`.withExactText(text)`: Selects elements whose text content strictly matches the
    specified text. Here, `text` is the element''s text content (the `text` argument
    is a case-sensitive string) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html)).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.withExactText(text)`: 选择其文本内容严格匹配指定文本的元素。在这里，`text` 是元素的文本内容（`text` 参数是一个区分大小写的字符串）([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html)).'
- en: '`.withAttribute(attrName[, attrValue])`: Selects elements that contain the
    specified attribute. Here, `attrName` can be a case-sensitive string or a `RegExp`,
    and optionally, `attrValue` can also be a case-sensitive string or a `RegExp`
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html)).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.withAttribute(attrName[, attrValue])`: 选择包含指定属性的元素。在这里，`attrName` 可以是一个区分大小写的字符串或一个
    `RegExp`，并且可选的 `attrValue` 也可以是一个区分大小写的字符串或一个 `RegExp` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html)).'
- en: '`.filterVisible()`: Selects elements that do not have the `display: none;` or `visibility:
    hidden;` CSS properties and have non-zero widths and heights ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html)).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.filterVisible()`: 选择不具有 `display: none;` 或 `visibility: hidden;` CSS 属性并且具有非零宽度和高度的元素
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html)).'
- en: '`.filterHidden()`: Selects elements that have the `display: none;` or `visibility:
    hidden;` CSS properties, or zero widths or heights ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html)).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.filterHidden()`: 选择具有 `display: none;` 或 `visibility: hidden;` CSS 属性，或宽度或高度为零的元素
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html)).'
- en: '`.filter(cssSelector)`: Selects elements that match the CSS selector (the CSS
    selector should be a string used to filter child elements). Also, instead of the
    `cssSelector` argument, you could provide `filterFn` (a function predicate used
    to filter the elements) and, optionally, `dependencies` (an object with functions,
    variables, or objects passed to the `filterFn` function) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html)).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.filter(cssSelector)`: 选择与 CSS 选择器匹配的元素（CSS 选择器应是一个用于过滤子元素的字符串）。此外，您还可以提供
    `filterFn`（一个用于过滤元素的函数谓词）和可选的 `dependencies`（一个包含函数、变量或传递给 `filterFn` 函数的对象）([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html)).'
- en: 'When a selector is executed, TestCafe will be waiting for the target node to
    appear on the page until the selector timeout expires. You can specify the timeout
    (in milliseconds) in the following cases:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行选择器时，TestCafe 将等待目标节点出现在页面上，直到选择器超时时间到期。以下情况下，您可以指定超时时间（以毫秒为单位）：
- en: '`selectorTimeout` config option in the `.testcaferc.json` configuration file
    ([https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html](https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html)).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.testcaferc.json` 配置文件中的 `selectorTimeout` 配置选项 ([https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html](https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html)).'
- en: '`--selector-timeout` command-line option ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--selector-timeout` 命令行选项 ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms)).'
- en: '`Selector` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout))
    to set the timeout for any particular element.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selector` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout))
    用于设置任何特定元素的超时。'
- en: During the timeout, the selector is rerun until it returns a DOM element or
    the timeout is surpassed. If TestCafe can't find the corresponding node in the
    DOM, the test is marked as failed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在超时期间，选择器会重新运行，直到返回一个 DOM 元素或超时。如果 TestCafe 在 DOM 中找不到相应的节点，则测试会被标记为失败。
- en: Actions
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 动作
- en: 'The TestCafe API provides a set of action methods to interact with the page
    (such as click, type, select text, hover, and so on). You can call them one after
    another in a chained fashion. All of these methods should be prepended with `t`
    as they are the methods of the test controller object ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/)).
    Also, `selector` can be a string, selector, DOM node, function, or Promise; and
    optionally, you can use `options`, which is an object with a set of options containing
    supplementary parameters for the action (unless otherwise specified). Here are
    all the main action methods:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe API 提供了一套动作方法来与页面交互（例如点击、输入、选择文本、悬停等）。您可以将它们依次以链式方式调用。所有这些方法都应该以 `t`
    开头，因为它们是测试控制器对象的方法 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/))。此外，`selector`
    可以是一个字符串、选择器、DOM 节点、函数或 Promise；并且您可以可选地使用 `options`，它是一个包含动作补充参数的选项集的对象（除非另有说明）。以下是所有主要动作方法：
- en: '`.click(selector[, options])`: Clicks on an element on a page ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html)).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.click(selector[, options])`: 在页面上点击一个元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html)).'
- en: '`.doubleClick(selector[, options])`: Double-clicks on an element on a page
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html)).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.doubleClick(selector[, options])`: 在页面上双击一个元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html)).'
- en: '`.rightClick(selector[, options])`: Right-clicks on an element on a page ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html)).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.rightClick(selector[, options])`: 在页面上右击一个元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html)).'
- en: '`.pressKey(keys[, options])`: Presses the specified keyboard keys. Here, `keys`
    is a sequence of keys and key combinations to be pressed ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html)).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pressKey(keys[, options])`: 按下指定的键盘键。在这里，`keys` 是要按下的键和键组合的序列 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html)).'
- en: '`.navigateTo(url)`: Navigates to the specified URL. Here, `url` is a string
    with the URL to navigate to (which can be absolute or relative to the current
    page) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html)).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navigateTo(url)`: 导航到指定的 URL。在这里，`url` 是要导航到的 URL 字符串（可以是相对于当前页面的绝对路径或相对路径）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html)).'
- en: '`.typeText(selector, text[, options])`: Types the specified text into an input
    element. Here, `text` is a string of the text to be typed into the specified web
    page element ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html)).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.typeText(selector, text[, options])`: 将指定的文本输入到输入元素中。在这里，`text` 是要输入到指定网页元素的文本字符串
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html)).'
- en: '`.selectText(selector[, startPos][, endPos][, options])`: Selects text in input
    elements of various types. Here, `startPos` is the number (zero-based integer,
    0 by default) of the start position of the selection. Optionally, `endPos` is
    the number (zero-based integer; by default, it is equal to the length of the visible
    text content) of the end position of the selection ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html)).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.selectText(selector[, startPos][, endPos][, options])`: 在不同类型的输入元素中选择文本。在这里，`startPos`
    是选择开始位置的数字（基于零的整数，默认为 0）。可选的 `endPos` 是选择结束位置的数字（基于零的整数；默认等于可见文本内容的长度）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html)).'
- en: '`.hover(selector[, options])`: Hovers the mouse pointer over a web page element
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html)).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.hover(selector[, options])`: 将鼠标指针悬停在网页元素上 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html)).'
- en: '`.drag(selector, dragOffsetX, dragOffsetY[, options])`: Drags an element to
    a specified offset. Here, `dragOffsetX` is the number of pixels for the *X* offset
    (horizontal) of the drop coordinates from the original position of the mouse pointer,
    and `dragOffsetY` is the number of pixels for the *Y* offset (vertical) of the
    drop coordinates from the original position of the mouse pointer ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html)).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.drag(selector, dragOffsetX, dragOffsetY[, options])`: 将元素拖动到指定的偏移位置。在这里，`dragOffsetX`
    是从鼠标指针原始位置到放下坐标的 *X* 偏移像素数，而 `dragOffsetY` 是从鼠标指针原始位置到放下坐标的 *Y* 偏移像素数 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html)).'
- en: '`.dragToElement(selector, destinationSelector[, options])`: Drags an element
    onto another web page element. Here, `destinationSelector` should identify the
    web page element that will be the drop location ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html)).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.dragToElement(selector, destinationSelector[, options])`: 将元素拖动到另一个网页元素上。在这里，`destinationSelector`
    应该标识将成为放下位置的网页元素 ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html)).'
- en: '`.setFilesToUpload(selector, filePath)`: Adds file paths to the specified file
    upload input. Here, `filePath` is a string or an array with the path to the uploaded
    file (or several paths, in the case of an array). Relative paths are resolved
    against the folder with the test file ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html)).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.setFilesToUpload(selector, filePath)`: 将文件路径添加到指定的文件上传输入中。在这里，`filePath`是一个字符串或一个包含上传文件路径（或多个路径，如果是数组）的数组。相对路径相对于测试文件所在的文件夹解析（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html)）。'
- en: '`.clearUpload(selector)`: Deletes all the file paths from the specified file
    upload input ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html)).'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.clearUpload(selector)`: 从指定的文件上传输入中删除所有文件路径（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html)）。'
- en: '`.takeScreenshot([options])`: Takes a screenshot of the entire page. The optional
    `options` object can include the following properties: the `path` string with
    the screenshot file''s relative path and name or a `fullPage` boolean (false by
    default) that specifies if the full page should be captured, including content
    that is not visible due to overflow ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html)).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.takeScreenshot([options])`: 对整个页面进行截图。可选的`options`对象可以包含以下属性：包含截图文件相对路径和名称的`path`字符串或一个指定是否捕获整个页面的`fullPage`布尔值（默认为false），包括由于溢出而不可见的页面内容（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html)）。'
- en: '`.takeElementScreenshot(selector[, path][, options])`: Takes a screenshot of
    the specified web page element. Here, `path` (an optional argument) is a string
    with the screenshot file''s relative path and name ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html)).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.takeElementScreenshot(selector[, path][, options])`: 对指定的网页元素进行截图。在这里，`path`（一个可选参数）是一个字符串，包含截图文件的相对路径和名称（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html)）。'
- en: '`.switchToIframe(selector)`: Switches the browsing context of the test to the
    specified `<iframe>` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html)).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.switchToIframe(selector)`: 将测试的浏览上下文切换到指定的`<iframe>`（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html)）。'
- en: '`.switchToMainWindow()`: Switches the browsing context of the test from an
    `<iframe>` back to the main window ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html)).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.switchToMainWindow()`: 将测试的浏览上下文从`<iframe>`切换回主窗口（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html)）。'
- en: '`.setNativeDialogHandler(fn(type, text, url)[, options])`: Specifies a handler
    function to deal with native dialogs triggered during the test run. Here, `fn(type,
    text, url)` can be a function or a client function that will be invoked whenever
    a native dialog is triggered (`null` to delete the native dialog handler). The
    handler function can utilize three arguments: `type`, which is a string with the
    type of the native dialog (`confirm`, `alert`, `prompt`, or `beforeunload`); `text`,
    which is a string with the dialog message text; and `url`, which is a string with
    the URL of the page that triggered the dialog (used to check whether the dialog
    was called from the main window or an `<iframe>`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html)).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.setNativeDialogHandler(fn(type, text, url)[, options])`: 指定一个处理函数来处理测试运行期间触发的原生对话框。在这里，`fn(type,
    text, url)` 可以是一个函数或客户端函数，每当触发原生对话框时都会被调用（`null` 用于删除原生对话框处理函数）。处理函数可以利用三个参数：`type`，它是一个字符串，表示原生对话框的类型（`confirm`、`alert`、`prompt`
    或 `beforeunload`）；`text`，它是一个字符串，表示对话框的消息文本；以及 `url`，它是一个字符串，表示触发对话框的页面的 URL（用于检查对话框是否从主窗口或
    `<iframe>` 中调用）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html))。'
- en: '`.getNativeDialogHistory()`: Provides a history of the native dialogs that
    were triggered ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html)).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.getNativeDialogHistory()`: 提供已触发的原生对话框的历史记录([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html))。'
- en: '`.resizeWindow(width, height)`: Resizes a window to fit the provided width
    and height, where `width` is the value of the new width (in pixels) and `height`
    is the value of the new height (in pixels) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html)).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.resizeWindow(width, height)`: 将窗口调整大小以适应提供的宽度和高度，其中 `width` 是新宽度的值（以像素为单位），`height`
    是新高度的值（以像素为单位）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html))。'
- en: '`.resizeWindowToFitDevice(deviceName[, options])`: Resizes the window to fit
    the screen of the specified mobile device, where `deviceName` is a string with
    the device name ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html)).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.resizeWindowToFitDevice(deviceName[, options])`: 将窗口调整大小以适应指定移动设备的屏幕，其中 `deviceName`
    是设备名称的字符串([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html))。'
- en: '`.maximizeWindow()`: Maximizes the browser window ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html)).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.maximizeWindow()`: 最大化浏览器窗口([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html))。'
- en: '`.wait(timeout)`: Pauses a test execution for a specified period of time. Here,
    `timeout` is the length of the pause duration (in milliseconds) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html)).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.wait(timeout)`: 暂停测试执行指定的时间。在这里，`timeout` 是暂停时间的长度（以毫秒为单位）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html))。'
- en: Assertions
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: 'TestCafe allows you to verify elements, page properties, and parameters (equals,
    contains, greater, match, and so on). To write assertions, use the test controller''s
    `t.expect` method, followed by an assertion method that accepts an expected value
    and optional arguments; `message` is the assertion message string that shows up
    in the report if the test fails and `options` is an object with a set of options
    containing supplementary parameters for the assertion. Here are all the assertion
    methods available in TestCafe out of the box:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe 允许您验证元素、页面属性和参数（等于、包含、大于、匹配等）。要编写断言，请使用测试控制器的`t.expect`方法，后跟接受预期值和可选参数的断言方法；`message`是断言消息字符串，如果测试失败，则显示在报告中，而`options`是一个包含断言补充参数的选项对象。以下是
    TestCafe 中所有内置的断言方法：
- en: '`.expect(actual).eql(expected[, message][, options])`: Verifies that the `actual`
    value is equal to the `expected` value. Here, `actual` is any type of comparison
    value and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html)).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).eql(expected[, message][, options])`: 验证`actual`值是否等于`expected`值。在这里，`actual`是任何类型的比较值，而`expected`是任何类型的预期值([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html))。'
- en: '`.expect(actual).notEql(expected[, message][, options])`: Verifies that the
    `actual` value does not equal the `expected` value. Here, `actual` is any type
    of comparison value and `expected` is any type of value that is expected not to
    be equal to `actual` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html)).'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notEql(expected[, message][, options])`: 验证`actual`值是否不等于`expected`值。在这里，`actual`是任何类型的比较值，而`expected`是任何类型的预期值，它不应等于`actual`([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html))。'
- en: '`.expect(actual).ok([message][, options])`: Verifies that the `actual` value
    is `true`. Here, `actual` is any type of value tested in the assertion (the assertion
    will pass if the actual value is `true`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html)).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).ok([message][, options])`: 验证`actual`值是否为`true`。在这里，`actual`是在断言中测试的任何类型的值（如果实际值为`true`，则断言将通过）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html))。'
- en: '`.expect(actual).notOk([message][, options])`: Verifies that the `actual` value
    is `false`. Here, `actual` is any type of value tested in the assertion (the assertion
    will pass if the actual value is `false`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html)).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notOk([message][, options])`: 验证`actual`值是否为`false`。在这里，`actual`是在断言中测试的任何类型的值（如果实际值为`false`，则断言将通过）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html))。'
- en: '`.expect(actual).contains(expected[, message][, options])`: Verifies that the
    `actual` value contains the `expected` value. Here, `actual` is any type of comparison
    value and `expected` is any type of expected value (the assertion will pass if
    the actual value contains the expected value) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html)).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).contains(expected[, message][, options])`: 验证`actual`值是否包含`expected`值。在这里，`actual`是任何类型的比较值，而`expected`是任何类型的预期值（如果实际值包含预期值，则断言将通过）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html))。'
- en: '`.expect(actual).notContains(expected[, message][, options])`: Verifies that
    the `actual` value contains the `expected` value. Here, `actual` is any type of
    comparison value, and `expected` is any type of expected value (the assertion
    will pass if the actual value does not contain the expected value) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html)).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notContains(expected[, message][, options])`: 验证`actual`值是否包含`expected`值。在这里，`actual`是任何类型的比较值，而`expected`是任何类型的预期值（如果实际值不包含预期值，则断言通过）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html)）。'
- en: '`.expect(actual).typeOf(typeName[, message][, options])`: Asserts that the
    `actual` value type is `typeName`. Here, `actual` is any type of comparison value
    and `typeName` is a string of the expected type of an actual value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html)).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).typeOf(typeName[, message][, options])`: 断言`actual`值的类型是`typeName`。在这里，`actual`是任何类型的比较值，而`typeName`是实际值的预期类型字符串([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html)）。'
- en: '`.expect(actual).notTypeOf(typeName[, message][, options])`: Asserts that the
    `actual` value type is not `typeName`. Here, `actual` is any type of comparison
    value and `typeName` is a string of the type of the actual value that causes an
    assertion to fail ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html)).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notTypeOf(typeName[, message][, options])`: 断言`actual`值的类型不是`typeName`。在这里，`actual`是任何类型的比较值，而`typeName`是导致断言失败的实际值类型的字符串([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html)）。'
- en: '`.expect(actual).gt(expected[, message][, options])`: Verifies that the `actual`
    value is greater than the `expected` value. Here, `actual` is the number tested
    in the assertion (the assertion will pass if the actual value is greater than
    the expected value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html)).'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).gt(expected[, message][, options])`: 验证`actual`值是否大于`expected`值。在这里，`actual`是断言中测试的数字（如果实际值大于预期值，则断言通过）而`expected`是任何类型的预期值（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html)）。'
- en: '`.expect(actual).gte(expected[, message][, options])`: Verifies that the `actual`
    value is greater than or equal to the `expected` value. Here, `actual` is a number
    tested in the assertion (the assertion will pass if the actual value is greater
    than or equal to the expected value), and `expected` is any type of expected value
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html)).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).gte(expected[, message][, options])`: 验证`actual`值是否大于或等于`expected`值。在这里，`actual`是断言中测试的数字（如果实际值大于或等于预期值，则断言通过），而`expected`是任何类型的预期值([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html)）。'
- en: '`.expect(actual).lt(expected[, message][, options])`: Verifies that the `actual`
    value is less than the `expected` value. Here, `actual` is the number tested in
    the assertion (the assertion will pass if the actual value is less than the expected
    value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html)).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).lt(expected[, message][, options])`: 验证`actual`值是否小于`expected`值。在这里，`actual`是断言中测试的数字（如果实际值小于预期值，则断言通过）而`expected`是任何类型的预期值([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html)）。'
- en: '`.expect(actual).lte(expected[, message][, options])`: Verifies that the `actual`
    value is less than or equal to the `expected` value. Here, `actual` is the number
    tested in the assertion (the assertion will pass if the actual value is less than
    or equal to the expected value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html)).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).lte(expected[, message][, options])`: 验证`actual`值是否小于或等于`expected`值。在这里，`actual`是断言中测试的数字（如果实际值小于或等于预期值，则断言将通过）而`expected`是任何类型的预期值（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html)）。'
- en: '`.expect(actual).within(start, finish[, message][, options])`: Verifies that
    the `actual` value is within a specified range from start to finish (bounds are
    inclusive). Here, `actual` is a number, `start` is the number for the lower range
    (inclusive), and `finish` is the number for the upper range (inclusive) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html)).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).within(start, finish[, message][, options])`: 验证`actual`值是否在从开始到结束的指定范围内（边界是包含的）。在这里，`actual`是一个数字，`start`是下限的数字（包含），而`finish`是上限的数字（包含）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html)）。'
- en: '`.expect(actual).notWithin(start, finish[, message][, options])`: Verifies
    that the `actual` value is not within the specified range from start to finish
    (bounds are inclusive). Here, `actual` is a number, `start` is the number for
    the lower range (inclusive), and `finish` is the number for the upper range (inclusive)
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html)).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notWithin(start, finish[, message][, options])`: 验证`actual`值是否不在从开始到结束的指定范围内（边界是包含的）。在这里，`actual`是一个数字，`start`是下限的数字（包含），而`finish`是上限的数字（包含）([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html)）。'
- en: '`.expect(actual).match(re[, message][, options])`: Verifies that the `actual`
    value matches the `re` regular expression. Here, `actual` is any type of comparison
    value and `re` is a regular expression that is expected to match the actual value
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html)).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).match(re[, message][, options])`: 验证`actual`值是否与`re`正则表达式匹配。在这里，`actual`是任何类型的比较值，而`re`是预期匹配实际值的正则表达式（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html)）。'
- en: '`.expect(actual).notMatch(re[, message][, options])`: Verifies that the `actual`
    value does not match the `re` regular expression. Here, `actual` is any type of
    comparison value and `re` is a regular expression that is expected not to match
    the actual value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html)).'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.expect(actual).notMatch(re[, message][, options])`: 验证`actual`值是否不匹配`re`正则表达式。在这里，`actual`是任何类型的比较值，而`re`是预期不匹配实际值的正则表达式（[https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html)）。'
- en: User roles
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户角色
- en: 'TestCafe has a built-in user role mechanism that emulates user actions for
    logging in to a website. It also saves the logged-in state of each user in a separate
    role that can be reused later on in any part of your tests to switch between user
    accounts. This approach gives access to some unique features:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: TestCafe具有内置的用户角色机制，用于模拟用户登录网站的行为。它还保存每个用户的登录状态，这些状态可以在测试的任何部分重复使用，以在用户账户之间切换。这种方法提供了访问一些独特功能：
- en: Login actions are not duplicated upon switching to a previously used role during
    the same session. So, for example, if you activate a role in the `beforeEach`
    hook, the login actions will run only once before the first test. All further
    tests will just reuse the existing authentication data.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一会话期间切换到之前使用的角色时，登录操作不会重复。例如，如果您在`beforeEach`钩子中激活一个角色，登录操作将只在第一个测试之前运行一次。所有后续的测试将仅重用现有的认证数据。
- en: When you switch roles, the browser automatically navigates back to the page
    where the switch happened, so there is no need to additionally open any URLs for
    a new role (this behavior can be disabled if required).
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您切换角色时，浏览器会自动导航回切换发生的页面，因此不需要为新的角色打开任何URL（如果需要，此行为可以禁用）。
- en: If during a test you log in to several websites, authentication data from cookies
    and browser storage is saved in the active role. When switching back to this role
    in the same test, you will be logged in to all the websites automatically.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在测试期间您登录到多个网站，来自cookie和浏览器存储的认证数据将保存在活动角色中。当在同一测试中切换回此角色时，您将自动登录到所有网站。
- en: An anonymous built-in role that logs you out of all accounts.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个匿名内置角色，可以注销所有账户。
- en: Let's have a look at a practical example of creating and using roles.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看创建和使用角色的实际示例。
- en: 'To create and initialize a role, we will need to use a `Role` constructor.
    Then, the login page URL and actions needed to log in should be passed to `Role`.
    This is shown in the following code block:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和初始化一个角色，我们需要使用`Role`构造函数。然后，将登录页面URL和登录所需的操作传递给`Role`。以下代码块展示了这一过程：
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After you create all the required roles, you can switch between them anytime;
    roles are shared across tests and fixtures. Roles can even be created in a separate
    file and then used in any test fixture that references (requires or imports) this
    file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建所有必需的角色之后，您可以在任何时候切换它们；角色在测试和固定装置之间共享。角色甚至可以创建在单独的文件中，然后在任何引用（需要或导入）此文件的测试固定装置中使用。
- en: To sum up, in this section, we reviewed the TestCafe API and the main methods
    that it provides. We also learned how to select elements, conduct assertions,
    and utilize user roles to switch between different accounts. Now, let's take a
    look at how custom client-side code can be executed in TestCafe to give us even
    more control over the browser.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在本节中，我们回顾了TestCafe API及其提供的主要方法。我们还学习了如何选择元素、进行断言以及利用用户角色在不同账户之间切换。现在，让我们看看如何在TestCafe中执行自定义客户端代码，以获得对浏览器的更多控制。
- en: Executing custom client-side code
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行自定义客户端代码
- en: With TestCafe, you can create client functions that can run on the client side
    (in the browser) and return any serializable value. For example, you can obtain
    the URL of the current page, set cookies, or even manipulate any elements on the
    page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TestCafe，您可以创建可以在客户端（在浏览器中）运行的客户端函数，并返回任何可序列化的值。例如，您可以获取当前页面的URL，设置cookie，甚至操作页面上的任何元素。
- en: 'In some complex scenarios, TestCafe helps you write code to be executed on
    the tested page. Here are several examples of tasks that can be done with custom
    client-side code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些复杂场景中，TestCafe帮助您编写在测试页面上执行的代码。以下是一些可以使用自定义客户端代码完成的任务示例：
- en: 'Get elements from the web page for further actions. TestCafe allows you to
    create selectors based on client-side code that returns DOM nodes. You can write
    this code in the server-side test and TestCafe will run these functions in the
    browser when it needs to locate an element:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网页获取元素以进行进一步操作。TestCafe允许您根据返回DOM节点的客户端代码创建选择器。您可以在服务器端测试中编写此代码，TestCafe将在需要定位元素时在浏览器中运行这些函数：
- en: '[PRE3]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Obtain data from a client function that returns any serializable object from
    the client side (including any objects that can be converted to JSON). Unlike
    selectors, test code can access the object this client function returns. Usually,
    the data obtained from client functions is used to assert different page parameters.
    Here is an example of getting and verifying a page URL:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从客户端函数获取任何可序列化对象的数据，这些对象来自客户端（包括可以转换为JSON的任何对象）。与选择器不同，测试代码可以访问客户端函数返回的对象。通常，从客户端函数获取的数据用于断言不同的页面参数。以下是一个获取和验证页面URL的示例：
- en: '[PRE4]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inject custom code into the tested page. Injected scripts can then be used
    to add helper functions or to mock browser API:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义代码注入到测试页面中。注入的脚本可以用来添加辅助函数或模拟浏览器API：
- en: '[PRE5]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that you avoid changing the DOM with custom client-side code.
    A rule of thumb is to use client-side code only to explore the page, find and
    return information to the server.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议您避免使用自定义客户端代码更改DOM。一个经验法则是仅使用客户端代码来探索页面，查找并返回信息给服务器。
- en: 'You can find more examples of client-side scripts and injections at the following
    links:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中找到更多客户端脚本和注入的示例：
- en: '[https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html).'
- en: '[https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html](https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html](https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html).'
- en: As we just discovered, TestCafe client functions are quite useful for different
    browser manipulations and getting additional data to verify in our tests.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚刚发现的，TestCafe客户端函数对于不同的浏览器操作和获取测试中需要验证的额外数据非常有用。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how TestCafe works under the hood. We got acquainted
    with the architecture of TestCafe, saw how it performs on client and server sides,
    and learned about the strategies for selecting elements, actions, assertions,
    roles, and custom client-side code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了TestCafe的工作原理。我们熟悉了TestCafe的架构，看到了它在客户端和服务器端的性能表现，并学习了选择元素、动作、断言、角色和自定义客户端代码的策略。
- en: All of this will be used in the upcoming chapters to write our own suite of
    end-to-end tests. In addition to that, you can always use this chapter as a reference
    to search for any particular method or assertion and see how it's called and what
    it does.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些内容都将在接下来的章节中用于编写我们自己的端到端测试套件。除此之外，你还可以随时将本章作为参考，搜索任何特定的方法或断言，并查看其调用方式和功能。
- en: Now, let's move on from the main methods and functions of TestCafe to more practical
    aspects, such as setting up the testing environment for our future automated tests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从TestCafe的主要方法和函数转向更实用的方面，比如为我们的未来自动化测试设置测试环境。
