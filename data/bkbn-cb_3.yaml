- en: Chapter 3. Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 集合
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating a collection of models
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型集合
- en: Getting a model from a collection by its index
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过索引从集合中获取模型
- en: Getting a model from a collection by its ID
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID从集合中获取模型
- en: Adding a model to a collection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型添加到集合中
- en: Removing a model from a collection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合中删除模型
- en: Working with a collection as a stack or as a queue
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将集合作为栈或队列进行操作
- en: Sorting a collection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对集合进行排序
- en: Filtering models in a collection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合中过滤模型
- en: Iterating through a collection
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历集合
- en: Chaining a collection
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接集合
- en: Running No SQL queries on a collection
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合上运行No SQL查询
- en: Storing models of various types in the same collection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一集合中存储不同类型的模型
- en: Implementing a one-to-many relationship
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一对一关系
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When developing applications with Backbone, you often need to work with a number
    of models, which can be organized in a collection. A collection is more than just
    a JavaScript array. Backbone provides various useful methods to work with it.
    Moreover, Backbone collection can easily communicate with a REST server to get
    or post a number of models.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Backbone开发应用程序时，你通常需要与多个模型一起工作，这些模型可以组织到集合中。集合不仅仅是JavaScript数组。Backbone提供了各种有用的方法来处理它。此外，Backbone集合可以轻松与REST服务器通信以获取或发布多个模型。
- en: In this chapter, we are going to learn common operations to work with collections,
    and will discover new extensions which provide amazing functionality.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习与集合一起工作的常见操作，并将发现提供惊人功能的新扩展。
- en: Creating a collection of models
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型集合
- en: In this recipe, we are going to learn how to create a collection of models.
    Collection is an object used for organizing models into an ordered set. There
    are specific methods to sort, filter, and iterate through a collection.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何创建模型集合。集合是一个用于将模型组织成有序集的对象。有特定的方法可以对集合进行排序、过滤和迭代。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Follow these steps to create a collection:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建集合：
- en: Extend the `Backbone.Collection` object and pass the model's object name as
    an option.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`Backbone.Collection`对象并传递模型的对象名称作为选项。
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Initialize a new collection instance and pass the initial array of models.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的集合实例并传递初始的模型数组。
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Backbone.Collection` knows which model object to use when creating new instances,
    because we specified it in the `model` property. Internally, models are stored
    in the `models` array.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.Collection`知道在创建新实例时使用哪个模型对象，因为我们已在`model`属性中指定了它。内部，模型存储在`models`数组中。'
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: We can also initialize a collection with the existing models. Here is how it
    is done.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用现有的模型初始化集合。以下是操作方法。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Getting a model from a collection by its index
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过索引从集合中获取模型
- en: When working with a collection, we may need to get a model at the specific index,
    because it is stored inside the collection.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当与集合一起工作时，我们可能需要获取特定索引处的模型，因为它存储在集合内部。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Use the `at()` method to get a model from a collection at the specific index.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`at()`方法从集合的特定索引处获取模型。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Internally, models are stored in the `models` array, so the first element starts
    with a zero index. `Backbone.Collection` keeps this array in the accurate state
    when we add a new model to a collection, remove one model, or perform sorting.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，模型存储在`models`数组中，因此第一个元素从零索引开始。`Backbone.Collection`在向集合添加新模型、从集合中删除一个模型或执行排序时保持此数组的状态准确。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Be careful when sorting a collection**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**排序集合时要小心**'
- en: When performing a collection, sorting it can update the model indexes, so the
    `at()` method with the same parameter can get different models before and after
    sorting.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行集合操作时，排序可能会更新模型索引，因此具有相同参数的`at()`方法在排序前后可能获取不同的模型。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this section, we are going to learn some interesting details about models
    in a collection.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解有关集合中模型的一些有趣细节。
- en: Getting an index of a collection model
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取集合模型的索引
- en: To get an index of a model stored in a collection, use the `indexOf()` method
    inherited from `Underscore.js`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取存储在集合中的模型的索引，请使用从`Underscore.js`继承的`indexOf()`方法。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Getting an independent copy of a model
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取模型的独立副本
- en: The model object that is retrieved from a collection is the same object stored
    there, so if we modify this object, one object in the collection gets updated.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从集合中检索的模型对象与存储在该处的对象相同，因此如果我们修改此对象，集合中的一个对象会得到更新。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we need to get an independent copy of the model object, we can use the `clone()`
    method of a returned model. Changing the attributes of the cloned model does not
    affect the attributes of the original model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要获取模型对象的独立副本，我们可以使用返回的模型对象的 `clone()` 方法。修改克隆模型的属性不会影响原始模型的属性。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Getting the length of a collection
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取集合的长度
- en: 'There is a way to get the length of a collection. It is done with the help
    of the `length()` method. The following example gets a collection length and then
    obtains the last model from the collection:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以获取集合的长度。这是通过 `length()` 方法完成的。以下示例获取集合长度，然后从集合中获取最后一个模型：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Getting a model from a collection by its ID
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 ID 从集合中获取模型
- en: In our application, we may need to request a model from a collection by its
    ID.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们可能需要通过其 ID 请求集合中的模型。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Follow these steps to get a model from a collection by its ID:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤通过 ID 从集合中获取模型：
- en: To get a model from a collection by its identifier, use the `get()` method.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过其标识符从集合中获取模型，请使用 `get()` 方法。
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To get a model from a collection by its client identifier, you can again use
    the `get()` method.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过其客户端标识符从集合中获取模型，您还可以再次使用 `get()` 方法。
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When getting a model by its ID, `Backbone.Collection` searches for the model
    in the `_byId` array, which stores models mapped to their IDs. Such an implementation
    guarantees the best performance, because there is no need to loop through all
    the models in a collection.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过其 ID 获取模型时，`Backbone.Collection` 会搜索 `_byId` 数组中的模型，该数组存储了映射到其 ID 的模型。这种实现保证了最佳性能，因为无需遍历集合中的所有模型。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: '*Extending an application with plugins* in [Chapter 2](ch02.html "Chapter 2. Models"),
    *Models*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章。模型") *模型* 中 *使用插件扩展应用程序*
- en: Adding a model to a collection
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向集合中添加模型
- en: In this recipe, we are going to learn different ways of adding new models to
    a collection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习向集合添加新模型的不同方法。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Call the `add()` method to add a new model to the end of a collection.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `add()` 方法将新模型添加到集合的末尾。
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code in the `add()` method prevents duplicates from being added to the collection.
    A unique model is inserted into the `models` array and is mapped to its ID in
    the `_byId` array. Also, a reference to the collection is created in the model
    object in the `collection` property.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`add()` 方法中的代码防止重复添加到集合中。唯一模型被插入到 `models` 数组中，并在 `_byId` 数组中映射到其 ID。此外，在 `collection`
    属性中创建了对集合的引用。'
- en: By default, a new model is added to the end of the collection. But in case sorting
    is enabled, or insertion index is specified, the model can be inserted at a different
    position.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新模型被添加到集合的末尾。但如果启用了排序或指定了插入索引，模型可以插入到不同的位置。
- en: When adding a new model to a collection, the `add` event is being triggered.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当向集合中添加新模型时，会触发 `add` 事件。
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In this section, we are going to learn different ways to add a model(s) into
    a collection.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习将模型（s）添加到集合的不同方法。
- en: Adding a model at a specific position
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在特定位置添加模型
- en: 'To add a model at a specific position, we need to pass `{at: index}` as an
    option.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '要在特定位置添加模型，我们需要传递 `{at: index}` 作为选项。'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding multiple models
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加多个模型
- en: We can also add multiple models at the same time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以同时添加多个模型。
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding existing models
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加现有模型
- en: We can also use existing model objects as the arguments for the `add()` method.
    We can pass a single object as well as an array of existing objects.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用现有的模型对象作为 `add()` 方法的参数。我们可以传递单个对象以及现有对象的数组。
- en: See also
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: '*Handling events of Backbone objects* in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), *Events and Bindings*'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 [第 5 章](ch05.html "第 5 章。事件和绑定") *事件和绑定* 中 *处理 Backbone 对象的事件* '
- en: Removing a model from a collection
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从集合中移除模型
- en: In this recipe, we are going to learn about removing a model from a collection.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何从集合中移除模型。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Call the `remove()` method to remove a model from a collection.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `remove()` 方法从集合中移除模型。
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we can pass the model's `id`, `cid`, or even the model object as a parameter.
    We can either pass a single value or an array of values.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以传递模型的 `id`、`cid`，甚至模型对象作为参数。我们可以传递单个值或值的数组。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When calling the `remove()` method, a model is removed from the `models` array,
    and any references between them are removed as well. Thus, the model object itself
    is not destroyed, and we can still work with it if the need arises.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `remove()` 方法时，模型将从 `models` 数组中删除，并且它们之间的任何引用也将被删除。因此，模型对象本身不会被销毁，如果需要，我们仍然可以与之交互。
- en: There's more...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Sometimes, we may need to delete all the existing models from a collection and
    add some others. There is a useful `reset()` method, which does both these jobs
    simultaneously. Here is how it works.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能需要从集合中删除所有现有的模型并添加一些其他模型。有一个有用的 `reset()` 方法，它可以同时完成这两项工作。以下是它是如何工作的。
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Working with a collection as a stack or as a queue
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将集合作为栈或队列使用
- en: There are special methods in Backbone that allow working with a collection as
    a stack or as a queue.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 中有一些特殊的方法允许将集合作为栈或队列使用。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to work with a collection as a stack or as a queue:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将集合作为栈或队列使用：
- en: Call the `push()` method to add a model to the end of a collection.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `push()` 方法将模型添加到集合的末尾。
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Call the `pop()` method to remove and return the last model from a collection.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `pop()` 方法从集合中移除并返回最后一个模型。
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Call the `unshift()` method to add a model at the beginning of a collection.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `unshift()` 方法在集合的开始处添加一个模型。
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Call the `shift()` method to remove and return the first model from a collection.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `shift()` 方法从集合中移除并返回第一个模型。
- en: '[PRE18]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To organize a stack also known as LIFO (last in, first out), we need to use
    the `push` and `pop` (`unshift` and `shift`) methods. To organize a queue also
    known as FIFO (first in, first out), we need to use the `unshift` and `pop` (`push`
    and `shift`) methods.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要组织一个栈，也称为 LIFO（后进先出），我们需要使用 `push` 和 `pop`（`unshift` 和 `shift`）方法。要组织一个队列，也称为
    FIFO（先进先出），我们需要使用 `unshift` 和 `pop`（`push` 和 `shift`）方法。
- en: 'The following image illustrates the difference between a stack and a queue:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了栈和队列之间的区别：
- en: '![How it works...](img/2728OS_03_01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2728OS_03_01.jpg)'
- en: Sorting a collection
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序集合
- en: '`Backbone.js` provides a sorting mechanism, out of the box, which we are going
    to learn in this recipe.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.js` 提供了一个开箱即用的排序机制，我们将在本菜谱中学习。'
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to sort a collection:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤对集合进行排序：
- en: Assign the `comparator` callback to the `comparator` property of a collection
    to maintain the correct order.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `comparator` 回调函数赋值给集合的 `comparator` 属性，以保持正确的顺序。
- en: '[PRE19]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `comparator` callback accepts a single parameter, which is a model object.
    It should return a value according to which the collection is sorted.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`comparator` 回调函数接受一个参数，即模型对象。它应该返回一个值，根据该值对集合进行排序。'
- en: Optionally, call the `sort()` method to force sorting.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，调用 `sort()` 方法强制排序。
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Check the result.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the `comparator` callback is defined, Backbone uses it to insert a new
    model in the `models` array so that it is inserted in the correct order.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `comparator` 回调函数被定义时，Backbone 使用它将新模型插入到 `models` 数组中，以便按正确顺序插入。
- en: If you assign a new `comparator` callback to a collection with existing models,
    you need to trigger sorting manually by calling the `sort()` method.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将新的 `comparator` 回调函数分配给具有现有模型的集合，你需要通过调用 `sort()` 方法手动触发排序。
- en: You also need to call the `sort()` method if the model in the collection gets
    updated. This can be done automatically if you bind sorting on the model's `change`
    event.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集合中的模型被更新，你也需要调用 `sort()` 方法。这可以通过在模型的 `change` 事件上绑定排序来自动完成。
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this section, we are going to define a comparator in a different way.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将以不同的方式定义比较器。
- en: Comparing a pair of models in the comparator
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在比较器中比较一对模型
- en: 'Another way to implement a comparator is to evaluate a pair of models passed
    as parameters and return one of the following values:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 实现比较器的另一种方式是评估作为参数传递的模型对，并返回以下值之一：
- en: -1 (or any negative value), if the first model should come before the second
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -1（或任何负值），如果第一个模型应该在第二个模型之前
- en: 0, if they are of the same rank
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0，如果它们处于相同的等级
- en: 1 (or any positive value), if the first model should come after the second
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1（或任何正值），如果第一个模型应该在第二个模型之后
- en: 'The following example demonstrates sorting by the length of the `description`
    attribute:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了按 `description` 属性的长度进行排序：
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Handling events of Backbone objects* in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), *Events and Bindings*'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 5 章](ch05.html "第 5 章。事件和绑定") *事件和绑定* 中处理 *Backbone 对象的事件*...
- en: Filtering models in a collection
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤集合中的模型
- en: Backbone provides a simple filtering mechanism out of the box, which we can
    use.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 提供了一种简单的过滤机制，我们可以使用它。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To filter models in a collection, use the `where()` method. It accepts a search
    criteria and returns an array of found models.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤集合中的模型，请使用 `where()` 方法。它接受一个搜索标准并返回找到的模型数组。
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is also possible to pass multiple criteria together.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以一起传递多个标准。
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Running No SQL queries on a collection* recipe to learn more about
    advanced filtering
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考关于在集合上运行 No SQL 查询的配方，以了解更多关于高级过滤的信息
- en: Iterating through a collection
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历集合
- en: In this recipe, we are going to discuss various ways of iterating through a
    collection to implement the functionality we need.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将讨论通过遍历集合以实现所需功能的各种方法。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The easiest way to iterate through a collection is to use the `each()` method
    provided by `Underscore.js`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历集合的最简单方法是使用 `Underscore.js` 提供的 `each()` 方法。
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `each()` method, we pass an iterator function, which is executed for
    each model. It accepts the following parameters:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `each()` 方法中，我们传递一个迭代函数，该函数对每个模型执行。它接受以下参数：
- en: '**model**: The model that is being iterated'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：正在迭代的模型'
- en: '**index**: This is the model index'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：这是模型索引'
- en: '**list**: This is the whole model array'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：这是整个模型数组'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`Backbone.js` is based on `Underscore.js`, which provides various useful tools,
    including methods to work with the collections and arrays. Backbone collections
    support some of those functions.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.js` 基于 `Underscore.js`，它提供了各种有用的工具，包括用于处理集合和数组的各种方法。Backbone 集合支持其中的一些功能。'
- en: There's more...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this section, we are going to learn some methods that rely on the iteration
    method but are more specific.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些依赖于迭代方法但更为具体的方法。
- en: Checking every model to match a specific condition
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查每个模型以匹配特定条件
- en: To check every model in a collection that fulfills a specific criteria, use
    the `every()` method. It accepts a callback parameter which should return a `Boolean`
    value if the condition is fulfilled.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查满足特定条件的集合中的每个模型，请使用 `every()` 方法。它接受一个回调参数，如果条件满足，则应返回一个 `Boolean` 值。
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Checking any model to match a specific condition
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查任何模型以匹配特定条件
- en: To check any model in a collection that fulfills a specific criteria, use the
    `some()` method. It accepts a callback parameter which should return a `Boolean`
    value if the condition is fulfilled.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查集合中满足特定条件的任何模型，请使用 `some()` 方法。它接受一个回调参数，如果条件满足，则应返回一个 `Boolean` 值。
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Getting the attribute from each model in a collection
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从集合中的每个模型获取属性
- en: In the previous examples, we used the `pluck()` method, which returns an array
    of values for the specified attribute from each model in a collection. Let's see
    how it works.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了 `pluck()` 方法，该方法从集合中的每个模型返回指定属性的值数组。让我们看看它是如何工作的。
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Performing specific calculations to each model in a collection
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对集合中的每个模型执行特定计算
- en: To perform specific calculations to each model in a collection, use the `map()`
    method. It takes callback as a parameter, executes it for each model in a collection,
    and returns an array of results.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要对集合中的每个模型执行特定计算，请使用 `map()` 方法。它接受回调作为参数，对集合中的每个模型执行它，并返回结果数组。
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Boiling down models in a collection into a single value
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将集合中的模型简化为一个单一值
- en: Models in a collection can be boiled down to a single value using the `reduce()`
    method. Here is how it works.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `reduce()` 方法可以将集合中的模型简化为一个单一值。以下是其工作原理。
- en: '[PRE30]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: There are many helpful methods from `Underscore.js` that can be used with Backbone
    collections. You can find them in `Underscore.js` official docs from [http://documentcloud.github.com/underscore/#collections](http://documentcloud.github.com/underscore/#collections).
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Underscore.js` 提供了许多有用的方法，可以与 Backbone 集合一起使用。您可以在 `Underscore.js` 官方文档中找到它们，网址为
    [http://documentcloud.github.com/underscore/#collections](http://documentcloud.github.com/underscore/#collections)。'
- en: Chaining a collection
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接集合
- en: If you want to perform several Underscore methods in a row, a good way of doing
    it is by chaining one method to the other method.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想连续执行多个 Underscore 方法，一种好的做法是将一个方法链接到另一个方法上。
- en: Let's consider a simple MapReduce example, which calculates the total amount.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的 MapReduce 示例，它计算总金额。
- en: '[PRE31]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, `amounts` is a JavaScript array, and it does not provide the `reduce()`
    method that we can call. To solve this problem, we are calling the `reduce()`
    method provided by `Underscore.js`, which takes an array as the first parameter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`amounts` 是一个 JavaScript 数组，它不提供我们可以调用的 `reduce()` 方法。为了解决这个问题，我们调用由 `Underscore.js`
    提供的 `reduce()` 方法，它将数组作为第一个参数。
- en: How to do it…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: With chaining, it is possible to call one method right after another using the
    `dot` syntax. Here is an example.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用链接，可以使用点符号直接调用一个方法然后是另一个方法。以下是一个示例。
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `chain()` method wraps a value into an object, which provides different
    methods that can be executed, which return their result as a wrapped value. To
    unwrap a result, use the `value()` method.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`chain()` 方法将一个值包装成一个对象，该对象提供了可以执行的不同方法，这些方法返回一个包装后的值。要解包一个结果，请使用 `value()`
    方法。'
- en: See also
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To see more chaining examples, please visit [http://documentcloud.github.com/underscore/#chain](http://documentcloud.github.com/underscore/#chain)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看更多链接示例，请访问 [http://documentcloud.github.com/underscore/#chain](http://documentcloud.github.com/underscore/#chain)
- en: Running No SQL queries on a collection
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集合上运行 No SQL 查询
- en: In the previous recipe we described several techniques, including the one about
    searching the models in a collection with the `where()` method.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中，我们描述了多种技术，包括使用 `where()` 方法在集合中搜索模型的技术。
- en: There are more advanced ways of searching the models in a collection, which
    can be done with the help of a Backbone extension named **Backbone Query**. It
    allows running No SQL (such as MongoDB) queries for searching, sorting, and paging
    the models in a collection.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有更多高级的方法可以在集合中搜索模型，这可以通过名为 **Backbone Query** 的 Backbone 扩展来实现。它允许运行 No SQL（如
    MongoDB）查询以搜索、排序和分页集合中的模型。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download the Backbone Query extension from its GitHub page by going
    to [https://github.com/davidgtonge/backbone_query](https://github.com/davidgtonge/backbone_query).
    To include this extension into your project, save the `backbone-query.js` file
    into the `lib` folder and include the reference to it in `index.html`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问 [https://github.com/davidgtonge/backbone_query](https://github.com/davidgtonge/backbone_query)
    下载 Backbone Query 扩展。要将此扩展包含到你的项目中，将 `backbone-query.js` 文件保存到 `lib` 文件夹中，并在 `index.html`
    中包含对其的引用。
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including the Backbone extension into your project is described in detail in
    the *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。理解 Backbone") 的 *使用插件扩展应用程序* 配方中详细描述了将 Backbone 扩展包含到你的项目中，*理解
    Backbone*。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to perform a No SQL query to a collection:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行对集合的 No SQL 查询：
- en: To allow a No SQL query to be executed, extend a collection from the `Backbone.QueryCollection`
    object instead of a `Backbone.Collection` one.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要允许执行 No SQL 查询，请从 `Backbone.QueryCollection` 对象扩展集合而不是从 `Backbone.Collection`
    对象扩展。
- en: '[PRE33]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the query with the `query()` method.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `query()` 方法运行查询。
- en: '[PRE34]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Optionally, run the `pluck` attribute from the resulting array.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地运行结果数组的 `pluck` 属性。
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Backbone.QueryCollection` extends `Backbone.Collection` and provides the new
    `query()` method, which parses the base query into subqueries recursively and
    uses the `reduce()` method of `Underscore.js` to run queries of the same group
    sequentially.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.QueryCollection` 扩展 `Backbone.Collection` 并提供了新的 `query()` 方法，该方法递归地将基本查询解析为子查询，并使用
    `Underscore.js` 的 `reduce()` 方法依次运行相同组的查询。'
- en: Backbone Query is written initially in CoffeeScript and compiled into JavaScript
    later. So, if you are interested in understanding its source code, see `backbone-query.coffee`.
    It looks quite similar though.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone Query 最初是用 CoffeeScript 编写的，后来编译成 JavaScript。所以，如果你对理解其源代码感兴趣，请查看 `backbone-query.coffee`。尽管如此，它看起来相当相似。
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: This section describes No SQL operators and covers some advanced topics, such
    as grouping, sorting, paging, and caching.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了 No SQL 操作符，并涵盖了一些高级主题，如分组、排序、分页和缓存。
- en: Using standard operators
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用标准操作符
- en: The following operators are common and applied to the attributes of the models
    stored in a collection.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下运算符是常见的，并应用于存储在集合中的模型的属性。
- en: $equal
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $equal
- en: This performs a strict equality test using `===`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用`===`执行严格的相等性测试。
- en: '[PRE36]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If no operator is provided, and the query value is neither a regex nor an array,
    then `$equal` is assumed.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供运算符，并且查询值既不是正则表达式也不是数组，则默认假设为`$equal`。
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: $ne
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $ne
- en: This means not equal, which is the opposite of `$equal`, and returns all the
    models that are not equal to the query value.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着不等于，与`$equal`相反，并返回所有不等于查询值的模型。
- en: '[PRE38]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: $in
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $in
- en: An array of possible values can be supplied using `$in`; a model will be returned
    if any of the supplied values is matched.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`$in`提供一组可能的值；如果提供的任何值匹配，则返回模型。
- en: '[PRE39]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: $nin
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $nin
- en: This means not in, which is the opposite of `$in`, and a model will be returned
    if none of the supplied values is matched.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着不在，与`$in`相反，如果提供的所有值都不匹配，则返回模型。
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: $exists or $has
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $exists 或 $has
- en: This checks for the existence of an attribute, and can be supplied as either
    `true` or `false`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这检查属性的存在，可以提供`true`或`false`。
- en: '[PRE41]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Combining queries
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合查询
- en: Multiple queries can be combined together. There are the `$and`, `$or`, `$nor`,
    and `$not` operators, which we are going to learn shortly.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将多个查询组合在一起。有`$and`、`$or`、`$nor`和`$not`运算符，我们将在稍后学习。
- en: $and
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $and
- en: 'This is a logical AND operator. The following query selects all the buyers
    named John and who live in Alexandria:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个逻辑与运算符。以下查询选择所有名为John且住在Alexandria的买家：
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `$and` operator is used as a glue if no combining operator is supplied.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`$and`运算符在没有提供组合运算符时用作粘合剂。'
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: $or
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $or
- en: 'This is a logical OR operator. The following query selects all the buyers named
    John or whether the buyers live in Alexandria:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个逻辑或运算符。以下查询选择所有名为John或住在Alexandria的买家：
- en: '[PRE44]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $nor
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $nor
- en: 'This is the opposite of `$or`. The following query selects all the buyers with
    a name other than John or if they do not live in Alexandria:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`$or`相反。以下查询选择所有名字不是John或不住在Alexandria的买家：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: $not
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: $not
- en: 'This is the opposite of `$and`. The following query selects all buyers except
    anyone whose name is John and who lives in Alexandria:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`$and`的反面。以下查询选择所有除了名字是John且住在Alexandria的买家以外的买家：
- en: '[PRE46]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Multiple queries on the same key
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对同一键的多个查询
- en: 'If we need to perform multiple queries on the same key, then we can supply
    the query as an array. The following query returns all the clients with the name
    John or Joe:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要对同一键执行多个查询，则可以将查询作为数组提供。以下查询返回所有名为John或Joe的客户：
- en: '[PRE47]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Sorting query results
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序查询结果
- en: 'To sort results by a property, we need to pass it with the `sortBy` key in
    a second argument. We can also specify the order by passing the `asc` or `desc`
    value with the `sort` key. By default, `asc` is assumed as the value. The following
    code shows how sorting is done:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要按属性排序结果，我们需要在第二个参数中传递它，并使用`sortBy`键。我们还可以通过传递带有`sort`键的`asc`或`desc`值来指定顺序。默认情况下，假设值为`asc`。以下代码显示了如何进行排序：
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Paging query results
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分页查询结果
- en: There is a way to split a big result array on several pages and return a specified
    one. Let's see how it is done.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以将大结果数组分成几个页面，并返回指定的一个。让我们看看它是如何完成的。
- en: '[PRE49]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We can specify the following properties in the second parameter:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在第二个参数中指定以下属性：
- en: '`limit`: It limits the resulting array size to a given number. The first N
    elements are returned. It is a required property.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`: 它将结果数组的大小限制为给定的数字。返回前N个元素。这是一个必需属性。'
- en: '`page`: It returns a specified resulting page. The page size is set by the
    limit property. It is an optional property.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page`: 它返回指定结果的页面。页面大小由limit属性设置。这是一个可选属性。'
- en: '`offset`: It skips the first N result items. It is an optional property.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset`: 它跳过前N个结果项。这是一个可选属性。'
- en: Caching results
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存结果
- en: For performance reasons, we may want to cache our results. This can greatly
    decrease the query execution time, especially if using paging, because unpaged
    results are saved in the cache and a user can quickly navigate through its pages.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 由于性能原因，我们可能想要缓存我们的结果。这可以大大减少查询执行时间，尤其是在使用分页时，因为未分页的结果被保存在缓存中，用户可以快速浏览其页面。
- en: To enable caching, simply use the `cache` property in the second parameter.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用缓存，只需在第二个参数中使用`cache`属性。
- en: '[PRE50]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Tip
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Caching is not set by default, because there is no automatic way to flush the
    cache, so when caching is enabled and the collection is being updated, the cache
    becomes outdated.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存默认未设置，因为没有自动刷新缓存的方法，所以当启用缓存且集合正在更新时，缓存就会过时。
- en: You should be aware of this problem, and manually perform cache flushing every
    time the collections or models in it are updated. This can be done by calling
    the `reset_query_cache()` method.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该意识到这个问题，并且每次集合或其中的模型更新时都手动执行缓存刷新。这可以通过调用`reset_query_cache()`方法来完成。
- en: We can bind the collection's `change` event to the `reset_query_cache()` method,
    and thus, provide automatic cache flushing when the collection gets updated.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将集合的`change`事件绑定到`reset_query_cache()`方法，从而在集合更新时提供自动缓存刷新。
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: See also
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please see more information about Backbone query operators from [https://github.com/davidgtonge/backbone_query#query-api](https://github.com/davidgtonge/backbone_query#query-api)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅有关Backbone查询操作符的更多信息：[https://github.com/davidgtonge/backbone_query#query-api](https://github.com/davidgtonge/backbone_query#query-api)
- en: '*Handling events of Backbone objects* in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), *Events and Bindings*'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。事件和绑定")的*处理Backbone对象的事件*中处理，*事件和绑定*
- en: Storing models of various types in the same collection
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在同一个集合中存储不同类型的模型
- en: When building complex Backbone applications, you may need to work with models
    of different types, which should be processed in a similar way, so you may want
    them to be stored in the same collection. Fortunately, there is a `Backbone.Chosen`
    extension that allow us to do so.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建复杂的Backbone应用程序时，您可能需要处理不同类型的模型，这些模型应以类似的方式处理，因此您可能希望它们存储在同一个集合中。幸运的是，有一个`Backbone.Chosen`扩展允许我们这样做。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You can find and download `Backbone.Chosen` from the following page: [https://github.com/asciidisco/Backbone.Chosen](https://github.com/asciidisco/Backbone.Chosen).
    To include `Backbone.Chosen` into your project, save the `backbone.chosen.js`
    file into the `lib` folder and include the reference to it in `index.html`.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下页面找到并下载`Backbone.Chosen`：[https://github.com/asciidisco/Backbone.Chosen](https://github.com/asciidisco/Backbone.Chosen)。要将`Backbone.Chosen`包含到您的项目中，将`backbone.chosen.js`文件保存到`lib`文件夹中，并在`index.html`中包含对其的引用。
- en: Note
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。理解Backbone")的*使用插件扩展应用程序*配方中详细描述了将Backbone扩展包含到您的项目中，*理解Backbone*。
- en: How to do it...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s say we have two different model classes, namely `IndividualContactModel`
    and `OrganizationContactModel`, and we want to organize them into a single collection.
    We can do this by performing the following steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个不同的模型类，即`IndividualContactModel`和`OrganizationContactModel`，我们想要将它们组织到一个单独的集合中。我们可以通过以下步骤来完成：
- en: Define models.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义模型。
- en: '[PRE52]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As we can see, these models have different attributes, but share a common `name()`
    method.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们所见，这些模型有不同的属性，但共享一个共同的`name()`方法。
- en: Define collection with a `chosen` attribute.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`chosen`属性定义集合。
- en: '[PRE53]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Create a collection instance and specify the mapping attribute in the incoming
    JSON.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个集合实例并在传入的JSON中指定映射属性。
- en: '[PRE54]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Check the result. The newly added models to the collection should be the instance
    of the correct model class.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。新添加到集合中的模型应该是正确模型类的实例。
- en: '[PRE55]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Backbone.Chosen` overrides the `_prepareModel` method of `Backbone.Collection`
    to select the proper model object that depends on its mapping attribute value.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.Chosen`覆盖了`Backbone.Collection`的`_prepareModel`方法，以选择依赖于其映射属性值的正确模型对象。'
- en: There's more...
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This section explains how to perform advanced mapping.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了如何执行高级映射。
- en: Mapping deeply nested attributes
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射深层嵌套属性
- en: '`Backbone.Chosen` also supports nested attributes. You can specify the value
    for the `attr` property with a `dot` syntax, for example, `options.type`, if your
    incoming JSON looks like the following code:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.Chosen`还支持嵌套属性。您可以使用点语法指定`attr`属性的值，例如，`options.type`，如果您的传入JSON看起来像以下代码：'
- en: '[PRE56]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Use a function to map the models
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数映射模型
- en: Sometimes, we may need to use more complex calculations to map the models. This
    can be done with the help of the mapping function. Here is how it is done.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能需要使用更复杂的计算来映射模型。这可以通过映射函数的帮助来完成。以下是它是如何完成的。
- en: '[PRE57]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Implementing a one-to-many relationship
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一对多关系
- en: In [Chapter 2](ch02.html "Chapter 2. Models"), *Models*, there is a recipe about
    creating a one-to-one relationship between two models. In this recipe, we are
    going to learn about creating one-to-many relationships.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。模型") *模型* 中，有一个关于在两个模型之间创建一对一关系的配方。在这个配方中，我们将学习如何创建一对多关系。
- en: A one-to-many relationship can be used if the association between a single model
    and a collection of models of another type takes place. In our invoice application,
    the relationship between `InvoiceModel` and `InvoiceItemModel` is one such relationship.
    InvoiceItem Model can be multiple and thus is stored in `InvoiceItemCollection`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单个模型与另一类型模型集合之间的关联发生时，可以使用一对多关系。在我们的发票应用程序中，`InvoiceModel`和`InvoiceItemModel`之间的关系就是这样一种关系。发票项模型可以有多个，因此存储在`InvoiceItemCollection`中。
- en: Getting ready
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download the Backbone-relational extension from its GitHub page at [https://github.com/PaulUithol/Backbone-relational](https://github.com/PaulUithol/Backbone-relational).
    To include `Backbone.Relational` into your project, save the `backbone-relational.js`
    file into the `lib` folder and include the reference to it in `index.html`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从其GitHub页面[https://github.com/PaulUithol/Backbone-relational](https://github.com/PaulUithol/Backbone-relational)下载Backbone-relational扩展。要将`Backbone.Relational`包含到您的项目中，将`backbone-relational.js`文件保存到`lib`文件夹中，并在`index.html`中包含对该文件的引用。
- en: Note
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。理解Backbone") *理解Backbone* 的 *使用插件扩展应用程序* 配方中详细描述了将Backbone扩展包含到您的项目中。
- en: How to do it...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Implementation of a one-to-many relationship is similar to an implementation
    of a one-to-one relationship, except that we need to use `Backbone.HasMany` as
    a type and specify `collectionType`, because multiple models should be stored
    in the collection. We can do this by performing the following steps:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 一对多关系的实现与一对一关系的实现类似，但我们需要使用`Backbone.HasMany`作为类型并指定`collectionType`，因为多个模型应该存储在集合中。我们可以通过以下步骤来完成：
- en: Extend the new model object from `Backbone.RelationalModel`.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Backbone.RelationalModel`扩展新的模型对象。
- en: '[PRE58]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Define the collection for this model type.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义此模型类型的集合。
- en: '[PRE59]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Extend another model object from `Backbone.RelationalModel` and pass the `relations`
    property with a relationship definition.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Backbone.RelationalModel`扩展另一个模型对象，并传递带有关系定义的`relations`属性。
- en: '[PRE60]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: To initialize models with a one-to-many relationship, pass the invoice items'
    data in a single JSON when creating a new `InvoiceModel` object instance.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用一对多关系初始化模型，在创建新的`InvoiceModel`对象实例时，传递发票项数据的单个JSON。
- en: '[PRE61]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Add new records into this relation with the help of the `add()` method when
    accessing the related collection using the `items` attribute.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当通过`items`属性访问相关集合时，可以使用`add()`方法向此关系添加新记录。
- en: '[PRE62]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Or we can also create an instance of `invoiceItemModel` and set the invoice
    attribute with an instance of `invoiceModel`; thus, a new relation in both the
    directions will be created.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，我们也可以创建一个`invoiceItemModel`的实例，并使用`invoiceModel`的实例设置发票属性；这样，在两个方向上都会创建一个新的关系。
- en: '[PRE63]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each `Backbone.RelationalModel` registers itself with `Backbone.Store` upon
    creation, and is removed from `Store` when destroyed. When creating or updating
    an attribute that is a key in a relation, the removed related objects are notified
    of their removal, and new related objects are looked up in `Store`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Backbone.RelationalModel`在创建时都会将自己注册到`Backbone.Store`，并在销毁时从`Store`中移除。当创建或更新一个关系中的键属性时，被移除的相关对象会收到移除通知，并在`Store`中查找新的相关对象。
- en: There's more...
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this section, we are going to learn some advanced usages of `Backbone.Relational`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些`Backbone.Relational`的高级用法。
- en: Implementing a many-to-many relationship
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现多对多关系
- en: There is no way to create a many-to-many relationship between two models out
    of the box, but it can be easily done with the help of a pair of one-to-many relationships
    between those models and a new intermediate model.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，无法创建两个模型之间的多对多关系，但可以通过使用这些模型之间的一对多关系和一个新的中间模型来轻松实现。
- en: Exporting related models to JSON
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将相关模型导出到JSON
- en: When exporting a model to JSON, it does include related models. This is how
    we can export `InvoiceModel` to JSON.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 当将模型导出为 JSON 时，它确实包括相关模型。这就是我们将 `InvoiceModel` 导出为 JSON 的方法。
- en: '[PRE64]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: And here is a result of such an export.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这种导出的结果。
- en: '[PRE65]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This is how we can export the `InvoiceItemModel` model.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何导出 `InvoiceItemModel` 模型的方法。
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'And the result is the following code snippet:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下代码片段：
- en: '[PRE67]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: As we can see, the `toJSON()` method also exports reversed relationships, but
    we can control the attributes of the related models that need to be exported by
    specifying an array of such attributes in the `includeInJSON` property for direct
    and reverse relationships.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`toJSON()` 方法也导出了反向关系，但我们可以通过在直接和反向关系的 `includeInJSON` 属性中指定一个包含这些属性的数组来控制需要导出的相关模型的属性。
- en: '[PRE68]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: See also
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Implementing a one-to-one relationship* in [Chapter 2](ch02.html "Chapter 2. Models"),
    *Models*'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在第二章* [第二章：模型](ch02.html "第二章。模型") 中实现 *一对一关系*。'
- en: More information about exporting to JSON is described in the *Synchronizing
    models and collections with a RESTful service* recipe in [Chapter 7](ch07.html
    "Chapter 7. REST and Storage"), *REST and Storage*
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于导出为 JSON 的更多信息，请参阅第七章 *使用 RESTful 服务同步模型和集合* 中的配方，[第七章：REST 和存储](ch07.html
    "第七章。REST 和存储")。
- en: A complete documentation of the Backbone-relational extension can be found on
    its GitHub page at [https://github.com/PaulUithol/Backbone-relational](https://github.com/PaulUithol/Backbone-relational)
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Backbone-relational 扩展的完整文档可以在其 GitHub 页面上找到，网址为 [https://github.com/PaulUithol/Backbone-relational](https://github.com/PaulUithol/Backbone-relational)。
- en: Also, there is an alternative to the Backbone-relational extension, which is
    Backbone-associations
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，Backbone-relational 扩展还有一个替代方案，那就是 Backbone-associations。
