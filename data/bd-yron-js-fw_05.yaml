- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Framework Considerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架考虑事项
- en: In the previous chapters, we primarily focused on learning from other framework
    projects to prepare for building our full stack JavaScript framework, which will
    include the ability to create backend infrastructure and frontend interfaces and
    will have capabilities to test both sides of these features. Even though our goal
    is a full stack framework for application development, you will be able to use
    what you learned from this experience and apply it to similar JavaScript projects.
    Existing projects’ architectural patterns and design decisions will help us orient
    our project and set it up for success. In this chapter, we will study three factors
    to consider when we plan out our framework that are useful for aspiring software
    architects and those considering being the responsible individuals behind larger
    technical project decisions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们主要专注于从其他框架项目中学习，为构建我们的全栈JavaScript框架做准备，该框架将包括创建后端基础设施和前端界面的能力，并将具备测试这些功能两方面的能力。尽管我们的目标是全栈框架用于应用程序开发，但您将能够将从这个经验中学到的知识应用到类似的JavaScript项目中。现有项目的架构模式和设计决策将帮助我们定位我们的项目，并为其成功奠定基础。在本章中，我们将研究在规划我们的框架时需要考虑的三个因素，这些因素对有抱负的软件架构师和考虑成为大型技术项目决策背后负责人的个人来说都是有用的。
- en: 'Items to cover for the purposes of our framework considerations are set out
    here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们框架考虑的目的，以下列出需要涵盖的项目：
- en: '**Determining project goals**: Focusing on what you are building and who will
    be the main consumer and patron of the framework’s APIs'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定项目目标**：关注你正在构建的内容以及框架API的主要消费者和赞助者。'
- en: '**Identifying framework problem spaces**: Aligning with the problem space of
    the new framework you are developing'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别框架问题空间**：与您正在开发的框架的新问题空间相一致。'
- en: '**Technical design decisions**: Factors such as the technological stack, architecture,
    and development approach that shape your framework’s uniqueness from other projects'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术设计决策**：塑造您框架独特性的因素，如技术栈、架构和开发方法。'
- en: In this chapter and generally in this book, we are considering an educational
    approach to framework building, which means that future chapters will cover the
    development of specific kinds of JavaScript frameworks, focusing on web application
    systems. However, you can utilize the gathered knowledge to build a framework
    that satisfies your particular needs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及本书中，我们正在考虑一种框架构建的教育方法，这意味着未来的章节将涵盖特定类型的JavaScript框架的开发，重点关注Web应用程序系统。然而，你可以利用所获得的知识来构建满足你特定需求的框架。
- en: 'The following image will help us focus on the consideration categories and
    highlights particular subsections that are useful to know as part of the planning
    and development cycles:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像将帮助我们关注考虑类别，并突出显示在规划和开发周期中作为有用信息的特定子部分：
- en: '![Figure 5.1: Framework development pillars](img/Figure_5.1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1：框架开发支柱](img/Figure_5.1.jpg)'
- en: 'Figure 5.1: Framework development pillars'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：框架开发支柱
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements are similar to the preceeding chapters. Use the `chapter5`
    directory from the book's repository to run `npm install` and then `npm start`
    to quickly get started with the code and samples that are mentioned in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 技术要求与前面的章节类似。使用本书仓库中的`chapter5`目录运行`npm install`，然后运行`npm start`，以快速开始本章中提到的代码和示例。
- en: Determining project goals
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定项目目标
- en: While contemplating building a new framework, you must identify your project’s
    objectives and stakeholders. These two factors are the main drivers behind your
    time and investment into building something new. Embarking on a new framework
    project requires understanding potential motivators and a clear insight into the
    goals, emphasizing the developer you support and their needs. These reasons can
    range from internal work use cases to open source hobby projects. Your scenario
    may very well differ but based on *Figure 5**.1*, we can explore the first pillar—*project
    goals*—as part of this section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑构建新框架时，您必须确定您项目的目标和利益相关者。这两个因素是您在构建新事物的时间和投资背后的主要驱动力。开始一个新的框架项目需要了解潜在的动机，并对目标有清晰的洞察，强调您支持的开发者及其需求。这些原因可能从内部工作用例到开源爱好项目不等。您的场景可能非常不同，但根据*图5.1*，我们可以探索本节作为第一支柱的*项目目标*。
- en: Context
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**上下文**'
- en: 'Comprehending the context of a project is fundamental to guiding its development
    and ensuring it meets the needs of its intended users. The context involves assessing
    factors such as the project’s purpose, target audience, and the environments in
    which it will be used. Two contexts for framework projects are along the following
    themes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 理解项目的背景对于指导其发展和确保其满足目标用户的需求至关重要。背景涉及评估诸如项目目的、目标受众以及它将在其中使用的环境等因素。框架项目的两个背景主题如下：
- en: Work-related company-backed initiatives
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与工作相关的公司支持的项目
- en: Public open source projects, often with an educational or hobby nature
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共开源项目，通常具有教育或爱好性质
- en: Each of these scenarios comes with its distinctive set of necessities and considerations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每种场景都伴随着其独特的需求和考虑因素。
- en: Frameworks developed for particular business needs could have business objectives
    ranging from small start-up environments to large enterprises. Professional use
    cases, contextualized in building a framework for business needs, can drastically
    vary. For instance, similar to the initial development of the React library, a
    project can support a single platform such as Facebook. However, business needs
    can also include developing a framework for repeating use cases, such as deploying
    multiple services with the same core architecture.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定商业需求开发的框架可能具有从小型初创环境到大型企业的各种商业目标。在构建满足商业需求的框架的背景下，专业用例可能会有很大差异。例如，与React库的初始开发类似，一个项目可以支持单个平台，如Facebook。然而，商业需求也可能包括为重复用例开发框架，例如部署具有相同核心架构的多个服务。
- en: Hobby/open source projects can grow from **proofs of concept** (**PoCs**) or
    learning materials to widely used tools across the software industry. These are
    usually not monetarily impactful, but they can serve as a growth tool for your
    career and practical knowledge. Focus on expanding your skill set in particular
    software development and JavaScript knowledge areas.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 爱好/开源项目可以从**概念验证**（**PoCs**）或学习材料发展到软件行业广泛使用的工具。这些通常不会产生经济影响，但它们可以作为您职业和实际知识的增长工具。专注于在特定的软件开发和JavaScript知识领域扩展您的技能集。
- en: It is a good idea to determine and align the project’s goals for your new framework
    before writing any code. If your project focuses on internal company use cases,
    such as supporting internal company products, then the goals are more tailored
    toward enhancing efficiency, improving collaboration, and streamlining the development
    process. Ultimately, all the planning and building support the main core goal—enabling
    the organization to ship higher-quality and more reliable projects faster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码之前确定并调整您新框架的项目目标是明智的。如果您的项目专注于内部公司用例，例如支持内部公司产品，那么目标将更多地针对提高效率、改善协作和简化开发流程。最终，所有规划和建设都是为了支持主要核心目标——使组织能够更快地交付更高质量和更可靠的项目。
- en: Once your framework progresses, the context can potentially alter into something
    new. For example, if the framework was initially started as an internal project,
    further down the road, you could open source it and leverage the input from other
    developers who are not directly associated with it. It can also work the other
    way—a framework started as a hobby project could be picked up for internal professional
    use with new investment supported by commercial clients. Both of these scenarios
    are quite common in the software development industry.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的框架进展，背景可能会发生变化。例如，如果框架最初是一个内部项目，那么在未来的某个阶段，您可以将其开源，并利用与之无直接关联的其他开发者的反馈。反之亦然——一个作为爱好项目开始的框架可能会被用于内部专业用途，并得到商业客户的投资支持。这两种情况在软件开发行业中都很常见。
- en: Stakeholders
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利益相关者
- en: The target audience and stakeholders of your project are your framework’s customers.
    They are the ones that expect an easy-to-use system with adequate programming
    interfaces. Catering to their needs and expectations is vital for the success
    of your framework. These users are looking for a system that is easy to use and
    provides efficient programming interfaces, allowing them to develop applications
    and services with ease and agility.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您项目的目标受众和利益相关者是您的框架客户。他们是那些期望使用简单且具有充足编程接口的系统的人。满足他们的需求和期望对于您框架的成功至关重要。这些用户正在寻找一个易于使用且提供高效编程接口的系统，使他们能够轻松敏捷地开发应用程序和服务。
- en: To create a framework that appeals to your target audience, your investment
    into stakeholder support is essential to ensure that the developer experience
    is intuitive and user-friendly. Stakeholder support involves designing clear,
    well-organized resources and providing example code and use cases that solve everyday
    problems. Often, you will need to offer support to your stakeholders directly
    or through other means. You will encourage adaptation by making it easier for
    developers to understand and navigate your framework.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个吸引目标受众的框架，你对利益相关者支持的投入对于确保开发体验直观且用户友好至关重要。利益相关者支持包括设计清晰、组织良好的资源，并提供解决日常问题的示例代码和用例。通常，你需要直接或通过其他方式为你的利益相关者提供支持。通过使开发者更容易理解和导航你的框架，你将鼓励适应性。
- en: The robust programming interfaces that cater to the diverse needs of your audience
    also play an important role. By offering practical, adaptable, and efficient tools,
    you will empower your users to tackle their projects confidently and foster a
    sense of trust and loyalty toward your framework.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 满足你受众多样化需求的强大编程接口也起着重要作用。通过提供实用、可适应和高效的工具，你将赋予用户自信地应对他们的项目，并培养对框架的信任和忠诚感。
- en: As a framework developer, remember that your audience’s needs and expectations
    should be at the forefront of your design process, so your aim should be to deliver
    a user-centric experience that stands out in the competitive landscape and becomes
    an invaluable asset to developers and stakeholders.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为框架开发者，请记住，你的受众的需求和期望应该始终处于你的设计过程的最前沿，因此你的目标应该是提供一种以用户为中心的体验，这种体验在竞争激烈的市场中脱颖而出，并成为开发者和利益相关者的无价资产。
- en: In the context of this book, the framework has the reader as the stakeholder,
    focusing on educational materials. If you are following along and creating your
    own framework, consider yourself the stakeholder. This makes things much easier;
    you have the freedom to alter and change the pathway of your framework.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的背景下，框架以读者作为利益相关者，专注于教育材料。如果你正在跟随并创建自己的框架，请将自己视为利益相关者。这使得事情变得简单得多；你拥有改变和改变框架路径的自由。
- en: In the next section, we look at several other considerations that could be beneficial
    to reflect upon before you start coding.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些其他在开始编码之前可能有益于反思的考虑因素。
- en: Other considerations
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他考虑因素
- en: 'Additional project considerations in framework development are very similar
    to those of a small or large team developing software projects. Helpful questions
    to consider as part of determining if your project needs to exist and should be
    built are along the following themes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架开发中需要考虑的额外项目与小型或大型团队开发软件项目非常相似。在确定你的项目是否需要存在以及是否应该构建时，以下主题中的有用问题可以作为考虑的一部分：
- en: '**The general purpose of the framework**: This is derived from the core objectives;
    you should have a clear understanding of the primary reasons to deliver your project,
    identifying specific software-related problems and aiming to solve them.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架的一般目的**：这源于核心目标；你应该清楚地了解交付你的项目的首要原因，确定特定的软件相关问题并旨在解决它们。'
- en: '**Survey of existing tools**: Before building something new from scratch, evaluating
    projects already in the ecosystem is a good idea. This consideration will help
    you make a decision to internally use some of the tools or extend them to fit
    your needs.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现有工具的调查**：在从头开始构建新事物之前，评估生态系统中的现有项目是一个好主意。这种考虑将帮助你决定是否内部使用一些工具或扩展它们以满足你的需求。'
- en: '**Maintenance costs**: Depending on the size of resources to address your framework’s
    problem space, you need to understand time and money investments into the project.
    Projecting this will help you allocate resources appropriately and ensure the
    project’s long-term sustainability.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护成本**：根据解决你框架问题空间所需资源的规模，你需要了解项目的时间和金钱投入。预测这一点将帮助你合理分配资源并确保项目的长期可持续性。'
- en: '**Innovative and distinctive features**: Identify unique selling points and
    advantages that your framework will offer compared to existing solutions in the
    ecosystem. This could include advanced functionality, enhanced performance, or
    unexplored approaches to solving typical problems.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创新和独特功能**：确定你的框架相对于生态系统中的现有解决方案提供的独特卖点和发展优势。这可能包括高级功能、增强的性能或解决典型问题的未探索方法。'
- en: '**Resourcing**: Assess your development team’s skills, expertise, and availability,
    and identify any gaps that may need to be addressed. This could involve hiring
    new team members or seeking external support to ensure the successful development
    of the framework. In some cases, you could be the only resource powering the development
    of this project. This comes with the advantages of efficient design making but
    puts you in the driving seat for the whole project.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：评估你的开发团队的技能、专业知识和可用性，并确定可能需要解决的任何差距。这可能涉及雇佣新团队成员或寻求外部支持，以确保框架的成功开发。在某些情况下，你可能成为推动整个项目发展的唯一资源。这带来了高效设计的优势，但同时也让你成为整个项目的负责人。'
- en: '**Roadmap**: Develop a comprehensive roadmap outlining project milestones and
    feature support. By spending time on this, you can provide a clear vision for
    the development process and help keep the project on track while communicating
    the framework’s direction to its stakeholders.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路线图**：制定一个全面的路线图，概述项目里程碑和功能支持。通过在这上面投入时间，你可以为开发过程提供一个清晰的愿景，并帮助项目保持正轨，同时向利益相关者传达框架的方向。'
- en: '**Timeline**: Determine how much time you invest in the framework. This involves
    setting realistic deadlines for each project stage and considering potential risks
    and obstacles that may impact the timeline. By establishing a well-defined timeline,
    you can ensure that the project progresses efficiently and focuses on delivering
    value to its intended audience.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间线**：确定你在框架上投入多少时间。这包括为每个项目阶段设定现实的截止日期，并考虑可能影响时间线的潜在风险和障碍。通过建立一个明确的时间线，你可以确保项目高效地推进，并专注于向目标受众交付价值。'
- en: All the considerations mentioned in this section can contribute to your development
    process. Spending a little time figuring out the answer to all these considerations
    could greatly benefit your project. A lot of these considerations will depend
    on the problem space of your framework. To help handle this, we will cover potential
    problem spaces in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中提到的所有考虑因素都可以对你的开发过程做出贡献。花点时间弄清楚所有这些考虑因素的问题，可能会极大地有利于你的项目。许多这些考虑因素将取决于你的框架的问题领域。为了帮助处理这个问题，我们将在下一节中介绍潜在的问题领域。
- en: Identifying framework problem spaces
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别框架问题领域
- en: Frameworks are designed to support the development of one or many projects,
    focusing on solving a particular problem space. We define a problem space as a
    set of challenges or a range of problems that the framework is prepared to address;
    this is the second pillar from *Figure 5**.1*. A problem space can be a specific
    software application area in which the framework is intended to be used.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 框架旨在支持一个或多个项目的开发，专注于解决特定的问题领域。我们将问题领域定义为框架准备解决的一系列挑战或问题范围；这是来自*图5**.1*的第二支柱。问题领域可以是框架打算使用的特定软件应用程序领域。
- en: As we saw from examples of frameworks in previous chapters of this book, JavaScript
    has a broad reach in client and server environments. It enables us to build frameworks
    to fit our needs and technological requirements. For your brand new project, you
    could potentially be tackling a particular framework category. By focusing on
    the technical aspects of a unique project, combined with innovative features,
    you can make your project different from what is already available out there in
    the wild.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从本书前几章中框架的例子中看到的那样，JavaScript在客户端和服务器环境中具有广泛的应用。它使我们能够构建满足我们需求和技术的框架。对于你的全新项目，你可能会面临特定的框架类别。通过关注独特项目的技术方面，结合创新功能，你可以使你的项目与野外的现有项目有所不同。
- en: Popular problem spaces
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的问题领域
- en: 'Here are some potential development paths you could take in the JavaScript
    framework problem space:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript框架问题领域中，你可以采取以下一些潜在的开发路径：
- en: '**Frontend frameworks**: Focused on building frontend applications’ frameworks,
    you can find ways to utilize the latest browser technologies to develop unique
    rendering techniques and improve on state management. Given that this is a popular
    category of frameworks with many existing solutions, a more straightforward approach
    is to write your own abstractions on top of these existing solutions—for example,
    internally using a project such as Vue.js while developing your own self-developed
    framework interfaces. This way, you can approach your problem space, focusing
    on its challenges and solving them instead of reinventing the basics.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端框架**: 专注于构建前端应用程序框架，你可以找到利用最新浏览器技术来开发独特渲染技术并改进状态管理的方法。鉴于这是一个具有许多现有解决方案的流行框架类别，一个更直接的方法是在这些现有解决方案之上编写自己的抽象——例如，在开发自己的自开发框架接口时，内部使用Vue.js。这样，你可以针对你的问题空间，专注于其挑战并解决它们，而不是重新发明基础。'
- en: '**Browser-focused solutions**: Similar to the previous point, you could take
    the approach of building browser-focused solutions, different from frameworks
    focused on web application development, and concentrate on utilizing new technologies
    available to web browsers. For instance, you could leverage WebAssembly ([webassembly.org](https://webassembly.org))
    or WebGPU ([w3.org/TR/webgpu](https://w3.org/TR/webgpu)) to develop unique frameworks
    in the client-side environment.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器解决方案**: 与前一点类似，你可以采取构建以浏览器为中心的解决方案的方法，不同于专注于Web应用程序开发的框架，并专注于利用浏览器可用的新技术。例如，你可以利用WebAssembly([webassembly.org](https://webassembly.org))或WebGPU([w3.org/TR/webgpu](https://w3.org/TR/webgpu))在客户端环境中开发独特的框架。'
- en: '**Backend applications**: If you are building a new JavaScript framework for
    backend development, it is important to focus on reliability, scalability, and
    security features. You could start by looking over the examples from this book
    or elsewhere on the internet, then build a framework that addresses common backend
    challenges, such as working with certain types of databases, enabling different
    types of authentication, and rapid API development techniques.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端应用程序**: 如果你正在为后端开发构建一个新的JavaScript框架，重要的是要关注可靠性、可扩展性和安全功能。你可以从查看本书或互联网上的示例开始，然后构建一个解决常见后端挑战的框架，例如处理某些类型的数据库、启用不同类型的身份验证和快速API开发技术。'
- en: '**Testing**: If you are building a new testing framework for JavaScript applications,
    you could focus on providing a simple and intuitive interface for writing and
    running tests. You could also enable built-in support for popular testing frameworks
    and libraries and integrations with continuous integration tools. You could also
    provide advanced testing features such as visual regression testing, unique parallelization
    and grouping techniques, and pattern-matching-powered test automation. In [*Chapter
    6*](B19014_06.xhtml#_idTextAnchor089) of this book, we will start developing a
    simple testing framework, while focusing on the learning process; it is a good
    contender for a simpler type of framework.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**: 如果你正在为JavaScript应用程序构建一个新的测试框架，你可以专注于提供一个简单直观的界面来编写和运行测试。你也可以启用对流行的测试框架和库的内置支持，以及与持续集成工具的集成。你还可以提供高级测试功能，如视觉回归测试、独特的并行化和分组技术，以及由模式匹配驱动的测试自动化。在本书的[*第6章*](B19014_06.xhtml#_idTextAnchor089)中，我们将开始开发一个简单的测试框架，同时关注学习过程；它是一个很好的简单类型框架的竞争者。'
- en: '**Native applications**: By building a new framework for native applications,
    you could focus on providing components and APIs that make creating responsive
    and high-performance applications easy. Often, these systems offer built-in support
    for mobile and desktop features, such as camera access, push notifications, and
    integration with native operating system features. This type of framework is challenging
    to develop due to the number of environments you have to support. Though, as we
    have seen examples in [*Chapter 1*](B19014_01.xhtml#_idTextAnchor015) and [*Chapter
    2*](B19014_02.xhtml#_idTextAnchor030), with React Native and Electron, these kinds
    of projects are not impossible.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生应用程序**: 通过为原生应用程序构建一个新的框架，你可以专注于提供使创建响应式和高性能应用程序变得容易的组件和API。通常，这些系统提供了对移动和桌面功能的内置支持，例如相机访问、推送通知以及与原生操作系统功能的集成。由于你必须支持的环境数量众多，这种类型的框架开发具有挑战性。然而，正如我们在[*第1章*](B19014_01.xhtml#_idTextAnchor015)和[*第2章*](B19014_02.xhtml#_idTextAnchor030)中看到的，使用React
    Native和Electron，这类项目并非不可能。'
- en: '**Embedded solutions**: This type of framework would focus on providing a simple
    and easy-to-use interface for programming and interacting with hardware devices.
    To create one of these, you must develop APIs for standard sensors and devices.
    These include working with external chipsets, motors, GPS, and Bluetooth accessories.
    The main focus behind this framework would be to create a unique approach to reduce
    memory and processor usage, as you are targeting embedded instruments. This is
    a more complex challenge with JavaScript, even though there have been many projects
    in the past that allowed the runtime to interact with embedded devices.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式解决方案**：此类框架将专注于提供简单易用的编程和与硬件设备交互的接口。要创建此类框架之一，你必须为标准传感器和设备开发API。这包括与外部芯片组、电机、GPS和蓝牙配件一起工作。此框架背后的主要重点是创建一种独特的方法来减少内存和处理器使用，因为你的目标是嵌入式仪器。尽管过去有许多项目允许运行时与嵌入式设备交互，但JavaScript仍然是一个更复杂的挑战。'
- en: We explored several examples of more popular JavaScript frameworks in the previous
    chapters. However, JavaScript’s versatility extends beyond those we’ve already
    discussed. The language can enable you to build new framework projects that cater
    to other niches. JavaScript has become ubiquitous in modern web development, allowing
    developers to build robust and feature-rich applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们探讨了几个更流行的JavaScript框架的例子。然而，JavaScript的通用性远不止我们所讨论的。这种语言可以使你构建针对其他细分市场的框架项目。JavaScript在现代网络开发中无处不在，允许开发者构建强大且功能丰富的应用程序。
- en: Other framework pathways
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他框架路径
- en: 'There are many other types of projects that JavaScript allows us to build;
    they all have their own considerations. In no particular order, let’s take a look
    at more framework development pathways:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript允许我们构建许多其他类型的项目；它们都有自己的考虑因素。不分先后，让我们看看更多框架开发路径：
- en: '**Game development**: As JavaScript is the only target runtime available to
    the web browser, it ends up being the only solution for building games. Your JavaScript
    game development framework can provide tools and utilities that make it easy to
    build 2D or 3D games for web and mobile platforms. These utilities could include
    built-in support for physics engines, animation, and audio. In such a scenario,
    the framework could concentrate on providing advanced features, such as multiplayer
    support or virtual reality integration, as those features become more popular.
    Some popular JavaScript game development frameworks include Phaser, Pixi.js, PlayCanvas,
    and Babylon.js. Even though game development frameworks have specific requirements
    related to rendering and performance, you can still use knowledge from this book
    to structure this type of framework.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏开发**：由于JavaScript是唯一可用的网络浏览器目标运行时，因此它最终成为构建游戏的唯一解决方案。你的JavaScript游戏开发框架可以提供工具和实用程序，使构建Web和移动平台的2D或3D游戏变得容易。这些实用程序可能包括内置对物理引擎、动画和音频的支持。在这种情况下，框架可以专注于提供高级功能，如多人支持或虚拟现实集成，因为这些功能变得越来越受欢迎。一些流行的JavaScript游戏开发框架包括Phaser、Pixi.js、PlayCanvas和Babylon.js。尽管游戏开发框架对渲染和性能有特定的要求，但你仍然可以使用本书中的知识来构建此类框架。'
- en: '**Computation**: A new framework for computation and data science could potentially
    perform scientific computing and data analysis tasks. You could focus on providing
    a set of APIs for performing mathematical operations and working with data. This
    framework could have built-in support for popular data visualization libraries
    and statistical analysis tools. The potential for JavaScript computation frameworks
    is in the frontend presentation and backend computation layers. A single framework
    can combine both of those possibilities.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算**：一个新的计算和数据科学框架可能能够执行科学计算和数据分析任务。你可以专注于提供一组用于执行数学运算和处理数据的API。此框架可能内置了对流行的数据可视化库和统计分析工具的支持。JavaScript计算框架的潜力在于前端表示和后端计算层。一个框架可以结合这两种可能性。'
- en: '**Visualization**: Similar to the computation theme, there is room for better
    JavaScript data visualization frameworks. In visualization projects, you could
    focus on providing a set of tools and components for creating interactive and
    dynamic visualizations. You could also integrate with visualization libraries
    such as D3.js and explore advanced features such as real-time data streaming.
    As this niche is developing, you can find new ways to render and interact with
    information from many data sources.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化**：与计算主题类似，有空间来改进JavaScript数据可视化框架。在可视化项目中，你可以专注于提供一套工具和组件，用于创建交互式和动态的可视化。你也可以与可视化库如D3.js集成，并探索高级功能，如实时数据流。随着这个领域的不断发展，你可以找到从许多数据源渲染和交互信息的新方法。'
- en: '**Artificial intelligence**: If you decide to develop a JavaScript framework
    for AI and **machine learning** (**ML**), you should prioritize providing a comprehensive
    set of APIs for building and training neural networks. Consider basing your framework
    on widely used ML APIs and libraries, such as TensorFlow.js ([tensorflow.org/js](https://tensorflow.org/js)).
    The features of such a framework could include interoperability with various types
    of ML formats and configurations.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人工智能**：如果你决定开发一个用于人工智能和**机器学习**（**ML**）的JavaScript框架，你应该优先提供一套构建和训练神经网络的API。考虑基于广泛使用的ML
    API和库，如TensorFlow.js ([tensorflow.org/js](https://tensorflow.org/js))构建你的框架。这样的框架可能包括与各种类型的ML格式和配置的互操作性。'
- en: '**User interface (UI)**: A framework built around constructing UIs could be
    helpful for a different feature set from regular frontend applications. It could
    include capabilities for customizable components and responsive UIs. Innovative
    features could consist of styling and theming components utilizing modern CSS
    features. The framework could integrate with external libraries such as Tailwind
    CSS, Material UI, Bootstrap, and so on. Building a UI framework can be advantageous
    if you work in marketing or design-related environments.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面（UI）**：围绕构建UI构建的框架可能对常规前端应用的不同功能集有所帮助。它可以包括可定制组件和响应式UI的功能。创新功能可能包括利用现代CSS特性的样式和主题组件。该框架可以与外部库如Tailwind
    CSS、Material UI、Bootstrap等集成。如果你在营销或设计相关环境中工作，构建UI框架可能是有利的。'
- en: Depending on your framework goal, these are some potential framework pathways.
    In previous chapters of the book, we have covered the ins and outs of some classes
    of these frameworks in detail. This is not an exhaustive list of possible solutions
    within a JavaScript environment, but it showcases the many possibilities. The
    most popular and competitive category of frameworks is related to building frontend
    applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的框架目标，这里有一些潜在的框架路径。在本书的前几章中，我们已经详细介绍了这些框架的一些类别的来龙去脉。这并不是在JavaScript环境中可能解决方案的详尽列表，但它展示了众多可能性。最受欢迎且最具竞争力的框架类别与构建前端应用相关。
- en: Now that we have a clearer vision of the problem space, in the next section,
    we can proceed to considerations with regard to the technical architectures of
    framework projects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对问题领域有了更清晰的愿景，在下一节中，我们可以继续考虑框架项目的技术架构。
- en: Technical architecture
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术架构
- en: In the previous sections of this chapter, we identified our stakeholders—those
    who will directly benefit from our framework project. We also identified potential
    problem spaces. Those two factors give us a solid idea of what we want to build.
    In this section, we explore the third pillar from *Figure 5**.1*—*technical architecture*—to
    give us a focused look at the technical specificities of our planned project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前几节中，我们确定了我们的利益相关者——那些将直接从我们的框架项目中受益的人。我们还确定了潜在的问题领域。这两个因素为我们想要构建的内容提供了一个坚实的基础。在本节中，我们将探讨*图5**.1*的第三个支柱——*技术架构*——以便我们能够专注于我们计划的项目的技术特性。
- en: Abstraction levels and flexibility
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象层次和灵活性
- en: The importance of practical abstraction levels and allowing flexibility in code
    APIs of a JavaScript framework is an important design decision. As you develop
    your frameworks, these two principles are necessary to ensure the framework’s
    usability, maintainability, and adaptability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript框架的代码API中实现实用的抽象层次和灵活性是重要的设计决策。随着你开发框架，这两个原则是确保框架可用性、可维护性和适应性的必要条件。
- en: As explored in [*Chapter 2*](B19014_02.xhtml#_idTextAnchor030), sensible abstraction
    levels are essential for providing developers with clean, easy-to-understand interfaces.
    The encapsulated complexities of the underlying implementation improve productivity
    and minimize the risk of errors as developers work with a higher-level, more intuitive
    API that shields them from unnecessary complexity.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[*第 2 章*](B19014_02.xhtml#_idTextAnchor030)中探讨的，合理的抽象级别对于为开发者提供干净、易于理解的接口至关重要。底层实现的封装复杂性提高了生产力，并最小化了错误的风险，因为开发者使用的是更高层次、更直观的
    API，这使他们免受不必要的复杂性。
- en: The sensible abstraction levels promote modularity and reusability of code,
    as the framework’s features can be more easily connected and adapted to varying
    circumstances. Providing a level of modularity enables developers to build upon
    existing modules, fostering a developer-driven ecosystem of extensions that further
    enhance the framework’s capabilities. By striking the right balance between abstraction
    and flexibility, a JavaScript framework can cater to various projects, from small-scale
    to complex applications.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 合理的抽象级别促进了代码的模块化和可重用性，因为框架的功能可以更容易地连接和适应不同的环境。提供一定程度的模块化使开发者能够构建在现有模块之上，培养一个由开发者驱动的扩展生态系统，进一步增强了框架的功能。通过在抽象和灵活性之间取得正确的平衡，JavaScript
    框架可以满足各种项目，从小型到复杂的应用。
- en: Allowing flexibility in code APIs is another critical aspect of a successful
    JavaScript framework. A flexible API accommodates different coding styles, paradigms,
    and use cases, enabling developers to tailor their approach to suit their unique
    requirements. This adaptability is essential in the fast-paced world of web development,
    where new tools, libraries, and patterns are constantly emerging. By offering
    a versatile API, a JavaScript framework can remain relevant and valuable in the
    face of these evolving trends.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码 API 中提供灵活性是成功 JavaScript 框架的另一个关键方面。灵活的 API 能够适应不同的编码风格、范式和用例，使开发者能够根据他们的独特需求调整他们的方法。这种适应性在快速发展的网络开发世界中至关重要，因为新的工具、库和模式不断涌现。通过提供多功能的
    API，JavaScript 框架可以在这些不断变化的趋势面前保持相关性和价值。
- en: One potential pitfall of abstraction is the creation of highly opinionated abstractions
    that impose strict constraints on how developers can use the framework. While
    abstractions can streamline specific use cases, they may hinder the framework’s
    overall flexibility and limit its applicability to a broader range of projects.
    If you would like to build a less opinionated framework, consider providing your
    stakeholders with expandable options, such as using different templating engines
    or various ways of managing state within built applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象的一个潜在陷阱是创建高度有偏见的抽象，这会严格限制开发者如何使用框架。虽然抽象可以简化特定的用例，但它们可能会阻碍框架的整体灵活性，并限制其适用于更广泛项目的适用性。如果您想构建一个不那么有偏见的框架，考虑为您的利益相关者提供可扩展的选项，例如使用不同的模板引擎或在不同构建的应用程序中管理状态的不同方式。
- en: Striking the right balance between abstraction and flexibility, and avoiding
    overly opinionated abstractions, will help you craft a versatile and enduring
    JavaScript framework.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽象和灵活性之间取得正确的平衡，并避免过度有偏见的抽象，将帮助您打造一个多才多艺且持久的 JavaScript 框架。
- en: Environment compatibility
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境兼容性
- en: JavaScript runs in diverse environments, including browsers, servers, mobile
    devices, and other unique hardware, each with unique characteristics, making compatibility
    a pressing factor in any framework’s success. Determining the runtime environment
    compatibility of your framework is about figuring out which runtimes to support
    and maintain. Generally, in JavaScript frameworks, it is about the time and technological
    investment choice of frontend and backend features. This includes browser-specific
    APIs and compatibility with different backend systems. Besides frontend and backend
    systems, JavaScript is supported in many other environments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在各种环境中运行，包括浏览器、服务器、移动设备以及其他独特的硬件，每种硬件都有其独特的特性，这使得兼容性成为任何框架成功的关键因素。确定您框架的运行环境兼容性就是确定要支持和维护哪些运行时。通常，在
    JavaScript 框架中，这涉及到前端和后端功能的时间和技术的投资选择。这包括特定浏览器的 API 和与不同后端系统的兼容性。除了前端和后端系统之外，JavaScript
    还支持许多其他环境。
- en: Framework developers face a significant challenge in ensuring compatibility
    with multiple JavaScript environments and the specific quirks of those environments.
    At a high level, this includes different types of browser engines and compatibility
    with different module systems. This task requires careful consideration and design
    decisions to ensure the framework works seamlessly across all targeted runtimes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 框架开发者面临着一个重大挑战，即确保与多个JavaScript环境及其特定怪癖的兼容性。从高层次来看，这包括不同类型的浏览器引擎和与不同模块系统的兼容性。这项任务需要仔细考虑和设计决策，以确保框架能够在所有目标运行时无缝工作。
- en: The first design decision is about configuring compatibility for the appropriate
    JavaScript environment. Developers must consider the target environment for the
    framework and ensure that it is compatible with the chosen setting. For instance,
    if the framework is designed for web applications, the developers must ensure
    it works seamlessly across multiple browser versions and APIs. Incompatibilities
    may arise due to variations in browser capabilities, leading to problems such
    as inconsistent rendering or unresponsive applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个设计决策是关于配置适当的JavaScript环境的兼容性。开发者必须考虑框架的目标环境，并确保它与所选设置兼容。例如，如果框架是为Web应用程序设计的，开发者必须确保它能够在多个浏览器版本和API之间无缝工作。由于浏览器功能的不同，可能会出现不兼容性，导致渲染不一致或应用程序无响应的问题。
- en: Another significant consideration when developing a new JavaScript framework
    is handling environment differences. Writing extra code-compatibility layers is
    valuable for minor and significant runtime differences. Handling runtime differences
    includes investing time in backward compatibility for both older browsers and
    older versions of server-side runtimes. In general, supporting multiple frontend
    JavaScript environments takes different versions of the same browser environment.
    For example, many browsers, such as Firefox, have various versions, and each version
    may have unique capabilities or features. Developers must ensure the framework
    is designed to handle these variations and provides optimal performance and functionality
    regardless of the browser version.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发新的JavaScript框架时，另一个重要的考虑因素是处理环境差异。编写额外的代码兼容层对于微小的和重大的运行时差异来说是有价值的。处理运行时差异包括为旧版浏览器和旧版服务器端运行时投入时间以实现向后兼容。一般来说，支持多个前端JavaScript环境需要同一浏览器环境的不同版本。例如，许多浏览器，如Firefox，都有各种版本，每个版本可能都有独特的功能或特性。开发者必须确保框架能够处理这些差异，并且无论浏览器版本如何，都能提供最佳的性能和功能。
- en: For instance, you must handle cross-runtime compatibility to enable server-side
    rendering or Node.js testing of frontend components. JavaScript server environments
    may require specific deliberations when building frameworks. They may have different
    APIs than browsers, and some features, such as the DOM, may not be available.
    Thus, developers must ensure that the framework is designed to handle such variations
    and provides optimal performance in server environments. Framework developers
    include JavaScript polyfills and similar code snippets, providing a fallback mechanism
    for new and missing features in other environments. These are essential when building
    a new framework that should work across multiple domains.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你必须处理跨运行时兼容性，以便启用服务器端渲染或Node.js测试前端组件。在构建框架时，JavaScript服务器环境可能需要特定的考虑。它们可能具有与浏览器不同的API，并且某些功能，如DOM，可能不可用。因此，开发者必须确保框架能够处理这些差异，并在服务器环境中提供最佳性能。框架开发者包括JavaScript
    polyfills和类似的代码片段，为其他环境中的新功能和缺失功能提供回退机制。在构建一个应在多个领域工作的新框架时，这些是必不可少的。
- en: Ensuring compatibility with multiple JavaScript environments requires additional
    thorough testing during framework development and maintenance. Testing is essential
    in identifying and resolving compatibility issues early in the development cycle.
    For instance, we can use the automated testing tooling we saw in the previous
    chapter to test the framework on various browser versions and mobile devices to
    identify compatibility issues. Including these tests helps to ensure that the
    framework delivers optimal performance and functionality across all targeted environments.
    However, testing through all possible runtime use cases and quirks can be challenging,
    and running a test on all configurations your framework will be used in is impossible.
    Fortunately, compatibility issues significantly reduced as JavaScript runtimes
    matured. If you are developing a framework outside the browser, something similar
    to Electron or React Native, you have further challenges. You must ensure the
    framework is compatible with the multiple operating systems that you are designing
    your project for. For example, the operating system runtimes may have different
    capabilities, affecting the framework’s feature set.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 确保与多个JavaScript环境兼容需要在框架开发和维护期间进行额外的彻底测试。测试在早期开发周期中识别和解决兼容性问题至关重要。例如，我们可以使用上一章中看到的自动化测试工具来测试框架在不同浏览器版本和移动设备上的兼容性问题。包括这些测试有助于确保框架在所有目标环境中提供最佳的性能和功能。然而，测试所有可能的运行时用例和特性可能具有挑战性，并且对所有框架将使用的配置进行测试是不可能的。幸运的是，随着JavaScript运行时的成熟，兼容性问题显著减少。如果你正在开发一个浏览器外的框架，类似于Electron或React
    Native，你将面临更多的挑战。你必须确保框架与为你的项目设计的多个操作系统兼容。例如，操作系统运行时可能具有不同的功能，这会影响框架的功能集。
- en: Overall, you are able to define the supported JavaScript environments and take
    control of the types of runtimes you support in your framework, knowing that compatibility
    with multiple JavaScript environments requires continuous maintenance and updates
    to your project. This maintenance includes compatibility with new browser versions
    or server environments that tweak their capabilities or add new features.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你能够定义支持的JavaScript环境并控制你在框架中支持的运行时类型，知道与多个JavaScript环境的兼容性需要对你项目的持续维护和更新。这种维护包括与新浏览器版本或服务器环境兼容，这些环境可能会调整其功能或添加新功能。
- en: Utilizing libraries
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用库
- en: It makes sense to commit to specific JavaScript libraries before developing
    a new framework. The use of existing JavaScript libraries will save you time—time
    you can use to focus on the framework’s features and technical architecture. It
    is a common pattern for frameworks to rely on libraries to build out the internals.
    These libraries often indirectly enable the framework feature set behind the scenes,
    including features such as data management, routing, interacting with the DOM,
    and abstracting away JavaScript runtime complexity. As the framework covers a
    more extensive feature set and shapes the development experience, the internal
    libraries focus on delivering a precise solution to a particular problem.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发新框架之前承诺特定的JavaScript库是有意义的。使用现有的JavaScript库可以节省你的时间——你可以用这些时间来专注于框架的功能和技术架构。框架通常依赖于库来构建内部结构。这些库通常在幕后间接启用框架功能集，包括数据管理、路由、与DOM交互以及抽象化JavaScript运行时复杂性等功能。随着框架覆盖更广泛的功能集并塑造开发体验，内部库专注于为特定问题提供精确的解决方案。
- en: Choosing the right set of libraries can significantly impact the development
    process and the shape of your framework. The libraries you utilize in your framework
    will likely make you an expert user of them. However, balancing the benefits of
    using libraries with potential downsides, such as compatibility problems, API
    restrictions, and ongoing maintenance, is necessary.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的库集可以显著影响开发过程和你的框架的形状。你在框架中使用的库可能会让你成为它们的专家用户。然而，平衡使用库的好处与潜在的缺点，如兼容性问题、API限制和持续维护，是必要的。
- en: 'As we explore other JavaScript frameworks, we can identify libraries they rely
    on for specific functionality. Depending on the architecture, your framework can
    build the library right into the framework or use it to extend aspects of your
    framework. If we look at Angular, we will find that it utilizes `BookService`
    service:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索其他 JavaScript 框架时，我们可以识别它们为特定功能所依赖的库。根据架构，您的框架可以将库直接集成到框架中，或者使用它来扩展框架的某些方面。如果我们看看
    Angular，我们会发现它使用了 `BookService` 服务：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code uses the `Observable` class to return the `getWeather` function
    first. From within your Angular classes, you can rely upon RxJS to provide many
    data-operating operators. In addition, the RxJS library provides error-handling
    operators, as seen in the `retry` call in the preceding code. A detailed explanation
    of the library’s operators can be found at [rxjs.dev/guide/operators](https://rxjs.dev/guide/operators).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码使用 `Observable` 类首先返回 `getWeather` 函数。在您的 Angular 类中，您可以依赖 RxJS 提供的许多数据处理操作符。此外，RxJS
    库还提供了错误处理操作符，如前述代码中的 `retry` 调用所示。关于库操作符的详细解释可以在 [rxjs.dev/guide/operators](https://rxjs.dev/guide/operators)
    找到。
- en: Exploring the RxJS example
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 RxJS 示例
- en: The `chapter5` directory in the book repository includes an example of using
    Angular with the RxJS library. You can try this out on your own computer by running
    the interactive script from the chapter directory or executing `npm install`,
    and then `npm run dev` from the `angular-rxjs` directory.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍仓库中的 `chapter5` 目录包含了一个使用 Angular 和 RxJS 库的示例。您可以通过在章节目录中运行交互式脚本或在 `angular-rxjs`
    目录中执行 `npm install`，然后运行 `npm run dev` 来在自己的计算机上尝试这个示例。
- en: The example application will utilize the `BookService` service presented previously
    to fetch data. The API data comes with additional properties that you can use
    to extend the existing application. Refer to the `README.md` files for additional
    information.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应用程序将使用之前提供的 `BookService` 服务来获取数据。API 数据包含额外的属性，您可以使用这些属性来扩展现有应用程序。有关更多信息，请参阅
    `README.md` 文件。
- en: In another example of library usage, Vue.js initially used **Vuex** as a library
    for centralized state management. However, as the framework developed, the approach
    to managing the state changed. Vue has switched over to recommending and utilizing
    **Pinia** ([pinia.vuejs.org](https://pinia.vuejs.org)) for state management. With
    an intuitive approach based on the Flux architecture, the library closely related
    to Vue, it allows developers to use multiple stores to manage states, enables
    extensibility, and is much more closely aligned with the framework’s features.
    Another example that we have seen in [*Chapter 1*](B19014_01.xhtml#_idTextAnchor015)
    is Next.js, which uses the React library for rendering and other features. Next.js
    focuses on using primitives provided by React to abstract away complexities when
    using the library directly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个库使用的例子中，Vue.js 最初使用 **Vuex** 作为集中式状态管理的库。然而，随着框架的发展，管理状态的方法发生了变化。Vue 已经转向推荐并使用
    **Pinia** ([pinia.vuejs.org](https://pinia.vuejs.org)) 进行状态管理。基于 Flux 架构的直观方法，这个与
    Vue 密切相关的库允许开发者使用多个存储来管理状态，增强了可扩展性，并且与框架的功能更加紧密地一致。另一个我们在 [*第一章*](B19014_01.xhtml#_idTextAnchor015)
    中看到的例子是 Next.js，它使用 React 库进行渲染和其他功能。Next.js 专注于使用 React 提供的原始功能来抽象出直接使用库时的复杂性。
- en: As you introduce libraries into your framework, be smart about choosing them.
    Often, it is more effortless to abstract away direct access to the libraries for
    the users of your framework. Otherwise, you must support particular library APIs
    in your framework, locking you into a specific coding pattern. Historically, Ember.js
    had to spin up an effort to decouple the framework from its usage of the jQuery
    library. This type of migration meant providing an update path for projects trying
    to keep up with the latest versions of the framework.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将库引入到框架中时，要明智地选择它们。通常，对于框架的用户来说，抽象出对库的直接访问更为轻松。否则，您必须在框架中支持特定的库 API，这会将您锁定在特定的编码模式中。历史上，Ember.js
    必须投入精力将框架与其对 jQuery 库的使用解耦。这种迁移意味着为试图跟上框架最新版本的项目提供更新路径。
- en: As your framework develops, you will find great benefits in the ecosystem of
    JavaScript libraries. The challenge will be keeping up with the developing nature
    of these projects as the target runtime evolves.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的框架发展，您将在 JavaScript 库的生态系统中发现巨大的好处。挑战将是随着目标运行时的演变，跟上这些项目的不断发展。
- en: Compiler tooling
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器工具
- en: In *Chapters 3* and *4*, we examined instances of framework development patterns.
    These patterns included the use of compilers and other build tools for the purposes
    of framework development and structure. There’s no question that the tools utilized
    in these patterns make the development, refactoring, and maintenance workflow
    much more manageable. Therefore, unless there is a specific reason for your framework
    to avoid the benefits of these tools, it is firmly advisable to lean into the
    ecosystem.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3章和第4章中，我们考察了框架开发模式的一些实例。这些模式包括使用编译器和其它构建工具来开发框架结构和结构。毫无疑问，这些模式中使用的工具使得开发、重构和维护工作流程变得更加易于管理。因此，除非你的框架有特定的理由避免这些工具的好处，否则强烈建议充分利用生态系统。
- en: Build tooling and compilers
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建工具和编译器
- en: While writing the code of your framework project, you want to have a good feedback
    loop from the code changes you make. This feedback loop can come from running
    the project’s tests or having a sample application that utilizes your framework
    as you work on new features or bug fixes. This kind of iteration workflow can
    be configured with built-in JavaScript behaviors, or you could rely on a number
    of existing build tools and compilers. For the development process, the choice
    of compiler tooling can significantly impact and affect the efficiency of the
    development of your framework. Looking back at framework showcases, we have seen
    examples of using tools such as Rollup.js, `webpack`, and `esbuild` for web framework
    development and packaging.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写框架项目的代码时，你希望从所做的代码更改中获得良好的反馈循环。这个反馈循环可以来自运行项目测试或在你开发新功能或修复错误时使用你的框架的示例应用程序。这种迭代工作流程可以通过内置的JavaScript行为进行配置，或者你可以依赖许多现有的构建工具和编译器。对于开发过程，编译器工具的选择可以显著影响并影响你框架的开发效率。回顾框架展示，我们看到了使用工具如Rollup.js、`webpack`和`esbuild`进行Web框架开发和打包的例子。
- en: 'The choice of these tools will depend on the precise requirements of your framework.
    While meticulously choosing to use these tools, you need to make sure to evaluate
    their benefits and drawbacks. In addition, the tools you choose should be suitable
    for both the development workflow and a good framework publishing workflow. You
    could decide to separate those two workflows, but then you could end up with too
    many tools that you need to maintain. For example, we can take some of these tools
    and consider the following factors:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的选择将取决于你框架的精确需求。在仔细选择使用这些工具时，你需要确保评估它们的优缺点。此外，你选择的工具应该适合开发工作流程和良好的框架发布工作流程。你可以决定将这两个工作流程分开，但这样可能会导致你需要维护的工具过多。例如，我们可以考虑以下因素来使用这些工具：
- en: The overall JavaScript runtime and feature support, such as features that include
    extensive JavaScript module format support and advanced features such as tree-shaking
    and intelligent code bundling
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体JavaScript运行时和功能支持，包括广泛的JavaScript模块格式支持和高级功能，如摇树优化和智能代码打包
- en: For frontend systems, evaluate browser and web API support
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于前端系统，评估浏览器和Web API的支持
- en: The complexity and flexibility of configuration when targeting different workflows
    and environments, potentially choosing zero-configuration tools versus comprehensive
    configuration
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对不同工作流程和环境时的配置复杂性和灵活性，可能选择零配置工具与全面配置工具
- en: Build-time speed for both development and production builds of the framework
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架开发和生产构建的构建时间速度
- en: Maturity of the tool compared to other similar solutions
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他类似解决方案相比，工具的成熟度
- en: Developer feature set, such as **Hot Module Replacement** (**HMR**), development
    server, and instant live reload
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者功能集，例如**热模块替换**（**HMR**）、开发服务器和即时实时重新加载
- en: Integration with external tools, such as test frameworks
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与外部工具的集成，如测试框架
- en: Some of these factors can differ depending on your framework’s problem space—for
    example, frontend versus backend domains.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素可能因你的框架问题空间的不同而有所不同——例如，前端与后端领域。
- en: Trying out esbuild
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用esbuild
- en: The `chapter5/esbuild` directory in the book's repository includes a sample
    project that uses `esbuild` to bundle frontend files. You can refer to the `build.js`
    file for the `esbuild` compiler configuration. When you run this project locally
    on your machine, the tool will take the assets from the `src` directory and output
    the resulting files into the `dist` directory; these are later loaded into the
    `index.html` file in the root of the project. The build steps are executed using
    the `npm run dev` command from the project directory.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍仓库中的`chapter5/esbuild`目录包含一个使用`esbuild`打包前端文件的示例项目。你可以参考项目目录中的`build.js`文件以获取`esbuild`编译器的配置。当你在本机上本地运行此项目时，该工具将从`src`目录中提取资源，并将生成的文件输出到`dist`目录；这些文件随后被加载到项目根目录下的`index.html`文件中。构建步骤是通过在项目目录中执行`npm
    run dev`命令来执行的。
- en: With enough time investment, you can develop your own compiler or bundler. We
    have seen prior examples of custom framework compiler development with projects
    such as Svelte. Creating your own tooling is a larger undertaking, but this is
    something that could set your framework apart and has immense potential.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 投入足够的时间，你可以开发出自己的编译器或打包工具。我们已经看到了使用Svelte等项目进行自定义框架编译器开发的先例。创建自己的工具是一项更大的任务，但这可以使你的框架与众不同，并具有巨大的潜力。
- en: JavaScript extensions
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript扩展
- en: TypeScript and similar tools that extend the JavaScript functionality get a
    special mention in the design decision section. These JavaScript language extensions
    have been at the core of framework development in recent years. Even if the popularity
    of using TypeScript in the framework development workflow might decrease over
    time, it will likely be replaced by other similar tooling that encompasses benefits
    not available directly with JavaScript. With TypeScript in particular, framework
    developers get a productivity boost from extra features such as static typing,
    interfaces, decorators, namespaces, and much more. All these are highly beneficial
    for framework development.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计决策部分，特别提到了扩展JavaScript功能的TypeScript和类似工具。这些JavaScript语言扩展在近年来一直是框架开发的核心理念。即使使用TypeScript在框架开发工作流程中的流行度可能会随着时间的推移而下降，但它很可能会被其他类似的工具所取代，这些工具包含了JavaScript本身无法直接提供的优势。特别是TypeScript，框架开发者可以从额外的功能中获得生产力的提升，如静态类型、接口、装饰器、命名空间等。所有这些都非常有利于框架开发。
- en: 'Suppose you are unsure about introducing an additional TypeScript workflow
    into your framework or have a specific JavaScript environment that conflicts with
    TypeScript’s tooling. In that case, you could consider a design decision to opt
    in for the JSDoc annotation version of TypeScript types. A range of supported
    types for JavaScript files with TypeScript annotations can be found at [typescriptlang.org/docs/handbook/jsdoc-supported-types.html](https://typescriptlang.org/docs/handbook/jsdoc-supported-types.html).
    If you don’t mind the additional transpiling step and entirely opt into TypeScript’s
    ecosystem, then it can help you with many development hurdles, such as the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你不确定是否要将额外的TypeScript工作流程引入到你的框架中，或者你有一个与TypeScript工具冲突的特定JavaScript环境。在这种情况下，你可以考虑一个设计决策，选择使用TypeScript类型的JSDoc注释版本。可以在[typescriptlang.org/docs/handbook/jsdoc-supported-types.html](https://typescriptlang.org/docs/handbook/jsdoc-supported-types.html)找到支持JavaScript文件带有TypeScript注释的类型范围。如果你不介意额外的转换步骤，并且完全选择TypeScript生态系统，那么它可以帮助你克服许多开发难题，例如以下内容：
- en: Reducing the number of code issues identified at runtime
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少在运行时识别出的代码问题数量
- en: '**Enabling faster refactoring of your code**: The ability to do this is much
    more critical in frameworks, as frameworks have much more dynamic code bases than
    routine web application projects'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加快代码重构的速度**：在框架中，这种能力更为关键，因为框架的代码库比常规的Web应用程序项目更加动态。'
- en: '**Improved class-based programming concepts**: You can use additional building
    blocks such as interfaces, inheritance features, and more to have a well-designed
    code base'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进基于类的编程概念**：你可以使用额外的构建块，如接口、继承特性等，以拥有一个设计良好的代码库。'
- en: '**Having a much more descriptive and documented code base**: This proactively
    benefits you and other teammates working on the project with you'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有一个描述性更强、文档更完善的代码库**：这会主动地对你和其他与你一起工作的团队成员带来好处。'
- en: '**It allows you to utilize new syntax features faster**: TypeScript constantly
    adds new valuable features and is not bound by slow browser adoption of new syntax
    features'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许你更快地利用新的语法特性**：TypeScript不断添加新的有价值的功能，并且不受浏览器缓慢采用新语法特性的限制。'
- en: All these benefits are highly useful, and ultimately it is a good design decision
    to use TypeScript or TypeScript-like solutions to enhance the quality of your
    coding experience.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些好处都非常实用，最终使用 TypeScript 或类似 TypeScript 的解决方案来提升你的编码体验是一个良好的设计决策。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter’s core ideas looked at several critical factors and considerations
    that we need to research and keep in mind as we start our new project. First is
    identifying the framework’s stakeholders and goals, these being the objectives
    and the audience that will benefit from having these objectives fulfilled. Then,
    we examined potential problem spaces, focusing on understanding the project types
    we can consider. Finally, we explored examples of specific JavaScript architectural
    design decisions that could shape our project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的核心思想探讨了我们在开始新项目时需要研究和牢记的几个关键因素和考虑事项。首先是确定框架的利益相关者和目标，这些包括实现这些目标的目标和受众。然后，我们考察了潜在的问题领域，重点关注理解我们可以考虑的项目类型。最后，我们探讨了可能塑造我们项目的特定
    JavaScript 架构设计决策的例子。
- en: Considering all this information will help you create a better framework project.
    Meanwhile, we will also use these framework considerations together throughout
    this book. We will start applying all these considerations in the next chapter,
    as we start building a new framework from scratch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑所有这些信息将帮助你创建一个更好的框架项目。同时，我们也将在这本书的整个过程中使用这些框架考虑因素。我们将在下一章开始应用所有这些考虑因素，因为我们将从零开始构建一个新的框架。
