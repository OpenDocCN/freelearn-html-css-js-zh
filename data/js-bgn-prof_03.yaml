- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: JavaScript Multiple Values
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 多值
- en: 'The basic data types have been dealt with in the previous chapter. Now it''s
    time to look at a slightly more complicated topic: arrays and objects. In the
    previous chapter, you saw variables that held just a single value. To allow for
    more complex programming, objects and arrays can contain multiple values.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 基本数据类型在前一章中已经处理过了。现在是时候看看一个稍微复杂一点的主题：数组和对象。在前一章中，你看到了只包含单个值的变量。为了允许更复杂的编程，对象和数组可以包含多个值。
- en: You can look at objects as a collection of properties and methods. Properties
    can be thought of as variables. They can be simple data structures such as numbers
    and strings, but also other objects. Methods perform actions; they contain a certain
    number of lines of code that will be executed when the method gets called. We'll
    explain methods in more detail later in this book and focus on properties for
    now. An example of an object can be a real-life object, for example, a dog. It
    has properties, such as name, weight, color, and breed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将对象视为属性和方法的集合。属性可以被视为变量。它们可以是简单的数据结构，如数字和字符串，也可以是其他对象。方法执行操作；它们包含一定数量的代码行，当方法被调用时将执行这些代码行。我们将在本书的后面部分更详细地解释方法，并专注于属性。一个对象的例子可以是现实生活中的对象，例如，一只狗。它有属性，如名字、重量、颜色和品种。
- en: 'We will also discuss arrays. An array is a type of object, which allows you
    to store multiple values. They are a bit like lists. So, you could have an array
    of items to buy at the grocery store, which might contain the following values:
    apples, eggs, and bread. This list would take the form of a single variable, holding
    multiple values.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论数组。数组是一种对象类型，它允许你存储多个值。它们有点像列表。所以，你可以有一个包含以下值的购物清单数组：苹果、鸡蛋和面包。这个列表将以单个变量的形式呈现，包含多个值。
- en: 'Along the way, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们将涵盖以下主题：
- en: Arrays and their properties
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组和它们的属性
- en: Array methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组方法
- en: Multidimensional arrays
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多维数组
- en: Objects in JavaScript
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript中的对象
- en: Working with objects and arrays
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与对象和数组一起工作
- en: Let's start with arrays.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从数组开始。
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在*附录*中找到。
- en: Arrays and their properties
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组和它们的属性
- en: Arrays are lists of values. These values can be of all data types and one array
    can even contain different data types. It is often very useful to store multiple
    values inside one variable; for example, a list of students, groceries, or test
    scores. Once you start writing scripts, you'll find yourself needing to write
    arrays very often; for example, when you want to keep track of all the user input,
    or when you want to have a list of options to present to the user.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是值的列表。这些值可以是所有数据类型，一个数组甚至可以包含不同的数据类型。在单个变量中存储多个值通常非常有用；例如，学生名单、购物清单或测试分数。一旦你开始编写脚本，你会发现你需要经常编写数组；例如，当你想要跟踪所有用户输入时，或者当你想要向用户展示选项列表时。
- en: Creating arrays
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组
- en: You might be convinced by now that arrays are great, so let's see how we can
    make them. There is actually a right way and a wrong way to do it. Here are both.
    Which one do you think is the right one?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经相信数组很棒了，那么让我们看看我们如何创建它们。实际上，有正确和错误的方法来做这件事。这里都有。你认为哪个是正确的？
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you guessed the second option, using square brackets, you are right. This
    is the best and most readable way to create a new array. On the other hand, the
    first option can do unexpected things. Look at both lines of code here. What do
    you think they will do?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你猜对了第二个选项，使用方括号，你是正确的。这是创建新数组的最佳和最可读的方式。另一方面，第一个选项可能会做意想不到的事情。看看这两行代码。你认为它们会做什么？
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Probably, you sense that something is up here. They do not both create an array
    with one value, `10`. The second one, `arr4`, does. The first option creates an
    array with 10 undefined values. If we log the values like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，你在这里感觉到有些不对劲。它们并不都创建一个包含一个值`10`的数组。第二个，`arr4`，确实创建了。第一个选项创建了一个包含10个未定义值的数组。如果我们这样记录值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is what it logs:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是它记录的内容：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Thanks, JavaScript! That was very helpful. So, unless that is what you need
    to do, please use the square brackets!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢，JavaScript！这非常有帮助。所以，除非你需要这样做，请使用方括号！
- en: 'As I already mentioned, we can have mixed arrays and arrays can hold any type
    of variable. The values of the array won''t be converted to a single data type
    or anything like that. JavaScript simply stores all the variables with their own
    data type and value in the array:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，我们可以有混合数组，数组可以存储任何类型的变量。数组的值不会被转换为单一的数据类型或类似的东西。JavaScript 简单地将所有变量及其数据类型和值存储在数组中：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will output to the console:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在控制台输出：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The last array fun fact we will go over here is what happens if you define
    an array using `const`. You can change the values of a constant array, but you
    cannot change the array itself. Here is a piece of code to demonstrate:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要讨论的最后一个数组有趣的事实是，如果你使用 `const` 定义数组会发生什么。你可以改变常量数组的值，但不能改变数组本身。以下是一段演示代码：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The new value for the first element of the array is going fine, but you cannot
    assign a new value to the full array. Here is what it will output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数组第一个元素的新的值一切正常，但你不能为整个数组分配一个新的值。以下是它将输出的内容：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Accessing elements
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问元素
- en: 'This beautiful array we just made would become much more powerful if we could
    access its elements. We can do this by referencing the array''s index. This is
    something we did not specify when we created the array, and we did not need to
    either. JavaScript assigns an index to every value of the array. The first value
    is assigned the position of 0, the second 1, the third 2, and so on. If we want
    to call a specific value based on its position in the array, we can use the name
    of our array, add square brackets to the end, and put the index we want to access
    between the square brackets, like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的这个漂亮的数组，如果我们能够访问其元素，将会变得更有力量。我们可以通过引用数组的索引来实现这一点。这是我们在创建数组时没有指定的事情，我们也不需要指定。JavaScript
    会为数组的每个值分配一个索引。第一个值被分配为位置 0，第二个为 1，第三个为 2，以此类推。如果我们想根据其在数组中的位置调用一个特定的值，我们可以使用我们的数组名，在末尾添加方括号，并在方括号中放置我们想要访问的索引，如下所示：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This log statement will write `Toyota` to the console because we called for
    the position 0 of the array, which outputs the first value in the list.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这条日志语句将把 `Toyota` 写入控制台，因为我们调用了数组的第 0 个位置，它输出了列表中的第一个值。
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Calling index position 1 is giving us the second element in the array, which
    is `Renault`. This will be logged to the console.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调用索引位置 1 给我们的是数组中的第二个元素，它是 `Renault`。这将记录到控制台。
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The third element in our array has index 2, so this one will log `Volkswagen`.
    What do you think will happen if we use a negative index or an index that is higher
    than the number of values we get?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们数组中的第三个元素索引为 2，所以这将记录 `Volkswagen`。你认为如果我们使用负索引或高于我们得到的值的索引会发生什么？
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We didn't assign a value to the negative or non-existent index, so when we ask
    for it, the value is undefined. As such, the log output will be undefined. JavaScript
    does not throw an error because of this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有为负数或不存在的索引分配值，所以当我们请求它时，其值是未定义的。因此，日志输出将是未定义的。JavaScript 由于这个原因不会抛出错误。
- en: Overwriting elements
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖元素
- en: 'The elements in an array can be overwritten. This can be done by accessing
    a certain element using the index and assigning a new value:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素可以被覆盖。这可以通过使用索引访问某个元素并分配新值来完成：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of this log is `Tesla` because it has overwritten the old value,
    `Toyota`. If we output the whole array:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这条日志的输出是 `Tesla`，因为它覆盖了旧值 `Toyota`。如果我们输出整个数组：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It will output the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出以下内容：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What happens if you try to overwrite an element that does not exist?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试覆盖一个不存在的元素会发生什么？
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Or even a negative index?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至是负索引？
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s see what happens when we try to write the values to the console:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们尝试将值写入控制台时会发生什么：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And the output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输出如下：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Ha! They suddenly exist. How is that you may wonder? We will discuss this in
    the next section. For now, just remember that this is not the right way to add
    values to the array. We will discuss the right way when we explain arrays in the
    *Array methods* section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈！它们突然出现了。你可能想知道这是怎么回事？我们将在下一节中讨论这个问题。现在，只需记住，这不是向数组添加值的正确方法。当我们解释 *Array methods*
    部分时，我们将讨论正确的方法。
- en: Built-in length property
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置长度属性
- en: 'Arrays have a very useful built-in property: length. This will return the number
    of values that the array has:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数组有一个非常有用的内置属性：长度。这将返回数组中的值的数量：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first `console.log` call returns `3`, indicating that the colors array
    contains 3 values. The second one returns `4`, and the last one is an empty array
    with a length of `0`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用`console.log`返回`3`，表示颜色数组包含3个值。第二次调用返回`4`，最后一次调用返回一个长度为`0`的空数组：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, be aware that the length is one higher than the maximum index because the
    index of the array starts at 0, but when determining the length, we look at the
    number of elements and there are four separate elements. This is why the maximum
    index is 3 when the length is 4\. Hence, the positional value of the last element
    in the array will be one fewer than the total number of elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请注意，长度比最大索引多1，因为数组的索引从0开始，但在确定长度时，我们查看元素的数量，这里有四个独立的元素。这就是为什么长度为4时，最大索引是3。因此，数组中最后一个元素的位置值将比元素总数少1。
- en: 'Take a moment and try to figure out how you can use the length to access the
    last element of the array:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间想想你如何使用长度来访问数组的最后一个元素：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You get the highest index by subtracting 1 from the length because, as you know,
    arrays are zero-indexed. So, the positional value of the last element in the array
    will be one fewer than the total number of elements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从长度中减去1来得到最高索引，因为你知道，数组是零索引的。所以，数组中最后一个元素的位置值将比元素总数少1。
- en: 'So, this might seem pretty straightforward. Remember the non-existent index
    position we called in the previous section? Let''s see what happens in this example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这看起来可能很简单。记得我们在上一节中调用的不存在的索引位置吗？让我们看看这个例子会发生什么：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The length of the array is only counting the integer numbers starting from
    0 up to the highest filled index. If there are elements in the middle of the sequence
    that do not have a value, they will still get counted. In this case, the length
    becomes 6\. If we log the array, we can see why:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的长度只计算从0开始的整数，直到最高填充索引。如果序列中间有未设置值的元素，它们仍然会被计算。在这种情况下，长度变为6。如果我们记录数组，我们可以看到原因：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output will be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Because we added an element, 48, at index 5, it also created 2 elements at index
    positions 3 and 4 containing empty values. For now, let's have a look at array
    methods and find out the right way to add to an array.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经在索引5处添加了一个元素，48，它也在索引位置3和4创建了包含空值的2个元素。现在，让我们看看数组方法，并找出正确添加到数组中的方法。
- en: Practice exercise 3.1
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.1
- en: 'Create an array to use as your shopping list with 3 items: "Milk," "Bread,"
    and "Apples."'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含3个项目的数组作为你的购物清单：“牛奶”、“面包”和“苹果。”
- en: Check your list length in the console.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中检查你的列表长度。
- en: Update "Bread" to "Bananas."
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“面包”更新为“香蕉。”
- en: Output your entire list to the console.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个列表输出到控制台。
- en: Array methods
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组方法
- en: We have just seen the built-in length property. We also have a few built-in
    methods. Methods are functions on a certain object. Instead of holding a value,
    like properties, they perform actions. We will cover functions in-depth in *Chapter
    6*, *Functions*. For now, all you need to know is that you can call methods and
    functions, and when you do, some code that is specified inside that function gets
    executed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了内置的length属性。我们还有一些内置的方法。方法是在某个对象上的函数。与属性不同，它们执行操作。我们将在*第6章*，*函数*中深入讨论函数。现在，你需要知道的是，你可以调用方法和函数，当你这样做时，函数内部指定的某些代码会被执行。
- en: We just accidentally saw we could add elements using new indices. This is not
    the proper way to do it as it is easy to make mistakes and accidentally overwrite
    a certain value or skip a certain index. The right way is to do this with a special
    method. Similarly, we can also delete elements and sort the elements in the array.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是意外地看到我们可以使用新的索引添加元素。这不是正确的做法，因为它很容易出错，意外地覆盖某个值或跳过某个索引。正确的方法是使用特殊的方法来做这件事。同样，我们也可以删除数组中的元素并对数组中的元素进行排序。
- en: Adding and replacing elements
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和替换元素
- en: 'We can add elements with the `push()` method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`push()`方法添加元素：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The value gets added to the end of the array. The `push` method returns the
    new length of the array, four in this case. You can store this length in a variable
    like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 值被添加到数组的末尾。`push`方法返回数组的新的长度，在这个例子中是4。你可以将这个长度存储在一个变量中，如下所示：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The value 5 gets stored in the `lengthOfFavoriteFruits` variable. If we log
    our array, `favoriteFruits`, like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 值5被存储在`lengthOfFavoriteFruits`变量中。如果我们像这样记录我们的数组`favoriteFruits`：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here is the new array:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的数组：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This was easy right? But what if you would want to add elements at a certain
    index? You can use the `splice()` method. This one is slightly more difficult:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，对吧？但如果你想在某个索引处添加元素呢？你可以使用 `splice()` 方法。这个稍微有点难：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After this, the output containing the array is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，包含数组的输出如下：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: First, let's point out the different layouts of this output. This might depend
    on the interpreter you are using, but at some point, it will decide it is too
    long for a single line and apply an automatic format to the array to make it more
    readable. It doesn't change the value of the array; it is just a different representation
    of the same values were they to be on a single line.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们指出这个输出的不同布局。这可能会取决于你使用的解释器，但最终它将决定单行显示太长，并自动应用格式化使数组更易读。这不会改变数组的值；这只是相同值的另一种表示形式，如果它们在单行上显示的话。
- en: As you can see, the square and trapezoid get inserted on index 2\. The rest
    of the array is shifting to the right. The `splice()` method takes multiple parameters.
    The first parameter, 2 in our case, is the index of the array on which we want
    to start inserting. The second parameter, 0 in our case, is the number of elements
    we want to delete starting at our previously defined starting index. The parameters
    after these first two, `square` and `trapezoid` in our case, are whatever should
    be inserted starting at the start index.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，正方形和梯形被插入到索引2处。数组的其余部分向右移动。`splice()` 方法接受多个参数。第一个参数，在我们的例子中是2，是我们想要开始插入的数组索引。第二个参数，在我们的例子中是0，是从先前定义的起始索引开始删除的元素数量。这些第一个参数之后的参数，在我们的例子中是
    `square` 和 `trapezoid`，是应该从起始索引开始插入的内容。
- en: 'So, had we said this instead:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们说的是这个：
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It would have replaced the elements `rectangle` and `pentagon` and added `square`
    and `trapezoid` in their place, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们替换了元素 `rectangle` 和 `pentagon` 并用 `square` 和 `trapezoid` 取代它们，结果如下：
- en: '[PRE32]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you were to increase the second parameter to a number higher than our array,
    it would not affect the result as JavaScript would simply stop as soon as it runs
    out of values to delete. Try the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将第二个参数增加到比我们的数组更大的数字，它不会影响结果，因为JavaScript会一遇到没有值可以删除就停止。尝试以下代码：
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This would also have had this output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会得到以下输出：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can also add another array to your array. This can be done with the `concat()`
    method. This way, you can create a new array that consists of a concatenation
    of both arrays. The elements of the first array will be first, and the elements
    of the argument of `concat()` will be concatenated to the end:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将另一个数组添加到你的数组中。这可以通过 `concat()` 方法完成。这样，你可以创建一个新的数组，它由两个数组的连接组成。第一个数组的元素将首先出现，然后是
    `concat()` 参数的元素，它们将连接到末尾：
- en: '[PRE35]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And here is the output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This `concat()` method can do even more! We can use it to add values as well.
    We can add a single value, or we can comma-separate multiple values:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `concat()` 方法还能做更多！我们可以用它来添加值。我们可以添加单个值，或者我们可以用逗号分隔多个值：
- en: '[PRE37]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The new value of the array will be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的新值如下：
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Deleting elements
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除元素
- en: 'There are several ways in which you can delete elements from an array. Removing
    the last element is done with `pop()`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数组中的元素有几种方法。移除最后一个元素使用 `pop()`：
- en: '[PRE39]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Logging the array after executing `pop()` results in this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `pop()` 后记录数组的结果如下：
- en: '[PRE40]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Deleting the first element can be done with `shift()`. This causes all other
    indices to be reduced by one:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 删除第一个元素可以使用 `shift()`。这会导致所有其他索引减少1：
- en: '[PRE41]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The new array will be:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 新数组将是：
- en: '[PRE42]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Remember `splice()`? This is a very special method because we can also use it
    to delete values. We specify the index from where we want to start deleting, and
    then the number of elements we want to delete.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 记得 `splice()` 吗？这是一个非常特殊的方法，因为我们也可以用它来删除值。我们指定从哪里开始删除的索引，然后是我们想要删除的元素数量。
- en: '[PRE43]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'After this, the value of the array is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，数组的值如下：
- en: '[PRE44]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'As you can see, 3 elements starting from the second positional index have been
    deleted. The values 3, 4, and 5 are gone. If you do not wish to change any of
    the later indices, you can also use the operator delete. This is not a method,
    but you can use it to change the value of a certain position of the array to undefined:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，从第二个位置索引开始的3个元素已被删除。值3、4和5都不见了。如果你不想改变后面的任何索引，你也可以使用 `delete` 操作符。这不是一个方法，但你可以用它来将数组中某个位置上的值改为
    `undefined`：
- en: '[PRE45]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The array then becomes:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 数组随后变为：
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This is useful when you are relying on index or length for some reason. For
    example, if you are keeping user input, and you want to determine the number of
    user inputs based on an array that the user is pushing to, deleting would decrease
    the number of inputs, whereas that might not be what you would want.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这在需要依赖索引或长度的某些情况下很有用。例如，如果你正在保存用户输入，并且你想根据用户推送到数组的数组来确定用户输入的数量，删除会减少输入的数量，而这可能不是你想要的。
- en: Finding elements
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找元素
- en: If you want to check whether a value is present in an array, you can use the
    `find()` method. What will go in the `find()` method is somewhat different. It
    is actually a function. This function will be executed on every element in the
    array until it finds a match, and if it does not, then it will return undefined.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查一个值是否存在于数组中，你可以使用`find()`方法。`find()`方法中要放入的内容略有不同。实际上，它是一个函数。这个函数将在数组的每个元素上执行，直到找到匹配项，如果没有找到，则返回`undefined`。
- en: 'Do not worry if this is too difficult for now; it will become clear soon enough.
    We are writing the function in two different ways in the following code snippet.
    They are actually doing the same, except that the first one is checking for an
    element being equal to 6, and the second for an element being equal to 10:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心现在这太难了；很快就会变得清晰。在下面的代码片段中，我们以两种不同的方式编写函数。它们实际上是在做同样的事情，只是第一个是检查元素是否等于6，而第二个是检查元素是否等于10：
- en: '[PRE47]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The log statement will log `6` and `undefined` because it can find an element
    that matches for `6`, but not one that matches for `10`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 日志语句将记录`6`和`undefined`，因为它可以找到匹配`6`的元素，但不能找到匹配`10`的元素。
- en: A function can take a certain input. In this case, it takes the element of the
    array as an input. When the element of the array equals 6 (`findValue`) or 10
    (`findValue2`), it returns the element. In *Chapter 6*, *Functions*, we will cover
    functions in much more detail. It is a lot for a beginner to take in, so you can
    review this a bit later if it is unclear for now.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接受某些输入。在这种情况下，它接受数组的元素作为输入。当数组的元素等于6（`findValue`）或10（`findValue2`）时，它返回该元素。在*第6章*，*函数*中，我们将更详细地介绍函数。这对于初学者来说是一大挑战，所以如果你现在还不清楚，可以稍后复习。
- en: 'Often, you do not only want to find the element, but you want to know what
    position it is on. This can be done with the `indexOf()` method. This method returns
    the index on which the value is found. If a value occurs in an array more than
    once, it will return the first occurrence. If the value is not found, it will
    return `-1`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你不仅想要找到元素，还想知道它在什么位置。这可以通过`indexOf()`方法实现。此方法返回找到值的索引。如果值在数组中多次出现，它将返回第一次出现的位置。如果找不到值，它将返回`-1`：
- en: '[PRE48]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: So, the first one will return 1 since that is the index position of 6 in the
    array. The second one will return -1 because the array does not contain 10.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一个将返回1，因为这是数组中6的索引位置。第二个将返回-1，因为数组中不包含10。
- en: 'If you want to find the next occurrence of the specified number, you can add
    a second argument to `indexOf()`, specifying from which position it should start
    searching:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要找到指定数字的下一个出现位置，你可以向`indexOf()`添加一个第二个参数，指定从哪个位置开始搜索：
- en: '[PRE49]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In this case, the value of `findIndex3` will be -1, because 6 cannot be found
    starting from index 2.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`findIndex3`的值将是-1，因为从索引2开始找不到6。
- en: 'The last occurrence can also be found. This is done with the `lastIndexOf()`
    method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次出现的位置也可以找到。这是通过`lastIndexOf()`方法实现的：
- en: '[PRE50]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The value of `lastDog` will be 4 because that is the last occurrence of `dog`
    in the array.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`lastDog`的值将是4，因为这是数组中`dog`的最后一个出现位置。'
- en: Sorting
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: 'There is also a built-in method for sorting arrays. It sorts numbers from small
    to high and strings A-Z. You can call `sort()` on an array and the order of the
    values of the array will change to a sorted order:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个用于排序数组的内置方法。它将数字从小到大排序，并将字符串按字母顺序排序。你可以在数组上调用`sort()`方法，数组的值顺序将变为排序顺序：
- en: '[PRE51]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The value of names after sorting is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 排序后的`names`值如下：
- en: '[PRE52]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'As you can see, the array is now sorted alphabetically. For numbers, it is
    sorting them in ascending order, as you can see in the following code snippet:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，数组现在已按字母顺序排序。对于数字，它按升序排序，如下面的代码片段所示：
- en: '[PRE53]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'After executing this `sort()` method, the value of ages is:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此`sort()`方法后，`ages`的值如下：
- en: '[PRE54]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Reversing
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反转
- en: The elements of the array can be reversed by calling the built-in method, `reverse()`,
    on an array. It puts the last element first, and the first element last. It does
    not matter whether the array is sorted or not; it just reverses the order.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在数组上调用内置方法`reverse()`来反转数组的元素。它将最后一个元素放在最前面，第一个元素放在最后。不管数组是否排序，它只是反转顺序。
- en: 'The value of names before reversing is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 反转之前`names`的值如下：
- en: '[PRE55]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now we are going to call the `reverse()` method:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将调用`reverse()`方法：
- en: '[PRE56]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The new order will be:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 新的顺序将是：
- en: '[PRE57]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Practice exercise 3.2
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习题3.2
- en: Create an empty array to use as a shopping list.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空数组作为购物清单。
- en: Add `Milk`, `Bread`, and `Apples` to your list.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“Milk”、“Bread”和“Apples”添加到你的列表中。
- en: Update "`Bread`" with `Bananas` and `Eggs`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“Bread”更新为“Bananas”和“Eggs”。
- en: Remove the last item from the array and output it into the console.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数组中移除最后一个元素并将其输出到控制台。
- en: Sort the list alphabetically.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按字母顺序排序列表。
- en: Find and output the index value of `Milk`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找并输出“Milk”的索引值。
- en: After `Bananas`, add `Carrots` and `Lettuce`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Bananas”之后添加“Carrots”和“Lettuce”。
- en: Create a new list containing `Juice` and `Pop`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含“Juice”和“Pop”的新列表。
- en: Combine both lists, adding the new list twice to the end of the first list.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个列表合并，将新列表两次添加到第一个列表的末尾。
- en: Get the last index value of `Pop` and output it to the console.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`Pop`的最后一个索引值并将其输出到控制台。
- en: 'Your final list should look like this:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的最终列表应该看起来像这样：
- en: '[PRE58]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Multidimensional arrays
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'Earlier, we established already that arrays can contain any data type. This
    means that arrays can also contain other arrays (which, in turn, can contain…
    other arrays!). This is called a multidimensional array. It sounds complicated,
    but it is just an array of arrays: a list of lists:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们已经确定数组可以包含任何数据类型。这意味着数组也可以包含其他数组（反过来，也可以包含...其他数组！）。这被称为多维数组。听起来很复杂，但它只是数组的数组：列表的列表：
- en: '[PRE59]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'So, we can create an array of already existing arrays. This is called a two-dimensional
    array. We can write it like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以创建一个包含已存在数组的数组。这被称为二维数组。我们可以这样写：
- en: '[PRE60]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If you want to access elements of the inner arrays, you will have to specify
    an index twice:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想访问内部数组的元素，你必须指定两次索引：
- en: '[PRE61]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The statement will grab the first array because it has an index position of
    `0`. From this first array, it will take the second value, because it has an index
    position of `1`. Then it stores this value in `value1`. That means the value of
    `value1` will be 2\. Can you figure out what the value of the next one will be?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句将获取第一个数组，因为它有一个索引位置`0`。从这个第一个数组中，它将获取第二个值，因为它有一个索引位置`1`。然后它将这个值存储在`value1`中。这意味着`value1`的值将是2。你能猜出下一个值是多少吗？
- en: '[PRE62]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'It takes the third array, and from this third array, it takes the third value.
    Thus, 9 will be stored in `value2`. And it does not stop here; it can go many
    levels deep. Let''s show that by creating an array of our array of arrays. We
    are simply going to store this array three times in another array:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 它获取第三个数组，并从这个第三个数组中获取第三个值。因此，9将被存储在`value2`中。而且它不会停止在这里；它可以深入很多层级。让我们通过创建一个包含我们的数组数组的数组来展示这一点。我们只是简单地将这个数组存储在另一个数组中三次：
- en: '[PRE63]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This is what the array looks like in terms of values:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数组在值方面的样子：
- en: '[PRE64]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Let''s get the middle element of this array, which is the value 5, belonging
    to the second array of arrays. It is done like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取这个数组的中间元素，即属于第二个数组数组的值5。这样做：
- en: '[PRE65]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The first step is to get the second array of arrays, so index 1\. Then we need
    to get the second array of this one, which again is index 1\. Now we reach the
    level of the values, and we need the second value, so again we use index 1\. This
    is useful in many situations, for example, when you want to work with matrices.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取数组的第二维数组，因此索引为1。然后我们需要获取这个数组的第二维数组，这同样也是索引1。现在我们达到了值的层级，我们需要第二个值，所以再次使用索引1。这在很多情况下都很有用，例如，当你想处理矩阵时。
- en: Practice exercise 3.3
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习题3.3
- en: 'Create an array containing three values: 1, 2, and 3.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含三个值：1、2和3的数组。
- en: Nest the original array into a new array three times.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将原始数组嵌套到新数组中三次。
- en: Output the value 2 from one of the arrays into the console.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数组中的一个值2输出到控制台。
- en: Objects in JavaScript
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的对象
- en: 'Now it is time to have a look at another complex data structure that can contain
    more than one value: objects! Objects are very useful and can be used to describe
    real-life objects as well as more complex abstract concepts that allow for more
    flexibility in your code.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看另一种可以包含多个值的复杂数据结构了：对象！对象非常有用，可以用来描述现实生活中的对象，以及更复杂的抽象概念，这可以让你的代码更加灵活。
- en: Secretly, you have just been introduced to objects already, because arrays are
    a very special type of object. Arrays are objects with indexed properties. All
    the other objects, and also the objects we will see here, are objects with named
    properties. This means that instead of an automatically generated index number,
    we will give it a custom descriptive name.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 暗中，你已经接触到了对象，因为数组是一种非常特殊类型的对象。数组是具有索引属性的对象。所有其他对象，以及我们在这里将要看到的对象，都是具有命名属性的对象。这意味着我们不会提供一个自动生成的索引号，而是会提供一个自定义的描述性名称。
- en: 'As we can tell from the following code, arrays are defined by JavaScript as
    being of the object type:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下代码中我们可以看出，JavaScript 将数组定义为对象类型：
- en: '[PRE66]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '[PRE67]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Objects are not too dissimilar to real-world objects. They *have* properties
    and they *can* *perform* actions, methods. Here, we will only deal with the properties.
    We will cover methods in *Chapter 7*, *Classes*, after we have seen functions.
    An object is a chance to group multiple variables into one. This is done with
    curly brackets: `{` and `}`. Let''s have a look at this object of a dog here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对象与现实世界中的对象并不太相似。它们 **有** 属性，它们 **可以** 执行动作，方法。在这里，我们只处理属性。我们将在 **第 7 章**，**类**
    中介绍方法，在看过函数之后。对象是将多个变量组合成一个的机会。这是通过大括号 `{` 和 `}` 来完成的。让我们看看这个狗的对象：
- en: '[PRE68]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: We created a variable, `dog`, and we gave this an object as a value. We can
    recognize that this is an object by seeing the { and }. In between the curly braces,
    we see a bunch of properties and their values.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个变量 `dog`，并给它赋了一个对象作为值。我们可以通过看到 { 和 } 来识别这是一个对象。在大括号之间，我们看到一堆属性及其值。
- en: 'If you have ever wondered whether something should be a property, just try
    the following template sentence in your head:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经想过某个东西是否应该是一个属性，只需在你的脑海中尝试以下模板句子：
- en: '**objectname* has a(n) *property name**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象名** 有一个 **属性名**'
- en: For example, a dog has a name, a dog has a color, and a dog has a weight. This
    is slightly different for the Boolean properties, for which you can use "is" or
    "is not" instead of "has".
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一只狗有一个名字，一只狗有一个颜色，一只狗有一个重量。对于布尔属性来说，情况略有不同，你可以使用 "is" 或 "is not" 而不是 "has"。
- en: 'We can access the properties of this object in a very similar way as we would
    with the array. This time, we are not using the index number, but the name of
    the property, to get the value:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用非常类似的方式访问这个对象的属性，就像访问数组一样。这次，我们不是使用索引号，而是使用属性名来获取值：
- en: '[PRE69]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'There is another way to do this. Instead of the square brackets, the property
    name can also be added to the object name with a dot in between:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法来做这件事。而不是使用方括号，属性名也可以通过中间的点添加到对象名中：
- en: '[PRE70]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This might look familiar. Do you remember how we got the length of an array
    with the built-in property length? Yes—the same way! The difference between properties
    and methods is the lack of parentheses for properties.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很熟悉。你还记得我们是如何使用内置属性 length 获取数组长度的吗？是的——同样的方式！属性和方法之间的区别是属性没有括号。
- en: Updating objects
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新对象
- en: 'We can change the value of the properties of the objects. Again, this is similar
    to an array because an array is an object as well, but for properties, we have
    two options:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改对象的属性值。同样，这和数组类似，因为数组也是一个对象，但对于属性，我们有两种选择：
- en: '[PRE71]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This has changed the properties of our chihuahua JavaScript. The color gets
    updated to blue and it has lost a little bit of weight since the new weight is
    0.1 lower. So if we log our dog:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经改变了我们的吉娃娃 JavaScript 的属性。颜色更新为蓝色，并且由于新重量降低了 0.1，它失去了一点点重量。所以如果我们记录我们的狗：
- en: '[PRE72]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We will get the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下：
- en: '[PRE73]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'It''s useful to note that if we change the data type of one of our properties,
    for example:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有必要注意的是，如果我们更改我们属性之一的数据类型，例如：
- en: '[PRE74]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: This is not a problem. JavaScript will just change the whole value and data
    type to the new situation.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是问题。JavaScript 只会将整个值和数据类型更改为新的情况。
- en: 'Another element to note is that we are now using the literal string values
    to refer to the object''s properties, but we can also work with variables to achieve
    this. So, for example:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的元素是，我们现在使用字面字符串值来引用对象的属性，但我们也可以使用变量来实现这一点。所以，例如：
- en: '[PRE75]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'This will still output `three`, as we just changed the value of age to three.
    If we change the value of the variable to another dog property, we will be accessing
    another property, like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然会输出`three`，因为我们刚刚将年龄的值更改为三。如果我们将变量的值更改为另一个狗属性，我们将访问另一个属性，如下所示：
- en: '[PRE76]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This will print `chihuahua`. And when we update the value accessing this way,
    it is the exact same as when we would have accessed it with the literal string:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`chihuahua`。当我们以这种方式更新值时，它与使用字面字符串访问的方式完全相同：
- en: '[PRE77]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: So, this will log `dachshund` to the console.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这将在控制台记录`dachshund`。
- en: Practice exercise 3.4
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.4
- en: Create a new `myCar` object for a car. Add some properties, including, but not
    limited to, `make` and `model`, and values for a typical car or your car. Feel
    free to use booleans, strings, or numbers.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为一辆车创建一个新的`myCar`对象。添加一些属性，包括但不限于`make`和`model`，以及典型汽车或您汽车的值。您可以自由使用布尔值、字符串或数字。
- en: Create a variable that can hold the string value `color`. This variable containing
    a string value color can now be used to reference the property name within `myCar`.
    Then, use the variable within the square bracket notation to assign a new value
    to the color property in `myCar`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以存储字符串值`color`的变量。这个包含字符串值`color`的变量现在可以用来引用`myCar`中的属性名称。然后，使用方括号符号中的变量来为`myCar`中的颜色属性分配新值。
- en: Use that same variable and assign a new property string value to it, such as
    `forSale`. Use the bracket notation once again to assign a new value to the `forSale`
    property to indicate whether the car is available for purchase.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的变量并为其分配一个新的属性字符串值，例如`forSale`。再次使用方括号符号来为`forSale`属性分配新值，以表示汽车是否可供购买。
- en: Output `make` and `model` into the console.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`make`和`model`的值输出到控制台。
- en: Output the value of `forSale` into the console.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`forSale`的值输出到控制台。
- en: Working with objects and arrays
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与对象和数组一起工作
- en: When working with objects and arrays, you will see these often combined. In
    the last section of this chapter, we will deal with combining objects and arrays,
    and also objects inside objects.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当与对象和数组一起工作时，您会经常看到它们结合使用。在本章的最后部分，我们将处理对象和数组的组合，以及对象中的对象。
- en: Objects in objects
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象中的对象
- en: 'Let''s say we want to have an object for a company. This company will have
    an address. And an address is another object. If we give our company an address,
    we are using an object inside an object:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要有一个公司对象。这个公司将有一个地址。而地址本身也是一个对象。如果我们给公司一个地址，我们就是在使用对象中的对象：
- en: '[PRE78]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: As you can see, our company object has an address object with values. This can
    go very many levels deep if necessary.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的公司对象有一个包含值的地址对象。如果需要，它可以非常深入地分层。
- en: 'To access or modify one of the properties of the address here, we can use two
    approaches:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问或修改地址中的某个属性，我们可以使用两种方法：
- en: '[PRE79]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: As you can see, this is very similar to the array. We first need to select the
    address and then do the same thing to access the property we want to change.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这与数组非常相似。我们首先需要选择地址，然后对想要更改的属性执行相同操作以访问它。
- en: Arrays in objects
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象中的数组
- en: 'Our company might have a range of activities instead of one. We can simply
    replace the activity from our previous sample with an array:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的公司可能有一系列活动而不是一个。我们可以简单地用数组替换之前的示例中的活动：
- en: '[PRE80]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'We have now used an array in our company object. You can simply use an array
    with the square braces after the property. Retrieving the individual values is
    very similar. The second value of the activities array can be fetched using this
    statement:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在公司对象中使用了数组。您可以直接在属性后面使用方括号来使用数组。检索单个值的方式非常相似。可以使用以下语句获取活动数组的第二个值：
- en: '[PRE81]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Here, we call the object we're interested in, `company`, then the relevant array,
    `activities`, with reference to the index position of the variable we're looking
    for within the array, which is `1`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们称我们感兴趣的为`company`，然后是相关的数组`activities`，以及我们正在数组中寻找的变量的索引位置，即`1`。
- en: Objects in arrays
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组中的对象
- en: 'It is very possible that instead of one address, our company has a list of
    addresses. We can accomplish this by creating an array of address objects. In
    this case, we will create an array of two:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，我们的公司不是只有一个地址，而是一系列地址。我们可以通过创建地址对象数组来实现这一点。在这种情况下，我们将创建一个包含两个对象的数组：
- en: '[PRE82]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'So, the arrays can be recognized by the square brackets and the objects by
    the curly brackets. The street name of the first object can be fetched using this
    statement:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数组可以通过方括号识别，对象可以通过花括号识别。第一个对象的街道名称可以通过以下语句获取：
- en: '[PRE83]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Here, we call the array we're interested in, `addresses`, with reference to
    the index position of the object we're looking for within the array, `0`, and
    then the required variable from within the object, which is `street`. This may
    seem complicated, but you may notice that this simply reverses the syntax required
    to retrieve a variable from an array inside an object from the previous section.
    It's worth practicing calling variables from nested arrays and objects until you're
    comfortable with it!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们用 `addresses` 来调用我们感兴趣的数组，根据我们在数组中寻找的对象的索引位置 `0`，然后是对象内的所需变量，即 `street`。这可能看起来很复杂，但你可能会注意到，这实际上只是反转了从上一节中获取对象内部数组变量的语法。练习从嵌套的数组和对象中调用变量直到你感到舒适是值得的！
- en: Objects in arrays in objects
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在对象中的数组对象
- en: 'Just to show that this can go as many levels as we would need, we are going
    to give our company object an array of address objects. So, let''s add this array
    of address objects to our company object. This way, our company has an array of
    addresses:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 只为了展示这可以像我们需要的那么多层次，我们将给我们的公司对象添加一个地址对象数组。所以，让我们将这个地址对象数组添加到我们的公司对象中。这样，我们的公司就有了一个地址数组：
- en: '[PRE84]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'To access elements of increasingly nested objects and arrays, we simply extend
    the same logic you have seen in the previous sections. To access the street name
    of Healthy Candy''s first address, we can use the following code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问越来越嵌套的对象和数组中的元素，我们只需扩展你在前几节中看到的相同逻辑。要访问Healthy Candy的第一个地址的街道名称，我们可以使用以下代码：
- en: '[PRE85]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: As you see, we can stack object and array element requests indefinitely.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们可以无限地堆叠对象和数组元素请求。
- en: We will not make it any more complicated than this for now. Whenever you need
    a list of something, you will be using an array. Whenever you want to represent
    something with properties that have descriptive names, it is better to use an
    object. Just remember that object properties can be of any type.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们不会让它比这更复杂。每次你需要一个列表时，你都会使用数组。每次你想用具有描述性名称的属性表示某物时，最好使用对象。只需记住，对象的属性可以是任何类型。
- en: Practice exercise 3.5
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习题 3.5
- en: Create an object named `people` that contains an empty array that is called
    `friends`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `people` 的对象，其中包含一个名为 `friends` 的空数组。
- en: Create three variables, each containing an object, that contain one of your
    friend's first names, last names, and an ID value.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个变量，每个变量包含一个对象，其中包含你一个朋友的姓氏、名字和ID值。
- en: Add the three friends to the `friend` array.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个朋友添加到 `friend` 数组中。
- en: Output it to the console.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其输出到控制台。
- en: Chapter projects
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Manipulating an array
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作数组
- en: 'Take the following array:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 取以下数组：
- en: '[PRE86]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Manipulate your array using various methods, such as `pop()`, `push()`, `shift()`,
    and `unshift()`, and transform it into the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种方法操作数组，例如 `pop()`、`push()`、`shift()` 和 `unshift()`，将其转换为以下形式：
- en: '[PRE87]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'You can take the following steps, or adopt your own approach:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以采取以下步骤，或者采用你自己的方法：
- en: Remove the first item and the last item.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除第一个和最后一个项目。
- en: Add `FIRST` to the start of the array.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `FIRST` 添加到数组的开头。
- en: Assign `hello World` to the fourth item value.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `hello World` 分配给第四个项目值。
- en: Assign `MIDDLE` to the third index value.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `MIDDLE` 分配给第三个索引值。
- en: Add `LAST` to the last position in the array.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `LAST` 添加到数组的最后一个位置。
- en: Output it to the console.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其输出到控制台。
- en: Company product catalog
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司产品目录
- en: In this project, you will implement a data structure for a product catalog and
    create queries to retrieve data.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将实现一个产品目录的数据结构并创建查询以检索数据。
- en: Create an array to hold an inventory of store items.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数组来存储商店商品的库存。
- en: Create three items, each having the properties of name, model, cost, and quantity.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个项目，每个项目具有名称、型号、成本和数量属性。
- en: Add all three objects to the main array using an array method, and then log
    the inventory array to the console.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数组方法将所有三个对象添加到主数组中，然后将库存数组输出到控制台。
- en: Access the quantity element of your third item, and log it to the console. Experiment
    by adding and accessing more elements within your data structure.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您第三个项目的数量元素，并将其记录到控制台。通过在您的数据结构中添加和访问更多元素进行实验。
- en: Self-check quiz
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: Can you use `const` and update values within an array?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`const`并在数组中更新值吗？
- en: Which property in an array gives the number of items contained in the array?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组中的哪个属性给出了数组中包含的项目数量？
- en: What is the output in the console?
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台中的输出是什么？
- en: '[PRE88]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: How do you replace the second element in an array `myArr = [1,3,5,6,8,9,15]`
    with the value 4?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何将数组`myArr = [1,3,5,6,8,9,15]`中的第二个元素替换为值4？
- en: What is the output in the console?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台中的输出是什么？
- en: '[PRE89]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: What is the output in the console?
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台中的输出是什么？
- en: '[PRE90]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Summary
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So, in this chapter, we have seen arrays and objects. Arrays are a list of values.
    These could be values of the same type, but also values of different types. Every
    element of the array gets an index. The index of the first element is 0\. We can
    access the elements of the array using this index. We can also use this index
    to change and delete the element.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们看到了数组和对象。数组是一系列值。这些可以是相同类型的值，也可以是不同类型的值。数组的每个元素都有一个索引。第一个元素的索引是0。我们可以使用这个索引来访问数组的元素。我们也可以使用这个索引来更改和删除元素。
- en: We then saw that it is also possible to have arrays containing other arrays;
    these are multidimensional arrays. To access the elements of a multidimensional
    array, you would need to use as many indices as you have nested arrays.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们了解到也可以有包含其他数组的数组；这些是多维数组。要访问多维数组的元素，您需要使用与嵌套数组数量相同的索引。
- en: Then, we covered objects and learned that arrays are a special kind of object.
    Objects contain properties and methods. We looked at the properties of objects
    and saw that these properties are given a name and can be accessed and modified
    using this name.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了对象，并了解到数组是一种特殊类型的对象。对象包含属性和方法。我们研究了对象的属性，并看到这些属性被赋予一个名称，并且可以使用这个名称来访问和修改。
- en: We ended this module by looking at how arrays can contain objects, and how objects
    can contain arrays and more. This enables us to create complex object structures,
    which will be of great use in designing real-life applications.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过查看数组如何包含对象以及对象如何包含数组和更多内容来结束本模块。这使得我们能够创建复杂的对象结构，这在设计现实生活中的应用程序中将非常有用。
