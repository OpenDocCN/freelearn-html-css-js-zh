- en: Chapter 1. Getting Started with Grunt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用 Grunt 入门
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Installing the Grunt CLI
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Grunt CLI
- en: Installing Grunt on a project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中安装 Grunt
- en: Installing a plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装插件
- en: Setting up a basic web server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本网络服务器
- en: Watching files for changes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视文件变化
- en: Setting up LiveReload
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 LiveReload
- en: Processing only changed files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅处理已更改的文件
- en: Importing external data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入外部数据
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Grunt** is a popular new task automation framework built upon the **Node.js**
    platform. It offers a wide range of features that allow you to streamline your
    project workflow and save time and energy by automating repetitive tasks, such
    as checking code quality, running tests, compiling templates and code, publishing
    to various types of services, and much more.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Grunt** 是一个基于 **Node.js** 平台构建的流行的新任务自动化框架。它提供了一系列功能，允许您通过自动化重复性任务（如检查代码质量、运行测试、编译模板和代码、发布到各种类型的服务等）来简化项目工作流程，节省时间和精力。'
- en: Task automation has been around since the beginning of software development
    and can probably be seen as a prominent reason for it being around at all. We're
    mostly writing programs to automate repetitive tasks after all.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任务自动化自软件开发之初就存在，可能被视为其存在的一个显著原因。毕竟，我们主要是编写程序来自动化重复性任务。
- en: Grunt itself is, for the most part, only a highly pluggable framework that provides
    a consistent interface for configuring automated tasks. The actual logic of the
    tasks is provided by a large variety of modules called **plugins**, which make
    use of this framework and usually tend to specialize in a certain set of functionalities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt 本身主要是一个高度可插拔的框架，它为配置自动化任务提供了一个一致的接口。实际的任务逻辑由大量称为 **插件** 的模块提供，这些插件利用此框架，通常倾向于专注于某些功能集。
- en: At the time of writing the Grunt project is more than 3 years old, has over
    3,000 plugins available in the **npm** public package registry, and provides tools
    and guides for creating or contributing to existing plugin projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Grunt 项目已有超过 3 年的历史，在 **npm** 公共包注册表中提供了超过 3,000 个插件，并为创建或贡献现有插件项目提供了工具和指南。
- en: A vast number of projects are currently making active use of Grunt in various
    ways, some of the most notable being the Yeoman, Modernizr, AngularJS, and JQuery
    projects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，大量项目正在以各种方式积极使用 Grunt，其中最引人注目的是 Yeoman、Modernizr、AngularJS 和 JQuery 项目。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Be sure to pay a visit to the Grunt website, if you''ve not already done so.
    It''s filled with excellent guides and documentation, and it''s the best place
    to find the plugins you need. The website can be found at the following URL:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有访问过，请务必访问 Grunt 网站。那里充满了优秀的指南和文档，并且是找到您所需插件的最佳地点。网站地址如下：
- en: '[http://gruntjs.com/](http://gruntjs.com/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/](http://gruntjs.com/)'
- en: Installing the Grunt CLI
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Grunt CLI
- en: In order to make use of a Grunt configuration file, the Grunt **command-line
    interface** (**CLI**) tool needs to be installed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Grunt 配置文件，需要安装 Grunt 的 **命令行界面**（**CLI**）工具。
- en: Command-line tools such as the Grunt CLI are usually installed globally. This
    means that they are installed on top of the Node.js installation that is currently
    active in your terminal, and not in the current project path, as is usually the
    case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具，如 Grunt CLI，通常全局安装。这意味着它们安装在您终端中当前活跃的 Node.js 安装之上，而不是在当前项目路径中，这通常是情况。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In this book, we'll work with version 0.4.x of Grunt, which requires Node.js
    version 0.8.x or higher.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 Grunt 的 0.4.x 版本，它需要 Node.js 0.8.x 或更高版本。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps will take us through installing the Grunt CLI and testing
    for its successful installation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们安装 Grunt CLI 并测试其安装是否成功。
- en: 'Assuming that you already have a global installation of Node.js, the following
    is the command to install the Grunt CLI:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您已经全局安装了 Node.js，以下命令用于安装 Grunt CLI：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the installation was successful, the `grunt` command should now be available
    on the terminal. Test this by typing `grunt` in your terminal and confirm that
    it returns a message similar to the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果安装成功，`grunt` 命令现在应该在终端上可用。通过在您的终端中输入 `grunt` 并确认它返回的消息类似于以下内容来测试：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `npm install` command looks up the `grunt-cli` package on npm's **public
    package registry**, and proceeds to download and install it once it is found.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install` 命令会在 npm 的 **公共包注册库** 中查找 `grunt-cli` 包，一旦找到，就会下载并安装它。'
- en: Using the `-g` argument along with the `install` command indicates that the
    package we'd like to install, should be installed globally, meaning it should
    be installed on the version of Node.js that is currently active in our terminal.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-g` 参数与 `install` 命令一起表示我们想要安装的包应该全局安装，这意味着它应该安装在我们终端中当前活动的 Node.js 版本上。
- en: In a default Node.js setup, a folder for executable binaries will automatically
    be added as a path that should be scanned by the terminal for executable commands.
    This makes the `grunt` command automatically available after the installation
    of this package, as its executable binary is provided and indicated in the package's
    installation information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的 Node.js 设置中，一个用于可执行二进制文件的文件夹将自动添加为路径，该路径应由终端扫描以查找可执行命令。这使得在安装此包后，`grunt`
    命令自动可用，因为其可执行二进制文件由包的安装信息提供并指示。
- en: Setting up Grunt in a project
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中设置 Grunt
- en: For a project to make use of the Grunt framework, it will require the installation
    of its libraries and the setting up a bare minimum configuration file. The libraries
    provide the framework and tools required by all Grunt plugins, and the configuration
    file provides a starting point from which we can start loading plugins and adjusting
    their behavior.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使项目能够使用 Grunt 框架，它将需要安装其库并设置一个最基本配置文件。库提供了所有 Grunt 插件所需的框架和工具，而配置文件提供了一个起点，从这里我们可以开始加载插件并调整其行为。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: It's usually a good idea for a project to be packaged in a way to help keep
    track of dependencies, binaries, scripts, maintainers, and other important information.
    The standard package format for Node.js-based projects is **CommonJS**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个项目来说，以某种方式打包以帮助跟踪依赖项、二进制文件、脚本、维护者和其他重要信息通常是一个好主意。基于 Node.js 的项目的标准包格式是 **CommonJS**。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To find out more about CommonJS, you can take a look at its specification at
    the following URL:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 CommonJS 的信息，您可以查看以下网址中的其规范：
- en: '[http://wiki.commonjs.org/wiki/Packages/1.1](http://wiki.commonjs.org/wiki/Packages/1.1)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.commonjs.org/wiki/Packages/1.1](http://wiki.commonjs.org/wiki/Packages/1.1)'
- en: 'At the heart of the CommonJS package, lies the `package.json` file. This file
    contains everything important about the package and is stored in the JSON format.
    The simplest way to create a `package.json` file is to use the `npm init` command.
    This command will ask a series of questions and generate a `package.json` file
    based on the answers provided. Here''s an example of the questions that are asked
    when you run the command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS 包的核心是 `package.json` 文件。该文件包含关于包的所有重要信息，并以 JSON 格式存储。创建 `package.json`
    文件的最简单方法就是使用 `npm init` 命令。该命令会提出一系列问题，并根据提供的答案生成一个 `package.json` 文件。以下是在运行该命令时提出的问题示例：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After these questions are answered, a `package.json` file will be generated
    in the current path with the following contents:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答这些问题之后，将在当前路径下生成一个包含以下内容的 `package.json` 文件：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Another handy guide to the `package.json` file can be found at the following
    URL:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下网址可以找到关于 `package.json` 文件的另一个实用指南：
- en: '[http://browsenpm.org/package.json](http://browsenpm.org/package.json)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://browsenpm.org/package.json](http://browsenpm.org/package.json)'
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through installing the Grunt framework libraries
    on our project and creating a bare minimum configuration file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们在项目中安装 Grunt 框架库并创建一个最基本配置文件。
- en: 'First, we''ll install the Grunt libraries in the current project path, and
    have it added to our project dependencies. This can all be done by using the following
    command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将安装 Grunt 库到当前项目路径中，并将其添加到我们的项目依赖中。所有这些都可以通过以下命令完成：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Due to our use of the `--save` flag with the `install` command, the Grunt package
    will be added to the dependency list of the project's package. This can be confirmed
    by taking a look at the `dependencies` property inside the `package.json` file.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们在 `install` 命令中使用了 `--save` 标志，Grunt 包将被添加到项目包的依赖列表中。这可以通过查看 `package.json`
    文件中的 `dependencies` 属性来确认。
- en: The `--save-dev` flag is also available for use with the `install` command when
    you'd like the installed packages to be added to the `devDependencies` property,
    which lists the dependencies to set up a development environment.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你想将安装的包添加到`devDependencies`属性中时，可以使用`--save-dev`标志与`install`命令一起使用，该属性列出了设置开发环境所需的依赖项。
- en: 'Next, we''ll set up an empty configuration file that would, at the very least,
    allow Grunt to run and also provides a place for future task configurations. Let''s
    create a file called `Gruntfile.js` in the root directory of our project with
    the following contents:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置一个空的配置文件，它至少可以允许Grunt运行，并为未来的任务配置提供一个位置。让我们在我们的项目根目录中创建一个名为`Gruntfile.js`的文件，其内容如下：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have the Grunt libraries installed and a basic configuration file
    set up, we can use the `grunt` command to test that it''s all working as expected.
    Running the `grunt` command in the terminal should now produce output similar
    to the following:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Grunt库并设置了基本的配置文件，我们可以使用`grunt`命令来测试它是否按预期工作。在终端中运行`grunt`命令现在应该产生类似于以下内容的输出：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Running the `grunt` command without specifying any parameters will always try
    to run the `default` task, which in the case of our current example, is set to
    nothing.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不指定任何参数运行`grunt`命令时，总是会尝试运行`default`任务，在我们的当前示例中，它被设置为不执行任何操作。
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the Grunt CLI tool is used, it always looks for the nearest file named
    `Gruntfile.js`, from which it then attempts to load configurations. Inside the
    configuration file, there is an exported function that receives one argument.
    This argument is an object that provides us with access to the Grunt framework
    to load, create, and configure tasks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Grunt CLI工具时，它总是寻找最近的名为`Gruntfile.js`的文件，然后尝试从中加载配置。在配置文件中，有一个导出的函数接收一个参数。这个参数是一个对象，它为我们提供了访问Grunt框架以加载、创建和配置任务的权限。
- en: At this point, we have no tasks loaded or created, and no configurations defined.
    Our `default` task is also set to do nothing, so running the `grunt` command did
    nothing except report that it was successfully completed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们没有加载或创建任何任务，也没有定义任何配置。我们的`default`任务也被设置为不执行任何操作，因此运行`grunt`命令除了报告它已成功完成外，没有做任何事情。
- en: Installing a plugin
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: All of the functionality that can be provided by Grunt is housed in the plugins
    that are made available in the form of Node.js packages. In this recipe, we'll
    run through the process of installing a plugin, which will prepare us for all
    the recipes that are to follow.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt可以提供的所有功能都包含在以Node.js包形式提供的插件中。在本食谱中，我们将通过安装插件的流程来准备我们后续的所有食谱。
- en: For our example, we'll install the `contrib-jshint (0.10.0)` plugin. The same
    steps used to install this plugin can be used to install any of the other plugins
    available in the plugin package index.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将安装`contrib-jshint (0.10.0)`插件。安装此插件所使用的相同步骤可以用来安装插件包索引中提供的任何其他插件。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Setting up Grunt on a project* recipe of this chapter Be sure to refer to it
    if you are not yet familiar with it's contents.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在本章的*在项目中设置Grunt*食谱中创建的基本项目结构。如果你还不熟悉它的内容，请务必参考它。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps take us through installing a plugin on our project and
    loading the tasks it contains:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们在项目中安装插件并加载它包含的任务：
- en: 'The first step of installing a plugin is to install the package that contains
    it in the current project path. For our example, we''ll install the `contrib-jshint`
    plugin that is contained in the `grunt-contrib-jshint` package. We can install
    this package and add it to our project dependencies by using the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装插件的第一步是在当前项目路径中安装包含它的包。在我们的示例中，我们将安装包含在`grunt-contrib-jshint`包中的`contrib-jshint`插件。我们可以使用以下命令安装此包并将其添加到我们的项目依赖项中：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we''ll have to load the tasks contained in the plugin package so they
    can be used in our configuration. This is done using the `loadNpmTasks` function,
    provided to us by the `grunt` object that is passed to us in the configuration
    file. After adding this, our configuration file should look similar to the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要加载插件包中包含的任务，以便它们可以在我们的配置中使用。这是通过使用`loadNpmTasks`函数完成的，该函数由传递给配置文件的`grunt`对象提供。添加此功能后，我们的配置文件应类似于以下内容：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have the package installed and its tasks loaded, we can use the
    loaded tasks in our configuration. For our example, we had the `jshint` task loaded,
    which enables us to use it in a manner similar to the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经安装了包并加载了其任务，我们可以在配置中使用这些加载的任务。在我们的例子中，我们加载了 `jshint` 任务，这使得我们能够以类似以下方式使用它：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As you start to make use of more and more Grunt plugins, you will soon start
    to wonder whether there is a way to optimize the process a little. Fortunately,
    someone else has already gone down this road before and created the `load-grunt-tasks`
    utility that automates the loading of tasks from all the packages mentioned in
    your project dependencies. This means that we no longer need to add a `loadNpmTasks`
    call for each plugin we install.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你开始使用越来越多的 Grunt 插件，你很快就会想知道是否有办法优化这个过程。幸运的是，有人已经在这条路上走在了前面，并创建了 `load-grunt-tasks`
    工具，该工具自动从你项目依赖中提到的所有包中加载任务。这意味着我们不再需要为每个安装的插件添加 `loadNpmTasks` 调用。
- en: 'The following steps illustrate the usage of this utility, continuing from the
    work we did earlier in the main recipe:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤说明了此实用程序的用法，从我们在主菜谱中早期完成的工作继续：
- en: 'Install the utility''s package in the current project path and add it to your
    dependencies by using the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前项目路径中安装此实用程序的包，并使用以下命令将其添加到依赖项中：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can use it in our configuration file by importing the package and passing
    the `grunt` object to it. Now that we''re making use of this utility, we can also
    remove all the `loadNpmTasks` we were using to load our plugins. This should result
    in a configuration file similar to the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过导入包并将 `grunt` 对象传递给它来在我们的配置文件中使用它。现在我们正在使用这个实用程序，我们也可以删除我们用来加载插件的 `loadNpmTasks`。
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The `load-grunt-tasks` plugin will, by default, only load plugins that have
    names with `grunt` at their start. This behavior can be customized by using the
    `pattern` option. To find out more about the `load-grunt-tasks` plugin, refer
    to the plugin''s page at the following URL:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`load-grunt-tasks` 插件只会加载以 `grunt` 开头的插件名称。此行为可以通过使用 `pattern` 选项进行自定义。要了解更多关于
    `load-grunt-tasks` 插件的信息，请参考以下网址中的插件页面：
- en: '[https://github.com/sindresorhus/load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/sindresorhus/load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks)'
- en: Setting up a basic web server
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本 Web 服务器
- en: A simple web server will always come in handy during the development process
    of web-based projects. They can be easily set up and used to serve web content
    from your local machine, so you don't have to worry about constantly deploying
    your experimental changes to a remote service provider.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Web 的项目的开发过程中，简单的 Web 服务器总是很有用。它们可以轻松设置并用于从你的本地机器提供 Web 内容，这样你就不必担心不断将你的实验性更改部署到远程服务提供商。
- en: We'll make use of the `contrib-connect` `(0.8.0)` plugin, which provides us
    with the ability to set up and run a simple web server based on the **Connect**
    server framework. By default, it will only serve files from a directory, but it
    has the added benefit of being able to make use of the many Connect middleware
    plugins available.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `contrib-connect` `(0.8.0)` 插件，它为我们提供了基于 **Connect** 服务器框架设置和运行简单 Web
    服务器的功能。默认情况下，它将只从目录中提供文件，但它还有一个额外的优点，即能够利用许多可用的 Connect 中间件插件。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can read more about the Connect server framework and its middleware plugins
    at the following URL:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址了解更多关于 Connect 服务器框架及其中间件插件的信息：
- en: '[https://github.com/senchalabs/connect](https://github.com/senchalabs/connect)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/senchalabs/connect](https://github.com/senchalabs/connect)'
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Setting up Grunt on a project* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with it's contents.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用本章中 *在项目中设置 Grunt* 菜谱中创建的基本项目结构。如果你还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through setting up a development server that serves
    files from a directory located in our project directory.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们设置一个开发服务器，该服务器从位于我们项目目录中的目录中提供文件。
- en: We'll start by installing the package containing the `contrib-connect` plugin
    and loading its tasks as given in the instructions provided in the *Installing
    a plugin* recipe of this chapter.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先安装包含 `contrib-connect` 插件的包，并按照本章“安装插件”食谱中提供的说明加载其任务。
- en: 'With the `connect` task loaded from the plugin, we can make use of it in our
    configuration. To do this, we add the following to our configuration:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从插件中加载 `connect` 任务后，我们可以在配置中使用它。为此，我们在配置中添加以下内容：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `base` option indicates in which directory the server should look for the
    files that are requested. Everything that you'd like to serve with your development
    server can be placed in this directory. This includes HTML pages, JavaScript source
    files, style sheets, images, and so on.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`base` 选项表示服务器应在哪个目录中查找请求的文件。您希望与开发服务器一起提供的所有内容都可以放置在这个目录中。这包括HTML页面、JavaScript源文件、样式表、图像等等。'
- en: The `keepalive` option keeps the server running even if the requested task has
    finished. This is usually preferred if you're running the `connect` task on its
    own, but is not required if another task will be running indefinitely after it
    has completed.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`keepalive` 选项在请求的任务完成后仍保持服务器运行。如果您单独运行 `connect` 任务，这通常是首选的，但如果在它完成后还有其他任务将无限期运行，则不是必需的。'
- en: 'Let''s add a simple file that we''d like to have served from our server so
    that we have something to test it with. Create a directory called `www` in the
    project root, and then a file inside it called `index.html`, with the following
    contents:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个简单的文件，这样我们就可以从我们的服务器上提供它，以便我们可以用它来测试。在项目根目录下创建一个名为 `www` 的目录，然后在其中创建一个名为
    `index.html` 的文件，内容如下：
- en: '[PRE13]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Like many other web servers, the Connect server started by this task will always
    look for an `index.html` file in a folder if no filename is specified in the request
    URL.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与许多其他网页服务器一样，此任务启动的Connect服务器将始终在请求URL未指定文件名的情况下在文件夹中查找 `index.html` 文件。
- en: 'Now we can run our web server using the `grunt connect` command, which will
    produce output indicating that our server started, along with a URL of where it
    can be reached:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 `grunt connect` 命令来运行我们的网页服务器，这将产生输出，表明服务器已启动，以及可以访问的URL：
- en: '[PRE14]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we can use our favorite browser to pay a visit to the URL mentioned
    in the output. This would show us our example page, as served through our running
    server:![How to do it...](img/image00267.jpeg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用我们最喜欢的浏览器访问输出中提到的URL。这将显示我们的示例页面，通过运行的服务器提供：![如何操作...](img/image00267.jpeg)
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `connect` task provides many useful configuration options that allow us
    to automatically open a browser, specify the port and hostname where the server
    should run, serve files from more than one directory, use other Connect middleware
    plugins, and adding extra functionality to the created server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`connect` 任务提供了许多有用的配置选项，允许我们自动打开浏览器、指定服务器应运行的端口和主机名、从多个目录提供文件、使用其他Connect中间件插件以及向创建的服务器添加额外功能。'
- en: Opening the default web browser on the default URL
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在默认URL上打开默认网页浏览器
- en: 'In order to automatically open our favorite web browser on the default URL
    that our web server provides, we can set the `open` option to `true` as we do
    in the following example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在默认的URL上自动打开我们喜欢的网页浏览器，我们可以将 `open` 选项设置为 `true`，就像以下示例中那样：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Opening a specific web browser at a specific URL
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在特定URL打开特定网页浏览器
- en: 'When we''d like to use a different web browser from the default one to open
    a URL other than the default one, we can provide an object to the `open` option
    that specifies exactly what we''d like. The following code specifies a URL, the
    browser that should be used to open it, and a callback function that should be
    called once it''s been opened:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要使用默认浏览器以外的其他浏览器打开非默认URL时，我们可以向 `open` 选项提供一个对象，该对象指定了我们确切想要的内容。以下代码指定了一个URL、用于打开它的浏览器以及一旦打开就应调用的回调函数：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载示例代码文件，以获取您购买的所有Packt
    Publishing书籍。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: Using a specific port
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用特定端口
- en: 'The default port used by the connect task is `8000`, but if you''d like to
    use a different one, the `port` option can be used to specify which one you''d
    like it to be, which is shown in the following code snippet:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 连接任务默认使用的端口是`8000`，但如果你想要使用不同的端口，可以使用`port`选项来指定你想要的端口，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Automatically selecting an available port
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动选择可用端口
- en: 'In case you are not sure about which ports will be available when you start
    the server, it can be quite useful for you to have the server automatically select
    an open port. Setting the `useAvailablePort` option to `true` will enable this
    behavior. The code snippet for this is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在启动服务器时不确定哪些端口可用，让服务器自动选择一个开放的端口会非常有用。将`useAvailablePort`选项设置为`true`将启用此行为。以下是这个行为的代码片段：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using a specific hostname
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用特定主机名
- en: 'In the case that you''d like the server to attach to a specific hostname and
    not just the default `0.0.0.0`, you can make use of the `hostname` option in the
    following manner:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望服务器连接到特定的主机名而不是默认的`0.0.0.0`，你可以使用以下方式利用`hostname`选项：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Serving files from multiple directories
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从多个目录中提供文件
- en: 'If you have more than one directory that contains the files that you''d like
    to be serving, then the `base` option can be provided with an array of directory
    names to look up content. Here is a code snippet for your reference:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多于一个目录包含你想要提供服务的文件，那么你可以提供一个包含目录名称的数组给`base`选项来查找内容。以下是一个代码片段供你参考：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When using an array for the `base` option, the server will look up the requested
    resources in each of the directories, from left to right, and return a resource
    as soon as it's found. If each of the two directories in the example contained
    an `index.html` file, a request to the root URL would return the `index.html`
    file in the `www` directory.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用数组作为`base`选项时，服务器将从左到右在每个目录中查找请求的资源，一旦找到就返回资源。如果示例中的两个目录都包含一个`index.html`文件，对根URL的请求将返回`www`目录中的`index.html`文件。
- en: Using middleware
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用中间件
- en: If we'd like to use one of the many existing middleware plugins available for
    the Connect framework, we can set the `middleware` option to a function that modifies
    the middleware stack by adding the desired middleware to it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用Connect框架提供的许多现有中间件插件之一，我们可以将`middleware`选项设置为函数，该函数通过向其中添加所需的中间件来修改中间件堆栈。
- en: 'First, we''ll need to install the middleware that we''d like to use, which
    in our case is packaged along with the Connect server framework. We can install
    the framework package using the following command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装我们想要使用的中间件，在我们的例子中，这个中间件是和Connect服务器框架一起打包的。我们可以使用以下命令来安装框架包：
- en: '[PRE21]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we alter the options of the `server` target in the `connect` task so that
    it adds the `compress` middleware to the stack:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们修改`connect`任务中`server`目标的选项，以便它将`compress`中间件添加到堆栈中：
- en: '[PRE22]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `middleware` option can also be set to an array, but this will replace the
    default stack that is provided by the `connect` task. The default middleware allows
    the serving of files from the directories indicated by the `base` option.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`middleware`选项也可以设置为数组，但这将替换`connect`任务提供的默认堆栈。默认的中间件允许从由`base`选项指定的目录中提供文件服务。'
- en: Adding functionality to the created server
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向创建的服务器添加功能
- en: 'There are times that it would be useful to work with the server that is created
    by the `connect` task. A good example of this is when we''d like to enable our
    server to handle **Socket.IO** interactions. This can be done by providing a function
    to the `onCreateServer` option that works with the created server in whichever
    way you like:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，与`connect`任务创建的服务器一起工作会有所帮助。一个很好的例子是我们想要让我们的服务器能够处理**Socket.IO**交互。这可以通过向`onCreateServer`选项提供一个函数来实现，该函数以任何你喜欢的方式与创建的服务器一起工作：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'This example assumes that you''ve already installed the `socket.io` package.
    You can find out more about `socket.io` at its website:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例假设你已经安装了`socket.io`包。你可以在其网站上了解更多关于`socket.io`的信息：
- en: '[http://socket.io/](http://socket.io/)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://socket.io/](http://socket.io/)'
- en: Watching files for changes
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视文件变化
- en: Another common requirement for development environments is the need to automatically
    run specific tasks when certain files are changed. This is especially useful when
    you'd like to monitor the quality of changing code in real time, or recompile
    altered resources as soon as they change, so that the effect of the changes are
    reflected without any manual intervention.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境中常见的另一个需求是，当某些文件发生变化时自动运行特定任务。这在您希望实时监控代码质量或一旦资源更改就重新编译它们，以便更改的效果无需手动干预时特别有用。
- en: The `contirb-watch` `(0.6.1)` plugin allows us to keep a watch on a specific
    set of files, and run a specified set of tasks when file events are observed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`contirb-watch` `(0.6.1)` 插件允许我们在观察到文件事件时监视一组特定的文件，并运行一组指定的任务。'
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Setting up Grunt on a project* recipe of this chapter. Be sure to refer
    to it if you are not yet familiar with it's contents.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在本章的 *在项目中设置Grunt* 菜单中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: The following steps take us through setting up a `watch` task that initiates
    a code quality analysis on a JavaScript source file each time a change to the
    file is observed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们设置一个 `watch` 任务，每次观察到文件更改时，都会在JavaScript源文件上启动代码质量分析。
- en: We'll start by installing the package that contains the `contrib-watch` plugin
    and loading its tasks by following the instructions provided in the *Installing
    a Plugin* recipe of this chapter.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照本章 *安装插件* 菜单中提供的说明安装包含 `contrib-watch` 插件的包，并加载其任务。
- en: For our example, we'll make use of the `jshint` task to analyze the quality
    of a JavaScript source file. Let's install the `contrib-jshint` plugin and load
    its tasks by following the instructions provided in the *Installing a Plugin*
    recipe of this chapter.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用 `jshint` 任务来分析JavaScript源文件的质量。让我们按照本章 *安装插件* 菜单中提供的说明安装 `contrib-jshint`
    插件并加载其任务。
- en: 'We''ll also need a JavaScript source file that we can watch for changes and
    perform a quality analysis on. Let''s create a file called `sample.js` in our
    project root and provide it with the following contents:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个JavaScript源文件，我们可以监视其更改并对其进行质量分析。让我们在我们的项目根目录中创建一个名为 `sample.js` 的文件，并为其提供以下内容：
- en: '[PRE24]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we can set up the example `jshint` task, which we''ll run using the `watch`
    task by adding the following to our configuration:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以设置一个示例 `jshint` 任务，我们将通过添加以下内容到我们的配置中，使用 `watch` 任务来运行它：
- en: '[PRE25]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With the plugin installed and the sample task configured, we can now configure
    a target on the `watch` task, which will run the `jshint` task every time the
    sample file called `sample.js` changes. This is done by adding the following to
    our configuration:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装插件并配置示例任务后，我们现在可以配置 `watch` 任务的目标，每次名为 `sample.js` 的样本文件更改时，都会运行 `jshint`
    任务。这是通过添加以下内容到我们的配置中实现的：
- en: '[PRE26]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we can start the task using the `grunt watch` command, which should
    produce the following output to confirm that it''s running:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用 `grunt watch` 命令启动任务，这将产生以下输出以确认它正在运行：
- en: '[PRE27]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To test our setup, we can now make some changes to the `sample.js` file and
    save them. This should produce output informing us of the file event similar to
    the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试我们的设置，我们现在可以修改 `sample.js` 文件并保存更改。这应该会产生类似以下内容的输出，告知我们文件事件：
- en: '[PRE28]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `watch` task plugin provides many more useful configuration options that
    allow us to watch more than one file, run a series of tasks, prevent process spawning
    for task runs, enable the interruption of task runs, specify the waiting period
    before rerunning tasks, run tasks only on specific file events, allow tasks to
    kill the watcher process, and run tasks once when the watcher starts up.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`watch` 任务插件提供了许多有用的配置选项，允许我们监视多个文件，运行一系列任务，防止任务运行时进程的创建，启用任务运行的中断，指定重新运行任务前的等待时间，仅在特定文件事件上运行任务，允许任务杀死监视进程，以及当监视器启动时运行任务一次。'
- en: Watching more than one file
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监视多个文件
- en: 'In case we''d like to watch more than one file, the pattern-matching capabilities
    of the standard Grunt `files` configuration can be used. The following configuration
    example will observe all the files in the project root or any of its sub directories
    with the `txt` extension:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想监视多个文件，可以使用标准Grunt `files`配置的模式匹配能力。以下配置示例将监视项目根目录或其任何子目录中具有`txt`扩展名的所有文件：
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can find out more about the file''s configuration and the globbing patterns
    it supports at the following URL:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址了解更多关于文件配置以及它所支持的globbing模式的信息：
- en: '[http://gruntjs.com/configuring-tasks#files](http://gruntjs.com/configuring-tasks#files)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/configuring-tasks#files](http://gruntjs.com/configuring-tasks#files)'
- en: Running a series of tasks
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行一系列任务
- en: 'In case we''d like to run more than one task each time a file event is observed,
    we can just add the tasks to the array passed to the `tasks` configuration:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在观察文件事件时每次运行多个任务，我们只需将任务添加到传递给`tasks`配置的数组中即可：
- en: '[PRE30]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The tasks specified in using the `tasks` configuration are run one at a time,
    in the order they are placed inside the array.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tasks`配置指定的任务将按它们在数组中放置的顺序逐个运行。
- en: Preventing process spawning for task runs
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止任务运行时进程的创建
- en: 'The default behavior of the `watch` task is to start each of the triggered
    tasks in their own child process. This prevents failing triggered tasks from causing
    the `watch` task itself to fail. As a side effect, it also clones the context
    of the watcher process for each task. This behavior can however be disabled by
    setting the `spawn` option to `false`, which triggers tasks a little faster and
    allows them to share a context between them. The following demonstrates the configuration
    for this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`watch`任务的默认行为是在各自的子进程中启动每个被触发的任务。这防止了触发的任务失败导致`watch`任务本身失败。作为副作用，它还会为每个任务克隆监视器进程的上下文。然而，可以通过将`spawn`选项设置为`false`来禁用此行为，这会使任务启动得更快，并允许它们之间共享上下文。以下展示了这种配置的示例：'
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Enabling the interruption of task runs
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用任务运行的中断
- en: 'The default behavior for the watcher is to wait for the completion of the tasks
    triggered by the previous change, before waiting for changes again. By setting
    the `interrupt` option to `true`, the watcher will stop running tasks when a change
    is detected and start rerunning them. The following demonstrates the configuration
    for this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 监视器的默认行为是在等待由前一个更改触发的任务完成之后，再次等待更改。通过将`interrupt`选项设置为`true`，当检测到更改时，监视器将停止运行任务并重新启动它们。以下展示了这种配置的示例：
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Specifying the waiting period before rerunning tasks
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定在重新运行任务之前的等待期
- en: 'The default period the watcher will wait before checking for file changes after
    a previous task run is `500ms`. This amount of time can be changed by setting
    the `debounceDelay` option to the number of milliseconds you''d like for it to
    wait. The following demonstrates the configuration for this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 监视器在之前任务运行后检查文件更改的默认等待期是`500ms`。这个时间可以通过将`debounceDelay`选项设置为所需的毫秒数来更改。以下展示了这种配置的示例：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run tasks only on specific file events
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅在特定的文件事件上运行任务
- en: In addition to being changed, files can also be added and deleted. The default
    behavior of the watcher is to observe all these events, but if you'd like it to
    run tasks only on specific events, the `event` option can be set to either `changed`,
    `added`, `deleted`, or `all`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更改之外，文件还可以被添加和删除。监视器的默认行为是观察所有这些事件，但如果只想在特定事件上运行任务，可以将`event`选项设置为`changed`、`added`、`deleted`或`all`。
- en: 'The following example will only start the `sample` task if a file named `sample.txt`
    is added or deleted to the same path as the configuration file:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将仅在名为`sample.txt`的文件被添加或删除到与配置文件相同路径的情况下启动`sample`任务：
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Allowing tasks to kill the watcher process
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许任务终止监视器进程
- en: 'Warnings and failures that are raised by the tasks started by the watch task
    will, by default, not interrupt its execution. Setting the `forever` option to
    `false` will disable this behavior and allow child tasks to stop the watcher process
    on warnings and failures. The following demonstrates the configuration for this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 由监视器启动的任务引发的警告和失败，默认情况下不会中断其执行。将`forever`选项设置为`false`将禁用此行为，并允许子任务在警告和失败时停止监视器进程。以下展示了这种配置的示例：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the `forever` option is a task-level option only and cannot be specified
    for individual targets.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`forever`选项仅是任务级别的选项，不能为单个目标指定。
- en: Running tasks once at startup of the watcher
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监视器启动时运行任务一次
- en: 'In the case that you''d like to run the tasks specified in the `tasks` option
    once the watcher starts up, and not only once file events are observed, you can
    set the `atBegin` option to `true`. The following demonstrates the configuration
    for this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在监视器启动后立即运行`tasks`选项中指定的任务，而不仅仅是观察文件事件时才运行，可以将`atBegin`选项设置为`true`。以下展示了这种配置的示例：
- en: '[PRE36]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Setting up LiveReload
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置LiveReload
- en: Once you've got a development server running that serves the pages, code, and
    assets that make up your web application, you will notice that you constantly
    have to refresh the browser each time you wish to observe a change that was made.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您运行了一个提供构成您的Web应用程序的页面、代码和资源的开发服务器，您将注意到每次您希望观察所做的更改时，都必须刷新浏览器。
- en: This is where the **LiveReload** tool and its constituent libraries come in
    handy. It's designed to automatically reload the browser's contents if a page
    or code file is changed, and even apply changes to CSS and images live, without
    refreshing the browser's contents.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**LiveReload**工具及其组成库发挥作用的地方。它旨在在页面或代码文件更改时自动重新加载浏览器内容，甚至可以在不刷新浏览器内容的情况下实时应用CSS和图像更改。
- en: We can set up LiveReload for our project with the help of two plugins that are
    discussed in other parts of this chapter. The development server provided by the
    `contrib-connect (0.8.0)` plugin can be configured to accept LiveReload triggers,
    and the `contrib-watch (0.6.1)` plugin to send them file events.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用本章其他部分讨论的两个插件来为我们的项目设置LiveReload。由`contrib-connect (0.8.0)`插件提供的开发服务器可以被配置为接受LiveReload触发器，而`contrib-watch
    (0.6.1)`插件用于发送它们文件事件。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Setting up Grunt on a project* recipe of this chapter. Be sure to refer
    to it if you are not yet familiar with it's contents.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用本章*在项目中设置Grunt*配方中创建的基本项目结构。如果您还不熟悉它的内容，请务必参考它。
- en: We also make use of the `contrib-connect` and `contrib-watch` plugins in this
    recipe, which have each been discussed separately in the *Setting up a basic web
    server* and *Watching files for changes* recipes of this chapter. These are to
    be referred to if you are not yet familiar with the plugins they discuss.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们还使用了`contrib-connect`和`contrib-watch`插件，它们已经在本章的*设置基本Web服务器*和*监视文件变化*配方中分别进行了讨论。如果您还不熟悉它们讨论的内容，请参考这些配方。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through setting up a watch task that will automatically
    trigger a refresh when it observes changes to an HTML page that is served from
    a local development server.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们设置一个监视任务，当它观察到从本地开发服务器提供的HTML页面发生变化时，将自动触发刷新。
- en: We'll start by installing the packages containing the `contrib-connect` and
    `contrib-watch` plugins and loading their tasks by following the instructions
    provided in the *Installing a plugin* recipe of this chapter.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照本章*安装插件*配方中提供的说明安装包含`contrib-connect`和`contrib-watch`插件的包，并通过加载它们的任务。
- en: 'For the sake of our example, we''ll create a file called `index.html` in the
    `www` directory, which will be the file that we wish to view in a browser and
    have automatically updated when changes are made to it. The contents for this
    file follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了我们的示例，我们将在`www`目录中创建一个名为`index.html`的文件，这是我们希望在浏览器中查看并在对其做出更改时自动更新的文件。该文件的以下内容如下：
- en: '[PRE37]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, we''ll set up our development server, which will serve the `index.html`
    file from the `www` directory. Along with the standard configuration, we''ll set
    the `livereload` option to `true`, indicating that the development server should
    enable the browser to receive LiveReload triggers. This is all done by adding
    the following to our configuration:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置我们的开发服务器，它将从`www`目录中提供`index.html`文件。除了标准配置外，我们还将`livereload`选项设置为`true`，表示开发服务器应启用浏览器接收LiveReload触发器。所有这些操作都是通过向我们的配置中添加以下内容来完成的：
- en: '[PRE38]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Providing the `true` value for the `livereload` option includes `connect-livereload`
    in the middleware stack of the connect server. The middleware in turn inserts
    a snippet of code in the HTML code of the pages served, which enables the browser
    to accept LiveReload triggers.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`livereload`选项的值设置为`true`会将`connect-livereload`包含在connect服务器的中间件堆栈中。中间件随后会在所服务的页面的HTML代码中插入一段代码，使浏览器能够接受LiveReload触发器。
- en: The `keepalive` option can be excluded from this configuration due to the watcher
    process that will continue to run after the server is started. This means that
    the Grunt process will not end, which would also have stopped the server it started.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于监视器进程将在服务器启动后继续运行，因此可以排除`keepalive`选项。这意味着Grunt进程不会结束，这也会停止它启动的服务器。
- en: 'Now, we''ll set up a watcher to observe file events in the `www/index.html`
    file. Along with the standard configuration, we''ll set the `livereload` option
    to `true`, indicating that the appropriate LiveReload triggers should be sent
    whenever changes are observed. This is done by adding the following to our configuration:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将设置一个监视器来观察`www/index.html`文件中的文件事件。除了标准配置外，我们还将`livereload`选项设置为`true`，表示每当观察到更改时，应发送适当的LiveReload触发器。这是通过向我们的配置中添加以下内容来完成的：
- en: '[PRE39]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, we can start our server and watcher using the `grunt connect watch`
    command, which should produce output indicating the start of both:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`grunt connect watch`命令启动我们的服务器和监视器，这将产生指示两者启动的输出：
- en: '[PRE40]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, we can use our favorite browser to open the URL mentioned in the output,
    which should show us our sample page as served by the server:![How to do it...](img/image00268.jpeg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用我们最喜欢的浏览器打开输出中提到的URL，它应该显示由服务器提供的我们的示例页面：![如何操作...](img/image00268.jpeg)
- en: 'Let''s try out the LiveReload functionality by changing the `www/index.html`
    file and saving it. This action should produce the following output in the terminal
    in which the server and watcher were started:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过更改`www/index.html`文件并保存它来尝试LiveReload功能。这个动作应该在启动服务器和监视器的终端中产生以下输出：
- en: '[PRE41]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Switching back to our browser that currently has the `http://0.0.0.0:8000` URL
    open, we should now see the updated page, without having initiated a manual refresh:![How
    to do it...](img/image00269.jpeg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回我们当前打开`http://0.0.0.0:8000` URL的浏览器，我们现在应该看到更新的页面，而无需手动刷新：![如何操作...](img/image00269.jpeg)
- en: Processing only changed files
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅处理已更改的文件
- en: When running a task that processes files in one way or another, you'll soon
    realize that you probably don't want it to process all the files each time it
    is performed. This is especially true when the amount of files the task has to
    process becomes quite large.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行以某种方式处理文件的任务时，你很快就会意识到你可能不希望它在每次执行时处理所有文件。当任务必须处理的文件数量变得相当大时，这一点尤其正确。
- en: This is where the `newer (0.7.0)` plugin can help out by ensuring that only
    the files that have changed since the task's previous run are processed, each
    time it is called to run. It can be used with any plugin that makes use of the
    standard `files` configuration and becomes especially useful when using a watcher
    to rerun tasks each time a file change is detected.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`newer (0.7.0)`插件可以通过确保每次调用运行时只处理自任务上次运行以来更改的文件来提供帮助。它可以与任何使用标准`files`配置的插件一起使用，并且当使用监视器在检测到文件更改时重新运行任务时变得特别有用。
- en: Getting ready
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In this example, we'll work with the basic project structure that we created
    in the *Setting up Grunt on a project* recipe of this chapter. Be sure to refer
    to it if you are not yet familiar with it's contents.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用本章中“在项目中设置Grunt”食谱中创建的基本项目结构。如果你还不熟悉它的内容，请务必参考它。
- en: How to do it...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through making use of the `newer` plugin to check
    the code quality of only the JavaScript source files that have changed since the
    last run.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们使用`newer`插件来检查自上次运行以来更改的JavaScript源代码文件的代码质量。
- en: We'll start by installing the package containing the `newer` plugin and loading
    its tasks by following the instructions provided in the *Installing a plugin*
    recipe of this chapter.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先安装包含`newer`插件的包，并按照本章中“安装插件”食谱中提供的说明加载其任务。
- en: For the purpose of our example, we'll also install the `contrib-jshint` plugin
    and load its tasks by following the instructions provided in the *Installing a
    plugin* recipe of this chapter.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们还将安装`contrib-jshint`插件，并按照本章中“安装插件”食谱中提供的说明加载其任务。
- en: 'With all the required plugins installed, we can now add sample configuration
    for the `jshint` task, which will perform a code quality check on all the JavaScript
    files in the `src` directory. This is done by adding the following to our configuration:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装了所有必需的插件后，我们现在可以为`jshint`任务添加示例配置，该任务将对`src`目录中的所有JavaScript文件执行代码质量检查。这是通过向我们的配置中添加以下内容来完成的：
- en: '[PRE42]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tip
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the `jshint` plugin requires you to specify the files that are to
    be targeted by the task in the `src` configuration directly inside the target.
    In other cases, it is usually recommended to specify your target files using the
    `files` configuration.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`jshint`插件要求你在目标内部的`src`配置中直接指定任务要针对的文件。在其他情况下，通常建议使用`files`配置来指定你的目标文件。
- en: 'Now we can run the `jshint` task a couple of times using the `grunt jshint`
    command to observe its behavior. Each time we run it, we''ll see that it scans
    all the files in the `src` directory. This should produce the same output each
    time, similar to the following:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在终端中使用`grunt jshint`命令运行`jshint`任务几次来观察其行为。每次运行它，我们都会看到它扫描`src`目录中的所有文件。这应该每次都产生相同的输出，类似于以下内容：
- en: '[PRE43]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In order to make use of the `newer` plugin, we prepend `newer:` to the name
    of the task we wish to run. On running the `grunt newer:jshint` command the first
    time, the `newer` plugin will cache the timestamps of the files that have been
    processed. This produces output similar to the following:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用`newer`插件，我们在我们希望运行的任务的名称前添加`newer:`。在第一次运行`grunt newer:jshint`命令时，`newer`插件将缓存已处理文件的最后修改时间戳。这会产生类似于以下内容的输出：
- en: '[PRE44]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'When we run the `grunt newer:jshint` command again, we''ll see that no files
    are processed by the `jshint` task, which produces output similar to the following:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们再次运行`grunt newer:jshint`命令时，我们会看到没有文件被`jshint`任务处理，这会产生类似于以下内容的输出：
- en: '[PRE45]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, we can change one of the files in the `src` directory and run the command
    again to see that the changed file is processed again:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以更改`src`目录中的一个文件，并再次运行命令以查看更改的文件是否再次被处理：
- en: '[PRE46]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: There's more...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Processing only changed files becomes especially useful when making use of the
    `watch` task provided by the `contrib-watch` plugin. A `watch` task will rerun
    its indicated tasks every time it observes a file change, which can happen quite
    often during development, and can take quite a bit of time if the tasks target
    a large number of files.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`contrib-watch`插件提供的`watch`任务时，仅处理更改的文件变得特别有用。`watch`任务会在每次观察到文件更改时重新运行其指示的任务，这在开发过程中可能会相当频繁，如果任务针对大量文件，可能会花费相当多的时间。
- en: 'The following steps provide an example of how to use the `newer` plugin in
    conjunction with `contrib-watch` and continues with the work we did in the main
    recipe:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤提供了一个如何结合使用`newer`插件和`contrib-watch`的示例，并继续我们在主要配方中完成的工作：
- en: We'll start by installing the package that contains the `contrib-watch` plugin
    and loading its tasks by following the instructions provided in the *Installing
    a plugin* recipe of this chapter.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照本章中“安装插件”配方中提供的说明安装包含`contrib-watch`插件的包，并通过加载其任务来使用它。
- en: 'Now, we''ll add a `watch` task, which will run the `jshint` task when it observes
    changes on any of the JavaScript files contained in the `src` directory. We''ll
    also prepend the `jshint` task with `newer:` to indicate that we only want to
    process the files that actually changed. This is done by adding the following
    to our configuration:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个`watch`任务，当它观察到`src`目录中包含的任何JavaScript文件发生变化时，将运行`jshint`任务。我们还将使用`newer:`前缀来预置`jshint`任务，表示我们只想处理实际更改的文件。这是通过在我们的配置中添加以下内容来实现的：
- en: '[PRE47]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we can start the `watch` task by using the `grunt watch` command in the
    terminal. This should produce output similar to the following, indicating that
    the watcher is running:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在终端中使用`grunt watch`命令来启动`watch`任务。这应该会产生类似于以下内容的输出，表明监视器正在运行：
- en: '[PRE48]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If we now change and save a file in the `src` directory, we should see output
    similar to the following, indicating that only the file that was changed has been
    processed by the `jshint` task:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在在`src`目录下更改并保存一个文件，我们应该看到类似以下输出，表明只有更改的文件被`jshint`任务处理过：
- en: '[PRE49]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Importing external data
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入外部数据
- en: In most coding practices, it's best practice to keep logic and data separated
    as much as possible. The same rule applies to the Grunt configuration logic and
    the data that it makes use of.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编码实践中，最佳实践是尽可能地将逻辑和数据分离。同样的规则也适用于Grunt配置逻辑以及它所使用的数据。
- en: A very common use case for using data from an external source is the use of
    the project information contained in the `package.json` file. Information such
    as project names and version numbers might not change too often, but when they
    do, we'd probably prefer not having to look for them everywhere in the project.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的使用外部数据的情况是使用包含在`package.json`文件中的项目信息。诸如项目名称和版本号之类的信息可能不会太经常改变，但一旦它们改变，我们可能更愿意不想在项目的每个地方都去找它们。
- en: Fortunately, the Grunt framework provides us with functions that allow us to
    easily read data from external files and store them in the configuration. This
    stored data can then also be easily used with the help of the string templates
    that are automatically processed for all configurations.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Grunt框架为我们提供了允许我们轻松从外部文件读取数据并将其存储在配置中的函数。然后，这些存储的数据也可以通过自动处理所有配置的字符串模板轻松使用。
- en: Getting ready
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Setting up Grunt on a project* recipe of this chapter. Be sure to refer
    to it if you are not yet familiar with it's contents.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用本章中“在项目中设置Grunt”配方中创建的基本项目结构。如果您还不熟悉它的内容，请务必参考它。
- en: How to do it...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through making use of data from the `package.json`
    file when generating an optimized version of a JavaScript source file.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们如何在使用`package.json`文件中的数据生成JavaScript源文件的优化版本时使用它。
- en: For our example, we'll make use of the `contib-uglify` plugin, which can be
    used to compress JavaScript source files. Let's install it and load its tasks
    for using the instructions provided in the *Installing a Plugin* recipe of this
    chapter.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将使用`contib-uglify`插件，它可以用来压缩JavaScript源文件。让我们按照本章中“安装插件”配方中提供的说明来安装它并加载其任务。
- en: 'We''ll also need a simple JavaScript source file for the sake of our example.
    Let''s create a file called `sample.js` in the root of our project directory and
    fill it with the following code:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了本例的需要，我们还需要一个简单的JavaScript源文件。让我们在我们的项目目录根目录下创建一个名为`sample.js`的文件，并用以下代码填充它：
- en: '[PRE50]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we''ll import the data contained in our project''s `pacakge.json` file
    by making use of the `grunt.file.readJSON` function and assigning its result to
    a property called `pkg` in our configuration. After adding this, our configuration
    object should look similar to the following:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过使用`grunt.file.readJSON`函数并将其结果分配给配置中名为`pkg`的属性，来导入我们项目中的`pacakge.json`文件中的数据。添加此之后，我们的配置对象应类似于以下内容：
- en: '[PRE51]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the property name `pkg` is just used for this example, and can be
    pretty much anything except for the names of the tasks that are available for
    configuration.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，属性名`pkg`仅用于本例，几乎可以是任何名称，除了配置中可用的任务名称。
- en: 'Now that we have the data imported form our project package, we can set up
    an `uglify` task, which will compress a JavaScript source file called `sample.js`,
    using the version number contained in the `package.json` file as part of the resulting
    file''s name. This is done by adding the following to our configuration:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经从我们的项目包中导入了数据，我们可以设置一个`uglify`任务，该任务将使用`package.json`文件中包含的版本号作为结果文件名称的一部分来压缩名为`sample.js`的JavaScript源文件。这是通过向我们的配置中添加以下内容来完成的：
- en: '[PRE52]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Tip
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Grunt makes use of the **Lo-Dash** string template system. You can read more
    about it at the following URL:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Grunt使用**Lo-Dash**字符串模板系统。您可以在以下URL了解更多信息：
- en: '[http://lodash.com/docs/#template](http://lodash.com/docs/#template)'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://lodash.com/docs/#template](http://lodash.com/docs/#template)'
- en: 'Finally, we can use the `grunt uglify` command to test our setup, which should
    produce output similar to the following:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`grunt uglify`命令来测试我们的设置，这应该会产生类似于以下内容的输出：
- en: '[PRE53]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can now also take a look at our newly generated compressed version of the
    `sample.js` file in the `sample_0.0.0.js` file, which should have content similar
    to the following:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在也可以查看我们新创建的压缩版本的`sample.js`文件，该文件应位于`sample_0.0.0.js`中，其内容应类似于以下内容：
- en: '[PRE54]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The YAML format provides another popular way to store human readable data and
    can also be easily imported into our configuration. The following example, based
    on the work we did in the main recipe, demonstrates this functionality:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: YAML格式提供了另一种存储人类可读数据并可以轻松导入到我们的配置中的流行方式。以下基于我们在主要配方中所做的工作的示例演示了此功能：
- en: 'First, we''ll create a simple YAML file for the purpose of our example. Let''s
    create `sample.yaml` in our project root and give it the following content:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个简单的 YAML 文件，用于我们的示例。让我们在我们的项目根目录中创建`sample.yaml`，并给它以下内容：
- en: '[PRE55]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now all we need to do is change the call to `grunt.file.readJSON` to import
    our sample YAML file instead. We do this by changing the `pkg` configuration to
    the following:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是将调用`grunt.file.readJSON`改为导入我们的样本 YAML 文件。我们通过将`pkg`配置更改为以下内容来实现这一点：
- en: '[PRE56]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If we now run the Grunt `uglify` command, we should see the same result as
    before, with output similar to the following:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在运行 Grunt 的 `uglify` 命令，我们应该看到与之前相同的结果，输出类似于以下内容：
- en: '[PRE57]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
