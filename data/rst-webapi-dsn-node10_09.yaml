- en: Securing the Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护应用程序
- en: Once deployed in production, an application is exposed to a large number of
    requests. Inevitably, some of them will be malicious. This brings the requirement
    of granting explicit access permissions only to authenticated users, that is,
    authenticating a selected number of consumers to have access to your service.
    Most of the consumers will use the service only for data provisioning. However,
    a few will need to be able to provide new, or modify the existing, catalog data.
    To ensure that only appropriate consumers will be able to execute the `POST`,
    `PUT`, and `DELETE` requests, we will have to introduce the concept of authorization
    into our application, which will grant only explicitly selected users modification
    permissions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在生产环境中部署，应用程序将面临大量请求。不可避免地，其中一些将是恶意的。这就需要明确授予访问权限，只有经过身份验证的用户才能访问服务，即，对已选择的消费者进行身份验证，以便他们能够访问您的服务。大多数消费者只会使用服务进行数据提供。然而，少数消费者需要能够提供新的或修改现有的目录数据。为了确保只有适当的消费者能够执行`POST`、`PUT`和`DELETE`请求，我们将不得不在应用程序中引入授权的概念，该授权将仅授予明确选择的用户修改权限。
- en: Data services may provide sensitive private information, such as email addresses;
    the HTTP protocol, being a text protocol, may not be secure enough. The information
    transmitted through it is subject to **man-in-the-middle** attacks, which can
    lead to data leakage. To prevent such cases, **Transport Layer Security **(**TLS**)
    should be used. The HTTPS protocol encrypts the transmitted data, ensuring that
    only appropriate consumers who have the right decryption key will be able to consume
    the data exposed by the service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据服务可能提供敏感的私人信息，例如电子邮件地址；HTTP协议作为一种文本协议，可能不够安全。通过它传输的信息容易受到**中间人**攻击，这可能导致数据泄露。为了防止这种情况，应使用**传输层安全**（**TLS**）。HTTPS协议加密传输的数据，确保只有具有正确解密密钥的适当消费者才能使用服务提供的数据。
- en: 'In this chapter, we will look at how Node.js enables the following security
    features:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看Node.js如何实现以下安全功能：
- en: Basic authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: Passport-based basic authentication
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于护照的基本身份验证
- en: Passport-based third-party authentication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于护照的第三方身份验证
- en: Authorization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权
- en: Transport layer security
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输层安全
- en: Authentication
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: An application considers a user authenticated when their identity has been successfully
    validated against a trusted store. Such trusted stores can either be any kind
    of specially maintained database, storing the credentials of the application (basic
    authentication), or a third-party service that checks a given identity against
    its own trusted store (third-party authentication).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序在成功针对受信任存储验证其身份后，将用户视为已经通过身份验证。这样的受信任存储可以是任何一种特别维护的数据库，存储应用程序的凭据（基本身份验证），或者是第三方服务，该服务检查给定的身份是否与其自己的受信任存储匹配（第三方身份验证）。
- en: Basic authentication
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: 'HTTP basic authentication is one of the most popular and straightforward authentication
    mechanisms available out there. It relies on HTTP headers in the request, which
    provide the user''s credentials. Optionally, the server may reply with a header,
    forcing the clients to authenticate themselves. The following diagram shows a
    client-server interaction when basic authentication is carried out:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP基本身份验证是目前最流行和直接的身份验证机制之一。它依赖于请求中的HTTP头，提供用户的凭据。可选地，服务器可能会回复一个头部，强制客户端进行身份验证。以下图显示了在进行基本身份验证时客户端和服务器的交互：
- en: '![](img/80234492-f661-416f-8aeb-6aceb911f172.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80234492-f661-416f-8aeb-6aceb911f172.png)'
- en: Whenever an HTTP request is sent to an endpoint secured by HTTP basic authentication,
    the server replies with an HTTP `401 Unauthorized` status code, and, optionally,
    with a `WWW-Authenticate` header. This header forces the client to send another
    request, containing the `Authorization` header, which specifies that the authentication
    method is `basic`. This request is followed by a base64-encoded key/value pair,
    providing the username and the password to authenticate with. Optionally, the
    server can specify a message to the client with the `realm` attribute.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每当向由HTTP基本身份验证保护的端点发送HTTP请求时，服务器都会以HTTP `401 Unauthorized`状态代码进行回复，并且可选地附带`WWW-Authenticate`头。此头部强制客户端发送另一个请求，其中包含`Authorization`头，该头指定身份验证方法为`basic`。此请求后跟一个base64编码的键/值对，提供要进行身份验证的用户名和密码。可选地，服务器可以使用`realm`属性向客户端指定消息。
- en: This attribute specifies that resources sharing the same `realm` value should
    support the same authentication means. In the preceding diagram, the `realm` message
    is `MyRealmName`. The client authenticates by sending the `Authentication` header
    with the value of `Basic YWRtaW46YWRtaW4`, specifying that `Basic` authentication
    is used, followed by the base64-encoded value. In the diagram, the literal `YWRtaW46YWRtaW4`
    decoded in base64 represents the `admin:admin` literal. In case such a username/password
    combination is successfully authenticated, the HTTP server will respond with the
    JSON payload of the requested items. If the authentication fails, the server will
    respond with the `401 Unauthorized` status code, but this time without including
    the `WWW-Authenticate` header.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性指定具有相同“realm”值的资源应支持相同的身份验证方式。在上图中，“realm”消息是“MyRealmName”。客户端通过发送具有`Basic
    YWRtaW46YWRtaW4`值的`Authentication`头来进行身份验证，指定使用`Basic`身份验证，然后是base64编码的值。在图中，base64解码的文字`YWRtaW46YWRtaW4`代表`admin:admin`文字。如果成功验证了这样的用户名/密码组合，HTTP服务器将用所请求项目的JSON有效负载进行响应。如果身份验证失败，服务器将以`401
    Unauthorized`状态代码进行响应，但这次不包括`WWW-Authenticate`头。
- en: Passport
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 护照
- en: There are plenty of authentication methods to choose from nowadays. Perhaps
    the most popular methods are basic authentication, where each user has their own
    username and password, and third-party authentication, where users can identify
    themselves with their already-existing account for an external public service,
    such as personal social services such as LinkedIn, Facebook, and Twitter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有很多身份验证方法可供选择。也许最流行的方法是基本身份验证，每个用户都有自己的用户名和密码，以及第三方身份验证，用户可以使用他们已经存在的外部公共服务账户进行身份识别，例如个人社交服务，如LinkedIn、Facebook和Twitter。
- en: Choosing the most appropriate type of authentication for a web API depends mainly
    on its consumers. Apparently, an application consuming an API to fetch data is
    not likely to authenticate with a personal social account. This approach is more
    suitable when the API is used via a frontend directly by a human being.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Web API的最合适的身份验证类型主要取决于其消费者。显然，使用API获取数据的应用程序不太可能使用个人社交账户进行身份验证。当API直接由人类使用前端直接使用时，这种方法更加合适。
- en: Implementing a solution capable of switching between different authentication
    methods easily is a complex and time-consuming task. In fact, it can become hardly
    possible if not considered at the initial design phase of an application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个能够轻松切换不同身份验证方法的解决方案是一个复杂且耗时的任务。事实上，如果在应用程序的初始设计阶段没有考虑到这一点，这几乎是不可能的。
- en: '**Passport** is a piece of authentication middleware for Node.js, created especially
    for use-cases where the means of authentication should be easily switched from
    one to another. It has modular architecture that enables the usage of a specific
    authentication provider, called **strategy**. The strategy takes care of implementing
    a chosen authentication approach.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Passport**是专为Node.js设计的身份验证中间件，特别适用于身份验证方式需要轻松切换的用例。它具有模块化架构，可以使用特定的身份验证提供者，称为**策略**。该策略负责实现所选择的身份验证方法。'
- en: There are plenty of authentication strategies to choose from, for example, a
    regular basic authentication strategy or social platform-based strategies for
    services such as Facebook, LinkedIn, and Twitter. Refer to the official Passport
    website, [http://www.passportjs.org/](http://www.passportjs.org/), for a complete
    list of the available strategies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多身份验证策略可供选择，例如常规的基本身份验证策略或基于社交平台的策略，用于Facebook、LinkedIn和Twitter等服务。请参考官方Passport网站[http://www.passportjs.org/](http://www.passportjs.org/)，获取可用策略的完整列表。
- en: Passport's basic authentication strategy
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的基本身份验证策略
- en: Now it is time to look at how to utilize Passport's strategies; we will start
    with the basic authentication strategy; it is a logical choice now that we know
    how basic authentication works.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看如何利用Passport的策略了；我们将从基本身份验证策略开始；现在我们知道基本身份验证的工作原理，这是一个合乎逻辑的选择。
- en: 'As usual, we will start by installing the relevant modules with the NPM package
    manager. We will need the `passport` module, which provides the base functionality
    that allows you to plug in different authentication strategies, and a concrete
    strategy for basic authentication, provided by the `passport-http` module:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将使用NPM包管理器安装相关模块。我们需要`passport`模块，它提供了允许您插入不同身份验证策略的基本功能，以及由`passport-http`模块提供的基本身份验证的具体策略：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we have to instantiate both the Passport middleware and the basic authentication
    strategy. `BasicStrategy` takes as an argument a callback function, which checks
    whether the provided username/password combination is valid. Finally, passport''s
    authenticate method is provided as a middleware function to the express route,
    assuring that unauthenticated requests will be rejected with an appropriate `401
    Unauthorized` status:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实例化Passport中间件和基本身份验证策略。`BasicStrategy`以回调函数作为参数，检查提供的用户名/密码组合是否有效。最后，将passport的authenticate方法作为中间件函数提供给express路由，确保未经身份验证的请求将以适当的“401未经授权”状态被拒绝：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `BasicStrategy` constructor takes a handler function as an argument. It
    gives us access to the username and password supplied by the client, and to the
    Passport middleware''s `done()` function, which notifies Passport with whether
    the user has been successfully authenticated. Invoke the `done()` function with
    `user` as an argument in order to grant authentication, or pass the `error` argument
    to it to revoke the authentication:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “BasicStrategy”构造函数以处理程序函数作为参数。它使我们能够访问客户端提供的用户名和密码，以及Passport中间件的“done（）”函数，该函数通知Passport用户是否已成功验证。调用“done（）”函数并将“user”作为参数以授予身份验证，或者将“error”参数传递给它以撤销身份验证：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, use the `passort` `authenticate()` function in the router middleware
    to attach it to a specific HTTP method-handler function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在路由器中间件中使用`passort` `authenticate（）`函数将其附加到特定的HTTP方法处理程序函数。
- en: In our case, we specify that we don't want to store any authentication details
    in a session. This is because, when using basic authentication, there is no need
    to store any user information in a session, as each request contains the `Authorization`
    header that provides the login details.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们指定不希望在会话中存储任何身份验证细节。这是因为，在使用基本身份验证时，没有必要在会话中存储任何用户信息，因为每个请求都包含提供登录详细信息的“Authorization”标头。
- en: Passport's OAuth Strategy
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的OAuth策略
- en: OAuth is an open standard for third party authorization, it defines a delegation
    protocol used fer authorizing against a third party authentication providers.
    OAuth uses special tokens, once issued,  identify the user instead of user credentials.
    Let's look closer at OAuth workflow, with a sample scenario. The main actors in
    the scenario are - a **user** interacting with a **web application,** which consumes
    a restful service from a **back-end** system  providing some kind of data. The
    web application delegates its authorization to a separate **third-party authorization
    server.**
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth是第三方授权的开放标准，它定义了一种委托协议，用于对抗第三方认证提供者。OAuth使用特殊令牌，一旦发行，就用于标识用户，而不是用户凭据。让我们更仔细地看一下OAuth的工作流程，以一个示例场景为例。场景中的主要角色是-一个**用户**与一个**Web应用程序**进行交互，该应用程序从**后端**系统中提供某种数据的RESTful服务。Web应用程序将其授权委托给一个单独的**第三方授权服务器**。
- en: '![](img/850a429e-216a-4152-9434-422b7dbbb9fd.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/850a429e-216a-4152-9434-422b7dbbb9fd.png)'
- en: The user requests a web application which requires authentication to establish
    communication with the back-end service. This is the initial request thus the
    user is still not authenticated, so they get redirected to a login page asking
    for their credentials for the relevant third party account.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户请求一个需要进行身份验证以与后端服务建立通信的Web应用程序。这是初始请求，因此用户仍未经过身份验证，因此他们被重定向到一个登录页面，要求提供相关第三方账户的凭据。
- en: After a successful authentication an authorization code is issued by the authentication
    server to the web application. This authorization code is a composite combination
    between an issued client-id and a secret issued by the provider. They should be
    sent from a web application to the authentication server and is exchanged for
    an access token that has a limited lifetime.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功认证后，认证服务器向Web应用程序发放授权代码。这个授权代码是由提供者发行的客户端ID和秘密的组合。它们应该从Web应用程序发送到认证服务器，并且用于交换具有有限生命周期的访问令牌。
- en: The Web application uses the authentication token for authentication until it
    gets expired. Afterwards it has to request a new token using the authorization
    code.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web应用程序使用认证令牌进行身份验证，直到它过期。之后，它必须使用授权代码请求新的令牌。
- en: Passport.js hides the complexity behind this process with a separate strategy
    module automating the OAuth workflow. It is available in the `npm` repository
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Passport.js通过一个单独的策略模块隐藏了这个过程的复杂性，自动化了OAuth的工作流程。它可以在`npm`存储库中找到。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create an instance of the strategy and supply it with the urls for requesting
    tokens and for authenticating it together, it is your personal consumer key and
    a secret phrase of your choice.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建策略的实例并为其提供请求令牌和认证的URL，以及您的个人消费者密钥和您选择的秘密短语。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Passport.js provides separate strategy wrapping different providers, like linkedin
    or github. They ensure that your application stays up to date with the token issuing
    URLs. Once you have made up your mind about the provider you want to support,
    you should check for specific strategies for them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Passport.js提供了包装不同提供者的单独策略，如linkedin或github。它们确保您的应用程序与发放令牌的URL保持最新。一旦您确定要支持的提供者，就应该为它们检查特定的策略。
- en: Passport's third-party authentication strategies
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Passport的第三方认证策略
- en: Today, almost everyone owns at least one personal public social media account,
    such as Twitter, Facebook, and LinkedIn. Recently, it has become really popular
    for websites to allow their visitors to authenticate themselves via one of their
    social accounts by just clicking on an icon to bind their social service account
    to a service-internal automatically generated account.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎每个人都至少拥有一个个人公共社交媒体账户，如Twitter、Facebook和LinkedIn。最近，让访问者通过点击一个图标来绑定他们的社交服务账户到一个服务内部自动生成的账户，已经变得非常流行。
- en: This approach is very convenient for web users who are usually permanently logged
    into at least one of their accounts. If they are not currently logged in, clicking
    on an icon will redirect them to their social service login page, and, after a
    successful login, another redirection takes place, ensuring that the user gets
    the content they originally requested. When it comes to exposing data via a web
    API, this approach is not really an option.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常方便，适用于通常至少有一个账户保持登录状态的网页用户。如果他们当前没有登录，点击图标将重定向他们到他们的社交服务登录页面，成功登录后，又会发生另一个重定向，确保用户获取他们最初请求的内容。但是，当涉及通过Web
    API公开数据时，这种方法并不是一个真正的选择。
- en: Publicly exposed APIs cannot predict whether they are to be consumed by a human
    or by an application. Also, APIs aren't usually consumed directly by humans. Thus,
    third-party authentication is the only option when you, as API authors, are convinced
    that the exposed data will be directly available to the end users who have requested
    it manually through a frontend from an internet browser. Once they have successfully
    logged into their social account, a unique user identifier will be stored in a
    session, so your service will need to be able to handle such sessions appropriately.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 公开的API无法预测它们是由人还是应用程序使用。此外，API通常不会直接由人使用。因此，当您作为API作者确信公开的数据将直接通过互联网浏览器的前端手动请求的最终用户直接使用时，第三方认证是唯一的选择。一旦他们成功登录到他们的社交账户，唯一的用户标识符将被存储在会话中，因此您的服务需要能够适当地处理这样的会话。
- en: 'To enable session support for storing user login information with Passport
    and Express, you have to initialize the Express session middleware before initializing
    Passport and its session middleware:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Passport和Express存储用户登录信息的会话支持，必须在初始化Passport及其会话中间件之前初始化Express会话中间件：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, specify the user whose details Passport should serialize/deserialize
    into or out of the session. For that purpose, Passport provides the `serializeUser()`
    and `deserializeUser()` functions, which store complete user information in a
    session:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，指定Passport应将哪个用户的详细信息序列化/反序列化到会话中。为此，Passport提供了`serializeUser()`和`deserializeUser()`函数，它们在会话中存储完整的用户信息：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The order of initializing the session handling of the Express and Passport middleware
    is important. The Express session should be passed to the application first and
    should be followed by the Passport session.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Express和Passport中间件的会话处理的顺序很重要。Express会话应该首先传递给应用程序，然后是Passport会话。
- en: After enabling session support, you have to decide which third-party authentication
    strategy to rely on. Basically, third-party authentication is enabled via a plugin
    or application created by the third-party provider, for example, a social service
    site. We will briefly look at creating a LinkedIn application that allows authentication
    via the OAuth standard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 启用会话支持后，您必须决定依赖哪种第三方身份验证策略。基本上，第三方身份验证是通过第三方提供商创建的插件或应用程序启用的，例如社交服务网站。我们将简要介绍如何创建一个允许通过OAuth标准进行身份验证的LinkedIn应用程序。
- en: 'Usually, this is done via a pair of public key and a secret (token) associated
    with the social media application. Creating a LinkedIn application is easy—you
    just have to log into [http://www.linkedin.com/secure/developer](http://www.linkedin.com/secure/developer)
    and fill out a brief application information form. You will be given a secret
    key and a token to enable the authentication. Perform the following steps to enable
    LinkedIn authentication:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这是通过与社交媒体应用程序关联的公钥和密钥（令牌）对来完成的。创建LinkedIn应用程序很容易——您只需登录[http://www.linkedin.com/secure/developer](http://www.linkedin.com/secure/developer)并填写简要的应用程序信息表。您将获得一个秘钥和一个令牌来启用身份验证。执行以下步骤来启用LinkedIn身份验证：
- en: Install the `linkedin-strategy` module—`npm install linkedin-strategy`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`linkedin-strategy`模块—`npm install linkedin-strategy`
- en: 'Get an instance of the LinkedIn strategy and initialize it to the Passport
    middleware by the `use()` function after session support has been enabled:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取LinkedIn策略的实例，并在启用会话支持后通过`use()`函数将其初始化为Passport中间件：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Explicitly specify that the LinkedIn strategy should be used as Passport for
    each individual route, ensuring that session handling is enabled:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 明确指定LinkedIn策略应该作为每个单独路由的Passport使用，确保启用会话处理：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Provide a means for a user to log out by exposing a logout URI, making use
    of `request.logout`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一种方式让用户通过暴露注销URI来注销，利用`request.logout`：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The given third-party URLs and service data are subject to change. You should
    always refer to the service policy when providing third-party authentication.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的第三方URL和服务数据可能会发生变化。在提供第三方身份验证时，您应始终参考服务政策。
- en: Authorization
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: So far, the catalog data service uses basic authentication to protect its routes
    from unknown users; however, a catalog application should allow only few white-listed
    users to modify the items inside the catalog. To restrict access to the catalog,
    we will introduce the concept of authorization, that is, a subset of authenticated
    users, with appropriate permission allowed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，目录数据服务使用基本身份验证来保护其路由免受未知用户的侵害；然而，目录应用程序应该只允许少数白名单用户修改目录中的项目。为了限制对目录的访问，我们将引入授权的概念，即，一组经过身份验证的用户，允许适当的权限。
- en: 'When Passport''s `done()` function is invoked to authenticate a successful
    login, it takes as an argument a `user` instance of the user that has been granted
    authentication. The `done()` function adds that user model instance to the `request`
    object, and, in this way, provides access to it via the `request.user` property,
    after successful authentication. We will make use of that property to implement
    a function performing the authorization check after successful authentication:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用Passport的`done()`函数来验证成功的登录时，它以`user`用户的实例作为参数。`done()`函数将该用户模型实例添加到`request`对象中，并通过`request.user`属性提供对其的访问，以便在成功验证后执行授权检查。我们将利用该属性来实现一个在成功验证后执行授权检查的函数。
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The HTTP 403 Forbidden status code can be easily confused with 405 Not allowed.
    However, the 405 Not Allowed status code indicates that a specific HTTP verb is
    not supported by the requested resource, so it should be used only in that context.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 403 Forbidden状态码很容易与405 Not allowed混淆。然而，405 Not Allowed状态码表示请求的资源不支持特定的HTTP动词，因此只能在该上下文中使用。
- en: The `authorize()` function will close the `response` stream, returning the `403
    Forbidden` status code, which indicates that the logged-in user is recognized
    but has insufficient permissions. This revokes access to the resource. This function
    has to be used in each route that carries out data manipulation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`authorize()`函数将关闭`response`流，返回`403 Forbidden`状态码，表示已识别登录用户但权限不足。这将撤销对资源的访问。此函数必须在执行数据操作的每个路由中使用。'
- en: 'Here''s an example of how a `post` route implements authorization:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`post`路由实现授权的示例：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After `authorize()` is invoked, we check whether the `response` object still
    allows writing to its output by checking the value of the closed property of the
    `response` object. It will return `true` once the end function of the `response`
    object has been called, which is exactly what the `authorize()` function does
    when the user lacks admin permissions. Thus, we can rely on the closed property
    in our implementation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`authorize()`后，我们通过检查`response`对象的closed属性的值来检查其输出是否仍然允许写入。一旦`response`对象的end函数被调用，closed属性将返回`true`，这正是当用户缺少管理员权限时`authorize()`函数所做的。因此，我们可以在我们的实现中依赖closed属性。
- en: Transport layer security
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传输层安全
- en: Publicly available information in the web easily becomes the subject of different
    types of cyber attacks. Often it is not enough just to keep the so-called "bad
    guys" out. Sometimes, they won't bother gaining authentication at all and may
    prefer to carry out a **man-in-the-middle** (**MiM**) attack, pretending to be
    the final receiver of a message and sniffing the communication channel that transmits
    the data—or, even worse, altering the data while it flows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 网上公开的信息很容易成为不同类型的网络攻击的对象。通常仅仅把所谓的“坏人”挡在门外是不够的。有时，他们甚至不会费心获得认证，而是更喜欢进行**中间人**（**MiM**）攻击，假装是消息的最终接收者，并窃听传输数据的通信渠道，甚至更糟糕的是在数据流动时修改数据。
- en: Being a text-based protocol, HTTP transfers data in a human-readable format,
    which makes it an easy victim of MiM attacks. Unless transferred in an encrypted
    format, all the catalog data of our service is vulnerable to MiM attacks. In this
    section, we will switch our transport from an insecure HTTP protocol to the secure
    HTTPS protocol.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种基于文本的协议，HTTP以人类可读的格式传输数据，这使得它很容易成为MiM攻击的受害者。除非以加密格式传输，否则我们服务的所有目录数据都容易受到MiM攻击的威胁。在本节中，我们将把我们的传输方式从不安全的HTTP协议切换到安全的HTTPS协议。
- en: HTTPS is secured by asymmetric cryptography, also known as **public-key encryption**.
    It is based on a pair of keys that are mathematically related. The key used for
    encryption is called **public key**, and the key used for decryption is called
    **private key**. The idea is to freely provide the encryption key to partners
    who have to send encrypted messages and to perform decryption with the private
    key.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS由非对称加密，也称为**公钥加密**，来保护。它基于数学相关的一对密钥。用于加密的密钥称为**公钥**，用于解密的密钥称为**私钥**。其思想是自由提供加密密钥给必须发送加密消息的合作伙伴，并用私钥执行解密。
- en: 'A typical public-key encryption communication scenario between two parties,
    *A* and *B*, will be the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 两个方，*A* 和 *B* 之间的典型的公钥加密通信场景如下：
- en: Party *A* composes a message, encrypts it with Party B's public key, and sends
    it
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Party *A* 组成一条消息，用 *B* 方的公钥加密，然后发送
- en: Party *B* decrypts the message with its own private key and processes it
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Party *B* 用自己的私钥解密消息并处理它
- en: Party *B* composes a response message, encrypts it with Party *A*'s public key,
    and then sends it
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Party *B* 组成一个响应消息，用 *A* 方的公钥加密，然后发送
- en: Party *A* decrypts the response message with its own private key
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Party *A* 用自己的私钥解密响应消息
- en: 'Now that we know how public-key encryption works, let''s go through a sample
    of HTTPS client-server communication, as shown in this diagram:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道公钥加密是如何工作的，让我们通过HTTPS客户端-服务器通信的示例来了解一下：
- en: '![](img/46046c17-c975-4e14-aecc-b94764bc16a3.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46046c17-c975-4e14-aecc-b94764bc16a3.png)'
- en: The client sends an initial request against an SSL-secured endpoint. The server
    responds to that request by sending its public key to be used for encrypting further
    incoming requests. Then, the client has to check the validity and verify the identity
    of the received key. After successful verification of the server's public key,
    the client has to send its own public key back to the server. Finally, after the
    key exchange procedure is complete, the two parties can start communicating securely.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端对SSL安全端点发送初始请求。服务器对该请求做出响应，发送其公钥以用于加密进一步的传入请求。然后，客户端必须检查接收到的密钥的有效性并验证其身份。在成功验证服务器的公钥之后，客户端必须将自己的公钥发送回服务器。最后，在密钥交换过程完成后，两个方可以开始安全地通信。
- en: HTTPS relies on trust; thus, it is vital to have a reliable way of checking
    whether a specific public key belongs to a specific server. Public keys are exchanged
    within an X.509 certificate, which has a hierarchical structure. This structure
    enables clients to check whether a given certificate has been generated from a
    trusted root certificate. Clients should trust only certificates that have been
    issued by a known **certificate authority** (**CA**).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS依赖于信任；因此，有一种可靠的方式来检查特定的公钥是否属于特定的服务器是至关重要的。公钥在X.509证书中交换，具有分层结构。这种结构使客户端能够检查给定的证书是否是由受信任的根证书生成的。客户端应该只信任由已知的**证书颁发机构**（**CA**）颁发的证书。
- en: Before switching our service to use the HTTPS transport, we need a public/private
    key pair. Since we are not a certificate authority, we will have to use OpenSSL
    tooling to generate test keys for us.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的服务切换到使用HTTPS传输之前，我们需要一个公钥/私钥对。由于我们不是证书颁发机构，我们将不得不使用OpenSSL工具为我们生成测试密钥。
- en: 'OpenSSL is available for download at [http://www.openssl.org/](http://www.openssl.org/),
    where source code distributions are available for all popular operating systems.
    OpenSSL can be installed as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL可以在[http://www.openssl.org/](http://www.openssl.org/)下载，那里提供了所有流行操作系统的源代码分发。OpenSSL可以按照以下方式安装：
- en: 'Binary distribution is available for download for Windows, and Debian and Ubuntu
    users can make use of the packaged distribution by executing the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 二进制分发可供Windows下载，Debian和Ubuntu用户可以通过执行以下命令使用打包的分发：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Windows users will have to set an environment variable, OPENSSL_CNF, specifying
    the location of the `openssl.cnf` configuration file, typically located in the
    share directory in the installation archive.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户需要设置一个环境变量OPENSSL_CNF，指定`openssl.cnf`配置文件的位置，通常位于安装存档的共享目录中。
- en: 'Now let''s generate a test key/value pair with OpenSSL:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们用OpenSSL生成一个测试的键/值对：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: OpenSSL will prompt some details required for generating the certificate, such
    as country code, city, and fully qualified domain name. Afterward, it will generate
    a private key in the `catalog.pem` file and a public key certificate that will
    be valid for a year in the `catalog.crt` file. We will be using these newly generated
    files, so copy them into a new subdirectory, called `ssl`, in the catalog data
    service directory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL将提示生成证书所需的一些细节，例如国家代码、城市和完全合格的域名。之后，它将在`catalog.pem`文件中生成一个私钥，并在`catalog.crt`文件中生成一个有效期为一年的公钥证书。我们将使用这些新生成的文件，所以将它们复制到目录数据服务目录中的一个名为`ssl`的新子目录中。
- en: 'Now we have everything needed to modify our service to use HTTPS:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了修改我们的服务以使用HTTPS所需的一切：
- en: 'First, we need to switch and use the HTTPS module instead of HTTP and specify
    the port that we want to use to enable HTTPS communication:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要切换并使用HTTPS模块而不是HTTP，并指定要使用的端口以启用HTTPS通信：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we have to read the private key from the `catalog.cem` file and the certificate
    from `catalog.crt` into an array:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将`catalog.cem`文件中的私钥和`catalog.crt`中的证书读入数组中：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we pass the array containing the key pair to the HTTPS instance when
    creating the server and start listening through the specified port:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将包含密钥对的数组传递给创建服务器的HTTPS实例，并通过指定的端口开始监听：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That's all you need to do to enable HTTPS for an Express-based application.
    Save your changes and give it a try by requesting `https://localhost:3443/catalog/v2`
    in a browser. You will be shown a warning message informing you that the server
    you are connecting to is using a certificate that is not issued by a trusted certificate
    authority. That's normal, as we generated the certificate on our own, and we are
    not a CA for sure, so just ignore that warning.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为Express应用程序启用HTTPS所需做的一切。保存您的更改，并尝试在浏览器中请求`https://localhost:3443/catalog/v2`。您将看到一个警告消息，告诉您正在连接的服务器正在使用由不受信任的证书颁发机构颁发的证书。这是正常的，因为我们自己生成了证书，而且我们肯定不是CA，所以只需忽略该警告。
- en: Before deploying a service on a production environment, you should always ensure
    that you use a server certificate issued by a trusted CA.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在将服务部署到生产环境之前，您应始终确保使用由受信任的CA颁发的服务器证书。
- en: Self-test questions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测问题
- en: 'Go through the following questions:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Is HTTP basic authentication secure against man-in-the-middle attacks?
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP基本身份验证是否安全防范中间人攻击？
- en: What are the benefits of Transport Layer Security?
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输层安全性有哪些好处？
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to protect exposed data by enabling a means
    of authentication and authorization. This is a critical aspect of any publicly
    available data service. In addition, you learned how to prevent man-in-the-middle
    attacks using the secured layer transport protocol between a service and its users.
    As a developer of such services, you should always consider the most appropriate
    security features that your application should support.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何通过启用身份验证和授权手段来保护暴露的数据。这是任何公开可用数据服务的关键方面。此外，您还学会了如何使用服务和用户之间的安全层传输协议来防止中间人攻击。作为这类服务的开发人员，您应该始终考虑应用程序应支持的最合适的安全功能。
- en: I hope this was a useful experience! You gained enough knowledge and practical
    experience, which should have made you much more confident in understanding how
    RESTful APIs work and how they are designed and developed. I strongly encourage
    you to go through the code evolution chapter by chapter. You should be able to
    further refactor it, adopting it to your own coding style. Of course, some parts
    of it can be further optimized, as they repeat quite often. That is an intentional
    decision rather than good practice, as I wanted to emphasize their importance.
    You should always strive to improve your code-base, making it easier to maintain.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这是一个有用的经验！您获得了足够的知识和实际经验，这应该使您更加自信地理解RESTful API的工作原理以及它们的设计和开发方式。我强烈建议您逐章阅读代码演变。您应该能够进一步重构它，使其适应您自己的编码风格。当然，它的一些部分可以进一步优化，因为它们经常重复。这是一个故意的决定，而不是良好的实践，因为我想强调它们的重要性。您应该始终努力改进您的代码库，使其更易于维护。
- en: Finally, I would like to encourage you to always follow the development of the
    `Node.js` modules you use in your applications. Node.js has an extraordinary community
    that is eager to grow rapidly. There is always something exciting going on there,
    so ensure that you don't miss it. Good luck!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想鼓励您始终关注您在应用程序中使用的`Node.js`模块的发展。Node.js拥有一个迅速增长的非凡社区。那里总是有一些令人兴奋的事情发生，所以确保您不要错过。祝你好运！
