- en: Chapter 7. Wijmo Mobile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 Wijmo移动端
- en: 'Introduced in the 2013 release, adaptive widgets can be used in both desktop
    and mobile web applications. In this chapter, we take a quick tour of Wijmo mobile:
    the setup, simple widgets, and views. In particular, we focus on the AppView,
    Wijmo''s adaptive super widget that lets you use the same pages for mobile and
    desktop browsers.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2013年版本中引入的适应性小部件可以在桌面和移动Web应用程序中使用。在本章中，我们快速浏览Wijmo移动端：设置、简单小部件和视图。特别是，我们关注AppView，这是Wijmo的适应性超级小部件，允许您为移动和桌面浏览器使用相同的页面。
- en: Getting started with Wijmo mobile
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Wijmo移动端
- en: In this section, I show you how to enable Wijmo's mobile widgets. We go through
    the steps of obtaining jQuery mobile and creating widgets. Wijmo mobile widgets
    are an extension of jQuery's mobile widgets. I also explain how a different approach
    to creating mobile widgets is taken by jQuery mobile.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何启用Wijmo的移动端小部件。我们通过获取jQuery移动端和创建小部件的步骤进行操作。Wijmo移动端小部件是jQuery移动端小部件的扩展。我还解释了jQuery移动端在创建移动端小部件时采取的不同方法。
- en: Setting up Wijmo mobile
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Wijmo移动端
- en: Since Wijmo mobile is built on jQuery mobile, we will first obtain and install
    jQuery mobile.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Wijmo移动端是基于jQuery移动端构建的，我们将首先获取并安装jQuery移动端。
- en: Obtaining jQuery mobile
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取jQuery移动端
- en: You will need to replace the jQuery UI library used in the setup previously
    with jQuery mobile, which is available from [http://jquerymobile.com/download/](http://jquerymobile.com/download/).
    jQuery mobile also has a Theme Roller like jQuery UI. The default theme is included
    in the jQuery mobile package. If you want to make a custom theme, you can do so
    at [http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将之前设置中使用的jQuery UI库替换为jQuery移动端库，该库可在[http://jquerymobile.com/download/](http://jquerymobile.com/download/)下载。jQuery移动端也有类似jQuery
    UI的Theme Roller。默认主题包含在jQuery移动端包中。如果您想创建自定义主题，可以在[http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/)进行操作。
- en: Installing jQuery mobile
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装jQuery移动端
- en: 'You need to copy over the following items from the jQuery mobile download into
    the `lib` folder:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将以下项目从jQuery移动端下载复制到`lib`文件夹中：
- en: The `jquery.mobile-1.3.1.min.js` file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.mobile-1.3.1.min.js`文件'
- en: The `jquery.mobile-1.3.1.min.css` file for the CSS styles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于CSS样式的`jquery.mobile-1.3.1.min.css`文件
- en: The images directory for jQuery mobile icons
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery移动端图标目录
- en: 'Once the files are in place, a mobile page can be created. In the following
    code snippet, I show the contents of an example page using jQuery mobile:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件就位，就可以创建一个移动端页面。在以下代码片段中，我展示了使用jQuery移动端的一个示例页面的内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instead of the jQuery UI library, we used jQuery mobile here. In addition, we
    replaced the Wijmo Rocket theme with the jQuery UI theme.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的是jQuery移动端库，而不是jQuery UI库。此外，我们还用jQuery UI主题替换了Wijmo Rocket主题。
- en: Using a mobile browser emulator
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用移动浏览器模拟器
- en: 'For this chapter, we use the Opera mobile emulator available at [http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator).
    Compared to the iPhone or Android emulators, it is easier to install and simulate
    different devices with different screen sizes. The Opera mobile browser is also
    widely used and supported on all popular platforms. The following screenshot shows
    you the previous example of a jQuery mobile page rendered in Opera mobile:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们使用可在[http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator)找到的Opera移动端模拟器。与iPhone或Android模拟器相比，它更容易安装，并且可以模拟不同屏幕尺寸的不同设备。Opera移动浏览器也被广泛使用并支持所有流行的平台。以下截图显示了在Opera移动浏览器中渲染的jQuery移动端页面的上一个示例：
- en: '![Using a mobile browser emulator](img/6067OT_7_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![使用移动浏览器模拟器](img/6067OT_7_02.jpg)'
- en: Creating an expander widget
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个展开小部件
- en: 'The expander is for collapsible content. Unlike the accordion, it only has
    a single section. To create an expander, wrap the collapsible block in a single-parent
    element and apply the `data-role="wijexpander" attribute` to the parent element.
    You can see how to do this in the following example, where only the contents of
    the `body` tag are shown:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 展开小部件用于可折叠内容。与手风琴不同，它只有一个部分。要创建一个展开小部件，将可折叠块包裹在一个单亲元素中，并将`data-role="wijexpander"`属性应用到父元素上。您可以在以下示例中看到如何操作，其中只显示了`body`标签的内容：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The default for an expander shows the content within the block.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 展开小部件的默认显示是块内的内容。
- en: Passing options to the expander widget
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向展开小部件传递选项
- en: To make the expander collapsed by default, we use the `data-options` attribute
    and set `expanded` to `false`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使展开小部件默认折叠，我们使用`data-options`属性并将`expanded`设置为`false`。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since Wijmo mobile is still new, many of the widgets do not have mobile counterparts
    and a few of the options supported for desktop browsers don''t work. Namely, the
    option `contentUrl` does not work in the 3.20131.2 version, and setting the expand
    direction to `right` makes the UI look confusing. Here, we see an example of changing
    the expand direction by setting `data-options=''{expandDirection: "right"}''`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '由于Wijmo mobile仍然较新，许多小部件还没有移动版本，并且一些桌面浏览器支持的功能在移动设备上不起作用。特别是，`contentUrl`选项在3.20131.2版本中不起作用，将展开方向设置为`right`会使UI看起来很混乱。在此，我们看到了通过设置`data-options=''{expandDirection:
    "right"}''`来更改展开方向的示例：'
- en: '![Passing options to the expander widget](img/6067OT_7_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![传递选项给展开小部件](img/6067OT_7_04.jpg)'
- en: Creating a ListView widget
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ListView小部件
- en: 'The ListView acts as a list of links for navigation. jQuery mobile applies
    the necessary styles to make the list mobile-friendly. Once a list item is tapped
    on, the link content is loaded through AJAX and inserted into the page. This improves
    the user perception as they do not see a blank screen. A ListView is created by
    setting the `data-role` attribute of an HTML list to `listview` with each list
    item containing a link:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ListView充当导航链接列表。jQuery mobile应用必要的样式使列表适合移动设备。一旦点击列表项，链接内容将通过AJAX加载并插入到页面中。这改善了用户的感知，因为他们不会看到空白屏幕。通过将HTML列表的`data-role`属性设置为`listview`来创建ListView，每个列表项都包含一个链接：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With `data-autodividers="true"` on the list parent, the list items are categorized
    by their first letter. The list items show up as navigation buttons with right
    arrows as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表父元素上设置`data-autodividers="true"`，列表项将根据它们的首字母进行分类。列表项显示为带有右箭头的导航按钮，如下截图所示：
- en: '![Creating a ListView widget](img/6067OT_7_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建ListView小部件](img/6067OT_7_05.jpg)'
- en: Creating an AppView widget
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AppView小部件
- en: The WijmoAppView creates a responsive layout that adapts to the screen size.
    It works similar to ListView on phones. On desktops and tablets, the list is displayed
    on the left side with the content pane taking up the rest of the page. Note that
    when using AppView, your jQuery mobile and jQuery versions must be compatible
    with the release of Wijmo you're using. For this example, I am using jQuery 1.8.2,
    jQuery mobile 1.2.0, and Wijmo3.20131.4.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: WijmoAppView创建一个响应式布局，可以适应屏幕大小。它在手机上与ListView的工作方式相似。在桌面和平板电脑上，列表显示在左侧，内容区域占据页面的其余部分。请注意，当使用AppView时，你的jQuery
    mobile和jQuery版本必须与使用的Wijmo版本兼容。在此示例中，我使用jQuery 1.8.2，jQuery mobile 1.2.0和Wijmo3.20131.4。
- en: 'An AppView is composed of an AppView page and a ListView for navigation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: AppView由一个AppView页面和一个用于导航的ListView组成：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Under the AppView page, the page title is set in an element using `data-role="header"`,
    which is always displayed at the top of the page. As you might guess, there is
    also a `data-role="footer"` attribute, which is displayed at the bottom of the
    page when data-position is set to `fixed`. The content area in the preceding code
    marked with `data-role="content"` only shows in tablets. You can see how the page
    would look like in a tablet in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在AppView页面下，页面标题使用`data-role="header"`元素设置，它始终显示在页面顶部。正如你可能猜到的，还有一个`data-role="footer"`属性，当`data-position`设置为`fixed`时，它会在页面底部显示。在前面代码中标记为`data-role="content"`的内容区域仅在平板电脑上显示。你可以在以下截图中看到平板电脑上的页面外观：
- en: '![Creating an AppView widget](img/6067OT_7_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建AppView小部件](img/6067OT_7_06.jpg)'
- en: 'The navigation panel is a ListView widget wrapped around by a `data-role="menu"`
    element. On the phone, only the navigation panel is shown when the AppView is
    loaded as in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 导航面板是一个由`data-role="menu"`元素包裹的ListView小部件。在手机上，当AppView加载时，只显示导航面板，如下截图所示：
- en: '![Creating an AppView widget](img/6067OT_7_14.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建AppView小部件](img/6067OT_7_14.jpg)'
- en: To make the menu items work, we need to serve the files set in the `href` attributes
    from a server since they are loaded through AJAX. The downloadable source code
    for this chapter includes a file server written in `Node.JS`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使菜单项工作，我们需要从服务器提供在`href`属性中设置的文件，因为它们是通过AJAX加载的。本章节的可下载源代码包括一个用`Node.JS`编写的文件服务器。
- en: Adding the AppView pages
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加AppView页面
- en: 'Let''s add the calendar page and initialize it with the calendar widget. Create
    a `calendar.html` file with the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加日历页面并使用日历小部件初始化它。创建一个`calendar.html`文件，包含以下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The contents under `data-role="content"` are displayed in the content area.
    In this area, the calendar is added by setting `data-role="wijcalendar"` on a
    `div`. On the top left is a **Back** button, which returns to the main menu. It
    is added whenever a menu item is selected. In the following screen, I selected
    the calendar menu entry:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`data-role="content"`下的内容将在内容区域显示。在这个区域，通过在`div`上设置`data-role="wijcalendar"`来添加日历。在左上角有一个**返回**按钮，它返回主菜单。每次选择菜单项时都会添加此按钮。在下面的屏幕中，我选择了日历菜单项：'
- en: '![Adding the AppView pages](img/6067OT_7_08.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![添加AppView页面](img/6067OT_7_08.jpg)'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If the example doesn''t work for you, the first thing to try is replacing the
    header styles and scripts with the ones hosted on the CDN: [http://wijmo.com/downloads/#wijmo-cdn](http://wijmo.com/downloads/#wijmo-cdn).
    The next step is to upload your HTML files and post a question on the forum [http://wijmo.com/forums/](http://wijmo.com/forums/).
    In addition, check the AJAX requests and make sure your files are being served
    locally.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果示例对您不起作用，首先尝试用CDN上提供的样式和脚本替换：[http://wijmo.com/downloads/#wijmo-cdn](http://wijmo.com/downloads/#wijmo-cdn)。下一步是上传您的HTML文件，并在论坛
    [http://wijmo.com/forums/](http://wijmo.com/forums/) 上发帖提问。此外，检查AJAX请求，确保您的文件正在本地提供服务。
- en: Reusing non-mobile pages
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复使用非移动页面
- en: 'Suppose we already have a `calendar.html`file. How can it be used with the
    new mobile app? You just need to add `data-role="appviewpage",data-role="content",`
    and insert `data-role="widgetname"` for all widgets on the page. For instance,
    we could replace `calendar.html` with the following, keeping the reference to
    jQuery UI and the Rocket theme:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经有了一个`calendar.html`文件。我们如何使用新的移动应用？您只需添加`data-role="appviewpage",data-role="content",`，并为页面上的所有小部件插入`data-role="widgetname"`。例如，我们可以将`calendar.html`替换为以下内容，同时保留对jQuery
    UI和Rocket主题的引用：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We added two extra elements for the required data-roles. Your page may have
    a different structure and you may just need to add the `data-roles` attribute
    to existing elements. The JavaScript on the page is not executed, as Wijmo ignores
    everything except the title outside of `data-role="appviewpage"`. Since the title
    is set with `<title>Calendar</title>`, Wijmo uses it as the title for the page
    as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为所需的数据角色添加了两个额外元素。您的页面可能有不同的结构，您可能只需要将`data-roles`属性添加到现有元素上。页面上的JavaScript不会执行，因为Wijmo忽略`data-role="appviewpage"`之外的所有内容。由于标题是用`<title>Calendar</title>`设置的，Wijmo将其用作页面的标题，如下面的截图所示：
- en: '![Reusing non-mobile pages](img/6067OT_7_13.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![重复使用非移动页面](img/6067OT_7_13.jpg)'
- en: 'On desktop browsers, the page still displays the calendar widget. Take a look
    at the screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面浏览器中，页面仍然显示日历小部件。请看下面的截图：
- en: '![Reusing non-mobile pages](img/6067OT_7_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![重复使用非移动页面](img/6067OT_7_10.jpg)'
- en: This is quite remarkable as jQuery mobile does not have a similar widget to
    allow reuse of non-mobile pages. Using the WijmoAppView, separate mobile development
    is no longer necessary.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常引人注目，因为jQuery mobile没有类似的控件允许重复使用非移动页面。使用WijmoAppView，不再需要单独的移动开发。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced Wijmo mobile widgets. Unlike jQuery mobile, Wijmo's
    adaptive widgets can be used on both desktops and phones. We started by setting
    up the development environment, then we looked at several widgets, starting from
    the simplest.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Wijmo移动小部件。与jQuery mobile不同，Wijmo的自适应小部件可以在桌面和手机上使用。我们首先设置了开发环境，然后查看了一些小部件，从最简单的开始。
