- en: Chapter 12. Highcharts and jQuery Mobile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章：Highcharts 和 jQuery Mobile
- en: 'Highcharts does not only work in desktop browsers; it also supports mobile
    platforms. In this chapter, we will explore how to deploy Highcharts to mobile
    platforms with a web mobile framework, jQuery Mobile, that is built on top of
    jQuery. A very brief introduction to jQuery Mobile is given. We will look into
    a couple of areas that are crucial to understanding the basics of the mobile framework.
    Then, we will integrate Highcharts and jQuery Mobile by building a mobile application
    using an Olympic 2012 medals table. We will demonstrate how to apply mobile events
    such as swipe, rotation, and pinch to navigate through the charts. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 不仅在桌面浏览器中工作；它还支持移动平台。在本章中，我们将探讨如何使用基于 jQuery 的 Web 移动框架 jQuery Mobile
    将 Highcharts 部署到移动平台。以下是 jQuery Mobile 的简要介绍。我们将探讨几个对理解移动框架基础至关重要的领域。然后，我们将通过构建一个使用
    2012 年奥运会奖牌表的移动应用程序来集成 Highcharts 和 jQuery Mobile。我们将演示如何应用移动事件，如滑动、旋转和捏合来导航图表。在本章中，我们将涵盖以下主题：
- en: Introducing jQuery Mobile
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 jQuery Mobile
- en: Understanding mobile page structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解移动页面结构
- en: Understanding page initialization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解页面初始化
- en: Linking between mobile pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动页面之间的链接
- en: Integrating Highcharts and jQuery Mobile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 Highcharts 和 jQuery Mobile
- en: Drilling down for data from one chart to another
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个图表深入到另一个图表的数据
- en: 'Changing chart displays with touch actions: swipe, rotate, and pinch'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过触摸动作更改图表显示：滑动、旋转和捏合
- en: A short introduction to jQuery Mobile
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery Mobile 简介简述
- en: This chapter is not a full tutorial for jQuery Mobile (jQM) by any means, but
    it is a quick-start guide for using it with Highcharts. JQuery Mobile is a web
    development framework for mobile devices built on top of jQuery. It is designed
    to be compatible across all mobile platforms, and the UI look and feel emulate
    native mobile applications. The benefit of this is low cost development in a single-source
    code, without the need for testing across all mobile platforms and browsers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章绝对不是 jQuery Mobile（jQM）的完整教程，但它是一个使用 Highcharts 的快速入门指南。JQuery Mobile 是一个基于
    jQuery 的移动设备网络开发框架。它旨在与所有移动平台兼容，并且 UI 的外观和感觉模仿了原生移动应用程序。这种优势在于单源代码的低成本开发，无需在所有移动平台和浏览器上进行测试。
- en: Before we drill down into how Highcharts can be integrated with jQM, a few important
    concepts need to be understood.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨 Highcharts 如何与 jQM 集成之前，需要理解一些重要概念。
- en: Understanding mobile page structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解移动页面结构
- en: The most important concept in jQM is to understand the structure of a mobile
    page, which is not the same as a normal HTML page. A mobile page is constructed
    inside an HTML `<div>` box with a jQM-specific attribute, `data-role='page'`,
    marked as a boundary. In fact, the `data-*` syntax is **Customer Data Attributes**
    defined in HTML5 standard. This allows web developers to store custom data specific
    to the page or application, which can easily access the data attribute values.
    For more information on APIs for HTML visit [http://dev.w3.org/html5/spec/single-page.html#custom-data-attribute](http://dev.w3.org/html5/spec/single-page.html#custom-data-attribute).
    Within a mobile page, normal HTML tags, such as input, hyperlinks, select, and
    so on, are used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQM 中最重要的概念是理解移动页面的结构，这与正常的 HTML 页面不同。移动页面是在一个带有 jQM 特定属性 `data-role='page'`
    的 HTML `<div>` 框架内构建的，该属性作为边界。实际上，`data-*` 语法是 HTML5 标准中定义的**客户数据属性**。这允许网络开发者存储特定于页面或应用的定制数据，可以轻松访问数据属性值。有关
    HTML API 的更多信息，请访问 [http://dev.w3.org/html5/spec/single-page.html#custom-data-attribute](http://dev.w3.org/html5/spec/single-page.html#custom-data-attribute)。在移动页面中，使用正常的
    HTML 标签，如输入、超链接、选择等。
- en: 'An HTML document can contain multiple mobile pages and links through an anchor
    and the `id` attribute. An anchor is the same as a normal HTML anchor (for example,
    `#chart`). The framework resolves the anchor reference and retrieves a mobile
    page with the matching `id` attribute, which has the following syntax:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 HTML 文档可以通过锚点和 `id` 属性包含多个移动页面和链接。锚点与正常的 HTML 锚点相同（例如，`#chart`）。框架解析锚点引用并检索具有匹配
    `id` 属性的移动页面，其语法如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is an example of a single mobile page in an HTML document:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 HTML 文档中单个移动页面的示例：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Depending on the purpose of the mobile application, all the pages can be built
    into a single HTML document or they can exist in separate documents. One important
    aspect is that, if multiple mobile pages are defined within a document, the first
    page in the `<body>` tag is always loaded on the screen. In jQM, a page is generally
    composed of the head and content, optionally a footer and navigation bar. Each
    component also has a `<div>` box with `data-role` to indicate the type of component
    within a mobile page. The following code shows how multiple mobile pages in a
    document are loaded:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据移动应用程序的目的，所有页面可以构建成一个单独的 HTML 文档，或者它们可以存在于单独的文档中。一个重要的方面是，如果文档中定义了多个移动页面，那么
    `<body>` 标签中的第一个页面总是会被加载到屏幕上。在 jQM 中，一个页面通常由头部和内容组成，可选的页脚和导航栏。每个组件也有一个带有 `data-role`
    的 `<div>` 框，以指示移动页面中的组件类型。以下代码显示了文档中多个移动页面的加载方式：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see, there are two `<div>` boxes with the `data-role='page'` attribute.
    The first `<div>` box is the same as the previous example with an additional `Options`
    link button that redirects to the second mobile page, `id='config'`. The `data-icon="gear"`
    attribute decorates the button with a gear icon provided by the framework.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这里有包含 `data-role='page'` 属性的两个 `<div>` 框。第一个 `<div>` 框与上一个例子相同，额外包含一个指向第二个移动页面的“选项”链接按钮，该页面的
    `id` 为 `config`。`data-icon="gear"` 属性使用框架提供的齿轮图标装饰了按钮。
- en: 'For the full list of icons visit [http://demos.jquerymobile.com/1.4.3/icons](http://demos.jquerymobile.com/1.4.3/icons).
    When the button is pressed, it will open the second page as a modal dialog box
    due to the `data-rel=''dialog''` attribute. The following screenshot shows the
    view of the first mobile page as it appears on an iPhone:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看图标的全列表，请访问 [http://demos.jquerymobile.com/1.4.3/icons](http://demos.jquerymobile.com/1.4.3/icons)。当按钮被按下时，由于
    `data-rel='dialog'` 属性，它将以模态对话框的形式打开第二个页面。以下截图显示了第一个移动页面在iPhone上的视图：
- en: '![Understanding mobile page structure](img/7451OS_12_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![理解移动页面结构](img/7451OS_12_01.jpg)'
- en: Understanding page initialization
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解页面初始化
- en: In this section, we will look at why we don't use the traditional DOM-ready
    method to run initialization code for mobile pages. Suppose a page's content requires
    some sort of initialization, then using the traditional DOM-ready method `$.ready`
    can have a negative effect. This is because the `$.ready` method runs as soon
    as all the DOMs inside the document are loaded. In other words, we have no control
    over when to run the jQM page initialization code if it is inside the DOM ready
    handler.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨为什么我们不使用传统的 DOM-ready 方法来为移动页面运行初始化代码。假设一个页面的内容需要某种初始化，那么使用传统的 DOM-ready
    方法 `$.ready` 可能会有负面影响。这是因为 `$.ready` 方法会在文档中所有 DOM 加载完毕后立即运行。换句话说，如果初始化代码在 DOM
    ready 处理器内部，我们就无法控制其运行的时间。
- en: 'However, jQM provides a specific event, `pageinit`, that caters for this scenario.
    All we need to do is to assign an `id` value inside the `<div data-role=''page''>`
    markup, then define the `pageinit` event handler for that `id` value. Whenever
    a page is going to be initialized for display, this event is triggered. Note that
    the `$.ready` method is still going to be called, but we just don''t use it in
    jQM. To demonstrate this concept, let us use the previous multipage example with
    an additional `$.ready` call:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，jQM 提供了一个特定的事件，`pageinit`，用于处理这种情况。我们只需要在 `<div data-role='page'>` 标记内分配一个
    `id` 值，然后为该 `id` 值定义 `pageinit` 事件处理器。每当一个页面即将被初始化以显示时，这个事件就会被触发。请注意，`$.ready`
    方法仍然会被调用，但我们只是在 jQM 中不使用它。为了演示这个概念，让我们使用之前的带有额外 `$.ready` 调用的多页面示例：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are two mobile pages defined in this example: `main_page` and `config`.
    Each mobile page is tied to its `pageinit` event handler. With the `$.ready` method,
    we can observe the call sequence with other `pageinit` events. When we first load
    the document to the browser, we see the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中定义了两个移动页面：`main_page` 和 `config`。每个移动页面都与它的 `pageinit` 事件处理器相关联。使用 `$.ready`
    方法，我们可以观察与其他 `pageinit` 事件的调用顺序。当我们第一次将文档加载到浏览器中时，我们看到以下截图：
- en: '![Understanding page initialization](img/7451OS_12_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![理解页面初始化](img/7451OS_12_02.jpg)'
- en: 'Remember that jQM always displays the first page in the HTML body. That means
    the `pageinit` event for `main_page` is fired as soon as the DOM for `main_page`
    is fully loaded and initialized for the display. It is also important to understand
    that, at the point of execution, the DOM for the subsequent `config` page is not
    loaded yet. When we touch the **OK** button, the execution resumes and the DOM
    for the `config` page is then loaded. Hence all the DOMs in the document are loaded
    and the `$.ready` method is then called; it shows the second alert message as
    shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，jQM总是显示HTML体中的第一个页面。这意味着`main_page`的`pageinit`事件在`main_page`的DOM完全加载并初始化用于显示时立即触发。同样重要的是要理解，在执行点，后续`config`页面的DOM尚未加载。当我们触摸**确定**按钮时，执行继续，并加载`config`页面的DOM。因此，文档中的所有DOM都已加载，然后调用`$.ready`方法；它显示了以下截图中的第二个警告消息：
- en: '![Understanding page initialization](img/7451OS_12_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![理解页面初始化](img/7451OS_12_03.jpg)'
- en: 'When we touch the **OK** button, the alert box disappears and the control returns
    back to the browser. Now, if we touch the **Options** button in the top right-hand
    corner, the `config` dialog page is initialized and displayed on the screen. Hence
    the `pageinit` handler for the `config` page is called:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们触摸**确定**按钮时，警告框消失，控制权返回到浏览器。现在，如果我们触摸右上角的**选项**按钮，`config`对话框页面被初始化并在屏幕上显示。因此，调用`config`页面的`pageinit`处理程序：
- en: '![Understanding page initialization](img/7451OS_12_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![理解页面初始化](img/7451OS_12_04.jpg)'
- en: Linking between mobile pages
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动页面之间的链接
- en: 'The second important concept in jQM is how the mobile pages are linked together.
    Understanding this concept can help us to design a web mobile application with
    a fluid user experience. In jQM, there are two ways to load an external mobile
    page: HTTP and Ajax. Depending on how we set the `data-` attribute, it interprets
    the `href` value and decides which way to load a mobile page. By default, apart
    from the first document load that is a normal HTTP transfer, the mobile page is
    loaded through Ajax.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: jQM的第二个重要概念是如何将移动页面链接在一起。理解这个概念可以帮助我们设计具有流畅用户体验的Web移动应用程序。在jQM中，有两种方式可以加载外部移动页面：HTTP和Ajax。根据我们如何设置`data-`属性，它解释`href`值并决定加载移动页面的方式。默认情况下，除了第一个文档加载是正常的HTTP传输外，移动页面通过Ajax加载。
- en: 'The following block diagram explains how multiple mobile page blocks are managed
    within a document:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下块图解释了如何在文档中管理多个移动页面块：
- en: '![Linking between mobile pages](img/7451OS_12_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![移动页面之间的链接](img/7451OS_12_05.jpg)'
- en: When a mobile page invokes another mobile page, the jQM framework basically
    parses the `href` value. Since this is an anchor reference, it indicates that
    this is an internal mobile page block. The framework locates the page block from
    the current DOM by matching the `id` value. It then initializes and renders the
    page, which also triggers the `pageinit` event for page B as shown in the previous
    block diagram.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个移动页面调用另一个移动页面时，jQM框架基本上解析`href`值。由于这是一个锚点引用，它表示这是一个内部移动页面块。框架通过匹配`id`值从当前DOM中定位页面块。然后它初始化并渲染页面，这也会触发页面B的`pageinit`事件，如前一个块图所示。
- en: 'Suppose we have two separate HTML documents in which a button on one page is
    referring to the other document. The following block diagram describes the scenario:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个独立的HTML文档，其中一个页面上的按钮引用了另一个文档。以下块图描述了该场景：
- en: '![Linking between mobile pages](img/7451OS_12_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![移动页面之间的链接](img/7451OS_12_06.jpg)'
- en: In this case, we add an attribute, `data-ajax="false"` (for the sake of a simpler
    approach to managing the JavaScript code), to tell jQM that this button requires
    a document load instead of a background Ajax load. This is important because otherwise
    the `pageinit` handler code (or any JavaScript file) inside the `<script>` tag
    will not be loaded for the new mobile page, `B.html`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，我们添加一个属性，`data-ajax="false"`（为了简化JavaScript代码的管理），告诉jQM这个按钮需要一个文档加载而不是后台Ajax加载。这很重要，因为否则`<script>`标签内的`pageinit`处理代码（或任何JavaScript文件）将不会为新移动页面`B.html`加载。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript code can be embedded inside a `<script>` tag within a mobile page
    block and executed. The downside of this approach is that it requires more code
    management, as each page block has its own `pageinit` handler code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript代码可以嵌入到移动页面块内的`<script>`标签中并执行。这种方法的缺点是它需要更多的代码管理，因为每个页面块都有自己的`pageinit`处理代码。
- en: There is an alternative way to load Ajax in multiple documents, but we will
    leave it here. This is more than sufficient to implement a simple mobile web application.
    Readers can learn more from the jQuery Mobile documentation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种加载多个文档中 Ajax 的替代方法，但我们将在这里省略。这已经足够实现一个简单的移动网络应用。读者可以从 jQuery Mobile 文档中了解更多信息。
- en: Highcharts in touch-screen environments
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级图表在触摸屏环境中的使用
- en: The good thing about Highcharts is that it works perfectly well on both desktop
    browsers and web mobile environments without requiring any change of code. The
    only part that needs some consideration is events handling, because mobile devices
    are all touch-screen based and that means the mouse cursor is invisible.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 的好处是它可以在桌面浏览器和移动网络环境中完美运行，无需更改任何代码。唯一需要考虑的部分是事件处理，因为移动设备都是基于触摸屏的，这意味着鼠标光标是不可见的。
- en: In Highcharts, all the mouse hover events can still be triggered in touch devices,
    even though the mouse cursor is not shown. For instance, suppose we define a series
    with the `mouseOut`, `mouseOver`, and `click` events handling. If we touch the
    series, both the `mouseOver` and `click` events are triggered. However, if we
    touch another series causing the previous selected series to be unselected, a
    `mouseOut` event for the first series is fired. Needless to say, the sequence
    of events would be different with a real pointing device. In general, we should
    refrain from using any mouse hover events in touch-screen based devices.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Highcharts 中，所有鼠标悬停事件仍然可以在触摸设备上触发，尽管鼠标光标没有显示。例如，如果我们定义了一个具有 `mouseOut`、`mouseOver`
    和 `click` 事件处理的系列。如果我们触摸该系列，`mouseOver` 和 `click` 事件都会被触发。然而，如果我们触摸另一个系列导致之前选中的系列被取消选中，第一个系列的
    `mouseOut` 事件就会被触发。不用说，事件的顺序会与真实的光标设备不同。一般来说，我们应该避免在基于触摸屏的设备中使用任何鼠标悬停事件。
- en: In the next section, we will learn how to integrate jQM with Highcharts, including
    how to apply touch events to charts, how to use the chart `click` events to launch
    another chart and mobile page, and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何将 jQM 与 Highcharts 集成，包括如何将触摸事件应用于图表，如何使用图表 `click` 事件启动另一个图表和移动页面等。
- en: Integrating Highcharts and jQuery Mobile using an Olympic medals table application
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用奥运奖牌表应用整合 Highcharts 和 jQuery Mobile
- en: 'In this section, we will build a mobile application for browsing the results
    of the Olympic 2012 medals table. This application is only tested on iPhone and
    iPad. The startup screen provides four menus for looking up the results, as shown
    in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个用于浏览 2012 年奥运奖牌表结果的移动应用。此应用仅在 iPhone 和 iPad 上进行了测试。启动屏幕提供了四个菜单来查找结果，如下面的截图所示：
- en: '![Integrating Highcharts and jQuery Mobile using an Olympic medals table application](img/7451OS_12_07.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用奥运奖牌表应用整合 Highcharts 和 jQuery Mobile](img/7451OS_12_07.jpg)'
- en: 'The initial page is made up of a list of four hyperlinks referring to other
    pages, as shown in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 初始页面由指向其他页面的四个超链接列表组成，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, when the **Top 10 countries by gold** button is clicked, the `gold.html`
    file is HTTP-loaded (not Ajax) because we define `data-ajax="false"`. Since it
    is an HTTP load, the whole page, `gold.html`, is loaded onto the browser as well
    as everything within the `<script>` tags that are being executed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当点击**金牌前10名国家**按钮时，`gold.html` 文件是通过 HTTP 加载的（不是 Ajax），因为我们定义了 `data-ajax="false"`。由于这是一个
    HTTP 加载，整个页面 `gold.html` 以及 `<script>` 标签中正在执行的所有内容都将加载到浏览器中。
- en: Loading up the gold medals page
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载金牌页面
- en: 'The following is the content of the `gold.html` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `gold.html` 文件的内容：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since this whole HTML document is HTTP-loaded onto the browser, the `common.js`
    and `gold.js` files are also loaded (See [http://joekuan.org/Learning_Highcharts/Chapter_12/](http://joekuan.org/Learning_Highcharts/Chapter_12/)).
    The file `common.js` contains common routine code shared in the demo, such as
    device detection, orientation detection, chart creation, and so on. The `gold.js`
    file contains the `pageinit` handler code for all the mobile pages in the `gold.html`
    file. As the mobile page block, `gold_chart`, is the first defined block in the
    document, it is automatically loaded and rendered to the display; thus, the `pageinit`
    event for the `gold_chart` page block is triggered.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于整个 HTML 文档都是通过 HTTP 加载到浏览器中的，因此 `common.js` 和 `gold.js` 文件也被加载（参见 [http://joekuan.org/Learning_Highcharts/Chapter_12/](http://joekuan.org/Learning_Highcharts/Chapter_12/)）。`common.js`
    文件包含在演示中共享的通用代码，例如设备检测、方向检测、图表创建等。`gold.js` 文件包含 `gold.html` 文件中所有移动页面的 `pageinit`
    处理器代码。作为移动页面块，`gold_chart` 是文档中首先定义的块，因此它会被自动加载并渲染到显示中；因此，`gold_chart` 页面块的 `pageinit`
    事件被触发。
- en: Detecting device properties
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测设备属性
- en: 'For detecting mobile devices, the techniques range from string matching of
    the `navigator.userAgent` option, `jQuery.support`, `jQuery.browser` (deprecated),
    CSS media queries, to a third-party plugin such as Modernizer (see [http://modernizr.com/](http://modernizr.com/)
    for details). However, there is no standard way of doing this. Perhaps it is due
    to the diverse requirements for compatibility checks. It is beyond the scope of
    this book to debate the merits of each technique. For this demo, all we are interested
    in is the difference in screen size; that is, if there is more space in the display
    (such as with tablet devices), then we display the full country name in the charts
    instead of the country code, which is used for smaller devices (touch phones).
    We assume the following technique is sufficient to differentiate between phone
    and tablet devices:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于检测移动设备，技术范围从 `navigator.userAgent` 选项的字符串匹配、`jQuery.support`、`jQuery.browser`（已弃用）、CSS
    媒体查询，到第三方插件如 Modernizer（详情请见 [http://modernizr.com/](http://modernizr.com/)）。然而，并没有一个标准的做法。或许是因为兼容性检查的多样化需求。本书的范围并不包括对每种技术的优缺点的讨论。对于这个演示，我们只对屏幕尺寸的差异感兴趣；也就是说，如果显示空间更大（例如平板设备），则我们在图表中显示完整的国家名称，而不是用于较小设备的国家代码。我们假设以下技术足以区分手机和平板设备：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `$(window).width` property returns the width of the device in pixels, regardless
    of the device orientation. As for getting the current device orientation, we have
    the following method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(window).width` 属性返回设备以像素为单位的宽度，无论设备方向如何。至于获取当前设备方向，我们有以下方法：'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Plotting a Highcharts chart on a mobile device
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在移动设备上绘制 Highcharts 图表
- en: 'The following is the `pageinit` handler code for the `gold_chart` mobile page:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为 `gold_chart` 移动页面编写的 `pageinit` 处理器代码：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The touch events such as `swipeleft`, `swiperight`, and `orientationchange`
    will be discussed later on. The event handler, `pointEvt`, drills down further
    to another chart when the user taps on a country bar in the gold medal chart.
    We will also explore this interaction later on. Let''s first focus on the last
    part of the code, which creates the chart. The `createChart` method is a general
    routine to create a Highcharts graph that has the common options shared by all
    the chart mobile pages. For example, the `renderTo` option is always set to `chart_container`,
    which is inside the `data-role=''content''` attribute. The following code shows
    the `createChart` implementation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 后续将讨论触摸事件，如 `swipeleft`、`swiperight` 和 `orientationchange`。当用户在金牌图表中的国家条上点击时，事件处理器
    `pointEvt` 会进一步深入到另一个图表。我们也会稍后探讨这种交互。首先让我们关注代码的最后部分，这部分用于创建图表。`createChart` 方法是一个通用流程，用于创建具有所有图表移动页面共享的常见选项的
    Highcharts 图表。例如，`renderTo` 选项始终设置为 `chart_container`，它位于 `data-role='content'`
    属性内部。以下代码展示了 `createChart` 的实现：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that there is no series defined in the `options` parameter and the `options.load`
    property is set up to call the `plotGoldChart` function once the chart is created
    and loaded into the browser. The following code snippet is part of the `plotGoldChart`
    function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `options` 参数中没有定义系列，并且 `options.load` 属性被设置为在图表创建并加载到浏览器中时调用 `plotGoldChart`
    函数。以下代码片段是 `plotGoldChart` 函数的一部分：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `plotGoldChart` method is a general routine to plot a series into an existing
    chart. The `options` parameter is a configuration object with new settings to
    be applied to the chart. First, the function invokes an Ajax call, `gold_10.json`,
    to get the top 10 countries with the most gold medals. Here is what the result
    looks like in JSON format:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotGoldChart`方法是一个通用例程，用于将一个系列绘制到现有图表中。`options`参数是一个配置对象，包含要应用到图表中的新设置。首先，该函数调用Ajax调用`gold_10.json`以获取获得最多金牌的前10个国家。以下是JSON格式的结果：'
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Upon the results being returned, the handler function examines the `options`
    parameter for series type, device orientation, and other fields (stacking and
    data labels from the `config` dialog, which we will discuss later). Then, it creates
    the chart based on the settings. If the `type` property is `column`, then we create
    three column series called `Gold`, `Silver`, and `Bronze` with the point `click`
    event configured. If the `type` value is `pie`, then it creates a single pie series
    of gold medals with a gradual change of colors and data labels.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当结果返回后，处理函数会检查`options`参数中的系列类型、设备方向以及其他字段（来自`config`对话框的堆叠和数据标签，我们将在后面讨论）。然后，根据设置创建图表。如果`type`属性是`column`，则创建三个名为`Gold`、`Silver`和`Bronze`的柱状系列，并配置了点`click`事件。如果`type`值是`pie`，则创建一个金牌的单一饼状系列，颜色逐渐变化并带有数据标签。
- en: 'So, when the `gold_chart` page is first loaded, a column chart is created and
    displayed. The following screenshot shows the initial column chart in portrait
    mode:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当`gold_chart`页面首次加载时，会创建并显示一个柱状图。以下截图显示了初始的纵向模式柱状图：
- en: '![Plotting a Highcharts chart on a mobile device](img/7451OS_12_08.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![在移动设备上绘制Highcharts图表](img/7451OS_12_08.jpg)'
- en: 'If we touch the legend items to display the number of silver and bronze medals,
    the chart looks like the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们触摸图例项以显示银牌和铜牌的数量，图表看起来如下截图所示：
- en: '![Plotting a Highcharts chart on a mobile device](img/7451OS_12_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![在移动设备上绘制Highcharts图表](img/7451OS_12_09.jpg)'
- en: Switching graph options with the jQuery Mobile dialog box
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery Mobile对话框切换图形选项
- en: 'The **Options** button in the top right-hand corner is only enabled if the
    current display chart is a column chart. It launches an option dialog box for
    switching stack columns and data labels. The following code is for the mobile
    page for the dialog box:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 右上角的**选项**按钮仅在当前显示的图表是柱状图时启用。它启动一个用于切换堆叠列和数据标签的选项对话框。以下代码是用于对话框的移动页面：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `<select>` markups in jQM are rendered as slider switches with the `data-role=''slider''`
    attribute and the hyperlinks are rendered as dialog buttons with the `data-role=''button''`
    attribute. The following screenshot shows the dialog page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: jQM中的`<select>`标记被渲染为具有`data-role='slider'`属性的滑块开关，而超链接被渲染为具有`data-role='button'`属性的对话框按钮。以下截图显示了对话框页面：
- en: '![Switching graph options with the jQuery Mobile dialog box](img/7451OS_12_10.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Mobile对话框切换图形选项](img/7451OS_12_10.jpg)'
- en: 'Likewise, we program the `pageinit` handler for the dialog page to initialize
    the **Update** button action:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们为对话框页面编写了`pageinit`处理程序以初始化**更新**按钮动作：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Actually, the action code for the button is very simple. Since we define the
    **Update** button with the `data-rel=''back''` attribute, as soon as we tap the
    button, the dialog box is closed and we go back to the previous page. The option
    values from the `<select>` inputs are passed to the `plotGoldChart` routine to
    redraw the current chart. The following is a screenshot with only **Show Values**
    switched on:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，按钮的动作代码非常简单。因为我们用`data-rel='back'`属性定义了**更新**按钮，所以当我们点击按钮时，对话框就会关闭，我们返回到上一页。`<select>`输入框的选项值会被传递给`plotGoldChart`例程以重新绘制当前图表。以下是一个仅开启**显示值**的截图：
- en: '![Switching graph options with the jQuery Mobile dialog box](img/7451OS_12_11.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Mobile对话框切换图形选项](img/7451OS_12_11.jpg)'
- en: 'The following screenshot shows a column chart with both stacking and data labeling
    switched on:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个同时开启了堆叠和数据标签的柱状图：
- en: '![Switching graph options with the jQuery Mobile dialog box](img/7451OS_12_12.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Mobile对话框切换图形选项](img/7451OS_12_12.jpg)'
- en: Changing the graph presentation with a swipeleft motion event
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过swipeleft手势事件更改图形展示
- en: 'Here, we enhance the experience by adding a `swipeleft` event to a chart. What
    we try to achieve is to apply a swipe motion from the right-hand side to the left-hand
    side on an existing column chart. This action switches the column chart to a pie
    chart with the same dataset, and vice versa with the swiperight motion:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过向图表添加`swipeleft`事件来增强用户体验。我们试图实现的是在现有的柱状图上从右侧向左侧施加滑动动作。这个动作将柱状图切换为具有相同数据集的饼图，反之亦然，使用`swiperight`动作：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The guard condition inside the handler is to stop redrawing the chart with
    the same presentation. The following is the view after the `swipeleft` action:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序内的守卫条件是为了停止以相同展示方式重绘图表。以下是`swipeleft`动作后的视图：
- en: '![Changing the graph presentation with a swipeleft motion event](img/7451OS_12_13.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用swipeleft动作事件更改图形展示](img/7451OS_12_13.jpg)'
- en: Switching the graph orientation with the orientationchange event
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用orientationchange事件切换图形方向
- en: 'Assume that we are viewing the column chart on a touch-phone device in the
    portrait position. If we rotate the device, the chart will resize itself but the
    scale along the *y* axis is squashed. As a result, there is less clarity when
    comparing how well each country did. To overcome that, we use another jQuery Mobile
    event, `orientationchange`, that triggers when the mobile device is rotated. Here
    is the implementation for the handler:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在横屏位置使用触摸手机设备查看柱状图。如果我们旋转设备，图表将自动调整大小，但y轴的刻度会被压缩。因此，在比较每个国家的表现时，清晰度会降低。为了克服这个问题，我们使用另一个jQuery
    Mobile事件`orientationchange`，该事件在设备旋转时触发。以下是处理程序的实现：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We recreate the chart with the `inverted` option set to `true` to swap both
    *x* and *y* axes, as well as positioning the legend in the lower-right corner
    instead. A method for the chart `load` event is also set up in the configuration.
    In the end, an inverted chart is produced, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图表的`inverted`选项设置为`true`以交换x轴和y轴，并将图例定位在右下角。在配置中还为图表的`load`事件设置了一个方法。最终，生成了一个倒置的图表，如下面的截图所示：
- en: '![Switching the graph orientation with the orientationchange event](img/7451OS_12_14.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用orientationchange事件切换图形方向](img/7451OS_12_14.jpg)'
- en: 'The following is a screenshot from a tablet device showing the gold and silver
    medals'' chart:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从平板设备上拍摄的金牌和银牌图表的截图：
- en: '![Switching the graph orientation with the orientationchange event](img/7451OS_12_15.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![使用orientationchange事件切换图形方向](img/7451OS_12_15.jpg)'
- en: The `plotGoldChart` method detects a larger display and renders the chart (using
    the `setCategories` method) with full country names instead of the country code
    from the JSON result.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotGoldChart`方法检测到更大的显示区域，并使用`setCategories`方法渲染图表（使用完整的国家名称而不是JSON结果中的国家代码）。'
- en: Drilling down for data with the point click event
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用点点击事件深入数据
- en: 'So far we have only fiddled with the top countries ordered by gold medals.
    Let''s see how we can use a Highcharts event to navigate around other charts in
    jQuery Mobile. Back with the `pageinit` handler code for `chart_page`, we declared
    the `pointEvt` variable, which is a `click` event handler shared by all the series
    in gold medal charts. The following code is for the event:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只对按金牌数量排序的前几名国家进行了调整。让我们看看我们如何使用Highcharts事件在jQuery Mobile中导航其他图表。回到`chart_page`的`pageinit`处理程序代码，我们声明了`pointEvt`变量，它是金牌图表中所有系列共享的`click`事件处理程序。以下是对该事件的代码：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This event is triggered by touching a bar in a column chart or a slice in a
    pie chart. As a result, it loads a new document page (`sport.html`) with a bar
    chart. The URL for the document page is built inside the handler with the selected
    country code and the medal color as parameters. The HTML content of the page is
    listed in the next section. The `this` keyword refers to the data point (that
    is, the country bar) being clicked. The bar chart displays the list of sports
    in which the selected country won medals, along with the medal color. The following
    screenshot shows a chart for a list of sports in which Great Britain and Northern
    Ireland won gold medals:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件由触摸柱状图中的柱或饼图中的切片触发。因此，它加载了一个新的文档页面（`sport.html`），其中包含柱状图。文档页面的URL在处理程序内部构建，使用所选国家代码和奖牌颜色作为参数。该页面的HTML内容列在下一节中。`this`关键字指的是被点击的数据点（即国家柱）。柱状图显示了所选国家赢得奖牌的体育项目列表，以及奖牌颜色。以下截图显示了英国和北爱尔兰赢得金牌的体育项目列表图：
- en: '![Drilling down for data with the point click event](img/7451OS_12_16.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用点点击事件钻取数据](img/7451OS_12_16.jpg)'
- en: Inside the new page, it uses similar code to the gold medal countries chart
    to produce the graph shown in the preceding screenshot. The only difference is
    that it is embedded with the point `click` callbacks. We will see that in the
    next section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在新页面内部，它使用与金牌国家图表类似的代码来生成前面屏幕截图所示的图表。唯一的区别是它嵌入了点`click`回调。我们将在下一节中看到。
- en: Building a dynamic content dialog with the point click event
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用点点击事件构建动态内容对话框
- en: 'Now we know which sports have achieved gold medals in the Olympics, but we
    want to further find out who the medalists are. Let''s touch the **Athletics**
    bar in the chart. A dialog box appears and presents a list of athletes in thumbnails
    along with their names, photos, and their event information, as shown in the following
    screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了哪些运动在奥运会上获得了金牌，但我们还想进一步找出获奖者是谁。让我们触摸图表中的**田径**条目。出现一个对话框，并列出运动员的缩略图、他们的名字、照片以及他们的比赛信息，如下面的屏幕截图所示：
- en: '![Building a dynamic content dialog with the point click event](img/7451OS_12_17.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用点点击事件构建动态内容对话框](img/7451OS_12_17.jpg)'
- en: 'Notice that the dialog box shown in the preceding screenshot is not a static
    HTML page. This is constructed via a point `click` event and builds the dialog
    box content dynamically from the result. The problem is that, in order to launch
    a dialog page in jQM, we need to have a button somewhere on the page to start
    from. The trick is to create a jQM hidden button and a program to invoke the click
    action from inside the event handler. The following code is the HTML (`sport.html`)
    for both the hidden button and dialog page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前一个屏幕截图显示的对话框不是静态的HTML页面。这是通过一个点`click`事件构建的，并从结果动态构建对话框内容。问题是，为了在jQM中启动对话框页面，我们需要在页面上某个地方有一个按钮来开始。技巧是创建一个jQM隐藏按钮和一个程序，从事件处理器内部调用点击动作。以下代码是隐藏按钮和对话框页面的HTML（`sport.html`）：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is the implementation of the `click` handler for the sports chart:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对体育图表的`click`处理器的实现：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'First, we assemble the title for the dialog page ready to launch. Then, we
    trigger an action click to the hidden button with the call as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为即将发布的对话框页面准备标题。然后，我们触发一个动作点击到隐藏按钮，调用如下：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This in turn generates a click event to launch the dialog page. Then, we issue
    an Ajax query for the list of medalists with the current selected country, medal
    color, and sport as the filters. The server page, `olympic.php`, contains the
    Olympic result of each nation. It sorts the result according to the URL parameters
    and formats the ordered list in JSON format. We then convert each item from the
    JSON result and insert them into the `<ul>` list, `atheletes_list`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这反过来又生成一个点击事件来启动对话框页面。然后，我们发出一个Ajax查询，获取当前选定国家、奖牌颜色和运动的获奖者列表。服务器页面`olympic.php`包含每个国家的奥运结果。它根据URL参数对结果进行排序，并以JSON格式格式化排序后的列表。然后我们将JSON结果中的每个项目转换为并插入到`<ul>`列表`atheletes_list`中。
- en: Applying the gesturechange (pinch actions) event to a pie chart
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将手势变化（捏合动作）事件应用于饼图
- en: So far, we have only explored actions involving a single touch point. Our next
    goal is to learn how to apply more advanced action events with multi-touch. One
    of the most common actions is the pinch-in/out for zooming out/in respectively.
    The Safari browser for iOS supports this motion with the `gesturestart`, `gesturechange`,
    and `gestureend` events. Whenever there are two or more fingers touching the screen,
    the `gesturestart` event is fired. Then, the `gesturechange` event is triggered
    when the fingers are moved on the screen. When the fingers leave the screen, the
    `gestureend` event is generated. In returning control to the event handler, if
    the action is recognized, a certain property in the event object is updated. For
    instance, the `scale` property in the event object is set to larger than 1.0 for
    pinch-out and less than 1.0 for pinch-in. For the `GestureEvent` class reference,
    please see [https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只探索了涉及单个触摸点的动作。我们的下一个目标是学习如何使用多指应用更高级的动作事件。最常见的一种动作是捏合放大/缩小。iOS 的 Safari
    浏览器通过 `gesturestart`、`gesturechange` 和 `gestureend` 事件支持这种动作。当有两个或更多手指触摸屏幕时，会触发
    `gesturestart` 事件。然后，当手指在屏幕上移动时，会触发 `gesturechange` 事件。当手指离开屏幕时，会生成 `gestureend`
    事件。在将控制权返回给事件处理器时，如果动作被识别，事件对象中的某个属性将被更新。例如，事件对象中的 `scale` 属性在捏合放大时设置为大于 1.0，在捏合缩小时设置为小于
    1.0。有关 `GestureEvent` 类的参考，请参阅 [https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html](https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)。
- en: 'In this section, we will apply the pinch motions to a pie chart. For the pinch-out
    action, we turn the pie chart into a doughnut chart with extra information on
    the outer ring—and vice versa for pinch-in, turning the doughnut chart back to
    a pie chart. First of all, let''s launch a new chart, **Top 10 countries by medals**,
    the second item from the front menu. The following screenshot is the output of
    the chart:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将捏合动作应用于饼图。对于捏合放大的动作，我们将饼图转换为带有额外信息的环形图——反之亦然，对于捏合缩小的动作，将环形图转换回饼图。首先，让我们启动一个新的图表，**按奖牌数量排名前10的国家**，这是前端菜单的第二项。以下截图是图表的输出：
- en: '![Applying the gesturechange (pinch actions) event to a pie chart](img/7451OS_12_18.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![将 gesturechange（捏合动作）事件应用于饼图](img/7451OS_12_18.jpg)'
- en: 'When we perform a pinch-out action, the chart is redrawn as shown in the following
    screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行捏合放大的动作时，图表将重新绘制，如下面的截图所示：
- en: '![Applying the gesturechange (pinch actions) event to a pie chart](img/7451OS_12_19.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![将 gesturechange（捏合动作）事件应用于饼图](img/7451OS_12_19.jpg)'
- en: 'The outer ring shows the ratio of each color medal for each country. Moreover,
    the original pie chart data labels move inwards to make space for the outer ring.
    Let''s see how the `gesturechange` event is implemented. The following is the
    code inside the `pageinit` handler:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 外环显示了每个国家每种颜色奖牌的比例。此外，原始饼图的数据标签向内移动，为外环腾出空间。让我们看看 `gesturechange` 事件是如何实现的。以下是在
    `pageinit` 处理器内部的代码：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We bind the gesture event to the chart container. This event handler is called
    whenever there is a multi-touch gesture made on the screen, such as a pinch or
    rotate motion. In order to make sure this is a pinch action, we need to look into
    the original event generated by the browser that is wrapped by the jQuery layer.
    We will examine whether the `scale` property has been set and decide whether it
    is pinch-in or pinch-out, then we will recreate the pie or doughnut chart if necessary.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将手势事件绑定到图表容器。每当在屏幕上执行多指手势操作时，例如捏合或旋转动作，都会调用此事件处理器。为了确保这是一个捏合动作，我们需要查看由 jQuery
    层包装的浏览器生成的原始事件。我们将检查是否设置了 `scale` 属性，并决定它是捏合放大还是缩小，然后根据需要重新创建饼图或环形图。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The goal of this chapter was to deploy Highcharts graphs on mobile touch devices.
    To do that, we used a mobile web development framework, jQuery Mobile. We worked
    through a very brief introduction and the concepts of the framework. We then examined
    how to integrate Highcharts with jQuery Mobile.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是在移动触摸设备上部署 Highcharts 图表。为了做到这一点，我们使用了移动网页开发框架 jQuery Mobile。我们简要介绍了框架的概念。然后，我们探讨了如何将
    Highcharts 与 jQuery Mobile 集成。
- en: Then, we demonstrated a mobile application to show the results of the Olympic
    2012 medals table. A menu of charts was built using the jQuery Mobile dialog page,
    and then we showed how to use the single-touch, multi-touch, and orientation events
    to navigate between charts. We also showed how to use the Highcharts click event
    to build a dialog page dynamically.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们演示了一个移动应用程序，以展示 2012 年奥运会的奖牌榜结果。我们使用 jQuery Mobile 对话页面构建了一个图表菜单，然后展示了如何使用单点触控、多点触控和方向事件在图表之间导航。我们还展示了如何使用
    Highcharts 的点击事件动态构建对话页面。
- en: In the next chapter, we will learn how to apply Highcharts with ExtJs, a very
    powerful and popular **Rich Internet Application** (**RIA**) framework for building
    a desktop-style application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将 Highcharts 与 ExtJs 结合使用，这是一个非常强大且流行的 **富互联网应用** (**RIA**) 框架，用于构建桌面风格的应用程序。
