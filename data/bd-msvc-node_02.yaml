- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Exploring the Core Principles of Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索微服务的核心原则
- en: '**Microservices** is an architectural style that aims to develop software systems
    as a collection of small, loosely coupled, and independently deployable services.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务**是一种旨在将软件系统开发为一系列小型、松散耦合且可独立部署的服务架构风格。'
- en: We’ll start this chapter with an exploration of the core principles of microservices.
    To learn to think in microservices, you need to understand the core principles
    and mindset behind this architectural style. Thinking in microservices is a shift
    from traditional monolithic thinking. It requires a mindset focused on breaking
    down complex systems into smaller, manageable parts and promoting independence
    and flexibility among teams. You should embrace the principles of microservices
    and continuously refine your understanding through practical experience and ongoing
    learning.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，探索微服务的核心原则。为了学会以微服务的方式思考，你需要理解这种架构风格背后的核心原则和心态。以微服务的方式思考是从传统的单体思维模式转变。它需要一种将复杂系统分解成更小、更易于管理的部分，并在团队中促进独立性和灵活性的心态。你应该接受微服务的原则，并通过实践经验持续深化你的理解。
- en: By the end of this chapter, you will have learned the core principles of microservices
    and how to apply them in your everyday work.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习到微服务的核心原则以及如何在日常工作中应用它们。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Overview of the core principles of microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务核心原则概述
- en: Understanding the fundamentals and identifying business capabilities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解基础并识别业务能力
- en: Defining service contracts and decentralizing decision making
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义服务合约和去中心化决策
- en: Prioritizing autonomy and ownership and designing for resilience
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先考虑自主性和所有权以及设计弹性
- en: Implementing communication strategies and ensuring scalability
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施通信策略和确保可扩展性
- en: Implementing observability and continuously learning and improving
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施可观察性和持续学习和改进
- en: Overview of the core principles of microservices
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务核心原则概述
- en: In this section, we’re going learn about the core principles of microservices.
    Microservices are organized around specific business capabilities and communicate
    with one another through well-defined **application programming interfaces** (**APIs**).
    The core principles of microservices revolve around autonomy, bounded context,
    decentralization, and resilience.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习微服务的核心原则。微服务围绕特定的业务能力组织，并通过定义良好的**应用程序编程接口**（**APIs**）相互通信。微服务的核心原则围绕自主性、边界上下文、去中心化和弹性。
- en: 'Let’s explore each of these principles in more detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这些原则：
- en: '**Autonomy**: Each microservice within a system is designed to be autonomous.
    It means that each service can be developed, deployed, and scaled independently
    without relying on other services. Autonomy allows development teams to work independently,
    choose appropriate technologies, and make decisions regarding the service implementation.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主性**：系统中的每个微服务都被设计成是自主的。这意味着每个服务可以独立开发、部署和扩展，而不依赖于其他服务。自主性允许开发团队独立工作，选择适当的技术，并就服务实现做出决策。'
- en: '**Bounded context**: Bounded context refers to the concept of defining clear
    boundaries and responsibilities for each microservice. Each service should have
    a specific business domain or functionality it focuses on. By defining these boundaries,
    the services can be developed and maintained independently, reducing dependencies
    and complexity.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界上下文**：边界上下文指的是为每个微服务定义清晰的边界和责任的概念。每个服务都应该有一个特定的业务领域或它所关注的特定功能。通过定义这些边界，服务可以独立开发和维护，减少依赖性和复杂性。'
- en: '**Decentralization**: Microservices promote decentralization by distributing
    the system’s functionality across multiple services. Rather than building a monolithic
    application, microservices enable breaking down the system into smaller, manageable
    components. This distribution of functionality allows teams to develop and deploy
    services independently, enabling faster development and deployment cycles.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去中心化**：微服务通过将系统的功能分布到多个服务中，促进了去中心化。而不是构建一个单体应用，微服务允许将系统分解成更小、更易于管理的组件。这种功能分布允许团队独立开发和部署服务，从而实现更快的开发和部署周期。'
- en: '**Resilience**: Resilience is a crucial principle of microservices, as failures
    in a distributed system are inevitable. Microservices are designed to handle failures
    gracefully and recover from them without affecting the overall system. Services
    are expected to be fault-tolerant, and failures are isolated within the affected
    service, minimizing the impact on other services.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：弹性是微服务的一个关键原则，因为分布式系统中的故障是不可避免的。微服务被设计成优雅地处理故障并从中恢复，而不会影响整个系统。服务应具有容错性，故障应被隔离在受影响的服务内，以最小化对其他服务的影响。'
- en: 'Some additional principles and best practices associated with microservices
    include the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与微服务相关的一些额外原则和最佳实践包括以下内容：
- en: '**Single responsibility**: Each microservice should have a single responsibility
    or do one thing well. This principle helps in keeping services focused and manageable.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一职责**：每个微服务应该有一个单一职责或做好一件事。这个原则有助于保持服务专注且易于管理。'
- en: '**Communication via APIs**: Microservices communicate with one another through
    well-defined APIs, typically using lightweight protocols such as **representational
    state transfer** (**REST**) or messaging systems such as RabbitMQ or Apache Kafka.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过API进行通信**：微服务通过定义良好的API相互通信，通常使用轻量级协议，如**表示状态转移**（**REST**）或消息系统，如RabbitMQ或Apache
    Kafka。'
- en: '**Data management**: Each microservice should have its own database or data
    store, keeping data private to that service. This ensures loose coupling between
    services and prevents data access complexities.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据管理**：每个微服务应该有自己的数据库或数据存储，保持数据对该服务的私有性。这确保了服务之间的松散耦合，并防止了数据访问的复杂性。'
- en: '**Infrastructure automation**: Microservices benefit from infrastructure automation
    practices such as **continuous integration/continuous deployment** (**CI/CD**),
    containerization, and orchestration tools such as Docker and Kubernetes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施自动化**：微服务受益于基础设施自动化实践，例如**持续集成/持续部署**（**CI/CD**）、容器化以及Docker和Kubernetes等编排工具。'
- en: '**Monitoring and observability**: Monitoring and observability are essential
    for microservices to gain insights into the system’s performance, health, and
    issues. Logging, metrics, and distributed tracing are key tools to achieve observability
    in a microservices architecture.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和可观察性**：监控和可观察性对于微服务深入了解系统的性能、健康状况和问题至关重要。日志、指标和分布式跟踪是实现微服务架构可观察性的关键工具。'
- en: '**Evolutionary design**: Microservices should be designed with the expectation
    of change. The architecture should be flexible enough to accommodate new features,
    scale, and evolving business requirements without disrupting other services.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**演化设计**：微服务应该以变化为预期进行设计。架构应该足够灵活，能够适应新功能、扩展和不断发展的业务需求，而不会干扰其他服务。'
- en: Understanding these principles is of great value for doing good work with microservices.
    These principles help you a lot to find a solution for every problem while you
    don’t waste time using old methodologies. With microservices, you will always
    do a great job, you can finish work on time, and debugging is so much easier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些原则对于使用微服务做好工作非常有价值。这些原则在您不浪费时间使用旧方法的同时，帮助您找到每个问题的解决方案。使用微服务，您将始终能做好工作，可以按时完成工作，调试也变得容易得多。
- en: '*Figure 2**.1* explains the core principles of microservices:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.1* 解释了微服务的核心原则：'
- en: '![Figure 2.1: Core principles of microservices](img/B14980_02_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1：微服务的核心原则](img/B14980_02_01.jpg)'
- en: 'Figure 2.1: Core principles of microservices'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：微服务的核心原则
- en: By adhering to these core principles, development teams can create scalable,
    modular, and maintainable software systems using the microservices architectural
    style.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些核心原则，开发团队可以使用微服务架构风格创建可扩展、模块化和可维护的软件系统。
- en: Now that we have an understanding of the core principles of microservices, let’s
    move on to their fundamentals and business capabilities in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了微服务的核心原则，接下来让我们进入下一节，探讨其基础和业务能力。
- en: Understanding the fundamentals and identifying business capabilities
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解基础和识别业务能力
- en: Understanding the fundamentals and identifying the business capabilities of
    microservices are crucial steps in designing an effective microservices architecture.
    It involves analyzing the application’s requirements, breaking down the system
    into smaller functional components, and identifying the individual business capabilities
    that each microservice will encapsulate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 理解基础并识别微服务的业务能力是设计有效微服务架构的关键步骤。这涉及到分析应用程序的需求，将系统分解成更小的功能组件，并识别每个微服务将封装的个别业务能力。
- en: 'Here are the key steps to understanding the fundamentals and identifying the
    business capabilities of microservices:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是理解基础并识别微服务业务能力的要点步骤：
- en: '**Domain-driven design** (**DDD**): DDD is an approach that emphasizes modeling
    the domain (business problem) in the application’s design. It involves collaborating
    with domain experts and stakeholders to gain a deep understanding of the business
    requirements, rules, and processes.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域驱动设计（DDD**）: DDD是一种强调在应用程序设计中建模领域（业务问题）的方法。它涉及与领域专家和利益相关者合作，以深入了解业务需求、规则和流程。'
- en: '**Decomposition of monolithic systems**: If you are migrating from a monolithic
    architecture to microservices, you will need to analyze the monolithic application’s
    functionalities and break it down into smaller functional components. Each component
    can then potentially become a microservice.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单体系统分解**: 如果您正在从单体架构迁移到微服务，您需要分析单体应用程序的功能，并将其分解成更小的功能组件。每个组件随后可能成为潜在的微服务。'
- en: '**Bounded contexts**: In DDD, bounded contexts define clear boundaries around
    specific business capabilities. You will need to identify the bounded contexts
    in your application and consider them as candidates for microservices.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界上下文**: 在领域驱动设计（DDD）中，边界上下文定义了特定业务能力的清晰边界。您需要识别应用程序中的边界上下文，并将它们视为微服务的候选者。'
- en: '**Identification of business capabilities**: Within each bounded context, you
    should identify the core business capabilities that need to be handled by microservices.
    These capabilities represent specific functionalities or services that microservices
    will provide.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务能力识别**: 在每个边界上下文中，您应该识别需要由微服务处理的核心理念业务能力。这些能力代表微服务将提供的具体功能或服务。'
- en: '**Independence and autonomy**: You must ensure that each microservice has a
    clear and independent responsibility, encapsulating a single business capability.
    This autonomy allows each service to be developed, deployed, and scaled independently.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立性和自主性**: 您必须确保每个微服务都有一个明确且独立的职责，封装单个业务能力。这种自主性允许每个服务独立开发、部署和扩展。'
- en: '**Loose coupling**: Microservices should have minimal dependencies on other
    services to achieve loose coupling. You need to identify the relationships and
    dependencies between different business capabilities and design services accordingly.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松耦合**: 微服务应与其他服务保持最小依赖，以实现松耦合。您需要识别不同业务能力之间的关系和依赖，并据此设计服务。'
- en: '**Team ownership**: You must assign ownership of each microservice to a specific
    team. Teams should be cross functional and include all the skills necessary to
    develop, deploy, and maintain the microservice.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队所有权**: 您必须将每个微服务的所有权分配给特定的团队。团队应该是跨职能的，并包括开发、部署和维护微服务所需的所有技能。'
- en: '**API design**: You should define clear and well-documented APIs for each microservice,
    specifying how other services or clients can interact with the capabilities it
    offers.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API设计**: 您应该为每个微服务定义清晰且文档齐全的API，指定其他服务或客户端如何与其提供的功能交互。'
- en: '**Shared libraries and components**: You need to identify common functionality
    or shared components that can be used across multiple microservices to promote
    code reuse and consistency.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享库和组件**: 您需要识别可以在多个微服务之间使用的通用功能或共享组件，以促进代码重用和一致性。'
- en: '**Scalability considerations**: You should analyze the scalability requirements
    of each business capability to determine if it should be implemented as a separate
    microservice. Some capabilities may have higher demands and benefit from being
    independently scalable.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性考虑**: 您应该分析每个业务能力的可扩展性需求，以确定是否应该将其作为单独的微服务实现。某些能力可能有更高的需求，并从独立可扩展性中受益。'
- en: '**Data management**: You must consider the data needs of each business capability
    and decide whether each microservice will have its own database or if data should
    be shared between services through events or other mechanisms.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据管理**：您必须考虑每个业务能力的数据需求，并决定每个微服务是否将拥有自己的数据库，或者数据是否应该通过事件或其他机制在服务之间共享。'
- en: Understanding the fundamentals and identifying business capabilities are crucial
    steps in building a successful microservices architecture. It involves gaining
    a deep understanding of the application’s requirements and breaking down the system
    into smaller, manageable components.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理解基本原理和识别业务能力是构建成功的微服务架构的关键步骤。这涉及到对应用程序需求的深入理解，并将系统分解成更小、更易于管理的组件。
- en: By understanding the fundamental aspects and identifying the business capabilities
    of microservices, you can design a scalable, maintainable, and resilient microservices
    architecture that aligns with the specific needs of your application and supports
    the agility and flexibility required for modern software development.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解基本方面并识别微服务的业务能力，您可以设计一个可扩展的、可维护的、具有弹性的微服务架构，该架构与您应用程序的具体需求相一致，并支持现代软件开发所需的敏捷性和灵活性。
- en: In the next section, we’ll learn about defining service contracts and decentralized
    decision making.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何定义服务合同和去中心化决策。
- en: Defining service contracts and decentralized decision making
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义服务合同和去中心化决策
- en: Service contracts in microservices refer to the agreements and expectations
    that services establish with one another. Meanwhile, decentralized decision making
    is a fundamental principle of microservices architecture that empowers individual
    development teams to make decisions independently. Let’s learn about these concepts
    in detail. We’ll start with service contracts in microservices.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务中的服务合同指的是服务之间建立的和期望的协议。同时，去中心化决策是微服务架构的一个基本原则，它赋予各个开发团队独立决策的能力。让我们详细了解这些概念。我们将从微服务中的服务合同开始。
- en: Service contracts in microservices
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的服务合同
- en: '**Service contracts in microservices** refer to the agreements and expectations
    that services establish with one another. They define how different microservices
    interact, communicate, and exchange data. Service contracts play a crucial role
    in ensuring that microservices can work together seamlessly, even when they are
    developed and deployed independently.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的服务合同**指的是服务之间建立的和期望的协议。它们定义了不同的微服务如何交互、通信和交换数据。服务合同在确保微服务可以无缝协作中发挥着至关重要的作用，即使它们是独立开发和部署的。'
- en: 'The common types of service contracts include the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的服务合同类型包括以下几种：
- en: '**API contracts**: API contracts define the interfaces and data formats that
    microservices use to communicate. They include details about the request and response
    payloads, endpoints, authentication requirements, and supported operations.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 合同**：API 合同定义了微服务用于通信的接口和数据格式。它们包括有关请求和响应有效负载、端点、身份验证要求和支持的操作的详细信息。'
- en: '**Behavioral contracts**: Behavioral contracts specify the expected behavior
    and interactions of a microservice. They may include rules about error handling,
    response times, and business logic.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为合同**：行为合同指定了微服务的预期行为和交互。它们可能包括关于错误处理、响应时间和业务逻辑的规则。'
- en: '**Versioning contracts**: As microservices evolve, it is essential to have
    versioning contracts that allow backward compatibility. They ensure that changes
    to a microservice’s contract do not break the existing consumers.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制合同**：随着微服务的演变，拥有允许向后兼容的版本控制合同是至关重要的。它们确保对微服务合同的更改不会破坏现有的消费者。'
- en: '**Data contracts**: Data contracts outline the structure and validation rules
    for the data exchanged between microservices. They ensure that the services understand
    each other’s data format and avoid data inconsistencies.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据合同**：数据合同概述了微服务之间交换数据的结构和验证规则。它们确保服务理解彼此的数据格式，避免数据不一致。'
- en: '**Security contracts**: Security contracts define the security requirements
    and constraints for interacting with a microservice. They include authentication
    and authorization mechanisms to protect sensitive data and resources.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全合同**：安全合同定义了与微服务交互的安全要求和约束。它们包括身份验证和授权机制，以保护敏感数据和资源。'
- en: '**Service-level agreements (SLAs)**: SLAs specify the expected levels of service
    performance, availability, and response times between microservices.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务级别协议（SLA）**：SLA规定了微服务之间预期的服务性能、可用性和响应时间水平。'
- en: These are the most common service contracts used in microservices architecture.
    It enables the developers to guide a project better. In the context of microservices
    architecture, service contracts refer to the well-defined agreements and specifications
    that govern how microservices communicate with each other. These contracts define
    the input and output formats, protocols, data types, and error-handling mechanisms
    that services adhere to when interacting with one another. Clear and well-defined
    service contracts are crucial for ensuring seamless communication and collaboration
    between microservices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在微服务架构中最常用的服务合同。它使开发者能够更好地引导项目。在微服务架构的背景下，服务合同指的是明确规定的协议和规范，它们规定了微服务之间如何相互通信。这些合同定义了服务相互交互时遵循的输入和输出格式、协议、数据类型和错误处理机制。清晰和明确的服务合同对于确保微服务之间无缝通信和协作至关重要。
- en: '*Figure 2**.2* shows the service contracts in a graphical manner:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.2* 以图形方式展示了服务合同：'
- en: '![Figure 2.2: Service contracts](img/B14980_02_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2：服务合同](img/B14980_02_02.jpg)'
- en: 'Figure 2.2: Service contracts'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：服务合同
- en: By adhering to well-defined service contracts, microservices can communicate
    effectively, enabling a modular, scalable, and maintainable system. These contracts
    provide a clear interface for each microservice, allowing them to evolve independently
    without disrupting other parts of the system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵守明确的服务合同，微服务可以有效地进行通信，从而实现模块化、可扩展和可维护的系统。这些合同为每个微服务提供了一个清晰的接口，允许它们独立演变，而不会干扰系统的其他部分。
- en: With the most common service contracts under our belt, let’s now take a look
    at the principle of decentralizing decision making in a microservices architecture.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了最常用的服务合同之后，我们现在来看看微服务架构中去中心化决策的原则。
- en: Decentralized decision making in microservices
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务中的去中心化决策
- en: '**Decentralizing decision making** is a fundamental principle of microservices
    architecture that empowers individual development teams to make decisions independently.
    This approach promotes agility, autonomy, and faster development cycles.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**去中心化决策**是微服务架构的一个基本原则，它赋予各个开发团队独立做决策的能力。这种方法促进了敏捷性、自主性和更快的开发周期。'
- en: 'The key aspects of decentralized decision making are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化决策的关键方面如下：
- en: '**Autonomous teams**: Each microservice is owned and managed by a dedicated
    team that has full control over its development, deployment, and operations.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主团队**：每个微服务都由一个专门的团队拥有和管理，该团队对其开发、部署和运营拥有完全控制权。'
- en: '**Domain-oriented teams**: Teams are organized around specific business domains
    or capabilities, giving them deep expertise and a clear understanding of the microservices
    they are responsible for.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向领域的团队**：团队围绕特定的业务领域或能力组织，使他们拥有深厚的专业知识和对其负责的微服务的清晰理解。'
- en: '**Technology stack choice**: Teams have the freedom to choose their preferred
    technology stack, programming languages, frameworks, and tools that best suit
    the needs of their microservices.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术栈选择**：团队有权选择最适合其微服务需求的技术栈、编程语言、框架和工具。'
- en: '**Service independence**: Decentralization ensures that each microservice can
    evolve independently without impacting other services, reducing the risk of interdependencies
    and bottlenecks.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务独立性**：去中心化确保每个微服务可以独立演变，而不会影响其他服务，从而降低了相互依赖和瓶颈的风险。'
- en: '**Fast feedback loops**: Short feedback loops allow teams to iterate quickly
    and make informed decisions based on real-time data and user feedback.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速反馈循环**：短的反馈循环允许团队快速迭代，并基于实时数据和用户反馈做出明智的决策。'
- en: '**Collaboration and communication**: While teams operate autonomously, collaboration
    and communication between teams are vital for shared understanding and avoiding
    duplicated efforts.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作和沟通**：虽然团队是自主运作的，但团队之间的协作和沟通对于共享理解和避免重复工作至关重要。'
- en: '**Consistency through contracts**: Service contracts act as a mechanism to
    ensure that services can interact cohesively despite their autonomy.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过合同保证一致性**：服务合同作为一个机制，确保服务能够在保持自主性的同时协同工作。'
- en: Decentralized decision making enables microservices to scale effectively, fosters
    innovation, and enables teams to respond rapidly to changing requirements. However,
    it requires strong communication, coordination, and a shared vision across the
    organization to ensure that the overall architecture aligns with the business
    goals.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化决策使微服务能够有效地扩展，促进创新，并使团队能够快速响应变化的需求。然而，它需要组织内部有强大的沟通、协调和共同愿景，以确保整体架构与业务目标保持一致。
- en: '*Figure 2**.3* shows the diagram of a decentralized architecture:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.3* 展示了去中心化架构的图示：'
- en: '![Figure 2.3: Decentralized architecture](img/B14980_02_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：去中心化架构](img/B14980_02_03.jpg)'
- en: 'Figure 2.3: Decentralized architecture'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：去中心化架构
- en: Defining service contracts and decentralizing decision making are key principles
    in microservices architecture that promote effective communication and agility.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 定义服务合同和去中心化决策是微服务架构中的关键原则，这些原则促进了有效的沟通和敏捷性。
- en: By defining service contracts and decentralizing decision making, microservices
    architecture can achieve effective communication, adaptability, and responsiveness,
    ensuring that the system evolves gracefully to meet changing business needs and
    technological advancements.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义服务合同和去中心化决策，微服务架构可以实现有效的沟通、适应性和响应性，确保系统能够优雅地适应不断变化的业务需求和科技进步。
- en: In the next section, we’ll see how to prioritize autonomy and ownership and
    how to design microservices for resilience.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何优先考虑自主性和所有权，以及如何设计具有弹性的微服务。
- en: Prioritizing autonomy and ownership and designing for resilience
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优先考虑自主性和所有权，并设计具有弹性
- en: Prioritizing autonomy and ownership and designing for resilience are two essential
    principles in microservices architecture that contribute to the success and effectiveness
    of the system. Let’s explore these principles in detail.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 优先考虑自主性和所有权，并设计具有弹性是微服务架构中的两个基本原则，有助于系统的成功和有效性。让我们详细探讨这些原则。
- en: Prioritizing autonomy and ownership
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先考虑自主性和所有权
- en: '**Autonomy and ownership** in microservices refer to empowering individual
    development teams with the responsibility for designing, developing, deploying,
    and maintaining their respective microservices. This principle allows teams to
    have control over their microservices and fosters a sense of ownership and accountability.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的自主性和所有权**指的是赋予个人开发团队设计、开发、部署和维护各自微服务的责任。这一原则使团队能够控制其微服务，并培养所有权和责任感。'
- en: 'Some key aspects of prioritizing autonomy and ownership include the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 优先考虑自主性和所有权的一些关键方面包括以下内容：
- en: '**Domain-oriented teams**: Organize teams around specific business domains
    or capabilities, enabling them to have deep expertise in the areas they are responsible
    for.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域导向团队**：围绕特定的业务领域或能力组织团队，使他们能够对其负责的领域拥有深入的专业知识。'
- en: '**End-to-end responsibility**: Development teams take full ownership of the
    entire lifecycle of their microservices, from development to production. This
    includes monitoring, troubleshooting, and scaling.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端责任**：开发团队对其微服务的整个生命周期负责，从开发到生产。这包括监控、故障排除和扩展。'
- en: '**Technology freedom**: Give teams the freedom to choose their preferred technology
    stack, tools, and development practices that best suit their microservices’ requirements.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术自由**：给予团队选择最适合其微服务需求的偏好技术栈、工具和开发实践的自由。'
- en: '**Fast iteration**: Empower teams to iterate quickly by removing bureaucratic
    hurdles and providing a streamlined development and deployment process.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速迭代**：通过消除官僚障碍并提供简化的开发和部署流程，赋予团队快速迭代的权力。'
- en: '**Cross-functional teams**: Teams should be cross functional, including developers,
    testers, operations, and other necessary roles to ensure self-sufficiency.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨职能团队**：团队应该是跨职能的，包括开发者、测试员、运维和其他必要的角色，以确保自给自足。'
- en: These key concepts for autonomy and ownership develop an entrepreneurial spirit
    in specialists, and every specialist, after mastering these concepts, will be
    better and more autonomous at work while considering the product as their own.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关于自主性和所有权的核心概念在专业人士中培养了一种创业精神，每个专业人士在掌握这些概念之后，在工作中将更加出色和自主，并将产品视为自己的。
- en: '*Figure 2**.4* depicts an autonomous architecture:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.4* 描述了自主架构：'
- en: '![Figure 2.4: Autonomous architecture](img/B14980_02_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4：自主架构](img/B14980_02_04.jpg)'
- en: 'Figure 2.4: Autonomous architecture'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：自主架构
- en: In *Figure 2**.4*, **Payments** and **Services** are microservices that rely
    on autonomous architecture while connecting to their respective database.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图2.4*中，**支付**和**服务**是依赖于自主架构的微服务，同时连接到它们各自的数据库。
- en: By prioritizing autonomy and ownership, microservices architecture can achieve
    greater agility, faster time-to-market, and improved innovation. Teams can respond
    quickly to business changes and make data-driven decisions for their microservices.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过优先考虑自主性和所有权，微服务架构可以实现更高的敏捷性、更快的上市时间和改进的创新。团队可以快速响应业务变化，并为他们的微服务做出数据驱动的决策。
- en: Designing for resilience
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计弹性
- en: '**Designing for resilience** in microservices focuses on building a system
    that can withstand and recover gracefully from failures, ensuring high availability
    and fault tolerance. In a distributed microservices environment, failures are
    inevitable, so resilience is critical.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**为微服务设计弹性**着重于构建一个能够承受并优雅地从故障中恢复的系统，确保高可用性和容错性。在分布式微服务环境中，故障是不可避免的，因此弹性至关重要。'
- en: 'Some key aspects of designing for resilience include the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 设计弹性的关键方面包括以下内容：
- en: '**Redundancy**: Deploy multiple instances of critical microservices to ensure
    redundancy and avoid single points of failure.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余**：部署关键微服务的多个实例，以确保冗余并避免单点故障。'
- en: '**Circuit breakers**: Implement circuit breakers to isolate failing services
    and prevent cascading failures across the system.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断路器**：实现断路器以隔离失败的服务，防止系统范围内的级联故障。'
- en: '**Bulkheads**: Use bulkheads to separate different parts of the system, ensuring
    that a failure in one part does not affect the entire system.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离舱**：使用隔离舱将系统的不同部分隔开，确保一个部分的故障不会影响整个系统。'
- en: '**Graceful degradation**: Design services to degrade gracefully in the face
    of high load or failures, prioritizing critical functionalities.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅降级**：设计服务以在负载过高或故障的情况下优雅降级，优先考虑关键功能。'
- en: '**Timeouts and retries**: Implement appropriate timeouts and retries for service-to-service
    communication to handle temporary network issues.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时和重试**：为服务间通信实现适当的超时和重试，以处理暂时的网络问题。'
- en: '**Distributed tracing and logging**: Use distributed tracing and centralized
    logging to gain insights into the interactions and behaviors of microservices,
    aiding in debugging and monitoring.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式跟踪和日志记录**：使用分布式跟踪和集中式日志记录来深入了解微服务的交互和行为，有助于调试和监控。'
- en: '**Chaos engineering**: Conduct controlled experiments, such as chaos engineering,
    to test the system’s resilience under real-world failure scenarios.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混沌工程**：进行受控实验，例如混沌工程，以测试系统在实际故障场景下的弹性。'
- en: By designing for resilience, microservices architecture can maintain a high
    level of availability and provide a better user experience, even in the presence
    of failures or unpredictable conditions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设计弹性，微服务架构可以保持高可用性，即使在出现故障或不可预测的情况下也能提供更好的用户体验。
- en: '*Figure 2**.5* shows the design for a resilient system:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.5*展示了弹性系统的设计：'
- en: '![Figure 2.5: Design for resilience](img/B14980_02_05.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5：弹性设计](img/B14980_02_05.jpg)'
- en: 'Figure 2.5: Design for resilience'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：弹性设计
- en: '*Figure 2**.5* describes the connection between users and services, which rely
    their function on a load balancer to retrieve information from a database. In
    this case, the system itself, with the help of a load balancer, decides which
    of the services the users should connect to in order to avoid a high load and
    malfunctioning of the system.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.5*描述了用户与服务之间的连接，这些服务依赖于负载均衡器从数据库中检索信息。在这种情况下，系统本身，在负载均衡器的帮助下，决定用户应该连接到哪个服务，以避免系统负载过高和故障。'
- en: Prioritizing autonomy and ownership and designing for resilience work hand in
    hand to create a robust, adaptive, and reliable microservices ecosystem. These
    principles help teams work efficiently, foster a culture of ownership and responsibility,
    and deliver a resilient system that meets the demands of modern software applications.
    In conclusion, prioritizing autonomy and ownership allows development teams to
    work independently and take ownership of their microservices, fostering agility
    and innovation. Designing for resilience ensures that the microservices ecosystem
    remains robust and reliable, enhancing overall performance and user satisfaction.
    By adhering to these principles, microservices architecture can deliver scalable,
    adaptable, and resilient systems that meet the demands of modern applications
    and provide a competitive edge in the market.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 优先考虑自主权和所有权，并设计具有弹性，共同创建一个强大、适应性强和可靠的微服务生态系统。这些原则有助于团队高效工作，培养所有权和责任文化，并交付一个具有弹性的系统，以满足现代软件应用的需求。总之，优先考虑自主权和所有权允许开发团队独立工作并对其微服务负责，从而促进敏捷性和创新。设计具有弹性确保微服务生态系统保持强大和可靠，从而提高整体性能和用户满意度。通过遵循这些原则，微服务架构可以提供可扩展、适应性强和具有弹性的系统，以满足现代应用的需求，并在市场上提供竞争优势。
- en: Next, we’ll explore strategies for communicating effectively and ensuring scalability.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨有效通信的策略以及确保可伸缩性的方法。
- en: Implementing communication strategies and ensuring scalability
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施通信策略和确保可伸缩性
- en: 'Implementing effective communication strategies and ensuring scalability are
    crucial aspects of microservices architecture that contribute to the seamless
    operation and growth of the system. Let’s delve into these two areas:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 实施有效的通信策略和确保可伸缩性是微服务架构的关键方面，有助于系统的无缝运行和增长。让我们深入了解这两个领域：
- en: Implementing communication strategies
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施通信策略
- en: In a microservices architecture, services need to communicate with one another
    to fulfill various functionalities. Proper communication strategies ensure that
    services can interact efficiently and reliably.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，服务需要相互通信以实现各种功能。适当的通信策略确保服务可以高效且可靠地交互。
- en: 'Some common communication patterns in microservices include the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务中的一些常见通信模式包括以下内容：
- en: '**Synchronous communication**: This involves direct request-response communication
    between microservices. It can be achieved through HTTP/HTTPS or gRPC-based APIs.
    However, it can lead to tight coupling between services and may result in cascading
    failures during high traffic.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步通信（Synchronous communication）**：这涉及微服务之间的直接请求-响应通信。它可以通过HTTP/HTTPS或基于gRPC的API实现。然而，它可能导致服务之间的紧密耦合，并在高流量期间导致级联故障。'
- en: '**Asynchronous communication**: Asynchronous communication decouples microservices,
    allowing them to work independently without waiting for responses. Message queues
    or event streaming platforms, such as Apache Kafka or RabbitMQ, facilitate asynchronous
    communication.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步通信（Asynchronous communication）**：异步通信解耦微服务，使它们能够独立工作，无需等待响应。消息队列或事件流平台，如Apache
    Kafka或RabbitMQ，促进了异步通信。'
- en: '**Event-driven architecture**: Microservices can communicate through events,
    where one service publishes events and other services subscribe to and react to
    those events. This pattern promotes loose coupling and scalability.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动架构（Event-driven architecture）**：微服务可以通过事件进行通信，其中一个服务发布事件，其他服务订阅并对这些事件做出反应。这种模式促进了松散耦合和可伸缩性。'
- en: '**API gateway**: An API gateway acts as a single entry point for clients to
    access multiple microservices. It centralizes request handling and load balancing
    and can provide additional security features.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关（API gateway）**：API网关充当客户端访问多个微服务的单一入口点。它集中处理请求和负载均衡，并提供额外的安全功能。'
- en: '**Service discovery**: Service discovery mechanisms allow microservices to
    locate and communicate with each other dynamically. This is particularly useful
    in a dynamic environment where service instances may scale up or down.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务发现（Service discovery）**：服务发现机制允许微服务动态地定位和与其他服务通信。这在服务实例可能进行扩展或缩减的动态环境中特别有用。'
- en: '**Circuit breaker**: Implement circuit breakers to prevent cascading failures
    when a service is down or experiencing high latency. It isolates the failing service
    and provides fallback responses when necessary.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断路器（Circuit breaker）**：实现断路器以防止服务宕机或出现高延迟时发生级联故障。它将失败的服务隔离开来，并在必要时提供回退响应。'
- en: Implementing effective communication strategies is a critical way for the system
    to run in a perfect manner, without errors, and to assure availability. Every
    developer should design a system that communicates with services in a perfect
    way.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 实施有效的通信策略是系统以完美方式运行、无错误并确保可用性的关键方式。每个开发者都应该设计一个以完美方式与服务通信的系统。
- en: Next, to ensure the best coordination between microservices, we will learn about
    scalability.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了确保微服务之间最佳的协调，我们将学习关于可扩展性的知识。
- en: Ensuring scalability
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保可扩展性
- en: '**Scalability** is essential to handle varying workloads and ensure that a
    system can grow to meet increasing demands.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性**对于处理不断变化的工作负载并确保系统可以增长以满足不断增长的需求至关重要。'
- en: 'Consider the following strategies for ensuring scalability in microservices:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下策略以确保微服务的可扩展性：
- en: '**Horizontal scaling**: Scale microservices horizontally by adding more instances
    of a service to distribute the load. Container orchestration platforms such as
    Kubernetes can help with dynamic scaling.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：通过添加更多服务实例来水平扩展微服务，以分散负载。Kubernetes等容器编排平台可以帮助进行动态扩展。'
- en: '**Stateless services**: Design microservices to be stateless, meaning they
    don’t store any session or client-specific data. This allows them to be easily
    replicated and scaled.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态服务**：设计微服务为无状态，这意味着它们不存储任何会话或客户端特定数据。这使得它们可以轻松复制和扩展。'
- en: '**Load balancing**: Load balancers distribute incoming traffic across multiple
    instances of a service to ensure optimal resource utilization and avoid overloading
    individual instances.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：负载均衡器将传入流量分配到服务的多个实例，以确保最佳资源利用并避免单个实例过载。'
- en: '**Shared-nothing architecture**: Aim for a shared-nothing architecture, where
    each microservice has its own dedicated resources and does not rely on shared
    databases or storage. This avoids bottlenecks and contention points.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无共享架构**：追求无共享架构，其中每个微服务都有自己的专用资源，不依赖于共享数据库或存储。这避免了瓶颈和竞争点。'
- en: '**Caching**: Implement caching for frequently accessed data to reduce the load
    on databases and improve response times.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：对频繁访问的数据实施缓存，以减少数据库负载并提高响应时间。'
- en: '**Auto-scaling**: Use auto-scaling mechanisms to automatically adjust the number
    of instances based on real-time demand, ensuring optimal resource utilization.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：使用自动扩展机制根据实时需求自动调整实例数量，确保最佳资源利用。'
- en: '**Database sharding**: For databases, consider sharding data across multiple
    nodes to distribute the load and improve database performance.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库分片**：对于数据库，考虑在多个节点上分片数据以分散负载并提高数据库性能。'
- en: With the ever-growing request by users to access web applications, it is a crucial
    requirement to develop using scalability. This will let users rely on a trusted
    and fast-growing application and leave positive system feedback.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户对访问网络应用需求的不断增长，使用可扩展性进行开发成为一个关键要求。这将使用户能够依赖一个值得信赖且快速发展的应用，并留下积极的系统反馈。
- en: '*Figure 2**.6* depicts communication via APIs:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.6* 描述了通过API进行通信：'
- en: '![Figure 2.6: Communication via APIs](img/B14980_02_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6：通过API进行通信](img/B14980_02_06.jpg)'
- en: 'Figure 2.6: Communication via APIs'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：通过API进行通信
- en: '*Figure 2**.6* shows a system developed using microservices that allows different
    kinds of users and devices to connect to microservices with the help of an API.
    This will allow users to have the best user experience while operating on a fast
    system.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.6* 展示了一个使用微服务开发的系统，该系统允许不同类型的用户和设备通过API连接到微服务。这将使用户在快速系统上获得最佳的用户体验。'
- en: '*Figure 2**.7* depicts database sharding:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.7* 描述了数据库分片：'
- en: '![Figure 2.7: Database sharding](img/B14980_02_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7：数据库分片](img/B14980_02_07.jpg)'
- en: 'Figure 2.7: Database sharding'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：数据库分片
- en: Database sharding is a great practice to develop while thinking in microservices.
    As shown in *Figure 2**.7*, every service has its own database and it displays
    its information on user request. If one service fails, the others should work
    correctly, regardless of the one that has failed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库分片是在考虑微服务时的一项优秀实践。如图2.7所示，每个服务都有自己的数据库，并在用户请求时显示其信息。如果一个服务失败，其他服务应该正常工作，而不管失败的是哪一个。
- en: By implementing efficient communication strategies and ensuring scalability,
    microservices can handle varying workloads, provide a seamless user experience,
    and easily adapt to changing demands. These principles are essential in creating
    a resilient and high-performing microservices architecture.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施高效的通信策略并确保可扩展性，微服务可以处理不同的工作负载，提供无缝的用户体验，并轻松适应不断变化的需求。这些原则对于创建弹性且高性能的微服务架构至关重要。
- en: By implementing efficient communication strategies and ensuring scalability,
    microservices can work together seamlessly, handle varying workloads, and adapt
    to changing business needs. These practices support the development of responsive,
    high-performing, and reliable microservices architectures that align with modern
    software application requirements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施高效的通信策略并确保可扩展性，微服务可以无缝协作，处理不同的工作负载，并适应不断变化的企业需求。这些实践支持开发出响应迅速、性能卓越且可靠的微服务架构，以满足现代软件应用的需求。
- en: 'To wrap up this chapter, we’ll learn about two crucial practices in microservice
    architecture: observability and continuous learning and improvement.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将了解微服务架构中的两个关键实践：可观测性和持续学习和改进。
- en: Implementing observability and continuously learning and improving
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现可观测性和持续学习和改进
- en: Implementing observability and continuously learning and improving are critical
    practices in microservices architecture to gain insights into the system’s behavior,
    monitor its health, and make data-driven decisions for ongoing enhancements. Let’s
    explore each aspect.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中实现可观测性和持续学习和改进是获取系统行为洞察、监控其健康状况以及为持续改进做出数据驱动决策的关键实践。让我们探讨每个方面。
- en: Implementing observability
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现可观测性
- en: '**Observability** in microservices refers to the ability to gain deep insights
    into the internal workings of the system through monitoring, logging, and distributed
    tracing. It helps in understanding the system’s performance, identifying bottlenecks,
    diagnosing issues, and ensuring reliability.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务中的可观测性**指的是通过监控、日志记录和分布式跟踪深入了解系统内部运作的能力。它有助于理解系统的性能、识别瓶颈、诊断问题并确保可靠性。'
- en: 'The key aspects of implementing observability include the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可观测性的关键方面包括以下内容：
- en: '**Monitoring**: Set up comprehensive monitoring systems to collect real-time
    data on key metrics such as response times, error rates, CPU and memory usage,
    and service availability.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：建立全面的监控系统以收集关键指标（如响应时间、错误率、CPU和内存使用以及服务可用性）的实时数据。'
- en: '**Logging**: Implement structured logging to capture meaningful information
    about the behavior of microservices and the flow of requests between services.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：实施结构化日志记录以捕获有关微服务行为和请求流之间流动的有意义信息。'
- en: '**Distributed tracing**: Use distributed tracing to track requests as they
    flow through multiple microservices, allowing you to identify latency and performance
    issues across service boundaries.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式跟踪**：使用分布式跟踪跟踪请求如何在多个微服务之间流动，从而允许您识别跨越服务边界的延迟和性能问题。'
- en: '**Metrics Aggregation**: Aggregate metrics and logs centrally using tools such
    as Prometheus, Grafana, ELK stack (Elasticsearch, Logstash, and Kibana), or other
    observability platforms.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标聚合**：使用Prometheus、Grafana、ELK堆栈（Elasticsearch、Logstash和Kibana）或其他可观测性平台集中聚合指标和日志。'
- en: '**Alerting and notifications**: Set up proactive alerts based on predefined
    thresholds to be notified when specific metrics or events deviate from the expected
    behavior.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报和通知**：根据预定义的阈值设置主动警报，以便在特定指标或事件偏离预期行为时收到通知。'
- en: '**Dashboards and visualization**: Create informative dashboards and visualizations
    to provide a clear overview of the system’s health and performance to both developers
    and stakeholders.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板和可视化**：创建信息丰富的仪表板和可视化，为开发人员和利益相关者提供系统健康和性能的清晰概述。'
- en: Observability plays a crucial role while programming in microservices because
    it helps developers have a 360-degree dashboard about how their application is
    being used. Also, they can apply this knowledge to improve the application, as
    explained in the following section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务编程中，可观测性发挥着至关重要的作用，因为它帮助开发者获得关于他们的应用程序如何被使用的360度仪表板。此外，他们可以将这些知识应用于改进应用程序，如以下章节所述。
- en: Continuous learning and improving
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续学习和改进
- en: '**Continuous learning and improvement** are essential for the success of a
    microservices-based application. This involves using data, feedback, and user
    insights to make informed decisions and iteratively enhance the system.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续学习和改进**对于基于微服务的应用程序的成功至关重要。这涉及到使用数据、反馈和用户见解来做出明智的决策，并迭代地增强系统。'
- en: 'The key aspects of continuous learning and improvement are as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 持续学习和改进的关键方面如下：
- en: '**Feedback loops**: Establish feedback loops to gather insights from users,
    stakeholders, and developers to understand pain points and areas of improvement.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反馈循环**：建立反馈循环，从用户、利益相关者和开发者那里收集见解，了解痛点及改进领域。'
- en: '**Data-driven decisions**: Make decisions based on empirical evidence and data
    gathered through observability. Use metrics and performance data to identify areas
    for optimization.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动决策**：基于通过可观察性收集的经验证据和数据做出决策。使用指标和性能数据来识别优化领域。'
- en: '**Retrospectives**: Conduct regular retrospectives to reflect on past iterations
    and identify what worked well and what needs improvement.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回顾**：定期进行回顾，反思过去的迭代，确定哪些做得好以及哪些需要改进。'
- en: '**Experimentation**: Encourage experimentation, such as A/B testing, to test
    new features or changes in a controlled manner and make decisions based on measurable
    outcomes.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实验**：鼓励实验，如A/B测试，以受控的方式测试新功能或变更，并根据可衡量的结果做出决策。'
- en: '**Iterative development**: Embrace an iterative development approach, allowing
    frequent releases and continuous improvement based on user feedback and business
    needs.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代开发**：采用迭代开发方法，允许频繁发布，并根据用户反馈和业务需求进行持续改进。'
- en: '**Post-mortems**: Conduct post-mortems to analyze and learn from any major
    incidents or outages, identifying root causes and preventive measures.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事后分析**：进行事后分析以分析和学习任何重大事件或故障，确定根本原因和预防措施。'
- en: '**Adaptive architecture**: Continuously assess the microservices architecture
    to ensure it aligns with evolving business requirements and technological advancements.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适应性架构**：持续评估微服务架构，以确保其与不断变化的企业需求和技术进步保持一致。'
- en: Knowing the basics of these concepts and applying them is a great way to improve
    the application. The application will be better and the user will feel happier.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些概念的基本知识并将其应用于实践是提高应用程序的绝佳方式。应用程序将变得更好，用户也会感到更快乐。
- en: '*Figure 2**.8* shows information about monitoring and observability:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.8* 展示了关于监控和可观察性的信息：'
- en: '![Figure 2.8: Monitoring and observability](img/B14980_02_08.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8：监控和可观察性](img/B14980_02_08.jpg)'
- en: 'Figure 2.8: Monitoring and observability'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：监控和可观察性
- en: By implementing observability and continuously learning and improving, microservices-based
    applications can stay resilient, reliable, and responsive to changing business
    demands. These practices foster a culture of continuous improvement, driving the
    development teams toward delivering high-quality software that meets the needs
    of users and stakeholders.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施可观察性和持续学习和改进，基于微服务的应用程序可以保持弹性、可靠，并能对不断变化的企业需求做出响应。这些实践培养了持续改进的文化，推动开发团队交付高质量的软件，满足用户和利益相关者的需求。
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned a lot of core principles of microservices.
    In particular, exploring the core principles of microservices provides valuable
    insights into the fundamental concepts that underpin this architectural approach.
    These principles aim to create a modular, scalable, and maintainable system that
    aligns with modern software development practices and business requirements.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了微服务的许多核心原则。特别是，探索微服务的核心原则为支撑这一架构方法的基本概念提供了宝贵的见解。这些原则旨在创建一个模块化、可扩展和可维护的系统，与现代软件开发实践和业务需求相一致。
- en: In conclusion, exploring the core principles of microservices enables the creation
    of a modular and adaptable system that can meet the demands of modern software
    development and support the evolving needs of businesses. By adhering to these
    principles, organizations can build scalable, resilient, and customer-centric
    applications, driving innovation and staying competitive in a dynamic market.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，探索微服务的核心原则能够创建一个模块化和适应性强的系统，以满足现代软件开发的需
- en: 'In the next chapter, we are going to learn about the fundamentals of Node.js:
    its building blocks and key concepts. We’ll also learn how to build microservices
    projects in Node.js.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Node.js的基础知识：其构建块和关键概念。我们还将学习如何在Node.js中构建微服务项目。
- en: Quiz time
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the core principles of microservices?
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务的核心原则是什么？
- en: What are the key aspects of decentralized decision making?
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分散式决策的关键方面是什么？
- en: For what is needed implementing observability and continuously learning and
    improving?
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施可观察性和持续学习和改进需要什么？
