- en: Chapter 1. Ember CLI Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Ember CLI基础
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Installing Ember CLI
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Ember CLI
- en: Creating your first project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个项目
- en: Exploring pods and the folder layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索pods和文件夹布局
- en: Asset compilation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产编译
- en: Dependency management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理
- en: Upgrading your project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级你的项目
- en: Deployment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Ember CLI is a **Node.js**-based command-line interface tool designed for application
    programming in **Ember.js**. Since its creation, this tool has become the preferred
    method to create Ember applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI是一个基于**Node.js**的命令行界面工具，专为**Ember.js**中的应用程序编程设计。自其创建以来，这个工具已成为创建Ember应用程序的首选方法。
- en: Simply put, Ember CLI makes starting a new Ember application easy. In other
    frameworks, you might need to learn **gulp** or **grunt** as your task runners.
    In Ember CLI, this is all built-in for you. Having Ember CLI in the Ember.js ecosystem
    is a game changer and makes this framework stand out above the rest.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Ember CLI使得启动新的Ember应用程序变得简单。在其他框架中，你可能需要学习**gulp**或**grunt**作为你的任务运行器。在Ember
    CLI中，这一切都为你内置了。在Ember.js生态系统中拥有Ember CLI是一个变革，使这个框架在众多框架中脱颖而出。
- en: Ember CLI handles testing, compiling, and upgrading, and even has a built-in
    web server. Ember CLI not only generates boilerplate code for you, but it also
    integrates nicely with many testing frameworks. It has a robust add-on system
    that extends the functionality well beyond its current capabilities.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI处理测试、编译和升级，甚至内置了网络服务器。Ember CLI不仅为你生成样板代码，而且与许多测试框架很好地集成。它有一个强大的插件系统，可以扩展其当前功能之外的功能。
- en: Installing Ember CLI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Ember CLI
- en: The installation of Ember CLI is essential to learning Ember and will be used
    throughout this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI的安装对于学习Ember至关重要，并将贯穿本书的始终。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before the installation of Ember CLI, we must have the **Node Package Manager**
    (**npm**) installed. `npm` is a package manager for JavaScript and is installed
    by default with Node.js.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Ember CLI之前，我们必须安装**Node包管理器**（**npm**）。`npm`是JavaScript的包管理器，默认情况下与Node.js一起安装。
- en: You must install version 0.12 or later of Node.js for Ember CLI to run. If you
    can, try to install version 4.0.0 or higher. This is the preferred version.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须安装Node.js的0.12或更高版本，以便Ember CLI可以运行。如果可能，请尝试安装4.0.0或更高版本。这是首选版本。
- en: 'Node.js is available in several major platforms including Windows, Mac, and
    Linux. There are several ways to install Node.js:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在包括Windows、Mac和Linux在内的几个主要平台上可用。安装Node.js有多种方法：
- en: '**One-click installers**: Many platforms such as Windows and Mac have this
    available'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一键安装程序**：许多平台，如Windows和Mac，都提供这种功能'
- en: '**Homebrew** or **MacPorts**: This is useful for Mac OS users'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Homebrew**或**MacPorts**：这对于Mac OS用户很有用'
- en: '**Download TAR file**: Download a TAR file of Node.js and extract'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载TAR文件**：下载Node.js的TAR文件并解压'
- en: '**Install via the Linux package management system**: Yum, apt-get, or pacman
    can be used to install on a Linux environment'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过Linux包管理系统安装**：Yum、apt-get或pacman可用于在Linux环境中安装'
- en: A one-click installer for Windows or Mac
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows或Mac的一键安装程序
- en: This method is by far the easiest. To install node, you'll need to open the
    node website at [http://nodejs.org/download](http://nodejs.org/download). Click
    on the `pkg`, `msi`, or `exe` installer for Windows or Mac. Run it after it's
    downloaded.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法到目前为止是最简单的。要安装node，你需要打开[http://nodejs.org/download](http://nodejs.org/download)的node网站。点击Windows或Mac的`pkg`、`msi`或`exe`安装程序。下载后运行它。
- en: Homebrew or MacPorts for Mac
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac的Homebrew或MacPorts
- en: 'If you already have Homebrew installed, just run the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Homebrew，只需运行以下命令：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the other hand, if you are running MacPorts, you can use the port install
    command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你正在使用MacPorts，你可以使用port install命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: MacPorts can be installed from [http://www.macports.org](http://www.macports.org).
    Homewbrew can be installed from [http://brew.sh](http://brew.sh). Both offer simple
    package management for OS X systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: MacPorts可以从[http://www.macports.org](http://www.macports.org)安装。Homebrew可以从[http://brew.sh](http://brew.sh)安装。两者都为OS
    X系统提供简单的包管理。
- en: A TAR file
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个TAR文件
- en: A TAR file is a type of archive file. To install node via a TAR, you will need
    to download the TAR file from the Node.js website and extract and install it.
    One way of doing this is to use `curl`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TAR文件是一种存档文件类型。要通过TAR安装node，你需要从Node.js网站下载TAR文件并解压和安装。一种方法是使用`curl`。
- en: 'I would only recommend this method if you are using a Linux distribution. If
    you are running on Linux, you''ll need the right tools installed to compile from
    source. On Ubuntu, you''ll need to install the build-essential and `curl` packages:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我只会推荐这种方法，如果您正在使用 Linux 发行版。如果您在 Linux 上运行，您需要安装正确的工具来从源代码编译。在 Ubuntu 上，您需要安装
    build-essential 和 `curl` 软件包：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Linux package manager
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux 软件包管理器
- en: 'All major Linux distributions offer Node.js packages. In Ubuntu, you can simply
    use `apt-get`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的 Linux 发行版都提供 Node.js 软件包。在 Ubuntu 上，您可以直接使用 `apt-get`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Fedora, you can use `yum`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fedora 上，您可以使用 `yum`：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Check with your Linux distribution to find out more details on how to install
    packages such as Node.js. Be aware that some distributions might offer outdated
    versions of Node.js. In this case, I would recommend that you use the **Node Version
    Manager** (**NVM**) installation method that will be discussed later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的 Linux 发行版以获取有关如何安装 Node.js 等软件包的更多详细信息。请注意，某些发行版可能提供过时的 Node.js 版本。在这种情况下，我建议您使用稍后将要讨论的
    **Node Version Manager** (**NVM**) 安装方法。
- en: Test installation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试安装
- en: 'To test your installation, run the `–v` command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的安装，请运行 `–v` 命令：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will show the current installed version. Keep in mind that you must run
    v0.12 or above to run Ember CLI. If possible, try to run v4.0.0 or above.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示当前安装的版本。请注意，您必须运行 v0.12 或更高版本才能运行 Ember CLI。如果可能，请尝试运行 v4.0.0 或更高版本。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The NVM is a bash script that helps manage multiple active Node.js versions.
    NVM offers a very simple command-line interface to install any version of Node.js
    without having to visit the Node.js website. It separates each installation making
    it very easy to change between versions. I would recommend most beginners on Mac
    and Linux to run this. You can download NVM at [https://github.com/creationix/nvm](https://github.com/creationix/nvm).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: NVM 是一个 bash 脚本，它可以帮助管理多个活动的 Node.js 版本。NVM 提供了一个非常简单的命令行界面，可以安装任何版本的 Node.js，而无需访问
    Node.js 网站。它将每个安装分开，使得在版本之间切换变得非常容易。我建议大多数 Mac 和 Linux 的初学者运行此脚本。您可以在 [https://github.com/creationix/nvm](https://github.com/creationix/nvm)
    下载 NVM。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll need to use `npm` to install Ember CLI. We'll install it globally with
    the `–g` option so that it can be run anywhere from the command line.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 `npm` 来安装 Ember CLI。我们将使用 `-g` 选项全局安装它，这样就可以从命令行在任何地方运行它。
- en: 'Open the command prompt and type the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并输入以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If NVM was installed, you don't need `sudo` at the start of the command.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果已安装 NVM，则命令开头不需要 `sudo`。
- en: 'After Ember CLI is installed, we''ll need to download **Bower**. Bower is a
    package manager for client-side programming and another essential component of
    Ember.js. Node.js and npm must be installed before beginning the installation
    of Bower. We''ll be using Bower to install all our client-side libraries:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ember CLI 安装完成后，我们需要下载 **Bower**。Bower 是客户端编程的包管理器，也是 Ember.js 的另一个重要组件。在开始安装
    Bower 之前，必须安装 Node.js 和 npm。我们将使用 Bower 来安装所有客户端库：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Similar to the last command, you don't need `sudo` at the start of the command
    if Node.js was installed via NVM.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与上一个命令类似，如果 Node.js 是通过 NVM 安装的，则命令开头不需要 `sudo`。
- en: 'The last step is to install **PhantomJS**. PhantomJS is a scripted headless
    browser used to automate and test web pages. It''s preferred by Ember CLI and
    needs to be installed:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是安装 **PhantomJS**。PhantomJS 是一个脚本化的无头浏览器，用于自动化和测试网页。它被 Ember CLI 所青睐，需要安装：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you are on Windows, install the Ember CLI Windows tool:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在 Windows 上，请安装 Ember CLI Windows 工具：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installed, this tool can be run in any project directory:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，此工具可以在任何项目目录中运行：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Make sure to download and install Git for Windows: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保下载并安装 Git for Windows: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
- en: Note
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Working with Windows**'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**在 Windows 上工作**'
- en: Build times on Windows can be longer then Mac or Linux. The Ember CLI Windows
    tool can help speed up and optimize build performance. Just run it in the project
    directory. You can also download it as an add-on instead.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Windows 上的构建时间可能比 Mac 或 Linux 更长。Ember CLI Windows 工具可以帮助加快和优化构建性能。只需在项目目录中运行它。您也可以将其作为插件下载。
- en: Another way to help with performance is to always run PowerShell/CMD with elevated
    privileges. Otherwise, performance issues and errors might occur. Lastly, try
    to use npm version 3 or higher. You may run into issues with long file paths with
    older versions in Windows.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种帮助提高性能的方法是始终以提升权限运行 PowerShell/CMD。否则，可能会出现性能问题和错误。最后，尽量使用 npm 版本 3 或更高版本。在
    Windows 中，较旧版本可能会遇到长文件路径问题。
- en: 'Another handy tip is as follows:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个实用的技巧如下：
- en: Tip
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Optional: Install Watchman**'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**可选：安装 Watchman**'
- en: Watchman is a file-watching service for OS X and UNIX-like operating systems.
    It was developed by Facebook and is a more effective way for Ember CLI to watch
    project changes. If it's not installed, Ember CLI will fall back to using **NodeWatcher**.
    NodeWatcher is more error-prone and has trouble observing large trees. Install
    Watchman if your platform supports it. To download and configure Watchman, visit
    [https://facebook.github.io/watchman/](https://facebook.github.io/watchman/).
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Watchman 是适用于 OS X 和类 UNIX 操作系统的文件监视服务。它由 Facebook 开发，是 Ember CLI 监视项目更改的更有效方式。如果没有安装，Ember
    CLI 将回退到使用 **NodeWatcher**。NodeWatcher 更容易出错，并且难以观察大型树。如果您的平台支持，请安装 Watchman。要下载和配置
    Watchman，请访问 [https://facebook.github.io/watchman/](https://facebook.github.io/watchman/)。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Ember CLI is written in Node.js and can be installed via npm. The tool interprets
    commands from the user to help create an Ember.js application. Each command from
    the user is looked up and then executed. Ember CLI relies on several other dependencies
    including Bower, Lodash, Broccoli, and Babel, to name a few.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 是用 Node.js 编写的，可以通过 npm 安装。该工具解释用户命令以帮助创建 Ember.js 应用程序。每个用户命令都会被查找并执行。Ember
    CLI 依赖于包括 Bower、Lodash、Broccoli 和 Babel 在内的多个其他依赖项。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's take a look at commands and aliases.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看命令和别名。
- en: Commands
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令
- en: 'Once Ember CLI is installed, we''ll have access to several commands. Here is
    a short list of some of the more important ones:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 安装后，我们将能够访问多个命令。以下是一些更重要命令的简短列表：
- en: '| Command | Purpose |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 目的 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ember` | This prints a list of available commands |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `ember` | 这将打印出可用的命令列表 |'
- en: '| `ember new <name-of-app>` | This creates a directory called `<name-of-app>`
    and creates the application structure |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `ember new <应用名称>` | 这将在 `<应用名称>` 目录中创建一个目录并创建应用程序结构 |'
- en: '| `ember init` | This creates an application in the current directory |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `ember init` | 这将在当前目录中创建一个应用程序 |'
- en: '| `ember build` | This builds the application in the `/dist` folder |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `ember build` | 这将在 `/dist` 文件夹中构建应用程序 |'
- en: '| `ember server` | This starts a web server |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `ember server` | 这将启动一个网络服务器 |'
- en: '| `ember generate <generator-name>` | This runs a generator that builds scaffolding
    for the project |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `ember generate <生成器名称>` | 这将运行一个生成器，为项目构建脚手架 |'
- en: '| `ember destroy <generator-name>` | This uninstalls the module that was created
    by the generator |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `ember destroy <生成器名称>` | 这将卸载由生成器创建的模块 |'
- en: '| `ember test` | This runs tests using **Testem** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `ember test` | 这将使用 **Testem** 运行测试 |'
- en: '| `ember install <addon-name>` | This installs add-ons |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `ember install <插件名称>` | 这将安装插件 |'
- en: Aliases
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 别名
- en: 'Keep in mind that for every command, there is an alias. These aliases make
    it a little quicker to run commands. Suppose that you wanted to build a new project.
    Normally, you would type this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对于每个命令，都有一个别名。这些别名使运行命令变得更快。假设您想构建一个新的项目。通常，您会输入以下内容：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will work and is fine. It will generate a new project and application structure.
    You can also use an alias.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将正常工作且效果良好。它将生成一个新的项目和应用程序结构。您也可以使用别名。
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here is a list of some common aliases that you can use. This is optional.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些您可以使用的一些常用别名。这是可选的。
- en: '| Command | Alias |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 别名 |'
- en: '| --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ember build` | `ember b` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `ember build` | `ember b` |'
- en: '| `ember generate` | `ember g` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `ember generate` | `ember g` |'
- en: '| `ember init` | `ember i` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `ember init` | `ember i` |'
- en: '| `ember server` | `ember s` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `ember server` | `ember s` |'
- en: '| `ember destroy` | `ember d` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `ember destroy` | `ember d` |'
- en: '| `ember test` | `ember t` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `ember test` | `ember t` |'
- en: '| `ember version` | `ember v` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `ember version` | `ember v` |'
- en: Creating your first project
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个项目
- en: In this recipe we'll create our first project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建我们的第一个项目。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll begin with the Ember CLI tool to create our first project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用 Ember CLI 工具来创建我们的第一个项目。
- en: 'Open the command prompt and type the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并输入以下命令：
- en: '[PRE13]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will create a brand new project called `my-project`. The project structure
    will have everything that we need to get started.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个全新的项目，名为 `my-project`。项目结构将包含我们开始所需的一切。
- en: 'To display this project, we can simply run the server command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示此项目，我们可以简单地运行服务器命令：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `ember server` command will start up a web server on port 4200\. You can
    access this port by opening `http://localhost:4200`. You should see the default
    **Welcome to Ember website**.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ember server` 命令将在端口 4200 上启动一个网络服务器。您可以通过打开 `http://localhost:4200` 来访问此端口。您应该看到默认的
    **欢迎使用 Ember 网站**。'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is a good idea to keep the Ember server running while developing your application.
    Ember CLI uses a tool called **LiveReload** to refresh the web browser when changes
    are made. This can be useful to see how new changes are affecting your application.
    To run LiveReload, simply type `ember server`. This will start the server with
    LiveReload.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在开发应用程序时保持 Ember 服务器运行是一个好主意。Ember CLI 使用一个名为 **LiveReload** 的工具在更改时刷新网络浏览器。这可以用来查看新更改如何影响您的应用程序。要运行
    LiveReload，只需输入 `ember server`。这将启动带有 LiveReload 的服务器。
- en: 'The server command defaults to port 4200\. You can easily change this using
    the `--port` argument:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器命令默认为端口 4200。您可以使用 `--port` 参数轻松更改此端口：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will start the server on port `1234` instead of the default 4200.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在端口 `1234` 上启动服务器，而不是默认的 4200。
- en: 'Another useful option is the `--proxy` argument. This will proxy all **Asynchronous
    JavaScript and XML** (**Ajax**) requests to the given address. Let''s say that
    we have a node server running on port `8080`. We can run the server as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个有用的选项是 `--proxy` 参数。这将把所有 **Asynchronous JavaScript and XML**（**Ajax**）请求代理到指定的地址。假设我们有一个运行在端口
    `8080` 上的节点服务器。我们可以按照以下方式运行服务器：
- en: '[PRE16]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For every Ajax request, Ember now will send these requests to the localhost
    at port `8080`.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个 Ajax 请求，Ember 现在将把这些请求发送到本地的端口 `8080`。
- en: Tip
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Keep in mind that as of Ember 2.0, **Internet Explorer** (**IE**) 8 support
    has been dropped. All modern web browsers and versions of IE after 8 work fine.
    If by chance IE 8 support is needed, Ember.js version 1.13 has extended browser
    support and should work with it.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，从 Ember 2.0 开始，**Internet Explorer**（**IE**）8 的支持已被取消。所有现代网络浏览器和 8 版本之后的
    IE 版本都能正常工作。如果需要 IE 8 的支持，Ember.js 1.13 扩展了浏览器支持，应该可以与它兼容。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ember server` command creates a **Node.js Express server**. This server
    uses LiveReload and refreshes the web page whenever any changes are made. The
    server command accepts different arguments, including `--proxy` and `--port`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ember server` 命令创建一个 **Node.js Express 服务器**。此服务器使用 LiveReload，并在任何更改时刷新网页。服务器命令接受不同的参数，包括
    `--proxy` 和 `--port`。'
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'When running the server, you have access to tests. After you start the server,
    you''ll have access to the **QUnit** interface. QUnit is a JavaScript unit testing
    framework. It is used to run your integration and acceptance tests. To access
    the interface, navigate your browser to `http://localhost:4200/tests`. This will
    show all your tests in the project. From here, you can see which tests passed
    and which failed. We will cover this in the later chapters:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行服务器时，您可以访问测试。启动服务器后，您将能够访问 **QUnit** 接口。QUnit 是一个 JavaScript 单元测试框架。它用于运行您的集成和验收测试。要访问该接口，请将浏览器导航到
    `http://localhost:4200/tests`。这将显示项目中的所有测试。从这里，您可以查看哪些测试通过，哪些失败。我们将在后面的章节中介绍这一点：
- en: '![There''s more...](img/00002.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/00002.jpeg)'
- en: Exploring pods and the folder layout
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 pods 和文件夹布局
- en: Ember CLI will create our folder structure for us. Ember.js uses the **model-view-controller**
    (**MVC**) pattern. You'll see in this recipe how the folder structure is laid
    out and how the model, controller, and view (templates) are separated from each
    other.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 将为我们创建文件夹结构。Ember.js 使用 **模型-视图-控制器**（**MVC**）模式。您将在本食谱中看到文件夹结构是如何布局的，以及模型、控制器和视图（模板）是如何相互分离的。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ember CLI relies on **ES2015** modules. This means that you can write code today
    using tomorrow's JavaScript syntax. This is accomplished via the **Ember Resolver**.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 依赖于 **ES2015** 模块。这意味着您可以使用明天的 JavaScript 语法编写今天的代码。这是通过 **Ember Resolver**
    实现的。
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**ES2015**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**ES2015**'
- en: ECMAScript 6, also known as ES2015, is the upcoming version of the ECMAScript
    programming language. ES2015 includes several new features, including template
    strings, destructuring, arrow functions, modules, and class definitions, to name
    a few. This is all available now within your Ember project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6，也称为 ES2015，是即将推出的 ECMAScript 编程语言版本。ES2015 包含几个新功能，包括模板字符串、解构、箭头函数、模块和类定义等。所有这些现在都在您的
    Ember 项目中可用。
- en: Pods
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pods
- en: An ember pod is a different type of structure that organizes your modules by
    feature instead of type. As your project grows, you may want to organize your
    project by feature to help keep things organized. The Ember Resolver will look
    for a pod structure first before it looks at the traditional structure.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Ember pod 是一种不同类型的结构，它根据功能而不是类型来组织您的模块。随着您的项目增长，您可能希望按功能组织项目以帮助保持事物有序。Ember
    解析器将首先查找 pod 结构，然后再查看传统结构。
- en: 'To set up the pod structure automatically, you can edit the `.ember-cli` file
    in the root of your project directory and add this line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动设置 pod 结构，您可以编辑项目目录根目录中的 `.ember-cli` 文件并添加以下行：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [http://www.packtpub.com](http://www.packtpub.com) 下载示例代码文件，以获取您购买的所有 Packt
    出版物的所有内容。如果您在其他地方购买了此书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: 'This will set the default structure to always use pods. When using pods, it
    is a good idea to set the location where all pods live. To do this, you will need
    to edit the `config/environment.js` file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置默认结构，使其始终使用 pods。当使用 pods 时，设置所有 pods 所在的位置是一个好主意。为此，您需要编辑 `config/environment.js`
    文件：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `podModulePrefix` property sets the POD path with the following format,
    `{appname}/{poddir}`. In the preceding example, the pod directory is now set to
    `/pods` in the `app` folder. If the location is not set, all new modules will
    be created in the `app/` folder.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`podModulePrefix` 属性设置 POD 路径，格式如下：`{appname}/{poddir}`。在先前的例子中，POD 目录现在设置为
    `app` 文件夹中的 `/pods`。如果未设置位置，所有新的模块都将创建在 `app/` 文件夹中。'
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'After a new project is created, a normal folder layout is generated. This layout
    consists of several different types of modules. Here is a short description of
    each directory:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目后，将生成一个正常的文件夹布局。此布局由几种不同类型的模块组成。以下是每个目录的简要描述：
- en: '| Directory | What it does |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 目录 | 执行的操作 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `app/adapters` | Adapters help extend logic to communicate with a backend
    data store |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `app/adapters` | 适配器帮助扩展逻辑以与后端数据存储进行通信 |'
- en: '| `app/components` | Components are used to help reuse code and must have a
    dash in their name |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `app/components` | 组件用于帮助重用代码，并且其名称中必须包含破折号 |'
- en: '| `app/helpers` | Helpers are used for HTML reuse |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `app/helpers` | Helper 用于 HTML 重用 |'
- en: '| `app/initializers` | Initializers are run first and help set up your application
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `app/initializers` | 初始化器首先运行并帮助设置您的应用程序 |'
- en: '| `app/mixins` | This is a special type of **Ember.Object** used with multiple
    inheritance |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `app/mixins` | 这是一种用于多重继承的特殊类型的 **Ember.Object** |'
- en: '| `app/routes` | Routes help move through different application states |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `app/routes` | 路由帮助在不同应用程序状态之间移动 |'
- en: '| `app/serializers` | This serializes your data model |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `app/serializers` | 这用于序列化您的数据模型 |'
- en: '| `app/transform` | Transform is used to deserialize and serialize model attributes
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `app/transform` | Transform 用于反序列化和序列化模型属性 |'
- en: '| `app/utils` | Utils are small utility classes |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `app/utils` | Utils 是小型实用类 |'
- en: '| `app/models` | Models hold the data store |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `app/models` | 模型存储数据存储 |'
- en: '| `app/templates` | Templates use HTMLBars to display HTML to the user |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `app/templates` | 模板使用 HTMLBars 向用户显示 HTML |'
- en: '| `app/templates/components` | These are templates used in your components
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `app/templates/components` | 这些是在组件中使用的模板 |'
- en: 'A new project `app` folder with a default layout will look similar to this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有默认布局的新项目 `app` 文件夹看起来类似于以下内容：
- en: '![How to do it...](img/00003.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/00003.jpeg)'
- en: Each module will have its own directory. For example, the `templates` folder
    will store all the templates while the `components` controller will store all
    the components.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都将有自己的目录。例如，`templates` 文件夹将存储所有模板，而 `components` 控制器将存储所有组件。
- en: 'Let''s say that we added a new post resource using pods. The following command
    will generate a new post model, route, and template, and it will update the router:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们使用pods添加了一个新的帖子资源。以下命令将生成一个新的帖子模型、路由和模板，并将更新路由：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now the filesystem will look like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，文件系统将看起来像这样：
- en: '![How to do it...](img/00004.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00004.jpeg)'
- en: Pods sorts directories by features. The post and posts folders are features
    and the files are named after the function they serve.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Pods根据功能对目录进行排序。帖子（posts）文件夹是功能，文件命名是根据它们所服务的功能来命名的。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The directory structure in each Ember CLI project is by design. When creating
    a new project or generating new scaffolding, the CLI will place files in a certain
    directory with a certain naming structure that the Ember Resolver understands
    using the ES2015 format.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Ember CLI项目的目录结构都是经过设计的。当创建新项目或生成新脚手架时，CLI会将文件放置在某个目录中，并使用Ember Resolver理解的ES2015格式进行命名结构。
- en: The Ember Resolver is responsible for the looking up of code in your application
    and converting the name conventions in the actual class files. With Ember pods,
    the resolver knows to look there first before the default structure.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Ember Resolver负责查找应用程序中的代码并转换实际类文件中的命名约定。使用Ember pods时，解析器知道首先在默认结构之前查找那里。
- en: Asset compilation
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产编译
- en: In this recipe we'll take a look at how assets are added to a project.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看看如何将资产添加到项目中。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In your application, at some point, you may want to add assets and minimize
    or fingerprint your project. This is done in the `root` folder of your project
    in the `ember-cli-build.js` file or in the `asset` folder.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中，在某个时刻，你可能想要添加资产并最小化或指纹化你的项目。这可以在项目的`root`文件夹中的`ember-cli-build.js`文件或`asset`文件夹中完成。
- en: CSS and assets
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS和资产
- en: All the assets should be placed in the `public/assets` folder. The assets can
    be referred throughout the program at `assets/images/{image file}`. CSS files
    should be placed in the `app/styles` folder.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 所有资产应放置在`public/assets`文件夹中。资产可以在程序中通过`assets/images/{image file}`进行引用。CSS文件应放置在`app/styles`文件夹中。
- en: Minifying
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩
- en: 'By default, CSS and JavaScript files are minified during the production build
    process. There are ways to turn this functionality on and off. For example, let''s
    say that you want to turn off the minification for both CSS and JavaScript. To
    do this, we can simply edit the `ember-cli-build.js` file, and under the `// Add
    options here` section, add the `minifyCSS` and `minifyJS` section:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CSS和JavaScript文件在生产构建过程中会被压缩。有方法可以打开和关闭此功能。例如，假设你想关闭CSS和JavaScript的压缩。为此，我们可以简单地编辑`ember-cli-build.js`文件，并在`//
    Add options here`部分添加`minifyCSS`和`minifyJS`部分：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will tell the compiler not to minify JavaScript and CSS. To build the
    application in the production mode, simply use the `--environment` argument:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉编译器不要压缩JavaScript和CSS。要在生产模式下构建应用程序，只需使用`--environment`参数：
- en: '[PRE21]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Fingerprinting
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指纹化
- en: All files by default will be fingerprinted during the production build process.
    This will include all `js`, `css`, `png`, `jpg`, and `gif` assets. During this
    process, all these files will have an md5 checksum appended at the end of their
    filenames. During this process, all HTML and css files will be rewritten to include
    these new names.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有文件在生产构建过程中都会进行指纹识别。这包括所有`js`、`css`、`png`、`jpg`和`gif`资产。在这个过程中，所有这些文件都会在其文件名末尾附加一个md5校验和。在这个过程中，所有HTML和CSS文件都将被重写以包含这些新名称。
- en: 'There are several options available when fingerprinting a file. This is all
    controlled in the `ember-cli-build.js` file. Let''s suppose that you wanted to
    disable fingerprinting:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在对文件进行指纹化时，有几种选项可用。这全部都在`ember-cli-build.js`文件中控制。假设你想要禁用指纹化：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Another useful option is to prepend a domain to all static files. This can
    be done using the `prepend` option. Once again, this needs to be added to the
    `ember-cli-build.js` file in the root of the `application` folder:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的选项是为所有静态文件添加一个域名。这可以通过使用`prepend`选项来完成。同样，这需要添加到`application`文件夹根目录下的`ember-cli-build.js`文件中：
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, all assets will include the `www.example.com` domain. For example, a normal
    JavaScript `src` file will look like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有资产都将包含`www.example.com`域名。例如，一个普通的JavaScript `src`文件将看起来像这样：
- en: '[PRE24]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will be transformed into the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被转换为以下内容：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Another useful option is `exclude`. This accepts an array of strings. Any filename
    in the `exclude` array will not be fingerprinted:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的选项是 `exclude`。它接受一个字符串数组。`exclude` 数组中的任何文件名都不会被指纹化：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `ignore` option also accepts an array of strings. Any filename that contains
    any item in the `ignore` array will not be processed or fingerprinted:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`ignore` 选项也接受一个字符串数组。包含 `ignore` 数组中任何项目的任何文件名都不会被处理或指纹化：'
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `extension` option defaults to `''js''`, `''css''`, `''png''`, `''jpg''`,
    `''gif''`, and `''map''`. This option can be used to add other file types to get
    fingerprinted:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`extension` 选项默认为 `''js''`、`''css''`、`''png''`、`''jpg''`、`''gif''` 和 `''map''`。此选项可用于添加其他需要指纹化的文件类型：'
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `replaceExtensions` option defaults to `''html''`, `''css''`, and `''js''`.
    If needed, new file types can be added to replace source code with new checksum
    file names:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`replaceExtensions` 选项默认为 `''html''`、`''css''` 和 `''js''`。如果需要，可以添加新文件类型以替换源代码和新的校验和文件名：'
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The import process is done via the Broccoli asset pipeline library. This build
    tool performs all the fingerprinting, minifying, and importing of the assets.
    In addition, Broccoli handles all the preprocessors if the appropriate plugins
    are installed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 导入过程是通过 Broccoli 资产管道库完成的。这个构建工具执行所有指纹化、压缩和资产导入操作。此外，如果安装了适当的插件，Broccoli 还处理所有预处理程序。
- en: The asset manifest is located in the `ember-cli-build.js` file in the root of
    the project folder. You can only import assets that are in the `bower_components`
    or `vendor` directories.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 资产清单位于项目文件夹根目录下的 `ember-cli-build.js` 文件中。你只能导入位于 `bower_components` 或 `vendor`
    目录中的资产。
- en: Dependency management
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项管理
- en: Let's look at dependency management and how we can use it in our Ember projects.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看依赖项管理以及我们如何在 Ember 项目中使用它。
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Bower is used for dependency management for Ember CLI. Bower is a frontend tool
    that is used to help fetch and install packages that you might need.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Bower 用于 Ember CLI 的依赖项管理。Bower 是一个前端工具，用于帮助获取和安装你可能需要的包。
- en: 'The `bower.json` file is located in the `root` folder of your project. It contains
    all the dependencies. Let''s say that we want to install the **Bootstrap library**:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bower.json` 文件位于你项目的 `root` 文件夹中。它包含所有依赖项。假设我们想要安装 **Bootstrap 库**：'
- en: '[PRE30]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This command will install `bootstrap` in the `bower_components` folder and save
    the package information in the `bower.json` file.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将在 `bower_components` 文件夹中安装 `bootstrap` 并将包信息保存到 `bower.json` 文件中。
- en: Tip
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Ember add-ons**'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Ember 插件**'
- en: Another popular way of adding third-party libraries to Ember is using add-ons
    or addons as you sometimes see it. An add-on is Ember's way of sharing libraries
    between applications. There are well over a thousand of them available.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将第三方库添加到 Ember 的另一种流行方式是使用插件或插件，正如你有时看到的那样。插件是 Ember 在应用程序之间共享库的方式。有超过一千个这样的插件可供使用。
- en: 'You can install add-ons using Ember CLI. For example, to install Bootstrap,
    you''d type this on the command line in the project directory:'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用 Ember CLI 安装插件。例如，要安装 Bootstrap，你需要在项目目录中的命令行中输入以下内容：
- en: '`$ ember install ember-bootstrap`'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ ember install ember-bootstrap`'
- en: 'You can easily find a list of add-ons at these websites:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以轻松在这些网站上找到插件列表：
- en: '[http://www.emberobserver.com](http://www.emberobserver.com)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.emberobserver.com](http://www.emberobserver.com)'
- en: '[http://www.emberaddons.com](http://www.emberaddons.com)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.emberaddons.com](http://www.emberaddons.com)'
- en: This will be discussed in more detail in the *Working and creating add-ons*
    recipe in [Chapter 11](part0088_split_000.html#2JTHG1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 11. Real-Time Web Applications"), *Real-Time Web Applications*.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在第 11 章 *实时网络应用* 的 *工作与创建插件* 菜谱中更详细地讨论，*实时网络应用*。
- en: 'If, for some reason, you need to reinstall your dependencies, you can run the
    `install` command by itself:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出于某种原因需要重新安装依赖项，可以单独运行 `install` 命令：
- en: '[PRE31]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will install all dependencies that are listed in the `bower.json` file.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装 `bower.json` 文件中列出的所有依赖项。
- en: The app.import code
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: app.import 代码
- en: Ember CLI allows you to load **Asynchronous** **Module Definition** (**AMD**)
    and non-AMD assets. It's a way of defining code modules and their dependencies.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 允许你加载 **异步** **模块定义**（**AMD**）和非 AMD 资产。这是一种定义代码模块及其依赖项的方式。
- en: 'To load a non-AMD asset, you''ll need to import it using the `ember-cli-build.js`
    file:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要加载非 AMD 资产，你需要使用 `ember-cli-build.js` 文件导入它：
- en: '[PRE32]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is useful as you can use Bower to install components, and then use the
    `app.import` AMD so that it's available in the program. You'll need to consult
    the package specification to see how to use it.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这很有用，因为你可以使用Bower安装组件，然后使用`app.import` AMD使其在程序中可用。你需要查阅包规范以了解如何使用它。
- en: Tip
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Tip on JSHint**'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**关于JSHint的提示**'
- en: JSHint is a community-driven tool that detects errors and potential problems
    with JavaScript code. It's built-in in Ember CLI. When using non-AMD assets, you
    may get errors with JSHint if you have global variables. To fix this, add `/*
    global MY_GLOBAL */` at the top of your module page. In the moment example, it
    would look like `/* global moment */`.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSHint是一个社区驱动的工具，用于检测JavaScript代码中的错误和潜在问题。它是Ember CLI内置的。当使用非AMD资产时，如果你有全局变量，你可能会遇到JSHint错误。为了解决这个问题，在模块页面的顶部添加`/*
    global MY_GLOBAL */`。在moment的例子中，它看起来像`/* global moment */`。
- en: 'AMD assets are imported in a similar way. You add the path in the first argument
    and a list of exports and modules in the second:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AMD资产以类似的方式导入。你在第一个参数中添加路径，在第二个参数中添加导出和模块列表：
- en: '[PRE33]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To use this asset in your application, you can import it as follows:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在你的应用程序中使用此资产，你可以按照以下方式导入：
- en: '[PRE34]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Dependency management is done via Bower. After the dependency is installed,
    the Broccoli library is called on to add the assets to the pipeline. Both these
    tools are written in node and are built-in in Ember CLI.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理是通过Bower完成的。在依赖安装后，Broccoli库被调用以将资产添加到管道中。这两个工具都是用node编写的，并且内置在Ember CLI中。
- en: Upgrading your project
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级你的项目
- en: Ember CLI is constantly being upgraded and every six weeks Ember.js has another
    release. It is important to keep your build tools and versions up to date. In
    this recipe we'll look at the best way of doing this.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 正在持续升级，每六周 Ember.js 就会有一个新的版本发布。保持你的构建工具和版本更新是很重要的。在这个菜谱中，我们将探讨如何做到这一点。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To upgrade your Ember CLI version, you must perform the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要升级你的Ember CLI版本，你必须执行以下步骤：
- en: 'Begin by uninstalling the old `ember-cli`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，卸载旧的`ember-cli`：
- en: '[PRE35]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Clear the npm cache:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除npm缓存：
- en: '[PRE36]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Clear the Bower cache:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除Bower缓存：
- en: '[PRE37]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Install the latest version of `ember-cli`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装最新版本的`ember-cli`：
- en: '[PRE38]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you need, you can specify the version to use represented by `X.X.X`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，你可以指定由`X.X.X`表示的版本：
- en: '[PRE39]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Updating an existing project
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新现有项目
- en: 'In some situations, you might want to take an existing project and update it
    to the latest version of Ember CLI. In this case, you''ll need to perform the
    following steps:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想要将现有项目更新到最新版本的Ember CLI。在这种情况下，你需要执行以下步骤：
- en: 'Begin by changing directories that you want to upgrade in the root of the project
    folder. Delete these temporary development directories:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在项目文件夹的根目录中更改你想要升级的目录。删除这些临时开发目录：
- en: '[PRE40]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Update the `package.json` file with the version of Ember that we''re upgrading
    to using this command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更新`package.json`文件，以包含我们升级到的Ember版本：
- en: '[PRE41]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`X.X.X` represents the version of `ember-cli`. The `--save-dev` argument will
    save the information in the `package.json` file.'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`X.X.X`代表`ember-cli`的版本。`--save-dev`参数将信息保存到`package.json`文件中。'
- en: 'Install all the npm and Bower packages again:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次安装所有的npm和Bower包：
- en: '[PRE42]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The last step is to run the `init` command:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是运行`init`命令：
- en: '[PRE43]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `init` command will add the default project blueprint to your directory.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`init`命令将默认项目蓝图添加到你的目录中。'
- en: Tip
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**init**'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**init**'
- en: The `init` command will create a new application blueprint in your project directory.
    Follow the prompts and review all the changes. You may be asked to replace existing
    files. Press *d* to do a diff of the files and review the changes made. Create
    a backup of your project before you begin the upgrade process.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`init`命令将在你的项目目录中创建一个新的应用程序蓝图。按照提示并审查所有更改。你可能需要替换现有文件。按*d*进行文件差异比较并审查所做的更改。在开始升级过程之前，创建项目的备份。'
- en: Keep in mind that after upgrading your project, you might have many new deprecation
    warnings to deal with. You will see these warnings when you run `ember server`.
    Each one will need to be addressed.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在升级你的项目后，你可能会遇到许多新的弃用警告需要处理。当你运行`ember server`时，你会看到这些警告。每个都需要解决。
- en: To address these deprecations, view the warnings that the applications provide.
    For instance, you may get a warning about `Ember.View`. The warning will describe
    that `Ember.Component` should be used instead. You'll then need to swap out the
    effected code with Ember components instead of Ember views.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这些弃用问题，查看应用程序提供的警告。例如，您可能会收到有关 `Ember.View` 的警告。警告将描述应使用 `Ember.Component`
    代替。然后您需要将受影响的代码用 Ember 组件而不是 Ember 视图替换。
- en: How it works...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you upgrade the tool, you are simply uninstalling the node package and
    reinstalling the latest one. It's a good idea to clear the Bower and Node cache
    as well so that Node and Bower won't have any conflicting packages.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当您升级工具时，您只是卸载节点包并重新安装最新版本。清除 Bower 和 Node 缓存也是一个好主意，这样 Node 和 Bower 就不会有任何冲突的包。
- en: When we update an existing project we first have to make sure that all the existing
    modules and packages are deleted. This is important because when we install the
    latest version of Ember CLI, some packages might change. After `ember-cli` is
    saved back in the package file, then you can install `npm` and Bower again.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们更新现有项目时，我们首先必须确保所有现有模块和包都被删除。这是因为当我们安装 Ember CLI 的最新版本时，一些包可能会发生变化。在将 `ember-cli`
    保存回包文件后，然后您可以再次安装 `npm` 和 Bower。
- en: Running `ember init` generates the application structure in the directory that
    you're in. This is important because some files may have changed since the last
    upgrade. You can always press *d* to diff the changes.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `ember init` 在您所在的目录中生成应用程序结构。这很重要，因为自上次升级以来，一些文件可能已经更改。您始终可以按 *d* 键来比较更改。
- en: Deployment
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: After creating your application you'll need to be able to deploy it. Let's take
    a look at a few ways to deploy your application.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建您的应用程序后，您将需要能够部署它。让我们看看部署应用程序的一些方法。
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The first fundamental step before deployment is building your project. To build
    your application, run the `build` command:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署之前的第一基本步骤是构建您的项目。要构建应用程序，请运行 `build` 命令：
- en: '[PRE44]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This command builds the contents of the project in the `/dist` folder. To build
    your project for production, you''ll need to use the `-prod` argument:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将在 `/dist` 文件夹中构建项目的所有内容。要为生产构建项目，您需要使用 `-prod` 参数：
- en: '[PRE45]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If you need, you can designate the default output folder:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，您可以指定默认输出文件夹：
- en: '[PRE46]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Building your application for production will automatically minify your files
    as well as fingerprint them. This does not occur when your environment is set
    up for development, which is set by default.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 构建用于生产的应用程序将自动压缩您的文件并对它们进行指纹识别。当您的环境设置为开发时，这不会发生，这是默认设置。
- en: The `/dist` folder has everything that your web server needs. At this point,
    to deploy your application, all you need to do is copy the contents of the `/dist`
    folder to your web server.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`/dist` 文件夹包含了您的 Web 服务器所需的一切。在这个时候，要部署您的应用程序，您只需要将 `/dist` 文件夹的内容复制到您的 Web
    服务器上。'
- en: Tip
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Ember CLI Deploy**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ember CLI Deploy**'
- en: 'Another great way to deploy your Ember application is to use the Ember add-on
    called **Ember CLI Deploy**. This add-on helps you deploy your Ember application
    to a number of different services. It has a very active community behind it so
    you can expect frequent updates. As your Ember applications grows you may want
    to take a look at this. You can find more information about Ember CLI deploy here:
    [https://github.com/ember-cli/ember-cli-deploy](https://github.com/ember-cli/ember-cli-deploy).'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 部署您的 Ember 应用程序的另一种极好方式是使用名为 **Ember CLI Deploy** 的 Ember 插件。此插件帮助您将 Ember 应用程序部署到多个不同的服务。它背后有一个非常活跃的社区，因此您可以期待频繁的更新。随着您的
    Ember 应用程序的增长，您可能想看看这个。有关 Ember CLI 部署的更多信息，请参阅：[https://github.com/ember-cli/ember-cli-deploy](https://github.com/ember-cli/ember-cli-deploy)。
- en: Deploying to Firebase
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到 Firebase
- en: Firebase is a backend service that can handle data storage, user authentication,
    static hosting, and more. For this example we'll be using Firebase as a way to
    host our Ember application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 是一种后端服务，可以处理数据存储、用户身份验证、静态托管等。在这个例子中，我们将使用 Firebase 作为托管我们的 Ember 应用程序的方式。
- en: Sign up for an account with Firebase. This can be done at [http://www.firebase.com](http://www.firebase.com).
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Firebase 上注册一个账户。这可以在 [http://www.firebase.com](http://www.firebase.com) 完成。
- en: 'Next, install the `firebase-tools`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装 `firebase-tools`：
- en: '[PRE47]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'After you have a project created and you''re ready to deploy, run the `firebase
    init` command in the root of the folder:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您创建项目并准备部署后，在文件夹根目录下运行 `firebase init` 命令：
- en: '[PRE48]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: After running this command, you'll be asked a few questions. It will first ask
    you to sign in to your Firebase account. Enter your credentials to continue. Then,
    it will ask for the name of your Firebase application. Lastly, it will ask for
    the name of your app's public directory. In most cases, this should be `/dist`.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此命令后，您将需要回答几个问题。它首先会要求您登录到您的 Firebase 账户。输入您的凭证以继续。然后，它会要求您输入 Firebase 应用程序的名称。最后，它会要求您输入应用程序公共目录的名称。在大多数情况下，这应该是
    `/dist`。
- en: 'Edit the `firebase.json` file and add some rewrite rules:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `firebase.json` 文件并添加一些重写规则：
- en: '[PRE49]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This is needed to help with navigation in the application. Change `my-new-app`
    to the name of your app as well.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是为了帮助在应用程序中进行导航。将 `my-new-app` 改为您的应用程序名称。
- en: 'All that''s left is to deploy to Firebase:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的就是部署到 Firebase：
- en: '[PRE50]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Ember CLI build process is compiled using the Broccoli asset pipeline and
    the build tool itself. It takes all the files and minifies, fingerprints, and
    organizes them in the `/dist` folder so that it is ready to be deployed.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Ember CLI 构建过程使用 Broccoli 资产管道和构建工具本身进行编译。它将所有文件合并，压缩，指纹化，并将它们组织在 `/dist` 文件夹中，以便可以部署。
- en: Many services exist that can host static files. You can use Firebase or just
    host it in your own Nginx or Apache server after building it for production.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 许多服务可以托管静态文件。您可以使用 Firebase，或者构建生产版本后在自己的 Nginx 或 Apache 服务器上托管。
