- en: Chapter 9. App Security Using Encryption and Other Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：使用加密和其他技术进行应用程序安全
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Using secure properties
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全属性
- en: Object and string encryption
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象和字符串加密
- en: Working with encrypted files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理加密文件
- en: Handling protected PDFs on iOS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 上处理受保护的 PDF 文件
- en: Android lock screen monitor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 锁屏监控
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It is common for Enterprise applications to contain private or confidential
    information. For this reason, encryption, file locking, and secure app lifecycle
    management are fundamental requirements when developing Enterprise Titanium apps.
    The core Titanium SDK provides limited functionality in this area such as one-way
    hashing and basic app events, but to fully meet security requirements, third-party
    modules such as `Securely` are needed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序通常包含私有或机密信息。因此，在开发企业级 Titanium 应用程序时，加密、文件锁定和安全应用程序生命周期管理是基本要求。核心 Titanium
    SDK 在此领域提供了有限的功能，例如单向哈希和基本应用程序事件，但要完全满足安全要求，需要第三方模块，如 `Securely`。
- en: In this chapter, we will discuss how to use the `Securely` framework to handle
    common secure programming tasks such as file and string encryption. `Securely`
    provides access to each platform's security APIs in a cross-platform and Titanium-friendly
    way. Through a series of recipes, we will demonstrate how to leverage the `Securely`
    framework within our existing Titanium Enterprise app.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用 `Securely` 框架来处理常见的安全编程任务，例如文件和字符串加密。`Securely` 以跨平台和 Titanium
    友好的方式提供对每个平台的安全 API 的访问。通过一系列食谱，我们将演示如何在现有的 Titanium 企业应用程序中利用 `Securely` 框架。
- en: Using secure properties
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用安全属性
- en: The Titanium SDK provides a `Ti.App.Properties` object, which provides a convenient
    way to persist user and application information. The `Securely` framework provides
    a familiar API designed to mirror `Ti.App.Properties`, which allows you to persist
    this information in a secure fashion. This recipe describes how to use the `Securely.Properties`
    object to store, read, and remove data in/from an encrypted and secure manner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium SDK 提供了一个 `Ti.App.Properties` 对象，它提供了一种方便的方式来持久化用户和应用程序信息。`Securely`
    框架提供了一个熟悉的 API，旨在镜像 `Ti.App.Properties`，允许您以安全的方式持久化这些信息。本食谱描述了如何使用 `Securely.Properties`
    对象以加密和安全的方式存储、读取和删除数据。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book, or individually through
    the links provided in the *See also* section at the end of this recipe. Installing
    these in your project is straightforward. Simply, copy the `modules` folder into
    your project as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用 `Securely` 原生模块。此模块和其他代码资源可以从本书提供的源代码中下载，或者通过本食谱末尾的 *另请参阅* 部分的链接单独下载。将这些安装到您的项目中很简单。只需将
    `modules` 文件夹复制到您的项目中，如下截图所示：
- en: '![Getting ready](img/5343_09_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343_09_01.jpg)'
- en: Adding the module reference
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加模块引用
- en: 'After copying the mentioned folder, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.securely` module
    as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制提到的文件夹后，您需要点击 Titanium Studio 中的 **tiapp.xml** 文件，并添加对 `bencoding.securely`
    模块的引用，如下截图所示：
- en: '![Adding the module reference](img/5343_09_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![添加模块引用](img/5343_09_02.jpg)'
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This recipe is designed to run within the context of a `Ti.UI.Window` or other
    component within a single Titanium context. The code samples in this section demonstrate
    how to use the Secure properties of `Securely` using the same tests that Appcelerator
    uses for the Titanium SDK's `Ti.App.Properties` class. For more information, please
    refere to the `app.js` included with the recipe's source.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱旨在在 `Ti.UI.Window` 或单个 Titanium 上下文中的其他组件的上下文中运行。本节中的代码示例演示了如何使用 `Securely`
    的安全属性，使用与 Appcelerator 为 Titanium SDK 的 `Ti.App.Properties` 类使用的相同测试。有关更多信息，请参阅食谱源代码中包含的
    `app.js`。
- en: Creating the namespace
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建命名空间
- en: 'Once you have added the `Securely` module to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在您将 `Securely` 模块添加到您的项目后，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require` 将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating the secure properties object
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建安全属性对象
- en: 'After the app namespace has been created, the next step is to create a new
    properties object. This object contains the following property values that must
    be set at creation time:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建应用命名空间之后，下一步是创建一个新的属性对象。此对象包含以下属性值，这些值必须在创建时设置：
- en: '`secret`: This is a required parameter. `secret` is the password used to encrypt
    and decrypt all property values. The same `secret` used to encrypt must be used
    during the decryption process or a `null` value will be returned.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secret`：这是一个必需的参数。`secret` 是用于加密和解密所有属性值的密码。在加密过程中使用的相同 `secret` 必须在解密过程中使用，否则将返回
    `null` 值。'
- en: '`identifier`: This parameter is optional. If no value is provided, the bundle
    name on iOS or the `PackageName` on Android is used. `identifier` allows you to
    segment each property with an identifier, if needed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identifier`：此参数是可选的。如果没有提供值，iOS 上的捆绑名称或 Android 上的 `PackageName` 将被使用。`identifier`
    允许您在需要时使用标识符对每个属性进行分段。'
- en: '`accessGroup`: This parameter is an optional value used on the iOS platform.
    Access groups can be used to share keychain items among two or more applications.
    If no access group is provided, the keychain values will only be accessible within
    the app saving the values.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessGroup`：此参数是仅在 iOS 平台上使用的可选值。访问组可用于在两个或多个应用程序之间共享密钥链项。如果没有提供访问组，密钥链值将仅限于保存值的该应用内部访问。'
- en: '`encryptFieldNames`: This parameter is an optional value only used on the Android
    platform. When set to `true`, `Securely` will create an MD5 hash using the provided
    `secret` for all property names.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encryptFieldNames`：此参数是仅在 Android 平台上使用的可选值。当设置为 `true` 时，`Securely` 将使用提供的
    `secret` 对所有属性名称创建 MD5 哈希。'
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Result comparison helper
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果比较辅助工具
- en: The `displayResults` function shown in the following code snippet is used to
    compare the test result with the expected value. Based on the comparison, the
    proper message is generated for presenting to the user.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段中显示的 `displayResults` 函数用于将测试结果与预期值进行比较。根据比较结果，生成适当的消息以呈现给用户。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Reading secure properties without defaults
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取不带默认值的安全属性
- en: 'Each supported property type has a `get` method. For example, to read a Boolean
    property, the `getBool` method is called and a name is provided. This API works
    similar to the `Ti.App.Properties` object within the Titanium SDK, with added
    support for reading and decrypting secure properties. If no stored value is available,
    a null or default value type is provided. The following snippet demonstrates how
    to read saved secure property values:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每种支持的属性类型都有一个 `get` 方法。例如，要读取布尔属性，可以调用 `getBool` 方法并提供一个名称。此 API 与 Titanium
    SDK 中的 `Ti.App.Properties` 对象类似，增加了读取和解密安全属性的支持。如果没有存储值可用，将提供 null 或默认值类型。以下代码片段演示了如何读取已保存的安全属性值：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On iOS, null values are returned for any property without a saved value. Due
    to Android's type system, Boolean values will return `false` if no value is stored
    and numeric values will return zero. All other Android values will return null
    similar to iOS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 上，任何没有保存值的属性都将返回 null 值。由于 Android 的类型系统，如果没有存储值，布尔值将返回 `false`，数值将返回零。所有其他
    Android 值将返回 null，类似于 iOS。
- en: Reading secure properties with defaults
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取带默认值的安全属性
- en: Also similar to `Ti.App.Properties`, `Securely` provides the ability to read
    and decrypt a secure property and provide a default value if there is no stored
    value for the requested secure property.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，与 `Ti.App.Properties` 类似，`Securely` 提供了读取和解密安全属性的能力，并在请求的安全属性没有存储值时提供默认值。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default value is not encrypted or persisted during the read process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值在读取过程中不会被加密或持久化。
- en: Setting secure property values
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置安全属性值
- en: 'Each supported property type has a `set` method used to encrypt and persist
    values. For example, to save and encrypt a Boolean property and the `setBool`
    method, and provide a property name and Boolean value. This API works similar
    to the `Ti.App.Properties` object within the Titanium SDK. `Securely` supports
    both encrypting and writing the value to the secure properties directly. The following
    code snippet demonstrates how to save the following values to secure and encrypted
    storage:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每种支持的属性类型都有一个 `set` 方法，用于加密和持久化值。例如，要保存和加密布尔属性，可以使用 `setBool` 方法，并提供属性名称和布尔值。此
    API 与 Titanium SDK 中的 `Ti.App.Properties` 对象类似。`Securely` 支持直接加密并将值写入安全属性。以下代码片段演示了如何将以下值保存到安全和加密的存储中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To demonstrate the properties were saved correctly, the `get` method is called
    for each file and the results are printed to the console within Titanium Studio.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示属性是否正确保存，对每个文件调用`get`方法，并将结果打印到Titanium Studio控制台。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Listing secure property field names
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出安全属性字段名称
- en: The property names can be returned as an array by calling the `listProperties`
    method on the `Securely` property object. The following code snippet demonstrates
    how to use this method to print a JSON representation of the `names` array to
    the console within Titanium Studio.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`Securely`属性对象上调用`listProperties`方法来返回属性名称数组。以下代码片段演示了如何使用此方法在Titanium
    Studio控制台中打印`names`数组的JSON表示形式。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If field name encryption is enabled, the `listProperties` method will return
    `null`. As the field names are encrypted with a one-way hash, the original names
    are no longer available.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了字段名称加密，则`listProperties`方法将返回`null`。因为字段名称使用单向哈希加密，原始名称不再可用。
- en: Removing secure properties
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除安全属性
- en: You can remove properties using two methods on the `Securely` properties object.
    The `removeProperty` and `removeAllProperties` are designed to be familiar and
    mirror the methods with the same name on the Titanium SDK's `Ti.App.Properties`
    object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`Securely`属性对象的两种方法来删除属性。`removeProperty`和`removeAllProperties`旨在易于使用，并且与Titanium
    SDK的`Ti.App.Properties`对象上具有相同名称的方法类似。
- en: The `removeProperty` method will remove the provided secure property name, if
    it exists.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeProperty`方法将删除提供的存在的安全属性名称。'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `removeAllProperties` method will remove all properties within the identifier
    provided when creating the properties object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeAllProperties`方法将删除在创建属性对象时提供的标识符内的所有属性。'
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In our recipe, the `remove` property functions are called at the end of the
    test so that the results can be recreated reliably each time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的食谱中，`remove`属性函数在测试结束时被调用，以便每次都能可靠地重现结果。
- en: Check if a secure property exists
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查是否存在安全属性
- en: The Securely property object provides the `hasProperty` method to provide the
    ability to check if a secure property exists. If the property exists, a Boolean
    `true` value is returned, otherwise a result of `false` is provided. This API
    is designed to be familiar as it mirrors the `Ti.App.Properties.hasProperty` function
    within the core Titanium SDK.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely`属性对象提供了`hasProperty`方法，以提供检查安全属性是否存在的能力。如果属性存在，则返回布尔值`true`，否则提供结果`false`。此API旨在易于使用，因为它与核心Titanium
    SDK中的`Ti.App.Properties.hasProperty`函数类似。'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The underlying infrastructure for secure properties is implemented differently
    depending on the platform running your application. Although `Securely` provides
    a cross-platform API, it is important to understand how each platform has been
    implemented and its associated security considerations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安全属性的基础设施实现方式取决于运行应用程序的平台。尽管`Securely`提供了一个跨平台API，但了解每个平台是如何实现及其相关的安全考虑是很重要的。
- en: Secure properties on iOS
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS上的安全属性
- en: The `Securely` framework saves all property values as serialized strings within
    the iOS Keychain. This provides secure storage and since it is part of iOS does
    not require any dependencies. Since `Securely` uses the iOS keychain service,
    it is recommended that your organization review Apple's Keychain documents before
    storing sensitive data within the securely-managed container.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely`框架将所有属性值作为序列化字符串保存在iOS Keychain中。这提供了安全存储，并且由于它是iOS的一部分，因此不需要任何依赖项。由于`Securely`使用iOS密钥链服务，建议在将敏感数据存储在安全管理的容器中之前，您的组织审查Apple的密钥链文档。'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to remember since the iOS Keychain service is used, your Secure
    Property values will still be available within the iOS Keychain after your app
    has been uninstalled. The `removeAllProperties` method must be called if you wish
    to remove all keychain items before removal of the app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了iOS Keychain服务，因此需要记住，在您的应用程序卸载后，您的安全属性值仍然会在iOS Keychain中可用。如果您希望在删除应用程序之前删除所有密钥链项，则必须调用`removeAllProperties`方法。
- en: Secure properties on Android
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android上的安全属性
- en: The `Securely` framework saves all property values as serialized and AES-encrypted
    strings into Android's `SharedPreferences`. Although Android introduced native
    keychain support in API level 14, the `Securely` module was designed to accommodate
    a larger number of devices and targets API level 8 and higher. It is recommended
    that your Enterprise reviews the secure properties' implementation within `Securely`
    to ensure it is in compliance with your corporate or industry standards and requirements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely` 框架将所有属性值以序列化和 AES 加密字符串的形式保存到 Android 的 `SharedPreferences` 中。尽管
    Android 在 API 级别 14 中引入了原生密钥链支持，但 `Securely` 模块旨在适应更多设备，并针对 API 级别 8 和更高版本。建议您的企业审查
    `Securely` 中的安全属性实现，以确保其符合您的企业或行业标准与要求。'
- en: Secure property considerations
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全属性考虑事项
- en: By default on Android, the property names are not encrypted. This can be enabled
    by setting the `encryptFieldNames` on creation of the `properties` object. Due
    to the need to encrypt all property names, this property can only be set on creation
    of a new `properties` object. When field name encryption is enabled, `Securely`
    will create a SHA-1 hash for each field name using the `secret` property value
    provided. Enabling this feature creates performance considerations. Regression
    and performance testing is recommended before implementing your existing Titanium
    app.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在 Android 上，属性名称不会被加密。这可以通过在创建 `properties` 对象时设置 `encryptFieldNames`
    来启用。由于需要加密所有属性名称，此属性只能在创建新的 `properties` 对象时设置。当启用字段名称加密时，`Securely` 将使用提供的 `secret`
    属性值对每个字段名称创建一个 SHA-1 哈希。启用此功能会带来性能考虑。在实现现有的 Titanium 应用程序之前，建议进行回归和性能测试。
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about the iOS Keychain, please review Apple's documentation available
    at [https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html](https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 iOS Keychain 的信息，请查阅 Apple 提供的文档，可在以下网址找到：[https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html](https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html)。
- en: To learn more about Android's SharedPreferences, please review the documentation
    available at [http://developer.android.com/reference/android/content/SharedPreferences.html](http://developer.android.com/reference/android/content/SharedPreferences.html).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 Android 的 SharedPreferences 的信息，请查阅以下网址提供的文档：[http://developer.android.com/reference/android/content/SharedPreferences.html](http://developer.android.com/reference/android/content/SharedPreferences.html)。
- en: Object and string encryption
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象和字符串加密
- en: During the Enterprise Titanium development cycle, there is often the requirement
    to encrypt in-process or persisted JavaScript objects or variables. The `Securely`
    framework provides a `StringCrypto` proxy with convenience methods for key generation
    of AES and DES bi-directional encryption.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业级 Titanium 开发周期中，通常需要加密进程中的或持久化的 JavaScript 对象或变量。`Securely` 框架提供了一个 `StringCrypto`
    代理，它提供了 AES 和 DES 双向加密的便捷方法。
- en: This recipe describes how to use the `Securely.StringCrypto` object to encrypt
    and decrypt JavaScript objects in a secure manner.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱描述了如何使用 `Securely.StringCrypto` 对象以安全的方式加密和解密 JavaScript 对象。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: AES and DES implementations of `Securely` are designed to be specific to the
    device platform. If there is a need to exchange AES or DES encrypted data, access
    device, platform or to a third-party service, testing is recommended to verify
    the implementations match.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely` 的 AES 和 DES 实现旨在针对特定设备平台。如果需要交换 AES 或 DES 加密数据，访问设备、平台或第三方服务，建议进行测试以验证实现是否匹配。'
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into the root of
    your Titanium Project. Please review the *Getting ready* section of the *Using
    secure properties* recipe for instructions on module setup before continuing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用 `Securely` 原生模块。此模块和其他代码资源可以从本书提供的源代码中下载。将这些安装到您的项目中很简单。只需将 `modules`
    文件夹复制到 Titanium 项目的根目录中。请参阅 *Using secure properties* 食谱中的 *准备工作* 部分，了解在继续之前如何设置模块的说明。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This example is designed to run within the context of a `Ti.UI.Window` or other
    component within a single Titanium context. This section demonstrates how to use
    the `StringCrypto` method of `Securely` to encrypt JavaScript objects. For more
    information, please reference the `app.js` included with the recipe's source.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例设计为在 `Ti.UI.Window` 或单个Titanium上下文中的其他组件的上下文中运行。本节演示了如何使用 `Securely` 的 `StringCrypto`
    方法加密JavaScript对象。有关更多信息，请参阅食谱源代码中包含的 `app.js`。
- en: Creating the namespace
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建命名空间
- en: 'Once you have added the `Securely` module to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 `Securely` 模块添加到您的项目中，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require` 将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Generating keys
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成密钥
- en: Key generation is an important part of cryptography and to assist with this
    process, `Securely` has two built-in convenience methods.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥生成是密码学的一个重要部分，为了帮助这个过程，`Securely` 有两个内置的便捷方法。
- en: Generating a derived key
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成派生密钥
- en: 'The first key generation convenience method is called `generateDerivedKey`.
    This method includes the string input provided by the user into the salt algorithm
    used to determine the key. This approach is helpful if the seed value needs to
    be known or derived by another accessing system. The following steps demonstrate
    two common approaches for generating the seed value to be provided to the `generateDerivedKey`
    method:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种密钥生成便捷方法是称为 `generateDerivedKey`。该方法包括用户提供的字符串输入到用于确定密钥的盐算法中。如果需要知道或由另一个访问系统导出种子值，这种方法是有帮助的。以下步骤演示了为
    `generateDerivedKey` 方法提供种子值的两种常见方法：
- en: 'A common approach is to create a new GUID as the seed from which the key is
    generated. The following code snippet demonstrates this approach using the `Ti.Platform.createUUID`
    method to generate a GUID:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种常见的方法是从新的GUID创建种子，从中生成密钥。以下代码片段演示了使用 `Ti.Platform.createUUID` 方法生成GUID来实现这一方法：
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `generateDrivedKey` method will use the parameter provided to create a new
    key each time it is called.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`generateDrivedKey` 方法将使用提供的参数在每次调用时创建一个新的密钥。'
- en: Another, less random method of key generation is to provide the Titanium app
    GUID as the seed value. The following code snippet demonstrates how to use the
    `Ti.App.guid` to create a derived key using the GUID from your project's `tiapp.xml`
    file.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种不那么随机的密钥生成方法是提供Titanium应用程序GUID作为种子值。以下代码片段演示了如何使用 `Ti.App.guid` 从项目的 `tiapp.xml`
    文件中的GUID创建派生密钥。
- en: '[PRE13]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Generating a random key
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成随机密钥
- en: The second key generation convenience method is called `generateRandomKey`.
    As its name indicates, a random alphanumeric string is generated and used as the
    seed value. The following code snippet demonstrates how to create a key value
    using the `generateRandomKey` method.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种密钥生成便捷方法称为 `generateRandomKey`。正如其名称所示，生成一个随机的字母数字字符串并将其用作种子值。以下代码片段演示了如何使用
    `generateRandomKey` 方法创建密钥值。
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating the stringCrypto object
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 stringCrypto 对象
- en: The next step in the cryptographic process for strings and objects is to create
    a new instance of the `stringCrypto` proxy. The following code snippet shows how
    to create a new proxy object named `stringCrypto`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和对象的加密过程中的下一步是创建一个新的 `stringCrypto` 代理实例。以下代码片段显示了如何创建一个名为 `stringCrypto`
    的新代理对象。
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using DES encryption
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用DES加密
- en: '`Securely` supports the older **Data Encryption Standard** (**DES**) encryption
    algorithm. Support for this algorithm is primarily provided for intercommunication
    with legacy systems. Wherever possible, the stronger AES encryption should be
    used instead.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely` 支持较旧的 **数据加密标准** (**DES**) 加密算法。对这种算法的支持主要是为了与旧系统进行交互。 wherever
    possible, the stronger AES encryption should be used instead.'
- en: Encrypting using DES
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用DES加密
- en: The `DESEncrypt` method requires a key and a string to encrypt. This method
    will then return a DES encrypted string. If an error is generated during the encryption
    process a null value is returned. The following demonstrates how to encrypt both
    a JavaScript string and object using this method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`DESEncrypt` 方法需要一个密钥和一个要加密的字符串。然后该方法将返回一个DES加密字符串。如果在加密过程中生成错误，则返回null值。以下演示了如何使用此方法加密JavaScript字符串和对象。'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Any non-JavaScript string elements must first be converted into a JavaScript
    string before being provided to the `DESEncrypt` function.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非JavaScript字符串元素必须在提供给 `DESEncrypt` 函数之前首先转换为JavaScript字符串。
- en: Decrypting using DES
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用DES解密
- en: The `DESDecrypt` method is used to decrypt a string encrypted with the DES algorithm.
    This method requires the key and a string with the encrypted value. The `DESDecrypt`
    method will then return a string with the decrypted value. The following snippet
    demonstrates how to use the `DESDecrypt` method to decrypt both a string and object.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`DESDecrypt` 方法用于解密使用DES算法加密的字符串。此方法需要一个密钥和一个包含加密值的字符串。`DESDecrypt` 方法将返回一个包含解密值的字符串。以下代码片段演示了如何使用
    `DESDecrypt` 方法解密字符串和对象。'
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The following code snippet demonstrates how to use `JSON.parse` to re-build
    the JavaScript object from the decrypted JSON string.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何使用 `JSON.parse` 从解密后的JSON字符串中重建JavaScript对象。
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Encrypting using AES
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AES加密
- en: The `AESEncrypt` method requires a key and a string to encrypt. This method
    will then return an AES-encrypted string. If an error is generated during the
    encryption process, a null value is returned. The following code snippet demonstrates
    how to encrypt both a JavaScript string and object using this method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`AESEncrypt` 方法需要一个密钥和一个字符串来进行加密。此方法将返回一个AES加密的字符串。如果在加密过程中生成错误，则返回一个null值。以下代码片段演示了如何使用此方法加密JavaScript字符串和对象。'
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Any non-JavaScript string elements must first be converted into a JavaScript
    string before being provided to the `AESEncrypt` function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非JavaScript字符串元素必须在提供给 `AESEncrypt` 函数之前首先转换为JavaScript字符串。
- en: Decrypting using AES
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AES解密
- en: The `AESDecrypt` method is used to decrypt a string encrypted with the AES algorithm.
    This method requires the key and a string with the encrypted value. The `AESDecrypt`
    method will then return a string with the decrypted value. The following code
    snippet demonstrates how to use the `AESDecrypt` method to decrypt both a string
    and an object.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`AESDecrypt` 方法用于解密使用AES算法加密的字符串。此方法需要一个密钥和一个包含加密值的字符串。`AESDecrypt` 方法将返回一个包含解密值的字符串。以下代码片段演示了如何使用
    `AESDecrypt` 方法解密字符串和对象。'
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The following code snippet demonstrates how to use `JSON.parse` to rebuild the
    JavaScript object from the decrypted JSON string.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何使用 `JSON.parse` 从解密后的JSON字符串中重建JavaScript对象。
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Titanium object encryption
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 钛金属对象加密
- en: Titanium SDK objects such as `Ti.UI.View` are not real JavaScript objects, and
    therefore, cannot be serialized and encrypted effectively. To encrypt Titanium
    objects, you must first copy all of the Titanium object's properties into a pure
    JavaScript object and then convert the JavaScript object to a JSON string as shown
    earlier. During the decryption process, the reverse approach can be taken to recreate
    the Titanium object.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 钛金属SDK对象，如 `Ti.UI.View`，不是真正的JavaScript对象，因此无法有效地序列化和加密。要加密钛金属对象，您必须首先将钛金属对象的全部属性复制到一个纯JavaScript对象中，然后将JavaScript对象转换为JSON字符串，如前所述。在解密过程中，可以采取相反的方法来重新创建钛金属对象。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `Securely` module, for installation details please review
    the *Getting ready* section of the *Using secure properties* recipe
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此配方使用 `Securely` 模块，有关安装详情，请参阅 *Using secure properties* 配方的 *准备就绪* 部分
- en: To learn more about DES encryption, please review processing standards publication
    published by the **National Institute of Standards and Technology** (**NIST**)
    available at [http://www.itl.nist.gov/fipspubs/fip46-2.htm](http://www.itl.nist.gov/fipspubs/fip46-2.htm)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于DES加密的信息，请查阅由 **国家标准与技术研究院**（**NIST**）发布的处理标准出版物，可在[http://www.itl.nist.gov/fipspubs/fip46-2.htm](http://www.itl.nist.gov/fipspubs/fip46-2.htm)找到
- en: To learn more about AES encryption, please review processing standards publication
    published by the NIST available at [http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于AES加密的信息，请查阅NIST发布的处理标准出版物，可在[http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)找到
- en: To learn more about Cryptographic Services used in the iOS implementation, please
    review Apples documentation available at [https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011172-CH1-SW1](https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于iOS实现中使用的加密服务，请查阅苹果的文档，可在[https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011172-CH1-SW1](https://developer.apple.com/library/mac/#documentation/security/Conceptual/cryptoservices/Introduction/Introduction.html)找到
- en: To learn more about Cryptographic Ciphers used in the Android implementation,
    please review the Android documentation available at [http://developer.android.com/reference/javax/crypto/Cipher.html](http://developer.android.com/reference/javax/crypto/Cipher.html)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Android实现中使用的加密算法，请查阅位于[http://developer.android.com/reference/javax/crypto/Cipher.html](http://developer.android.com/reference/javax/crypto/Cipher.html)的Android文档。
- en: Working with encrypted files
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理加密文件
- en: File encryption is a fundamental building block for enterprise mobile development.
    Due to the sensitivity of data collected by most enterprise apps, it is recommended
    that all persisted files are encrypted.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 文件加密是企业移动开发的基本构建块。由于大多数企业应用收集的数据敏感性，建议所有持久化文件都进行加密。
- en: This recipe demonstrates how to use the `Securely` framework to both encrypt
    and decrypt files. Through the use of the File Crypto sample, we will provide
    step-by-step instructions on how to work with local encrypted files from within
    your Titanium app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱演示了如何使用`Securely`框架对文件进行加密和解密。通过使用文件加密示例，我们将提供逐步说明，说明如何在Titanium应用程序内部处理本地加密文件。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Simply copy the `modules`
    folder into the root of your Titanium project. Please review the *Getting ready*
    section of *Using secure properties* recipe for instructions on module setup before
    continuing.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用`Securely`原生模块。此模块和其他代码资源可以从书中提供的源代码中下载。只需将`modules`文件夹复制到您的Titanium项目根目录。在继续之前，请查阅*使用安全属性*食谱中的*准备就绪*部分，了解模块设置说明。
- en: After installing the `Securely` module, you need to copy the `PlainText.txt`
    file into the `Resources` folder of your project. This file will be used by the
    recipe to create the initial encrypted file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Securely`模块后，您需要将`PlainText.txt`文件复制到项目的`Resources`文件夹中。此文件将由食谱用于创建初始加密文件。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Once you have added the `module` folder and `PlaintText.txt` sample file into
    your project, you need to create your application namespace in the `app.js` file
    and use `require` to import the module into your code as the following code snippet
    demonstrates:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将`module`文件夹和`PlaintText.txt`示例文件添加到您的项目中，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating the UI
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建UI
- en: 'This recipe walks through how to use the `Securely` module along with Titanium''s
    `Ti.Filesystem` namespace to encrypt and decrypt files. The test harness pictured
    in the following screenshot is used to demonstrate how to perform these crypto
    actions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱通过`Securely`模块和Titanium的`Ti.Filesystem`命名空间，逐步说明如何加密和解密文件。以下截图中的测试框架用于演示如何执行这些加密操作：
- en: '![Creating the UI](img/5343_09_03.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![创建UI](img/5343_09_03.jpg)'
- en: 'Now perform the following steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: The first step in creating the test harness is to create a `Ti.UI.Window`, which
    is used to attach all UI elements.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试框架的第一步是创建一个`Ti.UI.Window`，它用于附加所有UI元素。
- en: '[PRE23]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The next step in creating our test harness UI is to add a `Ti.UI.TextField`
    named `txtPassword`. This control is used to obtain the password used during the
    encryption and decryption operations.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试框架UI的下一步是添加一个名为`txtPassword`的`Ti.UI.TextField`。此控件用于获取加密和解密操作中使用的密码。
- en: '[PRE24]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnEncrypt`. This control will be used to launch the file encryption process.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试框架UI的下一步是添加一个名为`btnEncrypt`的`Ti.UI.Button`。此控件将用于启动文件加密过程。
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The final step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnDecrypt`. This control will be used to launch the file decryption process.
    Please note the encryption process launched when the `btnEncrypt` button is tapped
    must be run first.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试框架UI的最后一步是添加一个名为`btnDecrypt`的`Ti.UI.Button`。此控件将用于启动文件解密过程。请注意，当`btnEncrypt`按钮被点击时启动的加密过程必须首先运行。
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Encrypting a file
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密文件
- en: The file encryption process is demonstrated using the `click` event of the `btnEncrypt
    Ti.UI.Button`. This section describes how to use the `AESEncrypt` method of `Securely`
    for file encryption using the AES encryption algorithm.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`btnEncrypt Ti.UI.Button`的`click`事件演示文件加密过程。本节描述了如何使用`Securely`的`AESEncrypt`方法，通过AES加密算法进行文件加密。
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first step in the file encryption process is to create a callback method
    to receive the results from the `AESEncrypt` method. The following `onEncryptCompleted`
    method demonstrates how to check for the different results provided during the
    callback process.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件加密过程的第一步是创建一个回调方法以接收`AESEncrypt`方法的结果。以下`onEncryptCompleted`方法演示了如何在回调过程中检查提供的结果。
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Next a new instance of the `FileCrypto` object of the `Securely` framework must
    be created.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来必须创建`Securely`框架的`FileCrypto`对象的新实例。
- en: '[PRE29]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then `Ti.FileSystem.File` objects are created for the input and output files.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后为输入和输出文件创建`Ti.FileSystem.File`对象。
- en: '[PRE30]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally the `AESEncrypt` method is called with the following parameters:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下参数调用`AESEncrypt`方法：
- en: '`password`: The `password` parameter is the key used in the file encryption
    process. The same password must be provided later if you wish to decrypt the file.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: `password`参数是在文件加密过程中使用的密钥。如果您希望解密文件，则必须在稍后提供相同的密码。'
- en: '`from`: The `from` parameter provides a `nativePath` reference to the file
    that will be encrypted. Please note the file itself is not encrypted, but simply
    used as the source to generate an encrypted file at the path provided in the `to`
    parameter.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from`: `from`参数提供了将要加密的文件的`nativePath`引用。请注意，文件本身不会被加密，而是作为源在`to`参数提供的路径上生成加密文件的依据。'
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the encrypted
    file should be generated. The application must be able to write to this file path
    or an IO exception will be generated.'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`: `to`参数提供了生成加密文件的`nativePath`引用。应用程序必须能够写入此文件路径，否则将生成IO异常。'
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `AESEncrypt` method.'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completed`: `completed`参数提供了在`AESEncrypt`方法执行完成后要使用的回调方法的引用。'
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Decrypting a file
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解密文件
- en: The file decryption process is demonstrated using the `click` event of the `btnDecrypt
    Ti.UI.Button`. The following section describes how to use `AESDecrypt` method
    of `Securely` for file decryption using the AES encryption algorithm. Please note
    that the same password used to encrypt the file must be provided in the decryption
    process.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`btnDecrypt Ti.UI.Button`的`click`事件演示文件解密过程。以下部分描述了如何使用`Securely`的`AESDecrypt`方法，通过AES加密算法进行文件解密。请注意，用于加密文件的相同密码必须在解密过程中提供。
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The first step in the file decryption process is to create a callback method
    to receive the results from the `AESDecrypt` method. The following `onDecryptCompleted`
    method demonstrates how to check for the different results provided during the
    callback process:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件解密过程的第一步是创建一个回调方法以接收`AESDecrypt`方法的结果。以下`onDecryptCompleted`方法演示了如何在回调过程中检查提供的结果：
- en: '[PRE33]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next the `Ti.FileSystem.File` objects are created for the input and output files.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来为输入和输出文件创建`Ti.FileSystem.File`对象。
- en: '[PRE34]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then a new instance of the `FileCrypto` object of `Securely` must be created.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建`Securely`的`FileCrypto`对象的新实例。
- en: '[PRE35]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally the `AESDecrypt` method is called with the following parameters:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下参数调用`AESDecrypt`方法：
- en: '`password`: The `password` parameter is the key used in the file decryption
    process. This password must match the key provided during the file encryption
    process. If the passwords differ, an error will be provided to the callback method.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: `password`参数是在文件解密过程中使用的密钥。此密码必须与文件加密过程中提供的密钥匹配。如果密码不同，将向回调方法提供错误。'
- en: '`from`: The `from` parameter provides a `nativePath` reference to the file
    that will be decrypted. Please note the file itself is not decrypted, but simply
    used as the source to generate a decrypted file at the path provided in the `to`
    parameter.'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from`: `from`参数提供了将要解密的文件的`nativePath`引用。请注意，文件本身不会被解密，而是作为源在`to`参数提供的路径上生成解密文件的依据。'
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the decrypted
    file should be generated. The application must be able to write to this file path
    or an IO exception will be generated.'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`: `to`参数提供了生成解密文件的`nativePath`引用。应用程序必须能够写入此文件路径，否则将生成IO异常。'
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `AESDecrypt` method.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completed`: `completed`参数提供了在`AESDecrypt`方法执行完成后要使用的回调方法的引用。'
- en: '[PRE36]'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See also
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `Securely` module, for installation details please review
    the *Getting ready* section of the *Using secure properties* recipe
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此配方使用`Securely`模块，有关安装详情，请参阅*准备就绪*部分中的*使用安全属性*配方。
- en: '`Securely` uses the `RNCryptor` library on iOS for file encryption. For documentation,
    licensing, and source, please visit [https://github.com/rnapier/RNCryptor](https://github.com/rnapier/RNCryptor)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Securely`在iOS上使用`RNCryptor`库进行文件加密。有关文档、许可和源代码，请访问[https://github.com/rnapier/RNCryptor](https://github.com/rnapier/RNCryptor)'
- en: Handling protected PDFs on iOS
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS上处理受保护的PDF文件
- en: Working with and exchanging PDF files is common practice within a majority of
    organizations. Apple has provided APIs within iOS native access to lock and unlock
    PDF documents making implementing secure practices for this file format much easier.
    The `Securely` module exposes these native iOS APIs for your Titanium app to leverage.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数组织中，处理和交换PDF文件是常见的做法。苹果在iOS原生访问中提供了API，用于锁定和解锁PDF文档，这使得为该文件格式实现安全实践变得容易得多。`Securely`模块公开了这些原生iOS
    API，以便您的Titanium应用程序可以利用。
- en: This recipe demonstrates how to use the `Securely` framework to lock and unlock
    PDF files. Through the use of the PDF Locker sample, we will provide step-by-step
    instructions on how to protect and work with PDFs on the local device from within
    your Titanium app.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了如何使用`Securely`框架来锁定和解锁PDF文件。通过使用PDF Locker示例，我们将提供逐步说明，说明如何在您的Titanium应用程序中从本地设备保护并处理PDF文件。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into your project
    as shown in the following screenshot. Next copy the `w4.pdf` file into the `Resources`
    folder of your project. This file will be used by the recipe to create the initial
    encrypted file:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用`Securely`原生模块。此模块和其他代码资源可以从本书提供的源代码中下载。在项目中安装这些资源很简单。只需将`modules`文件夹复制到您的项目中，如图所示。然后，将`w4.pdf`文件复制到您的项目中的`Resources`文件夹。此文件将由配方用于创建初始加密文件：
- en: '![Getting ready](img/5343_09_04.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_09_04.jpg)'
- en: After copying the `modules` folder, you will need to update the `tiapp.xml`
    references as demonstrated in the *Getting ready* section of the *Using secure
    properties* recipe.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制`modules`文件夹后，您需要更新`tiapp.xml`引用，如*准备就绪*部分中的*使用安全属性*配方中所示。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `module` folder and `w4.pdf` sample file into your
    project, you need to create your application namespace in the `app.js` file and
    use `require` to import the module into your code as the following code snippet
    demonstrates:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将`module`文件夹和`w4.pdf`样本文件添加到您的项目中，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE37]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Creating the recipe's UI
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建配方的UI
- en: 'This recipe walks through how to use the `Securely` module along with Titanium''s
    `Ti.FileSystem` namespace to lock or unlock PDF files. The test harness pictured
    in the following screenshot is used to demonstrate how to perform these secure
    PDF actions:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方介绍了如何使用`Securely`模块以及Titanium的`Ti.FileSystem`命名空间来锁定或解锁PDF文件。以下屏幕截图中的测试工具用于演示如何执行这些安全的PDF操作：
- en: '![Creating the recipe''s UI](img/5343_09_05.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![创建配方的UI](img/5343_09_05.jpg)'
- en: 'Now perform the following steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: The first step in creating this test harness is a `Ti.UI.Window`, which is created
    to attach all UI elements.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建此测试工具的第一步是创建一个`Ti.UI.Window`，用于附加所有UI元素。
- en: '[PRE38]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The next step in creating our test harness UI is to add a `Ti.UI.TextField`
    named `txtPassword`. This control is used to obtain the password used during the
    encryption and decryption operations.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试工具UI的下一步是添加一个名为`txtPassword`的`Ti.UI.TextField`。此控件用于获取加密和解密操作中使用的密码。
- en: '[PRE39]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnLock`. This control will be used to launch the PDF lock/protection process.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试工具UI的下一步是添加一个名为`btnLock`的`Ti.UI.Button`。此控件将用于启动PDF锁定/保护过程。
- en: '[PRE40]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The next step in creating our test harness UI is to add a `Ti.UI.Button` named
    `btnUnlock`. This control will be used to launch the PDF unlock or password removal
    process.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试工具UI的下一步是添加一个名为`btnUnlock`的`Ti.UI.Button`。此控件将用于启动PDF解锁或密码删除过程。
- en: '[PRE41]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Protecting a PDF file
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护PDF文件
- en: 'The PDF protecting or locking process is demonstrated using the `click` event
    of the `btnLock Ti.UI.Button`. The following section describes how to use the
    `protect` method of `Securely` for PDF locking:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `btnLock Ti.UI.Button` 的 `click` 事件演示了 PDF 保护或锁定过程。以下部分描述了如何使用 `Securely`
    的 `protect` 方法进行 PDF 锁定：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The first step in the file decryption process is to create a callback method
    to receive the results from the `AESDecrypt` method. The following `onProtected`
    method demonstrates how to check for the different results provided during the
    callback process.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件解密过程的第一步是创建一个回调方法以接收 `AESDecrypt` 方法的返回结果。以下 `onProtected` 方法演示了如何在回调过程中检查提供的不同结果。
- en: '[PRE43]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Next `Ti.FileSystem.File` objects are created for the input and output files.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `Ti.FileSystem.File` 对象用于输入和输出文件。
- en: '[PRE44]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Then a new instance of the `PDF` object of `Securely` must be created.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，必须创建 `Securely` 的 `PDF` 对象的新实例。
- en: '[PRE45]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally the `protect` method is called with the following parameters:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后调用 `protect` 方法时，使用以下参数：
- en: '`userPassword`: The `userPassword` parameter is the user-level password for
    the PDF. This field is required.'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userPassword`: `userPassword` 参数是 PDF 的用户级密码。此字段是必需的。'
- en: '`ownerPassword`: The `ownerPassword` parameter is the owner-level password
    for the PDF. Although this is optional, this value must be set in order to password-protect
    the document.'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ownerPassword`: `ownerPassword` 参数是 PDF 的所有者级密码。尽管这是可选的，但必须设置此值以对文档进行密码保护。'
- en: '`from`: The `from` parameter provides a `nativePath` reference to the PDF file
    to be protected. Please note that the file itself is not locked, but simply used
    as the source to generate a protected PDF file at the path provided in the `to`
    parameter.'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from`: `from` 参数提供了要保护的 PDF 文件的 `nativePath` 引用。请注意，文件本身并未锁定，而是作为在 `to` 参数提供的路径生成受保护
    PDF 文件的数据源。'
- en: '`to`: The `to` parameter provides the `nativePath` reference to where the protected
    PDF file should be generated. The application must be able to write to this file
    path or an IO exception will be generated.'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`: `to` 参数提供了受保护 PDF 文件应生成的 `nativePath` 引用。应用程序必须能够写入此文件路径，否则将生成 IO 异常。'
- en: '`allowCopy`: The `allowCopy` is a Boolean parameter indicating whether the
    document allows copying when unlocked with the user password. This parameter defaults
    to `true` and is optional.'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowCopy`: `allowCopy` 是一个布尔参数，表示文档在用户密码解锁时是否允许复制。此参数默认为 `true`，且为可选参数。'
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `protect` method.'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completed`: `completed` 参数提供了一个回调方法的引用，用于在 `protect` 方法的执行完成后使用。'
- en: '[PRE46]'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Unlocking a PDF file
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解锁 PDF 文件
- en: 'The process of unlocking or removing PDF protection from an existing PDF file
    is demonstrated using the `click` event of the `btnUnlock Ti.UI.Button`. The following
    steps describes how to use the `punprotect` method of `Securely` for PDF unlocking:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `btnUnlock Ti.UI.Button` 的 `click` 事件演示了解锁或从现有 PDF 文件中移除 PDF 保护的过程。以下步骤描述了如何使用
    `Securely` 的 `unprotect` 方法进行 PDF 解锁：
- en: '[PRE47]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The first step in unlocking a protected PDF file is to create a callback method
    to receive the results from the `unprotect` method. The following `onUnlock` method
    demonstrates how to check for the different results provided during the callback
    process.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解锁受保护 PDF 文件的第一步是创建一个回调方法以接收 `unprotect` 方法的返回结果。以下 `onUnlock` 方法演示了如何在回调过程中检查提供的不同结果。
- en: '[PRE48]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next the `Ti.FileSystem.File` objects are created for the input and output files.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `Ti.FileSystem.File` 对象用于输入和输出文件。
- en: '[PRE49]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Then, a new instance of the `PDF` object of `Securely` must be created.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，必须创建 `Securely` 的 `PDF` 对象的新实例。
- en: '[PRE50]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally the `unprotect` method is called with the following parameters:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下参数调用 `unprotect` 方法：
- en: '`password`: The password parameter is the key used to unlock the protected
    PDF file. This password must match the owner password used in locking the document.'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: 密码参数是解锁受保护 PDF 文件使用的密钥。此密码必须与锁定文档时使用的所有者密码匹配。'
- en: '`from`: The from parameter provides a nativePath reference to the protected
    PDF file. Please note the PDF file itself is not unlocked, but simply used as
    the source to generate a new unlocked PDF file at the path provided in the to
    parameter.'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from`: `from` 参数提供了受保护 PDF 文件的 nativePath 引用。请注意，PDF 文件本身并未解锁，而是作为在 `to` 参数提供的路径生成新解锁
    PDF 文件的数据源。'
- en: '`to`: The to parameter provides the nativePath reference to where the unlocked
    PDF file should be generated. The application must be able to write to this file
    path or an IO exception will be generated.'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`：`to` 参数提供了解锁PDF文件应生成的nativePath引用。应用程序必须能够写入此文件路径，否则将生成IO异常。'
- en: '`completed`: The `completed` parameter provides a reference to the callback
    method to be used upon completion of the execution of the `unprotect` method.'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completed`：`completed` 参数提供了对在执行 `unprotect` 方法完成后要使用的回调方法的引用。'
- en: '[PRE51]'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: See also
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `Securely` module. For installation details, please review
    the *Getting ready* section of the *Using secure properties* recipe.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此菜谱使用 `Securely` 模块。有关安装详情，请参阅 *使用安全属性* 菜谱中的准备就绪部分。
- en: Android lock screen monitor
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 锁屏监控
- en: Due to the inherent nature of Titanium Android architecture, it can be challenging
    to determine when the app has been placed into the background or the lock screen
    has been activated. These actions are important life cycle events to track for
    password and application access. For example, you might wish to display a login
    screen within your app if the user has locked their device since last entering
    your app.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 由于钛金Android架构的固有性质，确定应用何时被置于后台或锁屏被激活可能具有挑战性。这些动作是跟踪密码和应用程序访问的重要生命周期事件。例如，如果您希望用户在最后进入您的应用后锁定了设备，您可能希望在您的应用中显示登录界面。
- en: The following recipe demonstrates how to use the `Securely` framework to check
    if the user has a lock screen pattern enabled and fire an event when the screen
    is locked or unlocked.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下菜谱演示了如何使用 `Securely` 框架检查用户是否启用了锁屏图案，并在屏幕锁定或解锁时触发事件。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe uses the `Securely` native module. This module and other code assets
    can be downloaded from the source provided by the book. Installing these in your
    project is straightforward. Simply copy the `modules` folder into your project
    as shown in the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用 `Securely` 原生模块。此模块和其他代码资源可以从书籍提供的源中下载。在项目中安装这些资源非常简单。只需将 `modules` 文件夹复制到您的项目中，如下面的屏幕截图所示：
- en: '![Getting ready](img/5343_09_06.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_09_06.jpg)'
- en: After copying the `modules` folder, you will need to update the `tiapp.xml`
    references as demonstrated in the Getting ready section of the *Using secure properties*
    recipe.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制 `modules` 文件夹后，您需要更新 `tiapp.xml` 引用，如 *使用安全属性* 菜谱中的准备就绪部分所示。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `module` folder into your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将 `module` 文件夹添加到项目中，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require` 将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE52]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Creating the recipe's UI
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建菜谱的UI
- en: This recipe uses a single `Ti.UI.Window` object to host and demonstrate the
    different available lock screen methods and events. The following code snippet
    shows how this object is created.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用单个 `Ti.UI.Window` 对象来托管和演示不同的可用锁屏方法和事件。以下代码片段显示了如何创建此对象。
- en: '[PRE53]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Verifying if the lock pattern is enabled
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证是否启用了锁屏图案
- en: This recipe is dependent on the user enabling a passcode or lock pattern. If
    this feature is not enabled, the recipe will still function by simply providing
    when the screen has been disabled from a power consumption standpoint.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱依赖于用户启用密码或锁屏图案。如果此功能未启用，菜谱将通过简单地提供屏幕从功耗角度被禁用的时刻来继续工作。
- en: 'The following steps discuss how to verify if the user has enabled the lock
    screen functionality:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤讨论了如何验证用户是否启用了锁屏功能：
- en: 'The first step is to create a new `Securely.Platform` proxy as shown in the
    following code snippet:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个新的 `Securely.Platform` 代理，如下面的代码片段所示：
- en: '[PRE54]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `Securely.Platform` proxy provides many security-related methods. When the
    `lockPatternEnabled` method is called, a Boolean is provided indicating if the
    user has enabled this feature on their device.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Securely.Platform` 代理提供了许多与安全相关的函数。当调用 `lockPatternEnabled` 方法时，会提供一个布尔值，表示用户是否已在他们的设备上启用了此功能。'
- en: '[PRE55]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on your organization's passcode policy, you may wish to disable the
    app if a lock screen has not been implemented.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据您组织的密码策略，您可能希望如果未实现锁屏，则禁用应用程序。
- en: Creating a Lock Helper
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建锁屏助手
- en: 'The `Securely.LockScreenHelper` proxy object provides the initialization methods
    needed to start monitoring lock screen activity. The following code snippet demonstrates
    how to use this proxy to start the monitoring process:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`Securely.LockScreenHelper` 代理对象提供了启动监控锁屏活动所需的初始化方法。以下代码片段展示了如何使用此代理来启动监控过程：'
- en: 'The first step in the lock screen monitoring process is to create a new `Securely.LockScreenHelper`
    proxy as shown in the following code snippet:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 锁屏监控过程的第一步是创建一个新的 `Securely.LockScreenHelper` 代理，如下面的代码片段所示：
- en: '[PRE56]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Next the `startMonitorForScreenOff` method is called. This registers a broadcast
    receiver to listen for the `ACTION_SCREEN_OFF` broadcast.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后调用 `startMonitorForScreenOff` 方法。这注册了一个广播接收器来监听 `ACTION_SCREEN_OFF` 广播。
- en: '[PRE57]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Then the `startMonitorForScreenOn` method is called. This registers a broadcast
    receiver to listen for the `ACTION_SCREEN_ON` broadcast.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后调用 `startMonitorForScreenOn` 方法。这注册了一个广播接收器来监听 `ACTION_SCREEN_ON` 广播。
- en: '[PRE58]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Screen lock events
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 屏幕锁定事件
- en: 'Both the `startMonitorScreenOff` and `startMonitorScreenOn` methods described
    earlier will emit global events when their subscribed broadcast is received. The
    following snippet demonstrates how to create application listeners to subscribe
    to these events:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 之前描述的 `startMonitorScreenOff` 和 `startMonitorScreenOn` 方法在接收到它们订阅的广播时都会触发全局事件。以下代码片段展示了如何创建应用程序监听器来订阅这些事件：
- en: '[PRE59]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Each event is provided information to assist in managing your app state. Using
    the prior example snippet, the `e` argument is provided two properties by Securely.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 每个事件都提供了信息以帮助管理您的应用程序状态。使用先前的示例代码片段，`e` 参数由 Securely 提供了两个属性。
- en: '`actionName`: This is the full Android intent action name.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionName`：这是完整的 Android 意图动作名称。'
- en: '`actionTime`: This provides date/time in seconds format on when the last event
    was called. This can be converted into a JavaScript date using `new Date(e.actionTime)`.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actionTime`：这提供了最后事件被调用时的日期/时间，以秒格式。这可以通过 `new Date(e.actionTime)` 转换为 JavaScript
    日期。'
- en: Using window focus for monitoring
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用窗口焦点进行监控
- en: This recipe uses the `focus` event on the example `Ti.UI.Window` to demonstrate
    how to check if the device has been locked since the last time the `Ti.UI.Window`
    had focus. One use of this pattern would be to check if an internal passcode screen
    should be presented or to check if a session needs to be re-established.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用示例 `Ti.UI.Window` 上的 `focus` 事件来演示如何检查自 `Ti.UI.Window` 上次获得焦点以来设备是否已被锁定。此模式的一个用途可能是检查是否应该展示内部密码屏幕，或者检查是否需要重新建立会话。
- en: '[PRE60]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `wasLocked` method is called to determine if the device has been locked.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `wasLocked` 方法来确定设备是否已被锁定。
- en: '[PRE61]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `isShowingLockScreen` method can also be used to determine if the device
    is currently presenting the lock screen to the user.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`isShowingLockScreen` 方法也可以用来确定设备是否当前向用户展示锁屏界面。'
- en: '[PRE62]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `resetMonitorForScreenOff` method can also be used to reset the value returned
    by `wasLocked`. This is helpful in tracking if the device has been locked between
    app sessions.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resetMonitorForScreenOff` 方法也可以用来重置 `wasLocked` 返回的值。这在跟踪设备在应用程序会话之间是否被锁定时很有帮助。'
- en: '[PRE63]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Stop monitoring
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 停止监控
- en: It is important to stop monitoring and remove the global listeners when the
    app no longer needs this functionality. The following code snippet demonstrates
    how this is performed using the `close` event of the `Ti.UI.Window`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序不再需要此功能时，重要的是停止监控并移除全局监听器。以下代码片段展示了如何使用 `Ti.UI.Window` 的 `close` 事件来完成此操作。
- en: '[PRE64]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Monitoring can be stopped individually by using `stopMonitorForScreenOff` or
    `stopMonitorForScreenOn`. To stop all monitoring, the `stopMonitoring` convenience
    method can be used to remove both receivers.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用 `stopMonitorForScreenOff` 或 `stopMonitorForScreenOn` 单独停止监控。要停止所有监控，可以使用
    `stopMonitoring` 便利方法来移除两个接收器。
- en: See also
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about the `android.intent.action.SCREEN_ON` and `android.intent.action.SCREEN_OFF`
    intents used, please visit the official Android documentation available at [http://developer.android.com/reference/android/content/Intent.html](http://developer.android.com/reference/android/content/Intent.html).
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 `android.intent.action.SCREEN_ON` 和 `android.intent.action.SCREEN_OFF`
    意图的信息，请访问官方 Android 文档，网址为 [http://developer.android.com/reference/android/content/Intent.html](http://developer.android.com/reference/android/content/Intent.html)。
- en: This recipe uses the `Securely` module. For installation details, please review
    the *Getting ready* section of the *Using secure properties* recipe.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此配方使用 `Securely` 模块。有关安装详情，请参阅 *Using secure properties* 配方的 *准备就绪* 部分。
