- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 入门
- en: Every Web developer must have come across it every once in a while, even if
    they just dabble in simple Web pages. Whenever you want to make your Web page
    a little more interactive, you grab your trustworthy friends, such as JavaScript
    and jQuery, and hack together something new. You might have developed some exciting
    frontend applications using AngularJS or Backbone and want to learn more about
    what else you can do with JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Web开发人员都必须偶尔遇到它，即使他们只是涉足简单的网页。每当您想要使您的网页更加交互式时，您会使用您值得信赖的朋友，比如JavaScript和jQuery，并一起开发一些新的东西。您可能已经使用AngularJS或Backbone开发了一些令人兴奋的前端应用程序，并且想了解您可以用JavaScript做些什么。
- en: While testing your website on multiple browsers you must have come across Google
    Chrome at some point and you might have noticed that it is a great platform for
    JavaScript applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个浏览器上测试您的网站时，您可能会偶尔遇到谷歌浏览器，并且您可能已经注意到它是JavaScript应用程序的一个很好的平台。
- en: 'Google Chrome and Node.js have something very big in common: they both work
    on Google''s high-performance V8 JavaScript engine, this gives us the same engine
    in the browser that we will be using in the backend, pretty cool, right?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌浏览器和Node.js有一个非常大的共同点：它们都在谷歌的高性能V8 JavaScript引擎上运行，这使我们在浏览器中使用的引擎与后端使用的引擎相同，非常酷，对吧？
- en: Setting up
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: In order to get started and use Node.js, we need to download and install Node.js.
    The best way to install it will be to head over to [https://nodejs.org/](https://nodejs.org/)
    and download the installer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用Node.js，我们需要下载并安装Node.js。最好的安装方式是前往[https://nodejs.org/](https://nodejs.org/)并下载安装程序。
- en: At the time of writing, the current version of Node.js is 4.2.1.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，当前版本的Node.js是4.2.1。
- en: To ensure consistency, we are going to use a `npm` package to install the correct
    version of Node.JS and, for this, we are going to use the `n` package described
    at [https://www.npmjs.com/package/n](https://www.npmjs.com/package/n).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保一致性，我们将使用`npm`包来安装正确版本的Node.JS，为此，我们将使用[https://www.npmjs.com/package/n](https://www.npmjs.com/package/n)中描述的`n`包。
- en: Currently, this package has support only for `*nix` machines. For Windows. see
    nvm-windows or download the binary for 4.2.1 from [https://nodejs.org/dist/v4.2.1/](https://nodejs.org/dist/v4.2.1/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个包只支持`*nix`机器。对于Windows，请参见nvm-windows或从[https://nodejs.org/dist/v4.2.1/](https://nodejs.org/dist/v4.2.1/)下载二进制文件。
- en: 'Once you have Node.js installed, open a terminal and run:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Node.js，打开终端并运行：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `–g` argument will install the package globally so we can use the package
    anywhere.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`-g`参数将全局安装包，这样我们就可以在任何地方使用这个包。'
- en: Linux users may need to run commands that install global packages as `sudo`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户可能需要运行安装全局包的命令作为`sudo`。
- en: 'Using the recently install package, run:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最近安装的包，运行：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will display a screen with the following packages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个包含以下包的屏幕：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If `node/4.2.1` isn''t marked we can simply run the following packages; this
    will ensure that `node/4.2.1` gets installed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`node/4.2.1`没有标记，我们可以简单地运行以下包；这将确保安装`node/4.2.1`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To ensure that the `node` is good-to-go, lets create and run a simple `hello
    world` example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保`node`运行正常，让我们创建并运行一个简单的`hello world`示例：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Cool, it works; now let's get down to business.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，它起作用了；现在让我们开始做正事。
- en: Hello require
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello require
- en: In the preceding example, we just logged a simple message, nothing interesting,
    so let's dive a bit deeper in this section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们只是记录了一个简单的消息，没有什么有趣的，所以让我们在这一部分深入一点。
- en: 'When using multiple scripts in the browser, we usually just include another
    script tag such as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使用多个脚本时，我们通常只需要包含另一个脚本标签，如：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both these scripts share the same global scope, this usually leads to some unusual
    conflicts when people want to give variables the same name.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个脚本共享相同的全局范围，这通常会导致一些不寻常的冲突，当人们想要给变量赋予相同的名称时。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This can lead to confusion, and when many files are minified and crammed together
    it causes a problem; `script_a` declares a global variable, which is then declared
    again in `script_b` and, on running the code, we see the following on the console:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致混乱，当许多文件被压缩并挤在一起时会导致问题；`script_a`声明了一个全局变量，然后在`script_b`中再次声明，运行代码时，我们在控制台上看到以下内容：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The most common method to get around this and to limit the pollution of the
    global scope is to wrap our files with an anonymous function, as shown:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题并限制全局范围的污染最常见的方法是将我们的文件包装在一个匿名函数中，如下所示：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now when we run this, it works as expected:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行这个时，它按预期工作：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is good for code that isn’t depended upon externally, but what do we do
    for the code that is? We just *export* it, right?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于不依赖外部的代码来说是很好的，但是对于依赖外部代码的代码该怎么办呢？我们只需要*导出*它，对吧？
- en: 'Something similar to the following code will do:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似以下代码将会起作用：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, when we run this script, we can access Logger from the global scope:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行这个脚本时，我们可以从全局范围访问Logger：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So now we can share our libraries and everything is good; But what if someone
    else already has a library that exposes the same `Logger` class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们可以分享我们的库，一切都很好；但是如果其他人已经有一个暴露相同`Logger`类的库呢。
- en: What does `node` do to solve this issue? Hello require!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`node`是如何解决这个问题的呢？Hello require！'
- en: Node.js has a simple way to bring in scripts and modules from external sources,
    comparable to require in PHP.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有一种简单的方式来从外部来源引入脚本和模块，类似于PHP中的require。
- en: 'Lets create a few files in this structure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这个结构中创建一些文件：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can see that `main.js`. is dependent on `util/index.js`, which is in turn
    dependent on `util/logger.js`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`main.js`依赖于`util/index.js`，而`util/index.js`又依赖于`util/logger.js`。
- en: 'This should just work right? Maybe not. Let''s run the command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该可以正常工作吧？也许不是。让我们运行命令：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So why is this? Shouldn't they be sharing the same global scope? Well, in Node.js
    the story is a bit different. Remember those anonymous functions that we were
    wrapping our files in earlier? Node.js wraps our scripts in them automatically
    and this is where require fits in.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么会这样呢？它们不应该共享相同的全局范围吗？嗯，在Node.js中，情况有些不同。还记得我们之前包装文件的那些匿名函数吗？Node.js会自动将我们的脚本包装在其中，这就是Require适用的地方。
- en: 'Lets fix our files, as shown:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复我们的文件，如下所示：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you notice, I didn't use `index.js` when requiring `util/index.js`; the reason
    for this is that when you a require a folder rather than a file you can specify
    an index file that can represent that folder's code. This can be handy for something
    such as a model folder where you expose all your models in one require rather
    than having a separate require for each model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到，我在需要`util/index.js`时没有使用`index.js`；原因是当您需要一个文件夹而不是一个文件时，您可以指定一个代表该文件夹代码的索引文件。这对于像模型文件夹这样的东西非常方便，您可以在一个require中公开所有模型，而不是为每个模型单独require。
- en: So now, we have required our files. But what do we get back?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经需要了我们的文件。但是我们得到了什么？
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Still, there is no logger. We have missed an important step; we haven't told
    Node.js what we want to expose in our files.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，还没有日志记录器。我们错过了一个重要的步骤；我们没有告诉Node.js我们想要在我们的文件中公开什么。
- en: 'To expose something in Node.js, we use an object called `module.exports`. There
    is a shorthand reference to it that is just *exports*. When our file is wrapped
    in an anonymous function, both *module* and *exports* are passed as a parameter,
    as shown in the following example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Node.js中公开某些内容，我们使用一个名为`module.exports`的对象。有一个简写引用，就是*exports*。当我们的文件包装在一个匿名函数中时，*module*和*exports*都作为参数传递，如下例所示：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: The example shows that *exports* is initially just a reference to `module.exports`.
    This means that, if you use `exports = { }`, the value you set it as won't be
    accessible outside the function's scope. However, when you add properties to an
    *exports* object, you are actually adding properties to the `module.exports` object
    as they are both the same value. Assigning a value to `module.exports` will export
    that value because it is accessible outside the function's scope through the module.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 示例显示*exports*最初只是对`module.exports`的引用。这意味着，如果您使用`exports = { }`，则您设置的值在函数范围之外将无法访问。但是，当您向*exports*对象添加属性时，实际上是向`module.exports`对象添加属性，因为它们都是相同的值。将值分配给`module.exports`将导出该值，因为它可以通过模块在函数范围之外访问。
- en: 'With this knowledge, we can finally run our script in the following manner:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个知识，我们最终可以以以下方式运行我们的脚本：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Running `main.js`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`main.js`：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Require can also be used to include modules in our code. When requiring modules,
    we don't need to use a file path, we just need the name of the `node` module that
    we want.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用Require在我们的代码中包含模块。在需要模块时，我们不需要使用文件路径，只需要使用我们想要的`node`模块的名称。
- en: Node.js includes many prebuilt core modules, one of which is the `util` module.
    You can find details on the `util` module at [https://nodejs.org/api/util.html](https://nodejs.org/api/util.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js包括许多预构建的核心模块，其中之一是`util`模块。您可以在[https://nodejs.org/api/util.html](https://nodejs.org/api/util.html)找到`util`模块的详细信息。
- en: 'Let''s see the `util` module command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`util`模块命令：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Hello npm
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好npm
- en: Along with internal modules there is also an entire ecosystem of packages; the
    most common package manager for Node.js is `npm`. At the time of writing, there
    are a total of 192,875 packages available.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内部模块之外，还有一个完整的包生态系统；Node.js最常见的包管理器是`npm`。截至目前，共有192,875个可用的包。
- en: We can use `npm` to access packages that do many things for us, from routing
    HTTP requests to building our projects. You can also browse the packages available
    at [https://www.npmjs.com/](https://www.npmjs.com/).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`npm`来访问为我们执行许多操作的包，从路由HTTP请求到构建我们的项目。您还可以浏览[https://www.npmjs.com/](https://www.npmjs.com/)上提供的包。
- en: Using a package manager you can bring in other modules, which is great as you
    can spend more time working on your business logic rather than reinventing the
    wheel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包管理器，您可以引入其他模块，这很好，因为您可以花更多时间在业务逻辑上，而不是重新发明轮子。
- en: 'Let''s download the following package to make our log messages colorful:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载以下包，使我们的日志消息变得丰富多彩：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, to use it, create a file and require it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使用它，创建一个文件并需要它：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: On running this code, you will see the first message in a default color and
    the second message in blue. Let's look at the command:.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码时，您将看到默认颜色的第一条消息和蓝色的第二条消息。让我们看看这个命令：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Having the ability to download existing packages comes in handy when you require
    something that someone else has already implemented. As we said earlier, there
    are many packages out there to choose from.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要某个其他人已经实现的东西时，下载现有包的能力非常方便。正如我们之前所说，有很多可供选择的包。
- en: 'We need to keep track of these dependencies and there is a simple solution
    to that: `package.json`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要跟踪这些依赖关系，有一个简单的解决方案：`package.json`。
- en: Using `package.json` we can define things, such as the name of our project,
    what the main script is, how to run tests, our dependencies, and so on. You can
    find a full list of properties at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`package.json`，我们可以定义诸如项目名称、主要脚本是什么、如何运行测试、我们的依赖关系等内容。您可以在[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)找到属性的完整列表。
- en: '`npm` provides a handy command to create these files and it will ask you the
    relevant questions needed to create your `package.json` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`提供了一个方便的命令来创建这些文件，并且会询问您创建`package.json`文件所需的相关问题：'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding utility will walk you through the creation of a `package.json`
    file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述实用程序将引导您完成创建`package.json`文件的过程。
- en: It only covers the most common items and tries to guess valid defaults.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它只涵盖了最常见的项目，并尝试猜测有效的默认值。
- en: Run the `npm help json` command for definitive documentation on these fields
    and to know what they do exactly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm help json`命令以获取有关这些字段的最终文档，并了解它们的确切作用。
- en: Afterwards, use `npm` and install `<pkg> --save` to install a package and save
    it as a dependency in the `package.json` file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用`npm`和安装`<pkg> --save`来安装一个包并将其保存为`package.json`文件中的依赖项。
- en: 'Press `^C` to quit at any time:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按`^C`随时退出：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The utility will provide you with default values, so it is easier to just skip
    through them using the *Enter* key.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该实用程序将为您提供默认值，因此最好只需使用*Enter*键跳过它们。
- en: 'Now when installing our package we can use the `--save` option to save `chalk`
    as a dependency, as shown:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在安装我们的包时，我们可以使用`--save`选项将`chalk`保存为依赖项，如下所示：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can see chalk has been added:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到chalk已经被添加了：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can add these dependencies manually by modifying `package.json`; this is
    the most common method to save dependencies on installation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过修改`package.json`文件手动添加这些依赖项；这是保存依赖项的最常见方法。
- en: 'You can read more about the package file at: [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处阅读有关包文件的更多信息：[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)。
- en: If you are creating a server or an application rather than a module, you most
    likely want to find a way to start your process without having to give a path
    to your main file all the time; this is where the script object in your `package.json`
    file comes into play.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在创建服务器或应用程序而不是模块，您很可能希望找到一种方法，以便无需始终提供主文件的路径来启动您的进程；这就是`package.json`文件中的脚本对象发挥作用的地方。
- en: 'To set your start up script, you just need to set the `start` property in the
    `scripts` object, as shown:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置启动脚本，您只需在`scripts`对象中设置`start`属性，如下所示：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, all we need to do is run `npm` start and then `npm` will run the start
    script we have already specified.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要做的就是运行 `npm` start，然后 `npm` 将运行我们已经指定的启动脚本。
- en: We can define more scripts, for example if we want a start script for the development
    environment we can also define a development property; with non-standard script
    names however, instead of just using `npm <script>`, we need to use `npm run <script>`.
    For example, if we want to run our new development script we will have to use
    `npm run development`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义更多的脚本，例如，如果我们想要一个用于开发环境的启动脚本，我们也可以定义一个开发属性；但是，对于非标准的脚本名称，我们需要使用`npm run
    <script>`而不是只使用`npm <script>`。例如，如果我们想要运行我们的新开发脚本，我们将不得不使用`npm run development`。
- en: '`npm` has scripts that are triggered at different times. We can define a `postinstall`
    script that runs after we run `npm install`; we can use this if we want to trigger
    a package manager to install the modules (for example, bower)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`具有在不同时间触发的脚本。我们可以定义一个`postinstall`脚本，该脚本在运行`npm install`后运行；如果我们想要触发包管理器来安装模块（例如，bower），我们可以使用这个。'
- en: 'You can read more about the scripts object here: [https://docs.npmjs.com/misc/scripts](https://docs.npmjs.com/misc/scripts).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处阅读有关脚本对象的更多信息：[https://docs.npmjs.com/misc/scripts](https://docs.npmjs.com/misc/scripts)。
- en: 'You need to define a package if you are working in a team of developers where
    the project is to be installed on different machines. If you are using a source
    control tool such as **git**, it is recommended that you add the `node_modules`
    directory into your ignore file, as shown:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在团队开发中工作，需要定义一个包，其中项目将安装在不同的机器上。如果您使用诸如**git**之类的源代码控制工具，建议您将`node_modules`目录添加到您的忽略文件中，如下所示：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That was quick, wasn't it? We have covered the fundamentals of Node.js, which
    we need to continue on our journey.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这很快，不是吗？我们已经涵盖了我们继续旅程所需的Node.js的基础知识。
- en: We have covered how easy it is to expose and protect public and private code
    compared to regular JavaScript code in the browser, where the global scope can
    get very polluted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了相对于常规JavaScript代码在浏览器中，如何轻松地暴露和保护公共和私有代码，全局范围可能会受到严重污染。
- en: We also know how to include packages and code from external sources and how
    to ensure that the packages included are consistent.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还知道如何从外部源包括包和代码，以及如何确保所包含的包是一致的。
- en: As you can see there is a huge ecosystem of packages in one of the many package
    managers, such as `npm`, just waiting for us to use and consume.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在许多包管理器中有一个庞大的包生态系统，例如`npm`，正等待我们使用和消耗。
- en: In the next chapter, we will focus on creating a simple server to route, authenticate,
    and consume requests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于创建一个简单的服务器来路由、认证和消耗请求。
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为Bentham Chang准备，Safari ID为bentham@gmail.com 用户编号：2843974 © 2015 Safari Books
    Online，LLC。此下载文件仅供个人使用，并受到服务条款的约束。任何其他用途均需版权所有者的事先书面同意。未经授权的使用、复制和/或分发严格禁止，并违反适用法律。保留所有权利。
