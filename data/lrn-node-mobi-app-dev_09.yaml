- en: Chapter 9. Accessing Native Phone Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 访问本机电话功能
- en: The main thing that sets hybrid apps apart from ordinary, mobile-friendly web
    apps is the ability to interact with the operating system and hardware of the
    underlying mobile device. Modern devices offer a plethora of services to app developers,
    from GPS and database functionality to Bluetooth, NFC, and other communication
    technologies. Making good use of these services allows us to build apps that meet
    the needs of mobile users in the best way possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将混合应用与普通的移动友好型Web应用区分开来的主要是与底层移动设备的操作系统和硬件进行交互的能力。现代设备为应用程序开发人员提供了大量的服务，从GPS和数据库功能到蓝牙、NFC和其他通信技术。充分利用这些服务可以让我们构建出最好地满足移动用户需求的应用程序。
- en: In this chapter, we will continue building on the brief introduction to mobile
    services that we saw in the last chapter, and we'll do some refreshing as necessary.
    Our goal is to use the GPS receiver, which is one of the most ubiquitous smartphone
    features, in order to build a simple navigation app. In doing so, we will also
    get familiar with a new, fundamental AngularJS component called the directive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续在上一章中简要介绍的移动服务的基础上进行构建，并根据需要进行一些刷新。我们的目标是使用GPS接收器，这是最普遍的智能手机功能之一，以构建一个简单的导航应用程序。在这样做的过程中，我们还将熟悉一个新的、基本的AngularJS组件，称为指令。
- en: Creating the project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'We will start off by setting up the basic structure of our app. As before,
    we will go for a blank project and build our app from scratch to make sure that
    we understand how everything works:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先设置应用程序的基本结构。与以前一样，我们将选择一个空白项目，并从头开始构建我们的应用程序，以确保我们理解一切是如何工作的：
- en: 'Create a new project folder for your app. Next, enter into the folder and execute
    the following from your terminal or command line:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的应用程序创建一个新的项目文件夹。接下来，进入该文件夹并从终端或命令行执行以下操作：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Ionic will now download and configure everything you need in order to deploy
    a basic app (albeit not a very interesting one). You can see what it looks like
    by going into your project folder and executing the following command:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ionic现在将下载并配置一切您需要部署一个基本的应用程序（尽管不是一个非常有趣的应用程序）。您可以通过进入您的项目文件夹并执行以下命令来查看它的外观：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of this command is shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下截图所示：
- en: '![Creating the project](img/B04653_09_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目](img/B04653_09_01.jpg)'
- en: Now that we have the basics in place, let's start adding some basic functionality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本的结构，让我们开始添加一些基本功能。
- en: Creating the basic app structure
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本应用程序结构
- en: We want to keep our app as simple as possible—a single screen with a map, together
    with a toolbar where we can place buttons for various utilities, such as finding
    the user's current location.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望尽可能地保持我们的应用程序简单——一个带有地图的单个屏幕，以及一个工具栏，我们可以在其中放置各种实用程序的按钮，例如查找用户当前位置。
- en: Let's create a basic view that meets this requirement.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个满足这一要求的基本视图。
- en: 'Open your app''s `index.html` file and make sure that it looks like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的应用程序的`index.html`文件，并确保它看起来像以下内容：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The browser preview should now look like this (if you closed the server after
    the previous step, feel free to start it up again and leave it running; it will
    automatically load any changes made to the underlying sources):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器预览现在应该是这样的（如果您在上一步关闭了服务器，请随时重新启动并让其运行；它将自动加载对底层源代码所做的任何更改）：
- en: '![Creating the basic app structure](img/B04653_09_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本应用程序结构](img/B04653_09_02.jpg)'
- en: A little bit more content, but nothing exciting as of yet. Have patience; we
    are getting there.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 内容多了一点，但目前还没有什么激动人心的。请耐心等待；我们正在努力。
- en: Integrating Google Maps into the app
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将谷歌地图集成到应用程序中
- en: Next, we want to integrate the most essential feature of our UI—the map. To
    do so, we will use **Google Maps**, one of the most popular map services.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要集成UI最基本的功能——地图。为此，我们将使用**谷歌地图**，这是最受欢迎的地图服务之一。
- en: If you have ever used the Google Maps application on a mobile device or checked
    directions to a location on Google, you are already familiar with what Google
    Maps looks like and some of what it can do. In essence, Google Maps is a complete
    package that offers everything—scalable maps, satellite imagery, geocoding, and
    much more. For our purposes here, it is perfect.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经在移动设备上使用过谷歌地图应用程序或在谷歌上查找过某个地点的方向，您已经熟悉谷歌地图的外观和部分功能。实质上，谷歌地图是一个完整的包，提供了一切——可伸缩的地图、卫星图像、地理编码等等。对于我们的目的来说，它非常完美。
- en: 'To integrate Google Maps into the app , we need to import the Google Maps JavaScript
    SDK, which is freely available. To do so, add the following import to the `index.html`
    file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将谷歌地图集成到应用程序中，我们需要导入谷歌地图JavaScript SDK，这是免费提供的。为此，请在`index.html`文件中添加以下导入：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will need to designate an area of the UI where the app should be drawn.
    Change the existing `div id` tag to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要指定UI中应用程序应该绘制的区域。将现有的`div id`标签更改为以下内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order to render the map properly, we will need to add some custom CSS to
    force the map to fill its parent container. Open the `www/css/style.css` file
    and add the following to it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确渲染地图，我们需要添加一些自定义的CSS来强制地图填充其父容器。打开`www/css/style.css`文件并添加以下内容：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also note that we added a binding for a controller for our map. We will use
    this in order to perform the initial configuration needed in order to render and
    work with the map. So, let''s go ahead and add it! Create the `www/js/controllers.js`
    file in your project and make sure that it contains the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，我们为地图的控制器添加了一个绑定。我们将使用这个绑定来执行渲染和处理地图所需的初始配置。因此，让我们继续添加它！在您的项目中创建`www/js/controllers.js`文件，并确保它包含以下内容：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we defined a new `supernav.controllers` module, which will contain the
    controllers of our app. For now, it only has one such controller—`MapCtrl`. Let''s
    go through it and consider what it does:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个新的`supernav.controllers`模块，它将包含我们应用程序的控制器。目前，它只有一个这样的控制器——`MapCtrl`。让我们来看看它，并考虑它的作用：
- en: We first defined the map scope variable, which will be used to simply refer
    to the map that we are working with. We also defined a scope function in order
    to bind a value to this variable.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义了地图作用域变量，它将用于简单地引用我们正在处理的地图。我们还定义了一个作用域函数，以便将一个值绑定到这个变量上。
- en: 'We defined the `initialize` local function, which will be used in order to
    set up and configure a Google Maps instance as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`initialize`本地函数，它将用于设置和配置Google Maps实例，如下所示：
- en: 'Here, we defined the `mapOptions` object, which provides the initial settings
    for the map to be created. It has the following properties:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，我们定义了`mapOptions`对象，它提供了要创建的地图的初始设置。它具有以下属性：
- en: '`center`: This property includes latitude and longitude coordinates for the
    point on the Earth''s surface on which the map will initially be centered on.
    The coordinate pair is passed as an instance of Google Maps'' own `LatLng` object.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`center`：此属性包括地图最初将居中显示的地球表面上的点的纬度和经度坐标。坐标对作为Google Maps自己的`LatLng`对象的实例传递。'
- en: '`zoom`: This is the degree of zooming the location that needs to be applied
    to the map.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`zoom`：这是需要应用于地图的位置的缩放程度。'
- en: '`mapTypeId`: This is the kind of map that we want to show. Google Maps supports
    several different view modes, ranging from raw satellite imagery to detailed views
    of roads, businesses, and more.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapTypeId`：这是我们想要显示的地图类型。Google Maps支持多种不同的视图模式，从原始卫星图像到道路、企业等的详细视图。'
- en: 'We then created the actual `Map` object. We pass the following to its constructor:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们创建了实际的`Map`对象。我们将以下内容传递给它的构造函数：
- en: This is the part of the **Document Object Model** (**DOM**) where we want to
    bind the map. In our case, it is the `div` with the `map` ID, which was earlier
    defined in our view. We used the standard `getElementById` DOM function in order
    to retrieve a reference.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要绑定地图的**文档对象模型**（**DOM**）的一部分。在我们的情况下，它是具有`map`ID的`div`，这在我们的视图中早已定义。我们使用了标准的`getElementById`
    DOM函数来检索引用。
- en: Then we have `mapOptions` that we defined earlier.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有之前定义的`mapOptions`。
- en: Finally, after the `map` has been created, we bind it to the `map` scope object
    that we defined earlier.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在创建了`map`之后，我们将其绑定到之前定义的`map`作用域对象上。
- en: Finally, if the DOM is fully loaded, we attempt to execute the `initialize`
    function that we just defined. If the DOM is not ready yet, we instead register
    it as a callback that needs to be run once it is.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果DOM已完全加载，我们尝试执行刚刚定义的`initialize`函数。如果DOM尚未准备好，我们将其注册为需要在准备好时运行的回调函数。
- en: 'All we need to do now is make sure that the controller is properly loaded and
    put in charge of the map. To do so, first make sure that the JavaScript file is
    imported by adding the following to your `index.html` file:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是确保控制器被正确加载并负责地图。为此，首先确保通过将以下内容添加到您的`index.html`文件中来导入JavaScript文件：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, modify the `app.js` file in order to make sure that the module is listed
    as a dependency, as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`app.js`文件，以确保该模块被列为依赖项，如下所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That''s it! The browser preview should now look like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！浏览器预览现在应该是这样的：
- en: '![Integrating Google Maps into the app](img/B04653_09_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![将Google地图集成到应用程序中](img/B04653_09_03.jpg)'
- en: We have come pretty far already. While we do not have any advanced navigation
    capabilities yet, we have successfully built a basic app that people can use just
    for the purpose of browsing the maps of the world. Not bad for work that took
    just 10 minutes!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走得相当远了。虽然我们还没有任何高级的导航功能，但我们已经成功地构建了一个基本的应用程序，人们可以用来浏览世界地图。对于只花了10分钟的工作来说，这还不错！
- en: Before we move on though, it is worth pausing and considering the architectural
    road that we have travelled so far. Everything we have done here is standard AngularJS
    practice—create a `view` for the element that we want to display (in this case,
    a `map`), create a `controller` for it and some logic, and activate the controller
    by integrating the map into the app. However, you may recall that we mentioned
    earlier in the book that the the greatest advantage of AngularJS is the creation
    of enhanced HTML. We have already seen how this works through data binding, live
    DOM updates, and other things. However, AngularJS also offers us the ability to
    define custom HTML tags in order to define elements, which can be reused in several
    parts of the application. Our map, which we created here, is a good candidate.
    What if we could just encapsulate it in a `<map>` tag? We can, and to get there,
    we need to talk about directives.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们继续之前，值得停下来考虑一下我们迄今为止走过的架构之路。我们在这里所做的一切都是标准的AngularJS实践——为我们想要显示的元素（在本例中是`map`）创建一个`view`，为其创建一个`controller`和一些逻辑，并通过将地图集成到应用程序中来激活控制器。然而，您可能还记得我们在本书前面提到过的AngularJS最大的优势是创建增强的HTML。我们已经看到了数据绑定、实时DOM更新和其他功能是如何工作的。然而，AngularJS还提供了定义自定义HTML标签的能力，以便在应用程序的多个部分中重用。我们在这里创建的地图就是一个很好的例子。如果我们能将它封装在`<map>`标签中会怎样？我们可以，为了实现这一点，我们需要谈论指令。
- en: Angular directives
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular指令
- en: Simply put, directives are custom HTML elements. You write them like ordinary
    HTML elements, but their functionality is defined entirely programmatically. Thus,
    they extend the standard HTML syntax by letting us add whatever we need to it
    in order to build truly dynamic pages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，指令是自定义的HTML元素。您可以像编写普通的HTML元素一样编写它们，但它们的功能完全是以编程方式定义的。因此，它们通过让我们添加任何我们需要的内容来扩展标准的HTML语法，以便构建真正动态的页面。
- en: Creating directives
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建指令
- en: Like the services and controllers that we have already seen, directives are
    defined as components of modules, and AngularJS gives us the tools that are necessary
    to create them. We will explore this process by creating a directive for the map
    that we created earlier.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们已经看到的服务和控制器一样，指令被定义为模块的组件，AngularJS为我们提供了创建它们所需的工具。我们将通过为之前创建的地图创建一个指令来探索这个过程。
- en: 'The first thing that we will need to do is create a new file named `www/js/directives.js`
    for the directives of our project. Create this file and add the following to it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个名为`www/js/directives.js`的新文件，用于我们项目的指令。创建这个文件并添加以下内容：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The directive `module` function is used to define a directive for a module,
    and as you might have guessed, its first parameter is the name of the `directive`
    itself, while the second one is a `factory` function that gives us an object describing
    how the directive works. In that sense, directives are similar to the services
    that we studied earlier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`module`函数用于为模块定义一个指令，正如你可能已经猜到的那样，它的第一个参数是`directive`本身的名称，而第二个参数是一个`factory`函数，它给我们提供了一个描述指令如何工作的对象。在这个意义上，指令类似于我们之前学习的服务。'
- en: Restricting directives
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制指令
- en: 'Let''s start building the factory function for our `map` directive. The first
    thing that we should do is add a restriction to the `directive` in order to tell
    the AngularJS parser which kinds of HTML elements this particular directive may
    occur as:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为我们的`map`指令构建工厂函数。我们应该首先在`directive`中添加一个限制，以告诉AngularJS解析器这个特定指令可以出现在哪种HTML元素中：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Right now, you are probably exclaiming, *E? What is this E of which you speak?*
    Well, AngularJS allows us to confine a directive to the following three different
    classes of elements:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会惊叹，“E？你说的是什么E？”嗯，AngularJS允许我们将指令限制在以下三种不同类别的元素中：
- en: '**E (Elements)**: These are your standard HTML tags, such as `<map></map>`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**E（元素）**：这些是您标准的HTML标签，比如`<map></map>`'
- en: '**A (Attributes)**: These are the element attributes, such as `<div map></div>`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A（属性）**：这些是元素属性，比如`<div map></div>`'
- en: '**C (Classes)**: These are the customized element class attributes that are
    mapped to the directive, such as `<div class="map"></div>`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C（类）**：这些是映射到指令的自定义元素类属性，比如`<div class="map"></div>`'
- en: 'You are not required to stick with just one restriction. For example, you can
    also write the following in order to restrict it to elements and attributes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必局限于一个限制。例如，你也可以写以下内容以将其限制为元素和属性：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Hence, the Angular parser will detect the directive if you write either `<map></map>`
    or `<div map></map>`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你写`<map></map>`或`<div map></map>`，Angular解析器将会检测到指令。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will frequently find that it makes sense to restrict directives only to
    a single kind of element. This is good practice as it reduces the complexity of
    your app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你会经常发现，将指令限制在单一类型的元素中是有意义的。这是一个好的实践，因为它减少了你的应用程序的复杂性。
- en: Scope isolation
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域隔离
- en: Just like controllers, directives are able to access the scope in which they
    are operating. However, it is also possible (and generally considered good practice)
    to create an isolated scope for the directive. This scope will contain a set of
    data that only the current instance of the directive is aware of. In addition
    to this, scope isolation also helps you create reusable widgets, which enhance
    code quality.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像控制器一样，指令能够访问它们所在的作用域。然而，为指令创建一个隔离作用域也是可能的（并且通常被认为是良好的实践）。这个作用域将包含一组只有当前指令实例知道的数据。除此之外，作用域隔离还有助于创建可重用的小部件，从而提高代码质量。
- en: 'We achieve this by defining scope injection points in our `directive`, which
    will take the form of the standard HTML attributes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`directive`中定义作用域注入点来实现这一点，这些注入点将采用标准HTML属性的形式：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we defined an injection point called `onCreate`, which maps the directives
    to a `function` in the parent scope that we are isolating (the `&` symbol signifies
    a binding by delegation). For example, let''s say that we want to inject the `onCreate`
    method from `MapCtrl` into the isolated scope. We will then write our directive
    like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为`onCreate`的注入点，它将指令映射到我们正在隔离的父作用域中的一个`function`（`&`符号表示委托绑定）。例如，假设我们想要将`MapCtrl`中的`onCreate`方法注入到隔离作用域中。那么我们将这样写我们的指令：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At this point, the `map` parameter is not bound. Later, we will see how to define
    and pass it to the function from within the `directive` itself in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`map`参数尚未绑定。稍后，我们将看到如何在`directive`内部定义并传递它到函数中。
- en: However, before we move on, did you observe that although we name our injection
    point `onCreate`, we wrote it as `on-create` in the actual HTML? This is due to
    an AngularJS process called **normalization**. Through this, attributes and tags
    are translated into a more concise form. Part of the process involves replacing
    **hyphen-bound** words with **camel-cased** words. We will give you the reference
    to the documentation if you wish to know more about how it works, since understanding
    it is not crucial to developing our directive here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们继续之前，你是否注意到，尽管我们将我们的注入点命名为`onCreate`，但在实际的HTML中我们将其写为`on-create`？这是由于AngularJS的一个叫做**规范化**的过程。通过这个过程，属性和标签被转换成更简洁的形式。这个过程的一部分包括用**驼峰命名法**替换**连字符绑定**的单词。如果你想了解更多关于它是如何工作的，我们会给你文档的参考，尽管理解它对于我们在这里开发指令并不是至关重要的。
- en: DOM manipulation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM操作
- en: Ultimately, we want our map directive to expand and show a map where it occurs
    in the DOM. To do so, we will need to allow it to actually manipulate the DOM
    itself.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们希望我们的地图指令能够扩展并在DOM中显示地图。为了做到这一点，我们需要允许它实际操作DOM本身。
- en: 'The typical way to achieve this is by providing the `directive` with a `link`
    function, which allows it to look into the DOM update process. Let''s add one
    link to our `map` directive, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常实现这一点的方法是为`directive`提供一个`link`函数，它允许它查看DOM更新过程。让我们为我们的`map`指令添加一个链接，如下所示：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Looks oddly familiar, doesn''t it? This is the same `initialize` function and
    associated map setup procedure that we defined in our `controller` earlier, albeit
    with some slight modifications. We have already covered how this works. So, let''s
    go over how it figures in the context of the `link` function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很奇怪，不是吗？这是我们之前在`controller`中定义的`initialize`函数和相关地图设置过程，尽管有一些细微的修改。我们已经讨论过这是如何工作的。所以，让我们看看它如何在`link`函数的上下文中发挥作用：
- en: 'The `link` function takes the following three parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`link`函数接受以下三个参数：'
- en: '`$scope`: This is the scope under which the directive is rendered.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$scope`：这是指令渲染的作用域。'
- en: '`$element`: This is the tag to which the directive is bound, which is `<map>`
    in our case. The tag is wrapped in the JQuery-like jqLite library, which allows
    us to perform direct manipulations on it.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$element`：这是指令绑定的标签，在我们的例子中是`<map>`。该标签被包裹在类似于JQuery的jqLite库中，这使我们能够直接对其进行操作。'
- en: '`$attr`: This defines the attributes for the directive element along with their
    associated values.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$attr`：这定义了指令元素的属性及其关联的值。'
- en: Inside the `initialize` function itself, we now use `$element[0]` in order to
    get the name of the tag itself (`map` in our case). We also use the `$scope` parameter
    in order to call the `onCreate` delegate in the parent scope (note how we explicitly
    need to define the parameter name and its associated value in this case).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initialize`函数内部，我们现在使用`$element[0]`来获取标签本身的名称（在我们的例子中是`map`）。我们还使用`$scope`参数来调用父作用域中的`onCreate`委托（请注意，我们在这种情况下需要明确定义参数名称及其关联的值）。
- en: Putting it all together
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有东西整合在一起
- en: 'We now have a full-fledged directive, and it''s time to integrate it into our
    app. First, make sure that the new directive is properly loaded. The first line
    of the `app.js` file should look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个完整的指令，是时候将其整合到我们的应用程序中了。首先确保新的指令已经正确加载。`app.js`文件的第一行应该是这样的：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Likewise, the `index.html` file should contain the following import:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`index.html`文件应该包含以下导入：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, make sure that the `ion-content` section in `index.html` now looks like
    this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保`index.html`中的`ion-content`部分现在看起来像这样：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, since we moved the rendering logic for the `map` into the directive,
    remove it from the `controller.js` file, which should now look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，由于我们将`map`的渲染逻辑移到了指令中，所以从`controller.js`文件中将其移除，现在它应该是这样的：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we need to make some slight modifications to `style.css` in order
    to make sure that the `map` directive will render on app properly. Make sure that
    it looks like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要对`style.css`进行一些小的修改，以确保`map`指令能够正确渲染在应用程序上。确保它看起来像这样：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it! Ensure that you reload the preview in your browser if necessary.
    It should look just the same as it did when we were not using a directive. We
    have succeeded in putting all together!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！如果需要的话，请确保在浏览器中重新加载预览。它应该看起来和我们不使用指令时一样。我们已经成功地把所有东西都整合在一起了！
- en: Adding geolocation via GPS
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过GPS添加地理定位
- en: Now that we have an even better working map view, let's go ahead and add some
    basic navigation features to it, namely, the ability to focus the map on our current
    physical location.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个更好的工作地图视图，让我们继续为其添加一些基本的导航功能，即，将地图聚焦在我们当前的物理位置上。
- en: 'First, let''s add a `button` to the footer toolbar for now. Make sure that
    the `ion-footer-bar` tag looks like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们暂时在页脚工具栏中添加一个`button`。确保`ion-footer-bar`标签看起来像下面这样：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Your preview should now look like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您的预览现在应该是这样的：
- en: '![Adding geolocation via GPS](img/B04653_09_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![通过GPS添加地理定位](img/B04653_09_04.jpg)'
- en: 'Now, we need to hook into the location capabilities of the native device in
    order to find the user''s current location. Fortunately, this can be done directly
    through the HTML5 geolocation interface. To see it in action, let''s add the following
    to the `controller.js` file inside the `MapCtrl` controller:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要利用本机设备的位置功能，以找到用户当前的位置。幸运的是，这可以直接通过HTML5地理位置接口来实现。为了看到它的效果，让我们在`controller.js`文件中`MapCtrl`控制器内添加以下内容：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note what we did here.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在这里做了什么。
- en: We defined the `centerOnUser()` scoped function. This function is in turn bound
    to the location button that we just defined in the `index.html` file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`centerOnUser()`作用域函数。这个函数又绑定到我们刚刚在`index.html`文件中定义的位置按钮上。
- en: In this function, we have the `navigator.geolocation.getCurrentPosition` function,
    a part of the HTML5 standard, in order to retrieve the current location of the
    user. This function takes a callback as an argument, which in turn takes a position
    object, `pos`, as an argument.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们使用`navigator.geolocation.getCurrentPosition`函数，这是HTML5标准的一部分，以获取用户当前位置。这个函数接受一个回调作为参数，回调又以一个位置对象`pos`作为参数。
- en: Inside the callback, we use the latitude and longitude value stored in `pos`
    in order to recenter the map using the `setCenter()` method provided by Google
    Maps.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中，我们使用存储在`pos`中的纬度和经度值，以便使用Google Maps提供的`setCenter()`方法来重新设置地图的中心。
- en: You can now try out the navigation for yourself in the preview. Clicking on
    the location button should change the focus of the map to your current location.
    That's it. We are done!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在预览中尝试导航功能。点击位置按钮应该会将地图的焦点切换到您当前的位置。就是这样。我们完成了！
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we worked directly with the Google Maps API in order to render
    the map and work with maps. While this is perfectly fine, we also recommend that
    you check out the module that can be found at [http://angular-ui.github.io/angular-google-maps/#!/](http://angular-ui.github.io/angular-google-maps/#!/),
    which makes it even easier to work with Google Maps in AngularJS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们直接使用了Google Maps API来渲染地图并处理地图。虽然这很好，但我们还建议您查看可以在[http://angular-ui.github.io/angular-google-maps/#!/](http://angular-ui.github.io/angular-google-maps/#!/)找到的模块，它使得在AngularJS中使用Google
    Maps变得更加容易。
- en: Apart from the navigation features that we covered here, there are of course
    a plethora of services offered by mobile devices. Fortunately, almost all of the
    services have a corresponding Cordova plugin, which will let you make use of these
    services. We recommend that you refer to the Cordova plugin registry, which can
    be found at [http://plugins.cordova.io/#/](http://plugins.cordova.io/#/), whenever
    you need to find one.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在这里介绍的导航功能之外，移动设备当然还提供了大量的服务。幸运的是，几乎所有的服务都有相应的Cordova插件，这将让您能够使用这些服务。我们建议您在需要找到插件时参考Cordova插件注册表，网址为[http://plugins.cordova.io/#/](http://plugins.cordova.io/#/)。
- en: You can do much, much more with Google Maps than what we explored here. We highly
    recommend that you explore the developer's page for Google Map, which can be found
    at [https://developers.google.com/maps/](https://developers.google.com/maps/),
    to get a better view of the available possibilities regarding Google Map.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在谷歌地图上做的远远不止我们在这里探讨的内容。我们强烈建议您探索谷歌地图的开发者页面，该页面位于[https://developers.google.com/maps/](https://developers.google.com/maps)，以更好地了解有关谷歌地图的可用可能性。
- en: The navigation app that we built here is really the `map` starter app in Ionic.
    You can find the complete source code for it at [https://github.com/driftyco/ionic-starter-maps](https://github.com/driftyco/ionic-starter-maps).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里构建的导航应用实际上是Ionic中的`map`起始应用程序。您可以在[https://github.com/driftyco/ionic-starter-maps](https://github.com/driftyco/ionic-starter-maps)找到它的完整源代码。
- en: In this chapter, you learned how to use native phone features and Google Maps
    in order to build a simple navigation app. Most importantly, you also studied
    directives in AngularJS, a powerful feature that lets you create custom HTML elements.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何利用手机的原生功能和谷歌地图来构建一个简单的导航应用程序。最重要的是，您还学习了AngularJS中的指令，这是一个强大的功能，可以让您创建自定义的HTML元素。
