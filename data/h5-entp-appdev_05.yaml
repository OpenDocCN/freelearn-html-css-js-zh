- en: 'Chapter 5. The App: Displaying Movie Data via CSS3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。应用：通过 CSS3 显示电影数据
- en: 'We already added some styles to our enterprise application using CSS in [Chapter
    3](ch03.html "Chapter 3. The App: Structure and Semantics"), *The App: Structure
    and Semantics*, but we have not introduced the properties that make CSS3 a game
    changer. In this chapter, we will run through some useful CSS3 properties and
    practical implementations for our application explaining the scope of them in
    any web application.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第 3 章](ch03.html "第 3 章。应用：结构和语义")中添加了一些使用 CSS 的企业应用样式，*应用：结构和语义*，但我们还没有介绍使
    CSS3 成为变革者的属性。在本章中，我们将遍历一些有用的 CSS3 属性和针对我们应用的实用实现，解释它们在任何 Web 应用中的范围。
- en: Each example will feature support (and fallback when it is needed) for the most
    popular web browsers in the market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例都将展示对市场上最受欢迎的 Web 浏览器的支持（以及当需要时的回退）。
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题如下：
- en: Back to the browsers' babel tower
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回到浏览器的babel塔
- en: 'CSS Magic: Adding more styles to MovieNow (rounded corners, color, gradients,
    box shadows, text shadows)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 魔法：为 MovieNow 添加更多样式（圆角、颜色、渐变、阴影、文本阴影）
- en: Movies and styles (transitions and animations)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电影和样式（过渡和动画）
- en: Choosing between transitions and animations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在过渡和动画之间选择
- en: Using media queries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询
- en: Applying CSS3 selectors
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用 CSS3 选择器
- en: Back to the browsers' babel tower
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到浏览器的babel塔
- en: Whenever you start using a new CSS property, it is necessary to check the list
    of browsers that support it. If it is supported, you need to verify how to implement
    it and if it requires a prefix or a special form such as `filter` in Internet
    Explorer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你开始使用一个新的 CSS 属性时，检查支持该属性的浏览器列表是必要的。如果它被支持，你需要验证如何实现它，以及是否需要前缀或特殊形式，例如在 Internet
    Explorer 中的 `filter`。
- en: 'The following are the most common prefixes for CSS properties:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常见的 CSS 属性前缀：
- en: '`-moz-` Firefox'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-moz-` Firefox'
- en: '`-webkit-` Safari, Safari iOS, and Chrome'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-` Safari、Safari iOS 和 Chrome'
- en: '`-o-` Opera'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o-` Opera'
- en: '`-ms-` Internet Explorer'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-` Internet Explorer'
- en: Workarounds when you do not have support of any property include use of images
    and removal of some visuals (following graceful degradation and trying to avoid
    the removal of features).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你没有任何属性的支持时，解决方案包括使用图像和移除一些视觉元素（遵循优雅降级并尽量避免移除功能）。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We could use a JavaScript library such as Lea Verou's -prefix-free ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/))
    to avoid the use of multiple vendor prefixes, but this can affect our application's
    performance. As a general rule CSS is almost always faster (execution time) than
    JavaScript, so performance-wise a couple of lines more in our stylesheet is worth
    the effort.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用像 Lea Verou 的 -prefix-free ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/))
    这样的 JavaScript 库来避免使用多个供应商前缀，但这可能会影响我们应用的性能。作为一般规则，CSS 几乎总是比 JavaScript（执行时间）更快，所以在性能方面，在样式表中多几行代码是值得的。
- en: 'As we saw in [Chapter 3](ch03.html "Chapter 3. The App: Structure and Semantics"),
    *The App: Structure and Semantics*, it is possible to add conditional CSS imports.
    This technique only works for Internet Explorer and you can compare versions using
    the following syntax:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第 3 章](ch03.html "第 3 章。应用：结构和语义")中看到的，*应用：结构和语义*，添加条件 CSS 导入是可能的。这项技术仅适用于
    Internet Explorer，你可以使用以下语法来比较版本：
- en: '`lt` (less than)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lt`（小于）'
- en: '`lte` (less than or equal to)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lte`（小于或等于）'
- en: '`gt` (greater than)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gt`（大于）'
- en: '`gte` (greater than or equal to)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gte`（大于或等于）'
- en: 'For example, if you want to add a specific CSS file for Internet Explorer 7
    and previous versions, you can use the following declaration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想为 Internet Explorer 7 及之前版本添加特定的 CSS 文件，可以使用以下声明：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It is good practice to include Internet Explorer specific hacks and fallbacks
    in a separate stylesheet in order to achieve clear coding and avoid extra loading
    time in other browsers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将针对 Internet Explorer 的特定黑客和回退放在单独的样式表中是一种良好的实践，以实现清晰的编码并避免在其他浏览器中增加额外的加载时间。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To add support for common CSS3 features such as border-radius and box-shadow,
    you can include CSS3 Pie ([http://css3pie.com](http://css3pie.com)), a JavaScript
    library that adds support to these features for Internet Explorer 6 to 9.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加对常见的 CSS3 功能，如 `border-radius` 和 `box-shadow` 的支持，你可以包含 CSS3 Pie ([http://css3pie.com](http://css3pie.com))，这是一个
    JavaScript 库，它为 Internet Explorer 6 到 9 添加了这些功能的支持。
- en: CSS3 Magic – adding more styles to MovieNow
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 魔法 – 为 MovieNow 添加更多样式
- en: Let us continue with our movie application development. As a general rule, you
    should plan in advance or, in other words, have a visual design before beginning
    to mess around with styles. A benefit of following this rule (and preferably having
    a style guide as well) is that your application will reflect a unified visual
    identity. Let us start styling some elements that we already know in our enterprise
    application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的电影应用程序开发。作为一个一般规则，您应该提前规划，换句话说，在开始与样式纠缠之前，应该有一个视觉设计。遵循此规则（并且最好有一个样式指南）的好处是，您的应用程序将反映统一的视觉身份。让我们开始为我们的企业应用程序中已知的一些元素添加样式。
- en: We removed our **Find Movies** button to make an automatic call later.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除了我们的**查找电影**按钮，以便稍后进行自动调用。
- en: Adding rounded corners
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加圆角
- en: If you had to create rounded corners with CSS1 and CSS2, you should know how
    complicated the possible solutions for rounded corners were. Generally, they involve
    images or heavy processing JavaScript affecting the performance of your enterprise
    application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须使用CSS1和CSS2创建圆角，您应该知道可能的圆角解决方案有多么复杂。通常，它们涉及图像或影响企业应用程序性能的重量级JavaScript处理。
- en: In CSS3, we have the `border-radius` property that allows us to specify rounded
    shapes for the four borders of the element.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3中，我们有`border-radius`属性，允许我们指定元素的四个边框的圆角形状。
- en: 'The syntax of this property is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性的语法如下：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can specify `%`, `em`, and `px` as units for each corner.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为每个角落指定`%`、`em`和`px`作为单位。
- en: Supposing that we need to add rounded borders to the bottom of our **Top 5 Box
    Office** section. We can use the `border-radius` property (and its equivalents
    with prefixes for each browser) using `0` for `top left` and `right`, and `8px`
    for `bottom left` and `right`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要为我们的**Top 5 Box Office**部分的底部添加圆角。我们可以使用`border-radius`属性（以及每个浏览器的带前缀的等效属性），对于`top
    left`和`right`使用`0`，对于`bottom left`和`right`使用`8px`。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Applying this, we can see the difference between the original Box Office (left)
    and the `border-radius` one (right).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此方法，我们可以看到原始Box Office（左侧）和`border-radius`效果（右侧）之间的区别。
- en: '![Adding rounded corners](img/5689_05_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![添加圆角](img/5689_05_01.jpg)'
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice that if we use shorthand `border-radius:0 8px`, it adds round borders
    for top-right and bottom-left corners only.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们使用简写`border-radius:0 8px`，它只为右上角和左下角添加圆角。
- en: This property is shorthand for `border-top-left-radius`, `border-top-right-radius`,
    `border-bottom-left-radius`, and `border-bottom-right-radius` properties.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性是`border-top-left-radius`、`border-top-right-radius`、`border-bottom-left-radius`和`border-bottom-right-radius`属性的简写。
- en: Sadly, in the case of Internet Explorer, the property is supported only since
    IE9.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，在Internet Explorer的情况下，该属性仅从IE9开始支持。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As an alternative, you can use CSS3 Pie ([http://css3pie.com](http://css3pie.com))
    or Curved Corner ([http://code.google.com/p/curved-corner/)](http://code.google.com/p/curved-corner/))
    to give support for previous versions of Internet Explorer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方案，您可以使用CSS3 Pie ([http://css3pie.com](http://css3pie.com)) 或 Curved Corner
    ([http://code.google.com/p/curved-corner/)](http://code.google.com/p/curved-corner/))
    为旧版本的Internet Explorer提供支持。
- en: Setting color
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置颜色
- en: There are multiple ways to describe colors inside our stylesheets; the most
    common one is the hexadecimal `#rrggbb` where the first pair represents the numeric
    value of red, the second pair represents green, and the last one blue. Additionally,
    we can use a shorthand notation `#rgb` that will convert our value to `#rrggbb`,
    for example, if we use `#123` that will be recognized as `#112233`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的样式表中描述颜色的方法有多种；最常见的是十六进制`#rrggbb`，其中第一对表示红色的数值，第二对表示绿色，最后一对表示蓝色。此外，我们可以使用简写表示法`#rgb`，它将我们的值转换为`#rrggbb`，例如，如果我们使用`#123`，它将被识别为`#112233`。
- en: 'Let us go over other ways to describe colors:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看描述颜色的其他方法：
- en: Red, green, and blue
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 红色、绿色和蓝色
- en: 'You can define a color using the syntax `rgb(R,G,B)` where R, G, and B indicate
    the intensity of the colors red, green, and blue and can be:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用语法`rgb(R,G,B)`定义颜色，其中R、G和B表示红色、绿色和蓝色的强度，可以是：
- en: An integer from 0 (no color) to 255 (max intensity)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个从0（无颜色）到255（最大强度）的整数
- en: A float 0.0% (no color) to 100.0% (max intensity)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从0.0%（无颜色）到100.0%（最大强度）的浮点数
- en: 'You must use the same units inside the declaration. It is supported in all
    modern browsers. Here is a class `title` with red fonts:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在声明中使用相同的单位。它在所有现代浏览器中都受支持。这里有一个使用红色字体的`title`类：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Red, green, blue, and alpha
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 红色、绿色、蓝色和透明度
- en: 'An extended specification of `rgb` that adds a value at the end for alpha transparency
    uses values from `0.0` (invisible) to `1.0` (completely visible). It is supported
    in all modern browsers and Internet Explorer since Version 9\. We can define a
    red color for fonts in our class `title` with 50 percent of alpha transparency:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个扩展的 `rgb` 规范，在末尾添加一个用于 alpha 透明度的值，其值从 `0.0`（不可见）到 `1.0`（完全可见）。它被所有现代浏览器和从版本
    9 开始的 Internet Explorer 支持。我们可以在类 `title` 中定义带有 50% alpha 透明度的红色字体：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Hue, saturation, and lightness
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 色调、饱和度和亮度
- en: 'HSL is a cylindrical-coordinate representation of colors. `vHue` is a floating
    point representation of an angle; this value defines the color on which saturation
    and lightness will be applied and its values range from `0` to `360`. Saturation
    is a percentage that goes from `0` (white) to `100%` (full color) and defines
    the colorfulness. Finally, lightness defines the amount of light and goes from
    `0%` (no light, total black) to `100%` (full color). The syntax is `hsl(H,S,L)`.
    It is supported in all modern browsers and Internet Explorer since Version 9\.
    If we want to apply red fonts in our class `title`, we can do the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: HSL 是颜色的圆柱坐标表示。`vHue` 是角度的浮点表示；这个值定义了将应用饱和度和亮度的颜色，其值范围从 `0` 到 `360`。饱和度是一个百分比，从
    `0`（白色）到 `100%`（全色）定义了颜色的鲜艳度。最后，亮度定义了光的量，从 `0%`（无光，全黑）到 `100%`（全色）。语法是 `hsl(H,S,L)`。它被所有现代浏览器和从版本
    9 开始的 Internet Explorer 支持。如果我们想在类 `title` 中应用红色字体，我们可以这样做：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hue, saturation, lightness, and alpha
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 色调、饱和度、亮度和透明度
- en: 'This is an extended specification of `hsl` that adds a value at the end for
    alpha transparency in the same way `rgba` does for `rgb`. It is supported in all
    modern browsers and Internet Explorer since Version 9\. We can define a red color
    for fonts in our class `title` with 50 percent of alpha transparency as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个扩展的 `hsl` 规范，它以与 `rgba` 对 `rgb` 的方式相同的方式在末尾添加一个用于 alpha 透明度的值。它被所有现代浏览器和从版本
    9 开始的 Internet Explorer 支持。我们可以如下定义类 `title` 中带有 50% alpha 透明度的红色字体：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can use a conditional CSS import for older versions of Internet Explorer
    and apply opacity and an alpha filter to get the same effect:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用条件 CSS 导入为旧版本的 Internet Explorer 应用透明度和 alpha 过滤器以获得相同的效果：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding gradients
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加渐变
- en: New applications in the market have adopted a plain design not because of technical
    restrictions but for the sake of simplicity. Even though it is sometimes necessary
    to add some styling to simulate depth, gradients make the process much easier.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上的新应用采用了简洁的设计，这并非因为技术限制，而是为了简化。尽管有时有必要添加一些样式来模拟深度，但渐变使这个过程变得容易得多。
- en: CSS3 introduces `linear-gradient` and `radial-gradient` to `background` values.
    You can apply `gradients` to `background` or `background-image` properties.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 引入了 `linear-gradient` 和 `radial-gradient` 到 `background` 值。你可以将 `渐变` 应用到
    `background` 或 `background-image` 属性。
- en: 'A possible syntax for this is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种可能的语法如下：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can add as many `color position` pairs as you want. Although it is possible
    to use hexadecimal colors, in this example we are going to use `rgb`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加任意多的 `颜色位置` 对。尽管可以使用十六进制颜色，但在这个例子中我们将使用 `rgb`。
- en: 'First, we add a gradient that goes from `top` to `bottom` to our navigation
    bar. It starts with light grey and ends with light grey, so we only need two points:
    `0%` and `100%`. The initial color will be `rgb(102,102,102)` and the final one
    will be `rgb(70,70,70)`. Adding this to `nav` with pertinent prefixes we have:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在导航栏中添加一个从 `top` 到 `bottom` 的渐变。它从浅灰色开始，以浅灰色结束，所以我们只需要两个点：`0%` 和 `100%`。初始颜色将是
    `rgb(102,102,102)`，最终颜色将是 `rgb(70,70,70)`。将此添加到带有相关前缀的 `nav` 中，我们有：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As a result we can see the right image compared with the original one at the
    left:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们可以看到与左侧原始图像相比的正确图像：
- en: '![Adding gradients](img/5689_05_02.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![添加渐变](img/5689_05_02.jpg)'
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you do not want to deal with every vendor prefix, an option is to use a generator
    such as Colorzilla Gradient Generator ([http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)).
    You only need to define your gradient with a visual tool and then copy the code
    generated into your CSS.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想处理每个供应商的前缀，一个选择是使用生成器，例如 Colorzilla 渐变生成器（[http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)）。你只需要使用可视化工具定义你的渐变，然后将生成的代码复制到你的
    CSS 中。
- en: 'To show that we can add multiple points, let us apply a more complex effect
    to our **Top 5 Box Office** area. In this case, we apply the effect from `bottom`
    to `top`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我们可以添加多个点，让我们给我们的 **Top 5 Box Office** 区域应用一个更复杂的效果。在这种情况下，我们从 `bottom`
    到 `top` 应用效果：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As in our previous example, we use percentages to define positions. In this
    case, we use `35%`, `68%`, and `98%`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如同我们之前的例子，我们使用百分比来定义位置。在这种情况下，我们使用 `35%`、`68%` 和 `98%`。
- en: 'Finally, we can compare the original area (left) with the final one (right),
    as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以比较原始区域（左侧）与最终区域（右侧），如下面的截图所示：
- en: '![Adding gradients](img/5689_05_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![添加渐变](img/5689_05_03.jpg)'
- en: 'We can apply the same principles to our header:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将相同的原理应用到我们的页眉上：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We get a more interesting header (bottom) compared to the original one (top):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始的（顶部）相比，我们得到了一个更有趣的标题（底部）：
- en: '![Adding gradients](img/5689_05_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![添加渐变](img/5689_05_04.jpg)'
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The prefix `-ms-` for gradients in Internet Explorer was deprecated by Microsoft.
    Refer to the following link: [http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Internet Explorer 中的渐变指定的 `-ms-` 前缀已被微软弃用。请参阅以下链接：[http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx)。
- en: It is always possible to fallback gradients using images in tile and the `background-image`
    property.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 总是可以通过使用平铺图像和 `background-image` 属性来回退渐变。
- en: Adding box shadows
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加框阴影
- en: We can use shadows to simulate depth giving the effect of inset and outset visuals.
    The property `box-shadow` allows us to create shadows based on the borders of
    the element.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用阴影来模拟深度，产生嵌入和突出显示的视觉效果。`box-shadow` 属性允许我们根据元素的边框创建阴影。
- en: 'The syntax for `box-shadow` is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-shadow` 的语法如下：'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Only `horizontal-shadow` and `vertical-shadow` are required. `inset` specifies
    if the shadow is applied inside the element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要 `horizontal-shadow` 和 `vertical-shadow`。`inset` 指定阴影是否应用于元素内部。
- en: 'Let us add a bottom drop shadow to our `nav`. We can specify `0` for `horizontal-shadow`,
    `1px` for `vertical-shadow` to show our shadow below the element, `3px` to give
    some `blur`, and color as `#999`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `nav` 上添加一个底部的阴影。我们可以将 `horizontal-shadow` 指定为 `0`，将 `vertical-shadow`
    指定为 `1px` 以显示元素下的阴影，将 `3px` 用于模糊，颜色为 `#999`：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can compare the `nav` menu without the shadow (left) and with the shadow
    (right):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将没有阴影的 `nav` 菜单（左侧）和有阴影的菜单（右侧）进行比较：
- en: '![Adding box shadows](img/5689_05_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![添加框阴影](img/5689_05_05.jpg)'
- en: 'To demonstrate `inset`, we can add an inner shadow to our **Top 5 Box Office**
    area. Here we apply negative positioning, `-1px`, for `vertical-shadow` to show
    a part of the shadow in the bottom, `1px` for `blur`, `1px` for `spread` (as we
    want to modify the size of our shadow), color `#aaa`, and finally `inset` to have
    an inner shadow:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 `inset`，我们可以在我们的 **Top 5 Box Office** 区域添加一个内部阴影。在这里，我们为 `vertical-shadow`
    应用负定位 `-1px` 以在底部显示阴影的一部分，`1px` 用于模糊，`1px` 用于扩散（因为我们想修改阴影的大小），颜色为 `#aaa`，最后使用
    `inset` 以获得内部阴影：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As a result, our **Top 5 Box Office** area looks deeper than before:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的 **Top 5 Box Office** 区域看起来比以前更深：
- en: '![Adding box shadows](img/5689_05_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![添加框阴影](img/5689_05_06.jpg)'
- en: 'We can apply this to our wrapper to have shadows on the left and right borders:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此应用到我们的包装器上，以便在左右边框上产生阴影：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'While it is difficult to notice, the sum of these small details helps to reflect
    the visual richness of the enterprise application:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然很难注意到，这些小细节的总和有助于反映企业应用的视觉丰富性：
- en: '![Adding box shadows](img/5689_05_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![添加框阴影](img/5689_05_07.jpg)'
- en: '`box-shadow` is supported by all modern browsers except Internet Explorer,
    which only supports it from IE9 onwards.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-shadow` 被所有现代浏览器支持，除了 Internet Explorer，它只从 IE9 开始支持。'
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Unfortunately, fake flexible drop shadows are hard to create or expensive because
    sometimes it is better to not use shadows in old browsers, following the principles
    of graceful degradation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，创建假灵活的阴影很困难或成本很高，因为有时在旧浏览器中不使用阴影是更好的选择，遵循优雅降级的原理。
- en: Adding text shadows
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加文字阴影
- en: To add shadows to text we cannot use `box-shadow` because it applies the shadow
    to a square container. If we want to add shadows to any text, we should use the
    `text-shadow` property.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加文字阴影，我们不能使用 `box-shadow`，因为它应用于一个方形容器。如果我们想给任何文字添加阴影，我们应该使用 `text-shadow`
    属性。
- en: 'The syntax for `text-shadow` is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow` 的语法如下：'
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`text-shadow` is not supported by Internet Explorer, but for that case it is
    possible to use `filter:dropshadow` instead. The only downside (apart from compatibility)
    is that it is not possible to specify blur.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow` 不被 Internet Explorer 支持，但在此情况下可以使用 `filter:dropshadow` 代替。唯一的缺点（除了兼容性之外）是无法指定模糊效果。'
- en: 'The syntax for `filter:dropshadow` is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter:dropshadow` 的语法如下：'
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Even shadow effects are thought of as a way to pop out text. We can change
    the `color` property and fake `inset` elements. We use a light gray and 1px displacement
    horizontally and vertically with no blur in our **Top 5 Box Office** title:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至阴影效果也被视为突出文本的一种方式。我们可以更改 `color` 属性并伪造 `inset` 元素。我们在 **Top 5 Box Office**
    标题中使用浅灰色和水平垂直方向上1px的位移，没有模糊效果：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can check the `inset` element (right):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查 `inset` 元素（右侧）：
- en: '![Adding text shadows](img/5689_05_08.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![添加文字阴影](img/5689_05_08.jpg)'
- en: 'We will use a more traditional approach in our navigation bar, including `blur`
    on `hover`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的导航栏中使用更传统的方法，包括 `hover` 时的 `blur`：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Adding text shadows](img/5689_05_09.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![添加文字阴影](img/5689_05_09.jpg)'
- en: Some tricks to fake 3D
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些伪造3D的技巧
- en: 'Some depth effects can be simulated by using CSS previous to Version 3\. For
    example, we can use borders to simulate depth by placing a dark color border over
    a light color one:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 CSS 3 之前的版本可以模拟一些深度效果。例如，我们可以通过在浅色上放置深色边框来模拟深度：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can do this by applying this to our **Top 5 Box Office** area:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将此应用到我们的 **Top 5 Box Office** 区域来实现：
- en: '![Some tricks to fake 3D](img/5689_05_10.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![一些伪造3D的技巧](img/5689_05_10.jpg)'
- en: 'In some cases, the effect is not obvious but helps to give depth as a part
    of other effects:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，效果可能不明显，但作为其他效果的一部分有助于提供深度：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Applying this to the top of the navigation menu, we get the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将此应用到导航菜单的顶部，我们得到以下结果：
- en: '![Some tricks to fake 3D](img/5689_05_11.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![一些伪造3D的技巧](img/5689_05_11.jpg)'
- en: 'With all of our effects applied to our initial layout:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有效果应用到我们的初始布局中：
- en: '![Some tricks to fake 3D](img/5689_05_12.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![一些伪造3D的技巧](img/5689_05_12.jpg)'
- en: 'We see this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如下内容：
- en: '![Some tricks to fake 3D](img/5689_05_13.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![一些伪造3D的技巧](img/5689_05_13.jpg)'
- en: Movies and styles
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电影和风格
- en: 'Suppose that we have a requirement for the creation of a movie list with simple
    information, where every element shows more details when you click. Because of
    the tight deadline, the client decides to have a simple implementation, so that
    the requirement goes to a web designer and as a result we have an initial design:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要创建一个包含简单信息的电影列表，其中每个元素在点击时显示更多详细信息。由于时间紧迫，客户决定采用简单实现，因此需求交给了网页设计师，结果我们得到了一个初始设计：
- en: '![Movies and styles](img/5689_05_14.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![电影和风格](img/5689_05_14.jpg)'
- en: In a meeting with our web designer and our final client, we decide to show the
    movie synopsis on the click of the movie poster. Based on this, let us build a
    first approach to our structure.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在与我们的网页设计师和最终客户的会议中，我们决定在点击电影海报时显示电影简介。基于此，让我们构建我们结构的第一种方法。
- en: 'For a list where the order does not mean anything, we can use an unordered
    list `ul`. We first add movie posters to identify each element easily (using `img`),
    and then we define two blocks using the `main-info` (to show as a default) and
    `description` (to show on click) sections. In `main-info`, we add the title as
    `h3`, genre and rate as `p` with the `details` class, movie theater with tag `p`
    and the `theater` class, and actors as `p` with the `actors` class. In the details,
    we add the title as `h3` and the description as `p`. Now, our structure looks
    like the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个顺序无关紧要的列表，我们可以使用无序列表 `ul`。我们首先添加电影海报来轻松识别每个元素（使用 `img`），然后使用 `main-info`（默认显示）和
    `description`（点击时显示）部分定义两个区块。在 `main-info` 中，我们添加标题为 `h3`，类型和评分作为 `p` 并带有 `details`
    类，电影院使用标签 `p` 和 `theater` 类，以及演员作为 `p` 并带有 `actors` 类。在详情中，我们添加标题为 `h3` 和描述为 `p`。现在，我们的结构看起来像以下代码：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'First, we add the AJAX call to the end of `movienow.geolocation.js`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `movienow.geolocation.js` 的末尾添加 AJAX 调用：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, we modify the structure of the AJAX callback with our structure:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用我们的结构修改 AJAX 回调的结构：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We are creating our DOM structure concatenating a string, but if you want to
    use a more elegant solution you can use a client-side template library such as
    jQuery tmpl ([http://api.jquery.com/category/plugins/templates/](http://api.jquery.com/category/plugins/templates/)),
    Mustache ([http://mustache.github.com/](http://mustache.github.com/)), Underscore
    ([http://documentcloud.github.com/underscore/](http://documentcloud.github.com/underscore/)),
    or Pure ([http://beebole.com/pure/](http://beebole.com/pure/)). Template libraries
    allow you to separate the DOM structure from data. Some of them, such as Underscore,
    include logic.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在通过连接字符串来创建我们的DOM结构，但如果你想要一个更优雅的解决方案，你可以使用客户端模板库，如jQuery tmpl ([http://api.jquery.com/category/plugins/templates/](http://api.jquery.com/category/plugins/templates/))、Mustache
    ([http://mustache.github.com/](http://mustache.github.com/))、Underscore ([http://documentcloud.github.com/underscore/](http://documentcloud.github.com/underscore/)))
    或 Pure ([http://beebole.com/pure/](http://beebole.com/pure/))。模板库允许你将DOM结构从数据中分离出来。其中一些，如Underscore，包括逻辑。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we limit the size of `movie.synopsys` using `substr`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用`substr`限制了`movie.synopsys`的大小。
- en: 'As we want to add some highlights in white, we should change the `wrapper`
    and `main-info` `background-color` structures to a light gray as we saw in the
    original design, so we can use:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想在白色中添加一些高亮，因此我们应该将`wrapper`和`main-info`的`background-color`结构更改为与原始设计中的浅灰色相同，这样我们就可以使用：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Our Top 5 box is floated right, so we can give some `margin` to our movies
    container allowing for a more flexible design. We will change the original width
    of our `wrapper` structure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前5个盒子向右浮动，因此我们可以为我们的电影容器添加一些`margin`以允许更灵活的设计。我们将更改`wrapper`结构的原始宽度：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Styling our list
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的列表添加样式
- en: 'We want to apply some animations later, so we will add `position:relative`
    to move the absolute positioned elements inside, using `li` as our point of reference.
    We add `overflow:hidden` to account for any elements out of our `li` area. We
    use `borders top` and `bottom` with light and dark colors respectively to add
    a sensation of depth. Finally, we add dark gray as `background-color` (not in
    the original design, but this will be covered with `main-info` and `img`) and
    we set the mouse `cursor` attribute to `pointer` to indicate that the element
    is clickable:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在稍后应用一些动画，因此我们将添加`position:relative`来移动内部绝对定位的元素，使用`li`作为我们的参考点。我们添加`overflow:hidden`以处理任何超出`li`区域的元素。我们使用带有浅色和深色颜色的`borders
    top`和`bottom`来增加深度感。最后，我们添加深灰色作为`background-color`（原始设计中没有，但将被`main-info`和`img`覆盖），并将鼠标`cursor`属性设置为`pointer`以指示该元素是可点击的：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s float `img` to show `main-info` at its side and not below it. Oh, and
    some `margin` to leave a space between `img` and description text (that will be
    hidden for now):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浮动`img`以在旁边显示`main-info`而不是在下面。哦，还要一些`margin`来在`img`和描述文本之间留出空间（目前将隐藏）：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will be defining size, weight, and spacing for our titles as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将如下定义标题的大小、粗细和间距：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will add padding for each information inside `p` tags:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`p`标签内的每个信息添加填充：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a different text color and size for some details:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为一些细节添加不同的文本颜色和大小：
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will define a different text color and size for the movie theater and italic
    style using the following declaration:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下声明定义电影院的不同的文本颜色和大小以及斜体样式：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Applying a new style for actors:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为演员应用新的样式：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We define a static height that is the same as each movie poster image:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个静态高度，与每个电影海报图像相同：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Absolute positioning is applied to `main-info` (to animate it later). We add
    `margin` equal to the `width` attribute of our movie poster image and some padding
    for our text inside:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`main-info`应用了绝对定位（以便稍后进行动画）。我们添加与我们的电影海报图像的`width`属性相等的`margin`以及我们文本内部的填充：
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, we will be adding some styles for our hidden description, including
    an `inset box-shadow` attribute to simulate depth:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将为我们的隐藏描述添加一些样式，包括一个模拟深度的`inset box-shadow`属性：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: At this point our design looks the same as the image supplied by our web designer,
    but we still cannot see movie details. Before we satisfy this requirement, let
    us talk about transitions and animations.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的设计看起来与我们的网页设计师提供的图像相同，但我们仍然看不到电影详情。在我们满足这一要求之前，让我们谈谈转换和动画。
- en: Transitions
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: Usually we change classes of HTML elements based on interactions. For example,
    link styles on hover, show, and hiding of blocks of text on click for tabbed panels,
    and so on. Before CSS3, if we wanted to animate these changes, the only way to
    do it was with JavaScript. With CSS3, a simple way to do this is with `transition`.
    Having an initial class and a pseudo class triggered on an interaction, we can
    add a `transition` element with the properties that change between class and pseudo
    class to animate them.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们根据交互更改HTML元素的类。例如，悬停时的链接样式，点击时显示和隐藏用于选项卡的文本块等。在CSS3之前，如果我们想对这些更改进行动画处理，唯一的方法是使用JavaScript。有了CSS3，一个简单的方法是使用`transition`。有一个初始类和一个在交互上触发的伪类，我们可以添加一个具有在类和伪类之间改变属性的`transition`元素来动画化它们。
- en: 'The syntax for shorthand `transition` is as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 简写`transition`的语法如下：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`transition-timing-function` specifies how fast transition occurs. Possible
    values for this are: `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`, and
    `cubic-bezier(n,n,n,n)`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-timing-function`指定转换发生速度。此属性的值可以是：`linear`、`ease`、`ease-in`、`ease-out`、`ease-in-out`和`cubic-bezier(n,n,n,n)`。'
- en: '`transition-delay` is used if we wanted to start our animation in another point
    in time other than initial state (0s).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在初始状态（0s）之外的其他时间点开始动画，则使用`transition-delay`。
- en: 'We can use multiple transitions at the same time:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以同时使用多个转换：
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Transitions are triggered with interactions and have only two states: initial
    and final.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 转换由交互触发，并且只有两种状态：初始状态和最终状态。
- en: Animations
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: If we want to implement complex movement that involves multiple states, it is
    not possible to use transitions. For this, we have animations. Moreover, you do
    not need to trigger an interaction to start an animation (but we shall keep this
    a secret so as to avoid a new animated GIF boom in this era).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要实现涉及多个状态复杂动作，无法使用转换。为此，我们使用动画。此外，您不需要触发交互来启动动画（但我们应将其保密，以避免在这个时代出现新的动画GIF热潮）。
- en: Animations rely on `@keyframes`. Similar to their counterpart in animation tools
    (including Adobe Flash), a keyframe allows you to define states and the values
    of the properties in them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 动画依赖于`@keyframes`。类似于动画工具（包括Adobe Flash）中的对应物，关键帧允许您定义状态及其中的属性值。
- en: 'For example, we can use:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Or more complex constructs using percentages and multiple properties:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用百分比和多个属性的更复杂结构：
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We can specify as many steps as we want. `animation-name` is used later to call
    our keyframe.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定我们想要的步骤数量。`animation-name`稍后用于调用我们的关键帧。
- en: 'The syntax used for animation is as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 用于动画的语法如下：
- en: '[PRE41]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Most of the properties have the same meaning as transitions. `animation-iteration-count`
    specifies the number of times that the animation will repeat (or `infinite` if
    it never stops), `animation-direction` allows the animation to run normally (`normal`),
    or alternate back and forward (`alternate`).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数属性的含义与转换相同。`animation-iteration-count`指定动画将重复的次数（或如果它永不停止，则为`infinite`），`animation-direction`允许动画正常运行（`normal`），或交替前后（`alternate`）。
- en: Additionally, we have `animation-play-state` that is not on the shorthand mode.
    This property allows us to stop (`paused`) and start again (`running`) our animation.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有`animation-play-state`属性，它不在简写模式中。此属性允许我们停止（`paused`）并重新开始（`running`）我们的动画。
- en: Choosing between transitions and animations
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在转换和动画之间进行选择
- en: In our case we have only two states, one that shows the general details of the
    movie and a pseudo class state that shows the description of the movie. This should
    be triggered on click, so the simplest solution is to use a transition.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们只有两种状态，一种是显示电影的一般细节，另一种是显示电影描述的伪类状态。这应该在点击时触发，因此最简单的解决方案是使用转换。
- en: Tip
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although it is possible to use `animation` in every situation, it is better
    to rely on `transition` for simple requirements related to common interactions.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在每种情况下都可以使用`animation`，但对于与常见交互相关的简单需求，最好依赖于`transition`。
- en: 'In our case, we want to animate the `main-info` `left` and `right` properties.
    The initial state s `0` for both:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们想要动画化`main-info`的`left`和`right`属性。初始状态为两者都是`0`：
- en: '[PRE42]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The final state will be `left:100%` (`li` right side) and `right:-100%` (`100%`
    to the right from `li` right side). We create a pseudo state with class `open`
    for `li`:.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最终状态将是`left:100%`（`li`的右侧）和`right:-100%`（从`li`的右侧向右`100%`）。我们为`li`创建一个具有类`open`的伪状态：
- en: 'To change the class on click, we add a `toggleClass` call on click for each
    `li` using jQuery on `movienow.js`. `toggleClass` adds and removes the `open`
    class:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要在点击时更改类，我们为每个`li`使用jQuery在`movienow.js`中添加一个`toggleClass`调用。`toggleClass`添加和删除`open`类：
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If you click on each element, you will notice the change that shows and hides
    each description.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击每个元素，你会注意到显示和隐藏每个描述的变化。
- en: 'To add our `transition`, we specify the `left` and `right` properties and a
    duration of `.3` seconds for each one. Using multiple browser prefixes we have
    the following code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加我们的`transition`，我们指定`left`和`right`属性，以及每个的`.3`秒持续时间。使用多个浏览器前缀，我们得到以下代码：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Testing again, we should see a fluid movement that goes from one state to another.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 再次测试，我们应该看到一个从一种状态到另一种状态的流畅运动。
- en: '![Choosing between transitions and animations](img/5689_05_15.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![选择过渡和动画](img/5689_05_15.jpg)'
- en: If we click on **Brave**, we will see an animation and then the movie synopsis,
    as partially depicted in the following screenshot.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**Brave**，我们会看到一个动画，然后是电影简介，部分如图下截图所示。
- en: '![Choosing between transitions and animations](img/5689_05_16.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![选择过渡和动画](img/5689_05_16.jpg)'
- en: 'Let us add an animation to our header to test the `animation` property. Our
    header shows a movie roll film decoration. If we want to roll the roll film, we
    need to define some keyframes. In this case, we specify only two states: `from`
    and `to`. Because of our design, we move the roll horizontally from 0 to -19px
    (the space between white rectangles, to create the same initial and end state
    to our loop). We will add this with the respective browser prefixes and naming
    our `keyframe`with `movierolling`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在标题中添加一个动画来测试`animation`属性。我们的标题显示一个电影卷轴装饰。如果我们想滚动卷轴，我们需要定义一些关键帧。在这种情况下，我们只指定两种状态：`from`和`to`。由于我们的设计，我们将卷轴水平从0移动到-19px（白色矩形之间的空间，以创建相同的初始和结束状态以供循环使用）。我们将使用相应的浏览器前缀，并将我们的`keyframe`命名为`movierolling`：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We add `movierolling` as `animation` in our header specifying `.5 segs` `animation:movierolling
    .5s`, an infinite loop `animation-iteration-count:infinite`, and a linear easing
    to make a fluid loop `animation-timing-function:linear`. As a result, we have
    the following code:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在标题中添加`movierolling`作为`animation`，指定`.5 segs` `animation:movierolling .5s`，一个无限循环`animation-iteration-count:infinite`，以及线性缓动以创建流畅的循环`animation-timing-function:linear`。因此，我们得到以下代码：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: And the roll is rolling!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播开始了！
- en: Let us comment out this animation code for now and get back to our application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先注释掉这个动画代码，然后回到我们的应用中。
- en: Using media queries
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询
- en: The transition that we added to visualize the synopses works nicely, but on
    mobile devices we do not have enough space to show the complete synopsis for each
    movie. A possible solution could be to hide the movie posters images for mobile
    devices, that should give us at least an additional 120 px.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的用于可视化简介的过渡效果很好，但在移动设备上我们没有足够的空间显示每部电影的完整简介。一个可能的解决方案是隐藏移动设备的电影海报图像，这应该至少给我们额外的120
    px。
- en: 'As we saw in previous chapters, we can use media queries to specify different
    behaviors for different screen sizes. We can add a case for devices until 737
    px:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中看到的，我们可以使用媒体查询为不同的屏幕尺寸指定不同的行为。我们可以为737 px以下的设备添加一个案例：
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let us apply a transition with the same time of our `main-info` one, but in
    this case only for `margin-left`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们应用一个与`main-info`相同时间的过渡，但在这个情况下只为`margin-left`：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The final position should have a negative `margin` value to move our images
    outside of the `li` area:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最终位置应该有一个负的`margin`值，以便将我们的图像移动到`li`区域之外：
- en: '[PRE49]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Additionally, let us hide actors and genres to have more space inside `main-info`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们隐藏演员和类型，以便在`main-info`内部有更多空间：
- en: '[PRE50]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now we can see a different interaction in small devices, allowing us to see
    the complete description:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到小设备上的不同交互，允许我们看到完整的描述：
- en: '![Using media queries](img/5689_05_17.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![使用媒体查询](img/5689_05_17.jpg)'
- en: If we click on **The Bourne Legacy**, we will see an animation and then the
    movie synopsis.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**The Bourne Legacy**，我们会看到一个动画，然后是电影简介。
- en: '![Using media queries](img/5689_05_18.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![使用媒体查询](img/5689_05_18.jpg)'
- en: Applying CSS3 selectors
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用CSS3选择器
- en: We have been using common selectors, but CSS3 introduces a new set that opens
    styling to new possibilities.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用通用选择器，但CSS3引入了一个新的集合，为样式化打开了新的可能性。
- en: 'Most of these selectors are not supported in Internet Explorer 8 or the previous
    versions; you can verify support using the compatibility tables mentioned at the
    following link: [http://www.quirksmode.org/css/contents.html#CSS3](http://www.quirksmode.org/css/contents.html#CSS3).
    You can always substitute these selectors for class declarations on your CSS and
    add these classes in your HTML using conditionals in your code.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些选择器在Internet Explorer 8或更早版本中不受支持；您可以使用以下链接中提到的兼容性表格来验证支持：[http://www.quirksmode.org/css/contents.html#CSS3](http://www.quirksmode.org/css/contents.html#CSS3)。您始终可以用CSS中的类声明替换这些选择器，并在您的HTML中使用代码中的条件添加这些类。
- en: We will not include this code as a part of our project, but you can test it
    using `styles.css` (code commented) in the `3.- selectors` folder to visualize
    the results.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会将此代码作为我们项目的一部分，但您可以使用`3.- selectors`文件夹中的`styles.css`（代码已注释）来测试它，以可视化结果。
- en: '`:first-of-type`: This selects the first element with the selector''s type.
    Let us say we want to apply a different `background-color` to the first element
    inside our movie list. We can select the first appearance of `li` followed by
    the selector that indicates which element must change its background color:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:first-of-type`：这个选择器用于选择具有选择器类型的第一个元素。假设我们想为电影列表中的第一个元素应用不同的`background-color`。我们可以选择`li`的第一个出现，然后是表示哪个元素必须更改其背景颜色的选择器：'
- en: '[PRE51]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`:last-of-type`: This is similar to the previous selector, but it selects the
    last element. Applying the same case as before:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:last-of-type`：这个选择器与前面的选择器类似，但它选择最后一个元素。应用之前的相同案例：'
- en: '[PRE52]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`:only-of-type`: This selects only unique elements of the type indicated. Using
    our movie''s details, if we apply the following:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:only-of-type`：这个选择器只选择指定类型的唯一元素。使用我们电影的详细信息，如果我们应用以下：'
- en: '[PRE53]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can add `background-color` to `h3` since it is only `h3` contained by its
    parent, but if we use the following, nothing is selected because there are multiple
    `p` elements inside:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以为`h3`添加`background-color`属性，因为它只被其父元素包含，但如果使用以下方法，则没有任何内容被选中，因为其中包含多个`p`元素：
- en: '[PRE54]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`:only-child`: This selects elements whose parents only contain them. For example,
    using this selector we can change `article` `background-color` because it is the
    only element contained by its parent.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:only-child`：这个选择器用于选择其父元素只包含它们的元素。例如，使用这个选择器我们可以改变`article`的`background-color`，因为它是其父元素中唯一包含的元素。'
- en: '[PRE55]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: But if we select `section`, nothing will be selected because there are multiple
    children in its parent.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但如果我们选择`section`，则不会选择任何内容，因为其父元素中有多个子元素。
- en: '[PRE56]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`:nth-child(n)`: This allows us to specify the element we want to select using
    positions. If we want to select the third element in our list:'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:nth-child(n)`：这个选择器允许我们通过位置指定要选择的元素。如果我们想选择列表中的第三个元素：'
- en: '[PRE57]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`:nth-last-child(n)`: This applies the same principle as the prior selector,
    but counting from the last element:'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:nth-last-child(n)`：这个选择器与前面的选择器使用相同的原理，但计数从最后一个元素开始：'
- en: '[PRE58]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '`:nth-of-type(n)`: This uses the same principle as before, but it will count
    only elements of the same type. For example, if we apply `p:nth-of-type(2)` to
    select the second element, it will ignore any differences to `p`. Selecting the
    second `p` element, we have:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:nth-of-type(n)`：这个选择器与之前的选择器使用相同的原理，但它只会计数相同类型的元素。例如，如果我们应用`p:nth-of-type(2)`来选择第二个元素，它将忽略任何与`p`的差异。选择第二个`p`元素，我们有以下代码片段：'
- en: '[PRE59]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '`:nth-last-of-type(n)`: This does the same, but counts from the last element:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:nth-last-of-type(n)`：这个选择器做的是相同的，但它从最后一个元素开始计数：'
- en: '[PRE60]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '`:last-child`: This selects the element that is the last child of its parent.
    Selecting the last movie, we have the following code snippet:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:last-child`：这个选择器用于选择是其父元素的最后一个子元素的元素。选择最后一个电影，我们有以下代码片段：'
- en: '[PRE61]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`:root`: This allows us to select the `html` root tag. Let us change the `background-color`
    value of `html`, but first we reset the already defined `background-color` attribute
    for `html` and `body` tags:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:root`：这个选择器允许我们选择`html`根标签。让我们改变`html`的`background-color`值，但首先我们需要重置已经定义的`html`和`body`标签的`background-color`属性：'
- en: '[PRE62]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add `background-color` to `root` (`html`):'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`background-color`添加到`root`（`html`）：
- en: '[PRE63]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`:empty`: This selects elements with no children or text. Let us show in red
    `div` elements with no content in our application:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:empty`：这个选择器用于选择没有子元素或文本的元素。让我们在我们的应用中以红色显示没有内容的`div`元素：'
- en: '[PRE64]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: You should see the logo area and `div.push` in red.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该看到标志区域和`div.push`以红色显示。
- en: '`:target`: This selects elements with the `id` value equal to the active `anchor`.
    To test this we can define a link with an anchor and an `id` attribute to mark
    the link as active:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:target`：这个选择器用于选择具有与活动`anchor`相等的`id`值的元素。为了测试这个，我们可以定义一个带有锚点和`id`属性的链接来标记该链接为活动链接：'
- en: '[PRE65]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We can define the style to mark the text in yellow:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以定义样式来标记黄色文本：
- en: '[PRE66]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: If you click the link, you will see the color change.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你点击链接，你会看到颜色变化。
- en: '`:not(selector)`: This selects all elements that do not fulfill the conditions
    of the selector. For example, if we want to select all `p` elements except the
    ones with the `theater` class:'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:not(selector)`: 这将选择所有不满足选择器条件的元素。例如，如果我们想选择所有没有`theater`类的`p`元素：'
- en: '[PRE67]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`:enabled`: This selects input fields with no disabled property. If we have,
    `<input type="button" value="enable" />`, we can define an orange border using
    the following code:'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:enabled`: 这将选择没有禁用属性的输入字段。如果我们有`<input type="button" value="enable" />`，我们可以使用以下代码定义一个橙色边框：'
- en: '[PRE68]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`:disabled`: This selects input fields with the `disabled` property. As before
    we can have:'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:disabled`: 这将选择具有`disabled`属性的输入字段。和之前一样，我们可以有：'
- en: '[PRE69]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`:checked`: This selects `input` with `type` `checkbox` that are `checked`.
    If we have the following code, we can see that the element changes style when
    it is checked:'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:checked`: 这将选择`type`为`checkbox`且被`checked`的`input`。如果我们有以下代码，我们可以看到当它被选中时元素会改变样式：'
- en: '[PRE70]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '`element1~element2`: This selects `element2` preceded by `element1`. If we
    want to select `p` elements preceded by `h3`, we can apply the following:'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element1~element2`: 这将选择由`element1` precede的`element2`。如果我们想选择由`h3` precede的`p`元素，我们可以应用以下方法：'
- en: '[PRE71]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '`[attribute^=value]`: This selects elements whose "attribute" begins with a
    particular "value". For example, let us hide the poster''s images for every image
    whose `alt` attribute starts with `Dark`:'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[attribute^=value]`: 这将选择其"attribute"以特定"value"开头的元素。例如，让我们隐藏所有`alt`属性以`Dark`开头的图像：'
- en: '[PRE72]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '`[attribute$=value]`: This selects elements whose "attribute" ends with a particular
    "value". For example, let us hide the poster''s images for every image whose `alt`
    attribute ends with `s`:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[attribute$=value]`: 这将选择其"attribute"以特定"value"结尾的元素。例如，让我们隐藏所有`alt`属性以`s`结尾的图像：'
- en: '[PRE73]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '`[attribute*=value]`: This selects elements whose "attribute" contains a "value".
    For example, let us hide the poster''s images for every image whose `alt` attribute
    contains `ar`:'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[attribute*=value]`: 这将选择其"attribute"包含"value"的元素。例如，让我们隐藏所有`alt`属性包含`ar`的图像：'
- en: '[PRE74]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: New CSS3 features are not a new introduction to web development; they are a
    simplification of the execution. Before CSS3, it was possible to use gradients,
    drop shadows, rounded corners and even animations, but implementations were expensive
    and the scalability intricate. With all these possibilities, we should not forget
    old techniques that rely on images and complex JavaScript because even though
    we all hope for a simpler future based only in new generation browsers, we must
    face the problems of old generation browsers.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 新的CSS3特性并不是对网络开发的全新引入；它们是对执行过程的简化。在CSS3之前，可以使用渐变、阴影、圆角甚至动画，但实现成本高昂且可扩展性复杂。有了所有这些可能性，我们不应忘记依赖于图像和复杂JavaScript的旧技术，因为尽管我们都希望有一个基于新一代浏览器的更简单未来，但我们必须面对旧一代浏览器的问题。
- en: We have shown how to apply the most used CSS3 properties to our enterprise applications
    and how to manage compatibility issues related with styles across the browsers.
    Additionally, we introduced CSS3 animations and transitions, so now we are capable
    of selecting the right solution for our projects. Finally, we can apply media
    queries and selectors to our stylesheets for more complex and elegant solutions.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了如何将最常用的CSS3属性应用到我们的企业应用中，以及如何管理与样式相关的跨浏览器兼容性问题。此外，我们介绍了CSS3动画和过渡，因此现在我们能够为我们的项目选择正确的解决方案。最后，我们可以将媒体查询和选择器应用到样式表中，以实现更复杂和优雅的解决方案。
- en: The following chapter will introduce HTML5 video and audio management, JavaScript
    control of media reproduction, and basic strategies to grant backward compatibility.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍HTML5视频和音频管理、JavaScript对媒体播放的控制，以及提供向后兼容性的基本策略。
