- en: Chapter 13. Building a Search Engine Template Using AngularJS 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章. 使用AngularJS 2构建搜索引擎模板
- en: To build **single page applications** (**SPAs**) using Angular 2, we need to
    learn how to implement routing in Angular 2\. Angular 2 comes with built-in routing
    APIs, which are very powerful, feature rich, and easy to use. In this chapter,
    we will build a basic search engine template to demonstrate routing in Angular
    2\. We won't be building a complete search engine because that's out of the scope
    of this book. We will use Bootstrap 4 to design the search engine template. At
    the end of this chapter, you will be comfortable with building SPAs using Angular
    2.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Angular 2构建**单页应用程序**（**SPAs**），我们需要学习如何在Angular 2中实现路由。Angular 2自带内置的路由API，它们非常强大、功能丰富且易于使用。在本章中，我们将构建一个基本的搜索引擎模板来演示Angular
    2中的路由。我们不会构建一个完整的搜索引擎，因为这超出了本书的范围。我们将使用Bootstrap 4来设计搜索引擎模板。在本章结束时，你将能够舒适地使用Angular
    2构建SPAs。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Routing in Angular 2
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2中的路由
- en: The built-in HTTP client provided by Angular 2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2提供的内置HTTP客户端
- en: Generating random textual data using the `Chance.js` library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Chance.js`库生成随机文本数据
- en: Setting up the project
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'Follow these steps to set up your project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置你的项目：
- en: In the exercise files of this chapter, you will find two directories, `initial`
    and `final`. The `final` directory contains the final search engine template whereas
    the `initial` directory contains the files to quickly get started with building
    the search engine template.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章的练习文件中，你会找到两个目录，`initial`和`final`。`final`目录包含最终的搜索引擎模板，而`initial`目录包含快速开始构建搜索引擎模板的文件。
- en: 'In the `initial` directory, you will find `app.js` and `package.json`. In the
    `package.json` file, place this code:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initial`目录中，你会找到`app.js`和`package.json`文件。在`package.json`文件中，放置以下代码：
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are listing `Express.js` and `Chance.js` as dependencies. Express will
    be used to build the web server whereas `Chance.js` will be used to generate random
    textual data to populate the template's search results.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，我们将`Express.js`和`Chance.js`列为依赖项。Express将用于构建Web服务器，而`Chance.js`将用于生成随机文本数据以填充模板的搜索结果。
- en: Now, run `npm install` inside the `initial` directory to download the packages.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`initial`目录下运行`npm install`以下载包。
- en: Inside the `initial` directory, you will find a directory named `public`, inside
    which all the static assets will be placed. Inside the `public` directory, you
    will find the `componentTemplates`, `css`, `html`, and `js` directories.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`initial`目录中，你会找到一个名为`public`的目录，其中将放置所有静态资源。在`public`目录中，你会找到`componentTemplates`、`css`、`html`和`js`目录。
- en: Inside the `css` directory, you will find `bootstrap.min.css`; `index.html`
    inside the `html` directory; and finally, `index.js`, `angular2-all.umd.js`, `angular2-polyfills.js`,
    and `Rx.umd.js` inside the `js` directory.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`css`目录中，你会找到`bootstrap.min.css`；在`html`目录中找到`index.html`；最后，在`js`目录中找到`index.js`、`angular2-all.umd.js`、`angular2-polyfills.js`和`Rx.umd.js`。
- en: 'In `index.html`, place this starting code to load Angular, Bootstrap, and the
    `index.js` file:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中，放置以下起始代码以加载Angular、Bootstrap和`index.js`文件：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code is self-explanatory.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码是自解释的。
- en: 'Now, in the `app.js` file, place this code:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app.js`文件中，放置以下代码：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here as well, most of the code is self-explanatory. We are simply serving `index.html`
    regardless of what the HTTP request path is.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，大部分代码都是自解释的。我们只是简单地根据HTTP请求路径提供服务`index.html`。
- en: Configuring routes and bootstrapping the app
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置路由和启动应用
- en: In SPA, the routes for our app are defined in the frontend. In Angular 2, we
    need to define the paths and a component associated with the path that will be
    rendered for that path.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在SPA中，我们应用的路由定义在前端。在Angular 2中，我们需要定义路径和与该路径关联的组件，该组件将被渲染为该路径。
- en: We provide the routes to the root component, and the root component displays
    the component bound to the route.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将路由提供给根组件，根组件显示与路由绑定的组件。
- en: 'Let''s create the root component and routes for our search engine template:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的搜索引擎模板的根组件和路由：
- en: 'Place this code in the `index.js` file to to create the root components and
    routes:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放置在`index.js`文件中，以创建根组件和路由：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, create a file named `app.html` in the `componentTemplates` directory and
    place this code in it:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`componentTemplates`目录中创建一个名为`app.html`的文件，并将以下代码放入其中：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is how this code works:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的工作原理如下：
- en: At first, we create the root component, called `AppComponent`. While creating
    the root component, we add the `ng.router.ROUTER_DIRECTIVES` directive to it,
    which lets us use the `routerLink` directive.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建根组件，命名为`AppComponent`。在创建根组件时，我们向其中添加了`ng.router.ROUTER_DIRECTIVES`指令，这使得我们可以使用`routerLink`指令。
- en: Then, we use `ng.router.RouteConfig` to configure the routes for our application.
    We are providing an array of routes as an argument to the `ng.router.RouteConfig`
    method. A route consists of a path, component, and the name of the route. The
    paths can be static, parameterized, or wildcard, just like Express route paths.
    Here, the first route is for the home page, second for displaying the search result,
    and finally, the third for handling invalid URLs, that is, URLs for which routes
    are not defined. The `ng.router.RouteConfig` method returns a function that takes
    the root component and attaches the routes to it.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`ng.router.RouteConfig`来配置我们应用程序的路由。我们将路由数组作为参数传递给`ng.router.RouteConfig`方法。一个路由由路径、组件和路由名称组成。路径可以是静态的、参数化的或通配符，就像Express路由路径一样。在这里，第一个路由是主页，第二个是显示搜索结果，最后一个是处理无效URL，即未定义路由的URL。`ng.router.RouteConfig`方法返回一个函数，该函数接受根组件并将其路由附加到它上。
- en: We then initialize the application. While initializing the app, we're passing
    the `ng.router.ROUTER_PROVIDERS` provider, which will be used to create instances
    of various services related to routing. Also, we are providing a custom provider,
    which returns the `/` character when an instance of the `ng.router.APP_BASE_HREF`
    service is requested. `ng.router.APP_BASE_HREF` is used to find the base URL of
    the app.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们初始化应用程序。在初始化应用程序时，我们传递了`ng.router.ROUTER_PROVIDERS`提供者，它将被用于创建与路由相关的各种服务的实例。此外，我们提供了一个自定义提供者，当请求`ng.router.APP_BASE_HREF`服务的实例时，它返回`/`字符。`ng.router.APP_BASE_HREF`用于查找应用程序的基本URL。
- en: In the `AppComponent` template, we are displaying a navigation bar. The navigation
    bar has an `anchor` tag that doesn't have an `href` attribute; instead, we are
    using the `routerLink` directive to assign the redirect link so that when clicked
    on, instead of a complete page reload, it only changes the URL and component.
    And finally, `<router-outlet>` is what displays the component based on the current
    URL.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppComponent`模板中，我们正在显示一个导航栏。导航栏中有一个没有`href`属性的`anchor`标签；相反，我们使用`routerLink`指令来分配重定向链接，这样当点击时，不会进行完整的页面刷新，只会改变URL和组件。最后，`<router-outlet>`是用于根据当前URL显示组件的部分。
- en: Generating random search results
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机搜索结果
- en: To populate our template, we need to generate some random search result data.
    For this, we can use the `Chance.js` library. We will generate random data on
    the server side, not on client side, so that we can later demonstrate how to make
    an HTTP request using Angular 2.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充我们的模板，我们需要生成一些随机的搜索结果数据。为此，我们可以使用`Chance.js`库。我们将在服务器端生成随机数据，而不是在客户端，这样我们就可以稍后展示如何使用Angular
    2进行HTTP请求。
- en: '`Chance.js` is available for both client-side and server-side JavaScript. We
    earlier downloaded the `Chance.js` package to use with `Node.js`. Here is the
    code to generate random data. Place it in the `app.js` file above the `/*` route
    so that `/*` doesn''t override the random data route:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chance.js`适用于客户端和服务器端JavaScript。我们之前下载了`Chance.js`包，用于与`Node.js`一起使用。以下是生成随机数据的代码。将其放置在`app.js`文件中，在`/*`路由之上，这样`/*`就不会覆盖随机数据路由：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we first create a route for the `/getData` path, which sends an array
    of search results as a response. The route callback uses `chance.sentence()` to
    generate random titles for the search result and `chance.paragraph()` to generate
    a description.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先为`/getData`路径创建一个路由，该路由返回一个搜索结果数组作为响应。路由回调使用`chance.sentence()`生成随机标题，使用`chance.paragraph()`生成描述。
- en: Creating route components
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由组件
- en: 'Let''s create `HomeComponent`, `SearchResultComponent`, and `NotFoundComponent`.
    Before that, let''s create a component to display the search form. The search
    form will have a textbox and a search button. Follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`HomeComponent`、`SearchResultComponent`和`NotFoundComponent`。在此之前，让我们创建一个用于显示搜索表单的组件。搜索表单将包含一个文本框和一个搜索按钮。按照以下步骤操作：
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码放置在`index.js`文件中，在`AppComponent`代码之上：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, create a file named `search-form.html` in the `componentTemplates` directory,
    and place this code in it:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`componentTemplates`目录中创建一个名为`search-form.html`的文件，并将此代码放入其中：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is how the code works:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码的工作原理：
- en: At first, we create a component called `FormComponent`. It uses the `ng.router.ROUTER_DIRECTIVES`
    directive.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为 `FormComponent` 的组件。它使用 `ng.router.ROUTER_DIRECTIVES` 指令。
- en: In the template of the component, we display an HTML form. The form has a textbox
    and button.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件模板中，我们显示一个 HTML 表单。该表单包含一个文本框和按钮。
- en: We handle the `keyup` event of the text input box and store the value in the
    `searchParams.query` property.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们处理文本输入框的 `keyup` 事件，并将值存储在 `searchParams.query` 属性中。
- en: The button redirects to the `SearchResult` component. Note that here we are
    passing `searchParams` object to `routerLink`, which becomes the query parameter
    when redirecting.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该按钮将重定向到 `SearchResult` 组件。注意，在这里我们将 `searchParams` 对象传递给 `routerLink`，在重定向时它将成为查询参数。
- en: Now, let's create the `HomeComponent` component. This component is displayed
    on the home page. It displays the search form.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `HomeComponent` 组件。该组件显示在主页上。它显示搜索表单。
- en: 'Here is how to create `HomeComponent`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何创建 `HomeComponent`：
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码放置在 `index.js` 文件中，在 `AppComponent` 代码之上：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, create a file named `search-form.html`, and place it in the `componentTemplates`
    directory:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `search-form.html` 的文件，并将其放置在 `componentTemplates` 目录中：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the `HomeComponent` code is self-explanatory.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`HomeComponent` 的代码是自我解释的。
- en: 'Now, let''s create the `SearchResultComponent` component. This component should
    display the search form and the search result below it. It should fetch the result
    by making an HTTP request to the server. Here is the code for the `SearchResultComponent`.
    Place it in the `index.js` file, above the `AppComponent` code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `SearchResultComponent` 组件。该组件应显示搜索表单及其下方的搜索结果。它应通过向服务器发送 HTTP 请求来获取结果。以下是
    `SearchResultComponent` 的代码。将其放置在 `index.js` 文件中，在 `AppComponent` 代码之上：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, create a file named `searchResult.html` and place it in `componentTemplates`.
    Place this code in the file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `searchResult.html` 的文件，并将其放置在 `componentTemplates` 目录中。将此代码放置在文件中：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is how the code works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码的工作方式：
- en: Here, we are providing the `ng,http.HTTP_PROVIDERS` provider, which is used
    when using the HTTP client service provided by Angular 2\. Using the HTTP client
    service, we can make HTTP requests.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里，我们提供了 `ng,http.HTTP_PROVIDERS` 提供者，它在使用 Angular 2 提供的 HTTP 客户端服务时使用。使用 HTTP
    客户端服务，我们可以发送 HTTP 请求。
- en: In the constructor property, we are injecting the HTTP service along with the
    `ng.router.RouteParams` service, which is used to obtain the query parameters
    of the current URL.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数属性中，我们注入了 HTTP 服务以及 `ng.router.RouteParams` 服务，该服务用于获取当前 URL 的查询参数。
- en: In the `ngOnInit` method, you can see how to make a `GET` request using the
    HTTP service and also how to get the query parameters using the `ng.router.RouteParams`
    service.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ngOnInit` 方法中，你可以看到如何使用 HTTP 服务进行 `GET` 请求，以及如何使用 `ng.router.RouteParams`
    服务获取查询参数。
- en: In the template of the component, we are displaying the fetched search result
    using the `ngFor` directive.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件模板中，我们使用 `ngFor` 指令显示获取的搜索结果。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn about the HTTP service provided by Angular 2 at [https://angular.io/docs/ts/latest/guide/server-communication.html](https://angular.io/docs/ts/latest/guide/server-communication.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://angular.io/docs/ts/latest/guide/server-communication.html](https://angular.io/docs/ts/latest/guide/server-communication.html)
    了解 Angular 2 提供的 HTTP 服务。
- en: 'Now, let''s create `NotFoundComponent`. Here is the code for that:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `NotFoundComponent`。以下是该组件的代码：
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码放置在 `index.js` 文件中，在 `AppComponent` 代码之上：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, create a file named `notFound.html` and place it in the `componentTemplates`
    directory. Place this code inside the file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `notFound.html` 的文件，并将其放置在 `componentTemplates` 目录中。将此代码放置在文件中：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The code is self-explanatory.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码是自我解释的。
- en: Testing the template
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试模板
- en: 'To test the template, we will follow these steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试模板，我们将遵循以下步骤：
- en: Inside the `initial` directory, run the `node app.js` command.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `initial` 目录中，运行 `node app.js` 命令。
- en: Now, in a browser, open the `http://localhost:8080/` URL. You should see this
    output:![Testing the template](img/B05154_13_01.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在浏览器中打开 `http://localhost:8080/` URL。你应该看到以下输出：![测试模板](img/B05154_13_01.jpg)
- en: Now, type something in the search box and click on the **Search** button. You
    should then see this output:![Testing the template](img/B05154_13_02.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在搜索框中输入一些内容，然后点击 **搜索** 按钮。你应该看到以下输出：![测试模板](img/B05154_13_02.jpg)
- en: Now, enter an invalid path in the address bar. You should be able to see this
    output:![Testing the template](img/B05154_13_03.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在地址栏中输入一个无效的路径。你应该能看到以下输出：![测试模板](img/B05154_13_03.jpg)
- en: Routing life cycle methods
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由生命周期方法
- en: When a path matches a component, Angular 2 activates the component, and when
    the path changes, Angular 2 deactivates it. When we say that a component has been
    activated, it means that Angular 2 has created an instance of the component, that
    is, called the constructor method of the component, whereas when we say a component
    has been deactivated, it means the component has been removed from the DOM and
    instance is deleted.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径与组件匹配时，Angular 2 激活该组件，当路径改变时，Angular 2 停用它。当我们说一个组件已被激活时，这意味着 Angular 2
    已创建了一个组件的实例，即调用了组件的构造函数方法，而当我们说一个组件已被停用时，这意味着组件已被从 DOM 中移除，实例已被删除。
- en: The methods of a component that are called while activating or deactivating
    it are called routing lifecycle methods.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活或停用组件时调用的组件方法被称为路由生命周期方法。
- en: 'Here is the list of routing lifecycle methods:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是路由生命周期方法的列表：
- en: '`CanActivate`: This hook is invoked before activating the component. It should
    return a boolean value or a promise indicating whether to activate the component.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanActivate`: 在激活组件之前调用此钩子。它应该返回一个布尔值或一个表示是否激活组件的承诺。'
- en: '`routerOnActivate`: This method is invoked after the component has been activated.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routerOnActivate`: 此方法在组件被激活后调用。'
- en: '`routerCanReuse`: This method is invoked to find out whether to reuse the previous
    instance of the component when the next URL change is the same URL again. It should
    return a boolean value or a promise indicating whether to reuse. It''s invoked
    only if an instance had been created earlier.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routerCanReuse`: 调用此方法以确定在下一个 URL 变更再次是相同 URL 时是否重用组件的先前实例。它应该返回一个布尔值或一个表示是否重用的承诺。它仅在之前已创建实例的情况下调用。'
- en: '`routerOnReuse`: This method is invoked if the component is being reused. It''s
    called after `routerCanReuse`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routerOnReuse`: 如果组件正在被重用，则调用此方法。它在 `routerCanReuse` 之后调用。'
- en: '`routerCanDeactivate`: This method is invoked before deactivating the component.
    It should return a boolean value or a promise indicating whether to deactivate
    the component.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routerCanDeactivate`: 在停用组件之前调用此方法。它应该返回一个布尔值或一个表示是否停用组件的承诺。'
- en: '`routerOnDeactivate`: This method is invoked after the component has been deactivated.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routerOnDeactivate`: 此方法在组件被停用后调用。'
- en: 'Let''s look at a code example of the routing lifecycle methods. Replace the
    `HomeComponent` code with this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看路由生命周期方法的代码示例。将 `HomeComponent` 的代码替换为以下内容：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, visit the home page. There, click on the home button again. Now, type
    something in the search box and click on the **Search** button. This is the console
    output you will see:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，访问主页。在那里，再次点击主页按钮。现在，在搜索框中输入一些内容并点击**搜索**按钮。你将看到以下控制台输出：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Production mode versus development mode
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产模式与开发模式
- en: Until now, we have been running Angular 2 in development mode. The difference
    between development and production mode is that in development mode, Angular 2
    starts change detection immediately after the first run and logs a **value has
    changed after it was checked** error if anything changes between the first and
    second run. This helps locate bugs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在开发模式下运行 Angular 2。开发模式和生产模式之间的区别在于，在开发模式下，Angular 2 在第一次运行后立即启动变更检测，如果在第一次和第二次运行之间有任何变化，则会记录一个**检查后值已更改**的错误。这有助于定位错误。
- en: 'To enable production mode, place this code above the `ng.platform.browser.bootstrap()`
    method call:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用生产模式，请将以下代码放置在 `ng.platform.browser.bootstrap()` 方法调用之上：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned routing in Angular 2 by building a basic search
    engine template. Along with learning routing in depth, we also learned about the
    Angular 2 HTTP client service as well as how to switch to production mode in Angular
    2.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过构建一个基本的搜索引擎模板学习了 Angular 2 的路由。在学习路由的深度知识的同时，我们还学习了 Angular 2 的 HTTP
    客户端服务以及如何在 Angular 2 中切换到生产模式。
- en: You should now be comfortable with building the frontend of any kind of web
    application using Angular 2.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该已经熟悉了使用 Angular 2 构建任何类型的网络应用程序的前端。
