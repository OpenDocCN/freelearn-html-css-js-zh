- en: Chapter 7. Posting Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。发布内容
- en: '[Chapter 6](part0046.xhtml#aid-1BRPS2 "Chapter 6. Adding Friendship Capabilities"),
    *Adding Friendship Capabilities*, was about adding friendship capabilities. The
    ability to connect with other users in a social network is important. However,
    it is even more important to provide an interface to generate content. In this
    chapter, we will implement the logic behind content creation. We will cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0046.xhtml#aid-1BRPS2 "第6章。添加友谊功能")，“添加友谊功能”，是关于添加友谊功能的。在社交网络中与其他用户建立联系的能力很重要。然而，更重要的是提供一个生成内容的接口。在本章中，我们将实现内容创建背后的逻辑。我们将涵盖以下主题：'
- en: Posting and storing text
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布和存储文本
- en: Showing the user's feed
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用户的动态
- en: Posting files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布文件
- en: Posting and storing text
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布和存储文本
- en: As in the previous chapters, we have a feature that requires changes in both
    the frontend and backend parts of our application. We will need an HTML form that
    accepts the user's text, a new model that handles the communication with the backend,
    and of course, changes in the API. Let's start by updating our home page.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，我们有一个需要在应用程序的前端和后端部分都进行更改的功能。我们需要一个HTML表单，接受用户的文本，一个处理与后端通信的新模型，当然，还有API的更改。让我们从更新我们的主页开始。
- en: Adding a form to post text messages
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个发布文本消息的表单
- en: 'We have a home page that displays a simple title. Let''s use it and add a `<textarea>`
    tag to send content to the API. Later in this chapter, we will use the same page
    to display the user''s feed. Let''s replace the lonely `<h1>` tag with the following
    markup:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个显示简单标题的主页。让我们使用它，并添加一个`<textarea>`标签来将内容发送到API。在本章的后面，我们将使用同一个页面来显示用户的动态。让我们用以下标记替换孤独的`<h1>`标签：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We still have the heading there, but it is displayed only if the `posting` variable
    is equal to `false`. In the next section, where we will update the controller
    of the home page, we will use `posting` to protect the content's form. In some
    cases, we do not want to make `<textarea>` visible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有标题，但只有当`posting`变量等于`false`时才显示。在接下来的部分中，我们将更新主页的控制器，我们将使用`posting`来保护内容的表单。在某些情况下，我们不希望使`<textarea>`可见。
- en: Note that we have two blocks to show messages. The first one will be visible
    if there is an error during the posting and the second one when everything goes
    well. The rest of the form is the needed user interface—the text area, input file
    field, and a button. The button dispatches a post event that we will catch in
    the controller.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有两个块来显示消息。如果在发布过程中出现错误，第一个块将可见，当一切顺利时，第二个块将可见。表单的其余部分是所需的用户界面——文本区域、输入文件字段和一个按钮。按钮会触发一个发布事件，我们将在控制器中捕获到。
- en: Introducing the content's model
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍内容模型
- en: 'We will definitely need a model to manage communication with the API. Let''s
    create a new `models/Content.js` file and place the following code there:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们肯定需要一个模型来管理与API的通信。让我们创建一个新的`models/Content.js`文件，并将以下代码放在那里：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The module extends the same `models/Base.js` class, which is similar to the
    other models in our system. The `lib/Ajax.js` module is needed because we are
    going to make HTTP requests. We should be familiar with the rest of the code.
    A `POST` request to `/api/content` is made by sending text that is passed as an
    argument to the `create` function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块扩展了相同的`models/Base.js`类，它类似于我们系统中的其他模型。需要`lib/Ajax.js`模块，因为我们将进行HTTP请求。我们应该熟悉其余的代码。通过将文本作为参数传递给`create`函数，向`/api/content`发出`POST`请求。
- en: The module will be updated when we reach the file posting. To create records
    that are based only on text, this is enough.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们到达文件发布时，该模块将被更新。要创建仅基于文本的记录，这就足够了。
- en: Updating the controller of the home page
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新主页的控制器
- en: 'Now that we have a proper model and form, we are ready to tweak the controller
    of the home page. As mentioned earlier, the `posting` variable controls the visibility
    of the form. Its value will be set to `true` by default, and if the user is not
    logged in, we will change it to `false`. Every Ractive.js component may have a
    `data` property. It represents the initial state of all the internal variables:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个合适的模型和形式，我们准备调整主页的控制器。如前所述，`posting`变量控制表单的可见性。它的值将默认设置为`true`，如果用户未登录，我们将把它改为`false`。每个Ractive.js组件都可以有一个`data`属性。它表示所有内部变量的初始状态：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s add some logic to the `onrender` handler. This is the entry point
    to our component. We will start by checking whether the current user is logged
    in:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向`onrender`处理程序添加一些逻辑。这是我们组件的入口点。我们将首先检查当前用户是否已登录：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From [Chapter 5](part0040.xhtml#aid-164MG1 "Chapter 5. Managing Users"), *Managing
    Users*, we know that `userModel` is a global object that we can use to check the
    state of the current user. As mentioned earlier, if we have an unauthorized visitor,
    we have to set `posting` to `false`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第5章](part0040.xhtml#aid-164MG1 "第5章。管理用户")，“管理用户”中，我们知道`userModel`是一个全局对象，我们可以用它来检查当前用户的状态。如前所述，如果我们有一个未经授权的访问者，我们必须将`posting`设置为`false`。
- en: 'The next logical step is to process the content from the form and submit a
    request to the API. We will use the newly created `ContentModel` class, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个逻辑步骤是处理表单中的内容并向API提交请求。我们将使用新创建的`ContentModel`类，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once the user presses the button in the form, our component dispatches a `post`
    event. We will then catch the event and call the `create` method of the model.
    It is important to give a proper response to the user, so we clear the text field
    with `self.set('text', '')` and use the local `error` and `success` variables
    to indicate the status of the request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户在表单中按下按钮，我们的组件就会触发一个`post`事件。然后我们将捕获事件并调用模型的`create`方法。给用户一个合适的响应很重要，所以我们用`self.set('text',
    '')`清除文本字段，并使用本地的`error`和`success`变量来指示请求的状态。
- en: Storing content in the database
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数据库中存储内容
- en: 'So far, we have an HTML form that submits an HTTP request to the API. In this
    section, we will update our API so that we can store text content in the database.
    The endpoint of our model is `/api/content`. We will add a new route and protect
    it by allowing access to only authorized users:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个HTML表单，它向API提交HTTP请求。在本节中，我们将更新我们的API，以便我们可以在数据库中存储文本内容。我们模型的端点是`/api/content`。我们将添加一个新的路由，并通过允许只有授权用户访问来保护它：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will create a `user` local variable that contains the visitor's session data.
    Every post that goes to the database should have an owner. So, it is good to have
    a shortcut to the user's profile.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含访客会话数据的`user`本地变量。发送到数据库的每个帖子都应该有一个所有者。因此，有一个快捷方式到用户的个人资料是很好的。
- en: 'The same `/api/content` directory will be used to fetch the posts too. Again,
    we will use the `req.method` property to find out what kind of request is coming.
    If it is `GET`, we need to fetch the posts from the database and send them to
    the browser. If it is `POST`, we have to create a new entry. Here is the code
    that sends the user''s text to the database:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的`/api/content`目录也将用于获取帖子。同样，我们将使用`req.method`属性来查找请求的类型。如果是`GET`，我们需要从数据库中获取帖子并将它们发送到浏览器。如果是`POST`，我们需要创建一个新的条目。以下是将用户的文本发送到数据库的代码：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The data sent by the browser is coming as `POST` variables. Again, we need
    the help of `processPOSTRequest` to access it. If there is no `.text` or it is
    empty, the API returns an error. If everything is okay and the text message is
    available, we proceed with the establishing of the database connection. We also
    fetch the entire profile of the current user. The posts in our social network
    will be saved along with the following additional properties:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器发送的数据作为`POST`变量传递。同样，我们需要`processPOSTRequest`的帮助来访问它。如果没有`.text`或者它是空的，API将返回一个错误。如果一切正常并且文本消息可用，我们将继续建立数据库连接。我们还会获取当前用户的整个个人资料。我们的社交网络中的帖子将与以下附加属性一起保存：
- en: '`userId`: This represents the creator of the record. We will use this property
    during the feed generation.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userId`：这代表了记录的创建者。我们将在生成动态时使用这个属性。'
- en: '`userName`: We do not want to call `getCurrentUser` for every single post that
    we display. So, the name of the owner is directly stored along with the text.
    It is worth mentioning that in some cases, such calls are needed. For example,
    the calls will be needed while changing the name of the user.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userName`：我们不想为我们显示的每一篇帖子都调用`getCurrentUser`。因此，所有者的名称直接与文本一起存储。值得一提的是，在某些情况下，这样的调用是必要的。例如，在更改用户的名称时，将需要这些调用。'
- en: '`date`: We should know the date of the creation of data. It is useful for the
    sorting or filtering of data.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`：我们应该知道数据的创建日期。这对于数据的排序或过滤是有用的。'
- en: In the end, we call `collection.insert`, which effectively stores the entry
    in the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用`collection.insert`，这实际上将条目存储在数据库中。
- en: In the next section, we will see how to retrieve created content and display
    it to the user.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何检索创建的内容并将其显示给用户。
- en: Showing the user's feed
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示用户的动态
- en: Now, every user is able to store messages in our database. Let's continue by
    showing the records in the browser. We will start by adding logic to the API that
    fetches the posts. It will be interesting because you should get the messages
    sent by not only a specific user, but also to his/her friends. We used the `POST`
    method to create content. The following lines will process the `GET` requests.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个用户都能够在我们的数据库中存储消息。让我们继续通过在浏览器中显示记录来展示。我们将首先向获取帖子的API添加逻辑。这将很有趣，因为你不仅应该获取特定用户发送的消息，还应该获取他/她的朋友发送的消息。我们使用`POST`方法来创建内容。接下来的行将处理`GET`请求。
- en: 'First, we will get the IDs of the user''s friends in the following way:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将以以下方式获取用户的朋友的ID：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the previous chapter, we implemented friendship capabilities and kept the
    IDs of the user's friends directly in the profile of the user. The `friends` array
    is exactly what we need because the posts in our social network are linked to
    the users' profiles by their IDs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们实现了友谊功能，并直接在用户的个人资料中保留了用户的朋友的ID。`friends`数组正是我们需要的，因为我们的社交网络中的帖子是通过它们的ID与用户的个人资料相关联的。
- en: 'The next step is to establish a connection to the database and query only those
    records that match the specific IDs, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是建立与数据库的连接，并仅查询与特定ID匹配的记录，如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are going to read the records from the `content` collection. The `find`
    method accepts an object that has the `$query` and `$orderby` properties. In the
    first one, we will put our criteria. In this particular case, we want to get all
    the records'' IDs that are a part of the `friends` array. In order to create such
    a query, we need the `$in` operator. It accepts an array. Along with the posts
    of the user''s friends, we need to show the posts of the user. So, we will create
    an array with an item—the ID of the current user—and concatenate it with `friends`,
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`content`集合中读取记录。`find`方法接受一个具有`$query`和`$orderby`属性的对象。在第一个属性中，我们将放入我们的条件。在这种特殊情况下，我们想要获取所有属于`friends`数组的记录的ID。为了创建这样的查询，我们需要`$in`运算符。它接受一个数组。除了用户的朋友的帖子，我们还需要显示用户的帖子。因此，我们将创建一个数组，其中包含一个项目——当前用户的ID，并将其与`friends`连接起来，如下所示：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After a successful query, the `userId` property is deleted because it is not
    needed. In the `content` collection, we keep the text of the message and the name
    of the owner. In the end, the records are sent attached to the `posts` property.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 成功查询后，`userId`属性将被删除，因为它不再需要。在`content`集合中，我们保留消息的文本和所有者的名称。最后，记录将附加到`posts`属性上发送。
- en: 'With the additions made in the preceding code, our backend returns the posts
    made by the current user and their friends. All we have to do is update the controller
    of our home page and use the API''s method. Right after the code listening for
    the `post` event, we add the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在前面的代码中添加的内容，我们的后端返回了当前用户和他们的朋友发布的帖子。我们所要做的就是更新我们主页的控制器并使用API的方法。在监听`post`事件的代码之后，我们添加以下代码：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The calling of the `fetch` method triggers the `GET` request to the API at
    the model''s endpoint—`/api/content`. The process is wrapped in a function because
    the same action will happen when a new post is created. As we already know, if
    `model.create` succeeds, a callback is fired. We will add `getPosts()` there so
    that the user sees his/her newest post in the feed:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`fetch`方法触发对模型端点`/api/content`的API的`GET`请求。这个过程被包装在一个函数中，因为当创建新帖子时会发生相同的操作。正如我们已经知道的，如果`model.create`成功，就会触发回调。我们将在那里添加`getPosts()`，这样用户就可以在动态中看到他/她的最新帖子：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What the `getPosts` function produces as a result are lists of objects stored
    in a local variable called `posts`. The same variable is accessible in the Ractive.js
    template. We need to loop through the items in the array and display the information
    on the screen, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPosts`函数产生的结果是存储在名为`posts`的本地变量中的对象列表。同样的变量可以在Ractive.js模板中访问。我们需要遍历数组中的项目，并在屏幕上显示信息，如下所示：'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Just after the form, we use the `each` operator to show the author and the text
    of the post.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单之后，我们使用`each`操作符来显示帖子的作者和文本。
- en: At this point, the users in our network will be able to create and browse messages
    in the form of text blocks. In the next section, we will extend the functionalities
    that we have written so far and make the uploading of images along with the text
    possible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们网络中的用户将能够创建和浏览以文本块形式的消息。在下一节中，我们将扩展到目前为止编写的功能，并使上传图像与文本一起成为可能。
- en: Posting files
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布文件
- en: We are building a single-page application. One of the characteristics of such
    applications is that all the operations happen without a page reload. Uploading
    files without changing the page was always tricky. In the past, we used solutions
    that involved hidden iframes or small Flash applications. Thankfully, when HTML5
    arrived, it introduced the **FormData** interface.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建一个单页面应用程序。这类应用程序的特点之一是所有操作都在不重新加载页面的情况下进行。上传文件而不改变页面一直是棘手的。过去，我们使用涉及隐藏iframe或小型Flash应用程序的解决方案。幸运的是，当HTML5出现时，它引入了**FormData**接口。
- en: 'The popular Ajax is possible because of the `XMLHttpRequest` object. Back in
    2005, Jesse James Garrett coined the term "Ajax", and we started using it to make
    HTTP requests within JavaScript. It became easy to perform the `GET` or `POST`
    requests in the following way:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的Ajax是由`XMLHttpRequest`对象实现的。2005年，Jesse James Garrett创造了“Ajax”这个术语，我们开始使用它在JavaScript中进行HTTP请求。以以下方式执行`GET`或`POST`请求变得很容易：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code generates a proper `POST` requests and even sets the right
    headers. The problem is that the parameters are represented as a string. The forming
    of such strings requires additional effort. It is also difficult to send files.
    It can be quite challenging.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码生成了一个正确的`POST`请求，甚至设置了正确的标头。问题在于参数被表示为字符串。形成这样的字符串需要额外的工作。发送文件也很困难。这可能是相当具有挑战性的。
- en: 'The FormData interface solves this problem. We create an object that is a set
    of key/value pairs representing form fields and their values. Then, we pass this
    object to the `send` method of the `XMLHTTPRequest` class:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: FormData接口解决了这个问题。我们创建一个对象，它是表示表单字段及其值的键/值对集合。然后，我们将这个对象传递给`XMLHTTPRequest`类的`send`方法：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All we have to do is use the `append` method and specify the `input` DOM element
    with the `file` type. The rest is done by the browser.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所要做的就是使用`append`方法并指定`file`类型的`input` DOM元素。其余工作由浏览器完成。
- en: 'To provide the ability to upload files, we need to add the UI element for file
    selection. Here is how the form in `home.html` template looks:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供上传文件的功能，我们需要添加文件选择的UI元素。以下是`home.html`模板中表单的样子：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The same code but with a new `input` element with type equal to `file`. So
    far, the implementation in our controller that sends the `POST` requests doesn''t
    use the FormData interface. Let''s change this and update the `controllers/Home.js`
    file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的代码，但是有一个新的`input`元素，类型等于`file`。到目前为止，我们的控制器中发送`POST`请求的实现并没有使用`FormData`接口。让我们改变这一点，并更新`controllers/Home.js`文件：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The code is changed. So, the code creates a new `FormData` object and uses the
    `append` method for collecting the information needed for the new post. We make
    sure that the files selected by the user are appended. By default, the HTML input
    provides a selection of only one file. However, we can add the `multiple` attribute
    and the browser will allow us to choose more than one file. It is worth mentioning
    that we filter the selected files and only use the images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已经改变。因此，代码创建了一个新的`FormData`对象，并使用`append`方法收集新帖子所需的信息。我们确保用户选择的文件被附加。默认情况下，HTML输入只提供选择一个文件。但是，我们可以添加`multiple`属性，浏览器将允许我们选择多个文件。值得一提的是，我们过滤所选文件，并且只使用图像。
- en: 'After the latest changes, the `create` method of our model accepts the `FormData`
    object and not a plain JavaScript object. So, we have to update the model, too:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 经过最新的更改，我们模型的`create`方法接受`FormData`对象而不是普通的JavaScript对象。因此，我们也必须更新模型：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `data` property is replaced with the `formData` one. Now we know that the
    frontend sends the selected files to the API. However, we do not have the code
    that handles the `multipart/form-data` type of the `POST` data. The processing
    of files sent through the `POST` request is not that simple, and `processPOSTRequest`
    will not do the job in this case.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`属性被`formData`属性替换。现在我们知道前端将选定的文件发送到API。但是，我们没有处理`multipart/form-data`类型的`POST`数据的代码。通过`POST`请求发送的文件的处理并不简单，`processPOSTRequest`在这种情况下无法完成任务。'
- en: Node.js has a big community, and there are thousands of modules available. The
    `formidable` module is what we are going to use. It has a fairly simple API and
    it handles requests containing files. What happens during the file upload is that
    `formidable` saves the file in a specific location on the server's hard disk.
    Then, we receive the path to the resource. Finally, we have to decide what to
    do with it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js拥有一个庞大的社区，有成千上万的模块可用。`formidable`模块是我们要使用的。它有一个相当简单的API，并且处理包含文件的请求。文件上传过程中，`formidable`会将文件保存在服务器硬盘的特定位置。然后，我们会收到资源的路径。最后，我们必须决定如何处理它。
- en: 'In the `backend/API.js` file, the application flow is split into the `GET`
    and `POST` requests. We are going to update a major part of the `POST` case. The
    following lines contain the `formidable` initialization:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`backend/API.js`文件中，应用流程分为`GET`和`POST`请求。我们将更新`POST`情况的一个重要部分。以下行包含了`formidable`的初始化：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we mentioned before, the module saves the uploaded files in a temporary folder
    on the hard drive. The `uploadDir` variable contains a more appropriate place
    for the users' images. The callback passed to the `parse` function of `formidable`
    receives the normal text fields in the `data` argument and uploads the images
    in `files`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，该模块将上传的文件保存在硬盘上的临时文件夹中。`uploadDir`变量包含了用户图片的更合适的位置。传递给`formidable`的`parse`函数的回调在`data`参数中接收普通文本字段，并在`files`中上传图像。
- en: 'In order to avoid the long chain of nested JavaScript callbacks, we will extract
    some logic into the function definitions. For example, the moving of files from
    the `temporary` to the `static` folder can be performed in the following way:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免嵌套JavaScript回调的长链条，我们将一些逻辑提取到函数定义中。例如，将文件从`temporary`移动到`static`文件夹可以按以下方式执行：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We don't want to mix the files of different users. So, we will use the ID of
    the user and create his/her own folder. There are a few other issues that we may
    have to take care of. For example, we can create subfolders for every file so
    that we can prevent the overwriting of the resources that are already uploaded.
    However, to keep the code as simple as possible, we will stop here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想混合不同用户的文件。因此，我们将使用用户的ID并创建他/她自己的文件夹。还有一些其他问题可能需要我们处理。例如，我们可以为每个文件创建子文件夹，以防止已上传资源的覆盖。然而，为了尽可能保持代码简单，我们将在这里停止。
- en: 'Here is the complete code that saves the post to the database:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将帖子保存到数据库的完整代码：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We still need a connection to the database and the fetching of the current user's
    profile. The difference here is that we attach a new `file` property to the object
    stored in MongoDB.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要与数据库建立连接并获取当前用户的个人资料。这里的不同之处在于，我们向存储在MongoDB中的对象附加了一个新的`file`属性。
- en: 'In the end, we have to update the template of the home page so that it shows
    the uploaded file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须更新主页的模板，以便显示上传的文件：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, the `each` loop checks whether there is a file that comes with the text
    of the post. If yes, it displays an `img` tag that shows the image. With this
    last addition, the users of our social network will be able to create content
    that consists of text and pictures.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`each`循环检查是否有文件与帖子文本一起传输。如果有，它会显示一个显示图像的`img`标签。通过这最后的添加，我们社交网络的用户将能够创建由文本和图片组成的内容。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we did something that is very important for our application.
    We implemented content creation and delivery by extending our backend API. A couple
    of changes were made to the frontend too.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为我们的应用程序做了一些非常重要的事情。通过扩展我们的后端API，我们实现了内容的创建和传递。前端也进行了一些更改。
- en: In the next chapter, we will continue adding new features. We will make the
    creating of branded pages and events possible.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续添加新功能。我们将使创建品牌页面和活动成为可能。
