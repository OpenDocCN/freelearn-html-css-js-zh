- en: Implementing the Mobile-First Paradigm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施移动优先范式
- en: 'Now that our first Express application is usable, we act on the mantra of this
    age of software development: mobile-first. Mobile devices, whether they be smartphones,
    tablet computers, automobile dashboards, refrigerator doors, or bathroom mirrors,
    are taking over the world.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的第一个Express应用程序已经可以使用，我们将遵循这个软件时代的精神：移动优先。无论是智能手机、平板电脑、汽车仪表盘、冰箱门还是浴室镜子，移动设备正在接管世界。
- en: Another issue is mobile-first indexing, meaning that search engines are starting
    to preference indexing the mobile version of a website. Search engines so far
    concentrated on indexing the desktop version of websites, but the growing popularity
    of mobile devices means search engine results are skewed away from what folks
    are using. Google says it is not fair to mobile users if the search result, which was
    derived from the desktop version, does not match the mobile version of a website.
    For Google's take, including technical tips on the markup to use, see [http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html](http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是以移动优先的索引，这意味着搜索引擎开始优先索引网站的移动版本。到目前为止，搜索引擎主要集中在索引网站的桌面版本，但随着移动设备的日益普及，搜索引擎结果偏离了人们使用的内容。谷歌表示，如果搜索结果（由桌面版本生成）与网站的移动版本不匹配，这对移动用户来说是不公平的。有关谷歌的观点，包括使用标记的技术提示，请参阅[http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html](http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html)。
- en: The primary considerations in designing for mobiles are the small screen sizes,
    the touch-oriented interaction, that there's no mouse, and the somewhat different
    user interface expectations. With the *Notes* application, our user interface
    needs are modest, and the lack of a mouse doesn't make any difference to us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 设计移动设备时的主要考虑因素是屏幕尺寸小、以触摸为导向的交互、没有鼠标以及用户界面期望的某些不同。对于*笔记*应用程序，我们的用户界面需求简单，没有鼠标对我们来说没有影响。
- en: 'In this chapter, we won''t do much Node.js development. Instead, we''ll:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会进行太多的Node.js开发。相反，我们将：
- en: Modify the templates for better mobile presentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改模板以更好地展示移动界面
- en: Edit CSS and SASS files to customize the style
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑CSS和SASS文件以自定义样式
- en: Learn about Bootstrap 4, a popular framework for responsive UI design
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Bootstrap 4，这是一个流行的响应式UI设计框架
- en: By doing so, we'll dip our toes in the water of what it means to be a full stack
    web engineer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们将涉足全栈网络工程师的含义。
- en: Problem – the Notes app isn't mobile friendly
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题 – 笔记应用程序不友好
- en: 'Let''s start by quantifying the problem. We need to explore how well (or not)
    the application behaves on a mobile device. This is simple to do:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从量化问题开始。我们需要探索应用程序在移动设备上的表现如何（或不好）。这很简单：
- en: Start the *Notes* application. Determine the IP address of the host system.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动*笔记*应用程序。确定主机的IP地址。
- en: Using your mobile device, connect to the service using the IP address, and browse
    around the *Notes* application, putting it through its paces, noting any difficulties.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的移动设备，通过IP地址连接到服务，浏览*笔记*应用程序，对其进行测试，注意任何困难。
- en: Another way to approach this is to use your desktop browser, resizing it to
    be very narrow. The Chrome DevTools also includes a mobile device emulator. Either
    way, you can mimic the small screen size of a smartphone on your desktop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用您的桌面浏览器，将其调整到非常窄的尺寸。Chrome DevTools还包含移动设备模拟器。无论哪种方式，您都可以在您的桌面上模拟智能手机的小屏幕尺寸。
- en: 'To see a real user interface problem on a mobile screen, edit `views/noteedit.ejs` and
    change this line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在移动屏幕上看到真正的用户界面问题，请编辑`views/noteedit.ejs`并更改此行：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What''s changed is the `cols=80` parameter. We want this `textarea` element
    to be overly large so that you can experience how a non-responsive web app appears
    on a mobile device. View the application on a mobile device and you''ll see something
    like one of the screens in this screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 发生变化的是`cols=80`参数。我们希望这个`textarea`元素非常大，这样您就可以体验非响应式Web应用程序在移动设备上的外观。在移动设备上查看应用程序，您会看到类似于此截图中的一个屏幕：
- en: '![](img/6e17c4d5-7d65-4711-bc7d-1bb1b6cf1a4e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e17c4d5-7d65-4711-bc7d-1bb1b6cf1a4e.png)'
- en: Viewing a note works well on an iPhone 6, but the screen for editing/adding
    a note is not good. The text entry area is so wide that it runs off the side of
    the screen. Even though interaction with `FORM` elements work well, it's clumsy.
    In general, browsing the *Notes* application gives an acceptable mobile user experience
    that doesn't suck and won't make our users give rave reviews.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone 6上查看笔记效果良好，但编辑/添加笔记的屏幕并不理想。文本输入区域太宽，以至于超出屏幕边缘。尽管与`FORM`元素的交互工作良好，但操作笨拙。总的来说，浏览*笔记*应用提供了可接受的移动用户体验，不会令人失望，也不会让我们的用户给出好评。
- en: Mobile-first paradigm
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动优先范式
- en: Mobile devices have a smaller screen, are generally touch oriented, and have
    different user experience expectations than a desktop computer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备屏幕较小，通常是触摸导向的，并且与桌面电脑相比，对用户体验有不同期望。
- en: To accommodate smaller screens, we use **responsive web design** techniques.
    This means designing the application to accommodate the screen size and ensuring
    websites provide optimal viewing and interaction across a wide range of devices.
    Techniques include changing font sizes, rearranging elements on the screen, using
    collapsible elements that open when touched, and resizing images or videos to
    fit available space. This is called **responsive** because the application responds to
    device characteristics by making these changes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应较小的屏幕，我们使用**响应式网页设计**技术。这意味着设计应用程序以适应屏幕尺寸，并确保网站能够在广泛的设备上提供最佳观看和交互体验。技术包括更改字体大小、重新排列屏幕上的元素、使用触摸时展开的折叠元素，以及调整图片或视频的大小以适应可用空间。这被称为**响应式**，因为应用程序通过这些变化对设备特性做出响应。
- en: By mobile-first, we mean that you design the application first to work well
    on a mobile device and then move on to devices with larger screens. It's about
    prioritizing mobile devices first.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**移动优先**，我们是指首先设计应用程序以在移动设备上良好运行，然后转向更大屏幕的设备。这是关于优先考虑移动设备。
- en: The primary technique is using media queries in stylesheets to detect device
    characteristics. Each media query section targets a range of devices, using CSS
    declaration to appropriately restyle content.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 主要技术是使用样式表中的媒体查询来检测设备特性。每个媒体查询部分针对一系列设备，使用CSS声明适当地重新设计内容。
- en: Let's consult a concrete example. The **Twenty Twelve** theme for Wordpress
    has a straightforward responsive design implementation. It's not built with any
    framework, so you can see clearly how the mechanism works, and the stylesheet
    is small enough to be easily digestible. Refer to its source code in the Wordpress
    repository at [https://themes.svn.wordpress.org/twentytwelve/1.9/style.css](https://themes.svn.wordpress.org/twentytwelve/1.9/style.css).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个具体的例子。Wordpress的**Twenty Twelve**主题具有直接的响应式设计实现。它没有使用任何框架，因此你可以清楚地看到机制是如何工作的，样式表足够小，易于理解。请参考Wordpress仓库中的源代码：[https://themes.svn.wordpress.org/twentytwelve/1.9/style.css](https://themes.svn.wordpress.org/twentytwelve/1.9/style.css)。
- en: The stylesheet starts with a number of **resets**, where the stylesheet overrides
    some typical browser style settings with clear defaults. Then, the bulk of the
    stylesheet defines styling for mobile devices. Toward the bottom of the stylesheet
    is a section labeled Media queries where, for certain sized screens, the styles
    defined for mobile devices are overridden to work on devices with larger screens.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表以一系列**重置**开始，其中样式表使用明确的默认值覆盖了一些典型的浏览器样式设置。然后，样式表的大部分内容定义了移动设备的样式。在样式表的底部是一个名为媒体查询的部分，其中对于某些尺寸的屏幕，为移动设备定义的样式被覆盖，以便在更大屏幕的设备上工作。
- en: 'It does this with the following two media queries:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过以下两个媒体查询来实现：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first segment of the stylesheet configures the page layout for all devices.
    Next, for any browser viewport at least `600px` wide, reconfigure the page to
    display on the larger screen. Then, for any browser viewport at least `960px`
    wide, reconfigure it again. The stylesheet has a final media query to cover print
    devices.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表的第一部分配置了所有设备的页面布局。接下来，对于任何至少`600px`宽的浏览器视口，重新配置页面以在更大屏幕上显示。然后，对于任何至少`960px`宽的浏览器视口，再次重新配置。样式表有一个最后的媒体查询来覆盖打印设备。
- en: These widths are what's called a **breakpoint**. Those threshold viewport widths
    are where the design changes itself around. You can see breakpoints in action
    by going to any responsive website, then resizing the browser window. Watch how
    the design jumps at certain sizes. Those are the breakpoints chosen by the author
    of that website.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些宽度被称为**断点**。那些阈值视口宽度是设计自我改变的地方。你可以通过访问任何响应式网站，然后调整浏览器窗口大小来查看断点的实际效果。观察设计在特定尺寸时的跳跃。那些是那个网站作者选择的断点。
- en: There's a wide range of differing opinions about the best strategy to choose
    your breakpoints. Do you target specific devices or do you target general characteristics?
    The Twenty Twelve theme did fairly well on mobile devices using only two viewport-size media
    queries. The CSS-Tricks blog has posted an extensive list of specific media queries
    for every known device, which is available at [https://css-tricks.com/snippets/css/media-queries-for-standard-devices/](https://css-tricks.com/snippets/css/media-queries-for-standard-devices/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于选择断点的最佳策略存在广泛的意见分歧。你是针对特定设备还是针对一般特征？Twenty Twelve主题在移动设备上表现相当不错，仅使用两个viewport-size媒体查询。CSS-Tricks博客发布了一个针对每个已知设备的详细媒体查询列表，可在[https://css-tricks.com/snippets/css/media-queries-for-standard-devices/](https://css-tricks.com/snippets/css/media-queries-for-standard-devices/)找到。
- en: 'We should at least target these devices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至少应该针对以下设备：
- en: '**Small**: This includes iPhone 5 SE.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小型**：这包括iPhone 5 SE。'
- en: '**Medium**: This can refer to tablet computers or the larger smartphones.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中**：这可能指的是平板电脑或更大的智能手机。'
- en: '**Large**: This includes larger tablet computers or the smaller desktop computers.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大**：这包括更大的平板电脑或较小的台式电脑。'
- en: '**Extra-large**: This refers to larger desktop computers and other large screens.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超大**：这指的是更大的台式电脑和其他大屏幕。'
- en: '**Landscape/portrait**: You may want to create a distinction between landscape
    mode and portrait mode. Switching between the two of course changes viewport width,
    possibly pushing it past a breakpoint. However, your application may need to behave
    differently in the two modes.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横屏/竖屏**：你可能想在横屏模式和竖屏模式之间创建一个区别。在两种模式之间切换当然会改变视口宽度，可能超过一个断点。然而，你的应用可能需要在两种模式下有不同的行为。'
- en: Enough with the theory; let's get back to our code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 理论就到这里吧；让我们回到我们的代码上来。
- en: Using Twitter Bootstrap on the Notes application
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在笔记应用中使用 Twitter Bootstrap
- en: Bootstrap is a mobile-first framework consisting of HTML5, CSS3, and JavaScript
    code providing a comprehensive set of world class, responsive web design components.
    It was developed by engineers at Twitter and then released to the world in August
    2011.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是一个以移动设备为先的框架，由HTML5、CSS3和JavaScript代码组成，提供了一套世界级的、响应式网络设计组件。它是由Twitter的工程师开发的，并于2011年8月发布到全球。
- en: The framework includes code to retrofit modern features onto older browsers,
    a responsive 12-column grid system, and a long list of components (some using
    JavaScript) for building web applications and websites. It's meant to provide
    a strong foundation on which to build your application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架包括将现代功能应用于旧浏览器的代码，一个响应式的12列网格系统，以及一个长长的组件列表（其中一些使用JavaScript），用于构建网络应用和网站。它的目的是提供一个强大的基础，以便构建你的应用。
- en: Refer to [http://getbootstrap.com](http://getbootstrap.com) for more details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅[http://getbootstrap.com](http://getbootstrap.com)。
- en: Setting it up
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置它
- en: The first step is to duplicate the code you created in the previous chapter.
    If, for example, you created a directory named `chap05/notes`, then create one
    named `chap06/notes` from the content of `chap05/notes`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是复制你在上一章中创建的代码。例如，如果你创建了一个名为`chap05/notes`的目录，那么从`chap05/notes`的内容中创建一个名为`chap06/notes`的目录。
- en: 'Now, we need to go about adding Bootstrap''s code in the *Notes* application.
    The Bootstrap website suggests loading the required CSS and JavaScript files out
    of the Bootstrap (and jQuery) public CDN. While that''s easy to do, we won''t
    do this for two reasons:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在*笔记*应用中添加Bootstrap的代码。Bootstrap网站建议从Bootstrap（和jQuery）公共CDN加载所需的CSS和JavaScript文件。虽然这样做很简单，但我们不会这样做，原因有两个：
- en: It violates the principle of keeping all dependencies local to the application
    and not relying on global dependencies
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它违反了将所有依赖项本地化到应用中，而不是依赖全局依赖项的原则
- en: It prevents us from generating a custom theme
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它阻止我们生成自定义主题
- en: Instead, we'll install a local copy of Bootstrap. There are several ways to
    install Bootstrap. For example, the Bootstrap website offers a downloadable TAR/GZIP
    archive (tarball). The better approach is an automated dependency management tool.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将安装一个本地的 Bootstrap 复制。安装 Bootstrap 有几种方法。例如，Bootstrap 网站提供了一个可下载的 TAR/GZIP
    存档（tarball）。更好的方法是使用自动依赖管理工具。
- en: The most straightforward choice is using Bootstrap ([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap)),
    popper.js ([https://www.npmjs.com/package/popper.js](https://www.npmjs.com/package/popper.js)),
    and jQuery ([https://www.npmjs.com/package/jquery](https://www.npmjs.com/package/jquery))
    packages in the npm repository. These packages provide no Node.js modules, and
    instead are frontend code distributed through npm.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最直接的选择是使用 npm 仓库中的 Bootstrap ([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap))、popper.js
    ([https://www.npmjs.com/package/popper.js](https://www.npmjs.com/package/popper.js))
    和 jQuery ([https://www.npmjs.com/package/jquery](https://www.npmjs.com/package/jquery))
    包。这些包不提供 Node.js 模块，而是通过 npm 分发的前端代码。
- en: 'We install the packages using the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下命令安装包：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we see here, when we install Bootstrap, it helpfully tells us the corresponding
    versions of jQuery and `popper.js` to use. Therefore, we dutifully install those
    versions. What''s most important is to see what got downloaded:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，当我们安装 Bootstrap 时，它会友好地告诉我们应使用 jQuery 和`popper.js`的相应版本。因此，我们尽职尽责地安装了这些版本。最重要的是查看下载了什么：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Within each of these directories are the CSS and JavaScript files that are meant
    to be used in the browser. More importantly, these files are located in a given
    directory whose pathname is known—specifically, the directories we just inspected.
    Let's see how to configure our Express app to use those three packages on the
    browser side.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些目录中包含了用于浏览器的 CSS 和 JavaScript 文件。更重要的是，这些文件位于一个已知路径名的目录中——具体来说，就是我们刚才检查的目录。让我们看看如何配置我们的
    Express 应用以在浏览器端使用这三个包。
- en: Adding Bootstrap to application templates
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Bootstrap 添加到应用模板中
- en: On the Bootstrap website, they give a recommended HTML structure. We'll be interpolating
    from their recommendation to use Bootstrap code provided through the CDN to instead
    use the local copies of Bootstrap, jQuery, and Popper that we just installed.
    Refer to the Getting started page at [http://getbootstrap.com/docs/4.0/getting-started/introduction/](http://getbootstrap.com/docs/4.0/getting-started/introduction/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 网站上，他们提供了一个推荐的 HTML 结构。我们将从他们的建议中提取，使用通过 CDN 提供的 Bootstrap 代码，改为使用我们刚刚安装的本地
    Bootstrap、jQuery 和 Popper。请参阅[http://getbootstrap.com/docs/4.0/getting-started/introduction/](http://getbootstrap.com/docs/4.0/getting-started/introduction/)的入门页面。
- en: 'What we''ll do is modify `views/layout.hbs` to match their recommended template:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`views/layout.hbs`以匹配他们的推荐模板：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is largely the template shown on the Bootstrap site, incorporating the
    previous content of `views/layout.hbs`. Our own stylesheet is loaded following
    the Bootstrap stylesheet, giving us the opportunity to override anything in Bootstrap
    we want to change. What's different is that instead of loading Bootstrap, `popper.js`,
    and jQuery packages from their respective CDNs, we use the path `/assets/vendor/product-name`
    instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是 Bootstrap 网站上显示的模板，结合了`views/layout.hbs`中的先前内容。我们的样式表在 Bootstrap 样式表之后加载，这给了我们覆盖任何想要更改的
    Bootstrap 的机会。不同之处在于，我们不是从各自的 CDN 加载 Bootstrap、`popper.js`和 jQuery 包，而是使用`/assets/vendor/product-name`路径。
- en: This is the same as recommended on the Bootstrap website except the URLs point
    to our own site rather than relying on the public CDN.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 Bootstrap 网站上推荐的相同，只是 URL 指向我们的网站而不是依赖于公共 CDN。
- en: 'This `/assets/vendor` URL is not currently recognized by the `Notes` application.
    To add this support, edit `app.js` to add these lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`/assets/vendor` URL 目前不被`Notes`应用程序识别。为了添加此支持，编辑`app.js`以添加以下行：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Within the `public` directory, we have a little house-keeping to do. When `express-generator`
    set up the initial project, it generated `public/images`, `public/javascripts`,
    and `public/stylesheets` directories. We want each to be within the `/assets`
    directory, so do this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`public`目录下，我们需要做一些基本的整理工作。当`express-generator`设置初始项目时，它生成了`public/images`、`public/javascripts`和`public/stylesheets`目录。我们希望每个目录都在`/assets`目录下，所以这样做：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We now have our asset files, including Bootstrap, `popper.js`, and jQuery,
    all available to the `Notes` application under the `/assets` directory. The page
    layout refers to these assets and should give us the default Bootstrap theme:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了我们的资产文件，包括Bootstrap、`popper.js`和jQuery，所有这些都在`/assets`目录下的`Notes`应用程序中可用。页面布局引用了这些资产，并应提供默认的Bootstrap主题：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The on-screen differences are minor, but this is the proof necessary that the
    CSS and JavaScript files for Bootstrap are being loaded. We have accomplished
    the first major goal—using a modern, mobile-friendly framework to implement a
    mobile-first design.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上的差异很小，但这证明了Bootstrap的CSS和JavaScript文件正在被加载。我们已经实现了第一个主要目标——使用现代、移动友好的框架来实现移动优先的设计。
- en: Alternative layout frameworks
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代布局框架
- en: 'Bootstrap isn''t the only JavaScript/CSS framework providing a responsive layout
    and useful components. We''re using Bootstrap in this project because of its popularity.
    These frameworks are worthy of a look:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap并不是唯一提供响应式布局和有用组件的JavaScript/CSS框架。我们在这个项目中使用Bootstrap是因为它的流行。这些框架值得一看：
- en: 'Pure.css ( [https://purecss.io/](https://purecss.io/)): A responsive CSS framework
    with an emphasis on a small code footprint.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Pure.css ([https://purecss.io/](https://purecss.io/)): 一个注重小代码体积的响应式CSS框架。'
- en: 'Picnic CSS ([https://picnicss.com/](https://picnicss.com/)): A responsive CSS
    framework emphasizing small size and beauty.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Picnic CSS ([https://picnicss.com/](https://picnicss.com/)): 一个强调小尺寸和美观的响应式CSS框架。'
- en: 'Shoelace ([https://shoelace.style/](https://shoelace.style/)): A CSS framework
    emphasizing using future CSS, meaning it uses CSS constructs at the leading edge
    of CSS standardization. Since most browsers don''t support those features, cssnext
    ([http://cssnext.io/](http://cssnext.io/)) is used to retrofit that support. Shoelace
    uses a grid layout system based on Bootstrap''s grid.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Shoelace ([https://shoelace.style/](https://shoelace.style/)): 一个强调使用未来CSS的CSS框架，这意味着它使用CSS标准化的前沿结构。由于大多数浏览器不支持这些功能，因此使用了cssnext
    ([http://cssnext.io/](http://cssnext.io/))来提供这些功能的支持。Shoelace使用基于Bootstrap网格的网格布局系统。'
- en: 'PaperCSS ([https://www.getpapercss.com/](https://www.getpapercss.com/)): An
    informal CSS framework which looks like it was hand drawn.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PaperCSS ([https://www.getpapercss.com/](https://www.getpapercss.com/)): 一个看起来像是手工绘制的非正式CSS框架。'
- en: 'Foundation ([https://foundation.zurb.com/](https://foundation.zurb.com/)):
    Self-described as the most advanced responsive frontend framework in the world.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Foundation ([https://foundation.zurb.com/](https://foundation.zurb.com/)):
    自称为世界上最先进的响应式前端框架。'
- en: 'Base ([http://getbase.org/](http://getbase.org/)): A lightweight modern CSS
    framework.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Base ([http://getbase.org/](http://getbase.org/)): 一个轻量级的现代CSS框架。'
- en: HTML5 Boilerplate ([https://html5boilerplate.com/](https://html5boilerplate.com/))
    is an extremely useful basis from which to code the HTML and other assets. It
    contains the current best practices for the HTML code in web pages, as well as
    tools to normalize CSS support and configuration files for several web servers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 Boilerplate ([https://html5boilerplate.com/](https://html5boilerplate.com/))
    是一个非常有用的编码HTML和其他资产的基础。它包含了网页中HTML代码的最佳实践，以及用于标准化CSS支持和配置文件的工具。
- en: Flexbox and CSS Grids
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flexbox和CSS Grids
- en: Other new technologies impacting web application development are two new CSS
    layout methodologies. The CSS3 committee has been working on several fronts, including
    page layout.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 影响Web应用程序开发的其他新技术是两种新的CSS布局方法。CSS3委员会已经在多个方面开展工作，包括页面布局。
- en: In the distant past, we used nested HTML tables for page layout. That is a bad
    memory that we don't have to revisit. More recently, we've been using a box model
    using DIVs, and even at times using absolute or relative placement techniques.
    All these techniques have been suboptimal in several ways, some more than others.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在遥远的过去，我们使用嵌套HTML表格进行页面布局。这是一个我们不希望再次回顾的糟糕记忆。最近，我们一直在使用基于DIV的盒模型，有时甚至使用绝对或相对定位技术。所有这些技术都在多个方面表现不佳，有些甚至更差。
- en: One popular layout technique is to divide the horizontal space into columns
    and assign a certain number of columns to each thing on the page. With some frameworks,
    we can even have nested DIVs, each with their own set of columns. Bootstrap 3,
    and other modern frameworks, used that layout technique.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一种流行的布局技术是将水平空间划分为列，并将一定数量的列分配给页面上的每个元素。在一些框架中，我们甚至可以有嵌套的DIV，每个DIV都有自己的列集。Bootstrap
    3和其他现代框架使用了这种布局技术。
- en: The two new CSS layout methodologies, Flexbox ([https://en.wikipedia.org/wiki/CSS_flex-box_layout](https://en.wikipedia.org/wiki/CSS_flex-box_layout))
    and CSS Grids ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)),
    are a significant improvement over all previous methodologies. We are mentioning
    these technologies because they're both worthy of attention. Both are somewhat
    early in their adoption curve—they've been standardized by committees and adopted
    in the latest browsers, but of course there are a lot of old browsers in the field.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 两种新的CSS布局方法，Flexbox ([https://en.wikipedia.org/wiki/CSS_flex-box_layout](https://en.wikipedia.org/wiki/CSS_flex-box_layout))
    和 CSS Grids ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout))，相对于所有以前的方法都是显著的改进。我们提到这些技术，因为它们都值得注意。两者都处于采纳曲线的早期——它们已经被委员会标准化，并在最新的浏览器中得到采用，但当然，现场还有很多旧浏览器。
- en: With Bootstrap 4, the Bootstrap team chose to go with Flexbox. Therefore, under
    the hood are Flexbox CSS constructs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap 4中，Bootstrap团队选择使用Flexbox。因此，底层是Flexbox CSS结构。
- en: Mobile-first design for the Notes application
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Notes 应用程序的移动优先设计
- en: We've learned about the basics of responsive design and Bootstrap, and we hooked
    the Bootstrap framework into our application. Now we're ready to launch a redesign
    of the application so that it works well on mobile devices.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了响应式设计和Bootstrap的基础知识，并将Bootstrap框架集成到我们的应用程序中。现在我们准备重新设计应用程序，使其在移动设备上运行良好。
- en: Laying the Bootstrap grid foundation
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立Bootstrap网格基础
- en: Bootstrap uses a 12-column grid system to control layout, giving applications
    a responsive mobile-first foundation on which to build. It automatically scales
    components as the viewport changes size or shape. The method relies on `<div>`
    elements with classes to describe the role each `<div>` plays in the layout.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap使用12列网格系统来控制布局，为应用程序提供一个响应式移动优先的基础，以便构建。它自动根据视口的大小或形状变化调整组件。该方法依赖于具有类别的
    `<div>` 元素来描述每个 `<div>` 在布局中的作用。
- en: 'The basic layout pattern is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 基本布局模式如下：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The outermost layer is the `.container` or `.container-fluid` element. Containers
    provide a means to center or horizontally pad the content. Containers marked as
    `.container-fluid` act as if they have `width: 100%`, meaning they expand to fill
    the horizontal space.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '最外层是 `.container` 或 `.container-fluid` 元素。容器提供了一种使内容居中或水平填充的方法。标记为 `.container-fluid`
    的容器表现得像有 `width: 100%`，这意味着它们会扩展以填充水平空间。'
- en: A `.row` is what it sounds like, a `"row"`. Technically, a row is a wrapper
    for columns. Containers are wrappers for rows, and rows are wrappers for columns,
    and columns contain the stuff displayed to our users. Got that?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`.row` 就像它的名字一样，是一个 `"row"`。技术上，行是列的包装器。容器是行的包装器，行是列的包装器，列包含显示给我们的用户的内容。明白了吗？'
- en: Columns are marked with variations of the `.col` class. With the basic column
    class, `.col`, the columns divide equally into the available space. You can specify
    a numerical column count to assign different widths to each column. Bootstrap
    supports up to 12 numbered columns, hence each row in the example adds up to 12
    columns.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 列通过 `.col` 类的变体进行标记。使用基本的列类 `.col`，列将等分可用空间。您可以指定一个数值列数来为每个列分配不同的宽度。Bootstrap支持多达12个编号列，因此示例中的每一行都包含12列。
- en: 'You can also specify a breakpoint to which the column applies:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定一个列应用的断点：
- en: Using `col-xs` targets extra-small devices (smartphones, `<576px`)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `col-xs` 目标超小设备（智能手机，`<576px`）
- en: Using `col-sm` targets small devices (`>= 576px`)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `col-sm` 目标小设备 (`>= 576px`)
- en: Using `col-md` targets medium devices (`>= 768px`)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `col-md` 目标中等设备 (`>= 768px`)
- en: Using `col-lg` targets large devices (`>= 992px`)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `col-lg` 目标大设备 (`>= 992px`)
- en: Using `col-xl` targets extra-large devices (`>= 1200px`)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `col-xl` 目标超大设备 (`>= 1200px`)
- en: Specifying a breakpoint, for example `col-sm`, means that it applies to devices
    matching that breakpoint, or larger. Hence, in the example shown earlier, the
    column definitions applied to `col-sm`, `col-md`, `col-lg`, and `col-xl` devices,
    but not to `col-xs` devices.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 指定一个断点，例如 `col-sm`，意味着它适用于匹配该断点的设备或更大的设备。因此，在前面显示的示例中，列定义适用于 `col-sm`、`col-md`、`col-lg`
    和 `col-xl` 设备，但不适用于 `col-xs` 设备。
- en: The column count is appended to the class name. That means using `col-#` when
    not targeting a breakpoint, for example, `col-4`,  or `col-{breakpoint}-#` when
    targeting a breakpoint, for example, `col-md-4`. If the columns add up to more
    than 12, the columns beyond the twelfth column wrap around to become a new row.
    The word `auto` can be used instead of a numerical column count to size the column
    to the natural width of its content.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 列数附加到类名上。这意味着在不针对断点时使用`col-#`，例如，`col-4`，或者当针对断点时使用`col-{breakpoint}-#`，例如，`col-md-4`。如果列的总数超过12列，超出第十二列的列将自动换行成为新的一行。可以使用`auto`代替数字列数来使列的大小适应其内容的自然宽度。
- en: 'It''s possible to mix and match to target multiple breakpoints:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可以混合匹配以针对多个断点：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This declares three different layouts, one for extra-small devices, another
    for medium devices, and the last for large devices. This gives us enough to start
    modifying the `Notes` application. The grid system can do a lot more. For details,
    see the documentation: [http://getbootstrap.com/docs/4.0/layout/grid/](http://getbootstrap.com/docs/4.0/layout/grid/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这声明了三种不同的布局，一个用于超小设备，另一个用于中等设备，最后一个用于大设备。这为我们提供了足够的资源来开始修改`Notes`应用。网格系统可以做更多的事情。有关详细信息，请参阅文档：[http://getbootstrap.com/docs/4.0/layout/grid/](http://getbootstrap.com/docs/4.0/layout/grid/).
- en: Responsive page structure for the Notes application
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Notes应用的响应式页面结构
- en: 'We structured each of the page layouts as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个页面布局结构如下：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The page content therefore has two visible rows: the header and the main content.
    At the bottom of the page are invisible things like the JavaScript files for Bootstrap
    and jQuery.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，页面内容有两个可见的行：页眉和主要内容。在页面底部有一些不可见的东西，比如Bootstrap和jQuery的JavaScript文件。
- en: No change is required in `views/layout.hbs`. One might think the `container-fluid`
    wrapper would be in that file, with the rows and columns specified in the other
    templates. Instead, we'll do it in the templates to give us the most layout freedom.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`views/layout.hbs`中不需要进行任何更改。有人可能会认为`container-fluid`包装器会在这个文件中，行和列在另一个模板中指定。相反，我们将在模板中这样做，以给我们最大的布局自由度。
- en: Using icon libraries and improving visual appeal
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图标库和提升视觉吸引力
- en: The world around us isn't constructed of words, but instead things. Hence, a
    pictorial style, as icons, should help computer software to be more comprehensible.
    Giving a good user experience should make our users reward us with more likes
    in the app store.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们周围的世界不是由文字构成的，而是由事物构成的。因此，像图标这样的图像风格应该有助于使计算机软件更易于理解。提供良好的用户体验应该会让我们的用户在应用商店中给我们更多的点赞。
- en: There are several icon libraries that can be used in a website. The Bootstrap
    team has a curated list at [http://getbootstrap.com/docs/4.1/extend/icons/](http://getbootstrap.com/docs/4.1/extend/icons/).
    For this project, we'll use Feather Icons ([https://feathericons.com/](https://feathericons.com/))
    and its conveniently available npm package, [https://www.npmjs.com/package/feather-icons](https://www.npmjs.com/package/feather-icons).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站上可以使用几个图标库。Bootstrap团队在[http://getbootstrap.com/docs/4.1/extend/icons/](http://getbootstrap.com/docs/4.1/extend/icons/)有一个精选列表。对于这个项目，我们将使用Feather
    Icons ([https://feathericons.com/](https://feathericons.com/))及其方便的npm包，[https://www.npmjs.com/package/feather-icons](https://www.npmjs.com/package/feather-icons)。
- en: 'In `package.json`, add this to the dependencies:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`package.json`中，将以下内容添加到依赖项中：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then run `npm install` to download the new package. You can then inspect the
    downloaded package and see that `./node_modules/feather-icons/dist/feather.js` contains
    browser-side code, making it easy to use the icons.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`npm install`来下载新包。然后您可以检查下载的包，并看到`./node_modules/feather-icons/dist/feather.js`包含浏览器端代码，这使得使用图标变得容易。
- en: 'We make that directory available by mounting it in `app.js`, just as we did
    for Bootstrap and jQuery libraries. Add this code to `app.js`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`app.js`中挂载它来使该目录可用，就像我们为Bootstrap和jQuery库所做的那样。将以下代码添加到`app.js`中：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Going by the documentation, we must put this at the bottom of `views/layout.hbs` to
    enable `feather-icons` support:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，我们必须将此放在`views/layout.hbs`的底部以启用`feather-icons`支持：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To use one of the icons, use a `data-feather` attribute specifying one of the
    icon names, like so:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用其中一个图标，请使用`data-feather`属性指定一个图标名称，如下所示：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What's important is the `data-feather` attribute, which the Feather Icons library
    uses to identify the SVG file to use. The Feather Icons library completely replaces
    the element where it found the `data-feather` attribute. Therefore, if you want
    the icon to be a clickable link, it's necessary to wrap the icon definition with
    an `<a>` tag, rather than adding `data-feather` to the `<a>` tag. The next section
    shows an example.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是 `data-feather` 属性，这是 Feather Icons 库用来识别要使用的 SVG 文件的属性。Feather Icons 库会完全替换找到
    `data-feather` 属性的元素。因此，如果你想使图标成为一个可点击的链接，就需要用 `<a>` 标签包裹图标定义，而不是将 `data-feather`
    添加到 `<a>` 标签中。下一节将展示一个示例。
- en: Responsive page header navigation bar
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式页面标题导航栏
- en: The header section we designed before contains a page title and a little navigation
    bar. Bootstrap has several ways to spiff this up, and even give us a responsive
    navigation bar which neatly collapses to a menu on small devices.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前设计的页眉部分包含一个页面标题和一个小导航栏。Bootstrap 有几种方法可以使它看起来更漂亮，甚至可以给我们一个响应式的导航栏，在小型设备上可以整洁地折叠成菜单。
- en: 'In `views/pageHeader.ejs`, make this change:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `views/pageHeader.ejs` 中进行以下更改：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding `class="page-header"` informs Bootstrap this is, well, the page header.
    Within that we have the `<h1>` header as before, giving the page title, and then
    a responsive Bootstrap `navbar`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `class="page-header"` 通知 Bootstrap 这是一个页面标题。在这个范围内，我们有之前提到的 `<h1>` 标题，提供页面标题，然后是一个响应式的
    Bootstrap `navbar`。
- en: 'By default the `navbar` is expanded—meaning the components inside the `navbar`
    are visible—because of the `navbar-expand-md` class. This `navbar` is using a
    `navbar-toggler` button which governs the responsiveness of the `navbar`. By default,
    this button is hidden and the body of the `navbar` is visible. If the screen is
    small enough, the `navbar-toggler` is switched so it''s visible, the body of the
    `navbar` is invisible, and when clicking on the now-visible `navbar-toggler`,
    a menu drops down containing the body of the `navbar`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`navbar` 是展开的——这意味着 `navbar` 内部的组件是可见的——这是因为使用了 `navbar-expand-md` 类。这个
    `navbar` 使用了一个 `navbar-toggler` 按钮，它控制着 `navbar` 的响应性。默认情况下，这个按钮是隐藏的，`navbar`
    的主体是可见的。如果屏幕足够小，`navbar-toggler` 将变为可见，`navbar` 的主体将不可见，并且当点击现在可见的 `navbar-toggler`
    时，会下拉一个菜单，包含 `navbar` 的主体：
- en: '![](img/61e44e72-923f-4e83-a47a-8dd50590ebec.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61e44e72-923f-4e83-a47a-8dd50590ebec.png)'
- en: We chose the feather icons *home* icon because it says go home. It's intended
    that the middle portion of the `navbar` will contain a breadcrumb as we navigate
    around the *Notes* application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了 *home* 图标，因为它表示返回主页。我们的意图是在导航到 *Notes* 应用程序时，`navbar` 的中间部分将包含一个面包屑导航。
- en: The ADD Note button is glued to the right-hand-side with a little Flexbox magic.
    The container is a Flexbox, meaning we can use the Bootstrap classes to control
    the space consumed by each item. The breadcrumb area is empty in this case, but
    the `<div>` that would contain it is there and declared with `class="col"`, meaning
    that it takes up a column unit. The ADD Note button is, on the other hand, declared
    with `class="col-auto"`, meaning it takes up only the room required for itself.
    It is the empty breadcrumb area that will expand to fill the space, while the
    ADD Note button fills only its own space, and is therefore pushed over to the
    side.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 添加笔记按钮通过一点 Flexbox 魔法粘附在右侧。容器是一个 Flexbox，这意味着我们可以使用 Bootstrap 类来控制每个项目占用的空间。在这种情况下，面包屑区域是空的，但包含它的
    `<div>` 是存在的，并且声明了 `class="col"`，这意味着它占用一个列单位。另一方面，添加笔记按钮声明为 `class="col-auto"`，这意味着它只占用自身所需的空间。是空的面包屑区域会扩展以填充空间，而添加笔记按钮只填充其自身的空间，因此被推到一边。
- en: Because it's the same application, the functionality all works; we're simply
    working on the presentation. We've added a few notes but the presentation of the
    list on the front page leaves a lot to be desired. The small size of the title
    is not very touch-friendly, since it doesn't present a large target area for a
    fingertip. And can you explain why the `notekey` value has to be displayed on
    the home page?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它是同一个应用程序，所以所有功能都正常工作；我们只是在处理展示。我们添加了一些笔记，但主页上列表的展示还有很多需要改进的地方。标题的大小很小，不太友好，因为它没有提供一个大的目标区域供指尖点击。你能解释为什么
    `notekey` 值必须显示在主页上吗？
- en: Improving the Notes list on the front page
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进主页上的笔记列表
- en: The current home page has a simple text list that's not terribly touch-friendly
    and showing the *key* at the front of the line might be inexplicable to the user.
    Let's fix this.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当前主页有一个简单的文本列表，它并不非常友好，而且在行首显示 *key* 可能对用户来说难以理解。让我们来修复这个问题。
- en: 'Edit `views/index.hbs` and make this change:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `views/index.hbs` 并进行以下更改：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first change is to switch away from using a list and to use a vertical button
    group. By making the text links look and behave like buttons, we're improving
    the user interface, especially its touch friendliness. We chose the `btn-outline-dark` button
    style because it looks good in the user interface. We use large buttons (`btn-lg`)
    that fill the width of the container (`btn-block`).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个更改是放弃使用列表，转而使用垂直按钮组。通过使文本链接看起来和表现得像按钮，我们改善了用户界面，特别是其触摸友好性。我们选择了 `btn-outline-dark`
    按钮样式，因为它在用户界面中看起来很好。我们使用大按钮（`btn-lg`）来填充容器宽度（`btn-block`）。
- en: 'We eliminated showing the notekey to the user. This information doesn''t add
    anything to the user experience:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们消除了向用户展示 notekey 的做法。这些信息并没有为用户体验增添任何价值：
- en: '![](img/4dc489ea-d737-4280-ba76-c7805486d2a6.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4dc489ea-d737-4280-ba76-c7805486d2a6.png)'
- en: This is beginning to take shape, with a decent-looking home page that handles
    resizing very nicely and is touch friendly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经开始成形，拥有一个看起来不错的首页，能够很好地处理尺寸调整，并且触摸友好。
- en: There's still something more to do with this, since the header area is taking
    up a fair amount of space. We should always feel free to rethink a plan as we
    look at intermediate results. Earlier, we created one design for the header area,
    but on reflection that design looks to be too large. The intention had been to
    insert a breadcrumb just to the right of the home icon, and to leave the `<h1>`
    title at the top of the header area. But this is taking up vertical space and
    we can tighten up the header and possibly improve the appearance.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页眉区域占据了相当大的空间，我们还有更多的事情要做。当我们查看中间结果时，我们总是可以自由地重新思考计划。早些时候，我们为页眉区域创建了一个设计，但反思后，这个设计看起来太大。原本的意图是在主页图标右侧插入面包屑，并保留页眉区域顶部的
    `<h1>` 标题。但这占用了垂直空间，我们可以使页眉更加紧凑，并可能改善外观。
- en: 'Edit `partials/header.hbs` and replace it with the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `partials/header.hbs` 并替换为以下内容：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This removes the `<h1>` tag at the top of the header area, immediately tightening
    the presentation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这移除了页眉区域顶部的 `<h1>` 标签，立即使展示更加紧凑。
- en: 'Within the `navbar-collapse` area, we''ve replaced what had been intended as
    the breadcrumb, with a simple `navbar-text` component. To keep the ADD Note button
    glued to the right, we''re maintaining the `class="col"` and `class="col-auto"`
    settings:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `navbar-collapse` 区域内，我们将原本打算用作面包屑的部分替换为一个简单的 `navbar-text` 组件。为了使“添加笔记”按钮紧贴右侧，我们保留了
    `class="col"` 和 `class="col-auto"` 设置：
- en: '![](img/4a53d717-88b6-48c7-85a9-8b7d2a057de0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a53d717-88b6-48c7-85a9-8b7d2a057de0.png)'
- en: Which header area design is better? That's a good question. Since beauty is
    in the eye of the beholder, both designs are probably equally good. What we have
    demonstrated is the ease with which we can update the design by editing the template
    files.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种页眉区域设计更好？这是一个好问题。因为美是主观的，两种设计可能同样优秀。我们所展示的是通过编辑模板文件可以多么容易地更新设计。
- en: Cleaning up the Note viewing experience
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化笔记查看体验
- en: Viewing a Note isn't bad, but the user experience can be improved. The user
    does not need to see the notekey, for example.  Additionally, Bootstrap has nicer-looking
    buttons we can use.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 查看笔记本身并不差，但用户体验可以进一步改进。例如，用户不需要看到 notekey。此外，Bootstrap 提供了更美观的按钮供我们使用。
- en: 'In `views/noteview.hbs`, make these changes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `views/noteview.hbs` 中进行以下更改：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We have declared two rows, one for the Note, and another for buttons to act
    on the Note. Both are declared to consume all 12 columns, and therefore take up
    the full available width. The buttons are again contained within a button group:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了两行，一行用于笔记，另一行用于对笔记执行操作的按钮。两者都被声明为占用所有 12 列，因此占据全部可用宽度。按钮再次包含在一个按钮组中：
- en: '![](img/768c14aa-610d-474d-aa48-2a2ee93b8f1c.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/768c14aa-610d-474d-aa48-2a2ee93b8f1c.png)'
- en: Do we really need to show the notekey to the user?  We'll leave it there, but
    that's an open question for the user experience team. Otherwise, we've improved
    the note-reading experience.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的需要向用户展示 notekey 吗？我们会保留它，但这对于用户体验团队来说是一个开放的问题。否则，我们已经改善了笔记阅读体验。
- en: Cleaning up the add/edit note form
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化添加/编辑笔记表单
- en: The next major glaring problem is the form for adding and editing notes. As
    we said earlier, it's easy to get the text input area to overflow a small screen.
    On the other hand, Bootstrap has extensive support for making nice-looking forms
    that work well on mobile devices.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主要明显的问题是添加和编辑笔记的表单。正如我们之前所说，很容易让文本输入区域在小屏幕上溢出。另一方面，Bootstrap提供了广泛的支持，可以制作出在移动设备上表现良好的漂亮表单。
- en: 'Change the `form` in `views/noteedit.hbs` to this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 将`views/noteedit.hbs`中的`form`改为以下内容：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There''s a lot going on here. What we''ve done is reorganize the `form` so
    Bootstrap can do the right things with it. The first thing to note is that we
    have several instances of this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情在进行。我们所做的是重新组织`form`，以便Bootstrap可以正确地处理它。首先要注意的是，我们有几个这样的实例：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: These are contained within a `container-fluid`, meaning that we've set up three
    rows in the form.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容都在一个`container-fluid`中，这意味着我们在表单中设置了三行。
- en: Bootstrap uses `form-group` elements to add structure to forms, and to encourage
    proper use of `<label>` elements, along with other form elements. It's good practice
    to use a `<label>` with every `<input>` to improve assistive behavior in the browser,
    rather than if you simply left some dangling text.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap使用`form-group`元素为表单添加结构，并鼓励正确使用`<label>`元素以及其他表单元素。使用`<label>`与每个`<input>`一起使用是一种良好的做法，以提高浏览器中的辅助功能行为，而不是简单地留下一些悬空文本。
- en: Every form element has `class="form-control"`. Bootstrap uses this to identify
    the controls so it can add styling and behavior.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表单元素都有`class="form-control"`。Bootstrap使用这个类来识别控件，以便添加样式和行为。
- en: By default, Bootstrap formats `form-group` elements so the `label` appears on
    another line from the input control. Note that we've added `class="col-1"` to
    the labels and `class="col"` to the `<div>` wrapping the input. This declares
    two columns, the first consuming one column unit and the other consuming the remainder.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bootstrap格式化`form-group`元素，使`label`出现在输入控件另一行。请注意，我们已将`class="col-1"`添加到标签，并将`class="col"`添加到包裹输入的`<div>`。这声明了两个列，第一个占用一列单位，另一个占用剩余部分。
- en: The `placeholder='key'` attribute puts sample text in an otherwise empty text
    input element. It disappears as soon as the user types something and is an excellent
    way to prompt the user with what's expected.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`placeholder=''key''`属性在空白的文本输入元素中放置示例文本。一旦用户输入内容，它就会消失，这是一种很好的提示用户输入预期内容的方式。'
- en: 'Finally, we changed the Submit button to be a Bootstrap button. These look
    nice, and Bootstrap makes sure that they work great:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将提交按钮改为了Bootstrap按钮。这些按钮看起来很漂亮，Bootstrap确保它们运行得很好：
- en: '![](img/abf9d97c-b6fc-44eb-ab64-d94223d17baf.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/abf9d97c-b6fc-44eb-ab64-d94223d17baf.png)'
- en: The result looks good and works well on the iPhone. It automatically sizes itself
    to whatever screen it's on. Everything behaves nicely. In this screenshot, we've
    resized the window small enough to cause the navbar to collapse. Clicking on the
    so-called hamburger icon on the right (the three horizontal lines) causes the
    navbar contents to pop up as a menu.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来很好，在iPhone上运行良好。它会自动调整大小以适应其所在的屏幕。一切表现都很正常。在这张屏幕截图中，我们将窗口调整得足够小，以至于导航栏发生了折叠。点击右侧所谓的汉堡图标（三条水平线）会导致导航栏内容弹出为菜单。
- en: Cleaning up the delete-note window
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理删除笔记窗口
- en: The window used to verify the desire to delete a Note doesn't look bad, but
    it can be improved.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 用于验证删除笔记意愿的窗口看起来还不错，但可以进行改进。
- en: 'Edit `views/notedestroy.hbs` to contain the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`views/notedestroy.hbs`以包含以下内容：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We've reworked everything to use Bootstrap form goodness. The question about
    deleting the Note is wrapped with `class="form-text"` so that Bootstrap can display
    this properly.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重新设计了所有内容，以使用Bootstrap表单的优点。关于删除笔记的问题用`class="form-text"`包裹，以便Bootstrap可以正确显示。
- en: 'The buttons are wrapped with `class="btn-group"` as before. The buttons have
    exactly the same styling as on other screens, giving a consistent look across
    the application:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮仍然用`class="btn-group"`包裹，按钮的样式与其他屏幕上的样式完全相同，保持了应用程序中的一致外观：
- en: '![](img/ab3b21c8-0194-4fc5-9c3f-f9591c92556e.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab3b21c8-0194-4fc5-9c3f-f9591c92556e.png)'
- en: 'There is an issue that the title text in the navbar does not use the word `Delete`.
    In `routes/notes.js`, we can make this change:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个问题，即导航栏中的标题文本没有使用单词`Delete`。在`routes/notes.js`中，我们可以进行以下更改：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What we've done is changed the `title` parameter passed to the template. We'd
    done this in the `/notes/edit` route handler and seemingly missed doing so in
    this handler.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是更改传递给模板的`title`参数。我们在`/notes/edit`路由处理程序中做了这件事，但似乎在这个处理程序中遗漏了这样做。
- en: Building a customized Bootstrap
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建定制的 Bootstrap
- en: One reason to use Bootstrap is that you can easily build a customized version.
    Stylesheets are built using SASS, which is one of the CSS preprocessors to simplify
    CSS development. In Bootstrap's code, one file (`scss/_variables.scss`) contains
    variables used throughout the rest of Bootstrap's `.scss` files. Change one variable
    and it can automatically affect the rest of Bootstrap.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 的一个原因是你可以轻松构建一个定制版本。样式表使用 SASS 构建，SASS 是 CSS 预处理器之一，用于简化 CSS 开发。在
    Bootstrap 的代码中，一个文件（`scss/_variables.scss`）包含了 Bootstrap 的其余 `.scss` 文件中使用的变量。更改一个变量可以自动影响
    Bootstrap 的其余部分。
- en: Earlier, we overrode a couple of Bootstrap behaviors with our custom CSS file,
    `public/stylesheets/style.css`. This is an easy way to change a couple of specific
    things, but it doesn't work for large-scale changes to Bootstrap. Serious Bootstrap
    customization requires generating a customized Bootstrap build.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用自定义 CSS 文件 `public/stylesheets/style.css` 覆盖了几个 Bootstrap 的行为。这是一种改变几个特定内容的方法，但对于
    Bootstrap 的大规模更改不起作用。严肃的 Bootstrap 定制化需要生成定制的 Bootstrap 构建。
- en: The official documentation on the Bootstrap website ([http://getbootstrap.com/docs/4.1/getting-started/build-tools/](http://getbootstrap.com/docs/4.1/getting-started/build-tools/))
    is useful for reference on the build process.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 官方网站上的官方文档（[http://getbootstrap.com/docs/4.1/getting-started/build-tools/](http://getbootstrap.com/docs/4.1/getting-started/build-tools/））对于了解构建过程非常有用。
- en: If you've followed the directions given earlier, you have a directory, `chap06/notes`,
    containing the `Notes` application source code. Create a directory named `chap06/notes/theme`,
    within which we'll set up a custom Bootstrap build process.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经按照之前给出的说明操作，你将有一个包含 `Notes` 应用程序源代码的目录 `chap06/notes`。在 `chap06/notes`
    中创建一个名为 `theme` 的目录，我们将在其中设置自定义 Bootstrap 构建。
- en: As students of the Twelve Factor Application model, we'll be using a `package.json` in
    that directory to automate the build process. There isn't any Node.js code involved;
    npm is also a convenient tool to automate the software build processes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 作为十二要素应用模型的学生，我们将使用该目录中的 `package.json`来自动化构建过程。其中不涉及任何 Node.js 代码；npm 也是自动化软件构建过程的便捷工具。
- en: To start, download the Bootstrap source tree from [https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap).
    While the Bootstrap npm package includes SASS source files, it isn't sufficient
    to build Bootstrap, and therefore one must download the source tree. What we do
    is navigate to the GitHub repository, click on the Releases tab, and select the
    URL for the most recent release.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 [https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap)
    下载 Bootstrap 源代码树。虽然 Bootstrap npm 包包括 SASS 源文件，但这不足以构建 Bootstrap，因此必须下载源代码树。我们做的是导航到
    GitHub 仓库，点击“Releases”标签，并选择最新版本的 URL。
- en: 'With `theme/package.json` containing this `scripts` section:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含此 `scripts` 部分的 `theme/package.json` 中：
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Type this command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This downloads the tar-gzip (tarball) archive from the Bootstrap repository
    and immediately unpacks it. If you are on Windows, it will be easiest to run that
    script in Windows Subsystem for Linux to execute these commands. After downloading
    and unpacking the archive, the `postdownload` step runs `npm install` in the directory.
    The Bootstrap team uses their `package.json`, not only to track all the dependencies
    required to build Bootstrap, but to drive the build process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 Bootstrap 仓库下载 tar-gzip（tarball）存档并立即解压。如果你使用的是 Windows，最简单的方法是在 Windows
    Subsystem for Linux 中运行该脚本以执行这些命令。下载并解压存档后，`postdownload` 步骤会在该目录中运行 `npm install`。Bootstrap
    团队使用他们的 `package.json`，不仅用于跟踪构建 Bootstrap 所需的所有依赖项，而且还用于驱动构建过程。
- en: The `npm install` for Bootstrap will take a long time, so be patient.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的 `npm install` 需要很长时间，所以请耐心等待。
- en: This much only installs the tools necessary to build Bootstrap. Building the
    Bootstrap documentation requires installing additional Ruby-based tools (Jekyll
    and some plugins).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这只安装了构建 Bootstrap 所需的工具。构建 Bootstrap 文档需要安装额外的基于 Ruby 的工具（Jekyll 和一些插件）。
- en: 'To build Bootstrap, let''s add the following lines to the `scripts` section
    in our `theme/package.json`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Bootstrap，让我们将以下行添加到 `theme/package.json` 中的 `scripts` 部分：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Obviously you'll need to adjust the directory name as the Bootstrap project
    issues new releases. In the Bootstrap source tree, running `npm run dist` builds
    Bootstrap, while `npm run watch` sets up an automated process to scan for changed
    files and rebuilds Bootstrap upon changing any file. By adding these lines to
    our `theme/package.json`, we can start this in the terminal and it automatically
    reruns the build as needed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你需要根据Bootstrap项目的新版本发布调整目录名称。在Bootstrap源代码树中，运行`npm run dist`构建Bootstrap，而`npm
    run watch`设置一个自动化的过程来扫描更改的文件，并在任何文件更改时重新构建Bootstrap。通过将这些行添加到我们的`theme/package.json`中，我们可以在终端中启动它，并且它会根据需要自动重新运行构建。
- en: 'Now run a build with this command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令进行构建：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The built files land in the `theme/bootstrap-4.1.0/dist` directory. The content
    of that directory will match the contents of the corresponding npm package.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件将放在`theme/bootstrap-4.1.0/dist`目录中。该目录的内容将与相应的npm包内容相匹配。
- en: In case it hasn't been obvious all along—there are Bootstrap version numbers
    embedded in these URLs and file or directory names. As new Bootstrap releases
    are issued, you must adjust the pathnames to match the current version number.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一直不明显的话——这些URL和文件或目录名中嵌入了Bootstrap版本号。随着新Bootstrap版本的发布，你必须调整路径名以匹配当前版本号。
- en: Before proceeding, let's take a look around the Bootstrap source tree. The `scss`
    directory contains the SASS source that will be compiled into the Bootstrap CSS
    files. To generate a customized Bootstrap build will require a few modifications
    in that directory.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们看看Bootstrap的源代码树。`scss`目录包含了将被编译成Bootstrap CSS文件的SASS源代码。要生成定制的Bootstrap构建，需要在那个目录中进行一些修改。
- en: The `bootstrap-4.1.0/scss/bootstrap.scss` file contains `@import` directives
    to pull in all Bootstrap components. The file `bootstrap-4.1.0/scss/_variables.scss` contains
    definitions used in the remainder of the Bootstrap SASS source. Editing, or overriding,
    these values will change the look of websites using the resulting Bootstrap build.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`bootstrap-4.1.0/scss/bootstrap.scss`文件包含`@import`指令以引入所有Bootstrap组件。`bootstrap-4.1.0/scss/_variables.scss`文件包含Bootstrap
    SASS源代码中使用的定义。编辑或覆盖这些值将改变使用结果Bootstrap构建的网站的外观。'
- en: 'For example, these definitions determine the main color values:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下定义决定了主要颜色值：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These are similar to CSS statements. The `!default` attribute designates these
    values as the default. Any `!default` values can be overridden without editing
    `_values.scss`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类似于CSS语句。`!default`属性指定这些值为默认值。任何`!default`值都可以在不编辑`_values.scss`的情况下进行覆盖。
- en: 'Create a file, `theme/_custom.scss`, containing the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件，`theme/_custom.scss`，包含以下内容：
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This reverses the values for the `$body-bg` and `$body-color` settings in `_variables.scss`.
    The Notes app will now use white text on a dark background, rather than the default
    white background with dark text. Because these declarations do not use `!default`,
    they'll override the values in `_variables.scss`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将反转`_variables.scss`中`$body-bg`和`$body-color`设置的值。笔记应用现在将使用白色文本在深色背景上，而不是默认的白色背景和深色文本。因为这些声明没有使用`!default`，所以它们将覆盖`_variables.scss`中的值。
- en: 'Then make a copy of `scss/bootstrap.scss` in the theme directory and modify
    it, like so:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在主题目录中复制`scss/bootstrap.scss`并对其进行修改，如下所示：
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''re importing the `_custom.scss` file we just created. Finally, add this
    line to the `scripts` section of `theme/package.json`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在导入我们刚刚创建的`_custom.scss`文件。最后，将此行添加到`theme/package.json`的`scripts`部分：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With that in place, before building Bootstrap these two files will be copied
    in place. Next, rebuild Bootstrap:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，在构建Bootstrap之前，这两个文件将被复制到相应位置。接下来，重新构建Bootstrap：
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'While that''s building, let''s modify `notes/app.js` to mount the build directory:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建进行时，让我们修改`notes/app.js`以挂载构建目录：
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What we've done is switch from the Bootstrap in `node_modules` to what we just
    built in the `theme` directory. The Bootstrap version number shows up here, so
    this must also be updated as new Bootstrap releases are adopted.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是将`node_modules`中的Bootstrap切换到了我们在`theme`目录中刚刚构建的版本。Bootstrap的版本号会显示在这里，因此这也必须随着新Bootstrap版本的采用而更新。
- en: 'Then reload the application, and you''ll see the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新加载应用程序，你会看到以下内容：
- en: '![](img/fa5801c6-c8ea-4622-a4f1-6fa89c824492.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa5801c6-c8ea-4622-a4f1-6fa89c824492.png)'
- en: To get exactly this, you may need to make a change in the templates. The Button
    elements we used earlier have the `btn-outline-dark` class, which works well on
    a light background. The background is now dark and these buttons need to use light
    coloring.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要得到完全相同的效果，你可能需要在模板中做一些更改。我们之前使用的按钮元素具有`btn-outline-dark`类，这在浅色背景上工作得很好。现在背景变暗了，这些按钮需要使用浅色。
- en: 'To change the buttons, in `views/index.hbs` make this change:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改按钮，请在`views/index.hbs`中进行以下更改：
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Make a similar change in `views/noteview.hbs`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`views/noteview.hbs`中做类似的更改：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: That's cool, we can now rework the Bootstrap color scheme any way we want. Don't
    show this to your user experience team, because they'll throw a fit. We did this
    to prove the point that we can edit `_custom.scss` and change the Bootstrap theme.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，我们现在可以按任何我们想要的方式重新工作Bootstrap颜色方案。不要把这个展示给你的用户体验团队，因为他们会大发雷霆。我们这样做是为了证明我们可以编辑`_custom.scss`并更改Bootstrap主题。
- en: Pre-built custom Bootstrap themes
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预构建的自定义Bootstrap主题
- en: If all this is too complicated for you, several websites provide pre-built Bootstrap
    themes, or else simplified tools to generate a Bootstrap build. To get our feet
    wet, let's download a theme from Bootswatch ([https://bootswatch.com/](https://bootswatch.com/)).
    This is both a collection of free and open source themes and a build system for
    generating custom Bootstrap themes ([https://github.com/thomaspark/bootswatch/](https://github.com/thomaspark/bootswatch/)).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这一切对你来说太复杂，有几个网站提供预构建的Bootstrap主题，或者提供简化工具来生成Bootstrap构建。为了熟悉这个过程，让我们从Bootswatch下载一个主题（[https://bootswatch.com/](https://bootswatch.com/)）。这是一个免费和开源主题的集合，也是一个用于生成自定义Bootstrap主题的构建系统（[https://github.com/thomaspark/bootswatch/](https://github.com/thomaspark/bootswatch/))）。
- en: 'Let''s use the **Minty** theme from Bootswatch to explore the needed changes.
    You can download the theme from the website or add the following to the `scripts`
    section of `package.json`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Bootswatch的**Minty**主题来探索所需的更改。你可以从网站上下载主题，或者将以下内容添加到`package.json`的`scripts`部分：
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will download the prebuilt CSS files for our chosen theme. In passing,
    notice that the Bootswatch website offers `_variables.scss` and `_bootswatch.scss`
    files which should be usable with a workflow similar to what we implemented in
    the previous section. The GitHub repository matching the Bootswatch website has
    a complete build procedure for building custom themes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载我们选择的主题的预构建CSS文件。顺便提一下，Bootswatch网站提供了`_variables.scss`和`_bootswatch.scss`文件，这些文件可以使用与我们在上一节中实现的工作流程类似的工作流程使用。与Bootswatch网站匹配的GitHub存储库具有构建自定义主题的完整构建过程。
- en: 'Perform the download:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 执行下载：
- en: '[PRE36]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In `app.js` we will need to change the Bootstrap mounts to separately mount
    the JavaScript and CSS files. Use the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`中，我们需要将Bootstrap挂载更改为分别挂载JavaScript和CSS文件。使用以下内容：
- en: '[PRE37]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Instead of one mount for `/vendor/bootstrap`, we now have two mounts for each
    of the subdirectories. Simply make the `/vendor/bootstrap/css` mount point to
    a directory containing the CSS files you downloaded from the theme provider.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`/vendor/bootstrap`的挂载不再是一个，而是每个子目录都有两个挂载。只需将`/vendor/bootstrap/css`挂载点设置为包含从主题提供商下载的CSS文件的目录。
- en: 'Because Minty is a light-colored theme, the buttons need to use the dark style.
    We had earlier changed the buttons to use a light style because of the dark background.
    We must now switch from `btn-outline-light` back to `btn-outline-dark`. In `partials/header.hbs`,
    the color scheme requires a change to the navbar content:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Minty是一个浅色主题，按钮需要使用深色样式。我们之前因为背景是深色的，所以将按钮更改为使用浅色样式。现在我们必须从`btn-outline-light`切换回`btn-outline-dark`。在`partials/header.hbs`中，颜色方案需要更改导航栏内容：
- en: '[PRE38]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We selected `text-dark` and `btn-dark` classes to provide some contrast against
    the background.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了`text-dark`和`btn-dark`类来与背景形成对比。
- en: 'Re-run the application and you''ll see something like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行应用程序，你会看到类似以下内容：
- en: '![](img/dcdb99ab-5a30-425a-ae9c-d03a3110e293.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcdb99ab-5a30-425a-ae9c-d03a3110e293.png)'
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The possibilities for using Bootstrap are endless. While we covered a lot of
    material, we only touched the surface, and we could have done much more to the
    *Notes* application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap的可能性是无限的。虽然我们覆盖了很多内容，但我们只是触及了表面，我们本可以对*笔记*应用做更多的工作。
- en: You learned what the Twitter Bootstrap framework can do. Bootstrap's goal is
    to make mobile-responsive development easy. We used Bootstrap to make great improvements
    to the way the `Notes` app looks and feels. We customized Bootstrap, dipping our
    toes into generating a custom theme.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了 Twitter Bootstrap 框架能做什么。Bootstrap 的目标是使移动响应式开发变得简单。我们使用 Bootstrap 对
    *Notes* 应用的外观和感觉进行了重大改进。我们对 Bootstrap 进行了定制，尝试生成一个自定义主题。
- en: Now, we want to get back to writing Node.js code. We left off [Chapter 5](e4322e55-673b-45c5-b64e-fc107d57ef03.xhtml),
    *Your First Express Application*, with the problem of persistence so that the
    *Notes* application can be stopped and restarted without losing our notes. In
    Chapter 7, *Data Storage and Retrieval*, we'll dive into using databases to store
    our data.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要回到编写 Node.js 代码。我们暂停在[第 5 章](e4322e55-673b-45c5-b64e-fc107d57ef03.xhtml)，*你的第一个
    Express 应用程序*，讨论了持久性问题，以便在停止和重新启动 *Notes* 应用程序时不会丢失我们的笔记。在第 7 章，*数据存储和检索*中，我们将深入探讨使用数据库来存储我们的数据。
- en: To give ourselves some experience with the ES6 Module format, we'll rewrite
    the *Notes* application accordingly.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们自己有一些关于 ES6 模块格式的经验，我们将相应地重写 *Notes* 应用程序。
