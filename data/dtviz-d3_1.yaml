- en: Chapter 1. Getting Started with d3.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. d3.js入门
- en: In this chapter, I'll show you the basic tools for making simple visualizations
    in d3.js without going into too much depth so that you can get started immediately.
    We will go through the basic language of d3.js and also its rules.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你展示在d3.js中制作简单可视化的基本工具，而不会深入探讨，这样你就可以立即开始。我们将学习d3.js的基本语言及其规则。
- en: We'll take a stab at creating axes and automatically scaling graphs to fit the
    viewport, and learn about using Chrome Developer Tools to model our code before
    going into a full-blown programming bonanza. Through this chapter, we're going
    to set up the environment used throughout the book and create an animated chart
    of a dataset I created from GitHub.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试创建坐标轴和自动缩放图形以适应视口，并学习在进入全面编程狂欢之前使用Chrome开发者工具来模拟我们的代码。通过本章，我们将设置整本书中使用的环境，并创建一个由我从GitHub创建的数据集的动画图表。
- en: What is d3.js?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是d3.js？
- en: The name D3 stands for Data-Driven Documents. *Mike Bostock* has been openly
    developing this powerful data visualization library since 2011\. It helps you
    draw beautiful graphics by manipulating data without worrying too much about pixel
    positions, calculating where things fit on a graph, and so on. If you've ever
    visualized data in Python or similar languages, you've probably used something
    similar to **gnuplot** . I assure you that d3.js offers a much more pleasurable
    experience.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: D3这个名字代表数据驱动文档。*迈克·博斯特克*自2011年以来一直在公开开发这个强大的数据可视化库。它通过操作数据来帮助你绘制美丽的图形，无需过多担心像素位置，计算事物在图上的位置等问题。如果你曾经使用Python或类似语言可视化数据，你可能已经使用过类似**gnuplot**的工具。我向你保证，d3.js提供了一种更加愉悦的体验。
- en: The official website, [d3js.org](http://d3js.org), features many great examples
    that show off the power of d3.js, but understanding them is tricky at best. After
    finishing this book, you should be able to understand d3.js well enough to figure
    out the examples. If you want to follow the development of d3.js more closely,
    the source code is hosted on GitHub at [https://github.com/mbostock/d3](https://github.com/mbostock/d3).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 官方网站[d3js.org](http://d3js.org)展示了众多展示d3.js强大功能的优秀示例，但理解它们至多只是有点棘手。完成本书后，你应该能够足够了解d3.js，以理解这些示例。如果你想更密切地跟踪d3.js的发展，源代码托管在GitHub上，网址为[https://github.com/mbostock/d3](https://github.com/mbostock/d3)。
- en: The fine-grained control and its elegance make d3.js one of the most, if not
    the most, powerful open source visualization libraries out there. This also means
    that it's not very suitable for simple jobs such as drawing a chart or two—in
    that case you might want to use a library designed for charting. Many use d3.js
    internally anyway.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 精细的控制和其优雅性使d3.js成为最强大，如果不是最强大的开源可视化库之一。这也意味着它不太适合简单的任务，如绘制一个图表或两个——在这种情况下，你可能想使用专门为图表设计的库。尽管如此，许多人仍然在内部使用d3.js。
- en: As a data manipulation library, d3.js is based on functional programming principles,
    which is probably where a lot of the confusion stems from. Unfortunately, functional
    programming goes beyond the scope of this book, but I'll explain all the relevant
    bits to make sure everyone's on the same page.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据操作库，d3.js基于函数式编程原则，这可能是很多困惑的根源。不幸的是，函数式编程超出了本书的范围，但我将解释所有相关的部分，以确保每个人都在同一页面上。
- en: Setting up a play environment
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置播放环境
- en: 'D3 combines HTML, CSS, and SVG to create graphics. That means we''re going
    to need an HTML and a JavaScript file. We''ll use Chrome Developer Tools to tweak
    our visualizations and test things out. Let''s start with some HTML coding:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: D3结合HTML、CSS和SVG来创建图形。这意味着我们需要一个HTML文件和一个JavaScript文件。我们将使用Chrome开发者工具来调整我们的可视化并测试事物。让我们从一些HTML编码开始：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These six lines of HTML code are the basics we're going to use throughout this
    book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这六行HTML代码是我们将在整本书中使用的基础知识。
- en: The first two lines comprise a minimal HTML5 document. You no longer need to
    include the `<html>`, `<head>`, and `<body>` tags. Next is the `<link>` tag that
    pulls in Twitter Bootstrap's CSS rules—a good set of defaults to make things prettier.
    After that comes the `<div>` tag that will hold our visualization, and finally,
    there's the `<script>` tag that loads d3.js.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行构成了一个最小的HTML5文档。你不再需要包含`<html>`、`<head>`和`<body>`标签。接下来是`<link>`标签，它引入了Twitter
    Bootstrap的CSS规则——一组很好的默认规则，可以使事物看起来更美观。然后是`<div>`标签，它将包含我们的可视化，最后是`<script>`标签，它加载d3.js。
- en: At the end, we include a `code.js` file, where we'll put most of our code. Twitter
    doesn't offer a hosted version of Bootstrap, so you have to download the whole
    package from [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)
    and unpack it next to the other files you're working with. All we need now is
    a server to run everything. This is because we don't want to get into trouble
    with browser security models when making Ajax requests. Any server will do, but
    here's a quick way to get one up and running if you already have Python installed
    (by default on Mac and Linux).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们包括一个`code.js`文件，我们将把大部分代码放在这里。Twitter不提供Bootstrap的托管版本，所以您必须从[http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)下载整个包，并将其解压到您正在使用的其他文件旁边。我们现在只需要一个服务器来运行一切。这是因为我们不希望在制作Ajax请求时与浏览器安全模型发生冲突。任何服务器都可以，但如果您已经安装了Python（默认在Mac和Linux上），这是一个快速启动和运行的方法。
- en: 'Fire up a console, navigate to your working directory, and run the following
    command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 启动控制台，导航到您的工作目录，并运行以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python will run the `SimpleHTTPServer` module as a standalone script and create
    a fully functional local server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python将以独立脚本的形式运行`SimpleHTTPServer`模块，并创建一个功能齐全的本地服务器。
- en: 'Now point Chrome to `localhost:8000` and fire up the developer console—*Ctrl*
    + *Shift* + *J* for Linux and Windows and *Option* + *Command* + *J* for Mac.
    You should see a blank website and a blank JavaScript console with a command prompt
    waiting for some code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将Chrome指向`localhost:8000`并启动开发者控制台——Linux和Windows的*Ctrl* + *Shift* + *J*，Mac的*Option*
    + *Command* + *J*。您应该看到一个空白的网站和一个空白的JavaScript控制台，其中有一个命令提示符等待输入代码：
- en: '![Setting up a play environment](img/0007OS_01_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![设置播放环境](img/0007OS_01_01.jpg)'
- en: A quick Chrome Developer Tools primer
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chrome开发者工具快速入门
- en: Chrome Developer Tools are indispensable in web development. Most modern browsers
    have something similar, but I thought we'd stick to a single example to keep the
    book shorter. Feel free to use a different browser.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具在Web开发中是必不可少的。大多数现代浏览器都有类似的功能，但我认为我们还是坚持使用一个例子来使这本书更简洁。您可以使用不同的浏览器。
- en: 'We are mostly going to use the **Elements** and **Console** tabs: **Elements**
    to inspect the DOM, and **Console** to play with JavaScript code and look for
    any problems.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将使用**元素**和**控制台**标签：**元素**用于检查DOM，**控制台**用于与JavaScript代码交互并查找任何问题。
- en: The other six tabs come in handy for large projects. The **Network** tab will
    let you know how long files are taking to load and helps you inspect the Ajax
    requests. The **Profiles** tab will help you profile JavaScript for performance.
    The **Resources** tab is good for inspecting client-side data. Honestly, I have
    never needed **Timeline** and **Audits** before. One of the favorites from Developer
    Tools is the CSS inspector at the right-hand side of the **Elements** tab.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其他六个标签对于大型项目非常有用。**网络**标签会告诉您文件加载需要多长时间，并帮助您检查Ajax请求。**配置文件**标签可以帮助您对JavaScript进行性能分析。**资源**标签适合检查客户端数据。老实说，我以前从未需要过**时间线**和**审计**。开发者工具中我最喜欢的功能之一是位于**元素**标签右侧的CSS检查器。
- en: 'It can tell you what CSS rules are affecting the styling of an element, which
    is very good for hunting rogue rules that are messing things up. You can also
    edit the CSS and immediately see the results:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以告诉您哪些CSS规则影响了元素的风格，这对于寻找破坏事物的违规规则非常有用。您还可以编辑CSS并立即看到结果：
- en: '![A quick Chrome Developer Tools primer](img/0007OS_01_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具快速入门](img/0007OS_01_02.jpg)'
- en: A simple histogram
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的直方图
- en: We'll go through the basics of d3.js by creating a histogram indicating when
    the GitHub users commit code. We're going to label axes, make sure things are
    scalable, and modify animations for that extra bit of flair.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个表示GitHub用户提交代码时间的直方图来介绍d3.js的基础知识。我们将标注坐标轴，确保可扩展性，并修改动画以增加额外的魅力。
- en: The dataset contains 504,015 repositories and it took me a week to create it
    out of punchcard data for each repository. A punchcard is just a 7 x 24 grid of
    buckets, specifying how many commits happened within a specific day and hour.
    The dataset's histogram digest is hosted at [http://nightowls.swizec.com/data/histogram-hours.json](http://nightowls.swizec.com/data/histogram-hours.json)
    and maps hours to the sum of commits occurring within that hour.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含504,015个仓库，我花费了一周时间从每个仓库的穿孔卡片数据中创建它。穿孔卡片只是一个7 x 24的桶状网格，指定了在特定一天和小时内发生的提交次数。数据集的直方图摘要托管在[http://nightowls.swizec.com/data/histogram-hours.json](http://nightowls.swizec.com/data/histogram-hours.json)，并将小时映射到该小时内发生的提交总数。
- en: 'This is what we''re aiming for:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们想要达到的效果：
- en: '![A simple histogram](img/0007OS_01_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的直方图](img/0007OS_01_03.jpg)'
- en: 'We begin by taking the environment prepared in the previous section and adding
    a few lines around the central `<div>` tag:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从上一节准备好的环境中添加一些关于中心 `<div>` 标签的代码：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The extra `<div>` tags center the graph horizontally and ensure that we have
    900 px of width to work with. Don't forget to add the `class="span12"` parameter
    into the `graph` div. It tells Bootstrap the div should go the whole width of
    the grid.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的 `<div>` 标签使图表水平居中，并确保我们有 900 像素的宽度来工作。别忘了在 `graph` div 中添加 `class="span12"`
    参数。它告诉 Bootstrap 这个 div 应该占据网格的全宽。
- en: To avoid tripping your browser's security restrictions regarding cross-domain
    requests, you should now take a moment to download the dataset and save it next
    to the other files. Remember, it's at [http://nightowls.swizec.com/data/histogram-hours.json](http://nightowls.swizec.com/data/histogram-hours.json).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免触发浏览器关于跨域请求的安全限制，你现在应该花点时间下载数据集并将其保存到其他文件旁边。记住，它在 [http://nightowls.swizec.com/data/histogram-hours.json](http://nightowls.swizec.com/data/histogram-hours.json)。
- en: You can play around with the following code in Chrome Developer Tools to see
    what it does and then save it in `code.js`. Writing directly to the file also
    works, but just make sure you refresh frequently. Learning is if you know what
    each line does.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Chrome 开发者工具中尝试以下代码，看看它做了什么，然后将其保存到 `code.js` 中。直接写入文件也行，但请确保经常刷新。学习就是当你知道每一行代码做什么的时候。
- en: 'We begin with some variables as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从以下一些变量开始：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We're going to use these to specify the dimensions of our drawing area. The
    `pad` variable will define the padding from the edge, with `left_pad` giving a
    bigger margin on the left to allow for labels.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些变量来指定绘图区域的尺寸。`pad` 变量将定义边缘的填充，`left_pad` 给左边更大的边距以允许标签。
- en: 'Next, we define a horizontal scale, `x`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个水平比例尺，`x`：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `x` scale is now a function that maps inputs from a yet unknown domain (we
    don't have the data yet) to a range of values between `left_pad` and `width -
    pad`, that is, between `100` and `880` with some spacing defined by the `0.1`
    value. Because it's an ordinal scale, the domain will have to be discrete rather
    than continuous. `rangeRoundBands` means the range will be split into bands that
    are guaranteed to be round numbers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 比例尺现在是一个函数，它将来自一个尚未知的域（我们还没有数据）的输入映射到 `left_pad` 和 `width - pad` 之间的值域，即
    `100` 和 `880` 之间，并有一些由 `0.1` 值定义的间隔。因为它是一个序数比例尺，域将必须是离散的而不是连续的。`rangeRoundBands`
    意味着范围将被分成保证是圆形数字的带状区域。'
- en: 'Then, we define another scale named `y`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义另一个名为 `y` 的比例尺：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similarly, the `y` scale is going to map a yet unknown linear domain to a range
    between `height-pad` and `pad`, that is, `880` and `20`. Inverting the range is
    important because d3.js considers the top of a graph to be `y=0`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`y` 轴将把一个尚未知的线性域映射到 `height-pad` 和 `pad` 之间的范围，即 `880` 和 `20`。反转范围很重要，因为
    d3.js 认为图表的顶部是 `y=0`。
- en: 'Now, we define our axes as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们按照以下方式定义我们的坐标轴：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We've told each axis what scale to use when placing ticks and which side of
    the axis to put the labels on. D3 will automatically decide how many ticks to
    display, where they go, and how to label them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经告诉每个坐标轴在放置刻度时使用哪个比例尺，以及将标签放在坐标轴的哪一侧。D3 将自动决定显示多少刻度，它们的位置以及如何标记它们。
- en: 'The last step before loading the data is defining an SVG element for the histogram:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据之前的最后一步是定义直方图的 SVG 元素：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Switching quickly to the **Elements** tab, you'll notice a new HTML element
    with a width of 900 and a height of 100.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 快速切换到 **元素** 选项卡，你会注意到一个宽度为 900 像素、高度为 100 像素的新的 HTML 元素。
- en: Now the fun begins!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有趣的部分开始了！
- en: 'We''re going to use d3.js itself to load data remotely and then draw the graph
    in the callback function. Remember to use *Shift* + *Enter* to input multiline
    code in the Chrome console. Now might be a good time to switch to coding in `code.js`
    directly and refreshing after every couple of steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 d3.js 本身来远程加载数据，然后在回调函数中绘制图表。记住使用 *Shift* + *Enter* 在 Chrome 控制台中输入多行代码。现在可能是直接在
    `code.js` 中编写代码并每走几步刷新的好时机：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`d3.json` will create an Ajax request to load a JSON file, then parse the received
    text into a JavaScript object. D3 understands CSV and some other data formats
    as well, which is kind of awesome if you ask me.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.json` 将创建一个 Ajax 请求来加载一个 JSON 文件，然后将接收到的文本解析成 JavaScript 对象。D3 还理解 CSV
    和一些其他数据格式，如果你问我，这真的很棒。'
- en: 'From here on, we put everything in that callback function (before the `});`
    bit). Our data will be in the `data` variable. D3 is a functional data-munging
    library, so we need to transform our dictionary data into a list of simple objects.
    We do this using the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将所有内容放入那个回调函数（在`});`之前的部分）。我们的数据将存储在`data`变量中。D3是一个功能性的数据处理库，因此我们需要将我们的字典数据转换成一个简单的对象列表。我们使用以下代码来完成这个操作：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`d3.keys` returns a list of keys in the data dictionary, which we then `map`
    over with an iterator function that returns a simple dictionary for every item.
    It tells us where an item fits in the histogram (`bucket`) and what value it holds
    (`N`).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.keys`返回数据字典中的键列表，然后我们使用一个迭代函数`map`遍历这些键，为每个项目返回一个简单的字典。它告诉我们一个项目在直方图（`bucket`）中的位置以及它持有的值（`N`）。'
- en: We've turned our data into a list of two-value dictionaries.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将数据转换成了一个包含两个值的字典列表。
- en: 'Remember the `x` and `y` scales from before? We can finally give them a domain
    and make them useful:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 记得之前的`x`和`y`轴吗？我们终于可以给它们一个域，使它们变得有用：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since most d3.js elements are objects and functions at the same time, we can
    change the internal state of both scales without assigning the result to anything.
    The domain of `x` is a list of discrete values. The domain of `y` is a range from
    `0` to `d3.max` of our dataset—the largest value.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数d3.js元素既是对象又是函数，我们可以改变这两个轴的内部状态，而不需要将结果分配给任何东西。`x`轴的域是一个离散值的列表。`y`轴的域是从`0`到我们数据集的`d3.max`的范围——最大的值。
- en: 'Now we''re going to draw the axes on our graph:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在我们的图表上绘制坐标轴：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We've appended an element called `g` to the graph, given it the CSS class `"axis"`,
    and moved the element to a place at the bottom-left of the graph with the `transform`
    attribute.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将一个名为`g`的元素添加到图中，给它分配了CSS类`"axis"`，并使用`transform`属性将其移动到图的左下角。
- en: Finally, we call the `xAxis` function and let d3.js handle the rest.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用`xAxis`函数，让d3.js处理其余部分。
- en: 'Drawing the other axis works exactly the same, but with different arguments:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制其他轴的工作方式完全相同，但使用不同的参数：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that our graph is labeled, it''s finally time to draw some data:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为图表添加了标签，是时候绘制一些数据了：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Okay, there''s plenty going on here, but this code is saying something very
    simple: for all rectangles (`rect`) in the graph, load our data, go through it,
    and for each item append a `rect` and then define some attributes.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这里有很多事情在进行，但这段代码实际上非常简单：对于图中所有的矩形（`rect`），加载我们的数据，遍历它，并为每个项目添加一个`rect`，然后定义一些属性。
- en: The `x` scale helps us calculate the horizontal positions and `rangeBand` gives
    the width of the bar. The `y` scale calculates vertical positions and we manually
    get the height of each bar from `y` to the bottom. Note that whenever we needed
    a different value for every element, we defined an attribute as a function (`x`,
    `y`, and `height`); otherwise, we defined it as a value (`width`).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`轴帮助我们计算水平位置，`rangeBand`给出柱子的宽度。`y`轴计算垂直位置，我们手动从`y`到底部获取每个柱子的高度。请注意，每当我们需要为每个元素指定不同的值时，我们定义一个属性为函数（`x`、`y`和`height`）；否则，我们将其定义为值（`width`）。'
- en: Keep this in mind when you're tinkering.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在调整时请记住这一点。
- en: Let's add some flourish and make each bar grow out of the horizontal axis. Time
    to dip our toes into animations!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些装饰，让每个柱子从水平轴生长出来。是时候尝试动画了！
- en: 'Add five lines to the preceding code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中添加五行：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The difference is that we statically put all bars at the bottom (`height-pad`)
    and then entered a transition with `.transition()`. From here on, we define the
    transition we want.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于我们静态地将所有柱子放置在底部（`height-pad`），然后使用`.transition()`进入一个过渡。从现在开始，我们定义我们想要的过渡。
- en: First, we wanted each bar's transition delayed by 20 milliseconds using `d.bucket*20`.
    This gives the histogram a neat effect, gradually appearing from left to right
    instead of jumping up at once. Next, we said we wanted each animation to last
    just shy of a second with `.duration(800)`. In the end, we defined the final values
    for the animated attributes—`y` and `height` are the same as in previous code—and
    d3.js is going to take care of the rest.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要每个柱子的过渡延迟20毫秒，使用`d.bucket*20`。这给直方图带来了一种整洁的效果，逐渐从左到右出现，而不是一次性跳起来。接下来，我们说我们想要每个动画持续不到一秒，使用`.duration(800)`。最后，我们定义了动画属性的最终值——`y`和`height`与之前的代码相同——d3.js将处理其余部分。
- en: 'Refresh the page and voila! A beautiful histogram appears as shown in the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面，哇！一个漂亮的直方图就出现了，如下面的截图所示：
- en: '![A simple histogram](img/0007OS_01_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的直方图](img/0007OS_01_04.jpg)'
- en: Hmm, not really. We need some CSS to make everything look perfect.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，其实并不是这样。我们需要一些CSS来让一切看起来完美。
- en: Remember that you can look at the full code on GitHub at [https://github.com/Swizec/d3.js-book-examples/tree/master/ch1](https://github.com/Swizec/d3.js-book-examples/tree/master/ch1)
    if you didn't get something similar to the preceding screenshot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你没有看到与前面的截图类似的内容，可以在GitHub上查看完整的代码[https://github.com/Swizec/d3.js-book-examples/tree/master/ch1](https://github.com/Swizec/d3.js-book-examples/tree/master/ch1)。
- en: 'Let''s go into our HTML file and add some CSS on line 4, right after including
    `bootstrap`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入HTML文件，在包含`bootstrap`之后在第4行添加一些CSS：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is why we added all those classes to shapes. We made the axes thin, gave
    them a light-gray color, and used a relatively small font for the labels. The
    bars should be steel blue. Refresh the page now and the histogram is beautiful:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为这个原因，我们给形状添加了所有那些类。我们使坐标轴变细，给它们一种浅灰色，并为标签使用了相对较小的字体。条形应该是钢蓝色。现在刷新页面，直方图就变得很漂亮了：
- en: '![A simple histogram](img/0007OS_01_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的直方图](img/0007OS_01_05.jpg)'
- en: I suggest playing around with the values for `width`, `height`, `left_pad`,
    and `pad` to get a feel of the power of `d3.js`. You'll notice everything scales
    and adjusts to any size without having to change the other code. Marvelous!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议尝试调整`width`、`height`、`left_pad`和`pad`的值，以感受`d3.js`的强大之处。你会发现一切都会根据任何大小进行缩放和调整，而无需更改其他代码。太棒了！
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've learned what d3.js is and took a glance at the core philosophy behind
    how it works. We've also set up a quick and easy environment for prototyping ideas
    and playing with visualizations. This environment will be assumed throughout the
    book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了什么是d3.js，并对它的工作背后的核心哲学进行了初步了解。我们还为原型设计和可视化玩耍设置了一个快速简便的环境。这个环境将在整本书中被假设。
- en: We've also gone through a simple example and created an animated histogram using
    some of the basics of `d3.js`. We found out about scales and axes, that the vertical
    axis is inverted, that any property defined as a function is recalculated for
    every data point, and that we use a combination of CSS and SVG to make things
    beautiful.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过一个简单的示例，使用`d3.js`的一些基础知识创建了一个动画直方图。我们了解到关于比例和坐标轴的知识，垂直坐标轴是反转的，任何定义为函数的属性都会为每个数据点重新计算，以及我们使用CSS和SVG的组合来使事物变得美观。
- en: Most of all, this chapter has given you the basic tools so that you can start
    playing with d3.js on your own. Tinkering is your friend.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，这一章为你提供了基本工具，让你可以自己开始玩d3.js。捣鼓是你的朋友。
