- en: Block Explorer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块浏览器
- en: In this chapter, let's build a block explorer that will allow us to interact
    with the blockchain. A block explorer is simply a user interface that will allow
    us to explore the data inside of the blockchain. It will allow us to search for
    a specific block, specific transaction, or specific address, and then display
    that particular information in a visually appealing format.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，让我们构建一个区块浏览器，它将允许我们与区块链进行交互。区块浏览器只是一个用户界面，它将允许我们探索区块链内部的数据。它将允许我们搜索特定的区块、特定的交易或特定的地址，然后以视觉上吸引人的格式显示特定的信息。
- en: The first thing that we'll do to build the block explorer is to add some new
    methods and endpoints to the blockchain, in order to search for the data. Then,
    let's add a frontend to the block explorer, so we can use it in the browser.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建区块浏览器的第一步是向区块链添加一些新的方法和端点，以便搜索数据。然后，让我们为区块浏览器添加一个前端，以便我们可以在浏览器中使用它。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a block explorer?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是区块浏览器？
- en: Defining the block explorer endpoints
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义区块浏览器端点
- en: Building the `getBlock`, `getTransaction`, and `getAddressData` methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建`getBlock`、`getTransaction`和`getAddressData`方法
- en: Building and testing `/block/:blockHash`, `/transaction/:transactionId`, and `/address/:address` endpoints
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和测试`/block/:blockHash`、`/transaction/:transactionId`和`/address/:address`端点
- en: Developing our block explorer's interface and testing it.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发我们的区块浏览器界面并对其进行测试。
- en: So, let's get started on building our block explorer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始构建我们的区块浏览器。
- en: What is a block explorer?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是区块浏览器？
- en: 'A block explorer is an online platform that allows you to navigate through
    the blockchain, searching for various things including addresses, blocks, transactions,
    and so on. For example, if you visit [https://www.blockchain.com/explorer](https://www.blockchain.com/explorer),
    you can see a block explorer utility for the Bitcoin and Ethereum blockchains,
    as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 区块浏览器是一个在线平台，允许您浏览区块链，搜索包括地址、区块、交易等各种内容。例如，如果您访问[https://www.blockchain.com/explorer](https://www.blockchain.com/explorer)，您可以看到比特币和以太坊区块链的区块浏览器实用程序，如下所示：
- en: '![](img/5baf74be-82e9-42eb-b497-9bac04387285.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5baf74be-82e9-42eb-b497-9bac04387285.png)'
- en: 'Inside of this block explorer, you can search the entire blockchain for a specific
    block, hash, or transaction, or any other piece of data that is required. The
    utility also displays results on an interface that''s easy to understand. For
    example, if we search for `Block #549897` in the block explorer, you''ll see all
    the details of that particular block, as seen in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个区块浏览器内，您可以搜索整个区块链以获取特定的区块、哈希或交易，或者任何其他所需的数据片段。该实用程序还在易于理解的界面上显示结果。例如，如果我们在区块浏览器中搜索`Block
    #549897`，您将看到该特定区块的所有细节，如下截图所示：'
- en: '![](img/66f3d303-52cf-44c6-bf65-355a9aa66818.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66f3d303-52cf-44c6-bf65-355a9aa66818.png)'
- en: This is exactly what we're going to build for our blockchain in this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们将在本章中为我们的区块链构建的内容。
- en: Defining the block explorer endpoints
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义区块浏览器端点
- en: 'In order for the block explorer to function correctly, we''ll need to query
    the blockchain for addresses, block hashes, and transaction IDs so that we can
    search for a particular parameter and get that particular piece of data in return.
    Consequently, the first step that we''ll need to carry out is to build a few more
    endpoints. To do this, lets proceed with the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使区块浏览器正常运行，我们需要查询区块链以获取地址、区块哈希和交易ID，以便我们可以搜索特定的参数并得到相应的数据。因此，我们需要执行的第一步是构建一些新的端点。为此，让我们继续以下步骤：
- en: 'Go to the `dev/networkNode.js` file and after the `/consensus` endpoint, let''s
    define the first endpoint of our block explorer, `/block/:blockHash`, as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`dev/networkNode.js`文件，在`/consensus`端点之后，让我们定义我们的区块浏览器的第一个端点`/block/:blockHash`，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A specific `blockHash` will be sent with this endpoint, which, as a result,
    will simply return to us the block that the input of `blockHash` corresponds to.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个端点发送一个特定的`blockHash`，结果将简单地返回与输入的`blockHash`对应的区块。
- en: 'The next endpoint that we''ll build will be `/transaction/:transactionId`.
    This is defined as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将构建的下一个端点将是`/transaction/:transactionId`。定义如下：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this endpoint, send a `transactionId`, and in the response, we should expect
    to get the correct transaction that this ID corresponds to.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个端点发送一个`transactionId`，作为回应，我们应该期望得到与该ID对应的正确交易。
- en: 'Finally, the third endpoint that we''ll build is `/address/:address`, which
    is defined as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将构建的第三个端点是`/address/:address`，定义如下：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this endpoint, we'll send a specific address, and in response, you should
    expect to get all of the transactions that correspond to this address—every time
    this specific address has either sent or received Bitcoin—in response. you'll
    also get to know the current balance of this address, which is how many Bitcoins
    this address currently owns.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个端点，我们将发送一个特定的地址，作为回应，您应该期望得到与该地址对应的所有交易——每当这个特定地址发送或接收比特币时——您还将了解到该地址的当前余额，即该地址当前拥有多少比特币。
- en: So, these are the three endpoints that you'll be building in this chapter. For
    each of these endpoints, we will build a specific method in the blockchain data
    structure that will query the blockchain for the correct piece of data. So, let's
    create methods that query the blockchain for a specific block hash, transaction,
    and address.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，您将构建这三个端点。对于这些端点中的每一个，我们将在区块链数据结构中构建一个特定的方法，该方法将查询区块链以获取正确的数据片段。因此，让我们创建查询区块链特定区块哈希、交易和地址的方法。
- en: Building the getBlock method
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建getBlock方法
- en: 'Let''s build a new method called `getBlock` that will take the given `blockHash`
    and search the entire blockchain for the block associated with that particular
    hash. In order to build the `getBlock` method, follow these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个名为`getBlock`的新方法，该方法将获取给定的`blockHash`并搜索整个区块链，以找到与该特定哈希相关联的区块。为了构建`getBlock`方法，请按照以下步骤进行：
- en: 'Go to the `dev/blockchain.js` file and after the `chainIsValid` method, define
    this new method as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`dev/blockchain.js`文件，在`chainIsValid`方法之后，定义如下新方法：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inside this method, we want to iterate through the entire blockchain and search
    for the block that has a particular `blockHash` value. Then, this method will
    return that specific block to us. We''re going to do all this with the help of
    a `for` loop:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个方法中，我们要遍历整个区块链，搜索具有特定`blockHash`值的区块。然后，该方法将把该特定区块返回给我们。我们将借助`for`循环来完成所有这些操作：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When defining the `for` loop, we cycle through every single `block` in the blockchain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义`for`循环时，我们遍历区块链中的每个区块。
- en: 'Next, inside the loop, mention the conditions with the help of `if` statements,
    as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在循环内，使用`if`语句来说明条件，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To signify that the correct block that we''re searching for is found, we''re
    going to use a flag. Let''s define this flag variable as has been highlighted
    in the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了表示我们正在寻找的正确区块已找到，我们将使用一个标志。让我们按照以下代码中的突出显示定义此标志变量：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As we iterate through all of the blocks in the chain, if we come across the
    correct block, we assign it to `correctBlock`. Let''s mention this condition as
    follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们遍历链中的所有区块时，如果找到正确的区块，我们将把它赋给`correctBlock`。让我们按照以下条件来说明：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, at the end of this method, we want to return the `correctBlock` as
    follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在此方法的末尾，我们要返回`correctBlock`，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Building the /block/:blockHash endpoint
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建`/block/:blockHash`端点
- en: 'Let''s use the `getBlock` method inside of `/block/:blockHash` endpoint to
    retrieve a specific block by its `blockHash`. Let''s follow these next steps to
    build the endpoint:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/block/:blockHash`端点内使用`getBlock`方法来通过`blockHash`检索特定区块。让我们按照以下步骤构建端点：
- en: 'The first thing that we want to do in this endpoint is to use the `blockHash` value
    that is sent with the `/block/:blockHash` request. We can access this `blockHash`
    on the `req.params` object. Go to the `dev/networkNode.js` file and in the `/block/:blockHash` endpoint
    that we defined previously, add the following highlighted code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此端点中，我们要做的第一件事是使用发送到`/block/:blockHash`请求的`blockHash`值。我们可以在`req.params`对象上访问此`blockHash`。转到`dev/networkNode.js`文件，并在先前定义的`/block/:blockHash`端点中添加以下突出显示的代码：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Essentially, when we hit the `/block/:blockHash` endpoint, we're accessing the
    hash value of a block present on a particular node in the network. We're also
    accessing the hash value using the `req.params` object, which will give us access
    to any value in the `/block/:blockHash` URL that has a colon in front of it. Consequently,
    when a user makes a request to this endpoint, they're going to send in a `blockHash`
    in the URL, and then we can grab that `blockHash` with the help of `req.params.blockHash`.
    We're then going to save that value inside the `blockHash` variable.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，当我们访问`/block/:blockHash`端点时，我们正在访问网络中特定节点上存在的区块的哈希值。我们还将使用`req.params`对象来访问哈希值，这将使我们能够访问`/block/:blockHash`
    URL中带有冒号的任何值。因此，当用户向此端点发出请求时，他们将在URL中发送一个`blockHash`，然后我们可以借助`req.params.blockHash`来获取该`blockHash`。然后，我们将保存该值在`blockHash`变量中。
- en: 'Next, inside the endpoint, we want to use the `getBlock` method that we created
    in the previous section. We''ll add that method to the endpoint, as highlighted
    in the following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在端点内，我们要使用在上一节中创建的`getBlock`方法。我们将在端点中添加该方法，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By this point in the code, the block that we're looking for should be present
    in the `correctBlock` variable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到了代码的这一点，我们正在寻找的区块应该存在于`correctBlock`变量中。
- en: 'Finally, send back the `correctBlock` variable as a response, so let''s add
    the following highlighted code to the endpoint:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`correctBlock`变量作为响应发送回去，因此让我们在端点中添加以下突出显示的代码：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is how we build the `/block/:blockHash` endpoint using the `getBlock` method.
    Now, let's test this endpoint and verify whether or not it's working properly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们使用`getBlock`方法构建`/block/:blockHash`端点的方式。现在，让我们测试此端点并验证其是否正常工作。
- en: Testing the /block/:blockHash endpoint
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试`/block/:blockHash`端点
- en: 'In order to test the `/block/:blockHash` endpoint, follow these steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试`/block/:blockHash`端点，请按照以下步骤进行：
- en: 'Let''s first check how many blocks are present in the blockchain. Go to the
    browser and type `localhost:3001/blockchain` in the address bar and then press
    *Enter*. You''ll see the single genesis block present inside of the blockchain,
    as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先检查区块链中有多少个区块。转到浏览器，输入`localhost:3001/blockchain`，然后按*Enter*。您将看到区块链中存在的单个创世区块，如下所示：
- en: '![](img/07ae3071-7127-4c90-abc0-4b25590ee71d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07ae3071-7127-4c90-abc0-4b25590ee71d.png)'
- en: 'You need to add a couple more blocks to this chain. To do this, go over to
    another tab in the browser, type `localhost:3001/mine`, and then press *Enter*.
    Using the same process, let''s generate one more block. We should now have three
    blocks inside the chain: one genesis block and the two blocks we just added.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要向此链中添加几个区块。要做到这一点，转到浏览器中的另一个标签页，输入`localhost:3001/mine`，然后按*Enter*。使用相同的过程，让我们生成一个更多的区块。现在我们应该在链中有三个区块：一个创世区块和我们刚刚添加的两个区块。
- en: 'In order to test the `/block/:blockHash` endpoint, let''s simply take the hash
    value of one of these blocks and use it to test the endpoint. Let''s copy the
    hash value of the third block in the chain, as in the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试`/block/:blockHash`端点，让我们简单地取其中一个区块的哈希值并用它来测试端点。让我们复制链中第三个区块的哈希值，如下截图所示：
- en: '![](img/df0bf9b7-fb4e-4fae-a841-8f93b5d4badf.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df0bf9b7-fb4e-4fae-a841-8f93b5d4badf.png)'
- en: 'Next, go to another tab in the browser. Type `localhost:3001/block` in the
    address bar and then paste the hash value that we copied directly after this URL.
    Take a look at the following screenshot for a better understanding:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到浏览器中的另一个标签页。在地址栏中键入`localhost:3001/block`，然后粘贴我们直接复制的哈希值。查看以下截图以更好地理解：
- en: '![](img/dac61c7b-8feb-4906-90fa-6023e74418f0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dac61c7b-8feb-4906-90fa-6023e74418f0.png)'
- en: 'Now, we know that the hash that we''ve used is present in the third block in
    the chain. So, we should expect to get the third block returned to us as a result
    of running the `/block/:blockHash` endpoint. Now press *Enter* and the correct
    block should be returned to us as output:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们知道我们使用的哈希存在于链中的第三个区块中。因此，我们应该期望通过运行`/block/:blockHash`端点来返回第三个区块。现在按*Enter*，正确的区块应该作为输出返回给我们：
- en: '![](img/2ce260e8-54bf-4db5-b9cd-dd8ebb5ca4ce.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ce260e8-54bf-4db5-b9cd-dd8ebb5ca4ce.png)'
- en: From the preceding screenshot, we can observe that the correct block is returned
    to us. The returned block consists of the hash value that we used in the `/block/:blockHash`
    endpoint to search for the block.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中，我们可以观察到正确的区块已经返回给我们。返回的区块包括我们在`/block/:blockHash`端点中使用的哈希值来搜索区块。
- en: In a similar manner, you can now try searching for another block from the chain
    using the endpoint and the hash value of that particular block.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，您现在可以尝试使用端点和特定区块的哈希值来搜索链中的另一个区块。
- en: 'Now, if we were to send in the wrong hash or a hash that doesn''t exist with
    the endpoint, then we should expect to get null returned to us as output, instead
    of the block being returned. Let''s try this by sending the wrong hash value to
    the `/block/:blockHash` endpoint. In the address bar of the browser, type `localhost:3001/block`,
    then add a fake hash value to it and press *Enter*. The following output should
    be returned:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们发送错误的哈希或在端点中不存在的哈希，我们应该期望得到null作为输出，而不是返回区块。让我们尝试通过向`/block/:blockHash`端点发送错误的哈希值来验证这一点。在浏览器的地址栏中，键入`localhost:3001/block`，然后添加一个虚假的哈希值并按*Enter*。应返回以下输出：
- en: '![](img/cbfea903-4249-41e4-9bc0-d02b67b8ebb3.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbfea903-4249-41e4-9bc0-d02b67b8ebb3.png)'
- en: From the preceding screenshot, you can observe that `block` is equal to `null`.
    This means that the hash value used to search the block doesn't exist in the chain.
    Consequently, from the test, we can conclude that the `/block/:blockHash` endpoint
    works perfectly and as expected.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中，您可以观察到`block`等于`null`。这意味着用于搜索区块的哈希值在链中不存在。因此，从测试中，我们可以得出结论，`/block/:blockHash`端点完全按预期工作。
- en: Defining the getTransaction method
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义getTransaction方法
- en: Let's add a new method on the blockchain data structure called `getTransaction`.
    This will allow us to get a specific transaction by passing `transactionId`. We'll
    use this new method inside of the `/transaction/:transactionId` endpoint. So,
    let's get started!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在区块链数据结构上添加一个名为`getTransaction`的新方法。这将允许我们通过传递`transactionId`来获取特定交易。我们将在`/transaction/:transactionId`端点内使用这个新方法。所以，让我们开始吧！
- en: 'Go to the `dev/blockchain.js` file, and after the `getBlock` method, define
    the `getTransaction` as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`dev/blockchain.js`文件，在`getBlock`方法之后，定义`getTransaction`如下：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method is very similar to the `getBlock` method. Here, we'll iterate through
    the entire chain and will set a flag equal to the correct transaction that we
    are looking for.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法与`getBlock`方法非常相似。在这里，我们将遍历整个链，并将一个标志设置为我们正在寻找的正确交易。
- en: 'The next step in building this method will be to iterate through the entire
    blockchain. For this, use the `forEach` loop as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建此方法的下一步是遍历整个区块链。为此，使用`forEach`循环如下所示：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since, in this method, we''re looking for transactions, we need to iterate
    through every single transaction on every block in the chain. Therefore, we need
    to add another `for` loop inside the preceding `for` loop:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于在这个方法中，我们正在寻找交易，我们需要遍历链中每个区块上的每个交易。因此，我们需要在前面的`for`循环内添加另一个`for`循环：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have access to every single transaction on the blockchain, we simply
    need to compare the `transactionId` of every transaction with the `transactionId`
    that we''re looking for. When the two match, then we know we have found the correct
    transaction. Let''s define this condition inside the loop as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以访问区块链上的每个交易，我们只需要将每个交易的`transactionId`与我们正在寻找的`transactionId`进行比较。当两者匹配时，我们就知道找到了正确的交易。让我们在循环内定义这个条件如下：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, just like we did inside of the `getBlock` method, we want to set a flag
    to indicate that we have found the correct transaction inside the `getTransaction`
    method. Consequently, at the top of both of the loops, define the flag variable
    and use it as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，就像我们在`getBlock`方法内部所做的那样，我们希望在`getTransaction`方法内部设置一个标志，以指示我们已经找到了正确的交易。因此，在两个循环的顶部，定义标志变量并如下使用它：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, just to make this method a little bit more useful, we''re also going to
    send back the block in which we found the transaction we were hunting for. To
    do this, define another flag as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了使这个方法更有用一些，我们还将发送回我们找到所需交易的区块。为此，定义另一个标志如下：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we then find the transaction we''re looking for, set the condition as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们找到了正在寻找的交易，将条件设置如下：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And then, finally, the last thing to do is to return both variables as output.
    Let''s define this return condition as follows, outside of both the loops:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要做的最后一件事就是将两个变量作为输出返回。让我们在两个循环之外定义这个返回条件如下：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Building the /transaction/:transactionId endpoint
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建/transaction/:transactionId端点
- en: 'Let''s build the `/transaction/:transactionId` endpoint by using the `getTransaction`
    method that we built in the previous section. Let''s begin:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用在上一节中构建的`getTransaction`方法来构建`/transaction/:transactionId`端点。让我们开始吧：
- en: 'The first thing to do inside of this endpoint is to store the transaction ID
    sent as a request parameter. Let''s store that in a `transactionId` variable, as
    follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个端点内部要做的第一件事是存储作为请求参数发送的交易ID。让我们将其存储在一个`transactionId`变量中，如下所示：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next thing to do is use the `getTransaction` method inside of the endpoint.
    To do this, add the following to the preceding code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是在端点内部使用`getTransaction`方法。为此，请将以下内容添加到前面的代码中：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'From the `getTransaction` method, we get an object returned to us that has
    the transaction we''re looking for, and the block that the transaction is in.
    We want to store this data in a variable called `transactionData`, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`getTransaction`方法中，我们得到一个包含我们正在寻找的交易和该交易所在的区块的对象。我们希望将这些数据存储在一个名为`transactionData`的变量中，如下所示：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we want to send back a simple response with the `transactionData` variable
    in it:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们希望发送一个简单的响应，其中包含`transactionData`变量：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: And this is how we build the `/transaction/:transactionId` endpoint.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们构建`/transaction/:transactionId`端点的方式。
- en: Testing the /transaction/:transactionId endpoint
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试`/transaction/:transactionId`端点
- en: Now, it's time to test the `/transaction/:transactionId` endpoint to verify
    that it works as expected. However, before doing that, we need to add some transaction
    data and blocks to the blockchain.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候测试`/transaction/:transactionId`端点，以验证它是否按预期工作。但在这之前，我们需要向区块链添加一些交易数据和区块。
- en: Adding new transactions and blocks to the blockchain
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向区块链添加新的交易和区块
- en: 'Similar to what we did in the previous section, first, let''s add some transactions
    and blocks to the blockchain:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一部分类似，首先让我们向区块链添加一些交易和区块：
- en: Therefore, head over to Postman and hit the `localhost:3001/transaction/broadcast`
    endpoint to send the transaction to all the nodes in the network.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，转到Postman，点击`localhost:3001/transaction/broadcast`端点，将交易发送到网络中的所有节点。
- en: 'Now, send a couple of example transactions to the network. You can create the
    transactions as seen in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向网络发送一些示例交易。您可以按照以下截图中所示的方式创建交易：
- en: '![](img/29aa69ad-2785-4e2d-a2e8-7f039885ffdf.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29aa69ad-2785-4e2d-a2e8-7f039885ffdf.png)'
- en: 'After adding the transaction data, click on the Send button to send the transaction
    to the network. Similarly, you can add one more transaction of `"amount": 200`
    and send that to the network.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '添加交易数据后，单击发送按钮将交易发送到网络。同样，您可以添加另一笔`"amount": 200`的交易并将其发送到网络。'
- en: 'Next, mine a new block so that we can add these transactions into the blockchain. In
    the browser, open a tab and type `localhost:3001/mine` into the address bar. The
    new block will then be created:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，挖掘一个新的区块，以便将这些交易添加到区块链中。在浏览器中打开一个标签，输入`localhost:3001/mine`到地址栏。然后将创建新的区块：
- en: '![](img/0a0a8015-acf5-462c-886c-f45802e60ed5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a0a8015-acf5-462c-886c-f45802e60ed5.png)'
- en: 'Next, send another transaction of `"amount": 300` and send this to the network
    using the previously mentioned process. Once the transaction has been sent, let''s
    mine a block again to add the transaction to the blockchain:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，发送另一个“amount”: 300的交易，并使用先前提到的过程将其发送到网络。一旦交易发送完毕，让我们再次挖掘一个区块，将交易添加到区块链中：'
- en: '![](img/6f6e4015-5fd2-4c53-85b9-4051ab8b2b7d.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f6e4015-5fd2-4c53-85b9-4051ab8b2b7d.png)'
- en: 'Now, add two more transactions, with `"amount":` values of `400` and `500`,
    and send those to the network. Lastly, mine a block again to add the transactions
    that we created now to the blockchain:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，添加另外两笔交易，分别为`"amount": 400`和`500`，并将其发送到网络。最后，再次挖掘一个区块，将我们现在创建的交易添加到区块链中：'
- en: '![](img/2af27f07-d285-48b6-ab63-e86236a03fef.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2af27f07-d285-48b6-ab63-e86236a03fef.png)'
- en: Now, if you go to `localhost:3001/blockchain`, you'll see all of the blocks
    and transactions that we just added to the blockchain.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您转到`localhost:3001/blockchain`，您将看到我们刚刚添加到区块链中的所有区块和交易。
- en: Testing the endpoint
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点
- en: 'After adding transactions and blocks to the blockchain, let''s test the `/transaction/:transactionId`
    endpoint:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在向区块链添加交易和区块后，让我们测试`/transaction/:transactionId`端点：
- en: 'Go to the browser and open another tab. In the address bar, type `localhost:3001/transaction/`
    and then append a `transactionId` value from any block present in the blockchain to
    the end of this URL and press *Enter*. Take a look at the following screenshot
    for reference:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到浏览器，打开另一个标签。在地址栏中输入`localhost:3001/transaction/`，然后在URL的末尾添加一个来自区块链中任何一个区块的`transactionId`值，然后按Enter。参考以下截图：
- en: '![](img/22e3aba2-af6c-417c-a6f1-fba0ea3db39e.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22e3aba2-af6c-417c-a6f1-fba0ea3db39e.png)'
- en: 'Once you run this endpoint, the following output should be returned:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此端点后，应返回以下输出：
- en: '![](img/6ce1d2b7-fce4-4a00-a821-e489f7289d30.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ce1d2b7-fce4-4a00-a821-e489f7289d30.png)'
- en: In the preceding screenshot, you can observe that we had the transaction, associated
    with the `transactionId` that we passed with endpoint, returned as output. We
    also had the block returned, which consisted of the particular `transactionId`
    that we were looking for.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到我们使用端点传递的`transactionId`关联的交易作为输出。我们还返回了包含我们正在寻找的特定`transactionId`的区块。
- en: 'Now, carry out another example with a `transactionId` which doesn''t exist
    in the blockchain. To do this, go to the browser and type `localhost:3001/transaction/` into
    the address bar. After doing this, add a random hash value to the endpoint. Take
    a look at the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用一个在区块链中不存在的`transactionId`进行另一个示例。为此，转到浏览器，输入`localhost:3001/transaction/`到地址栏。在这之后，向端点添加一个随机的哈希值。参考以下截图：
- en: '![](img/8d6c1399-a364-4f23-a5bf-20e7af95cc1c.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d6c1399-a364-4f23-a5bf-20e7af95cc1c.png)'
- en: 'When you run this endpoint you will get the value null returned as output,
    as seen in the following screenshot:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此端点时，您将得到值为null的输出，如下截图所示：
- en: '![](img/e34a4032-d60b-4bd7-98e7-7bf9ea0e20c0.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e34a4032-d60b-4bd7-98e7-7bf9ea0e20c0.png)'
- en: The null value returned as seen in the preceding screenshot, indicates to us
    that this `transactionId` does not exist in the blockchain.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中返回的空值告诉我们，这个`transactionId`在区块链中不存在。
- en: From the test, we can conclude that the `/transaction/:transactionId` endpoint
    and the `getTransaction` method are working just as they should.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从测试中，我们可以得出结论，`/transaction/:transactionId`端点和`getTransaction`方法都正常工作。
- en: Building the getAddressData method
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建`getAddressData`方法
- en: 'We''ll build a new method on the blockchain prototype, called `getAddressData`,
    and we''ll use this method inside of the `/address/:address` endpoint to fetch
    the data for a specific address that we are searching for:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在区块链原型上构建一个名为`getAddressData`的新方法，并在`/address/:address`端点内部使用这个方法，以获取我们正在搜索的特定地址的数据：
- en: 'Let''s build this new method inside of the `blockchain.js` file. After the
    `getTransaction` method, define the `getAddressData` method as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`blockchain.js`文件中构建这个新方法。在`getTransaction`方法之后，定义`getAddressData`方法如下：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, the first thing that we want to do inside of this method is to get all
    of the transactions that are associated with the address and put them into a single
    array. Let''s define that array now:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在这个方法内部，我们要做的第一件事是获取与该地址相关的所有交易，并将它们放入一个单一的数组中。让我们现在定义这个数组：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we want to cycle through all of the transactions inside of the blockchain.
    If any of those blocks have the address we''re searching for as the recipient
    or sender in a transaction, then we want to add all those transactions into the
    `addressTransactions` array. Let''s define this condition as follows. The first
    step is cycling through all of the blocks on the blockchain:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们要循环遍历区块链中的所有交易。如果任何这些区块中的交易的接收者或发送者是我们正在搜索的地址，那么我们要将所有这些交易添加到`addressTransactions`数组中。让我们定义这个条件如下。第一步是循环遍历区块链上的所有区块：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, in order to access the transactions that are inside the blockchain, we
    need to cycle through all of the transactions that are present on each block.
    So, inside of the `forEach` loop, we will have to define another `forEach` loop
    as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了访问区块链中的交易，我们需要循环遍历每个区块上存在的所有交易。因此，在`forEach`循环内部，我们将不得不定义另一个`forEach`循环，如下所示：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, inside of the `forEach` loop that we defined just now, we have access
    to every single transaction that is on the blockchain. We just want to test each
    transaction to see if the sender or the recipient address matches with the address
    that we''re searching for:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们刚刚定义的`forEach`循环内部，我们可以访问区块链上的每一笔交易。我们只是想测试每笔交易，看看发送者或接收者地址是否与我们正在搜索的地址匹配：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: At this point in the code, we are cycling through all of the transactions inside
    of our blockchain. If we come across a transaction in which the sender address
    or the recipient address equals the address we are looking for, then we push that
    transaction into the `addressTransactions` array. So, after both `forEach` loop
    has completed, we'll have an array that has all of the transactions associated
    with the address that we're are searching for inside of the array.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的这一点上，我们正在循环遍历我们区块链中的所有交易。如果我们遇到一个发送者地址或接收者地址等于我们正在寻找的地址的交易，那么我们将该交易推送到`addressTransactions`数组中。因此，在两个`forEach`循环都完成后，我们将得到一个包含与我们正在搜索的地址相关的所有交易的数组。
- en: Knowing the balance
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解余额
- en: 'The next thing that we want to do is to cycle through the `addressTransactions`
    array to figure out what the balance of the address that we are searching for is. In
    order to know the balance:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要做的是循环遍历`addressTransactions`数组，以确定我们正在搜索的地址的余额。为了知道余额：
- en: 'Let''s first define a variable `balance` as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先定义一个名为`balance`的变量：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we want to cycle through all of the transactions inside of the `addressTransactions`
    array. We will do that with the help of the `forEach` loop as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要循环遍历`addressTransactions`数组中的所有交易。我们将使用`forEach`循环来做到这一点，如下所示：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Inside the loop, mention the conditions with the help of `if` and `else-if`
    statements, as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中，使用`if`和`else-if`语句提到条件，如下所示：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, at the end of the `forEach` loop, we want to return an object that
    has a property of `addressTransactions` that matches our `addressTransactions`
    array, and the same match for `addressBalance`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`forEach`循环结束时，我们要返回一个具有`addressTransactions`属性的对象，该属性与我们的`addressTransactions`数组匹配，并且`addressBalance`也是如此：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: And with that, we're done building the `getAddressData` method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就完成了`getAddressData`方法的构建。
- en: Developing the /address/:address endpoint
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发/address/:address端点
- en: 'Now, let''s build the `/address/:address` endpoint and we''ll use the `getAddressData`
    method inside of this endpoint. The `/address/:address` endpoint will be very
    similar to the `/block/:blockHash` and `/transaction/:transactionId` endpoints,
    so you shouldn''t find it too challenging:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建`/address/:address`端点，并在此端点内部使用`getAddressData`方法。`/address/:address`端点将与`/block/:blockHash`和`/transaction/:transactionId`端点非常相似，因此你不应该觉得太具有挑战性：
- en: 'The first thing that we want to do inside of the endpoint is to store the address
    in a variable:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端点内部，我们要做的第一件事是将地址存储在一个变量中：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The next thing that we want to do is use the `getAddressData` method to get
    all of the data for the given address. In order to do that, we will add the following
    highlighted code to the endpoint:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的下一件事是使用`getAddressData`方法获取给定地址的所有数据。为了做到这一点，我们将在端点中添加以下突出显示的代码：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'From this method, we get an object returned to us that has the `addressTransactions`
    and the `addressBalance` in it. We want to store this data in a variable as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过这个方法，我们得到一个返回给我们的对象，其中包含`addressTransactions`和`addressBalance`。我们要将这些数据存储在一个变量中，如下所示：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, finally, we want to return the response that contains this data as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们要返回包含这些数据的响应，如下所示：
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is how we build the `/address/:address` endpoint. Now, let's test this
    endpoint to check that it's working well.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们构建`/address/:address`端点的方式。现在，让我们测试这个端点，以确保它能正常工作。
- en: Testing the /address/:address endpoint
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试/address/:address端点
- en: 'In order to test the endpoint, we need to add some transaction data to the
    blockchain, let''s follow these steps to do that:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试端点，我们需要向区块链添加一些交易数据，让我们按照以下步骤来做：
- en: Go to the browser and explore the blockchain that's present on `localhost:3001`.
    You'll observe that there's only one block present here. So, let's add more transaction
    data and blocks to it.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到浏览器，探索`localhost:3001`上存在的区块链。你会发现这里只有一个区块。所以，让我们向其中添加更多的交易数据和区块。
- en: To do this, go to Postman and send the transaction data to `localhost:3001/transaction/broadcast`.
    While creating these transactions, we want to make sure that we keep track of
    a specific address so that we can check for it when we test the `/address/:address`
    endpoint. In order to keep track of this specific address, let's change the first
    three letters of one of the addresses to JEN.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，转到Postman，并将交易数据发送到`localhost:3001/transaction/broadcast`。在创建这些交易时，我们要确保跟踪一个特定的地址，以便在测试`/address/:address`端点时进行检查。为了跟踪这个特定的地址，让我们将一个地址的前三个字母改为JEN。
- en: 'Let''s create the first transaction. Set the `"amount":` value to `100`, and
    add `JEN` to the sender''s address for this transaction:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建第一笔交易。将`"amount":`值设置为`100`，并在此交易的发送者地址中添加`JEN`：
- en: '![](img/fccee6a3-b60d-4ba7-bcce-a543fd7b824e.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fccee6a3-b60d-4ba7-bcce-a543fd7b824e.png)'
- en: 'Then, click on Send to send the transaction to node `3001`. Then, on similar
    lines, make another transaction for `amount: 200` and this time, add `JEN` to
    the recipient''s address, and keep the sender''s address as a random hash:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后，点击发送，将交易发送到节点`3001`。然后，按照类似的步骤，为`amount: 200`进行另一笔交易，这次将`JEN`添加到接收者的地址，并将发送者的地址保持为随机哈希值：'
- en: '![](img/c226b9dc-091b-4f5f-bc1f-eff848a816ab.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c226b9dc-091b-4f5f-bc1f-eff848a816ab.png)'
- en: 'Now, mine a block to add these transactions to the blockchain. Go to `localhost:3001/mine`
    and mine a new block in the chain as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，挖掘一个区块，将这些交易添加到区块链中。转到`localhost:3001/mine`，并按照以下方式在链中挖掘一个新的区块：
- en: '![](img/5b076c60-a2cc-4e30-9e60-22294cbc42a6.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b076c60-a2cc-4e30-9e60-22294cbc42a6.png)'
- en: Similarly, you can make a couple more transactions by changing the amount value
    and interchanging the sender's and recipient's addresses, with `JEN` present in
    the address. Once a few transactions are created, mine a block to add these new
    transactions to the blockchain. Then, create new transactions again, and give
    them different amounts by interchanging the sender's and recipient's addresses.
    Again, mine a new block to add the transactions to the blockchain.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，你可以通过改变金额值和交换发送者和接收者的地址来进行更多的交易，其中地址中包含`JEN`。一旦创建了一些交易，就挖掘一个区块，将这些新交易添加到区块链中。然后，再次创建新的交易，并通过交换发送者和接收者的地址给它们不同的金额。再次挖掘一个新的区块，将交易添加到区块链中。
- en: You can then explore the whole blockchain, with the new transactions and blocks
    that we added to it, by going to `localhost:3001/blockchain`. You'll be presented
    with a bunch of blocks and transactions inside the blockchain.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过访问`localhost:3001/blockchain`来探索整个区块链，其中包括我们添加的新交易和区块。你将看到一堆区块和区块链内的交易。
- en: 'Now, in order to test the `/address/:address` endpoint, let''s follow these
    steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试`/address/:address`端点，让我们按照以下步骤进行：
- en: Head over to the browser, and hit the `localhost:3001/address/` endpoint in
    a new tab.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到浏览器，在新标签页中输入`localhost:3001/address/`端点。
- en: 'Then, copy one of the addresses from the transactions that we just added to
    the blockchain and paste it in the endpoint. Take a look at the following screenshot
    for reference:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从我们刚刚添加到区块链中的交易中复制一个地址，并将其粘贴到端点中。参考下面的截图：
- en: '![](img/8cd99846-c3d7-4fc7-99fa-736b300ea724.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cd99846-c3d7-4fc7-99fa-736b300ea724.png)'
- en: 'Now, when we run this endpoint, we should see all the transactions associated
    with that particular address, along with the Bitcoin balance of that particular
    address. Take a look at the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们运行这个端点时，我们应该看到与该特定地址相关的所有交易，以及该特定地址的比特币余额。看一下下面的截图：
- en: '![](img/884fb442-2cc3-4913-8484-5ed4953f35d9.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/884fb442-2cc3-4913-8484-5ed4953f35d9.png)'
- en: 'In the preceding screenshot, we get the `addressData` property returned, which
    consists of the `addressTransactions` array and the `addressBalance` property.
    The `addressTransactions` array consists of all the transactions associated with
    the address that we mentioned in the endpoint. In addition, the `addressBalance`
    property consists of the balance of Bitcoins of the address that we mentioned
    in the endpoint:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们得到了`addressData`属性的返回，其中包括`addressTransactions`数组和`addressBalance`属性。`addressTransactions`数组包括与我们在端点中提到的地址相关的所有交易。此外，`addressBalance`属性包括我们在端点中提到的地址的比特币余额：
- en: '![](img/7f480b2b-6a5b-4407-a9c2-873c926051a2.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f480b2b-6a5b-4407-a9c2-873c926051a2.png)'
- en: Next, you can try to check the balance of the node address by copying the recipient's
    address of the mining reward transactions and pasting it in the `/address/:address`
    endpoint, as we did for the previous example.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以尝试通过复制挖矿奖励交易的接收者地址，并将其粘贴到`/address/:address`端点中，来检查节点地址的余额，就像我们在上一个例子中所做的那样。
- en: After running this endpoint, you'll see the balance of mining reward transactions.
    Try implementing many other similar examples to get a clear understanding of how
    the `/address/:address` endpoint works.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行这个端点后，你将看到挖矿奖励交易的余额。尝试实现许多其他类似的例子，以更清楚地了解`/address/:address`端点的工作原理。
- en: 'Another example you can try to implement is to pass an address that doesn''t
    exist in the blockchain. You will get the following response returned:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个你可以尝试实现的例子是传递一个在区块链中不存在的地址。你将会得到以下返回的响应：
- en: '![](img/d67a48d1-03c0-431a-8ef4-11eb567a95ec.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d67a48d1-03c0-431a-8ef4-11eb567a95ec.png)'
- en: From the preceding screenshot, we can observe that the `addressTransactions`
    array is empty, as there are no transactions associated with the nonexistent address
    that we had as input. Furthermore, the `addressBalance` value for the nonexistent address
    is `0`. Consequently, we can conclude from the test that the `/address/:address`
    endpoint is working just as it should.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以观察到`addressTransactions`数组为空，因为与我们输入的不存在的地址相关联的交易不存在。此外，不存在地址的`addressBalance`值为`0`。因此，我们可以从测试中得出结论，即`/address/:address`端点的工作方式正如它应该。
- en: Adding the block explorer file
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加区块浏览器文件
- en: Let's understand how to set up the block explorer frontend. The block explorer
    will be a user interface with which we can interact with the blockchain from the
    browser. In order to build this user interface and make it functional, we need
    to use HTML, CSS, and JavaScript.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解如何设置区块浏览器前端。区块浏览器将是一个用户界面，我们可以通过浏览器与区块链进行交互。为了构建这个用户界面并使其功能正常，我们需要使用HTML、CSS和JavaScript。
- en: Now, instead of building all of the frontend by yourself, you can find an entire
    prebuilt frontend at the following link: [https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html](https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html).
    We're not building the entire frontend in this section, because that's not the focus
    of this book.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您不必自己构建所有的前端，您可以在以下链接找到一个完整的预构建前端：[https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html](https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html)。我们在本节中没有构建整个前端，因为这不是本书的重点。
- en: To build the frontend, all you have to do is copy the file from the link provided
    and add that to the project's file structure. Now, go to the `dev` folder and
    create a new folder inside it, called `block-explorer`. Inside this `block-explorer`
    folder, create a file called `index.html`, into which you need to paste the supplied
    code for the frontend and then save the file. You'll get a quick overview of what
    this frontend code consists of and how the code functions in the next section.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建前端，您只需复制提供的链接中的文件并将其添加到项目的文件结构中。现在，转到`dev`文件夹并在其中创建一个名为`block-explorer`的新文件夹。在这个`block-explorer`文件夹内，创建一个名为`index.html`的文件，然后将提供的前端代码粘贴到其中并保存文件。您将在下一节中快速了解这个前端代码包含什么以及代码在哪里起作用。
- en: Building the /block-explorer endpoint
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建`/block-explorer`端点
- en: 'Let''s build an endpoint that will retrieve the `block-explorer` file for us:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个端点，用于检索`block-explorer`文件：
- en: 'Go to the `dev/networkNode.js` file, and in here, create a new endpoint that will
    send this file to us. Define the endpoint as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`dev/networkNode.js`文件，在这里，创建一个新的端点，将向我们发送这个文件。定义端点如下：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, inside of this endpoint, all we want to do is send back the `index.html`
    file to whoever called this endpoint:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在这个端点内，我们想做的就是将`index.html`文件发送回给调用这个端点的人：
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You must have observed in the previous sections that we usually use `res.json`,
    which is a way to send JSON data. However, in this endpoint, we want to send the
    whole file, so we''ll use the `res.sendFile` method instead. Note that in the
    preceding code, we used `{ root: __dirname }`. This code term indicates that we
    should look into the directory in which the project is stored, and search in there for
    the file with the `/block-explorer/index.html` path. This is why we added this
    option to the endpoint as a second parameter, and this is how we build an endpoint
    to send the `index.html` file.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的部分中，您可能已经注意到我们通常使用`res.json`，这是发送JSON数据的一种方式。然而，在这个端点中，我们想要发送整个文件，所以我们将使用`res.sendFile`方法。请注意，在前面的代码中，我们使用了`{
    root: __dirname }`。这段代码表示我们应该查看项目存储的目录，并在其中查找具有`/block-explorer/index.html`路径的文件。这就是为什么我们将此选项作为第二个参数添加到端点中的原因，也是我们如何构建一个发送`index.html`文件的端点。'
- en: 'Next, save the `networkNode.js` file and verify whether this endpoint works
    by hitting `localhost:3001/block-explorer` in the browser. You will then be presented
    with the block explorer frontend, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，保存`networkNode.js`文件，并通过在浏览器中访问`localhost:3001/block-explorer`来验证这个端点是否有效。然后，您将看到区块浏览器的前端，如下所示：
- en: '![](img/45b96e5c-3143-4922-be7d-573ae6a1cc22.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45b96e5c-3143-4922-be7d-573ae6a1cc22.png)'
- en: Everything that you see here in this frontend is contained within the `index.html`
    file that we just created.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您在这个前端中看到的所有内容都包含在我们刚刚创建的`index.html`文件中。
- en: Block explorer file explanation
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区块浏览器文件说明
- en: In this section, we're simply going to walk through the `index.html` file that
    we created in the previous section. We'll do this to gain a better understanding
    of what is going on. So, let's get started.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简单地浏览一下我们在上一节中创建的`index.html`文件。我们将这样做是为了更好地理解发生了什么。所以，让我们开始吧。
- en: Inside the `index.html` file, we have all of the HTML and JavaScript code to
    give the necessary functionality to the block explorer. This code also allows
    us to hit the API, and lastly, we just have some CSS and styles, which make everything
    look nice in the browser.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`文件中，我们有所有的HTML和JavaScript代码，为区块浏览器提供必要的功能。这段代码还允许我们访问API，最后，我们只是有一些CSS和样式，使一切在浏览器中看起来很好。
- en: 'The code begins by importing a couple of libraries, such as `angular.js`, to
    hit the API, along with jQuery, Bootstrap, and some Bootstrap styles to make everything
    functional and aesthetically pleasing:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先导入了一些库，比如`angular.js`，用于访问API，还有jQuery、Bootstrap和一些Bootstrap样式，使一切功能正常且美观：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we have the body of the HTML model, which consists of the block explorer title:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有HTML模型的主体，其中包括区块浏览器的标题：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, we have a text input form:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个文本输入表单：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, we have a `select` input with three options in it: `Block Hash`, `Transaction
    ID`, and `Address`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个`select`输入，其中包含三个选项：`区块哈希`、`交易ID`和`地址`：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To use this page, let''s enter either a Block Hash, Transaction ID, or Address
    into the text field, and then select which one we''re looking for from the drop-down
    menu, as seen in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此页面，让我们在文本字段中输入块哈希、交易ID或地址，然后从下拉菜单中选择我们要查找的内容，如下截图所示：
- en: '![](img/2174b88c-b631-43d0-b652-89344466b170.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2174b88c-b631-43d0-b652-89344466b170.png)'
- en: Lastly, in the HTML code, we just have some tables that will display all of
    our data for us once we have some data from the blockchain.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在HTML代码中，一旦我们从区块链中获得了一些数据，我们只需有一些表格来显示所有的数据。
- en: 'Furthermore, we also have some JavaScript code in our `index.html` file. In
    this JavaScript code, we use Angular to make the calls to our API:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的`index.html`文件中还有一些JavaScript代码。在这个JavaScript代码中，我们使用Angular来调用我们的API：
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then we have a method where we hit the `/block/:blockHash` endpoint whenever
    we select the Block Hash option:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个方法，当我们选择“块哈希”选项时，我们会命中`/block/:blockHash`端点：
- en: '[PRE44]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Similarly, we have the method for the `/transaction/:transactionId` endpoint:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们还有`/transaction/:transactionId`端点的方法：
- en: '[PRE45]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We also have the method for the `/address/:address` endpoint:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有`/address/:address`端点的方法：
- en: '[PRE46]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Throughout the rest of this JavaScript, we just have a little bit more functionality
    and then we have the CSS styles towards the end of the code. Consequently, this
    code is contained in the `index.html` file. If you want to dig a little bit deeper
    into this to gain a clearer understanding, feel free to do so. You can also customize
    it however you would like to.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的JavaScript代码中，我们只有一点点更多的功能，然后在代码的最后有CSS样式。因此，这段代码包含在`index.html`文件中。如果您想深入了解，以获得更清晰的理解，可以随意这样做。您也可以根据自己的喜好进行自定义。
- en: Then you press Search, and if the specified data exists in the blockchain, a
    table will be displayed that will show all of that data. If the data doesn't exist
    on our blockchain, you will get the result that no data was found. This is how
    the block explorer frontend will work.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击搜索，如果指定的数据存在于区块链中，将显示一个表格，其中将显示所有这些数据。如果我们的区块链上不存在数据，您将得到未找到数据的结果。这就是区块浏览器前端的工作原理。
- en: At this point, we have built an entire block explorer frontend, and we have
    the backend of the block explorer—the three endpoints that we just created—in
    order to search through the entire blockchain.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经构建了一个完整的区块浏览器前端，并且我们有区块浏览器的后端——我们刚刚创建的三个端点，以便搜索整个区块链。
- en: In the next section, we're going to test the block explorer to make sure that
    it works perfectly.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将测试区块浏览器，以确保它完美地工作。
- en: Testing our block explorer
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的区块浏览器
- en: 'In this section, we''re going to test the block explorer to make sure that
    it works correctly, and also to make sure that all endpoints and methods that
    we created in the previous chapter also work correctly. If the block explorer
    works, then we already know that the entire blockchain is also working correctly
    and is running on the decentralized blockchain network, so everything is wrapping
    up nicely now as we enter the final section of this chapter. Consequently, this
    is the last test that we will be doing. Let''s follow these steps now to test
    the block explorer:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将测试区块浏览器，以确保其正常工作，并确保我们在上一章中创建的所有端点和方法也能正常工作。如果区块浏览器正常工作，那么我们已经知道整个区块链也在去中心化的区块链网络上正常运行，所以当我们进入本章的最后一部分时，一切都很顺利地结束了。因此，这是我们将要进行的最后一次测试。现在让我们按照以下步骤来测试区块浏览器：
- en: In order to test the block explorer, we should ensure that we have all five
    of the nodes running.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试区块浏览器，我们应该确保我们有五个节点都在运行。
- en: Next, head over to the browser and open up the block explorer by going to `localhost:3003/block-explorer`. You
    can actually go to a block explorer that's hosted on any of the nodes in the network,
    because the blockchain is hosted across the entire network.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到浏览器，通过`localhost:3003/block-explorer`打开区块浏览器。实际上，您可以转到网络中任何一个节点上托管的区块浏览器，因为整个区块链是托管在整个网络上的。
- en: Now, in order to test the block explorer, we need to add some data to the blockchain.
    To add data to the blockchain, we're just going to create a lot of transactions
    and create some new blocks similar to what we did in the previous sections. You
    can refer back to the previous chapters for a quick review on how to add transactions
    and blocks to the blockchain.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了测试区块浏览器，我们需要向区块链添加一些数据。要向区块链添加数据，我们只需创建大量交易并创建一些新的区块，类似于我们在前几节中所做的。您可以参考前几章，快速回顾如何向区块链添加交易和区块。
- en: 'After adding the data, we can now test the block explorer. Let''s first get
    a block by searching for its block hash. Let''s select the Block Hash option:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加数据之后，我们现在可以测试区块浏览器。让我们首先通过搜索块哈希来获取一个块。让我们选择“块哈希”选项：
- en: '![](img/a465bd88-f866-497e-afcb-2f18883956ed.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a465bd88-f866-497e-afcb-2f18883956ed.png)'
- en: 'Then, from the blockchain, copy the hash value from any of the blocks and paste
    it into the block explorer:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从区块链中复制任何一个块的哈希值，并将其粘贴到区块浏览器中：
- en: '![](img/8799bb9d-11df-4f03-b42f-792ae81be284.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8799bb9d-11df-4f03-b42f-792ae81be284.png)'
- en: 'Now, click on the Search button. You should see a similar output as in the
    following screenshot:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击搜索按钮。您应该看到与以下截图中类似的输出：
- en: '![](img/7a17bde2-ca74-4ef8-9c1d-229fcff582c5.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a17bde2-ca74-4ef8-9c1d-229fcff582c5.png)'
- en: This is basically how the block explorer works. We enter a hash or a piece of
    data that we're looking for, and in return, we get that piece of data as output.
    From the preceding screenshot, we can observe that we had the block returned with
    an index of `4` for the hash value that we input to the block explorer. We also
    got all of the details related to that block. Furthermore, as you can probably
    tell for this search, we're hitting the `/block/:blockHash` endpoint.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是区块浏览器的工作原理。我们输入我们正在寻找的哈希或数据片段，作为回报，我们得到该数据片段作为输出。从前面的屏幕截图中，我们可以观察到，我们输入到区块浏览器的哈希值返回了索引为`4`的区块。我们还得到了与该区块相关的所有细节。此外，您可能已经注意到，对于此搜索，我们正在命中`/block/:blockHash`端点。
- en: 'Next, search for a transaction by inputting the `transactionId`. Go to block
    explorer and select the Transaction ID option. Then, go to the blockchain and
    copy a `transactionId` value from any block and input it to the block explorer:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过输入`transactionId`搜索交易。转到区块浏览器并选择交易ID选项。然后，转到区块链并从任何区块中复制一个`transactionId`值，并将其输入到区块浏览器：
- en: '![](img/f116f514-a314-46df-87d6-2d0d85c2a27b.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f116f514-a314-46df-87d6-2d0d85c2a27b.png)'
- en: 'Then click on the Search button. You''ll see a similar output to the following:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击搜索按钮。您将看到类似以下的输出：
- en: '![](img/8098b0c5-0ac5-4d8c-aa10-7e2d873883f9.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8098b0c5-0ac5-4d8c-aa10-7e2d873883f9.png)'
- en: From the preceding screenshot, we can see that we got all of the transaction
    details related to the `transactionId` that we input to the block explorer. We
    also got to observe the balance amount of 400 bitcoins for that particular `transactionId`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到我们得到了与我们输入到区块浏览器的`transactionId`相关的所有交易细节。我们还得以观察到该特定`transactionId`的比特币余额为400比特币。
- en: 'Finally, test the address endpoint. To do this, select the Address option from
    the block explorer and then input either the sender''s or recipient''s address
    from any of the blocks. Then click on the Search button. You should see the following
    output on the screen:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，测试地址端点。要做到这一点，从区块浏览器中选择地址选项，然后输入任何一个区块中的发件人或收件人地址。然后点击搜索按钮。您应该在屏幕上看到以下输出：
- en: '![](img/495f512d-da51-4440-8836-d6983e0ae3e0.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/495f512d-da51-4440-8836-d6983e0ae3e0.png)'
- en: From the preceding screenshot, we can see that the address has a balance of
    749.35 Bitcoins and we can see all of the transactions that are associated with
    the address that we've input.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到该地址有749.35比特币的余额，并且我们可以看到与我们输入的地址相关的所有交易。
- en: 'Now, for any of these searches, if we input a piece of data that doesn''t exist,
    we''ll get the result back as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于这些搜索中的任何一个，如果我们输入一个不存在的数据片段，我们将得到以下结果：
- en: '![](img/9badf319-0a93-47cf-9900-c18977e4e4ec.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9badf319-0a93-47cf-9900-c18977e4e4ec.png)'
- en: This proves that the block explorer works just as it should.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了区块浏览器的工作原理与应有的一样。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built an amazing user interface to explore the blockchain
    that we have built in this book so far. We started by defining the necessary endpoints
    for querying the required data. Then we built methods such as `getBlock`, `getTransaction`, and
    `getAddressData` to help the endpoints to query the data. Furthermore, we developed
    the `/block/:blockHash`, `/transaction/:transactionId`, and `/address/:address`
    endpoints. After doing this, we added the block explorer's frontend code to our
    blockchain directory and then tested the block explorer and all the endpoints
    that we developed.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个令人惊叹的用户界面，用于探索本书中构建的区块链。我们首先定义了查询所需数据的必要端点。然后，我们构建了诸如`getBlock`、`getTransaction`和`getAddressData`之类的方法，以帮助端点查询数据。此外，我们开发了`/block/:blockHash`、`/transaction/:transactionId`和`/address/:address`端点。在做完这些之后，我们将区块浏览器的前端代码添加到我们的区块链目录中，然后测试了区块浏览器和我们开发的所有端点。
- en: With this chapter, we have reached the end of this book. By this point, we have
    built our very own blockchain and added all the necessary functionalities to it.
    In addition to this, we have also built our decentralized network and an interface
    to explore the blockchain.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们已经到达了本书的结尾。到目前为止，我们已经构建了自己的区块链，并为其添加了所有必要的功能。除此之外，我们还建立了我们自己的去中心化网络，并建立了一个用于探索区块链的界面。
- en: The next chapter will be a quick summary of what we have learned throughout
    this book. We'll then explore what else we can do with the blockchain that we've
    developed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将是对本书中所学内容的快速总结。然后，我们将探索我们已开发的区块链还可以做些什么。
