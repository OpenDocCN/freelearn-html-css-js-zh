- en: Chapter 2. Our First Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 我们的第一个应用
- en: In the previous chapter, we learned what Marionette is, where to find the source
    code and documentation, and other useful resources that will help us to learn
    more about Marionette. But we believe the best way to learn something is by putting
    it into practice. So in this book, we will build an application with moderate
    complexity, that is, it is complex enough to break the Hello World! barrier, allowing
    us to discover the benefits that Marionette has to offer, but simple enough to
    complete it with in this book. We will show some standalone code snippets to introduce
    you to each new concept; however most of the time we will stick to the application
    code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了Marionette是什么，在哪里可以找到源代码和文档，以及其他有助于我们学习Marionette的有用资源。但我们认为，学习最好的方式是将所学应用于实践。因此，在本书中，我们将构建一个具有适度复杂性的应用，即复杂到足以突破Hello
    World!的障碍，使我们能够发现Marionette提供的优势，但简单到足以在本书中完成。我们将展示一些独立的代码片段来介绍每个新概念；然而，大多数时候我们将坚持应用代码。
- en: 'In this chapter, we will review how to set up your development environment
    in order to build our first application. We will also learn three important parts
    of `Marionette.js`: the marionette router, marionette controller, and marionette
    application.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾如何设置开发环境以构建我们的第一个应用。我们还将学习`Marionette.js`的三个重要部分：Marionette路由器、Marionette控制器和Marionette应用。
- en: Introduction to what we are building
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建的简介
- en: 'The application that we will be building in this book is a website for a book
    store. We should be able to perform the following actions on the website:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书我们将构建的应用是一个书店网站。我们应能够在网站上执行以下操作：
- en: Display a list of book categories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示书籍类别列表
- en: Select a category and display the related books
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个类别并显示相关书籍
- en: Present a description, price, and other important details of the book
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示书籍的描述、价格和其他重要细节
- en: Add books to the shopping cart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将书籍添加到购物车
- en: Display the shopping cart items
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示购物车中的商品
- en: The website that we are going to build is just an example application. It's
    mandatory to follow the structure proposed in this book, as every application
    has different needs. Nevertheless, it's a good starting point and our idea is
    to show how each component of Marionette solves a problem and how to make its
    components work together.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的网站只是一个示例应用。必须遵循本书中提出的结构，因为每个应用都有不同的需求。尽管如此，它是一个良好的起点，我们的想法是展示Marionette的每个组件是如何解决问题以及如何使这些组件协同工作的。
- en: Also, keep in mind that we will give attention to the Marionette components
    of the code, explaining in detail their benefits, and to adding them to the application.
    However, we will not dive deep into Backbone details such as `Backbone.Model`
    and `Backbone.Collection`, which are the core components of Backbone, as knowledge
    of this is already assumed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，我们将关注代码的Marionette组件，详细解释它们的优点，以及如何将它们添加到应用中。然而，我们不会深入探讨Backbone的细节，如`Backbone.Model`和`Backbone.Collection`，这些是Backbone的核心组件，因为假设读者已经了解这些内容。
- en: One of the concepts that Marionette adds to Backbone is that of an application
    object—`Backbone.Marionette.Application`. We will start this book with this topic
    because the object will be the container of all of your Backbone views and models.
    One of its responsibilities is, before the user starts interacting with the website,
    it must initialize some of the components, such as the `Backbone.Router` component,
    that will be listening to the route (URL) changes of our application. This object
    provides some handy methods to perform this initialization. But, before we dig
    deeper into details, let's first take a look at what we are building.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Marionette为Backbone添加的一个概念是应用对象——`Backbone.Marionette.Application`。我们将从本书的这个主题开始，因为这个对象将是所有Backbone视图和模型的容器。其一个职责是在用户开始与网站交互之前，必须初始化一些组件，例如将监听应用路由（URL）变化的`Backbone.Router`组件。这个对象提供了一些方便的方法来执行这个初始化。但在我们深入细节之前，让我们首先看看我们正在构建的内容。
- en: 'The following screenshot helps us to illustrate the structure of the book store
    application that we are going to build:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图有助于我们展示我们将要构建的书店应用的结构：
- en: '![Introduction to what we are building](img/4252OS_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建的简介](img/4252OS_02_01.jpg)'
- en: We have a navigation section that provides the categories of the books. Then
    in the middle, we have two sections. The one on top is the list of books by name,
    author, and price. This section also allows users to order books.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个导航部分，提供书籍的分类。然后在中间，我们有两个部分。顶部的是按名称、作者和价格列出的书籍列表。此部分还允许用户订购书籍。
- en: The second section, in the center of the screen, will show a description of
    each book as the user selects from the list on top. Finally, to the right of the
    screen, we have the Order section that will contain the details about our order.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕中央的第二部分将在用户从顶部列表中选择时显示每本书的描述。最后，屏幕右侧是我们的订单部分，它将包含有关我们订单的详细信息。
- en: 'At the end of the book, the application should look like the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的结尾，应用程序应如下截图所示：
- en: '![Introduction to what we are building](img/4252OS_02_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍我们要构建的内容](img/4252OS_02_02.jpg)'
- en: The goal of this chapter is to build the foundation of the book store website
    and a part of that foundation is to have the `Backbone.Marionette.Application`
    object working with enough functionality so that we can call it an application.
    Our philosophy is to take small steps at a time and then check where we stand.
    So let's get started!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是构建书店网站的基础，其中一部分基础是让 `Backbone.Marionette.Application` 对象具有足够的功能，以便我们可以称之为应用程序。我们的理念是一步一步地前进，然后检查我们的位置。那么，让我们开始吧！
- en: Setting up our development environment
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: 'As we will be building an application together, we need to set up our development
    environment. The following are the steps to do it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将一起构建应用程序，我们需要设置我们的开发环境。以下是为此执行此操作的步骤：
- en: Create a folder and name it `Bookstore`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹，并将其命名为 `Bookstore`。
- en: Inside this folder, create two new folders—one named `Source Code` and the other
    `Libraries`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件夹内，创建两个新的文件夹——一个命名为 `源代码`，另一个命名为 `库`。
- en: 'In the `Libraries` folder, place the following four libraries:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `库` 文件夹中，放置以下四个库：
- en: '`Underscore.js`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Underscore.js`'
- en: '`jQuery.js`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jQuery.js`'
- en: '`Backbone.js`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Backbone.js`'
- en: '`Backbone.Marionette.js`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Backbone.Marionette.js`'
- en: For styling purposes, we will use Twitter bootstrap v2\. Download the default
    package, unzip it, and place the entire unzipped bootstrap folder beside the `.js`
    files inside the `Libraries` folder.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了样式化目的，我们将使用 Twitter bootstrap v2。下载默认包，解压它，并将整个解压的 bootstrap 文件夹放置在 `库` 文件夹中的
    `.js` 文件旁边。
- en: In the `Source Code` folder, create a new folder with the name `js` as it will
    be the location where we will save all our JavaScript files.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `源代码` 文件夹中，创建一个名为 `js` 的新文件夹，因为这是我们保存所有 JavaScript 文件的位置。
- en: Under the `Source Code` folder, create an HTML file and name it `Index.html`.
    It should be placed at the same level as the `js` folder.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `源代码` 文件夹下，创建一个 HTML 文件，并将其命名为 `Index.html`。它应放置在 `js` 文件夹同一级别。
- en: Make sure that your folder structure looks like the following screenshot and
    that you have the right library files inside the `Libraries` folder.![Setting
    up our development environment](img/4252OS_02_03.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的文件夹结构如下截图所示，并且在 `库` 文件夹中包含正确的库文件。![设置我们的开发环境](img/4252OS_02_03.jpg)
- en: 'Your `Source Code` folder should look like the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的 `源代码` 文件夹应如下截图所示：
- en: '![Setting up our development environment](img/4252OS_02_04.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置我们的开发环境](img/4252OS_02_04.jpg)'
- en: We are building a single-page application and in this section, we are about
    to build the initial HTML page structure for our application. It is the HTML file
    that will be rendered by the server the first time a user types the URL of the
    site.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们正在构建一个单页应用程序，在本节中，我们将为我们的应用程序构建初始的 HTML 页面结构。这是服务器首次渲染用户输入网站 URL 时将渲染的 HTML
    文件。
- en: Open the `Index.html` file in your preferred code editor.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您偏好的代码编辑器中打开 `Index.html` 文件。
- en: To avoid the tedious task of writing the HTML file manually for this chapter,
    we have made it available for you at [http://jsfiddle.net/](http://jsfiddle.net/).
    The code is available at [http://jsfiddle.net/rayweb_on/hsrv7/11/](http://jsfiddle.net/rayweb_on/hsrv7/11/).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了避免手动编写本章的 HTML 文件这一繁琐的任务，我们已将其提供给您，请访问 [http://jsfiddle.net/](http://jsfiddle.net/)。代码可在
    [http://jsfiddle.net/rayweb_on/hsrv7/11/](http://jsfiddle.net/rayweb_on/hsrv7/11/)
    获取。
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[jsfiddle.net](http://jsfiddle.net)—if you don''t know it already, this is
    an excellent tool to test the small parts of your JavaScript code and share your
    snippets with ease.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[jsfiddle.net](http://jsfiddle.net/)——如果您还不知道，这是一个测试您 JavaScript 代码小部分并轻松分享代码片段的优秀工具。'
- en: I'm sure that if you are reading a Marionette book, it is because you have enough
    experience to put the CSS and JS tags in the right place. So feel free to skip
    the following steps.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我确信如果你正在阅读一本 Marionette 书，那是因为你已经有足够的经验将 CSS 和 JS 标签放在正确的位置。所以请随意跳过以下步骤。
- en: Copy the **CSS** section and paste it into the `<head>` section of the HTML
    file.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **CSS** 部分，并将其粘贴到 HTML 文件的 `<head>` 部分。
- en: Copy the **HTML** section and paste it into the `<body>` section of the HTML
    file.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **HTML** 部分，并将其粘贴到 HTML 文件的 `<body>` 部分。
- en: At [http://jsfiddle.net/](http://jsfiddle.net/), the scripts are already included
    for you. But in our local environment, we have to add them. We will do it just
    at the bottom of the `<html>` tag, but still inside the `<body>` tag.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [http://jsfiddle.net/](http://jsfiddle.net/)，脚本已经为你准备好了。但在我们的本地环境中，我们必须添加它们。我们将在
    `<html>` 标签的底部进行操作，但仍然在 `<body>` 标签内。
- en: When you are done with copying the initial structure, your HTML file should
    look like the following screenshot (the style script and the template script are
    collapsed in the screenshot). In this chapter, we will be using the console of
    your browser and we won't be interacting with the HTML file for now, but it's
    important that your `Index.html` file follows the structure shown in the following
    screenshot:![Setting up our development environment](img/4252OS_02_05.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成复制初始结构后，你的 HTML 文件应该看起来像下面的截图（截图中的样式脚本和模板脚本已折叠）。在本章中，我们将使用你浏览器的控制台，并且目前我们不会与
    HTML 文件进行交互，但你的 `Index.html` 文件遵循以下截图所示的结构是很重要的：![设置我们的开发环境](img/4252OS_02_05.jpg)
- en: Note
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bootstrap and styling your page is outside the scope of this book. But it's
    a pretty convenient library that allows us to set up a decent looking HTML file
    for this demo application.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引导和样式化你的页面超出了本书的范围。但这是一个非常方便的库，它允许我们为这个演示应用程序设置一个看起来不错的 HTML 文件。
- en: But wait a minute…what does the last script `js/BookStore.js` refer to? Well,
    that's the JavaScript code that we will be creating in the next step.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是等等……最后一个脚本 `js/BookStore.js` 指的是什么？嗯，那是我们在下一步将要创建的 JavaScript 代码。
- en: The Backbone.Marionette.Application object
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Backbone.Marionette.Application 对象
- en: 'Create a new file inside the `js` folder and name it `BookStore.js`. To create
    a new application, we just need to type the following line in `Bookstore.js`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `js` 文件夹内创建一个新文件，并将其命名为 `BookStore.js`。要创建一个新的应用程序，我们只需要在 `Bookstore.js` 中输入以下行：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will name the application `BookStoreApp` and will start attaching our Backbone
    pieces to this application. But, we already mentioned that Marionette brings the
    concept of an application object and, from the documentation, we also know that
    it is an object that will help us to coordinate the pieces of our application.
    You may ask, what pieces; for example, a `Marionette.Router` object and a `Marionette.Controller`
    object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将命名应用程序为 `BookStoreApp`，并将开始将我们的 Backbone 组件附加到这个应用程序上。但是，我们已经提到过 Marionette
    引入了应用程序对象的概念，并且从文档中我们也可以知道，这是一个将帮助我们协调应用程序各个组件的对象。你可能想知道，哪些组件；例如，一个 `Marionette.Router`
    对象和一个 `Marionette.Controller` 对象。
- en: Backbone already has a router!
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Backbone 已经有一个路由器了！
- en: Yes, Backbone already has a router object. Then what does the `Marionette.Router`
    object do differently? Well, the new router adds the ability of reducing your
    router to just a small file that will contain only the routes of your application
    and not the methods that will respond and take action once a route is matched.
    These methods belong to a controller—another new concept that Marionette adds
    to Backbone.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Backbone 已经有一个路由器对象。那么 `Marionette.Router` 对象有什么不同之处呢？嗯，新的路由器增加了将你的路由器简化为仅包含应用程序路由的小文件的能力，而不会包含一旦路由匹配就会响应和采取行动的方法。这些方法属于控制器——Marionette
    为 Backbone 添加的另一个新概念。
- en: 'Let''s build a `Marionette.Router` object and a `Marionette.Controller` object
    to get a better understanding of them:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个 `Marionette.Router` 对象和一个 `Marionette.Controller` 对象，以便更好地理解它们：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code snippet, we created the `BookStoreController` object,
    which is just a JavaScript object containing the functions that will match the
    name of the methods defined in the router. In this case, the empty router will
    call the `displayBooks` method or the controller. This separation of concerns
    will allow us to have a cleaner code base as the router will only know about the
    routes. We declare which controller will handle the routes by setting the controller
    property of the router to `BookStoreController`. The rest of the code snippet
    is just the declaration of the routes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了 `BookStoreController` 对象，它只是一个包含将匹配路由器中定义的方法名称的函数的 JavaScript
    对象。在这种情况下，空的路由器将调用 `displayBooks` 方法或控制器。这种关注点的分离将使我们能够拥有一个更干净的代码库，因为路由器只知道关于路由的信息。我们通过将路由器的控制器属性设置为
    `BookStoreController` 来声明哪个控制器将处理路由。代码片段的其余部分只是路由的声明。
- en: It is not mandatory to have a router in order to use a controller. The Marionette
    controllers can be instantiated without the need of a router. You may not handle
    the interaction of your site by changes in the URL but by events. In this case,
    the controller still adds value as it can be the container of your views.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制器并不强制要求有一个路由器。Marionette 控制器可以在不需要路由器的情况下实例化。您可能不会通过 URL 的变化来处理您网站的交互，而是通过事件。在这种情况下，控制器仍然具有价值，因为它可以成为您视图的容器。
- en: It's recommended to have small routers and controllers divided as per the purpose
    of your application instead of a giant single-router file that will contain all
    the routes and the functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 建议根据您应用程序的目的将路由器和控制器分成小的部分，而不是一个包含所有路由和函数的巨大单一路由器文件。
- en: While these two pieces are part of the application's foundation, we still need
    to make them work within it. But, we also need to do a little more in order to
    achieve a functional application. Let's take small steps for this. Let's first
    check out whether we can see a message log in the console of our browser.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两部分是应用程序基础的一部分，但我们仍然需要在其中使它们工作。但是，我们还需要做更多的事情才能实现一个功能性的应用程序。让我们一步一步来。让我们首先检查我们是否能在浏览器控制台中看到消息日志。
- en: To do that, we need to put all the code together and add the missing pieces
    in order to make it work.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要将所有代码放在一起，并添加缺失的部分以使其工作。
- en: So far, we have only defined the application, controller, and router. But where
    should we instantiate them? The `Backbone.Marionette.Application` object offers
    the possibility to add initializer methods that will run when we start our application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只定义了应用程序、控制器和路由器。但我们应该在何处实例化它们？`Backbone.Marionette.Application` 对象提供了在启动我们的应用程序时运行初始化方法的可能。
- en: Yes, you read correctly! You can add as many methods as you need in case you
    want to keep the logic of this initializers separated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，您读得正确！如果您想保持初始化器的逻辑分离，您可以添加任意多的方法。
- en: Inside this initializer method, we will instantiate the router and the controller,
    and just for fun, add another log message to see the order of execution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个初始化方法内部，我们将实例化路由器和控制器，并且为了好玩，添加另一个日志消息以查看执行顺序。
- en: 'Use the following code to do this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码来完成此操作：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another useful function of the applications is the events that fire the `initialize:before`,
    `initialize:after`, and `start` functions. The names of these functions are quite
    descriptive. As the name suggests, the `initialize:before` function will be executed
    before the initializers, the `initialize:after` function will be executed after
    the initializers, and the `start` function is responsible for starting the application
    and thereafter starting the initializers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的另一个有用功能是触发 `initialize:before`、`initialize:after` 和 `start` 函数的事件。这些函数的名称相当描述性。正如其名称所暗示的，`initialize:before`
    函数将在初始化之前执行，`initialize:after` 函数将在初始化之后执行，而 `start` 函数负责启动应用程序，然后启动初始化器。
- en: In our application, we will use `initialize:after`. This function will be helpful
    for us, as the last thing we want to do once we instantiate the router is start
    `Backbone.history`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将使用 `initialize:after`。这个函数对我们很有帮助，因为我们最不想做的是在实例化路由器后启动 `Backbone.history`。
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The last step to complete the infrastructure or foundation of our application
    is call the following function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们的应用程序的基础设施或基础结构的最后一步是调用以下函数：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s put all the code snippets together as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将所有代码片段组合如下：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Now, you can go ahead and open the `Index.html` file in your browser and see
    the results on the console.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以继续在浏览器中打开`Index.html`文件，并在控制台查看结果。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the application, controller, and router functionality,
    and how to get them working together to get a simple application skeleton which
    will be the base for our book store application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了应用、控制器和路由功能的应用，以及如何使它们协同工作以获得一个简单的应用程序骨架，这将是我们的书店应用程序的基础。
- en: In the next chapter, we will familiarize ourselves with the different views
    that Marionette adds to the Backbone development.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将熟悉Marionette为Backbone开发添加的不同视图。
