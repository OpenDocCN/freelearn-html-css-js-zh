- en: Chapter 10. Static Sites
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 静态网站
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Setting up a basic site project
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本网站项目
- en: Adding a page to the site
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网站上添加页面
- en: Adding content to the site
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网站上添加内容
- en: Adding data to the site
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向网站添加数据
- en: Creating and using a site layout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用网站布局
- en: Generating pages from a collection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合生成页面
- en: Creating a template helper
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板助手
- en: Using a plugin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the areas where Grunt really shines is in the management of static website
    projects. Using Grunt for generating a static website can result in a fast and
    easily modifiable site, replacing the complexity and cost of building a traditional
    server-generated site when its advantages would not be useful to the situation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt真正出色的领域之一是管理静态网站项目。使用Grunt生成静态网站可以快速且易于修改，当其优势对情况不适用时，可以取代构建传统服务器生成网站的复杂性和成本。
- en: In this chapter we'll be focusing on making use of the **Assemble** framework
    to build a static website. At its core, Assemble is a Grunt plugin, but it also
    uses Grunt to bring together all its other related tools.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于利用**Assemble**框架构建静态网站。在核心上，Assemble是一个Grunt插件，但它也使用Grunt来整合所有其他相关工具。
- en: As an example, we'll build a simple static website to represent us on the Internet
    in an individual capacity. Think of it as a résumé made available to the public
    via the **World Wide Web** (**WWW**).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将构建一个简单的静态网站来代表我们在互联网上的个人形象。把它想象成通过**万维网**（**WWW**）公开的简历。
- en: Setting up a basic site project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本网站项目
- en: To speed up the process of starting a new project based on the **Assemble**
    framework, we'll make use of a **Yeoman** generator provided by the developer
    community. The generator will produce a minimal project setup, with everything
    we'll need to get started.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快基于**Assemble**框架启动新项目的过程，我们将利用开发者社区提供的**Yeoman**生成器。生成器将生成一个最小化项目设置，包括我们开始所需的一切。
- en: Getting started
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: The only requirement for this recipe is a global installation of Node.js, with
    Grunt installed on top of it as per the *Installing the Grunt CLI* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*. Be sure to refer to it if you are not yet familiar with its
    contents.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的唯一要求是在全局范围内安装Node.js，并在其上安装Grunt，如[第1章](part0015.xhtml#aid-E9OE1 "第1章. 开始使用Grunt")中“安装Grunt
    CLI”食谱所述，即“开始使用Grunt”。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through installing the Yeoman tool and using it
    to generate a basic Assemble project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您安装Yeoman工具并使用它生成一个基本的Assemble项目。
- en: 'First we''ll need to install the Yeoman tool globally using the `npm` utility.
    This is done by entering the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`npm`工具全局安装Yeoman工具。这是通过输入以下命令来完成的：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll also need to install the Yeoman generator that is specifically geared
    toward generating an Assemble project. This is done by entering the following
    command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要安装专门针对生成Assemble项目的Yeoman生成器。这是通过输入以下命令来完成的：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next we''ll create a directory called `mysite` that will contain our static
    website project, and navigate into it using a command similar to the following:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个名为`mysite`的目录，它将包含我们的静态网站项目，并使用以下类似的命令进入该目录：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With Yeoman and the required generator installed, we can now use it to generate
    our plugin project by running the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装了Yeoman和所需的生成器后，我们现在可以使用它通过运行以下命令来生成我们的插件项目：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After running the previous command, we will be presented with a series of questions
    that will assist the generator in creating the project. This interaction should
    look something like the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行上一个命令后，我们将被一系列问题所引导，这些问题将帮助生成器创建项目。这种交互应该看起来像以下这样：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be sure you replace the example `me` GitHub username with your own, and to opt-out
    of installing any extra Assemble plugins. Making use of extra plugins will be
    discussed later in this chapter.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将示例`me` GitHub用户名替换为您的用户名，并且选择不安装任何额外的Assemble插件。关于使用额外插件的内容将在本章后面讨论。
- en: 'After the questions have been answered, the generator will create the files
    required for a simple static website project. Output similar to the following
    will inform us of these actions:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在回答完这些问题后，生成器将创建一个简单静态网站项目所需的文件。类似于以下输出的信息将告知我们这些操作：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After creating the aforementioned files the generator should also automatically
    install the required dependencies mentioned in the newly created `package.json`
    and `bower.json` files. If however it appears that the dependencies have not been
    installed, you can try to do so manually using the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了上述文件之后，生成器也应该自动安装在新创建的`package.json`和`bower.json`文件中提到的所需依赖项。然而，如果出现依赖项尚未安装的情况，你可以尝试使用以下命令手动安装：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the necessary files created and dependencies installed, we can now build
    our site and have it locally hosted, using the `grunt server` command. This should
    produce output similar to the following:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了必要的文件并安装了依赖项之后，我们现在可以使用`grunt server`命令构建我们的网站并在本地托管。这应该会产生类似于以下内容的输出：
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the `server` task has completed, it should automatically open your default
    browser on `http://localhost:9000/`, which should show you the standard generated
    site. At the time of writing, it looked something like the following:![How to
    do it...](img/image00281.jpeg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`server`任务完成，它应该会自动打开你的默认浏览器，并在`http://localhost:9000/`上显示标准生成的网站。在撰写本文时，它看起来如下所示：![如何操作...](img/image00281.jpeg)
- en: Adding a page to the site
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向网站添加页面
- en: As its core, a static website is just a collection of pages. With our basic
    setup in place we can look at adding a page that contains some biographical information
    about us.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其核心，一个静态网站仅仅是一系列页面的集合。在我们基本设置到位后，我们可以考虑添加一个包含我们个人一些传记信息的页面。
- en: Getting started
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe we'll work with the basic project structure that we created in
    the *Setting up a basic site project* recipe earlier in this chapter. Be sure
    to refer to it if you are not yet familiar with it's content. Before we start
    we should also make sure that the site builder and server are running. If they
    aren't yet running, they can be started using the `grunt server` command.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用我们在本章早期“设置基本网站项目”菜谱中创建的基本项目结构。如果你还不熟悉它的内容，请务必参考它。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们还没有运行，可以使用`grunt
    server`命令启动它们。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps take us through adding a page to our static site that will
    contain our simple biography:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们向我们的静态网站添加一个包含我们简单传记的页面：
- en: 'First we''ll create a file called `bio.hbs` in the `src/templates/pages` directory
    and fill it with some information about our new page:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在`src/templates/pages`目录中创建一个名为`bio.hbs`的文件，并填充一些关于我们新页面的信息：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The initial part of the file is called the **YAML front matter** section which
    can be used to provide metadata about a page to the site building tool. You can
    read more about it at the following URL:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件的前部分被称为**YAML前文部分**，它可以用来向网站构建工具提供有关页面的元数据。你可以在以下网址了解更多信息：
- en: '[http://assemble.io/docs/YAML-front-matter.html](http://assemble.io/docs/YAML-front-matter.html)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://assemble.io/docs/YAML-front-matter.html](http://assemble.io/docs/YAML-front-matter.html)'
- en: 'With our page information added to the file, we can proceed to add the HTML
    content of the page. Let''s do that by adding the following after the front matter
    section:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将我们的页面信息添加到文件后，我们可以继续添加页面的HTML内容。让我们通过在文档开头部分之后添加以下内容来完成这个操作：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The default template language provided by the Assemble project generator is
    Handlebars, which was used in the preceding code. You can read more about Handlebars
    at the following URL:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Assemble项目生成器提供的默认模板语言是Handlebars，这在前面代码中已经使用。你可以在以下网址了解更多关于Handlebars的信息：
- en: '[http://handlebarsjs.com/](http://handlebarsjs.com/)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://handlebarsjs.com/](http://handlebarsjs.com/)'
- en: Also be sure to observe that the metadata provided in the front matter section
    can be used in the page templates. An example of this can be seen with the usage
    of the `heading` variable in the preceding code.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保注意，前文部分中提供的元数据可以在页面模板中使用。一个这样的例子可以在前面代码中使用`heading`变量时看到。
- en: 'After saving our newly created page file, the site builder that we initially
    started up should automatically detect that it has been added and proceed to recompile
    our site, producing output similar to the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存我们新创建的页面文件后，最初启动的网站构建器应该自动检测到它的添加，并继续重新编译我们的网站，生成类似于以下内容的输出：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once it has finished with the compilation it should refresh our browser view
    of `http://localhost:9000/`, after which we should now see a new `Bio` item in
    our navigation bar at the top of the site. If we select this item we should be
    presented with our new page that should look something like the following:![How
    to do it...](img/image00282.jpeg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦编译完成，它应该刷新我们的浏览器对`http://localhost:9000/`的视图，之后我们应该在网站顶部的导航栏中看到一个新的`Bio`项目。如果我们选择此项目，我们应该看到一个新页面，其外观可能如下所示：![如何操作...](img/image00282.jpeg)
- en: Adding content to the site
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向网站添加内容
- en: When developing a website it is usually recommended that the structure and content
    of a site remain separated. Having it organized in this fashion makes it easy
    for us to edit the ever changing content of a site, without having to get involved
    with it's relatively static structure every time we do so.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发一个网站时，通常建议将网站的结构和内容分开。以这种方式组织可以使我们轻松编辑网站不断变化的内容，而无需每次都涉及相对静态的结构。
- en: The **Assemble** framework comes bundled with a library that implements the
    **Markdown** text formatting syntax; this allows us to easily create content documents
    with a minimal structure that is rendered to well-formed HTML.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Assemble**框架附带了一个实现**Markdown**文本格式化语法的库；这使我们能够轻松创建具有最小结构的内容文档，并将其渲染为格式良好的HTML。'
- en: 'You can read more about the Markdown syntax at following the URL:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下URL了解更多关于Markdown语法的知识：
- en: '[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[Markdown](http://daringfireball.net/projects/markdown/)'
- en: Getting started
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: In this recipe we'll continue working on the project from the *Adding a page
    to the site* recipe in this chapter. Be sure to refer to it if you are not yet
    familiar with its contents. Before we start we should also make sure that the
    site builder and server are running. If they aren't yet running they can be started
    using the `grunt server` command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续本章中“向网站添加页面”菜谱中的项目。如果您还不熟悉其内容，请务必参考。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们还没有运行，可以使用`grunt
    server`命令启动它们。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a markdown document to contain
    our biography and using it in a page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个Markdown文档来包含我们的传记，并在页面中使用它。
- en: 'First, we''ll create a new file called `bio.md` in the `src/content` directory
    and fill it with the contents of our biography in Markdown format:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在`src/content`目录中创建一个名为`bio.md`的新文件，并用我们的传记内容以Markdown格式填充它：
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A handy cheatsheet for the Markdown syntax supported by Assemble can be found
    at the following URL:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下URL中可以找到Assemble支持的Markdown语法的便捷速查表：
- en: '[http://assemble.io/docs/Cheatsheet-Markdown.html](http://assemble.io/docs/Cheatsheet-Markdown.html)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Markdown 快速参考](http://assemble.io/docs/Cheatsheet-Markdown.html)'
- en: 'With our content file created we now need to use it on our site. We''ll do
    that by changing the contents of the `src/templates/pages/bio.hbs` file to the
    following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建内容文件后，我们现在需要在我们的网站上使用它。我们将通过更改`src/templates/pages/bio.hbs`文件的内容来实现这一点：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `md` **Handlebars** helper is provided by the `handlebars-helpers` package
    that comes bundled with Assemble. It can be used to render a Markdown file by
    providing either a string or a variable that contains a file path.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`md` **Handlebars**助手由附带在Assemble中的`handlebars-helpers`包提供。它可以通过提供字符串或包含文件路径的变量来渲染Markdown文件。'
- en: 'After saving the altered `bio.hbs` file, the site builder that we initially
    started up should automatically detect that it has been modified and proceed to
    recompile our site, producing output similar to the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存修改后的`bio.hbs`文件后，我们最初启动的网站构建器应该会自动检测到它已被修改，并继续重新编译我们的网站，生成类似于以下内容的输出：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we now have a look at our biography page at `http://localhost:9000/bio.html`
    we'll see that our new content is now displayed on it; it should look something
    like the following:![How to do it...](img/image00283.jpeg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看位于`http://localhost:9000/bio.html`的传记页面，我们会看到我们的新内容现在显示在上面；它应该看起来像以下这样：![如何操作...](img/image00283.jpeg)
- en: Adding data to the site
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向网站添加数据
- en: Quite often we'll find that the majority of the content on a site repeats a
    pattern, and that only certain parts of the content differ from page to page.
    A site that displays articles for instance, will display each article using the
    same layout, and also have them listed in a repetitive manner. As developers,
    we'd probably like to avoid having to create each of these similar structured
    pages or items by hand.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的情况是，网站上的大部分内容都遵循某种模式，并且只有内容的一部分在不同页面之间有所不同。例如，显示文章的网站将使用相同的布局显示每篇文章，并以重复的方式列出它们。作为开发者，我们可能希望避免手动创建这些结构相似的页面或项目。
- en: For this purpose it's usually recommended to store the content we like to display
    in this fashion as data, which we can then render using a template or layout that
    will present each of them with the same template.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，通常建议将我们希望以这种方式显示的内容存储为数据，然后我们可以使用模板或布局来渲染它们，每个模板都将使用相同的模板呈现。
- en: Getting started
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe we'll continue working with the project from the *Adding content
    to the site* recipe found earlier in this chapter. Be sure to refer to it if you
    are not yet familiar with its contents. Before we start we should also make sure
    that the site builder and server are running. If they aren't yet running they
    can be started using the `grunt server` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续使用本章前面找到的“向网站添加内容”菜谱中的项目。如果您还不熟悉其内容，请务必参考它。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们尚未运行，可以使用`grunt
    server`命令启动它们。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps take us through adding data that represents the items in
    our navigation bar and using that data to customize the rendering of the navigation
    bar.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们添加表示导航栏项的数据，并使用这些数据来定制导航栏的渲染。
- en: 'Due to there only being one navigation bar for our site, we might as well just
    add it to the existing `site.yml` file located in the `src/data` directory. This
    file is used for storing data related to the site itself. Let''s add the following
    `sections` collection to its contents:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的网站只有一个导航栏，我们不妨将其直接添加到位于`src/data`目录中的现有`site.yml`文件中。此文件用于存储与网站本身相关的数据。让我们向其内容中添加以下`sections`集合：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The preceding file has its data stored in the YAML format. The following URL
    provides more information about the YAML format at [http://yaml.org/](http://yaml.org/).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一个文件的数据以YAML格式存储。以下URL提供了有关YAML格式的更多信息：[http://yaml.org/](http://yaml.org/)。
- en: 'Next we''ll be altering the template of the navigation bar to use the `sections`
    data we''ve provided in the `site.yml` file. To do this we will first need to
    find the following block of code in the `navbar-fixed-top.hbs` file located in
    the `src/templates/partials` directory:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改导航栏的模板，以使用我们在`site.yml`文件中提供的`sections`数据。为此，我们首先需要在位于`src/templates/partials`目录中的`navbar-fixed-top.hbs`文件中找到以下代码块：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once we''ve found the aforementioned block of code, we can replace the it with
    the code that will list navigation items according to the `sections` data. This
    is done by replacing it with the following code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们找到了上述代码块，我们可以将其替换为根据`sections`数据列出导航项的代码。这是通过替换为以下代码来完成的：
- en: '[PRE16]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Here, the `#is` helper is used to check that the full path name of the page
    is the same as the one that should be linked to by the navigation bar item. If
    they match, then the item should be rendered as the currently activated one.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`#is`辅助函数用于检查页面的完整路径名是否与导航栏项应链接到的路径名相同。如果它们匹配，则该项应呈现为当前激活项。
- en: The `relative` helper is used here to determine the relative path from the current
    page to the one that the navigation item should be linked to.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`relative`辅助函数用于确定从当前页面到导航项应链接到的页面的相对路径。
- en: Both the helpers mentioned here are provided by the `handlebars-helpers` library
    bundled along with Assemble.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里提到的两个辅助函数都是由与Assemble捆绑的`handlebars-helpers`库提供的。
- en: The Assemble framework makes the data contained in the `src/data` directory
    available according to variables with the same names as the filenames the directory
    contains. This is how we can use the `site` variable name in the previous example
    to access the data contained in the `site.yml` file
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Assemble 框架根据目录包含的文件名与变量同名，使`src/data`目录中的数据可用。这就是我们如何在之前的示例中使用`site`变量名来访问`site.yml`文件中的数据。
- en: 'After saving the altered `navbar-fixed-top.hbs` file the site builder that
    we initially started up should automatically detect that it has been modified,
    and proceed to recompile our site, producing output similar to the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存修改后的 `navbar-fixed-top.hbs` 文件后，我们最初启动的网站构建器应该会自动检测到它已被修改，并继续重新编译我们的网站，生成类似于以下内容的输出：
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we now have a look at any of the pages at `http://localhost:9000/` we'll
    see that the items in the navigation bar are now ordered according to the order
    of the items in the `sections` data:![How to do it...](img/image00284.jpeg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看 `http://localhost:9000/` 上的任何页面，我们会看到导航栏中的项目现在按照 `sections` 数据中项目的顺序排列：![如何操作...](img/image00284.jpeg)
- en: Creating and using a site layout
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用网站布局
- en: Having a consistent layout across a site can drastically improve its usability
    and also save time in its development. The Assemble framework allows us to easily
    create and use layouts in various ways.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个网站上保持一致的布局可以极大地提高其可用性，同时也能在开发过程中节省时间。Assemble 框架允许我们轻松地以各种方式创建和使用布局。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe we'll continue working on the project from the *Adding data to
    the site* recipe in this chapter. Be sure to refer to it if you are not yet familiar
    with it's contents. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续在本章的 *向网站添加数据* 菜谱中工作的项目。如果您还不熟悉它的内容，请务必参考它。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们还没有运行，可以使用
    `grunt server` 命令启动它们。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a new layout template and setting
    up some sample blog pages that use it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个新的布局模板，并设置一些使用它的示例博客页面。
- en: 'First, we''ll create a new layout template that will provide the layout for
    our sample blog post pages. Let''s create a file called `post.hbs` in the `src/templates/layouts`
    directory and fill it with the following contents:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新的布局模板，它将为我们的示例博客文章页面提供布局。让我们在 `src/templates/layouts` 目录中创建一个名为 `post.hbs`
    的文件，并填充以下内容：
- en: '[PRE18]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the top of the file in the YAML front matter section, we made use of the
    special `layout` property to indicate the parent template that should be used
    for this template. You can read more about how template inheritance works in Assemble
    at the following web address:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文件的顶部 YAML 前置部分，我们使用了特殊的 `layout` 属性来指示应该用于此模板的父模板。您可以在以下网址了解更多关于 Assemble
    中模板继承如何工作的信息：
- en: '[http://assemble.io/docs/Layouts.html](http://assemble.io/docs/Layouts.html)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://assemble.io/docs/Layouts.html](http://assemble.io/docs/Layouts.html)'
- en: 'The combination of HTML and CSS used to build this layout is provided by the
    **Bootstrap** project that is included by default when using the Assemble Yeoman
    generator we used to set up this project. You can read more about Bootstrap at
    the following web address:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建此布局所使用的 HTML 和 CSS 组合是由默认包含在 Assemble Yeoman 生成器中的 **Bootstrap** 项目提供的。您可以在以下网址了解更多关于
    Bootstrap 的信息：
- en: '[http://getbootstrap.com/](http://getbootstrap.com/)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://getbootstrap.com/](http://getbootstrap.com/)'
- en: 'Now we''ll create some sample blog pages that will be making use of our newly
    created layout. We''ll do this by creating three files called in the `src/templates/pages/posts`
    directory with the following names: `one.hbs`, `two.hbs`, and `three.hbs`. Each
    of these should contain something similar to the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一些使用我们新创建的布局的示例博客页面。我们将通过在 `src/templates/pages/posts` 目录中创建三个文件来完成此操作，文件名为
    `one.hbs`、`two.hbs` 和 `three.hbs`。每个文件都应该包含类似于以下内容：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The content of these pages can be pretty much anything, as long as there is
    at least a front matter section containing a `title` and some HTML content after
    that.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些页面的内容可以是几乎任何东西，只要至少有一个包含 `title` 和之后一些 HTML 内容的前置部分。
- en: 'In order for our newly created pages to be rendered we will have to add a new
    `assemble` task target. This target will however be sharing many of the options
    of the existing `pages` target, so what we''ll do next is move the `options` of
    the `pages` target into the `assemble` task configuration itself, so that it can
    be shared across all the targets in the `assemble` task:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的新创建的页面能够渲染，我们必须添加一个新的 `assemble` 任务目标。然而，这个目标将共享现有 `pages` 目标的大部分选项，所以接下来我们将把
    `pages` 目标的 `options` 移动到 `assemble` 任务配置本身中，以便它可以在 `assemble` 任务的各个目标之间共享：
- en: '[PRE20]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With the options shared across all targets now, we can add the `task` target
    that will be rendering our sample post pages for us. Let''s add the following
    task target called `posts` to the assemble task:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在所有目标都共享了选项，我们可以添加一个`task`目标，该目标将为我们渲染示例文章页面。让我们向组装任务添加以下名为`posts`的任务目标：
- en: '[PRE21]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In order for us to reach these newly generated pages to make some changes to
    the blog post listing page. This can be done by changing the contents of the `blog.hbs`
    file in the `src/templates/pages` directory to the following:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们能够到达这些新生成的页面并对博客文章列表页面进行一些更改。这可以通过更改`src/templates/pages`目录中`blog.hbs`文件的內容来实现：
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Before we continue we''ll also have to take care of a slight side effect we
    caused when placing our sample page templates in the `src/templates/pages/posts`
    directory. The default `watch` task setup that triggers automatic compilation
    of changed templates isn''t configured to look for changes deeper than the `src/templates/pages`
    directory itself. This means that changes to our sample page templates won''t
    trigger a re-compilation. Let''s take care of this problem by changing the `files`
    configuration of the `assemble` target of the `watch` task to the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们还需要处理我们在将我们的示例页面模板放置在`src/templates/pages/posts`目录时引起的一个轻微副作用。默认的`watch`任务设置，该设置触发自动编译更改的模板，没有配置为在`src/templates/pages`目录本身之外查找更改。这意味着对我们示例页面模板的更改不会触发重新编译。让我们通过更改`watch`任务的`assemble`目标的`files`配置来解决这个问题，如下所示：
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we can restart our server that was running so that the configuration
    changes may take effect. After restarting, we should see some extra output with
    regards to the rendering of our sample post pages:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以重新启动我们运行的服务器，以便配置更改生效。重启后，我们应该看到一些关于渲染我们的示例文章页面的额外输出：
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we now navigate to the blog section of our site at `http://localhost:9000/blog.html`
    and follow one of the listed links we should now see the selected post page rendered
    using our new layout template:![How to do it...](img/image00285.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在导航到我们的网站中的博客部分`http://localhost:9000/blog.html`并跟随列表中的一个链接，我们现在应该看到使用我们新的布局模板渲染的所选文章页面：![如何操作...](img/image00285.jpeg)
- en: Generating pages from a collection
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从集合生成页面
- en: In case we've got a collection of items in our site data, we might very well
    want to generate some pages using that collection. A site that displays blog posts,
    for instance, would probably want an individual page generated for each post in
    the collection of posts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在网站数据中有一个项目集合，我们很可能想使用该集合生成一些页面。例如，显示博客文章的网站可能希望为集合中的每篇文章生成一个单独的页面。
- en: Getting started
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe we'll be continuing work on the project from the *Creating and
    using a site layout* recipe in this chapter. Be sure to refer to it if you are
    not yet familiar with it's content. Before we start we should also make sure that
    the site builder and server are running. If they aren't yet running they can be
    started using the `grunt server` command.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续本章中“创建和使用站点布局”菜谱中的项目工作。如果你还不熟悉它的内容，请务必参考它。在我们开始之前，我们还应该确保站点构建器和服务器正在运行。如果它们还没有运行，可以使用`grunt
    server`命令启动它们。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a data file that contains a collection
    of our blog posts, and configuring our project to generate pages using that collection.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个包含我们博客文章集合的数据文件，并配置我们的项目使用该集合生成页面。
- en: 'Let''s start with creating the collection data that we''ll be generating pages
    from. We can do this by creating a file called `posts.yml` in the `src/data` directory
    and giving it the following content:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建我们将从中生成页面的集合数据开始。我们可以通过在`src/data`目录中创建一个名为`posts.yml`的文件并给它以下内容来实现这一点：
- en: '[PRE25]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In each of the page objects, the `filename` property indicates the filename
    of the page that is to be generated, the `data` property can be used to send any
    kind of metadata to the page, and the `content` property can be used to provide
    the content that should be rendered by the `body` tag.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在每个页面对象中，`filename`属性指示要生成的页面的文件名，`data`属性可以用来向页面发送任何类型的元数据，而`content`属性可以用来提供应由`body`标签渲染的内容。
- en: The aforementioned format is determined by the `pages` option for the `assemble`
    task that will be used later in this recipe.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述格式由`assemble`任务的`pages`选项确定，该选项将在本菜谱的后面使用。
- en: Now that we've got the out blog posts in a data collection, we can remove the
    page templates we previously used to represent them. This can be done by simply
    deleting the entire `src/templates/pages/posts` directory.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将博客帖子放入数据集合中，我们可以删除之前用来表示它们的页面模板。这可以通过简单地删除整个`src/templates/pages/posts`目录来完成。
- en: 'With our collection ready and the old page templates removed, we can now alter
    our configuration to render the post pages from the collection. We''ll do this
    by making the following changes to the `posts` target in the `assemble` task:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的集合准备就绪并且旧的页面模板被移除后，我们现在可以更改我们的配置以从集合中渲染帖子页面。我们将通过在`assemble`任务中对`posts`目标进行以下更改来实现这一点：
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The collection that should be used to generate the new pages from is indicated
    using the pages option. As can be seen in the preceding example, we're also making
    use of the `grunt.file.readYAML` utility to load the collection from the `src/data/posts.yml`
    file we created earlier.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该用于生成新页面的集合是通过`pages`选项指示的。正如前一个示例所示，我们还在使用`grunt.file.readYAML`实用程序来加载我们之前创建的`src/data/posts.yml`文件中的集合。
- en: The destination in the files object no longer indicates specific `files` that
    should be rendered, but now indicates the directory into which newly generated
    pages should be saved to.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件对象中的目标不再指示应该渲染的特定`files`，而是现在指示新生成的页面应该保存到的目录。
- en: 'Finally, we can restart our server that was running in the background for the
    configuration changes may take effect. After restarting, we should see some extra
    output with regards to the rendering of our post pages from the provided collection:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以重新启动在后台运行的服务器，以便配置更改生效。重启后，我们应该会看到一些额外的输出，这些输出与从提供的集合中渲染我们的帖子页面有关：
- en: '[PRE27]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we now navigate around the blog post items in our site, we should see that
    they now reflect the data that is being provided by the posts collection.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在在我们的网站上导航到博客帖子项，我们应该会看到它们现在反映了由帖子集合提供的资料。
- en: Creating a template helper
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模板助手
- en: In the process of building page templates, we often come across patterns that
    are repeated in their rendering logic. Template helpers allow us to wrap one of
    these identified patterns in such a way that it can be easily reused in our templates
    across our site.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建页面模板的过程中，我们经常会遇到在渲染逻辑中重复出现的模式。模板助手允许我们将这些已识别的模式之一封装起来，以便在网站上的模板中轻松重复使用。
- en: Arguments can be passed to template helpers, and the logic of the helpers themselves
    are implemented using a regular programming language, making the possibilities
    of what can be achieved with them quite numerous.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向模板助手传递参数，并且助手本身的逻辑是使用常规编程语言实现的，这使得使用它们所能实现的可能性相当多。
- en: Getting started
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: In this recipe we'll be continuing work on the project from the *Generating
    pages from a collection* recipe. Be sure to refer to it if you are not yet familiar
    with it's content. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续从“从集合生成页面”菜谱中的项目工作。如果您还不熟悉它的内容，请务必参考它。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们还没有运行，可以使用`grunt
    server`命令启动它们。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a template tag for automatically
    listing our posts on our blog page using the data in the posts collection.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个模板标签，用于自动列出我们博客页面上的帖子，使用的是帖子集合中的数据。
- en: Let's start by creating the `lib/helpers` directory, which is used to contain
    the source files that contain the code for our helpers.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建`lib/helpers`目录开始，该目录用于包含包含我们助手代码的源文件。
- en: 'With our directory ready now, we can create a file called `pages.js` in the
    `lib/helpers` directory and fill it with the following code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了目录，我们可以在`lib/helpers`目录中创建一个名为`pages.js`的文件，并填充以下代码：
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The preceding helper uses the name of the task target, provided by the `target`
    argument, to find the appropriate target configuration. It then extracts the `pages`
    collection from it and loops over this collection to render the helper's body,
    with each item as the context.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述助手使用由`target`参数提供的任务目标名称来查找适当的目标配置。然后，它从中提取`pages`集合并遍历此集合来渲染助手的主体，每个项目作为上下文。
- en: 'You can read more about the structure of this file and registering custom helpers
    at the following URL:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在以下 URL 上阅读更多关于此文件结构和注册自定义助手的信息：
- en: '[http://assemble.io/docs/Custom-Helpers.html](http://assemble.io/docs/Custom-Helpers.html)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://assemble.io/docs/Custom-Helpers.html](http://assemble.io/docs/Custom-Helpers.html)'
- en: 'To keep with the convention of our Grunt configuration file, we''ll add a property
    to the `config` task that indicates the name of the directory that will contain
    reusable libraries. After adding the property, the task should look similar to
    the following:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了遵循我们的 Grunt 配置文件约定，我们将在 `config` 任务中添加一个属性，指示将包含可重用库的目录名称。添加属性后，任务应类似于以下内容：
- en: '[PRE29]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Since we''ve added more code to our project in the form of the template helpers,
    we should probably alter our `watch` task so that changes to the template helper
    code would also trigger a rebuild of our site. This can be done by making the
    following changes to the `assemble` target in the `watch` task:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在项目中添加了更多以模板助手形式存在的代码，我们可能需要修改 `watch` 任务，以便模板助手代码的更改也会触发我们网站的重建。这可以通过对
    `watch` 任务中的 `assemble` 目标进行以下更改来实现：
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next we''ll alter our configuration to load the helpers in our `lib/helpers`
    directory, making them available for use in all our templates. This can be done
    by adding the following `helpers` option to the collection of options for the
    `assemble` task:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改我们的配置，以加载 `lib/helpers` 目录中的助手，使它们在我们的所有模板中可用。这可以通过向 `assemble` 任务的选项集合中添加以下
    `helpers` 选项来实现：
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With our template helpers loaded and ready to be used, we can make use of it
    on our site''s blog page to list links to all the posts in our posts collection.
    We do this by changing the contents of `src/templates/pages/blog.hbs` to the following:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的模板助手加载并准备好使用后，我们可以在网站的博客页面上使用它来列出我们帖子集合中所有帖子的链接。我们通过将 `src/templates/pages/blog.hbs`
    的内容更改为以下内容来实现这一点：
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Finally we can restart `server` that was running in the background so that the
    configuration changes can take effect. After restarting we should see that the
    list rendered on the blog page of the site at `http://localhost:9000/blog.html`
    now reflects the items in the posts collection:![How to do it...](img/image00286.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以重新启动在后台运行的 `server`，以便配置更改能够生效。重启后，我们应该看到在 `http://localhost:9000/blog.html`
    网站博客页面渲染的列表现在反映了帖子集合中的项目：![如何操作...](img/image00286.jpeg)
- en: Using a plugin
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: For the purpose of extending its core functionality, the Assemble framework
    provides a plugin system. There are currently only a handful of plugins available
    for Assemble, but having the plugin system available makes it easy for us to create
    and reuse extensions of our own, and perhaps even share them with the community.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展其核心功能，Assemble 框架提供了一个插件系统。目前只有少数几个插件可用于 Assemble，但拥有插件系统使得我们能够轻松创建和重用我们自己的扩展，甚至可能与社区分享。
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe we'll be continuing working on the project from the *Creating
    a template helper* recipe. Be sure to refer to it if you are not yet familiar
    with it's content. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续从 *创建模板助手* 菜谱中工作的项目。如果你还不熟悉它的内容，请务必参考它。在我们开始之前，我们还应该确保网站构建器和服务器正在运行。如果它们还没有运行，可以使用
    `grunt server` 命令启动它们。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through making use of the `assemble-middleware-sitemap`
    plugin to generate a well-formed **sitemap** that can be used by web crawlers
    to navigate and index the site.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们使用 `assemble-middleware-sitemap` 插件生成一个格式良好的 **sitemap**，该文件可以被网络爬虫用于导航和索引网站。
- en: 'First, we need to install the package that contains the `assemble-middleware-sitemap`
    plugin, and save it to our package dependencies. The following command does this
    for us:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装包含 `assemble-middleware-sitemap` 插件的包，并将其保存到我们的包依赖中。以下命令为我们完成了这项工作：
- en: '[PRE33]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next we''ll need to indicate that the plugin should be used by all the targets
    of the `assemble` tasks. This can be done by adding `plugins` configuration options
    to the `assemble` task in the Grunt configuration, indicating the name of the
    newly installed plugin package:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要指示插件应该被 `assemble` 任务的全部目标使用。这可以通过在 Grunt 配置文件中添加 `plugins` 配置选项到 `assemble`
    任务中来实现，指定新安装的插件包名称：
- en: '[PRE34]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, we can restart our server that was running in the background so that
    the configuration changes may take effect. After restarting we should see that
    the `robots.txt` and `site.xml` files have been generated in the `dist` directory.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以重新启动在后台运行的我们的服务器，以便配置更改能够生效。重启后，我们应该看到`robots.txt`和`site.xml`文件已经在`dist`目录中生成了。
