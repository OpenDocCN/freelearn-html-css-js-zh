- en: Chapter 12. Working with Real-Time Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 实时数据处理
- en: In today's app ecosystem, real-time features of various sorts are more or less
    becoming staple. Chat applications (and chat features for existing apps) are ever
    more common, push notifications bring news and views to users without them having
    to look for it, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的应用生态系统中，各种实时功能或多或少都成为了标配。聊天应用（以及现有应用的聊天功能）变得越来越普遍，推送通知将新闻和观点带给用户，而无需他们自己去寻找，等等。
- en: In this chapter, we will take a look at how we can incorporate some choice real-time
    features into our Ionic apps. We will do so by building a simple chat application
    without authentication, where at least two people can get together and talk about
    the wonders of life. In doing so, we will revisit what we learnt earlier about
    web sockets, as we will need to create a simple server for this end.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何将一些选择的实时功能整合到我们的Ionic应用中。我们将通过构建一个简单的聊天应用程序来实现这一点，该应用程序没有身份验证，至少两个人可以聚在一起谈论生活的奇迹。在这样做的过程中，我们将重新访问我们之前学到的关于WebSockets的知识，因为我们需要为此创建一个简单的服务器。
- en: A refresher – WebSockets
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾 - WebSockets
- en: Before we move on, let's have a quick refresher on an important concept that
    we visited earlier—WebSockets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们快速回顾一下我们之前讨论过的一个重要概念——WebSockets。
- en: WebSockets is a standardized Internet protocol, which allows for direct server-to-client
    communication over a network. This is rather unusual in the world of traditional
    client-server architecture, where almost all communication is initiated by the
    client and the server simply responds to such communication.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets是一种标准化的互联网协议，允许在网络上直接进行服务器到客户端的通信。这在传统的客户端-服务器架构世界中相当不寻常，几乎所有的通信都是由客户端发起，服务器只是简单地响应这样的通信。
- en: WebSockets makes it easy to build real-time apps because the server can dynamically
    push new data to the connected clients as soon as its state changes. This is ideal
    for chat applications, in which we would otherwise have to use more tedious and
    resource-consuming approaches, such as polling, in order to approximate the same
    effect.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets使得构建实时应用程序变得容易，因为服务器可以在其状态发生变化时动态地向连接的客户端推送新数据。这对于聊天应用程序来说是理想的，否则我们将不得不使用更加繁琐和资源消耗的方法，比如轮询，来近似达到相同的效果。
- en: For a deeper understanding of WebSockets, please refer to [Chapter 5](ch05.html
    "Chapter 5. Real-Time Data and WebSockets"), *Real-Time Data and WebSockets*,
    where we dealt with them in depth.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解WebSockets，请参考[第5章](ch05.html "第5章 实时数据和WebSockets")，“实时数据和WebSockets”，在那里我们深入讨论了它们。
- en: Getting the lay of the land
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解情况
- en: In this chapter, we are going to build a chat application that is hauntingly
    reminiscent of the one that we saw in [Chapter 5](ch05.html "Chapter 5. Real-Time
    Data and WebSockets"), *Real-Time Data and WebSockets*. The big difference, of
    course, is that our client will be an Ionic app this time, which will be able
    to interact fully with browser clients that are also connected to the same server.
    In doing so, we demonstrate how easy it is to build apps that almost seamlessly
    interact with apps on other platforms that use the same server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个聊天应用程序，它让人不禁想起我们在[第5章](ch05.html "第5章 实时数据和WebSockets")，“实时数据和WebSockets”中看到的那个。当然，最大的区别是，这次我们的客户端将是一个Ionic应用，它将能够与同样连接到同一服务器的浏览器客户端完全交互。通过这样做，我们展示了构建几乎可以无缝地与使用相同服务器的其他平台上的应用程序交互的应用程序是多么容易。
- en: What we will need
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们需要什么
- en: 'To get our app working, we will need:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的应用程序正常工作，我们需要：
- en: A server that can both receive and relay messages via WebSockets.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个既能接收消息又能通过WebSockets中继消息的服务器。
- en: An app that can connect to a server using WebSockets and send, receive, and
    process messages over the same protocol. All the sent data should be rendered
    in a way that is meaningful to the user.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个能够使用WebSockets连接到服务器并通过相同的协议发送、接收和处理消息的应用程序。所有发送的数据都应该以对用户有意义的方式呈现出来。
- en: In the spirit of this book, we will of course use Node.js for our server. To
    add WebSocket support to it, we will use the `socket.io` library, which you already
    saw in [Chapter 6](ch06.html "Chapter 6. Introducing Ionic"), *Introducing Ionic*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 符合本书精神，我们当然会使用Node.js作为我们的服务器。为了为其添加WebSocket支持，我们将使用`socket.io`库，这是你在[第6章](ch06.html
    "第6章 介绍Ionic")，“介绍Ionic”中已经看到的。
- en: For the client, we will use the standard `socket.io` client library, which was
    seen in [Chapter 5](ch05.html "Chapter 5. Real-Time Data and WebSockets"), *Real-Time
    Data and WebSockets*, (observed a trend here?). However, we will make some clever
    use of it in order to make things work smoothly on the app side of things.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于客户端，我们将使用标准的`socket.io`客户端库，这在[第5章](ch05.html "第5章 实时数据和WebSockets")，“实时数据和WebSockets”中已经看到了（这里有一个趋势？）。然而，我们将巧妙地利用它，以便在应用端顺利地运行。
- en: Let's go ahead and start setting things up!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续开始设置吧！
- en: Creating the server
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务器
- en: 'The first thing that we need to do is create a WebSocket server to relay messages
    between our clients. Find a suitable project folder, open your terminal/command
    line, and run the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个WebSocket服务器，以在我们的客户端之间中继消息。找一个合适的项目文件夹，打开你的终端/命令行，并运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create the basic Node.js project structure. You can enter whatever
    values you see fit:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建基本的Node.js项目结构。你可以输入任何你认为合适的值：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s install the dependencies that we will need. Run the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装我们需要的依赖项。运行以下命令：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will install `socket.io`, which is all we will need in order to get our
    server running.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装`socket.io`，这是我们为了让服务器运行所需要的一切。
- en: 'Next, create the `server.js` file in the current folder and add the following
    content to it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在当前文件夹中创建`server.js`文件，并向其中添加以下内容：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Looks familiar, doesn''t it? This is pretty much the exact same server that
    we developed back in [Chapter 5](ch05.html "Chapter 5. Real-Time Data and WebSockets"),
    *Real-Time Data and WebSockets*! It even has that beautiful, modern chat UI that
    we built there. All that we need to do is serve it. To do so, add the `index.html`
    file to the current folder and add the following to it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很熟悉，不是吗？这几乎就是我们在[第5章](ch05.html "第5章。实时数据和WebSockets")中开发的完全相同的服务器，*实时数据和WebSockets*！它甚至有我们在那里构建的美丽现代的聊天UI。我们需要做的就是提供它。为此，将`index.html`文件添加到当前文件夹，并添加以下内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That's all there is to it. Our browser-based chat is now all up and running...again!
    I won't explain how everything works here. Checkout [Chapter 5](ch05.html "Chapter 5. Real-Time
    Data and WebSockets"), *Real-Time Data and WebSockets*, if anything seems unclear.
    Whenever you are ready, let's head right on and get started with our app client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们基于浏览器的聊天现在已经全部运行起来了！我不会在这里解释一切是如何工作的。如果有任何不清楚的地方，请查看[第5章](ch05.html "第5章。实时数据和WebSockets")*实时数据和WebSockets*。准备好了，让我们继续并开始我们的应用程序客户端。
- en: Building the chat app
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建聊天应用程序
- en: One of our primary concerns when developing mobile experiences is creating an
    interface that is intuitive for users to use. Fortunately, Ionic comes loaded
    with some very convenient features to make this possible. Before we get there
    though, let's set up the basics.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发移动体验时，我们的主要关注之一是创建一个对用户来说直观易用的界面。幸运的是，Ionic加载了一些非常方便的功能，使这成为可能。在我们到达那里之前，让我们先设置好基础知识。
- en: Setting up the basic app structure
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置基本应用程序结构
- en: 'Let''s start by creating a basic app. Create a suitable project folder, which
    is different from that of the chat server that we created earlier. Navigate to
    the folder, open a terminal/command line, and run the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个基本应用程序开始。创建一个适当的项目文件夹，与我们之前创建的聊天服务器的文件夹不同。转到该文件夹，打开终端/命令行，并运行以下命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we have seen before, this will create an empty Ionic project for us to fill
    with love and good things. Have a look around. Not much to see here, right? We
    will change that soon enough. Hang tight.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，这将为我们创建一个空的Ionic项目，供我们填充爱和美好的东西。四处看看。在这里没有太多可见的内容，对吧？我们很快就会改变这一点。耐心等待。
- en: 'It''s early, but let''s get our Ionic preview server going right away so that
    we can see the app live. Without changing anything, run the following from your
    terminal / command line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们立即启动Ionic预览服务器，以便可以实时查看应用程序。在不更改任何内容的情况下，从终端/命令行运行以下命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will bring up the preview for both the Android and iOS displays. As expected,
    there is not much to see here yet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示Android和iOS显示的预览。正如预期的那样，目前还没有太多可见的内容：
- en: '![Setting up the basic app structure](img/B04653_12_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设置基本应用程序结构](img/B04653_12_01.jpg)'
- en: 'Let''s go ahead and set up the basics. The first thing that we need to deal
    with is routing. In the `js/app.js` file, make sure that you have the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置基础知识。我们需要处理的第一件事是路由。在`js/app.js`文件中，确保您有以下内容：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we defined a basic, abstract state called `app`, which we will leave as
    the root state for the app as a whole. The only child state of this state is `app.state`,
    which will contain the actual chat view and associated logic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个基本的抽象状态，称为`app`，我们将其作为整个应用程序的根状态。这个状态的唯一子状态是`app.state`，它将包含实际的聊天视图和相关逻辑。
- en: It may seem counter-intuitive to add states for an app that we really only want
    to have a single view of. However, this is a good architectural precaution to
    take in case we want to expand the app further.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为一个我们只想要单个视图的应用添加状态可能看起来有些违反直觉。然而，这是一个很好的架构预防措施，以防我们想要进一步扩展应用程序。
- en: 'Now, let''s add some basic view information. Create a **templates** folder
    in your app''s `www` folder and then proceed to create a file named `app-chat.html`
    in it, which has the following content:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一些基本的视图信息。在应用的`www`文件夹中创建一个**templates**文件夹，然后继续在其中创建一个名为`app-chat.html`的文件，其内容如下：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, your app preview should look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序预览应该是这样的：
- en: '![Setting up the basic app structure](img/B04653_12_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![设置基本应用程序结构](img/B04653_12_02.jpg)'
- en: This is slightly better, but we're not quite there yet. Next, we will add the
    actual chat layout to it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样稍微好一点，但我们还没有完全到位。接下来，我们将向其中添加实际的聊天布局。
- en: The input section
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入部分
- en: 'Go ahead and modify the `app-chat.html` file so that it looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 继续修改`app-chat.html`文件，使其看起来像这样：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we attached a footer to our app—an element that will be permanently fixed
    to the bottom of the viewport. Inside this footer, we defined an input field to
    add a message and an associated button to actually send it. To make the input
    box scale appropriately, we need to add the following to the `css/style.css` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将一个页脚附加到我们的应用程序中——这是一个将永久固定在视口底部的元素。在这个页脚中，我们定义了一个输入字段来添加消息和一个相关的按钮来实际发送它。为了使输入框适当地缩放，我们需要将以下内容添加到`css/style.css`文件中：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Having done all this, we will end up with the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，我们将得到以下结果：
- en: '![The input section](img/B04653_12_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![输入部分](img/B04653_12_03.jpg)'
- en: So far, so good. *Gotta* love that spicy green touch. On we go!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。*必须*喜欢那种辣味的绿色。我们继续前进！
- en: The message view
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息视图
- en: Now, let's create the part of our app that will display all the messages in
    our most important chat.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建应用程序的一部分，用于显示我们最重要的聊天中的所有消息。
- en: 'Modify the `templates/app-chat.html` file so that the `<ion-content>` tag looks
    like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`templates/app-chat.html`文件，使`<ion-content>`标签看起来像下面这样：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code creates a standard Ionic list that contains a set of `item-avatar`
    elements. These are standard list items in Ionic, which make it easy to show an
    avatar image, a heading, and some text, as shown in the following example from
    the Ionic element reference:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个包含一组`item-avatar`元素的标准Ionic列表。这些是Ionic中的标准列表项，可以轻松显示头像图片、标题和一些文本，如Ionic元素参考中的示例所示：
- en: '![The message view](img/B04653_12_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![消息视图](img/B04653_12_04.jpg)'
- en: However, in our case, we will skip over the actual images and just use the header
    and text. These two make for a very convenient way of showing a single chat message
    along with the name of the person sending it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的情况下，我们将跳过实际的图像，只使用标题和文本。这两者非常方便地显示单个聊天消息以及发送者的姓名。
- en: 'Next, add the following to the `css/style.css` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下内容添加到`css/style.css`文件中：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code is needed in order to override the default Ionic styling
    for the `item-avatar` element. This allows for the title and text to be positioned
    either right or left. This will bring the final look closer to the more popular
    chat apps, where the texts of other participants are usually positioned to the
    right of the flow, whereas our own are positioned to the left.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了覆盖`item-avatar`元素的默认Ionic样式，需要上述代码。这允许标题和文本可以被定位在右侧或左侧。这将使最终外观更接近于更受欢迎的聊天应用程序，其中其他参与者的文本通常被定位在流的右侧，而我们自己的文本被定位在左侧。
- en: 'Your preview should now look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您的预览现在应该是这样的：
- en: '![The message view](img/B04653_12_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![消息视图](img/B04653_12_05.jpg)'
- en: That does it for a very basic chat interface. Now, let's go ahead and add some
    logic to it all.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个非常基本的聊天界面。现在，让我们继续为其添加一些逻辑。
- en: The ChatService function
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChatService函数
- en: In order to communicate with the WebSocket server, we will create a service
    that will allow us both to send messages to the server as well as subscribe to
    the events sent by it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与WebSocket服务器通信，我们将创建一个服务，允许我们向服务器发送消息，并订阅由服务器发送的事件。
- en: 'To start off, create a file named `js/services.js` and insert the following
    code in it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`js/services.js`的文件，并在其中插入以下代码：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our `service` here exposes the following two core features to the user:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`service`在这里向用户公开了以下两个核心功能：
- en: '`Emit`: This allows the user to broadcast a message to the server'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Emit`：这允许用户向服务器广播消息'
- en: '`On`: This allows the user to subscribe to the following two events:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`On`：这允许用户订阅以下两个事件：'
- en: '`UserConnectedEvent`: This is fired whenever a new user connects to the app'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserConnectedEvent`: 每当新用户连接到应用程序时触发'
- en: '`MessageReceivedEvent`: This is fired whenever a new message is received from
    the server'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageReceivedEvent`: 每当从服务器接收到新消息时触发'
- en: The passing of messages in the preceding code is implemented by means of the
    `$rootScope` function, which already provides us with a robust mechanism. We merely
    wrap it up in order to meet our own ends.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，消息的传递是通过`$rootScope`函数实现的，它已经为我们提供了一个强大的机制。我们只是为了满足我们自己的目的而将其包装起来。
- en: 'To integrate `service` into our app, add the following to the `index.html`
    file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`service`集成到我们的应用程序中，请将以下内容添加到`index.html`文件中：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, list the chat services as a dependency in the `js/app.js` file, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`js/app.js`文件中将聊天服务列为依赖项，如下所示：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding WebSockets to the mix
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将WebSockets添加到混合中
- en: 'Now that the service is connected to the app, let''s bring WebSockets into
    play to actually make it do something fun! To start off, add the following to
    the `index.html` file in order to import the `socket.io` client library:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，服务已连接到应用程序，让我们开始使用WebSockets来使其真正有趣！首先，在`index.html`文件中添加以下内容，以导入`socket.io`客户端库：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Replace the `x.x.x` in the preceding code with whatever version of `socket.io`
    you are running on your server (if you are not sure, check the `package.json`
    file in the chat server project that we created earlier).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，用你在服务器上运行的`socket.io`版本（如果不确定，请检查我们之前创建的聊天服务器项目中的`package.json`文件）替换`x.x.x`。
- en: 'This will give us the global object named `io`, which can be used to interact
    with a WebSocket server. Global objects are evil. Very evil. So, as a matter of
    good principle, we will make the best effort to contain it in our chat service,
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个名为`io`的全局对象，可以用来与WebSocket服务器交互。全局对象是邪恶的。非常邪恶。因此，作为一个良好原则的问题，我们将尽最大努力将其包含在我们的聊天服务中，如下所示：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'What we have done here is pretty straightforward and can be summarized as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的事情非常简单，可以总结如下：
- en: We listen for events from the WebSocket server using the `on` function and simply
    pass these events along to the `$rootScope` function. By doing so, the other parts
    of our app can register listeners and callbacks for these events in order to act
    on them.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`on`函数从WebSocket服务器监听事件，并简单地将这些事件传递给`$rootScope`函数。通过这样做，我们应用的其他部分可以注册监听器和回调函数，以便对其进行操作。
- en: We use the `emit` function of the socket in order to send messages back to the
    server.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用socket的`emit`函数向服务器发送消息。
- en: This concludes the hard logic behind our app. Next, we will tie it all together
    by making our chat view dynamic.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们应用程序背后的硬逻辑。接下来，我们将通过使我们的聊天视图动态化来将所有内容联系起来。
- en: Updating the chat view
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新聊天视图
- en: Whenever you or another connected user submits something to the chat, you want
    the chat display to show the new message. If that sounds like a job for `ng-repeat`,
    that's because it...well...really isn't.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您或其他连接的用户提交聊天内容时，您希望聊天显示屏显示新消息。如果这听起来像是`ng-repeat`的工作，那是因为...嗯...实际上并不是。
- en: While `ng-repeat` is a very powerful directive on its own, it can unfortunately
    incur severe performance penalties as data sets grow over time, especially when
    it comes to mobile devices, where processing power is limited. To work around
    this, Ionic offers another directive to render dynamic datasets—`collection-repeat`.
    Without much intervention from our side, `collection-repeat` will do a lot of
    the really heavy lifting when it comes to working with collections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`ng-repeat`本身是一个非常强大的指令，但随着数据集随着时间的推移增长，特别是在移动设备上，处理能力有限，它可能会产生严重的性能损失。为了解决这个问题，Ionic提供了另一个指令来渲染动态数据集——`collection-repeat`。在我们的情况下，`collection-repeat`将在处理集合时做很多繁重的工作，而我们几乎不需要干预。
- en: 'However, before we can do this, we will need to add a controller for our chat
    view. Go ahead and create the `js/app.controllers.js` file. Import it and add
    it as a dependency in `index.html` and `app.js` respectively:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在我们这样做之前，我们需要为我们的聊天视图添加一个控制器。继续创建`js/app.controllers.js`文件。分别在`index.html`和`app.js`中导入它并将其添加为依赖项：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, let''s add some basic content to the file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们向文件添加一些基本内容：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, let''s bind the controller to our app''s chat state. In `app.js`,
    make sure that your state definition looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将控制器绑定到我们应用程序的聊天状态。在`app.js`中，确保您的状态定义如下所示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are now ready to start adding some serious functionality to our app! Go
    ahead and add the following to your controller:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始为我们的应用程序添加一些严肃的功能！继续在您的控制器中添加以下内容：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, modify the `templates/app-chat.html` file in order to connect to the
    controller data, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改`templates/app-chat.html`文件以连接到控制器数据，如下所示：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that we are bringing the fabled `collection-repeat` function into play
    here with pretty much no configuration needed! The app will now respond both to
    our own message sending events as well as others' messages that are coming in
    from the server. Fire it up in your preview and try it out!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里使用了传说中的`collection-repeat`函数，几乎不需要任何配置！应用程序现在将对我们自己发送的消息事件以及从服务器接收的其他消息做出响应。在预览中启动它并尝试一下吧！
- en: Going further
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更进一步
- en: Here, to keep things simple, we simulated our chat app on the emulator. However,
    we could have of course had even more fun if we actually got it running on a set
    of physical devices. If you are the kind of person with so much money that you
    can pick up a bunch of iPhones and Android devices on your way back from the grocery
    store (or just have a lot of friends with the same devices), why not make it a
    fun project of hosting your chat server on an actual **VPS** (**Virtual Private
    Server**) and connect the project to it? You and your friends can discuss plans
    for world domination in your very own app!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，为了保持简单，我们在模拟器上模拟了我们的聊天应用程序。但是，如果我们真的在一组物理设备上运行它，我们当然可以更有趣。如果您是那种在杂货店回来时可以随便买一堆iPhone和Android设备的人（或者只是有很多朋友有相同的设备），为什么不将其作为一个有趣的项目，将您的聊天服务器托管在实际的**VPS**（虚拟专用服务器）上并将项目连接到它？您和您的朋友可以在自己的应用程序中讨论世界统治的计划！
- en: The VPS that you want to use is up to you, but we can think of several options
    for you to consider. Check out [https://www.digitalocean.com/](https://www.digitalocean.com/)
    and [https://www.linode.com/](https://www.linode.com/) to fire up your backend.
    There are also several more specific solutions that enable you to fire up your
    backend with less configuration such as **Heroku**. Many of the prominent services
    make it extremely easy to configure the more crucial elements of server functionality
    such as DNS.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要使用的VPS取决于您，但我们可以考虑几个选项供您考虑。查看[https://www.digitalocean.com/](https://www.digitalocean.com/)和[https://www.linode.com/](https://www.linode.com/)来启动您的后端。还有一些更具体的解决方案，可以让您以较少的配置启动后端，比如**Heroku**。许多知名服务都非常容易配置服务器功能的更关键元素，比如DNS。
- en: Once you configure your VPS and run your chat server, change the target domain
    in your app from localhost to the domain/IP of your server. Invite your friends
    and chat away! However, in order to make sure that the integrity of your users
    is protected, make sure that you enable communication only over HTTPS for actual
    live applications.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您配置好VPS并运行聊天服务器，就将应用中的目标域从localhost更改为服务器的域名/IP。邀请您的朋友并开始聊天吧！但是，为了确保用户的完整性得到保护，请确保您只在实际的实时应用程序中启用基于HTTPS的通信。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored how we can incorporate real-time functionality
    into an Ionic app using `socket.io`. In the process of doing so, we built a simple
    chat application, which can be expanded later in order to learn advanced real-time
    features.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何在Ionic应用程序中使用`socket.io`将实时功能整合进来。在这个过程中，我们构建了一个简单的聊天应用程序，以后可以扩展学习高级的实时功能。
- en: In the next chapter, we'll take a look at how to set up WebSocket communication
    through the app in order to subscribe to dynamic notifications from a server.
    We will elaborate on how this helps us develop truly dynamic applications such
    as chat apps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何通过应用程序设置WebSocket通信，以便订阅来自服务器的动态通知。我们将详细介绍这如何帮助我们开发诸如聊天应用程序之类的真正动态的应用程序。
