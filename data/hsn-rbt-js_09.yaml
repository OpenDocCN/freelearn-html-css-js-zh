- en: Getting the Information You Need
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取你需要的信息
- en: We've let our Pi discover its immediate surroundings, and let it show data through
    various means. We've even given them the ability to move! But there's a cosmos
    of data to be collected, and sometimes the data you want can't be collected locally.
    That's where the internet, and initiatives to make more and more data freely available,
    come into play. In this chapter, we'll look into connecting your Pi to the internet
    and obtaining weather information in order to create a weather dashboard.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让我们的 Pi 发现其周围环境，并通过各种方式显示数据。我们甚至赋予了它们移动的能力！但是，还有大量的数据需要收集，有时你想要的数据无法在本地收集。这就是互联网和使更多数据免费可用的倡议发挥作用的地方。在本章中，我们将探讨如何将你的
    Pi 连接到互联网并获取天气信息，以便创建天气仪表板。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why connect your NodeBots to the internet?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要把你的 NodeBots 连接到互联网？
- en: Getting weather data on our Pi with OpenWeatherMap
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenWeatherMap 在我们的 Pi 上获取天气数据
- en: Building a weather dashboard with an LCD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 LCD 构建天气仪表板
- en: Scraping websites for data with your Pi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pi 爬取网站上的数据
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this project, you'll want your Pi and an LCD character display with an I²C
    interface. You can purchase and solder together an LCD ([https://www.adafruit.com/product/198](https://www.adafruit.com/product/198))
    and backpack ([https://www.adafruit.com/product/292](https://www.adafruit.com/product/292))
    from Adafruit, or a pre-built module via SainSmart ([https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/](https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你将需要你的 Pi 和一个带有 I²C 接口的 LCD 字符显示。你可以从 Adafruit 购买并焊接一个 LCD ([https://www.adafruit.com/product/198](https://www.adafruit.com/product/198))
    和背包 ([https://www.adafruit.com/product/292](https://www.adafruit.com/product/292))，或者通过
    SainSmart ([https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/](https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/))
    购买预构建模块。
- en: You'll also want to make sure your Pi can access the outside world with internet
    access, as we set it up to in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml),
    *Setting Up Your Development Environment.*
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要确保你的 Pi 可以通过互联网访问外部世界，正如我们在[第 1 章](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml)，*设置你的开发环境*中设置的那样。
- en: The code for this chapter is available at: [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在以下位置找到：[https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09)。
- en: Why connect your NodeBots to the internet?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要把你的 NodeBots 连接到互联网？
- en: While sensors can provide local data, sometimes you want to display data from
    far away or data from sensors attached to other devices. This is where we can
    really leverage Node.js and npm packages in our favor for our Raspberry Pi projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然传感器可以提供本地数据，但有时你希望显示来自远方或连接到其他设备上的传感器的数据。这正是我们可以真正利用 Node.js 和 npm 包来为我们的
    Raspberry Pi 项目带来便利的地方。
- en: Using the power of npm modules
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 模块的力量
- en: Back in [Chapter 2](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml), *Creating Your
    First Johnny-Five Project*, we used the `color npm` module to manage colors for
    us. We've used the `barcli` module to get our sensor data into bar graphs. Now
    it's time to use the request `npm` module to retrieve data from websites for us!
    This allows us to simplify development over microcontrollers that use C by not
    having to create HTTP requests by hand each time, and being able to use asynchronous
    calls.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 2 章](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml)，*创建你的第一个 Johnny-Five 项目*中，我们使用了
    `color npm` 模块来管理颜色。我们使用了 `barcli` 模块将传感器数据放入条形图中。现在是时候使用请求 `npm` 模块为我们从网站上检索数据了！这允许我们简化使用
    C 编写的微控制器开发，无需每次都手动创建 HTTP 请求，并且能够使用异步调用。
- en: 'For those unfamiliar with the request module, we''ll use it to make HTTP GET
    requests like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉请求模块的人来说，我们将使用它来执行类似于这样的 HTTP GET 请求：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We give the `request.get()` call a URL and a callback that receives an error
    (that is, hopefully, null), a response object, and a body which is conveniently
    extracted for us from the full request object (which can be huge and complex).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给 `request.get()` 调用一个 URL 和一个回调，该回调接收一个错误（希望是 null），一个响应对象，以及一个体，它方便地从完整的请求对象（可能非常大且复杂）中提取出来。
- en: Using the data you collect
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用你收集的数据
- en: 'You can use data you collect from the internet for many different projects:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用从互联网收集的数据进行许多不同的项目：
- en: I have a string of lights in my lab that are controllable by Twitch live chat
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在实验室里有一串可以由Twitch实时聊天控制的灯光
- en: You can compare information in a local project to data from far away
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在本地项目中比较来自远方的信息
- en: You can just use random data! Markov chains and other semi-random data can make
    for fun projects
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用随机数据！马尔可夫链和其他半随机数据可以用于有趣的项目
- en: 'Just a few things you''ll want to know that will be going into your data collection
    project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你将想要了解的，将进入你的数据收集项目：
- en: Is this a REST API? Will I get JSON data back or will it need to be parsed?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个REST API吗？我会得到JSON数据还是需要解析？
- en: 'Is this scraping an HTTP website? How will I parse out the HTML data I''m looking
    for? (Caution: this gets tricky and can be brittle if the website you''re scraping
    changes often.)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是在抓取HTTP网站吗？我将如何解析出我正在寻找的HTML数据？（注意：如果你要抓取的网站经常更改，这可能会变得很棘手，也可能很脆弱。）
- en: Do I need an API key or JSON Web Token (JWT) for authentication purposes?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我需要API密钥或JSON Web令牌（JWT）来进行身份验证吗？
- en: Some things to keep in mind
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些需要注意的事项
- en: 'Here are some things to keep in mind when doing internet data collection on
    your Pi projects:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Pi项目上进行互联网数据收集时，以下是一些需要注意的事项：
- en: Wi-Fi uses a lot of power, so if you're running your project on a battery, you'll
    need to keep power consumption in mind.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi消耗的电量很多，所以如果你的项目是使用电池运行的，你需要注意功耗。
- en: Use your robotics powers for good, don't build projects that do harm, collect
    information they shouldn't, or have other dubious purposes!
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用你的机器人力量做好事，不要构建有害的项目，收集他们不应该收集的信息，或者有其他可疑的目的！
- en: Parsing out huge JSON or HTML responses can take a while on the Pi, so take
    a look at what you're getting if your project is running a bit slowly.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Pi上解析大量的JSON或HTML响应可能需要一段时间，所以如果你的项目运行得有点慢，请查看你得到的内容。
- en: Getting weather data on our Pi with OpenWeatherMap
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenWeatherMap在我们的Pi上获取天气数据
- en: We're going to build a weather bot for this one, and while we could use a temperature
    sensor, that'd only tell us what it's like indoors, and usually we'd like to see
    what the weather's like outside before we head out the door. So we're going to
    use the OpenWeatherMap API to get data and display it on a character LCD; but
    let's walk before we can run by starting with getting the data from the API to
    the Pi.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此构建一个天气机器人，虽然我们可以使用温度传感器，但这只会告诉我们室内的情况，而我们通常在出门前想看看外面的天气。因此，我们将使用OpenWeatherMap
    API来获取数据并在字符LCD上显示；但让我们先从获取API到Pi的数据开始，然后再开始跑。
- en: Getting an OpenWeatherMap API key
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取OpenWeatherMap API密钥
- en: 'First, you''ll need to sign up for an account at [https://openweathermap.org/](https://openweathermap.org/),
    and generate an API key. Then, click your username in the upper-left corner and
    select API Keys from the tabs that appear near the top of the page:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要在[https://openweathermap.org/](https://openweathermap.org/)注册一个账户，并生成一个API密钥。然后，点击页面左上角的用户名，并从顶部出现的标签中选择API
    Keys：
- en: '![](img/5ea5f6af-f9d7-42fc-b514-ffb3398d58c4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ea5f6af-f9d7-42fc-b514-ffb3398d58c4.png)'
- en: Generate an API key on this page and keep the tab open; we'll use it in the
    next section to get the info we need.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上生成一个API密钥并保持标签页打开；我们将在下一节中使用它来获取所需的信息。
- en: Next, open the API link in a separate tab; you'll see the main API function
    calls on this page. The one we're looking for is right at the top – current weather
    data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在另一个标签页中打开API链接；你将在这个页面上看到主要的API功能调用。我们要找的就在顶部 – 当前天气数据。
- en: '![](img/c10209e8-451e-475f-975f-4236ce2f3bf3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c10209e8-451e-475f-975f-4236ce2f3bf3.png)'
- en: 'Click the API doc button and we''ll figure out what URL we''ll need to make
    a request to. At the time of writing, the URL is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 点击API文档按钮，我们将确定需要向哪个URL发起请求。在撰写本文时，URL如下：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you go to that URL in your browser with your city and API key filled in,
    you should see something like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用你的城市和API密钥填写浏览器中的该URL，你应该会看到如下内容：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If those temperatures look a little high to you (even for Austin, TX), that's
    because they're in degrees Kelvin. We'll pass the units parameter in our URL in
    our project set to `metric` for degrees Celsius or 'imperial' for degrees Farenheit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些温度看起来有点高（即使是对于德克萨斯州的奥斯汀来说），那是因为它们是以开尔文为单位的。在我们的项目中，我们将通过设置URL中的单位参数为`metric`来获取摄氏度，或者为`imperial`获取华氏度。
- en: Now we're ready to code in the `npm` request module and get our data into our
    Pi.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在`npm`请求模块中编写代码，并将数据传输到我们的Pi上。
- en: Bringing in request
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在发送请求
- en: 'Let''s write a basic program without Johnny-Five to collect our data on the
    Pi before adding in our LCD. In a file on your Pi or ready to be moved to your
    Pi called `weather-test.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个基本的程序，不使用Johnny-Five，在添加LCD之前在我们的Pi上收集数据。在你的Pi上的一个文件中，或者准备好移动到Pi上的文件，命名为`weather-test.js`：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parsing the response
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析响应
- en: 'The JSON object that is printed out by the console looks something like this
    (formatted for easier reading):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台打印出的JSON对象看起来大致如此（格式化以便于阅读）：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That''s a lot of weather data! Luckily, because the request `npm` module was
    passed the `json`: true property in the options, it assumes that anything passed
    back is JSON and parses it for you, so you can access data properties right away:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '那是大量的天气数据！幸运的是，因为`npm`模块请求在选项中传递了`json`: true属性，它假设返回的任何内容都是JSON，并为你解析它，所以你可以立即访问数据属性：'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Building a weather dashboard with an LCD
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LCD构建天气仪表盘
- en: Now that we have our weather data, it's time to wire our character LCD to our
    Pi and use it to show the weather data. We'll explore the Johnny-Five LCD object,
    wire it to the Pi, and code it all together with Johnny-Five and the `npm` request
    module.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了天气数据，是时候将字符LCD连接到我们的Pi上，并使用它来显示天气数据了。我们将探索Johnny-Five LCD对象，将其连接到Pi，并使用Johnny-Five和`npm`请求模块将它们全部编码在一起。
- en: Adding an LCD to the Pi
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将LCD添加到Pi上
- en: 'Refer to the following diagram for the connection:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下图解进行连接：
- en: '![](img/6662c3f9-43c8-4744-b1a7-3b6a465954fd.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6662c3f9-43c8-4744-b1a7-3b6a465954fd.png)'
- en: Keep in mind that backpack with the I²C interface is on the back of the LCD;
    I moved it forward in the diagram to help you see the connections to the Pi.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，带有I²C接口的背板位于LCD的背面；我在图中将其向前移动，以便帮助你看到与Pi的连接。
- en: The LCD object
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LCD对象
- en: Let's take a look at the LCD object in the Johnny-Five documentation in order
    to figure out how to construct and use our LCD in our weather dashboard code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Johnny-Five文档中的LCD对象，以便了解如何在我们的天气仪表盘代码中构建和使用我们的LCD。
- en: Constructing our LCD
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的LCD
- en: Usually, an LCD without the I2C can take up to eight pins! That's a lot, and
    I like as few wires as possible in my robotics projects (easier to debug later).
    With our backpack, we only need the two power pins and two I2C pins. But that
    also means we'll need to find our controller—if you are using the Adafruit backpack,
    then our controller is the `PCF8574`; if you're bought another backpack, make
    sure it uses one of the PCF8574x chips!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，没有I2C的LCD最多可以占用八个引脚！这很多，我喜欢在我的机器人项目中使用尽可能少的线（以后更容易调试）。有了我们的背板，我们只需要两个电源引脚和两个I2C引脚。但这也意味着我们需要找到我们的控制器——如果你使用的是Adafruit背板，那么我们的控制器就是`PCF8574`；如果你购买了另一个背板，请确保它使用PCF8574x芯片之一！
- en: We'll also need the size of the LCD in rows and columns of characters—most are
    2 rows by 16 columns, but you may have gone bigger with the 4 row by 20 columns
    character model. In either case, use whichever works for the LCD you attached
    to the backpack.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要LCD的行和列字符大小——大多数是2行16列，但你可能使用了4行20列的字符模型。在任一情况下，使用适用于你连接到背板的LCD的任何大小。
- en: 'With all that in mind, our constructor should look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，我们的构造函数应该看起来像这样：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we've constructed our LCD, let's see what we need to get set up and
    get characters on the screen!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了LCD，让我们看看我们需要设置什么，以及如何在屏幕上显示字符！
- en: Setting up the LCD
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置LCD
- en: 'First thing we need to do is turn the backlight on:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是打开背光：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we''ll want to make the blinking cursor disappear:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们想要让闪烁的光标消失：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we're ready to learn about moving the cursor, printing statements, and
    clearing the LCD.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好学习如何移动光标、打印语句和清空LCD。
- en: Printing to and clearing the LCD
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印到LCD并清空LCD
- en: 'Before we print, we want to make sure that the LCD is cleared out:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印之前，我们想要确保LCD被清空：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And that the cursor is in the home (row 0, col 0) position:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 并且光标位于起始位置（行0，列0）：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we can print to the LCD:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以打印到LCD：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note, you can also chain LCD functions together, as Johnny-Five returns the
    LCD object from every object function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你还可以将LCD函数链接在一起，因为Johnny-Five从每个对象函数返回LCD对象：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we have everything we need to start making our dashboard!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有了开始制作我们的仪表盘所需的一切！
- en: Coding it all together
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有这些编码在一起
- en: 'We need to take what we''ve learned in this chapter and put it together. Start
    by creating a file called `weather-dashboard.js` in your `project` folder, and
    setting up your Johnny-Five, Raspi-IO, and request  libraries, constructing your
    `Board` object, and creating your `board.on(''ready'')` handler:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将本章学到的知识整合起来。首先，在你的`project`文件夹中创建一个名为`weather-dashboard.js`的文件，并设置你的Johnny-Five、Raspi-IO和request库，构建你的`Board`对象，并创建`board.on('ready')`处理程序：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, inside the `board.on(''ready'')` handler, construct and set up our LCD:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`board.on('ready')`处理程序内部，构建和设置我们的LCD：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we''ll create a function that gets the weather data, and set it on an
    interval of one minute:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个获取天气数据的函数，并将其设置为每分钟一次的间隔：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the request callback, we''ll clear, and write to, the LCD:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求回调中，我们将清除并写入LCD：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, call the `getWeather()` function at the start to prevent the project
    from taking a full minute before showing anything:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在开始时调用`getWeather()`函数，以防止项目在显示任何内容之前需要整整一分钟：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once you have the full code together, load the `project` folder onto our Pi
    the following, navigate to the folder in your Pi SSH session, and run the following
    commands:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将全部代码整合完毕，将`project`文件夹加载到我们的Pi上，在Pi的SSH会话中导航到该文件夹，并运行以下命令：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should have the temperature and conditions for the city you put in appear
    on the LCD, and they should refresh every minute.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到你输入的城市温度和条件出现在LCD上，并且它们应该每分钟刷新一次。
- en: 'Now that we''ve seen a project where the Pi pulls from a nice neat JSON REST
    API, let''s take a crack at getting data from a bit more difficult source: HTML
    scraping.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一个项目，其中Pi从整洁的JSON REST API中获取数据，让我们尝试从更复杂的数据源获取数据：HTML抓取。
- en: Project – scraping data from websites with your Pi
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 使用Pi从网站抓取数据
- en: HTML scraping is the process of making a request to a webpage in order to obtain
    the HTML itself, so data can be parsed out of it. We're going to build a bot that
    shows whether `johnny-five.io` is up or not by scraping [https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/),
    a site that tells you if a site is down from multiple sources.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: HTML抓取是指向网页发起请求以获取HTML本身的过程，以便从中解析出数据。我们将构建一个机器人，通过抓取[https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/)，一个告诉你网站是否宕机的网站，来显示`johnny-five.io`是否正常运行。
- en: You don't need to change the wiring setup from the weather dashboard for this
    project, our current hardware is all we need.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你不需要更改天气仪表板的布线设置，我们当前所需的硬件就足够了。
- en: Scraping downforeveryoneorjustme.com for johnny-five.io
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从downforeveryoneorjustme.com抓取johnny-five.io
- en: 'First, go to [https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/)
    and enter `johnny-five.io` in the URL input, and hit *Enter*. You should end up
    at [https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io),
    where hopefully you''ll see a rather simple page that looks like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问[https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/)并在URL输入框中输入`johnny-five.io`，然后按*Enter*。你应该会到达[https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io)，希望你会看到一个相当简单的页面，如下所示：
- en: '![](img/f20a3b72-33f2-4fa0-ba9d-5a021f349d43.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f20a3b72-33f2-4fa0-ba9d-5a021f349d43.png)'
- en: 'Now to prepare for our web scraping code, we need to know what HTML element
    we''re looking for as well as the URL. Right-click the It''s just you. and select
    Inspect (or whichever variation it is on your browser. In Chrome, you''ll see
    something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了准备我们的网络抓取代码，我们需要知道我们要查找的HTML元素以及URL。右键点击“只是你”并选择“检查”（或你浏览器上的任何变体。在Chrome中，你会看到如下内容）：
- en: '![](img/11d40637-b797-45ae-abc4-a9b83c7c9f88.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/11d40637-b797-45ae-abc4-a9b83c7c9f88.png)'
- en: 'This is one of the perils of web scraping: there''s not always a lot to go
    on to find your element. The closest we get is the first paragraph (`p` tag) of
    the div with ID `domain-main-content`. We''ll want to see if it contains the string
    `It''s just you.` in order to determine if `johnny-five.io` is up.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是网络抓取的一个风险：有时候没有太多东西可以用来找到你的元素。我们最接近的是ID为`domain-main-content`的div的第一个段落（`p`标签）。我们将想要查看它是否包含字符串`It's
    just you.`，以确定`johnny-five.io`是否正常运行。
- en: Now that we have our URL and intended element and parsing criteria, let's start
    coding by getting the HTML into our Johnny-Five project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了URL和预期的元素以及解析标准，让我们通过将HTML引入Johnny-Five项目来开始编码。
- en: Making the HTTP request
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发起HTTP请求
- en: 'Create a new file in your `project` folder called `scraper-j5-alert.js`. Start
    with the normal libraries, `Board` construction, and `board.on(''ready'')` handler.
    Don''t forget to include the request `npm` module:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`project`文件夹中创建一个名为`scraper-j5-alert.js`的新文件。从正常的库开始，构建`Board`，并设置`board.on('ready')`处理程序。别忘了包含`npm`模块的请求：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, inside your `board.on(''ready'')` handler, construct and set up your
    LCD object:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的`board.on('ready')`处理程序内部，构建并设置你的LCD对象：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we''re going to create a function to get the HTML from [https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io)
    and place it on a five-minute interval. Lastly, we call it so we don''t have to
    wait five minutes for the first result:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个函数来获取来自[https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io)的HTML，并将其放置在五分钟间隔上。最后，我们调用它，这样我们就不必等待五分钟才能得到第一个结果：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Load the `project` folder onto your Pi, navigate to the folder in you Pi SSH
    session, and run:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将`project`文件夹加载到你的树莓派上，在树莓派的SSH会话中导航到该文件夹，并运行以下命令：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should, maybe after a few seconds, see something like this in the console
    (I just screenshotted a small part):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能几秒钟后会在控制台看到类似的内容（我只是截图了一小部分）：
- en: '![](img/6305a9db-d760-4a5d-ab20-be8e9b7d979b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6305a9db-d760-4a5d-ab20-be8e9b7d979b.png)'
- en: But how do we get the info out of that giant string? Regular Expressions? Please,
    no, not those. Luckily, as Stilwell's Law (see [Chapter 2](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml),
    *Creating Your First Johnny-Five Project*) states, if you can think of functionality,
    there exists a package on `npm` for it. In this case, we have the cheerio module
    that allows us to parse and query the HTML string with a JQuery-style API.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何从那个巨大的字符串中获取信息？正则表达式？请，不要，不是那些。幸运的是，正如Stilwell定律（见[第2章](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml)，*创建你的第一个Johnny-Five项目*）所述，如果你能想到功能，那么在`npm`上就有一个相应的包。在这种情况下，我们有cheerio模块，它允许我们使用JQuery风格的API解析和查询HTML字符串。
- en: Using Cheerio to get the element we want
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cheerio获取我们想要的元素
- en: 'In your `project` folder, run the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`project`文件夹中，运行以下命令：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The basics on cheerio are you parse text by calling:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Cheerio的基本用法是通过调用来解析文本：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, query using the `$` variable like you would with JQuery (see *Further
    reading* if you''ve never used JQuery for a link to a great primer on selecting
    elements):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`$`变量进行查询，就像使用JQuery一样（如果你从未使用过JQuery，请参阅*进一步阅读*以获取有关选择元素的优秀入门指南）：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Parsing the HTML and showing the result
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析HTML并显示结果
- en: 'This is all we''ll need to scrape the HTML and get the status. Inside `scraper-alert-j5.js`,
    we''re going to add cheerio''s `require()` call to the top of the file with the
    other requires:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的，用于抓取HTML并获取状态。在`scraper-alert-j5.js`内部，我们将添加cheerio的`require()`调用到文件的顶部，与其他调用一起：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we''re going to modify the callback that fires when request is done fetching
    the HTML. We''re going to add the cheerio call to load the text and look for the
    first `p` child of the div with ID `domain-main-content`, and pull out its text.
    Then, we''ll see if that text contains `It''s just you.` and write to the LCD:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将修改在请求完成抓取HTML时触发的回调。我们将添加cheerio调用以加载文本，并查找ID为`domain-main-content`的div的第一个`p`子元素，并提取其文本。然后，我们将检查该文本是否包含`It's
    just you.`，并将其写入LCD：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We''re ready to load it and run it! Load your project onto your Pi, navigate
    to the folder in your Pi SSH session, and run the following commands:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好加载并运行它！将你的项目加载到树莓派上，在树莓派的SSH会话中导航到该文件夹，并运行以下命令：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And you should see whether Johnny-Five is up or not on your LCD!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在LCD上看到Johnny-Five是否启动！
- en: You may have noticed I put `possibly` in the down condition. This is because,
    as I mentioned before, HTML scraping is very brittle.  If they change It's just
    you. to It is just you., our code will break! So I like to remind the LCD viewer
    that it may not necessarily be down. Again, this is an example of why, if you
    can find it, it's better to get data from an API. But sometimes there's no real
    choice.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到我在下线条件中加入了`可能`这个词。这是因为，正如我之前提到的，HTML抓取非常脆弱。如果他们将`It's just you.`改为`It
    is just you.`，我们的代码就会崩溃！所以我喜欢提醒LCD观众，它可能不一定真的下线。这再次是为什么，如果你能找到，最好从API获取数据的原因。但有时没有真正的选择。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a weather dashboard using an I²C LCD screen knowledge
    of npm modules and using REST APIs, and leveraged the power of Node.js and the
    Pi together. You can go forward to build so many new projects with these skills;
    if you can get the information from the internet, you can use it in your Johnny-Five
    and Pi projects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用I²C LCD屏幕、npm模块知识和REST API构建了一个天气仪表板，并利用了Node.js和树莓派的力量。你可以利用这些技能继续构建许多新的项目；如果你可以从互联网上获取信息，你可以在Johnny-Five和树莓派项目中使用它。
- en: Questions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is the Pi well suited for projects that require remote data?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么树莓派非常适合需要远程数据的项目？
- en: What considerations need to be made when making regular web requests from the
    Pi?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在从树莓派发送常规网络请求时，需要考虑哪些因素？
- en: Why can we chain the LCD object calls, such as `LCD.clear().home()`?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们可以链式调用LCD对象，例如`LCD.clear().home()`？
- en: Why do we use an I2C backpack with our LCD?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们使用I2C背板与我们的LCD一起使用？
- en: Would we need more components to use the LCD without the backpack?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不使用背板，我们需要更多组件来使用LCD吗？
- en: Does `LCD.on()` turn on the entire LCD? If not, what does it do?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LCD.on()`是否打开了整个LCD？如果不是，它做什么？'
- en: Further reading
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**The request npm module page**: [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**request npm模块页面**: [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)'
- en: '**The full OpenWetherMap API**: [https://openweathermap.org/api](https://openweathermap.org/api)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整的OpenWetherMap API**: [https://openweathermap.org/api](https://openweathermap.org/api)'
- en: '**The Johnny-Five LCD documentation**: [http://johnny-five.io/api/lcd/](http://johnny-five.io/api/lcd/)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Johnny-Five LCD文档**: [http://johnny-five.io/api/lcd/](http://johnny-five.io/api/lcd/)'
- en: '**The cheerio npm module page**: [https://www.npmjs.com/package/cheerio](https://www.npmjs.com/package/cheerio)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cheerio npm模块页面**: [https://www.npmjs.com/package/cheerio](https://www.npmjs.com/package/cheerio)'
- en: '**JQuery ''Selecting Elements'' tutorial**: [https://learn.jquery.com/using-jquery-core/selecting-elements/](https://learn.jquery.com/using-jquery-core/selecting-elements/)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JQuery ''选择元素''教程**: [https://learn.jquery.com/using-jquery-core/selecting-elements/](https://learn.jquery.com/using-jquery-core/selecting-elements/)'
