- en: Chapter 1. Instant RaphaelJS Starter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 立即开始使用 RaphaelJS
- en: Welcome to *Instant RaphaelJS Starter*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 *立即开始使用 RaphaelJS*。
- en: This book has especially been created to provide you with all the information
    that you need to set up RaphaelJS. You will learn the basics of RaphaelJS, get
    started with building your first script, and discover some tips and tricks for
    using RaphaelJS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书特别编写，旨在为您提供所有设置 RaphaelJS 所需的信息。您将学习 RaphaelJS 的基础知识，开始构建您的第一个脚本，并了解一些使用
    RaphaelJS 的技巧和窍门。
- en: 'This document contains the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档包含以下部分：
- en: '*So what is RaphaelJS?* – Find out what RaphaelJS actually is, what you can
    do with it, and why it''s so great.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么什么是 RaphaelJS？* – 了解 RaphaelJS 究竟是什么，您可以用它做什么，以及为什么它如此出色。'
- en: '*Installation* – Learn how to download and install RaphaelJS with minimum fuss
    and then set it up so that you can use it as soon as possible.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*安装* – 学习如何以最少的麻烦下载和安装 RaphaelJS，然后将其设置好，以便您能尽快使用。'
- en: '*Quick start* – This section will show you how to perform one of the core tasks
    of RaphaelJS, that is, creating shapes. Follow the steps to create your own shape,
    which will be the basis of most of your work in RaphaelJS.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*快速入门* – 本节将向您展示如何执行 RaphaelJS 的核心任务之一，即创建形状。按照步骤创建您自己的形状，这将成为您在 RaphaelJS
    中大部分工作的基础。'
- en: '*Top features you need to know about* – Here you will learn how to perform
    five tasks with the most important features of RaphaelJS.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*您需要了解的顶级功能* – 在这里，您将学习如何使用 RaphaelJS 的最重要功能执行五个任务。'
- en: '*People and places you should get to know* – Every open source project is centered
    around a community. This section provides you with many useful links to the project
    page and forums, as well as a number of helpful articles, tutorials, blogs, and
    the Twitter feeds of RaphaelJS super contributors.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*您应该了解的人物和地点* – 每个开源项目都围绕一个社区展开。本节为您提供许多有用的项目页面和论坛链接，以及一些有用的文章、教程、博客和 RaphaelJS
    超级贡献者的 Twitter 动态。'
- en: So, what is RaphaelJS?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，什么是 RaphaelJS？
- en: RaphaelJS is a vector graphics library, which is used to draw objects in the
    browser.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS 是一个矢量图形库，用于在浏览器中绘制对象。
- en: In this section, we will see what RaphaelJS is, how it is different from other
    similar drawing libraries, and how it sets itself apart from **HTML5 Canvas**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 RaphaelJS 是什么，它与其他类似绘图库有何不同，以及它是如何区别于 **HTML5 Canvas** 的。
- en: Two-headed and three-lettered
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双头三字母
- en: Almost a decade ago, we had a great technology called **Scalable Vector Graphics**
    (**SVG**), which was derived from **Vector Markup Language** (**VML**) to draw
    simple to complex 2D graphics on browsers. SVG was a **World Wide Web Consortium**
    (**W3C**) specification and was there lingering in the minds of advanced developers
    for a decade or so. VML, on the other hand, was Microsoft's specification and
    existed even before SVG. Though SVG was inspired from VML, they were never fond
    of each other and never co-existed on the same browser. SVG ran on all browsers
    except Internet Explorer (IE 9 and above supports SVG) and vice versa.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎十年前，我们有一个伟大的技术叫做 **可伸缩矢量图形** (**SVG**)，它是由 **矢量标记语言** (**VML**) 衍生出来的，用于在浏览器上绘制简单到复杂的
    2D 图形。SVG 是一个 **万维网联盟** (**W3C**) 规范，并在高级开发者的脑海中徘徊了大约十年。另一方面，VML 是微软的规范，甚至在 SVG
    之前就存在了。虽然 SVG 受到 VML 的启发，但它们从未喜欢过彼此，也从未在同一个浏览器上共存。SVG 在所有浏览器上运行，除了 Internet Explorer（IE
    9 及以上版本支持 SVG）反之亦然。
- en: A two-headed and three-lettered headache.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 双头三字母的头痛。
- en: The marriage of two problems and the birth of RaphaelJS
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个问题的结合与 RaphaelJS 的诞生
- en: SVG was a beautiful baby but no one wanted the labor pains—coding using SVG
    and VML for cross-browser consistency was so much of a serious pain that most
    developers simply used images. So we had two different technologies, both doing
    the same thing but they were both significantly different in their syntaxes and
    never ran on the same browser. It seemed like there was a problem in getting them
    to peacefully co-exist.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 是一个美丽的婴儿，但没有人想要经历分娩的痛苦——使用 SVG 和 VML 编码以实现跨浏览器一致性是如此痛苦，以至于大多数开发者只是使用图像。因此，我们有两种不同的技术，它们都做同样的事情，但它们的语法都显著不同，并且从未在同一个浏览器上运行。这看起来像是在让它们和平共存时存在一个问题。
- en: JavaScript – the binder of oddities
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript – 奇特的粘合剂
- en: JavaScript bound these two giants together and out of their marriage was born
    RaphaelJS, inheriting the best charms of both parents. It has the ability to scale
    almost any browser's turf and dance to any developer's tune.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 将这两位巨头联系在一起，他们的婚姻孕育出了 RaphaelJS，继承了父母的最佳魅力。它几乎能够适应任何浏览器的领域，并能随着任何开发者的旋律起舞。
- en: The solution—RaphaelJS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案——RaphaelJS。
- en: Browser support
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: Most browsers support SVG and all versions of IE from IE 5.0 onwards support
    VML. Since RaphaelJS was developed to make the most of SVG and VML, it can practically
    run in almost any browser, making it more reliable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器支持SVG，所有从IE 5.0开始的IE版本都支持VML。由于RaphaelJS是为了充分利用SVG和VML而开发的，它几乎可以在任何浏览器中运行，这使得它更加可靠。
- en: RaphaelJS—the amphibian
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS——两栖动物
- en: What is RaphaelJS and what is not RaphaelJS?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是RaphaelJS，什么不是RaphaelJS？
- en: We now know what RaphaelJS is—it's a combination of SVG and VML using whichever
    of these two technologies the current browser supports, therefore it is versatile
    and reliable. But it's equally important to also know what is not RaphaelJS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了RaphaelJS是什么——它是SVG和VML的结合，使用当前浏览器支持的这两种技术中的任何一种，因此它既灵活又可靠。但同样重要的是也要知道RaphaelJS不是什么。
- en: A little about vector and raster graphics
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于矢量图形和位图图形的简介
- en: 'Just like the world is of two primary states water and land, graphics are of
    two primitive types—vector and raster. Vector graphics are drawn using geometrical
    primitives like lines, curves, ellipses, and so on. Various such primitives join
    together and form a graphic. Vector graphics are drawn on the screen mathematically.
    They are scalable without loss in quality. Raster graphics, on the other hand,
    are pixel-based and are not scalable. The main advantage with vector graphics
    is that they are scalable and are also real objects, meaning we can fiddle with
    them and manipulate them dynamically. The following diagram shows the difference
    between raster (bitmap) and vector graphics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像世界由两种主要状态组成——水和陆地一样，图形也有两种原始类型——矢量图形和位图图形。矢量图形使用几何元素如线条、曲线、椭圆等绘制。各种这样的元素组合在一起形成图形。矢量图形在屏幕上是数学绘制的。它们可以无失真地缩放。另一方面，位图图形是基于像素的，并且不可缩放。矢量图形的主要优势是它们可以缩放，并且也是真实对象，这意味着我们可以摆弄它们并动态地操作它们。以下图表显示了位图（位图）和矢量图形之间的区别：
- en: '![A little about vector and raster graphics](img/9857OS_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![关于矢量图形和位图图形的简介](img/9857OS_01_01.jpg)'
- en: Difference between raster (bitmap) and vector graphics
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 位图（位图）和矢量图形之间的区别
- en: RaphaelJS as a vector
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为矢量的RaphaelJS
- en: RaphaelJS is a vector graphics library, therefore the drawings are real DOM
    objects. Thus they can be dynamically accessed, manipulated, resized, and practically
    hammered into anything you want in runtime. Best of all is that they can be assigned
    events like `click`, `mouseover`, `mouseleave`, and so on. The capabilities of
    RaphaelJS are just incredible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS是一个矢量图形库，因此绘制的图形是真实的DOM对象。因此，它们可以在运行时动态访问、操作、调整大小，并且几乎可以锤炼成你想要的任何东西。最好的是，它们可以分配事件，如`click`、`mouseover`、`mouseleave`等。RaphaelJS的功能令人难以置信。
- en: Raphael uses vector graphics and HTML 5 Canvas uses raster graphics.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael使用矢量图形，而HTML 5 Canvas使用位图图形。
- en: The x, y positioning that RaphaelJS uses
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RaphaelJS使用的x, y定位
- en: RaphaelJS uses the x, y positioning system to draw. The top-left corner of the
    screen is 0,0 and the horizontal scale is the x axis and the vertical scale is
    the y axis.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS使用x, y定位系统进行绘制。屏幕的左上角是0,0，水平比例是x轴，垂直比例是y轴。
- en: So if the code says (15,20) then it means that the point will be at 15 points
    from the x axis (horizontal) and 20 points from the y axis (vertical).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果代码显示（15,20），那么这意味着这个点将在x轴（水平）距离15个点，y轴（垂直）距离20个点处。
- en: RaphaelJS is a vector graphics-based library built to make it easier to draw
    on the screen. RaphaelJS uses either SVG or VML, whichever the current browser
    supports. The drawings created using RaphaelJS are DOM objects and can be manipulated
    dynamically making them more versatile, they can also be assigned events such
    as `click`, `mouseover`, and `mouseleave`. All these amazing properties make RaphaelJS
    exciting to learn and use.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS是一个基于矢量图形的库，旨在使在屏幕上绘图更容易。RaphaelJS使用SVG或VML，取决于当前浏览器支持哪种。使用RaphaelJS创建的图形是DOM对象，可以动态操作，这使得它们更加灵活，它们也可以分配事件，如`click`、`mouseover`和`mouseleave`。所有这些惊人的特性使得RaphaelJS学习和使用起来都令人兴奋。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: RaphaelJS and HTML 5 Canvas are two different things entirely. Though they both
    appear to do similar things (drawing), they are different in how they do it. RaphaelJS
    is based on vector graphics and HTML5 Canvas is raster-based.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS和HTML 5 Canvas是完全不同的两件事。尽管它们看起来都做类似的事情（绘图），但它们在如何做这件事上有所不同。RaphaelJS基于矢量图形，而HTML5
    Canvas基于位图。
- en: Installation
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Installing and setting up RaphaelJS is very simple, it's as simple as downloading
    the latest RaphaelJS file and including it in HTML.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和设置RaphaelJS非常简单，就像下载最新的RaphaelJS文件并将其包含在HTML中一样。
- en: In three easy steps, you can install RaphaelJS and get it set up.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在三个简单步骤中，您可以安装RaphaelJS并设置它。
- en: Step 1 – What do I need?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步 – 我需要什么？
- en: 'Before you install RaphaelJS, you will need to check that you have all of the
    following required elements:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装RaphaelJS之前，您需要检查您是否拥有以下所有必需的元素：
- en: A web browser
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络浏览器
- en: A text editor
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Step 2 – Downloading RaphaelJS
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步 – 下载RaphaelJS
- en: The easiest way to download RaphaelJS is as a minified JS, from [https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js](https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下载RaphaelJS的最简单方法是作为压缩的JS，从[https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js](https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js)。
- en: RaphaelJS, unlike most libraries, does not have any other dependencies, so it's
    just `raphael.js`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数库不同，RaphaelJS没有其他依赖项，所以它就是`raphael.js`。
- en: Since RaphaelJS is a JavaScript plugin, the download link will show a plain
    JavaScript file in the browser. You should copy the text and paste it into a new
    file named `raphael.js` (or any name you prefer), and save it to your JavaScript
    directory or to any location in your server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于RaphaelJS是一个JavaScript插件，下载链接在浏览器中会显示一个纯JavaScript文件。您应该复制文本并将其粘贴到一个名为`raphael.js`的新文件中（或您喜欢的任何名称），并将其保存到您的JavaScript目录或服务器上的任何位置。
- en: '![Step 2 – Downloading RaphaelJS](img/9857OS_01_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![第2步 – 下载RaphaelJS](img/9857OS_01_02.jpg)'
- en: Minified RaphaelJS code shown in the browser
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中显示的Minified RaphaelJS代码
- en: Step 3 – Adding it to the HTML
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步 – 添加到HTML中
- en: Include it in the bottom section of your HTML page using the `<script>` tag
    and point the `src` attribute to the path where the `raphael.js` file is located.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<script>`标签将其包含在HTML页面的底部部分，并将`src`属性指向`raphael.js`文件所在的路径。
- en: '![Step 3 – Adding it to the HTML](img/9857OS_01_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![第3步 – 添加到HTML中](img/9857OS_01_03.jpg)'
- en: Script included at the bottom
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本放在底部
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The browser reads the HTML code in a linear fashion. If there is a script tag
    at the top, the browser will download the script and it will start executing it.
    During this stage, the browser displays a blank white screen, as the rest of the
    page is yet to be downloaded. Therefore, it is recommended to include the script
    at the bottom of the page, so that the browser will download all the HTML code
    and the user will have some content on the screen, while JavaScript is being downloaded
    in the background.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器以线性方式读取HTML代码。如果顶部有脚本标签，浏览器将下载脚本并开始执行它。在这个阶段，浏览器显示一个空白白色屏幕，因为页面的其余部分尚未下载。因此，建议将脚本放在页面底部，这样浏览器将下载所有HTML代码，用户在屏幕上会有一些内容，同时JavaScript在后台下载。
- en: And that's it!
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 就这样！
- en: By this point, you should have a working installation of RaphaelJS and are free
    to play around and discover more about it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经安装了可工作的RaphaelJS，可以自由地探索它。
- en: Quick start – creating your first shape
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门 – 创建您的第一个形状
- en: Here, we will create the first shape in Raphael in two simple steps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过两个简单的步骤在Raphael中创建第一个形状。
- en: Step 1 – Creating a canvas to draw on
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步 – 创建绘图画布
- en: Initializing a Raphael object is as simple as munching a banana, and there are
    two ways to munch.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Raphael对象就像吃香蕉一样简单，有两种吃法。
- en: It can either be created directly in the browser's viewport (viewable area)
    or in an element. It's usually advisable to create the Raphael object in an element,
    probably a `Div` tag. It's important to keep in mind that the paper (drawing area)
    is the boundary of the x, y grid, not the browser's window.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以直接在浏览器视口中（可视区域）创建，也可以在元素中创建。通常建议在元素中创建Raphael对象，可能是`Div`标签。重要的是要记住，纸张（绘图区域）是x、y网格的边界，而不是浏览器的窗口。
- en: Creating a canvas in the browser's viewport
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在浏览器视口中创建画布
- en: 'The syntax for creating the Raphael object, which is the base for all other
    Raphael methods and functions, is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Raphael对象（这是所有其他Raphael方法和函数的基础）的语法如下：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The four parameters inside the Raphael function are nothing but x-position,
    y-position, width, and height of the canvas to be created.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael函数内部的四个参数不过是创建的画布的x位置、y位置、宽度和高度。
- en: Since it is created in the browser's viewport, the positioning of the canvas
    will be absolute; therefore, it will overlap any HTML element underneath.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是在浏览器的视口中创建的，因此画布的位置将是绝对的；因此，它将覆盖下面的任何 HTML 元素。
- en: 'For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.PacktPub.com](http://www.PacktPub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    并注册以直接将文件通过电子邮件发送给您。
- en: Here the Raphael object is initialized and assigned to a variable called `paper`.
    This variable will be christened with all the powers of RaphaelJS. It will, henceforth,
    become the **Raphael Paper Object**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Raphael 对象被初始化并分配给一个名为 `paper` 的变量。这个变量将拥有 RaphaelJS 的所有功能。从现在起，它将成为**Raphael
    纸对象**。
- en: Creating an object in an element (recommended)
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在元素中创建对象（推荐）
- en: To initiate the Raphael object inside an element, we must add the element ID
    or the element itself in the place of the positioning coordinates (x, y).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要在元素内部初始化 Raphael 对象，我们必须在定位坐标（x，y）的位置添加元素 ID 或元素本身。
- en: 'Let''s consider the following example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's it; we now have the engine up and running.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样；现在我们的引擎已经启动并运行了。
- en: Vrooom vrooom.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 呼噜噜。
- en: Step 2 – Drawing the circle
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – 绘制圆形
- en: It is now time to shift gears.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候换挡了。
- en: The moment we assigned the Raphael object to the variable `paper`, it transforms
    itself into a magic wand, allowing us to pull off tricks to the best of our imagination.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 Raphael 对象分配给变量 `paper` 时，它就变成了一个魔杖，让我们能够发挥出最大的想象力来施展技巧。
- en: There are certain predefined methods to create basic geometrical shapes such
    as circles, rectangles, and ellipses. Now we are going to spell out a circle with
    our shiny new wand.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些预定义的方法可以创建基本的几何形状，如圆形、矩形和椭圆。现在我们将用我们的闪亮新魔杖绘制一个圆形。
- en: A circle can be drawn using the `circle()` method. This method takes three parameters,
    namely x, y, and radius. Assign it to a variable that allows us to use it later
    in the code, specifically, to access the vector object easily for animations,
    transformations, and other effects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `circle()` 方法绘制圆形。此方法接受三个参数，即 x、y 和半径。将其分配给一个变量，以便我们可以在代码中稍后使用它，特别是为了方便访问矢量对象进行动画、变换和其他效果。
- en: 'The syntax is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output for the preceding code is as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下所示：
- en: '![Step 2 – Drawing the circle](img/9857OS_01_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 – 绘制圆形](img/9857OS_01_04.jpg)'
- en: A circle created using RaphaelJS
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RaphaelJS 创建的圆形
- en: The attr() method
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: attr() 方法
- en: We now have a smooth circle. It's absolutely fantastic, but wouldn't it be much
    better if we could add some color and other styles to it? RaphaelJS gives us the
    option to add styles to the object. It's a fairly straightforward method.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个平滑的圆形。它绝对很棒，但如果我们能给它添加一些颜色和其他样式会更好吗？RaphaelJS 给我们提供了添加样式的选项。这是一个相当直接的方法。
- en: Styles and other customizations to our new circle are done using the `attr()`
    method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `attr()` 方法对我们的新圆形进行样式和其他自定义设置。
- en: This method takes the properties as parameters. The properties are entered as
    a collection of objects in key-value pairs. If you are familiar with jQuery, then
    its syntax is identical to jQuery's `attr()` method. This format is known as **JavaScript
    Object Notation** (**JSON**), to further clarify.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受属性作为参数。属性以键值对的形式作为对象的集合输入。如果你熟悉 jQuery，那么它的语法与 jQuery 的 `attr()` 方法相同。这种格式被称为**JavaScript
    对象表示法**（**JSON**），以进一步明确。
- en: 'The syntax for this method is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法如下：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s consider the following example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output for the preceding code snippet is as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下所示：
- en: '![The attr() method](img/9857OS_01_05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![attr() 方法](img/9857OS_01_05.jpg)'
- en: A circle with styles applied using the `attr()` method
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `attr()` 方法应用样式的圆形
- en: Raphael's paper allows easy integration of vector graphics in an HTML layout,
    which makes it even more appealing.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael 的纸张允许在 HTML 布局中轻松集成矢量图形，这使得它更具吸引力。
- en: Paper—the shiny new wand.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 纸——闪亮的新魔杖。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a ton of attributes available for each object and a list of all the
    objects can be found at the Raphael documentation. The URL can be found at the
    *People and places you should get to know* section, as an entire list of attributes
    is beyond the scope of this book.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都有大量属性可用，所有对象的列表可以在Raphael文档中找到。URL可以在“你应该了解的人和地方”部分找到，因为整个属性列表超出了本书的范围。
- en: Top features you need to know about
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要了解的顶级功能
- en: As you learn to use RaphaelJS, you will realize that there are a plethora of
    things you can do with it. This section will teach you all about the most commonly
    performed tasks and most commonly used features in RaphaelJS.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你学习使用RaphaelJS，你会意识到你可以用它做很多事情。本节将教你所有关于RaphaelJS中最常见的任务和最常用的功能。
- en: 'By the end of this section, you will be able to:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你将能够：
- en: Create a Raphael element
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Raphael元素
- en: Manipulate the style of the element
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作元素的样式
- en: Transform the element
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变换元素
- en: Perform animations on the element
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在元素上执行动画
- en: Add JavaScript events to the element
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向元素添加JavaScript事件
- en: Creating a Raphael element
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Raphael元素
- en: Creating a Raphael element is very easy. To make it better, there are predefined
    methods to create basic geometrical shapes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Raphael元素非常简单。为了使其更好，有一些预定义的方法可以创建基本几何形状。
- en: Basic shape
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本形状
- en: There are three basic shapes in RaphaelJS, namely circle, ellipse, and rectangle.
    Since the circle is already covered in the *Quick start* section, we are going
    to skip drawing a circle.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS中有三种基本形状，即圆形、椭圆和矩形。由于圆形已在“快速入门”部分介绍，我们将跳过绘制圆形。
- en: Rectangle
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 矩形
- en: We can create a rectangle using the `rect()` method. This method takes four
    required parameters and a fifth optional parameter, `border-radius`. The `border-radius`
    parameter will make the rectangle rounded (rounded corners) by the number of pixels
    specified.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`rect()`方法创建矩形。此方法需要四个必需参数和一个第五个可选参数，`border-radius`。`border-radius`参数将通过指定的像素数使矩形圆角（圆角）。
- en: 'The syntax for this method is:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法是：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A normal rectangle can be created using the following code snippet:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下代码片段创建一个普通矩形：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output for the preceding code snippet is shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码片段的输出结果如下所示：
- en: '![Rectangle](img/9857OS_01_06.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![矩形](img/9857OS_01_06.jpg)'
- en: Plain rectangle
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 平面矩形
- en: Rounded rectangle
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 圆角矩形
- en: 'The following code will create a basic rectangle with rounded corners:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建一个具有圆角的矩形：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output for the preceding code snippet is a rectangle with rounded corners,
    as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码片段的输出是一个具有圆角的矩形，如下所示：
- en: '![Rounded rectangle](img/9857OS_01_07.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![圆角矩形](img/9857OS_01_07.jpg)'
- en: Rectangle with rounded corners
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 圆角矩形
- en: We can create other basic shapes in the same way. Let's create an ellipse with
    our magic wand.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用同样的方式创建其他基本形状。让我们用我们的魔杖创建一个椭圆。
- en: Ellipse
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 椭圆
- en: An ellipse is created using the `ellipse()` method and it takes four required
    parameters, namely x,y, horizontal radius, and vertical radius. The horizontal
    radius will be the width of the ellipse divided by two and the vertical radius
    will be the height of the ellipse divided by two.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆是通过`ellipse()`方法创建的，它需要四个必需参数，即x，y，水平半径和垂直半径。水平半径将是椭圆宽度的一半，垂直半径将是椭圆高度的一半。
- en: 'The syntax for creating an ellipse is:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 创建椭圆的语法是：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s consider the following example for creating an ellipse:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下创建椭圆的示例：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code will create an ellipse of width 170 x 2 and height 100 x
    2.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码将创建一个宽度为170 x 2，高度为100 x 2的椭圆。
- en: 'An ellipse created using the `ellipse()` method is shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ellipse()`方法创建的椭圆如下所示：
- en: '![Ellipse](img/9857OS_01_08.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![椭圆](img/9857OS_01_08.jpg)'
- en: An Ellipse
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆
- en: Complex shapes
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复杂形状
- en: It's pretty easy to create basic shapes, but what about complex shapes such
    as stars, octagons, or any other shape which isn't a circle, rectangle, or an
    ellipse.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建基本形状相当容易，但复杂形状如星星、八边形或其他不是圆形、矩形或椭圆的形状怎么办呢？
- en: It's time for the next step of Raphael wizardry.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进入Raphael的下一步了。
- en: Complex shapes are created using the `path()` method which has only one parameter
    called `pathString`. Though the path string may look like a long genetic sequence
    with alphanumeric characters, it's actually very simple to read, understand, and
    draw with.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂形状是通过`path()`方法创建的，该方法只有一个名为`pathString`的参数。尽管路径字符串可能看起来像一条长长的基因序列，由字母数字字符组成，但实际上它非常简单易懂，易于绘制。
- en: Before we get into path drawing, it's essential that we know how it's interpreted
    and the simple logic behind those complex shapes. Imagine that you are drawing
    on a piece of paper with a pencil. To draw something, you will place the pencil
    at a point in the paper and begin to draw a line or a curve and then move the
    pencil to another point on the paper and start drawing a line or curve again.
    After several such cycles, you will have a masterpiece—at least, you will call
    it a masterpiece.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨路径绘制之前，了解其解释方式和那些复杂形状背后的简单逻辑是至关重要的。想象一下，你正在一张纸上用铅笔绘制。要绘制某物，你将在纸上的一点放置铅笔并开始绘制一条线或曲线，然后将铅笔移动到纸上的另一点并再次开始绘制一条线或曲线。经过几次这样的循环后，你将完成一幅杰作——至少，你会称它为杰作。
- en: Raphael uses a similar method to draw and it does so with a path string.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael使用类似的方法来绘制，并且使用路径字符串来完成。
- en: 'A typical path string may look like this: `M0,0L26,0L13,18L0,0`. Let''s zoom
    into this path string a bit.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的路径字符串可能看起来像这样：`M0,0L26,0L13,18L0,0`。让我们稍微放大这个路径字符串。
- en: The first letter says `M` followed by `0,0`. That's right genius, you've guessed
    it correctly.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字母是`M`，后面跟着`0,0`。没错，天才，你猜对了。
- en: It says *move to* `0,0` position, the next letter `L` is *line to* `26,0`. RaphaelJS
    will move to `0,0` and from there draw a line to `26,0`. This is how the path
    string is understood by RaphaelJS and paths are drawn using these simple notations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示移动到`0,0`位置，下一个字母`L`是`*line to*` `26,0`。RaphaelJS将移动到`0,0`，然后从那里绘制一条线到`26,0`。这就是RaphaelJS理解路径字符串的方式，以及如何使用这些简单的符号绘制路径。
- en: 'Here is a comprehensive list of commands and their respective meanings:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个命令及其相应含义的完整列表：
- en: '| Command | Meaning expansion | Attributes |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 意义扩展 | 属性 |'
- en: '| --- | --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `M` | move to | (x, y) |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 移动到 | (x, y) |'
- en: '| `Z` | close path | (none) |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 关闭路径 | (none) |'
- en: '| `L` | line to | (x, y) |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 线到 | (x, y) |'
- en: '| `H` | horizontal line to | x |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 水平线到 | x |'
- en: '| `V` | vertical line to | y |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 垂直线到 | y |'
- en: '| `C` | curve to | (x1, y1, x2, y2, x, y) |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 曲线到 | (x1, y1, x2, y2, x, y) |'
- en: '| `S` | smooth curve to | (x2, y2, x, y) |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 平滑曲线到 | (x2, y2, x, y) |'
- en: '| `Q` | quadratic Bézier curve to | (x1, y1, x, y) |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | 二次贝塞尔曲线到 | (x1, y1, x, y) |'
- en: '| `T` | smooth quadratic Bézier curve to | (x, y) |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 平滑二次贝塞尔曲线到 | (x, y) |'
- en: '| `A` | elliptical arc | (rx, ry, x axis-rotation, large-arc-flag, sweep-flag,
    x, y) |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 椭圆弧 | (rx, ry, x轴旋转, 大弧标志, 扫描标志, x, y) |'
- en: '| `R` | Catmull-Rom-curve to* | x1, y1 (x y) |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `R` | Catmull-Rom曲线到* | x1, y1 (x y) |'
- en: The uppercase commands are absolute (`M20, 20`); they are calculated from the
    `0,0` position of the drawing area (paper). The lowercase commands are relative
    (`m20, 20`); they are calculated from the last point where the pen left off.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 大写命令是绝对的（`M20, 20`）；它们是从绘图区域（纸张）的`0,0`位置计算的。小写命令是相对的（`m20, 20`）；它们是从笔最后离开的点计算的。
- en: There are so many commands, which might feel like too much to take in—don't
    worry; there is no need to remember every command and its format. Because we'll
    be using vector graphics editors to extract paths, it's essential that you understand
    the meaning of each and every command so that when someone asks you "hey genius,
    what does this mean?", you shouldn't be standing there clueless pretending to
    have not heard it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有这么多命令，可能会觉得难以全部记住——不用担心；没有必要记住每个命令及其格式。因为我们将会使用矢量图形编辑器来提取路径，所以了解每个命令的含义是至关重要的，这样当有人问你“嘿，天才，这是什么意思？”时，你不应该在那里毫无头绪地假装没听到。
- en: 'The syntax for the `path()` method is as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`path()`方法的语法如下：'
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s consider the following example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE12]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All these commands ("`M0,0L26,0L13,18L0,0`") use uppercase letters. They are
    therefore absolute values.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些命令（"`M0,0L26,0L13,18L0,0`"）都使用大写字母。因此，它们是绝对值。
- en: 'The output for the previous example is shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例的输出如下所示：
- en: '![Complex shapes](img/9857OS_01_09.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![复杂形状](img/9857OS_01_09.jpg)'
- en: A triangle shape drawn using the path string
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用路径字符串绘制的三角形形状
- en: Extracting and using paths from an editor
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从编辑器中提取和使用路径
- en: Well, a triangle may be an easy shape to put into a path string. How about a
    complex shape such as a star? It's not that easy to guess and manually find the
    points. It's also impossible to create a fairly more complex shape like a simple
    flower or a 2D logo.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，三角形可能是一个容易放入路径字符串的简单形状。那么一个复杂的形状，比如星形呢？猜测和手动找到点并不容易。创建一个相对复杂的形状，比如简单的花朵或
    2D 标志，也是不可能的。
- en: Here in this section, we'll see a simple but effective method of drawing complex
    shapes with minimal fuss and sharp accuracy.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到一个简单但有效的方法，用最少的麻烦和精确的准确性绘制复杂形状。
- en: Vector graphics editors
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 矢量图形编辑器
- en: The vector graphics editors are meant for creating complex shapes with ease
    and they have some powerful tools in their disposal to help us draw. For this
    example, we'll create a star shape using an open source editor called Inkscape,
    and then extract those paths and use Raphael to get out the shape! It is as simple
    as it sounds, and it can be done in four simple steps.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形编辑器旨在轻松创建复杂形状，并且它们拥有一些强大的工具来帮助我们绘制。对于这个例子，我们将使用一个名为 Inkscape 的开源编辑器创建一个星形，然后提取这些路径并使用
    Raphael 来获取形状！这听起来很简单，并且可以分四个简单步骤完成。
- en: Step 1 – Creating the shape in the vector editor
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 1 步 – 在矢量编辑器中创建形状
- en: Let's create some star shapes in Inkscape using the built-in shapes tool.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Inkscape 中使用内置的形状工具创建一些星形。
- en: '![Step 1 – Creating the shape in the vector editor](img/9857OS_01_10.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![第 1 步 – 在矢量编辑器中创建形状](img/9857OS_01_10.jpg)'
- en: Star shapes created using the built-in shapes tool
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置形状工具创建的星形
- en: Step 2 – Saving the shape as SVG
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 2 步 – 将形状保存为 SVG
- en: The paths used by SVG and RaphaelJS are similar. The trick is to use the paths
    generated by the vector graphics editor in RaphaelJS. For this purpose, the shape
    must be saved as an SVG file.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 和 RaphaelJS 使用的路径相似。技巧是使用 RaphaelJS 中矢量图形编辑器生成的路径。为此，形状必须保存为 SVG 文件。
- en: '![Step 2 – Saving the shape as SVG](img/9857OS_01_11.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![第 2 步 – 将形状保存为 SVG](img/9857OS_01_11.jpg)'
- en: Saving the shape as an SVG file
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 将形状保存为 SVG 文件
- en: Step 3 – Copying the SVG path string
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 3 步 – 复制 SVG 路径字符串
- en: The next step is to copy the path from SVG and paste it into Raphael's `path()`
    method.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将 SVG 中的路径复制并粘贴到 Raphael 的 `path()` 方法中。
- en: SVG is a markup language, and therefore it's nested in tags. The SVG path can
    be found in the `<path>` and `</path>` tags. After locating the path tag, look
    for the `d` attribute. This will contain a long path sequence. You've now hit
    the bullseye.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 是一种标记语言，因此它嵌套在标签中。SVG 路径可以在 `<path>` 和 `</path>` 标签中找到。找到路径标签后，查找 `d` 属性。这将包含一个长的路径序列。你现在已经击中了靶心。
- en: '![Step 3 – Copying the SVG path string](img/9857OS_01_12.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![第 3 步 – 复制 SVG 路径字符串](img/9857OS_01_12.jpg)'
- en: The path string is highlighted
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 路径字符串被突出显示
- en: Step 4 – Using the copied path as a Raphael path string
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 4 步 – 使用复制的路径作为 Raphael 路径字符串
- en: After copying the path string from SVG, paste it into Raphael's `path()` method.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 SVG 中复制路径字符串后，将其粘贴到 Raphael 的 `path()` 方法中。
- en: '[PRE13]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That's it! We have created a complex shape in RaphaelJS with absolute simplicity.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经用绝对简单的方式在 RaphaelJS 中创建了一个复杂形状。
- en: Note
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using this technique, we can only extract the path, not the styles. So the background
    color, shadow, or any other style in the SVG won't apply. We need to add our own
    styles to the path objects using the `attr()` method.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，我们只能提取路径，而不是样式。因此，SVG 中的背景颜色、阴影或其他样式都不会应用。我们需要使用 `attr()` 方法为路径对象添加自己的样式。
- en: 'A screenshot depicting the complex shapes created in RaphaelJS using the path
    string copied from an SVG file is shown here:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个截图，显示了使用从 SVG 文件中复制的路径字符串在 RaphaelJS 中创建的复杂形状：
- en: '![Step 4 – Using the copied path as a Raphael path string](img/9857OS_01_13.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![第 4 步 – 使用复制的路径作为 Raphael 路径字符串](img/9857OS_01_13.jpg)'
- en: Complex shapes created in RaphaelJS using path string
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用路径字符串在 RaphaelJS 中创建的复杂形状
- en: Creating text
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建文本
- en: Text can be created using the `text()` method. Raphael gives us a way to add
    a battery of styles to the text object, right from changing colors to animating
    physical properties like position and size.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `text()` 方法创建文本。Raphael 给我们一种方法来向文本对象添加一系列样式，从更改颜色到动画物理属性（如位置和大小）。
- en: The `text()` method takes three required parameters, namely, x,y, and the text
    string.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`text()` 方法需要三个必需参数，即 x、y 和文本字符串。'
- en: 'The syntax for the `text()` method is as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`text()` 方法的语法如下：'
- en: '[PRE14]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s consider the following example:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE15]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I am pretty sure that the `text-anchor` property is a bit heavy to munch. Well,
    there is a saying that a picture is worth a thousand words. The following diagram
    clearly explains the `text-anchor` property and its usage.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我很确定 `text-anchor` 属性有点难以理解。好吧，有句话说得好，一张图胜千言。以下图表清楚地解释了 `text-anchor` 属性及其用法。
- en: '![Creating text](img/9857OS_01_14.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![创建文本](img/9857OS_01_14.jpg)'
- en: A brief explanation of text-anchor property
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 文本锚点属性的简要说明
- en: 'A screenshot of the text rendered using the `text()` method is as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `text()` 方法渲染的文本截图如下：
- en: '![Creating text](img/9857OS_01_15.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![创建文本](img/9857OS_01_15.jpg)'
- en: Rendering text using the text() method
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 text() 方法渲染文本
- en: Manipulating the style of the element
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作元素的样式
- en: The `attr()` method not only adds styles to an element, but it also modifies
    an existing style of an element.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr()` 方法不仅为元素添加样式，还修改了元素现有的样式。'
- en: 'The following example explains the `attr()` method:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例解释了 `attr()` 方法：
- en: '[PRE16]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Transforming an element
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换一个元素
- en: RaphaelJS not only creates elements, but it also allows the manipulating or
    transforming of any element and its properties dynamically.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS不仅创建元素，还允许动态地操作任何元素及其属性。
- en: Manipulating a shape
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作一个形状
- en: By the end of this section, you would know how to transform a shape.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你就会知道如何变换一个形状。
- en: There might be many scenarios wherein you might need to modify a shape dynamically.
    For example, when the user mouse-overs a circle, you might want to scale up that
    circle just to give a visual feedback to the user. Shapes can be manipulated in
    RaphaelJS using the `transform()` method.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在许多场景，你可能需要动态地修改形状。例如，当用户鼠标悬停在圆上时，你可能想放大这个圆，以便给用户一个视觉反馈。在RaphaelJS中，可以使用
    `transform()` 方法来操作形状。
- en: Transformation is done through the `transform()` method, and it is similar to
    the `path()` method where we add the path string to the method. `transform()`
    works in the same way, but instead of the path string, it's the transformation
    string. There is only a moderate difference between a transformation string and
    a path string.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 变换是通过 `transform()` 方法完成的，它与 `path()` 方法类似，我们在方法中添加路径字符串。`transform()` 方法的工作方式相同，但不同的是，它使用的是变换字符串而不是路径字符串。变换字符串和路径字符串之间只有细微的差别。
- en: 'There are four commands in the transformation string:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 变换字符串中有四个命令：
- en: '| `T` | Translate |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 翻译 |'
- en: '| `S` | Scale |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 缩放 |'
- en: '| `R` | Rotate in degrees |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `R` | 旋转（度） |'
- en: '| `M` | Matrix |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 矩阵 |'
- en: The fourth command, `M`, is of little importance and let's keep it out of the
    way, to avoid confusion.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个命令 `M` 不是很重要，让我们把它放在一边，以避免混淆。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The transformation string might look similar to a path string. In reality, they
    are different, not entirely but significantly, sharing little in common. The `M`
    in a path string means *move to*, whereas the same in a transformation string
    means *Matrix*. The path string is not to be confused with a transformation string.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 变换字符串可能看起来与路径字符串相似。实际上，它们是不同的，虽然不是完全不同，但差别很大。路径字符串中的 `M` 表示 *移动到*，而在变换字符串中，它表示
    *矩阵*。路径字符串不应与变换字符串混淆。
- en: As with the path string, the uppercase letters are for absolute transformations
    and the lowercase for relative transformation. If the transformation string reads
    `r90T100,0`, then the element will rotate 90 degrees and move 100 px in the x
    axis (left). If the same reads `r90t100,0`, then the element will rotate 90 degrees
    and since the translation is relative, it will actually move vertically down 100px,
    as the rotation has tilted its axis.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 与路径字符串一样，大写字母表示绝对变换，小写字母表示相对变换。如果变换字符串是 `r90T100,0`，则元素将旋转90度并在x轴上移动100px（向左）。如果相同的是
    `r90t100,0`，则元素将旋转90度，由于变换是相对的，它实际上会垂直向下移动100px，因为旋转已经倾斜了它的轴。
- en: I am sure the previous point will confuse most, so let me break it up.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我确信前面的点会让大多数人感到困惑，所以让我把它分解一下。
- en: 'Imagine a rectangle with a head and now this head is at the right side of the
    rectangle. For the time being, let''s forget about absolute and relative transformation;
    our objective is to:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个带头的矩形，现在这个头在矩形的右侧。暂时忘记绝对和相对变换；我们的目标是：
- en: Rotate the rectangle by 90 degrees.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将矩形旋转90度。
- en: Move the rectangle 100px on the x axis (that is, 100px to the right).
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将矩形沿x轴移动100px（即向右移动100px）。
- en: It's critical to understand that the elements' original values don't change
    when we translate it, meaning its x and y values will remain the same, no matter
    how we rotate or move the element.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点至关重要，即当我们平移元素时，其原始值不会改变，这意味着其x和y值将保持不变，无论我们如何旋转或移动元素。
- en: Now our first requirement is to rotate the rectangle by 90 degrees. The code
    for that would be `rect.transform("r90")` where `r` stands for rotation—fantastic,
    the rectangle is rotated by 90 degrees. Now pay attention to the next important
    step. We also need the rectangle to move 100px in the x axis and so we update
    our previous code to `rect.transform("r90t100,0")`, where `t` stands for translation.
    What happens next is interesting—the translation is done through a lowercase `t`,
    which means it's relative. One thing about relative translations is that they
    take into account any previous transformation applied to the element, whereas
    absolute translations simply reset any previous transformations before applying
    their own.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们第一个要求是将矩形旋转90度。相应的代码是 `rect.transform("r90")`，其中 `r` 代表旋转——太棒了，矩形已经旋转了90度。现在请注意下一个重要步骤。我们还需要矩形在x轴上移动100px，因此我们更新之前的代码为
    `rect.transform("r90t100,0")`，其中 `t` 代表平移。接下来发生的事情很有趣——平移是通过小写 `t` 实现的，这意味着它是相对的。关于相对平移的一点是，它们会考虑之前应用于元素的任何变换，而绝对平移则简单地重置任何之前的变换后再应用自己的变换。
- en: Remember the head of the rectangle on the right side? Well, the rectangle's
    x axis falls on the right side. So when we say, move 100px on the x axis, it is
    supposed to move 100px towards its right side, that is, in the direction where
    its head is pointing. Since we have rotated the rectangle by 90 degrees, its head
    is no longer on the right side but is facing the bottom.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 记得矩形右边的头部吗？嗯，矩形的x轴就在右边。所以当我们说在x轴上移动100px时，它应该向其右边移动100px，即指向其头部的方向。由于我们已经将矩形旋转了90度，其头部不再在右边，而是面向底部。
- en: So when we apply the relative translation, the rectangle will still move 100px
    to its x axis, but the x axis is now pointing down because of the rotation. That's
    why the rectangle will move 100px down when you expect it to move to the right.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们应用相对平移时，矩形仍然会在x轴上移动100px，但由于旋转，x轴现在指向下方。这就是为什么当你期望它向右移动时，矩形会向下移动100px。
- en: What happens when we apply absolute translation is something that is entirely
    different from the previous one. When we again update our code for absolute translation
    to `rect.transform("r90T100,0")`, the axis of the rectangle is not taken into
    consideration. However, the axis of the paper is used, as absolute transformations
    don't take previous transformations into account, and they simply reset them before
    applying their own. Therefore, the rectangle will move 100px to the right after
    rotating 90 degrees, as intended.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用绝对变换时，发生的事情与之前完全不同。当我们再次更新绝对变换的代码为 `rect.transform("r90T100,0")` 时，矩形的轴没有被考虑。然而，纸张的轴被使用，因为绝对变换不考虑之前的变换，它们在应用自己的变换之前简单地重置它们。因此，矩形在旋转90度后，将按照预期向右移动100px。
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Absolute transformations will ignore all the previous transformations on that
    element, but relative transformations won't.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对变换将忽略该元素上所有之前的变换，而相对变换则不会。
- en: Getting a grip on this simple logic will save you a lot of frustration in the
    future while developing as well as while debugging.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这个简单的逻辑将让您在开发以及调试过程中节省很多挫败感。
- en: 'The following is a screenshot depicting relative translation:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个展示相对平移的截图：
- en: '![Manipulating a shape](img/9857OS_01_16.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![操作形状](img/9857OS_01_16.jpg)'
- en: Using relative translation
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相对平移
- en: 'The following is a screenshot depicting absolute translation:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个展示绝对平移的截图：
- en: '![Manipulating a shape](img/9857OS_01_17.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![操作形状](img/9857OS_01_17.jpg)'
- en: Using absolute translation
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绝对平移
- en: Notice the gap on top of the rotated rectangle; it's moved 100px on the one
    with relative translation and there is no such gap on top of the rectangle with
    absolute translation.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意旋转矩形顶部的间隙；具有相对平移的矩形向上移动了100px，而具有绝对平移的矩形顶部没有这样的间隙。
- en: By default, the transform method will append to any transformation already applied
    to the element. To reset all transformations, use `element.transform("")`. Adding
    an empty string to the transform method will reset all the previous transformations
    on that element.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，transform方法将附加到元素上已经应用的任何变换。要重置所有变换，请使用`element.transform("")`。向transform方法添加空字符串将重置该元素上所有之前的变换。
- en: It's also important to note that the element's original x,y position will not
    change when translated. The element will merely assume a temporary position but
    its original position will remain unchanged. Therefore after translation, if we
    call for the element's position programmatically, we will get the original x,y,
    not the translated one, just so we don't jump from our seats and call RaphaelJS
    dull!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，当元素被平移时，元素的原始x,y位置不会改变。元素将仅临时改变位置，但其原始位置将保持不变。因此，在平移后，如果我们以编程方式调用元素的位置，我们将得到原始的x,y，而不是平移后的位置，这样我们就不会从座位上跳起来，指责RaphaelJS无趣！
- en: 'The following is an example of scaling and rotating a triangle:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个缩放和旋转三角形的例子：
- en: '[PRE17]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot depicts the output of the preceding code:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出：
- en: '![Manipulating a shape](img/9857OS_01_18.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![操作一个形状](img/9857OS_01_18.jpg)'
- en: Scaling and rotating a triangle
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放和旋转三角形
- en: The triangle is transformed using relative translation (t). Now you know the
    reason why the triangle has moved down rather than moving to its right.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 三角形使用相对平移（t）进行变换。现在你知道为什么三角形向下移动而不是向右移动的原因了。
- en: Animating a shape
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画一个形状
- en: What good is a magic wand if it can't animate inanimate objects! RaphaelJS can
    animate as smooth as butter almost any property from color, opacity, width, height,
    and so on with little fuss.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果魔杖不能使无生命物体动起来，它还有什么用！RaphaelJS可以几乎无缝地动画化从颜色、不透明度、宽度、高度等几乎所有属性，几乎无需费心。
- en: Animation is done through the `animate()` method. This method takes two required
    parameters, namely `final values` and `milliseconds`, and two optional parameters,
    `easing` and `callback`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是通过`animate()`方法完成的。此方法需要两个必需参数，即`最终值`和`毫秒数`，以及两个可选参数，`easing`和`callback`。
- en: 'The syntax for the `animate()` method is as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`animate()`方法的语法如下：'
- en: '[PRE18]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Easing is that special effect with which the animation is done, for example,
    if the easing is `bounce`, the animation will appear like a bouncing ball. The
    following are the several easing options available in RaphaelJS:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Easing是动画完成时的特殊效果，例如，如果easing是`bounce`，动画将看起来像弹跳的球。以下是在RaphaelJS中可用的几个easing选项：
- en: '`linear`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linear`'
- en: '`<` or `easeIn` or `ease-in`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<` 或 `easeIn` 或 `ease-in`'
- en: '`>` or `easeOut` or `ease-out`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>` 或 `easeOut` 或 `ease-out`'
- en: '`<>` or `easeInOut` or `ease-in-out`'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<>` 或 `easeInOut` 或 `ease-in-out`'
- en: '`backIn` or `back-in`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backIn` 或 `back-in`'
- en: '`backOut` or `back-out`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backOut` 或 `back-out`'
- en: '`elastic`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elastic`'
- en: '`bounce`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bounce`'
- en: Callbacks are functions that will execute when the animation is complete, allowing
    us to perform some tasks after the animation.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Callbacks是当动画完成后将执行的函数，允许我们在动画后执行一些任务。
- en: 'Let''s consider the example of animating the width and height of a rectangle:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个动画矩形宽度和高度的例子：
- en: '[PRE19]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows a rectangle before animation:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了动画前的矩形：
- en: '![Animating a shape](img/9857OS_01_19.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![动画一个形状](img/9857OS_01_19.jpg)'
- en: Rectangle before animation
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 动画前的矩形
- en: A screenshot demonstrating the use of a callback function when the animation
    is complete is as follows. The text **Animation complete** will appear in the
    browser after completing the animation.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个动画完成后使用回调函数的截图示例。动画完成后，浏览器中将显示文本**动画完成**。
- en: '![Animating a shape](img/9857OS_01_20.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![动画一个形状](img/9857OS_01_20.jpg)'
- en: Use of a callback function
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用回调函数
- en: 'The following code animates the background color and opacity of a rectangle:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码动画了一个矩形的背景颜色和不透明度：
- en: '[PRE20]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here the rectangle is animated from blue to gray and with an opacity from 1
    to 0.7 over a duration of 300 milliseconds.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里矩形从蓝色变为灰色，不透明度从1变为0.7，持续时间为300毫秒。
- en: Note
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Opacity in RaphaelJS is the same as in CSS, where 1 is opaque and 0 is transparent.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在RaphaelJS中，不透明度与CSS中的相同，其中1是不透明的，0是透明的。
- en: Animating transformations
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画变换
- en: The transformations can be animated using the transformation string.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用变换字符串来动画化变换。
- en: 'Let''s consider the following example:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE21]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is a screenshot of a rectangle before animation:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个动画前的矩形截图：
- en: '![Animating transformations](img/9857OS_01_21.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![动画转换](img/9857OS_01_21.jpg)'
- en: Before animation
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 动画前
- en: 'The following is a screenshot of the same rectangle after animation:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是动画后相同矩形的截图：
- en: '![Animating transformations](img/9857OS_01_22.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![动画转换](img/9857OS_01_22.jpg)'
- en: After animation
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 动画后
- en: Animation can be done on almost any property.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎可以对任何属性进行动画处理。
- en: Note
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Animation is an awesome feature and it's really smooth. But it comes at a cost;
    it takes up precious browser resources. It won't drain the browser leaving it
    out of juice, but reckless use of animation will have a significant impact on
    the end performance. Therefore, the developer must use animations wisely, so that
    it adds value to the entire user experience rather than annoying the user.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是一个很棒的功能，而且非常流畅。但是，它也有代价；它会占用宝贵的浏览器资源。它不会耗尽浏览器资源，但过度使用动画会对最终性能产生重大影响。因此，开发者必须明智地使用动画，使其为整个用户体验增值，而不是让用户感到烦恼。
- en: Adding events to Raphael elements
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 Raphael 元素添加事件
- en: Adding events to elements is like injecting life into them. They take the drawings
    to the next level. Events can be added to elements using the various event handlers.
    In fact, all the normal JavaScript events are available for any Raphael element.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 向元素添加事件就像注入生命一样。它们将绘图提升到下一个层次。可以使用各种事件处理器向元素添加事件。实际上，所有正常的 JavaScript 事件都适用于任何
    Raphael 元素。
- en: Here is an example of `click` and `mouseover` events.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 `click` 和 `mouseover` 事件的示例。
- en: Click event
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点击事件
- en: The mouse click event can be added using the `click()` method.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `click()` 方法添加鼠标点击事件。
- en: 'Let''s consider the following example:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例：
- en: '[PRE22]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following is a screenshot demonstrating the click event handler:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个演示点击事件处理器的截图：
- en: '![Click event](img/9857OS_01_23.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![点击事件](img/9857OS_01_23.jpg)'
- en: Click event handler
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 点击事件处理器
- en: Mouseover event
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼠标悬停事件
- en: The mouseover event can be added using the `mouseover()` method.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `mouseover()` 方法添加鼠标悬停事件。
- en: 'The following is an example of the `mouseover()` method:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `mouseover()` 方法的示例：
- en: '[PRE23]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Methods you'll want to know and use
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你想要了解和使用的方法
- en: This section will cover only the most common and frequent methods, as an entire
    list of attributes and methods is beyond the scope of this book.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将仅涵盖最常见和最频繁使用的方法，因为整个属性和方法列表超出了本书的范围。
- en: Element methods
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元素方法
- en: These methods can only be used with an element and not directly. For example,
    `rect.click()`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法只能与元素一起使用，不能直接使用。例如，`rect.click()`。
- en: animate()
  id: totrans-323
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: animate()
- en: The `animate()` method is used to animate various properties of the element
    for a specified duration.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`animate()` 方法用于在指定持续时间内对元素的各个属性进行动画处理。'
- en: 'The syntax for this method is as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE24]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following is an example of the `animate()` method:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `animate()` 方法的示例：
- en: '[PRE25]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: attr()
  id: totrans-329
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: attr()
- en: The `attr()` method is a very important method that is used to add attributes
    such as styles and other physical properties such as position, height, width,
    and so on to the element. It takes values in key value pairs.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr()` 方法是一个非常重要的方法，用于向元素添加属性，如样式和其他物理属性，如位置、高度、宽度等。它采用键值对的形式。'
- en: 'The syntax for this method is as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE26]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following is an example of the `attr()` method:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `attr()` 方法的示例：
- en: '[PRE27]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: click()
  id: totrans-335
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: click()
- en: The `click()` method is used to bind the `click` event to Raphael elements.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`click()` 方法用于将 `click` 事件绑定到 Raphael 元素上。'
- en: 'The following is an example of the `click()` method:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `click()` 方法的示例：
- en: '[PRE28]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: dblclick()
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: dblclick()
- en: The `dblclick()` method adds the `double click` event to the element.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`dblclick()` 方法将 `double click` 事件添加到元素上。'
- en: 'The following is an example of the `dblclick()` method:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `dblclick()` 方法的示例：
- en: '[PRE29]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: mousedown()
  id: totrans-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mousedown()
- en: The `mousedown()` method binds the `mousedown` event to Raphael elements—it
    triggers when any mouse button is pressed down.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`mousedown()` 方法将 `mousedown` 事件绑定到 Raphael 元素上——当任何鼠标按钮被按下时触发。'
- en: 'The following is an example of the `mousedown()` method:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `mousedown()` 方法的示例：
- en: '[PRE30]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: mouseup()
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mouseup()
- en: The `mouseup()` event binds the `mouseup` event to Raphael elements—it triggers
    when any mouse button is released.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseup()` 事件将 `mouseup` 事件绑定到 Raphael 元素上——当任何鼠标按钮被释放时触发。'
- en: 'The following is an example of the `mouseup()` method:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `mouseup()` 方法的示例：
- en: '[PRE31]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: mousemove()
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mousemove()
- en: The `mousemove()` method triggers when the mouse is moved over the element.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标移至元素上时，会触发 `mousemove()` 方法。
- en: 'The following is an example of the `mousemove()` method:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `mousemove()` 方法的示例：
- en: '[PRE32]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: mouseover()
  id: totrans-355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mouseover()
- en: The `mouseover()` method triggers when the mouse enters the Raphael element.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标进入 Raphael 元素时，会触发`mouseover()`方法。
- en: 'The following is an example of the `mouseover()` method:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`mouseover()`方法的示例：
- en: '[PRE33]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: mouseout()
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mouseout()
- en: The `mouseout()` method triggers when the mouse leaves the Raphael element.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标离开 Raphael 元素时，会触发`mouseout()`方法。
- en: 'The following is an example of the `mouseout()` method:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`mouseout()`方法的示例：
- en: '[PRE34]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: clone()
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: clone()
- en: 'There will be situations where we will want to duplicate an element. Some might
    say, "Ah ! that''s easy, I just need to copy the element to a new variable like
    `var newrect=rect`". Well, it looks like you have made a copy, but that won''t
    work for sure. The variable acts as a reference to the object, in this case, the
    rectangle. So when we copy the variable, we are just copying the reference. In
    reality, the new variable still points to the same old object. Here is an example
    of the wrong way:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会想要复制一个元素。有些人可能会说：“啊！这很简单，我只需要将元素复制到一个新变量中，比如`var newrect=rect`”。好吧，看起来你已经复制了，但这肯定不会起作用。变量作为对象的引用，在这种情况下，是矩形。所以当我们复制变量时，我们只是在复制引用。实际上，新变量仍然指向同一个旧对象。以下是一个错误的示例：
- en: '[PRE35]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The following screenshot demonstrates what happens when the variable is duplicated—there
    is no clone of the rectangle.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图演示了当变量被复制时会发生什么——没有矩形的副本。
- en: '![clone()](img/9857OS_01_24.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![clone()](img/9857OS_01_24.jpg)'
- en: Variable is duplicated
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 变量被复制
- en: It's obvious that copying the variable didn't work, as it's evident that the
    background color has been applied to the same rectangle, and there is no second
    rectangle as there is supposed to be.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，复制变量没有起作用，因为很明显背景色已经应用于同一个矩形，并且没有第二个矩形，正如预期的那样。
- en: This problem can be addressed by the `clone()` method in a simple and elegant
    way.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可以通过`clone()`方法以简单优雅的方式解决。
- en: '[PRE36]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Using the `clone()` method instead of duplicating the variable will produce
    a clone of the rectangle, as depicted in the following screenshot:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`clone()`方法而不是复制变量，将产生一个矩形的副本，如下面的截图所示：
- en: '![clone()](img/9857OS_01_25.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![clone()](img/9857OS_01_25.jpg)'
- en: Producing a clone using the clone() method
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 使用clone()方法产生副本
- en: Now, we see two rectangles and the background color of the second rectangle
    is now gray as intended.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们看到了两个矩形，第二个矩形的背景色现在如预期地变为灰色。
- en: data()
  id: totrans-376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: data()
- en: Raphael has an incredibly simple way to assign some data to each and every element
    and retrieve it on demand. It's as simple as assigning some data to an element
    while creating it and recalling that data whenever necessary. It's a simple and
    straightforward way.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael 有一种非常简单的方法将一些数据分配给每个元素，并在需要时检索它。这就像在创建元素时分配一些数据，并在必要时召回这些数据一样简单。这是一个简单直接的方法。
- en: Data can be added to an element using the `data()` method in key value pairs.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`data()`方法以键值对的形式向元素添加数据。
- en: 'The following is an example of the `data()` method:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`data()`方法的示例：
- en: '[PRE37]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is a screenshot depicting the data contents of the circle when
    clicked:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，展示了点击圆圈时的数据内容：
- en: '![data()](img/9857OS_01_26.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![data()](img/9857OS_01_26.jpg)'
- en: Data contents of the circle when clicked
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 点击圆圈时的数据内容
- en: removedata()
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: removedata()
- en: The `removedata()` method takes the key as a parameter. If the key isn't provided,
    it will remove all the associated data.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`removedata()`方法接受键作为参数。如果没有提供键，它将删除所有相关数据。'
- en: 'The syntax for this method is:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法如下：
- en: '[PRE38]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is an example of the `removedata()` method:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`removedata()`方法的示例：
- en: '[PRE39]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: getBBox()
  id: totrans-390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: getBBox()
- en: The `getBBox()` method returns the bounding box of the element. By default,
    the bounding will take into account any transformations on the element. To get
    the bounding box before any transformation is applied on the element, the `isWithoutTransform`
    parameter must be set to `true`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`getBBox()`方法返回元素的边界框。默认情况下，边界框将考虑元素上的任何变换。要获取应用变换之前的元素边界框，必须将`isWithoutTransform`参数设置为`true`。'
- en: '![getBBox()](img/9857OS_01_27.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![getBBox()](img/9857OS_01_27.jpg)'
- en: 'The following is an example of the `getBBox()` method:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`getBBox()`方法的示例：
- en: '[PRE40]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `getBBox()` method returns an object with the following values:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`getBBox()`方法返回一个包含以下值的对象：'
- en: '| Value | Type | Description |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `X` | Number | Top-left corner''s x position |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 数字 | 左上角的 x 位置 |'
- en: '| `Y` | Number | Top-left corner''s y position |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 数字 | 左上角的 y 位置 |'
- en: '| `X2` | Number | Bottom-right corner''s x position |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| `X2` | 数字 | 右下角的 x 位置 |'
- en: '| `Y2` | Number | Bottom-right corner''s y position |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| `Y2` | 数字 | 底右角的 y 位置 |'
- en: '| `Width` | Number | Width of the bounding box |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| `Width` | 数字 | 边界框的宽度 |'
- en: '| `Height` | Number | Height of the bounding box |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `Height` | 数字 | 边界框的高度 |'
- en: getPointAtLength()
  id: totrans-404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`getPointAtLength()`'
- en: The `getPointAtLength()` method returns the coordinates of the point at a particular
    length of a path. The `getPointAtLength()` method takes two parameters, namely
    `path` and `length`.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPointAtLength()` 方法返回路径特定长度的点的坐标。`getPointAtLength()` 方法接受两个参数，即 `path`
    和 `length`。'
- en: 'The syntax for this method is:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法如下：
- en: '[PRE41]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `path` must be a path string and the `length` a number.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`path` 必须是路径字符串，而 `length` 必须是数字。'
- en: 'The `getPointAtLength()` method returns an object with the following values:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`getPointAtLength()` 方法返回一个包含以下值的对象：'
- en: '| Value | Type | Description |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `X` | Number | The x coordinate of the point |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 数字 | 点的 x 坐标 |'
- en: '| `Y` | Number | The y coordinate of the point |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 数字 | 点的 y 坐标 |'
- en: '| `Alpha` | Number | The angle of the derivative |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| `Alpha` | 数字 | 导数的角度 |'
- en: toFront()
  id: totrans-415
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`toFront()`'
- en: The `toFront()` method brings the element to the forefront on top of all other
    elements. Its function is similar to **CSS z-index**. It doesn't take any parameters.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`toFront()` 方法将元素带到所有其他元素的最前面。它的功能类似于 **CSS z-index**。它不接受任何参数。'
- en: 'The following is an example of the `toFront()` method:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `toFront()` 方法的示例：
- en: '[PRE42]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The following screenshot demonstrates the use of the `toFront()` method. The
    circle is brought to the front by using the `toFront()` method; therefore, it
    overlaps the rectangle.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 `toFront()` 方法的截图示例。通过使用 `toFront()` 方法将圆带到前面；因此，它覆盖了矩形。
- en: '![toFront()](img/9857OS_01_28.jpg)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![toFront()](img/9857OS_01_28.jpg)'
- en: Circle brought to the front using the toFront() method
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `toFront()` 方法将圆带到前面
- en: toBack()
  id: totrans-422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`toBack()`'
- en: The `toBack()` method is the exact opposite of the `toFront()` method, as it
    moves the element behind all the other elements.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBack()` 方法与 `toFront()` 方法正好相反，因为它将元素移动到所有其他元素之后。'
- en: 'The following is an example of the `toBack()` method:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `toBack()` 方法的示例：
- en: '[PRE43]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: hide()
  id: totrans-426
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`hide()`'
- en: The `hide()` method makes the element invisible. This method is the Raphael
    equivalent of `visibility:hidden` or `display:none` in CSS.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`hide()` 方法使元素不可见。此方法是 Raphael 中 CSS 的 `visibility:hidden` 或 `display:none`
    的等价物。'
- en: 'The following is an example of the `hide()` method:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `hide()` 方法的示例：
- en: '[PRE44]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: show()
  id: totrans-430
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`show()`'
- en: The `show()` method makes the element visible.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`show()` 方法使元素可见。'
- en: 'The following is an example of the `show()` method:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `show()` 方法的示例：
- en: '[PRE45]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: transform()
  id: totrans-434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`transform()`'
- en: The `transform()` method adds a transformation to a given element. It takes
    only one parameter and it's the transformation string.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform()` 方法向给定元素添加转换。它只接受一个参数，即转换字符串。'
- en: 'The syntax for this method is as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法如下：
- en: '[PRE46]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The following is an example of the `transform()` method:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `transform()` 方法的示例：
- en: '[PRE47]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: remove()
  id: totrans-440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`remove()`'
- en: The `remove()` method removes the element from the paper.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove()` 方法从画布中删除元素。'
- en: 'The following is an example of the `remove()` method:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `remove()` 方法的示例：
- en: '[PRE48]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Paper methods
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 画布方法
- en: The paper methods can only be used with the Raphael paper object.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 画布方法只能与 Raphael 画布对象一起使用。
- en: paper.circle()
  id: totrans-446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`paper.circle()`'
- en: The `paper.circle()` method creates a circle.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.circle()` 方法创建一个圆。'
- en: 'The following is the syntax for this method:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是此方法的语法：
- en: '[PRE49]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Where `x` is the x position of the circle, `y` is the y position of the circle,
    and `radius` is the radius of the circle.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `x` 是圆的 x 位置，`y` 是圆的 y 位置，`radius` 是圆的半径。
- en: 'The following is an example of the `paper.circle()` method:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `paper.circle()` 方法的示例：
- en: '[PRE50]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: paper.ellipse()
  id: totrans-453
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`paper.ellipse()`'
- en: The `paper.ellipse()` method creates an ellipse.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.ellipse()` 方法创建一个椭圆。'
- en: 'The following is the syntax for this method:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的语法如下：
- en: '[PRE51]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: where `x` is the x position of the circle, `y` is the y position of the circle,
    `rx` is the horizontal radius, and `ry` is the vertical radius.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `x` 是圆的 x 位置，`y` 是圆的 y 位置，`rx` 是水平半径，`ry` 是垂直半径。
- en: 'The following is an example of the `paper.ellipse()` method:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `paper.ellipse()` 方法的示例：
- en: '[PRE52]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: paper.rect()
  id: totrans-460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`paper.rect()`'
- en: The `paper.rect()` method creates a simple rectangle.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.rect()` 方法创建一个简单的矩形。'
- en: 'The following is a syntax for this method:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是此方法的语法：
- en: '[PRE53]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Where `x` is the x position of the circle, `y` is the y position of the circle,
    `width` is the width of the rectangle, and `height` is the height of the rectangle.
    It also has a last fifth parameter — the border radius of the rectangle, which
    will add a curved edge of the given radius to the rectangle. Rounded corners do
    look smooth. Though the method's name is `rect()`, it can be used to create a
    box of any shape. It is not restricted to create perfect rectangles.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`x`是圆的x位置，`y`是圆的y位置，`width`是矩形的宽度，`height`是矩形的高度。它还有一个最后一个第五个参数——矩形的边框半径，这将给矩形添加一个给定半径的曲线边缘。圆角看起来很平滑。尽管方法的名称是`rect()`，但它可以用来创建任何形状的框。它并不限于创建完美的矩形。
- en: 'The following is an example of the `paper.rect()` method:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`paper.rect()`方法的示例：
- en: '[PRE54]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: paper.clear()
  id: totrans-467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: paper.clear()
- en: The `paper.clear()` method is used to clear the drawing canvas. This is the
    magical broom. The `paper.clear()` method doesn't take any parameters; it wipes
    it all.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.clear()`方法用于清除绘图画布。这是神奇的扫帚。`paper.clear()`方法不接受任何参数；它清除所有内容。'
- en: 'The following is an example of the `paper.clear()` method:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`paper.clear()`方法的示例：
- en: '[PRE55]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: paper.image()
  id: totrans-471
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: paper.image()
- en: Raphael is good at drawing, and using Raphael we can replace some images with
    it. But that doesn't mean it's an image replacement solution; Raphael can only
    substitute. It's, therefore, wrong to consider it as a complete replacement for
    images. However, images can be manipulated in Raphael.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: Raphael擅长绘图，使用Raphael我们可以用它替换一些图像。但这并不意味着它是一个图像替换解决方案；Raphael只能替代。因此，将其视为图像的完全替代品是错误的。然而，在Raphael中可以操作图像。
- en: 'The `paper.image()` method allows us to import images on to the paper. This
    method takes the following five parameters:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.image()`方法允许我们在画布上导入图像。此方法接受以下五个参数：'
- en: '| Parameter | Description |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `src` | The path of the image |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| `src` | 图像的路径 |'
- en: '| `X` | The x coordinate point where the image should be placed |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 图像应放置的x坐标点 |'
- en: '| `Y` | The y coordinate point where the image should be placed |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| `Y` | 图像应放置的y坐标点 |'
- en: '| `Width` | The width of the image |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| `Width` | 图像的宽度 |'
- en: '| `Height` | The height of the image |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| `Height` | 图像的高度 |'
- en: 'The following is an example of the `paper.image()` method:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`paper.image()`方法的示例：
- en: '[PRE56]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: And now the imported image is converted into a Raphael object. All the usual
    transformations can be applied to that image object.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导入的图像已被转换为Raphael对象。所有常规变换都可以应用于该图像对象。
- en: paper.setSize()
  id: totrans-484
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: paper.setSize()
- en: The `paper.setSize()` method is a very handy method. This method allows the
    resizing of the Raphael paper object, so that you don't run out of space. This
    method takes two required parameters, namely, width and height—these will be the
    new width and height of the Raphael paper.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.setSize()`方法是一个非常实用的方法。此方法允许调整Raphael画布对象的大小，这样你就不会用完空间。此方法需要两个必需参数，即宽度（width）和高度（height），这些将是Raphael画布的新宽度和高度。'
- en: 'The following is the syntax of this method:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE57]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following is an example of the `paper.setSize()` method:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`paper.setSize()`方法的示例：
- en: '[PRE58]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: paper.set()
  id: totrans-490
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: paper.set()
- en: The `paper.set()` method groups several Raphael objects, and any action performed
    on this set will apply to all the elements. The `set()` method merely groups the
    elements, it doesn't create any copies of the elements. Deleting a set will have
    no effect on the elements.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`paper.set()`方法将多个Raphael对象分组，对集合执行任何操作都将应用于所有元素。`set()`方法仅分组元素，不会创建任何元素的副本。删除集合不会影响元素。'
- en: It is worth mentioning that sets in RaphaelJS are ordered. This varies from
    the set type in Python, which is a group of unordered objects.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，RaphaelJS中的集合是有序的。这与Python中的集合类型不同，Python中的集合是无序对象的一组。
- en: 'The following is the syntax for this method:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE59]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following is an example of the `paper.set()` method:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`paper.set()`方法的示例：
- en: '[PRE60]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The following is a screenshot demonstrating the use of the `paperset()` method
    in RaphaelJS.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个展示在RaphaelJS中使用`paperset()`方法的截图。
- en: '![paper.set()](img/9857OS_01_29.jpg)'
  id: totrans-498
  prefs: []
  type: TYPE_IMG
  zh: '![paper.set()](img/9857OS_01_29.jpg)'
- en: Changing the color of the set to red changes the color of all the elements in
    the set.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 将集合的颜色更改为红色会改变集合中所有元素的颜色。
- en: Set methods
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合方法
- en: The set methods can only be used with the set object, created using the `set()`
    method.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 集合方法只能与使用`set()`方法创建的集合对象一起使用。
- en: '[PRE61]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: set.clear()
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set.clear()
- en: The `set.clear()` method removes all the elements from the set. The `set()`
    method only groups elements together, it doesn't duplicate any elements. Therefore,
    when a set is cleared, no elements are removed, they are just unbounded.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`set.clear()`方法从集合中移除所有元素。`set()`方法仅将元素分组在一起，它不会复制任何元素。因此，当集合被清除时，没有元素被移除，它们只是不再有边界。'
- en: 'The following is the syntax of this method:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE62]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The following is an example of the `set.clear()` method:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`set.clear()`方法的示例：
- en: '[PRE63]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: set.exclude()
  id: totrans-509
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set.exclude()
- en: Clearing a set seems to be simple—a call to the clear method and kaboom, everything
    is gone. What about precision picking? RaphaelJS provides the `set.exclude()`
    method, which can be used to remove only a particular element from the set. This
    method takes only one required parameter, that is, the element to be removed.
    Want to remove a black sheep? No problem.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 清除集合看起来很简单——调用clear方法，然后kaboom，一切都不见了。那么关于精确选择呢？RaphaelJS提供了`set.exclude()`方法，可以用来从集合中仅移除特定的元素。此方法仅需要一个必需的参数，即要移除的元素。想要移除一个“黑羊”？没问题。
- en: 'The following is the syntax of this method:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE64]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following is an example of the `set.exclude()` method:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`set.exclude()`方法的示例：
- en: '[PRE65]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: set.forEach()
  id: totrans-515
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set.forEach()
- en: The `set.forEach()` method executes a function for every element of the set.
    The callback function takes only one parameter, which is a reference to the current
    element in the loop.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`set.forEach()`方法为集合中的每个元素执行一个函数。回调函数仅接受一个参数，即循环中当前元素的引用。'
- en: 'The following is the syntax of this method:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE66]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following is an example of the `set.forEach()` method:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`set.forEach()`方法的示例：
- en: '[PRE67]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: set.pop()
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set.pop()
- en: The `set.pop()` method removes the last element from the set and returns it.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`set.pop()`方法从集合中移除最后一个元素并返回它。'
- en: 'The following is an example of the `set.pop()` method:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`set.pop()`方法的示例：
- en: '[PRE68]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: set.splice()
  id: totrans-525
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: set.splice()
- en: The `set.splice()` method is used to delete and insert an element. This method
    takes three parameters, namely, `index`, `count`, and `element`, which are to
    be inserted. Index is where the element should be deleted, count is the number
    of elements to remove from the index position, and finally, the element to be
    inserted.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`set.splice()`方法用于删除和插入一个元素。此方法接受三个参数，即`index`、`count`和要插入的`element`。索引是元素应该被删除的位置，count是从索引位置移除的元素数量，最后是插入的元素。'
- en: 'The following is the syntax of this method:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个方法的语法：
- en: '[PRE69]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The following is an example of the `set.splice()` method:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`set.splice()`方法的示例：
- en: '[PRE70]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: People and places you should get to know
  id: totrans-531
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该了解的人和地方
- en: If you need help with RaphaelJS, here are some people and places that will prove
    invaluable.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要RaphaelJS的帮助，以下是一些人和地方，它们将非常有价值。
- en: Official sites
  id: totrans-533
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 官方网站
- en: 'The official sites for all the official information regarding RaphaelJS are:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 所有关于RaphaelJS的官方信息的官方网站是：
- en: '**Homepage**: [http://raphaeljs.com/](http://raphaeljs.com/)'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页**: [http://raphaeljs.com/](http://raphaeljs.com/)'
- en: '**Manual and documentation**: [http://raphaeljs.com/reference.html](http://raphaeljs.com/reference.html)'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手册和文档**: [http://raphaeljs.com/reference.html](http://raphaeljs.com/reference.html)'
- en: '**Twitter**: [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/)'
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Twitter**: [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/)'
- en: '**Source code**: [https://github.com/DmitryBaranovskiy/raphael/](https://github.com/DmitryBaranovskiy/raphael/)'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码**: [https://github.com/DmitryBaranovskiy/raphael/](https://github.com/DmitryBaranovskiy/raphael/)'
- en: Articles and tutorials
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章和教程
- en: 'A useful list of articles and tutorials for further reference and reading is
    as follows:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一份有用的文章和教程列表，供进一步参考和阅读：
- en: '[http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i](http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i)'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i](http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i)'
- en: '[http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/](http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/)'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/](http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/)'
- en: '[http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/](http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/):
    An introduction to the RaphaelJS Library, from net tuts+'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/](http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/):
    来自 net tuts+ 的 RaphaelJS 库介绍'
- en: '[http://www.w3.org/TR/SVG11/](http://www.w3.org/TR/SVG11/): W3C SVG specification'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/SVG11/](http://www.w3.org/TR/SVG11/): W3C SVG 规范'
- en: '[http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop](http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop):
    An exhaustive list of RaphaelJS examples'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop](http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop):
    RaphaelJS 示例的详尽列表'
- en: '[http://inkscape.org/download/](http://inkscape.org/download/): A link for
    downloading Inkscape'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://inkscape.org/download/](http://inkscape.org/download/): 下载 Inkscape
    的链接'
- en: Community
  id: totrans-547
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: 'Official RaphaelJS communities and forums:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 RaphaelJS 社区和论坛：
- en: '**Official forums**: [https://groups.google.com/forum/?fromgroups#!forum/raphaeljs](https://groups.google.com/forum/?fromgroups#!forum/raphaeljs)'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**官方论坛**: [https://groups.google.com/forum/?fromgroups#!forum/raphaeljs](https://groups.google.com/forum/?fromgroups#!forum/raphaeljs)'
- en: '**User FAQ**: [http://raphaeljs.com/](http://raphaeljs.com/)'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户常见问题解答**: [http://raphaeljs.com/](http://raphaeljs.com/)'
- en: Blogs
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 博客
- en: 'Official RaphaelJS blog:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 RaphaelJS 博客：
- en: 'The blog of Dmitry Baranovskiy, the creator of RaphaelJS and various other
    libraries: [http://dmitry.baranovskiy.com/](http://dmitry.baranovskiy.com/)'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RaphaelJS 和其他库的创造者 Dmitry Baranovskiy 的博客：[http://dmitry.baranovskiy.com/](http://dmitry.baranovskiy.com/)
- en: Twitter
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Twitter
- en: 'RaphaelJS tweets:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS 推文：
- en: Follow RaphaelJS on Twitter at [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/)
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/) 上关注 RaphaelJS
- en: For more open source information, follow Packt at [http://twitter.com/#!/packtopensource](http://twitter.com/#!/packtopensource)
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多开源信息，请关注 Packt 在 [http://twitter.com/#!/packtopensource](http://twitter.com/#!/packtopensource)
    的动态
- en: Summary
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: RaphaelJS is a versatile and easy-to-use vector graphics library, allowing us
    to do tasks which were unthinkable a few years ago. Though HTML5 Canvas was inspired
    from vector graphics, it doesn't mean that it's a replacement for SVG, rather
    they compliment each other. Today's browsers have faster and better JavaScript
    engines that make rendering vector graphics even better.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: RaphaelJS 是一个多才多艺且易于使用的矢量图形库，使我们能够完成几年前无法想象的任务。尽管 HTML5 Canvas 吸收了矢量图形的灵感，但这并不意味着它是
    SVG 的替代品，相反，它们是互补的。今天的浏览器拥有更快更好的 JavaScript 引擎，这使得矢量图形的渲染更加出色。
- en: From a user perspective, adding a little interactivity will make the site more
    interesting and engaging, and for this, vector graphics libraries like RaphaelJS
    are key. They make applications stand apart from the standard boxes and lines.
    RaphaelJS does add glitter to our applications and makes us completely rethink
    how we present our data. RaphaelJS is more versatile in the hands of the most
    creative, and that's what this book is all about—realizing the creative potential
    of RaphaelJS.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，添加一点交互性会使网站更加有趣和吸引人，为此，像 RaphaelJS 这样的矢量图形库是关键。它们使应用程序与众不同，区别于标准的方框和线条。RaphaelJS
    为我们的应用程序增添了光彩，并使我们完全重新思考如何展示我们的数据。在最具创意的人手中，RaphaelJS 更加灵活，这正是本书的主题——实现 RaphaelJS
    的创意潜力。
