- en: Chapter 6. Managing User Authentication Using Passport
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用护照管理用户身份验证
- en: 'Passport is a robust piece of Node.js authentication middleware that helps
    you to authenticate requests sent to your Express application. Passport uses strategies
    to utilize both local authentication and OAuth authentication providers, such
    as Facebook, Twitter, and Google. Using Passport strategies, you''ll be able to
    seamlessly offer different authentication options to your users while maintaining
    a unified User model. In this chapter, you''ll go through the following basic
    features of Passport:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 护照是一个强大的Node.js身份验证中间件，可帮助您对发送到Express应用程序的请求进行身份验证。护照使用策略来利用本地身份验证和OAuth身份验证提供程序，例如Facebook、Twitter和Google。使用护照策略，您将能够无缝地为用户提供不同的身份验证选项，同时保持统一的用户模型。在本章中，您将了解护照的以下基本功能：
- en: Understanding Passport strategies
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解护照策略
- en: Integrating Passport into your user's MVC architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将护照集成到用户的MVC架构中
- en: Using Passport's local strategy to authenticate users
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用护照的本地策略来验证用户
- en: Utilizing Passport OAuth strategies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用护照OAuth策略
- en: Offering authentication through social OAuth providers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过社交OAuth提供程序提供身份验证
- en: Introducing Passport
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍护照
- en: Authentication is a vital part of most web applications. Handling user registration
    and sign-in is an important feature that can sometimes present a development overhead.
    Express, with its lean approach, lacks this feature, so, as is usual with node,
    an external module is needed. Passport is a Node.js module that uses the middleware
    design pattern to authenticate requests. It allows developers to offer various
    authentication methods using a mechanism called **strategies**, which allows you
    to implement a complex authentication layer while keeping your code clean and
    simple. Just as with any other Node.js module, before you can start using it in
    your application, you will first need to install it. The examples in this chapter
    will continue directly from those in previous chapters. So, for this chapter,
    copy the final example from [Chapter 5](ch05.html "Chapter 5. Introduction to
    Mongoose"), *Introduction to Mongoose*, and let's start from there.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是大多数Web应用程序的重要部分。处理用户注册和登录是一个重要的功能，有时可能会带来开发开销。Express以其精简的方式缺少了这个功能，因此，与node一样，需要一个外部模块。护照是一个使用中间件设计模式来验证请求的Node.js模块。它允许开发人员使用称为**策略**的机制提供各种身份验证方法，这使您能够实现复杂的身份验证层，同时保持代码清晰简洁。与任何其他Node.js模块一样，在应用程序中开始使用它之前，您首先需要安装它。本章中的示例将直接从前几章中的示例继续。因此，在本章中，从[第5章](ch05.html
    "第5章。Mongoose简介")*Mongoose简介*中复制最终示例，然后从那里开始。
- en: Installing Passport
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装护照
- en: 'Passport uses different modules, each representing a different authentication
    strategy, but all of which depend on the base Passport module. To install the
    Passport base module, change your `package.json` file as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 护照使用不同的模块，每个模块代表不同的身份验证策略，但所有这些模块都依赖于基本的护照模块。要安装护照基本模块，请更改您的“package.json”文件如下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before you continue developing your application, make sure you install the
    new Passport dependency. To do so, go to your application''s folder, and issue
    the following command in your command-line tool:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续开发应用程序之前，请确保安装新的护照依赖项。要这样做，请转到应用程序的文件夹，并在命令行工具中发出以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install the specified version of Passport in your `node_modules` folder.
    Once the installation process has successfully finished, you will need to configure
    your application to load the Passport module.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的“node_modules”文件夹中安装指定版本的护照。安装过程成功完成后，您将需要配置应用程序以加载护照模块。
- en: Configuring Passport
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置护照
- en: 'To configure Passport, you will need to set it up in a few steps. To create
    the Passport configuration file, go to the `config` folder and create a new file
    named `passport.js`. Leave it empty for now; we will return to it in a bit. Next,
    you''ll need to require the file you just created, so change your `server.js`
    file, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 配置护照需要几个步骤。要创建护照配置文件，请转到“config”文件夹并创建一个名为“passport.js”的新文件。现在先留空；我们一会儿会回来的。接下来，您需要引用刚刚创建的文件，因此更改您的“server.js”文件如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, you''ll need to register the Passport middleware in your Express application.
    To do so, change your `config/express.js` file, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要在Express应用程序中注册Passport中间件。要这样做，请更改您的“config/express.js”文件如下：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s go over the code you just added. First, you required the Passport module,
    and then you registered two middleware: the `passport.initialize()` middleware,
    which is responsible for bootstrapping the Passport module, and the `passport.session()`
    middleware, which is using the Express session to keep track of your user''s session.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下您刚刚添加的代码。首先，您需要引用护照模块，然后注册两个中间件：`passport.initialize()`中间件，负责引导护照模块，以及`passport.session()`中间件，使用Express会话来跟踪用户的会话。
- en: Passport is now installed and configured, but to start using it, you will have
    to install at least one authentication strategy. We'll begin with the local strategy,
    which provides a simple username/password authentication layer; but first, let's
    discuss how Passport strategies work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 护照现在已安装和配置，但要开始使用它，您将需要安装至少一个身份验证策略。我们将从本地策略开始，该策略提供了一个简单的用户名/密码身份验证层；但首先，让我们讨论一下护照策略的工作原理。
- en: Understanding Passport strategies
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解护照策略
- en: To offer its various authentication options, Passport uses separate modules
    that implement different authentication strategies. Each module provides a different
    authentication method, such as username/password authentication and OAuth authentication.
    So, in order to offer Passport-supported authentication, you'll need to install
    and configure the strategies modules that you'd like to use. Let's begin with
    the local authentication strategy.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供各种身份验证选项，Passport使用单独的模块来实现不同的身份验证策略。每个模块提供不同的身份验证方法，例如用户名/密码身份验证和OAuth身份验证。因此，为了提供Passport支持的身份验证，您需要安装和配置您想要使用的策略模块。让我们从本地身份验证策略开始。
- en: Using Passport's local strategy
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Passport的本地策略
- en: Passport's local strategy is a Node.js module that allows you to implement a
    username/password authentication mechanism. You'll need to install it like any
    other module and configure it to use your User Mongoose model. Let's begin by
    installing the local strategy module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Passport的本地策略是一个Node.js模块，允许您实现用户名/密码身份验证机制。您需要像安装其他模块一样安装它，并配置它以使用您的User Mongoose模型。让我们开始安装本地策略模块。
- en: Installing Passport's local strategy module
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Passport的本地策略模块
- en: 'To install Passport''s local strategy module, you''ll need to add `passport-local`
    to your `package.json` file, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Passport的本地策略模块，您需要将`passport-local`添加到您的`package.json`文件中，如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, go to your application''s `root` folder, and issue the following command
    in your command-line tool:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到应用程序的`根`文件夹，并在命令行工具中输入以下命令：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will install the specified version of the local strategy module in your
    `node_modules` folder. When the installation process has successfully finished,
    you'll need to configure Passport to use the local strategy.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的`node_modules`文件夹中安装指定版本的本地策略模块。安装过程成功完成后，您需要配置Passport以使用本地策略。
- en: Configuring Passport's local strategy
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Passport的本地策略
- en: 'Each authentication strategy you''ll use is basically a node module that lets
    you define how that strategy will be used. In order to maintain a clear separation
    of logic, each strategy should be configured in its own separated file. In your
    `config` folder, create a new folder named `strategies`. Inside this new folder,
    create a file named `local.js` that contains the following code snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用的每种身份验证策略基本上都是一个允许您定义该策略将如何使用的节点模块。为了保持逻辑的清晰分离，每个策略都应该在其自己的分离文件中进行配置。在您的`config`文件夹中，创建一个名为`strategies`的新文件夹。在这个新文件夹中，创建一个名为`local.js`的文件，其中包含以下代码片段：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code begins by requiring the `Passport` module, the local strategy
    module's `Strategy` object, and your `User` Mongoose model. Then, you register
    the strategy using the `passport.use()` method, which uses an instance of the
    `LocalStrategy` object. Notice how the `LocalStrategy` constructor takes a callback
    function as an argument. It will later call this callback when trying to authenticate
    a user.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码首先需要`Passport`模块、本地策略模块的`Strategy`对象和您的`User` Mongoose模型。然后，您可以使用`passport.use()`方法注册策略，该方法使用`LocalStrategy`对象的实例。请注意`LocalStrategy`构造函数将回调函数作为参数。稍后在尝试对用户进行身份验证时，它将调用此回调。
- en: The callback function accepts three arguments—`username`, `password`, and a
    `done` callback—which will be called when the authentication process is over.
    Inside the callback function, you will use the `User` Mongoose model to find a
    user with that username and try to authenticate it. In the event of an error,
    you will pass the `error` object to the `done` callback. When the user is authenticated,
    you will call the `done` callback with the `user Mongoose` object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接受三个参数——`用户名`、`密码`和一个`完成`回调——当认证过程结束时将被调用。在回调函数内部，您将使用`User` Mongoose模型来查找具有该用户名的用户并尝试对其进行身份验证。在出现错误时，您将把`error`对象传递给`done`回调。当用户经过身份验证时，您将使用`user
    Mongoose`对象调用`done`回调。
- en: 'Remember the empty `config/passport.js` file? Well, now that you have your
    local strategy ready, you can go back and use it to configure the local authentication.
    To do so, go back to your `config/passport.js` file and paste the following lines
    of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得空的`config/passport.js`文件吗？现在您已经准备好本地策略，可以返回并使用它来配置本地身份验证。为此，请返回到您的`config/passport.js`文件并粘贴以下代码行：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code snippet, the `passport.serializeUser()` and `passport.deserializeUser()`
    methods are used to define how Passport will handle user serialization. When a
    user is authenticated, Passport will save its `_id` property to the session. Later
    on, when the `user` object is needed, Passport will use the `_id` property to
    grab the `user` object from the database. Notice how we used the field options
    argument to make sure Mongoose doesn't fetch the user's password and `salt` properties.
    The second thing the preceding code does is include the local strategy configuration
    file. This way, your `server.js` file will load the Passport configuration file,
    which in turn will load its strategies configuration file. Next, you'll need to
    modify your `User` model to support Passport's authentication.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，使用`passport.serializeUser()`和`passport.deserializeUser()`方法来定义Passport将如何处理用户序列化。当用户经过身份验证时，Passport将其`_id`属性保存到会话中。稍后，当需要`user`对象时，Passport将使用`_id`属性从数据库中获取`user`对象。请注意，我们使用了字段选项参数来确保Mongoose不会获取用户的密码和`salt`属性。前面的代码的第二件事是包含本地策略配置文件。这样，您的`server.js`文件将加载Passport配置文件，然后加载其策略配置文件。接下来，您需要修改您的`User`模型以支持Passport的身份验证。
- en: Adapting the User model
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整用户模型
- en: 'In the previous chapter, we started discussing the `User` model and created
    its basic structure. In order to use the `User` model in your MEAN application,
    you''ll have to modify it to address a few authentication process requirements.
    These changes will include modifying `UserSchema`, adding some `pre` middleware,
    and adding some new instance methods. To do so, go to your `app/models/user.js`
    file, and change it as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开始讨论`User`模型并创建了其基本结构。为了在您的MEAN应用程序中使用`User`模型，您将需要修改它以满足一些认证流程的要求。这些变化将包括修改`UserSchema`，添加一些`pre`中间件和添加一些新的实例方法。要做到这一点，请转到您的`app/models/user.js`文件，并按照以下方式进行更改：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s go over these changes. First, you added four fields to your `UserSchema`
    object: a `salt` property, which you''ll use to hash your password; a `provider`
    property, which will indicate the strategy used to register the user; a `providerId`
    property, which will indicate the user identifier for the authentication strategy;
    and a `providerData` property, which you''ll later use to store the `user` object
    retrieved from OAuth providers.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些变化。首先，您向`UserSchema`对象添加了四个字段：一个`salt`属性，用于对密码进行哈希处理；一个`provider`属性，用于指示注册用户所使用的策略；一个`providerId`属性，用于指示认证策略的用户标识符；以及一个`providerData`属性，稍后您将用它来存储从OAuth提供程序检索到的`user`对象。
- en: 'Next, you created some `pre-save` middleware to handle the hashing of your
    user''s passwords. It is widely known that storing a clear text version of your
    user''s passwords is a very bad practice that can result in the leakage of your
    users'' passwords. To handle this issue, your `pre-save` middleware performs two
    important steps: first, it creates an auto-generated pseudo-random hashing salt,
    and then it replaces the current user password with a hashed password using the
    `hashPassword()` instance method.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您创建了一些`pre-save`中间件来处理用户密码的哈希处理。众所周知，存储用户密码的明文版本是一种非常糟糕的做法，可能导致用户密码泄露。为了解决这个问题，您的`pre-save`中间件执行了两个重要的步骤：首先，它创建了一个自动生成的伪随机哈希盐，然后使用`hashPassword()`实例方法将当前用户密码替换为哈希密码。
- en: 'You also added two instance methods: a `hashPassword()` instance method, which
    is used to hash a password string by utilizing Node.js, `crypto` module; and an
    `authenticate()` instance method, which accepts a string argument, hashes it,
    and compares it to the current user''s hashed password. Finally, you added the
    `findUniqueUsername()` static method, which is used to find an available unique
    username for new users. You''ll use this method later in this chapter when you
    deal with OAuth authentication.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还添加了两个实例方法：一个`hashPassword()`实例方法，用于通过利用Node.js的`crypto`模块对密码字符串进行哈希处理；以及一个`authenticate()`实例方法，它接受一个字符串参数，对其进行哈希处理，并将其与当前用户的哈希密码进行比较。最后，您添加了`findUniqueUsername()`静态方法，用于为新用户找到一个可用的唯一用户名。在本章后面处理OAuth认证时，您将使用这个方法。
- en: That completes the modifications in your `User` model, but there are a few other
    things to take care of before you can test your application's authentication layer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了对您的`User`模型的修改，但在您测试应用程序的认证层之前，还有一些其他事情需要处理。
- en: Creating the authentication views
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建认证视图
- en: 'Just as with any web application, you will need to have signup and signin pages
    in order to handle user authentication. We''ll create those views using the **EJS**
    template engine, so in your `app/views` folder, create a new file named `signup.ejs`.
    In your newly created file, paste the following code snippet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何Web应用程序一样，您需要有注册和登录页面来处理用户认证。我们将使用**EJS**模板引擎创建这些视图，因此在您的`app/views`文件夹中，创建一个名为`signup.ejs`的新文件。在您新创建的文件中，粘贴以下代码片段：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `signup.ejs` view simply contains an HTML form; an EJS tag, which renders
    the title variable; and an EJS loop, which renders the `messages` list variable.
    Go back to your `app/views` folder and create another file, named `signin.ejs`.
    Inside this file, paste the following code snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`signup.ejs`视图只包含一个HTML表单；一个EJS标签，用于呈现`title`变量；以及一个EJS循环，用于呈现`messages`列表变量。返回到您的`app/views`文件夹，并创建另一个文件，命名为`signin.ejs`。在这个文件中，粘贴以下代码片段：'
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, the `signin.ejs` view is even simpler and also contains an HTML
    form; an EJS tag, which renders the `title` variable; and an EJS loop, which renders
    the `messages` list variable. Now that you have your model and views set, it's
    time to connect them using your Users controller.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`signin.ejs`视图甚至更简单，也包含一个HTML表单；一个EJS标签，用于呈现`title`变量；以及一个EJS循环，用于呈现`messages`列表变量。现在您已经设置了模型和视图，是时候使用您的Users控制器将它们连接起来了。
- en: Modifying the Users controller
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改Users控制器
- en: 'To alter the Users controller, go to your `app/controllers/users.server.controller.js`
    file, and change its content as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改Users控制器，转到您的`app/controllers/users.server.controller.js`文件，并按照以下方式更改其内容：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `getErrorMessage()` method is a private method that returns a unified error
    message from a Mongoose `error` object. It is worth noticing that there are two
    possible errors here: a MongoDB indexing error handled using the error code, and
    a Mongoose validation error handled using the `err.errors` object.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`getErrorMessage()`方法是一个私有方法，它从Mongoose `error`对象返回统一的错误消息。值得注意的是这里有两种可能的错误：使用错误代码处理的MongoDB索引错误，以及使用`err.errors`对象处理的Mongoose验证错误。'
- en: The next two controller methods are quite simple and will be used to render
    the sign-in and signup pages. The `signout()` method is also simple and uses the
    `req.logout()` method, which is provided by the Passport module to invalidate
    the authenticated session.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个控制器方法非常简单，将用于呈现登录和注册页面。`signout()`方法也很简单，使用了Passport模块提供的`req.logout()`方法来使认证会话失效。
- en: The `signup()` method uses your `User` model to create new users. As you can
    see, it first creates a user object from the HTTP request body. Then, try saving
    it to MongoDB. If an error occurs, the `signup()` method will use the `getErrorMessage()`
    method to provide the user with an appropriate error message. If the user creation
    was successful, the user session will be created using the `req.login()` method.
    The `req.login()` method is exposed by the `Passport` module and is used to establish
    a successful login session. After the login operation is completed, a user object
    will be signed to the `req.user` object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`signup()`方法使用您的`User`模型来创建新用户。正如您所看到的，它首先从HTTP请求体创建一个用户对象。然后，尝试将其保存到MongoDB。如果发生错误，`signup()`方法将使用`getErrorMessage()`方法为用户提供适当的错误消息。如果用户创建成功，将使用`req.login()`方法创建用户会话。`req.login()`方法由`Passport`模块公开，并用于建立成功的登录会话。登录操作完成后，用户对象将被签名到`req.user`对象中。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `req.login()` method will be called automatically while using the `passport.authenticate()`
    method, so a manual call for `req.login()` is primarily used when registering
    new users.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`req.login()`方法将在使用`passport.authenticate()`方法时自动调用，因此在注册新用户时主要使用手动调用`req.login()`。'
- en: In the preceding code, though, a module you're not yet familiar with is used.
    When an authentication process is failing, it is common to redirect the request
    back to the signup or sign-in pages. This is done here when an error occurs, but
    how can your user tell what exactly went wrong? The problem is that when redirecting
    to another page, you cannot pass variables to that page. The solution is to use
    some sort of mechanism to pass temporary messages between requests. Fortunately,
    that mechanism already exists in the form of a node module named `Connect-Flash`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，使用了一个您尚不熟悉的模块。当身份验证过程失败时，通常会将请求重定向回注册或登录页面。当发生错误时，这里会这样做，但是您的用户如何知道到底出了什么问题？问题在于当重定向到另一个页面时，您无法将变量传递给该页面。解决方案是使用某种机制在请求之间传递临时消息。幸运的是，这种机制已经存在，以一个名为`Connect-Flash`的节点模块的形式存在。 '
- en: Displaying flash error messages
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示闪存错误消息
- en: The `Connect-Flash` module is a node module that allows you to store temporary
    messages in an area of the session object called `flash`. Messages stored on the
    `flash` object will be cleared once they are presented to the user. This architecture
    makes the `Connect-Flash` module perfect for transferring messages before redirecting
    the request to another page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Connect-Flash`模块是一个允许您将临时消息存储在会话对象的`flash`区域中的节点模块。存储在`flash`对象上的消息在呈现给用户后将被清除。这种架构使`Connect-Flash`模块非常适合在将请求重定向到另一个页面之前传递消息。'
- en: Installing the Connect-Flash module
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Connect-Flash模块
- en: 'To install the `Connect-Flash` module in your application''s modules folders,
    you''ll need to change your `package.json` file as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序的模块文件夹中安装`Connect-Flash`模块，您需要按照以下方式更改您的`package.json`文件：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As usual, before you can continue developing your application, you will need
    to install your new dependency. Go to your application''s folder, and issue the
    following command in your command-line tool:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在继续开发应用程序之前，您需要安装新的依赖项。转到应用程序文件夹，并在命令行工具中发出以下命令：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will install the specified version of the `Connect-Flash` module in your
    `node_modules` folder. When the installation process is successfully finished,
    your next step is to configure your Express application to use the `Connect-Flash`
    module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的`node_modules`文件夹中安装指定版本的`Connect-Flash`模块。安装过程成功完成后，您的下一步是配置Express应用程序以使用`Connect-Flash`模块。
- en: Configuring Connect-Flash module
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置Connect-Flash模块
- en: 'To configure your Express application to use the new `Connect-Flash` module,
    you''ll have to require the new module in your Express configuration file and
    use the `app.use()` method to register it with your Express application. To do
    so, make the following changes in your `config/express.js` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您的Express应用程序以使用新的`Connect-Flash`模块，您需要在Express配置文件中要求新模块，并使用`app.use()`方法将其注册到Express应用程序中。为此，请在您的`config/express.js`文件中进行以下更改：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will tell your Express application to use the `Connect-Flash` module and
    create the new flash area in the application session.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉您的Express应用程序使用`Connect-Flash`模块，并在应用程序会话中创建新的闪存区域。
- en: Using Connect-Flash module
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Connect-Flash模块
- en: 'Once installed, the `Connect-Flash` module exposes the `req.flash()` method,
    which allows you to create and retrieve flash messages. To understand it better,
    let''s observe the changes you''ve made to your Users controller. First, let''s
    take a look at the `renderSignup()` and `renderSignin()` methods, which are responsible
    for rendering the sign-in and signup pages:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，`Connect-Flash`模块公开了`req.flash()`方法，允许您创建和检索闪存消息。为了更好地理解它，让我们观察您对用户控制器所做的更改。首先，让我们看看负责渲染登录和注册页面的`renderSignup()`和`renderSignin()`方法：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, the `res.render()` method is executed with the `title` and
    `messages` variables. The messages variable uses `req.flash()` to read the messages
    written to the flash. Now if you go over the `signup()` method, you''ll notice
    the following line of code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`res.render()`方法使用`title`和`messages`变量执行。messages变量使用`req.flash()`读取消息写入闪存。现在，如果您查看`signup()`方法，您会注意到以下代码行：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is how error messages are written to the flash, again using the `req.flash()`
    method. After you learned how to use the `Connect-Flash` module, you might have
    noticed that we''re lacking a `signin()` method. This is because Passport provides
    you with an authentication method, which you can use directly in your routing
    definition. To wrap up, let''s proceed to the last part that needs to be modified:
    the user''s routing definition file.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何使用`req.flash()`方法将错误消息写入闪存的方式。在学习如何使用`Connect-Flash`模块之后，您可能已经注意到我们缺少一个`signin()`方法。这是因为Passport为您提供了一个身份验证方法，您可以直接在路由定义中使用。最后，让我们继续进行最后需要修改的部分：用户的路由定义文件。
- en: Wiring the user's routes
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接用户路由
- en: 'Once you have your model, controller, and views configured, all that is left
    to do is define the user''s routes. To do so, make the following changes in your
    `app/routes/users.server.routes.js` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您配置好模型、控制器和视图，剩下的就是定义用户的路由。为此，请在您的`app/routes/users.server.routes.js`文件中进行以下更改：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, most of the route definitions here are basically directing to
    methods from your user controller. The only different route definition is the
    one where you're handling any POST request made to the `/signin` path using the
    `passport.authenticate()` method.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这里的大多数路由定义基本上是指向您的用户控制器中的方法。唯一不同的路由定义是处理发送到`/signin`路径的任何POST请求时使用`passport.authenticate()`方法。
- en: 'When the `passport.authenticate()` method is executed, it will try to authenticate
    the user request using the strategy defined by its first argument. In this case,
    it will try to authenticate the request using the local strategy. The second parameter
    this method accepts is an `options` object, which contains three properties:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行`passport.authenticate()`方法时，它将尝试使用其第一个参数定义的策略来验证用户请求。在这种情况下，它将尝试使用本地策略来验证请求。此方法接受的第二个参数是一个`options`对象，其中包含三个属性：
- en: '`successRedirect`: This property tells Passport where to redirect the request
    once it has successfully authenticated the user'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`successRedirect`：此属性告诉Passport在成功验证用户后将请求重定向到何处'
- en: '`failureRedirect`: This property tells Passport where to redirect the request
    once it has failed to authenticate the user'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`failureRedirect`：此属性告诉Passport在未能验证用户时将请求重定向到何处'
- en: '`failureFlash`: This property tells Passport whether or not to use flash messages'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`failureFlash`：此属性告诉Passport是否使用闪存消息'
- en: 'You''ve almost completed the basic authentication implementation. To test it
    out, make the following changes to the `app/controllers/index.server.controller.js`
    file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎已经完成了基本的身份验证实现。要测试它，请对`app/controllers/index.server.controller.js`文件进行以下更改：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will pass the authenticated user''s full name to your home page template.
    You will also have to make the following changes in your `app/views/index.ejs`
    file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向您的主页模板传递经过身份验证的用户的全名。您还需要对`app/views/index.ejs`文件进行以下更改：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'That''s it! Everything is ready to test your new authentication layer. Go to
    your root application folder and use the node command-line tool to run your application
    and type the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一切都准备好测试您的新身份验证层。转到您的根应用程序文件夹，并使用node命令行工具运行您的应用程序，然后输入以下命令：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Test your application by visiting `http://localhost:3000/signin` and `http://localhost:3000/signup`.
    Try signing up, and then sign in and don't forget to go back to your home page
    to see how the user details are saved through the session.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`http://localhost:3000/signin`和`http://localhost:3000/signup`来测试您的应用程序。尝试注册，然后登录，不要忘记返回到您的主页，查看用户详细信息如何通过会话保存。
- en: Understanding Passport OAuth strategies
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Passport OAuth策略
- en: OAuth is an authentication protocol that allows users to register with your
    web application using an external provider, without the need to input their username
    and password. OAuth is mainly used by social platforms, such as Facebook, Twitter,
    and Google, to allow users to register with other websites using their social
    account.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth是一种身份验证协议，允许用户使用外部提供者注册您的Web应用程序，而无需输入其用户名和密码。OAuth主要由社交平台（如Facebook、Twitter和Google）使用，允许用户使用其社交账户注册其他网站。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To learn more about how OAuth works, visit the OAuth protocol website at [http://oauth.net/](http://oauth.net/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关OAuth的更多信息，请访问[http://oauth.net/](http://oauth.net/)上的OAuth协议网站。
- en: Setting up OAuth strategies
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置OAuth策略
- en: Passport supports the basic OAuth strategy, which enables you to implement any
    OAuth-based authentication. However, it also supports user authentication through
    major OAuth providers using wrapper strategies that help you avoid the need to
    implement a complex mechanism by yourself. In this section, we'll review the top
    OAuth providers and how to implement their Passport authentication strategy.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Passport支持基本的OAuth策略，这使您能够实现任何基于OAuth的身份验证。但是，它还支持通过主要的OAuth提供者进行用户身份验证，使用包装策略来帮助您避免自己实现复杂的机制。在本节中，我们将回顾顶级OAuth提供者以及如何实现其Passport身份验证策略。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin, you will have to contact the OAuth provider and create a developer
    application. This application will have both an OAuth client ID and an OAuth client
    secret, which will allow you to verify your application against the OAuth provider.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要联系OAuth提供者并创建一个开发者应用程序。此应用程序将具有OAuth客户端ID和OAuth客户端密钥，这将允许您对您的应用程序进行OAuth提供者的验证。
- en: Handling OAuth user creation
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理OAuth用户创建
- en: 'The OAuth user creation should be a bit different from the local `signup()`
    method. Since users are signing up using their profile from other providers, the
    profile details are already present, which means you will need to validate them
    differently. To do so, go back to your `app/controllers/users.server.controller.js`
    file, and add the following method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth用户创建应该与本地`signup()`方法有些不同。由于用户是使用其他提供者的配置文件注册的，配置文件详细信息已经存在，这意味着您需要以不同的方式对它们进行验证。为此，请返回到您的`app/controllers/users.server.controller.js`文件，并添加以下方法：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method accepts a user profile, and then looks for an existing user with
    these `providerId` and `provider` properties. If it finds the user, it calls the
    `done()` callback method with the user's MongoDB document. However, if it cannot
    find an existing user, it will find a unique username using the User model's `findUniqueUsername()`
    static method and save a new user instance. If an error occurs, the `saveOAuthUserProfile()`
    method will use the `done()` methods to report the error; otherwise, it will pass
    the user object to the `done()` callback method. Once you have figured out the
    `saveOAuthUserProfile()` method, it is time to implement the first OAuth authentication
    strategy.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受一个用户资料，然后查找具有这些`providerId`和`provider`属性的现有用户。如果找到用户，它将使用用户的MongoDB文档调用`done()`回调方法。但是，如果找不到现有用户，它将使用User模型的`findUniqueUsername()`静态方法找到一个唯一的用户名，并保存一个新的用户实例。如果发生错误，`saveOAuthUserProfile()`方法将使用`done()`方法报告错误；否则，它将把用户对象传递给`done()`回调方法。一旦弄清楚了`saveOAuthUserProfile()`方法，就是时候实现第一个OAuth认证策略了。
- en: Using Passport's Facebook strategy
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Passport的Facebook策略
- en: Facebook is probably the world's largest OAuth provider. Many modern web applications
    offer their users the ability to register with the web application using their
    Facebook profile. Passport supports Facebook OAuth authentication using the `passport-facebook`
    module. Let's see how you can implement Facebook-based authentication in a few
    simple steps.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook可能是世界上最大的OAuth提供商。许多现代Web应用程序允许用户使用他们的Facebook资料注册Web应用程序。Passport支持使用`passport-facebook`模块进行Facebook
    OAuth认证。让我们看看如何通过几个简单的步骤实现基于Facebook的认证。
- en: Installing Passport's Facebook strategy
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Passport的Facebook策略
- en: 'To install Passport''s Facebook module in your application''s modules folders,
    you''ll need to change your `package.json` file as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序的模块文件夹中安装Passport的Facebook模块，你需要按照以下方式更改你的`package.json`文件：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Before you can continue developing your application, you will need to install
    the new Facebook strategy dependency. To do so, go to your application''s `root`
    folder, and issue the following command in your command-line tool:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续开发应用之前，你需要安装新的Facebook策略依赖。为此，前往你应用的`root`文件夹，并在命令行工具中输入以下命令：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will install the specified version of Passport's Facebook strategy in your
    `node_modules` folder. Once the installation process has successfully finished,
    you will need to configure the Facebook strategy.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的`node_modules`文件夹中安装指定版本的Passport的Facebook策略。安装过程成功完成后，你需要配置Facebook策略。
- en: Configuring Passport's Facebook strategy
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置Passport的Facebook策略
- en: 'Before you begin configuring your Facebook strategy, you will have to go to
    Facebook''s developers'' home page at [https://developers.facebook.com/](https://developers.facebook.com/),
    create a new Facebook application, and set the local host as the application domain.
    After configuring your Facebook application, you will get a Facebook application
    ID and secret. You''ll need those to authenticate your users via Facebook, so
    let''s save them in our environment configuration file. Go to the `config/env/development.js`
    file and change it as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始配置Facebook策略之前，你需要前往Facebook的开发者主页[https://developers.facebook.com/](https://developers.facebook.com/)，创建一个新的Facebook应用，并将本地主机设置为应用域。配置完Facebook应用后，你将获得一个Facebook应用ID和密钥。你需要这些信息来通过Facebook对用户进行认证，所以让我们将它们保存在环境配置文件中。前往`config/env/development.js`文件，并进行以下更改：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Don't forget to replace `Application Id` and `Application Secret` with your
    Facebook application's ID and secret. The `callbackURL` property will be passed
    to the Facebook OAuth service, which will redirect to that URL after the authentication
    process is over. Make sure the `callbackURL` property matches the callback settings
    that you've set in the developer's home page.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记用你的Facebook应用ID和密钥替换`Application Id`和`Application Secret`。`callbackURL`属性将被传递给Facebook
    OAuth服务，在认证过程结束后将重定向到该URL。确保`callbackURL`属性与你在开发者主页设置的回调设置匹配。
- en: 'Now, go to your `config/strategies` folder, and create a new file named `facebook.js`
    that contains the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往你的`config/strategies`文件夹，创建一个名为`facebook.js`的新文件，其中包含以下代码片段：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s go over the preceding code snippet for a moment. You begin by requiring
    the `passport` module, the Facebook Strategy object, your environmental configuration
    file, your `User` Mongoose model, and the Users controller. Then, you register
    the strategy using the `passport.use()` method and creating an instance of a `FacebookStrategy`
    object. The `FacebookStrategy` constructor takes two arguments: the Facebook application
    information and a callback function that it will call later when trying to authenticate
    a user.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微回顾一下前面的代码片段。你首先需要引入`passport`模块、Facebook策略对象、你的环境配置文件、你的`User` Mongoose模型和Users控制器。然后，使用`passport.use()`方法注册策略，并创建一个`FacebookStrategy`对象的实例。`FacebookStrategy`构造函数接受两个参数：Facebook应用信息和稍后在尝试认证用户时将调用的回调函数。
- en: 'Take a look at the callback function you defined. It accepts five arguments:
    the `HTTP request` object, an `accessToken` object to validate future requests,
    a `refreshToken` object to grab new access tokens, a `profile` object containing
    the user profile, and a `done` callback to be called when the authentication process
    is over.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下你定义的回调函数。它接受五个参数：`HTTP请求`对象，一个`accessToken`对象用于验证未来的请求，一个`refreshToken`对象用于获取新的访问令牌，一个包含用户资料的`profile`对象，以及在认证过程结束时调用的`done`回调函数。
- en: Inside the callback function, you will create a new user object using the Facebook
    profile information and the controller's `saveOAuthUserProfile()` method, which
    you previously created, to authenticate the current user.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数内部，你将使用Facebook资料信息创建一个新的用户对象，并使用控制器的`saveOAuthUserProfile()`方法对当前用户进行认证。
- en: 'Remember the `config/passport.js` file? Well, now that you have your Facebook
    strategy configured, you can go back to it and load the strategy file. To do so,
    go back to the `config/passport.js` file and change it, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得`config/passport.js`文件吗？现在您已经配置了您的Facebook策略，您可以返回到该文件并加载策略文件。为此，返回`config/passport.js`文件并按以下方式更改它：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will load your Facebook strategy configuration file. Now, all that is left
    to do is set the routes needed to authenticate users via Facebook and include
    a link to those routes in your sign-in and signup pages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载您的Facebook策略配置文件。现在，剩下的就是设置通过Facebook对用户进行身份验证所需的路由，并在您的登录和注册页面中包含指向这些路由的链接。
- en: Wiring Passport's Facebook strategy routes
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接Passport的Facebook策略路由
- en: 'Passport OAuth strategies support the ability to authenticate users directly
    using the `passport.authenticate()` method. To do so, go to `app/routes/users.server.routes.js`,
    and append the following lines of code after the local strategy routes definition:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Passport OAuth策略支持使用`passport.authenticate()`方法直接对用户进行身份验证的能力。要这样做，转到`app/routes/users.server.routes.js`，并在本地策略路由定义之后追加以下代码行：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first route will use the `passport.authenticate()` method to start the user
    authentication process, while the second route will use the `passport.authenticate()`
    method to finish the authentication process once the user has linked their Facebook
    profile.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个路由将使用`passport.authenticate()`方法启动用户身份验证过程，而第二个路由将在用户链接其Facebook个人资料后使用`passport.authenticate()`方法完成身份验证过程。
- en: 'That''s it! Everything is set up for your users to authenticate via Facebook.
    All you have to do now is go to your `app/views/signup.ejs` and `app/views/signin.ejs`
    files, and add the following line of code right before the closing `BODY` tag:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一切都为您的用户通过Facebook进行身份验证设置好了。现在您只需要转到您的`app/views/signup.ejs`和`app/views/signin.ejs`文件，并在关闭的`BODY`标签之前添加以下代码行：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will allow your users to click on the link and register with your application
    via their Facebook profile.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您的用户点击链接并通过其Facebook个人资料注册您的应用程序。
- en: Using Passport's Twitter strategy
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Passport的Twitter策略
- en: Another popular OAuth provider is Twitter, and a lot of web applications offer
    their users the ability to register with the web application using their Twitter
    profile. Passport supports the Twitter OAuth authentication method using the `passport-twitter`
    module. Let's see how you can implement a Twitter-based authentication in a few
    simple steps.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的OAuth提供程序是Twitter，许多Web应用程序都提供用户使用其Twitter个人资料注册Web应用程序的功能。Passport支持使用`passport-twitter`模块的Twitter
    OAuth身份验证方法。让我们看看如何通过几个简单的步骤实现基于Twitter的身份验证。
- en: Installing Passport's Twitter strategy
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Passport的Twitter策略
- en: 'To install Passport''s Twitter strategy module in your application''s modules
    folders, you''ll need to change your `package.json` file as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序的模块文件夹中安装Passport的Twitter策略模块，您需要按照以下步骤更改您的`package.json`文件：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Before you continue developing your application, you will need to install the
    new Twitter strategy dependency. Go to your application''s `root` folder, and
    issue the following command in your command-line tool:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续开发应用程序之前，您需要安装新的Twitter策略依赖项。转到您的应用程序的`root`文件夹，并在命令行工具中发出以下命令：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will install the specified version of Passport's Twitter strategy in your
    `node_modules` folder. Once the installation process has successfully finished,
    you will need to configure the Twitter strategy.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的`node_modules`文件夹中安装指定版本的Passport的Twitter策略。安装过程成功完成后，您需要配置Twitter策略。
- en: Configuring Passport's Twitter strategy
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置Passport的Twitter策略
- en: 'Before we begin configuring your Twitter strategy, you will have to go to the
    Twitter developers'' home page at [https://dev.twitter.com/](https://dev.twitter.com/)
    and create a new Twitter application. After configuring your Twitter application,
    you will get a Twitter application ID and secret. You''ll need them to authenticate
    your users via Twitter, so let''s add them in our environment configuration file.
    Go to the `config/env/development.js` file, and change it as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始配置Twitter策略之前，您需要转到Twitter开发者主页[https://dev.twitter.com/](https://dev.twitter.com/)并创建一个新的Twitter应用程序。配置Twitter应用程序后，您将获得Twitter应用程序ID和密钥。您需要它们来通过Twitter对用户进行身份验证，因此让我们将它们添加到我们的环境配置文件中。转到`config/env/development.js`文件，并按以下方式更改它：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Don't forget to replace `Application Id` and `Application Secret` with your
    Twitter application's ID and secret. The `callbackURL` property will be passed
    to the Twitter OAuth service, which will redirect the user to that URL after the
    authentication process is over. Make sure the `callbackURL` property matches the
    callback settings that you've set in the developer's home page.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记用您的Twitter应用程序的ID和密钥替换`Application Id`和`Application Secret`。`callbackURL`属性将被传递给Twitter
    OAuth服务，该服务将在认证过程结束后将用户重定向到该URL。确保`callbackURL`属性与您在开发者主页中设置的回调设置匹配。
- en: 'As stated earlier, in your project, each strategy should be configured in its
    own separate file, which will help you keep your project organized. Go to your
    `config/strategies` folder, and create a new file named `twitter.js` containing
    the following lines of code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在您的项目中，每个策略都应该在自己单独的文件中进行配置，这将帮助您保持项目的组织。转到您的`config/strategies`文件夹，并创建一个名为`twitter.js`的新文件，其中包含以下代码行：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You begin by requiring the `passport` module, the `Twitter Strategy` object,
    your environmental configuration file, your `User` Mongoose model, and the Users
    controller. Then, you register the strategy using the `passport.use()` method,
    and create an instance of a `TwitterStrategy` object. The `TwitterStrategy` constructor
    takes two arguments: the Twitter application information and a callback function
    that it will call later when trying to authenticate a user.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要引入`passport`模块、`Twitter Strategy`对象、您的环境配置文件、您的`User` Mongoose模型和Users控制器。然后，您使用`passport.use()`方法注册策略，并创建`TwitterStrategy`对象的实例。`TwitterStrategy`构造函数接受两个参数：Twitter应用程序信息和稍后在尝试对用户进行身份验证时将调用的回调函数。
- en: 'Take a look at the callback function you defined. It accepts five arguments:
    the `HTTP request` object, a `token` object and a `tokenSecret` object to validate
    future requests, a `profile` object containing the user profile, and a `done`
    callback to be called when the authentication process is over.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 查看您定义的回调函数。它接受五个参数：`HTTP请求`对象，一个`token`对象和一个`tokenSecret`对象来验证未来的请求，一个包含用户配置文件的`profile`对象，以及在身份验证过程结束时调用的`done`回调。
- en: Inside the callback function, you will create a new user object using the Twitter
    profile information and the controller's `saveOAuthUserProfile()` method, which
    you created previously, to authenticate the current user.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中，您将使用Twitter配置文件信息创建一个新的用户对象，并使用您之前创建的控制器的`saveOAuthUserProfile()`方法来验证当前用户。
- en: 'Now that you have your Twitter strategy configured, you can go back to the
    `config/passport.js` file and load the strategy file as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经配置了Twitter策略，您可以返回“config/passport.js”文件，并按照以下方式加载策略文件：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will load your Twitter strategy configuration file. Now all that is left
    to do is set the routes needed to authenticate users via Twitter and include a
    link to those routes in your sign-in and signup pages.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载您的Twitter策略配置文件。现在，您只需要设置所需的路由来通过Twitter对用户进行身份验证，并在登录和注册页面中包含指向这些路由的链接。
- en: Wiring Passport's Twitter strategy routes
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接Passport的Twitter策略路由
- en: 'To add Passport''s Twitter routes, go to your `app/routes/users.server.routes.js`
    file, and paste the following code after the Facebook strategy routes:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加Passport的Twitter路由，请转到您的`app/routes/users.server.routes.js`文件，并在Facebook策略路由之后粘贴以下代码：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first route will use the `passport.authenticate()` method to start the user
    authentication process, while the second route will use the `passport.authenticate()`
    method to finish the authentication process once the user has used their Twitter
    profile to connect.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个路由将使用`passport.authenticate()`方法启动用户身份验证过程，而第二个路由将在用户使用其Twitter配置文件连接后使用`passport.authenticate()`方法完成身份验证过程。
- en: 'That''s it! Everything is set up for your user''s Twitter-based authentication.
    All you have to do is go to your `app/views/signup.ejs` and `app/views/signin.ejs`
    files and add the following line of code right before the closing `BODY` tag:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您的用户的Twitter身份验证已经设置好了。您需要做的就是转到您的“app/views/signup.ejs”和“app/views/signin.ejs”文件，并在关闭的“BODY”标签之前添加以下代码行：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will allow your users to click on the link and register with your application
    via their Twitter profile.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您的用户点击链接，并通过其Twitter配置文件注册到您的应用程序。
- en: Using Passport's Google strategy
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Passport的Google策略
- en: The last OAuth provider we'll implement is Google as a lot of web applications
    offer their users the ability to register with the web application using their
    Google profile. Passport supports the Google OAuth authentication method using
    the `passport-google-oauth` module. Let's see how you can implement a Google-based
    authentication in a few simple steps.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现的最后一个OAuth提供程序是Google，因为许多Web应用程序都允许用户使用其Google配置文件注册Web应用程序。Passport支持使用“passport-google-oauth”模块的Google
    OAuth身份验证方法。让我们看看如何通过几个简单的步骤实现基于Google的身份验证。
- en: Installing Passport's Google strategy
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Passport的Google策略
- en: 'To install Passport''s Google strategy module in your application''s modules
    folders, you''ll need to change your `package.json` file, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序的模块文件夹中安装Passport的Google策略模块，您需要更改您的“package.json”文件，如下所示：
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Before you can continue developing your application, you will need to install
    the new Google strategy dependency. Go to your application''s `root` folder, and
    issue the following command in your command-line tool:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在您继续开发应用程序之前，您需要安装新的谷歌策略依赖项。转到应用程序的“根”文件夹，并在命令行工具中输入以下命令：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This will install the specified version of Passport's Google strategy in your
    `node_modules` folder. Once the installation process has successfully finished,
    you will need to configure the Google strategy.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的“node_modules”文件夹中安装Passport的Google策略的指定版本。安装过程成功完成后，您需要配置Google策略。
- en: Configuring Passport's Google strategy
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置Passport的Google策略
- en: 'Before we begin configuring your Google strategy, you will have to go to the
    Google developers'' home page at [https://console.developers.google.com/](https://console.developers.google.com/)and
    create a new Google application. In your application''s settings, set the `JAVASCRIPT
    ORIGINS` property to `http://localhost` and the `REDIRECT URLs` property to `http://localhost/oauth/google/callback`.
    After configuring your Google application, you will get a Google application ID
    and secret. You''ll need them to authenticate your users via Google, so let''s
    add them in our environment configuration file. Go to the `config/env/development.js`
    file, and change it as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始配置您的Google策略之前，您需要转到Google开发人员主页[https://console.developers.google.com/](https://console.developers.google.com/)并创建一个新的Google应用程序。在应用程序的设置中，将“JAVASCRIPT
    ORIGINS”属性设置为“http://localhost”，将“REDIRECT URLs”属性设置为“http://localhost/oauth/google/callback”。配置完您的Google应用程序后，您将获得Google应用程序ID和密钥。您需要它们来通过Google对用户进行身份验证，因此让我们将它们添加到我们的环境配置文件中。转到“config/env/development.js”文件，并更改如下：
- en: '[PRE38]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Don't forget to replace `Application Id` and `Application Secret` with your
    Google application's ID and secret. The `callbackURL` property will be passed
    to the Google OAuth service, which will redirect the user to that URL after the
    authentication process is over. Make sure the `callbackURL` property matches the
    callback settings that you've set in the developers' home page.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记用您的Google应用程序的ID和密钥替换`Application Id`和`Application Secret`。`callbackURL`属性将传递给Google
    OAuth服务，在身份验证过程结束后将用户重定向到该URL。确保`callbackURL`属性与您在开发人员主页中设置的回调设置匹配。
- en: 'To implement the Google authentication strategy, go to your `config/strategies`
    folder, and create a new file named `google.js` containing the following lines
    of code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现Google身份验证策略，请转到您的`config/strategies`文件夹，并创建一个名为`google.js`的新文件，其中包含以下代码行：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s go over the preceding code snippet for a moment. You begin by requiring
    the `passport` module, the Google Strategy object, your environmental configuration
    file, your `User` Mongoose model, and the Users controller. Then, you register
    the strategy using the `passport.use()` method and create an instance of a `GoogleStrategy`
    object. The `GoogleStrategy` constructor takes two arguments: the Google application
    information and a callback function that it will later call when trying to authenticate
    a user.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微回顾一下前面的代码片段。您首先需要引入`passport`模块、Google策略对象、您的环境配置文件、`User` Mongoose模型和用户控制器。然后，使用`passport.use()`方法注册策略，并创建一个`GoogleStrategy`对象的实例。`GoogleStrategy`构造函数接受两个参数：Google应用程序信息和稍后在尝试对用户进行身份验证时将调用的回调函数。
- en: 'Take a look at the callback function you defined. It accepts five arguments:
    the `HTTP request` object, an `accessToken` object to validate future requests,
    a `refreshToken` object to grab new access tokens, a `profile` object containing
    the user profile, and a `done` callback to be called when the authentication process
    is over.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 查看您定义的回调函数。它接受五个参数：`HTTP请求`对象，用于验证未来请求的`accessToken`对象，用于获取新访问令牌的`refreshToken`对象，包含用户配置文件的`profile`对象，以及在认证过程结束时调用的`done`回调。
- en: Inside the callback function, you will create a new user object using the Google
    profile information and the controller's `saveOAuthUserProfile()` method, which
    you previously created, to authenticate the current user.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中，您将使用Google配置文件信息和控制器的`saveOAuthUserProfile()`方法创建一个新的用户对象，该方法是您之前创建的，用于验证当前用户。
- en: 'Now that you have your Google strategy configured, you can go back to the `config/passport.js`
    file and load the strategy file, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经配置了Google策略，可以返回到`config/passport.js`文件并加载策略文件，如下所示：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will load your Google strategy configuration file. Now all that is left
    to do is set the routes required to authenticate users via Google and include
    a link to those routes in your sign-in and signup pages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载您的Google策略配置文件。现在剩下的就是设置所需的路由来通过Google对用户进行身份验证，并在您的登录和注册页面中包含指向这些路由的链接。
- en: Wiring Passport's Google strategy routes
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接Passport的Google策略路由
- en: 'To add Passport''s Google routes, go to your `app/routes/users.server.routes.js`
    file, and paste the following lines of code after the Twitter strategy routes:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加Passport的Google路由，请转到您的`app/routes/users.server.routes.js`文件，并在Twitter策略路由之后粘贴以下代码行：
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The first route will use the `passport.authenticate()` method to start the user
    authentication process, while the second route will use the `passport.authenticate()`
    method to finish the authentication process once the user has used their Google
    profile to connect.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个路由将使用`passport.authenticate()`方法启动用户身份验证过程，而第二个路由将使用`passport.authenticate()`方法在用户使用其Google配置文件连接后完成身份验证过程。
- en: 'That''s it! Everything is set up for your user''s Google-based authentication.
    All you have to do is go to your `app/views/signup.ejs` and `app/views/signin.ejs`
    files and add the following line of code right before the closing `BODY` tag:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一切都为您的用户基于Google的身份验证设置好了。您只需转到您的`app/views/signup.ejs`和`app/views/signin.ejs`文件，并在关闭的`BODY`标签之前添加以下代码行：
- en: '[PRE42]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This will allow your users to click on the link and register with your application
    via their Google profile. To test your new authentication layers, go to your application''s
    `root` folder and use the node command-line tool to run your application:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您的用户点击链接并通过其Google配置文件注册您的应用程序。要测试您的新身份验证层，转到应用程序的`root`文件夹，并使用node命令行工具运行您的应用程序：
- en: '[PRE43]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Test your application by visiting `http://localhost:3000/signin` and `http://localhost:3000/signup`.
    Try signing up and signing in using the new OAuth methods. Don't forget to visit
    your home page to see how the user details are saved throughout the session.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`http://localhost:3000/signin`和`http://localhost:3000/signup`来测试您的应用程序。尝试使用新的OAuth方法进行注册和登录。不要忘记访问您的主页，查看用户详细信息在整个会话期间是如何保存的。
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Passport has similar support for many additional OAuth providers. To learn more,
    it is recommended that you visit [http://passportjs.org/guide/providers/](http://passportjs.org/guide/providers/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Passport还为许多其他OAuth提供程序提供类似的支持。要了解更多信息，建议您访问[http://passportjs.org/guide/providers/](http://passportjs.org/guide/providers/)。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the Passport authentication module. You discovered
    its strategies and how to handle their installation and configuration. You also
    learned how to properly register your users and how to authenticate their requests.
    You went through Passport's local strategy and learned how to authenticate users
    using a username and password and how Passport supports the different OAuth authentication
    providers. In the next chapter, you'll discover the last piece of the MEAN puzzle,
    when we introduce you to **Angular**.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Passport身份验证模块。您了解了其策略以及如何处理其安装和配置。您还学会了如何正确注册用户以及如何验证其请求。您已经了解了Passport的本地策略，并学会了如何使用用户名和密码对用户进行身份验证，以及Passport如何支持不同的OAuth身份验证提供程序。在下一章中，我们将向您介绍MEAN拼图的最后一部分，即**Angular**。
