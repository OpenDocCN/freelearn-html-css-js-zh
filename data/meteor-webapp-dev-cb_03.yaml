- en: Chapter 3. Building Great User Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 构建出色的用户界面
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Inserting templates with Spacebars
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spacebars插入模板
- en: Inserting raw HTML using triple braces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用三重花括号插入原始HTML
- en: Creating dynamic lists
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态列表
- en: Building a smooth interface with Bootstrap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap构建平滑的界面
- en: Creating customized global helpers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义的全局辅助函数
- en: Creating custom components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义组件
- en: Using reactivity with HTML attributes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反应性HTML属性
- en: Using dynamic templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态模板
- en: Animating DOM elements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画DOM元素
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Like everything else in Meteor, UI development is designed to be simple, elegant,
    and powerful. With just a few imperative commands, you can create sophisticated
    and dynamic user interfaces, significantly speeding up your prototyping/wireframing
    efforts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Meteor中的其他一切一样，UI开发被设计成简单、优雅且强大。只需几个命令，你就能创建复杂且动态的用户界面，显著加快你的原型/线框设计工作。
- en: The recipes in this chapter will walk you through the most common UI- and template-building
    techniques, which will form the foundation for your Meteor apps moving forward.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将带你了解最常用的UI和模板构建技术，这些技术将成为你未来Meteor应用程序的基础。
- en: Inserting templates with Spacebars
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spacebars插入模板
- en: '**Spacebars** is Meteor''s templating language. All **Document** **Object Model**
    (**DOM**) elements in Meteor are created programmatically using Meteor''s default
    templating engine, **Blaze**. Elements can therefore be created using pure JavaScript.
    Using JavaScript to create HTML elements, however, isn''t exactly quick and easy.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spacebars**是Meteor的模板语言。在Meteor中，所有**文档对象模型**（**DOM**）元素都是通过Meteor的默认模板引擎**Blaze**程序化创建的。因此，可以使用纯JavaScript创建元素。然而，使用JavaScript创建HTML元素并不一定快速和简单。'
- en: Inspired by the popular HTML templating language **Handlebars**, Spacebars makes
    it incredibly easy to structure and declare your HTML elements using templates.
    And, it gives you access to all the reactive and dynamic features of Meteor. This
    recipe will show you how to create templates using the Spacebars syntax.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 受到流行的HTML模板语言**Handlebars**的启发，Spacebars使得使用模板结构化和声明HTML元素变得极其简单。它还为你提供了访问Meteor所有反应性和动态功能的机会。这个食谱将向你展示如何使用Spacebars语法创建模板。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need Meteor installed and have a project created. We recommend that
    you have a simple project, similar to the one found in the *Setting up your project
    file structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*, but any project will do. You will
    need to locate your `<body>` tag, which is usually found inside your `main.html`
    file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装Meteor并创建一个项目。我们建议你有一个简单的项目，类似于在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 优化你的工作流程")中找到的*设置你的项目文件结构*食谱，*优化你的工作流程*，但任何项目都可以。你需要找到你的`<body>`标签，它通常位于你的`main.html`文件中。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To make this recipe just a little bit more useful, we are going to create two
    templates and nest one inside of the other, using the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个食谱更有用，我们将创建两个模板，并使用以下步骤将一个模板嵌套在另一个模板中：
- en: First, create a file named `templates.html` and add it to your `client` folder:![How
    to do it...](img/image00345.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`templates.html`的文件，并将其添加到你的`client`文件夹中：![如何做...](img/image00345.jpeg)
- en: 'Open `templates.html` in an editor, add the following code, and save your changes:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开`templates.html`，添加以下代码，并保存你的更改：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, open your `main.html` file (or the `.html` file that contains your `<body>`
    tag) and edit your `body` tag by adding the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你的`main.html`文件（或包含你的`<body>`标签的`.html`文件）并编辑你的`body`标签，添加以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the changes, start Meteor if it isn't already running, and navigate to
    your Meteor-hosted page in a browser (usually `http://localhost:3000`):![How to
    do it...](img/image00346.jpeg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改，如果Meteor尚未运行，请启动它，并在浏览器中导航到你的Meteor托管页面（通常是`http://localhost:3000`）:![如何做...](img/image00346.jpeg)
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We created two templates, with the first one being a very simple `svg` element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个模板，第一个是一个非常简单的`svg`元素：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We gave the template a `name` attribute value as `"one"` and added the well-formed
    HTML `<circle>` element with position and appearance attributes. We also created
    a parent template, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给模板分配了一个`name`属性值为`"one"`，并添加了具有位置和外观属性的格式良好的HTML `<circle>`元素。我们还创建了一个父模板，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This template also has a name (`"firstTemplate"`) and contains a `<div>` element,
    containing the title of our template. We declared an `<svg>` element, and we inserted
    our template named `one` between the `<svg>` and `</svg>` tags using the `{{>}}`
    command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板还有一个名称（`"firstTemplate"`）并且包含一个`<div>`元素，其中包含我们模板的标题。我们声明了一个`<svg>`元素，并使用`{{>}}`命令在`<svg>`和`</svg>`标签之间插入名为`one`的模板。
- en: Finally, in `main.html`, we inserted the `firstTemplate` template between the
    main `<body>` and `</body>` tags, again using the `{{>}}` command, which is also
    known as **template inclusion**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`main.html`中，我们使用`{{>}}`命令（也称为**模板包含**）在主`<body>`和`</body>`标签之间插入`firstTemplate`模板。
- en: 'As you can see, the content of our templates consists primarily of HTML tags.
    This is the fundamental building block of our UI, and it''s how we''ve been creating
    templates from the very beginning. Anything contained inside double braces (`{{…}}`)
    is a command meant for Blaze, Meteor''s templating engine. In this case, we told
    Blaze to:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们模板的内容主要由HTML标签组成。这是我们UI的基本构建块，也是我们从一开始创建模板的方式。任何包含在双花括号（`{{…}}`）中的内容都是针对Blaze的命令，Blaze是Meteor的模板引擎。在这种情况下，我们告诉Blaze：
- en: Insert the `firstTemplate` template into our `<body>` element.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`firstTemplate`模板插入到我们的`<body>`元素中。
- en: Insert the `one` template into our `<svg>` element, inside `firstTemplate`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`one`模板插入到我们的`<svg>`元素中，在`firstTemplate`内部。
- en: There's more…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You can read all about templates in the official Meteor documentation, found
    at [http://docs.meteor.com/#/full/templates](http://docs.meteor.com/#/full/templates).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Meteor文档中阅读有关模板的所有信息，该文档位于[http://docs.meteor.com/#/full/templates](http://docs.meteor.com/#/full/templates)。
- en: Inserting raw HTML using triple braces
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用三重花括号插入原始HTML
- en: Occasionally, you will want to insert raw HTML into your Meteor page. This is
    typically done when you have HTML generated by another process or library. This
    recipe will show you how to render your raw HTML inside a Meteor template.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能想在您的Meteor页面上插入原始HTML。这通常发生在您有由其他进程或库生成的HTML时。本配方将向您展示如何在Meteor模板中渲染您的原始HTML。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need Meteor installed and have a project created with at least one
    template in it. We recommend that you use the files created in the *Inserting
    templates with Spacebars* recipe found in this chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Meteor并创建一个至少包含一个模板的项目。我们建议您使用本章中*使用Spacebars插入模板*配方中创建的文件。
- en: If you don't have a `templates.js` file in your `client` folder already, you
    should create one to keep your template `helpers` and `events` logic separate
    from other JavaScript you may be running.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`client`文件夹中还没有`templates.js`文件，您应该创建一个来将模板`helpers`和`events`逻辑与其他JavaScript代码分开。
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Identify the name of your root template and open the file containing your template
    definition. In our case, the root template is named `firstTemplate`, which can
    be found in our `templates.html` file, which is in our `[project root]/client`
    folder. Proceed with the following steps to insert raw HTML using triple braces:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 识别您根模板的名称并打开包含模板定义的文件。在我们的例子中，根模板命名为`firstTemplate`，可以在我们的`templates.html`文件中找到，该文件位于我们的`[项目根]/client`文件夹中。按照以下步骤使用三重花括号插入原始HTML：
- en: 'Insert the following line, just before the `</template>` tag, and save your
    changes:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`</template>`标签之前插入以下行，并保存您的更改：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, open your `templates.js` file and add the following helper function:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，打开您的`templates.js`文件并添加以下辅助函数：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save your changes, start Meteor if it isn't already running, and navigate to
    your Meteor-hosted page in a browser (usually `http://localhost:3000`). You should
    see the rendered HTML at the bottom of your screen, as shown in the following
    screenshot:![How to do it…](img/image00347.jpeg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的更改，如果Meteor尚未运行，请启动它，并在浏览器中导航到您的Meteor托管页面（通常是`http://localhost:3000`）。您应该在屏幕底部看到渲染的HTML，如下面的截图所示：![如何操作…](img/image00347.jpeg)
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We created and then called our `Template.firstTemplate.rawInsert` helper function
    by adding the `{{{rawInsert}}}` tag at the bottom of our template and declaring
    the `rawInsert` helper in our `templates.js` file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并调用了我们的`Template.firstTemplate.rawInsert`辅助函数，通过在模板底部添加`{{{rawInsert}}}`标签并在我们的`templates.js`文件中声明`rawInsert`辅助函数来实现。
- en: The triple-braced tag informs Blaze that the object returned from the helper
    will be raw HTML and needs to be rendered as such. Accordingly, Blaze expects
    a string and will attempt to render it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 三重花括号标签通知Blaze，从辅助函数返回的对象将是原始HTML，需要以这种方式渲染。相应地，Blaze期望一个字符串，并尝试渲染它。
- en: 'To see how Blaze would normally treat raw HTML, change the triple-braced tag
    to a double-braced tag `( {{rawInsert}})` save your file, and view the result
    in your browser, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Blaze 通常如何处理原始 HTML，将三重花括号标签更改为双花括号标签 `( {{rawInsert}})`，保存你的文件，并在浏览器中查看结果，如下面的截图所示：
- en: '![How it works…](img/image00348.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/image00348.jpeg)'
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 7 章 [“使用客户端方法”](part0065.xhtml#aid-1TVKI1 "第 7 章。使用客户端方法")的 *使用 SVG 和 Ajax
    创建动态图表* 菜谱中，*使用客户端方法*
- en: Creating dynamic lists
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态列表
- en: The Meteor Spacebars syntax supports the rapid development of lists, tables,
    and other displays of data through the use of template block tags. Used within
    templates, block tags can quickly add dynamic lists and even customize the look
    and feel of each element, based on its unique attributes. This recipe will show
    you how to use the `#each` block tag to display multiple elements of a collection
    inside a Blaze template.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor Spacebars 语法支持通过使用模板块标签快速开发列表、表格和其他数据展示。在模板中使用，块标签可以快速添加动态列表，甚至可以根据每个元素的独特属性自定义其外观和感觉。本菜谱将向你展示如何使用
    `#each` 块标签在 Blaze 模板中显示集合的多个元素。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code from the *Inserting templates with Spacebars* recipe, found
    in this chapter, as our baseline project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中找到的 *使用 Spacebars 插入模板* 菜谱中的代码作为我们的基准项目。
- en: If you haven't already done so, create and save a new file in your `[project
    root]/client` folder called `templates.js`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请在你的 `[project root]/client` 文件夹中创建并保存一个名为 `templates.js` 的新文件。
- en: Create and save a new file in your `[project root]/both` folder called `collections.js`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `[project root]/both` 文件夹中创建并保存一个名为 `collections.js` 的新文件。
- en: 'We will want to make one modification to the HTML in the `templates.html` file.
    We will change the height of our `<svg>` element from `200` to `800`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将想要对 `templates.html` 文件中的 HTML 进行一项修改。我们将把我们的 `<svg>` 元素的高度从 `200` 改为 `800`：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we want to add the `random` package to our project to help us generate
    some random colors and positions. In a terminal window, navigate to your project
    root and enter the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望将 `random` 包添加到我们的项目中，以帮助我们生成一些随机颜色和位置。在终端窗口中，导航到你的项目根目录，并输入以下命令：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To create a dynamic list, proceed with the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建动态列表，请按照以下步骤操作：
- en: 'First, let''s declare a `shapes` collection. Open `collections.js`, add the
    following code, and save your changes:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们声明一个 `shapes` 集合。打开 `collections.js`，添加以下代码，并保存你的更改：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s add shapes to the page dynamically. Open your `templates.html`
    file, make the following changes to the `one` template, and save your changes:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们动态地向页面添加形状。打开你的 `templates.html` 文件，对 `one` 模板进行以下更改，并保存你的更改：
- en: '[PRE9]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will now create the template helper, which returns our dynamic collection.
    Open `templates.js`, add the following helper function, and then close and save
    your changes:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个模板辅助函数，它返回我们的动态集合。打开 `templates.js`，添加以下辅助函数，然后关闭并保存你的更改：
- en: '[PRE10]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now dynamically add shapes to the `shape` collection, and they will
    be rendered on our page. Open the JavaScript console in your browser and enter
    the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以动态地向 `shape` 集合添加形状，它们将在我们的页面上渲染。在浏览器中打开 JavaScript 控制台，并输入以下命令：
- en: '[PRE11]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see a green circle with a dark border appear on the screen, similar
    to the following screenshot:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在屏幕上看到一个带有深色边框的绿色圆形，类似于以下截图：
- en: '![How to do it…](img/image00349.jpeg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00349.jpeg)'
- en: Let's add more circles to prove that our template is rendering all the shapes
    in the `Shapes` collection.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们添加更多圆形来证明我们的模板正在渲染 `Shapes` 集合中的所有形状。
- en: 'In `templates.js`, add the following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `templates.js` 中，添加以下代码：
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We now want to display the total number of shapes, so we need to add a `shapeCount`
    function to the `Template.firstTemplate.helpers` method call:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在想显示形状的总数，因此我们需要向 `Template.firstTemplate.helpers` 方法调用中添加一个 `shapeCount`
    函数：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s add a `resetShapes` method for good measure. Open/create the `server.js`
    file, found in your `[project root]/server` folder, and add the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个 `resetShapes` 方法。打开/创建位于你的 `[project root]/server` 文件夹中的 `server.js`
    文件，并添加以下代码：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save all your changes, start Meteor if it isn't already running, and navigate
    to your Meteor-hosted page in a browser (usually `http://localhost:3000`).
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，如果 Meteor 还未运行，请启动它，并在浏览器中导航到你的 Meteor 主办的页面（通常是 `http://localhost:3000`）。
- en: 'Now, as you click in your browser, new circles will appear and the upper-left
    part of the screen will display your `shapes` collection count:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当你点击浏览器中的某个位置时，新的圆圈将出现，屏幕的左上角将显示你的 `shapes` 集合计数：
- en: '![How to do it…](img/image00350.jpeg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00350.jpeg)'
- en: Feel free to add as many shapes as you would like or reset back to zero by double-clicking
    anywhere on the screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随意添加你想要的任何形状，或者通过在屏幕上的任何位置双击来重置为零。
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We created the `Template.one.svgShapes` helper in `templates.js`, which returns
    a cursor to the `shapes` collection. This sets the data context for our template
    and is accessible using the `{{#each svgShapes}}` block tag, which we added to
    our `one` template in `templates.html`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `templates.js` 中创建了 `Template.one.svgShapes` 辅助函数，它返回对 `shapes` 集合的指针。这为我们的模板设置了数据上下文，并且可以通过添加到
    `templates.html` 中的 `one` 模板中的 `{{#each svgShapes}}` 块标签来访问。
- en: Because templates and template helpers are reactive computations, they react
    when the collection is updated. This reaction causes Blaze to re-render the page,
    using the dynamic template found within the `#each` block tag.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模板和模板辅助函数是响应式计算，它们会在集合更新时做出反应。这种反应导致 Blaze 重新渲染页面，使用 `#each` 块标签内找到的动态模板。
- en: There's more…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Other block helpers exist and they are just as easy to use. Refer to the Spacebars
    documentation on GitHub for a more detailed explanation, which is available at
    [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 其他块辅助函数也存在，并且它们同样易于使用。有关更详细的说明，请参阅 GitHub 上的 Spacebars 文档，网址为 [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md)。
- en: See also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Implementing a simple collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 4 章](part0046.xhtml#aid-1BRPS1 "第 4 章。创建模型") 中实现简单集合的菜谱，*创建模型*
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 7 章](part0065.xhtml#aid-1TVKI1 "第 7 章。使用客户端方法") 中使用 SVG 和 Ajax 创建动态图形的菜谱，*使用客户端方法*
- en: Building a smooth interface with Bootstrap
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 构建平滑的界面
- en: As a web developer, one of the biggest drains on your time comes from styling
    your pages. Bootstrap offers an elegant, simple design with enough ready-to-use
    component styles to get you up and running quickly, without having to get bogged
    down writing CSS. This recipe will walk you through a few of the Bootstrap component
    styles and give you a sampling of how easy they are to use.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名网页开发者，你时间消耗最大的一个方面就是页面样式设计。Bootstrap 提供了一种优雅、简洁的设计，以及足够的现成组件样式，让你可以快速启动，无需陷入编写
    CSS 的困境。这个菜谱将带你了解一些 Bootstrap 组件样式，并展示它们的使用是多么简单。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the *Creating dynamic lists* recipe found in this chapter as
    a baseline for our code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中找到的 *创建动态列表* 菜谱作为我们代码的基准。
- en: 'We will also need to add the official Bootstrap package to our Meteor project
    using Meteor''s package repository. Open a terminal window, navigate to the root
    folder of your project, and enter the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将官方 Bootstrap 包添加到我们的 Meteor 项目中，使用 Meteor 的包仓库。打开一个终端窗口，导航到你的项目的根目录，并输入以下命令：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are other packages that are complementary to the official Bootstrap package.
    You can find a complete list of these at [https://atmospherejs.com/?q=bootstrap](https://atmospherejs.com/?q=bootstrap).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他一些包与官方 Bootstrap 包相辅相成。你可以在 [https://atmospherejs.com/?q=bootstrap](https://atmospherejs.com/?q=bootstrap)
    找到这些包的完整列表。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will make our title and collection count presentable using the `btn` and
    `navbar` styles built in to Bootstrap. Proceed with the following steps to build
    a smooth interface with Bootstrap:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Bootstrap 内置的 `btn` 和 `navbar` 样式来使标题和集合计数看起来更美观。按照以下步骤使用 Bootstrap 构建平滑的界面：
- en: 'First, let''s modify our title, adding a sub `<div>` tag and styling it like
    a Bootstrap button. Open `templates.html`, make the following code changes, and
    save your file:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们修改我们的标题，添加一个子 `<div>` 标签，并像 Bootstrap 按钮一样对其进行样式化。打开 `templates.html`，进行以下代码更改，并保存你的文件：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After this change, your title should look much more presentable, as shown in
    the following screenshot:![How to do it…](img/image00351.jpeg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此更改之后，你的标题应该看起来更加引人注目，如下面的截图所示：![如何操作…](img/image00351.jpeg)
- en: 'We will now add the `navbar` style to the entire title, giving it a distinct,
    intentional look. Open `templates.html` again and replace the title `<div>` tag
    with the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加`navbar`样式到整个标题，使其具有独特、故意的样子。再次打开`templates.html`，并将标题`<div>`标签替换为以下代码：
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save these changes and your page should be updated. The **Shapes Collection
    Count** section should now appear in a distinct `navbar` style, similar to the
    following screenshot:![How to do it…](img/image00352.jpeg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这些更改，你的页面应该会更新。现在，**Shapes Collection Count**部分应该以独特的`navbar`样式出现，类似于以下截图：![如何操作…](img/image00352.jpeg)
- en: 'Lastly, let''s turn our count button into an actual button. Open `templates.js`
    and change the `dblclick` event to a specific `click` event. This event is placed
    at the bottom of the `Template.firstTemplate.events` function:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们将计数按钮变成一个实际的按钮。打开`templates.js`，将`dblclick`事件更改为特定的`click`事件。此事件放置在`Template.firstTemplate.events`函数的底部：
- en: '[PRE18]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We have now disabled double-click as the method of resetting our `shapes` collection
    and transferred it to the **Shapes Collection Count** total. By clicking on the
    orange button, the collection will reset to zero:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在已经禁用了双击作为重置我们的`shapes`集合的方法，并将其转移到**Shapes Collection Count**总数。通过点击橙色按钮，集合将重置为零：
- en: '![How to do it…](img/image00353.jpeg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00353.jpeg)'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Changing the look and feel of a page using Bootstrap is simply a matter of adding
    the correct CSS `class` declarations and structuring our HTML appropriately.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap更改页面的外观和感觉只是添加正确的CSS `class`声明和适当地结构化我们的HTML。
- en: To style the `shapes` collection count, we added the `btn` and `btn-warning`
    value to the `class` attribute. This allows the Bootstrap CSS to appropriately
    style the `<div>` tag, making it appear as an orange button.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了样式化`shapes`集合计数，我们在`class`属性中添加了`btn`和`btn-warning`值。这允许Bootstrap CSS适当地样式化`<div>`标签，使其看起来像一个橙色按钮。
- en: To style our title, we had to first create the scaffolding for the `navbar`
    tag. We did this by essentially wrapping our `<div>` tag with a `<nav>` tag. We
    then appropriately structured the containing tags by adding `nav`, `navbar`, `navbar-header`,
    and `navbar-left` to the `class` attributes. The other `class` declarations (`navbar-default`,
    `navbar-brand`, and `navbar-btn`) are strictly style declarations, changing the
    color/shape but not affecting the overall structure or layout.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了样式化我们的标题，我们首先必须为`navbar`标签创建脚手架。我们通过在本质上用`<nav>`标签包裹我们的`<div>`标签来实现这一点。然后，通过添加`nav`、`navbar`、`navbar-header`和`navbar-left`到`class`属性中，适当地结构化包含标签。其他的`class`声明（`navbar-default`、`navbar-brand`和`navbar-btn`）是严格的样式声明，改变颜色/形状但不影响整体结构或布局。
- en: There's more…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Bootstrap is very robust and comes with excellent documentation. You can learn
    more about Bootstrap at [http://getbootstrap.com/](http://getbootstrap.com/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap非常健壮，并附带出色的文档。你可以在[http://getbootstrap.com/](http://getbootstrap.com/)了解更多关于Bootstrap的信息。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding Meteor packages* and *Discovering new packages with Atmosphere*
    recipes in [Chapter 2](part0028.xhtml#aid-QMFO1 "Chapter 2. Customizing with Packages"),
    *Customizing with Packages*
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](part0028.xhtml#aid-QMFO1 "第2章。使用包进行自定义")的*Adding Meteor packages*和*Discovering
    new packages with Atmosphere*食谱中，*使用包进行自定义*
- en: Creating customized global helpers
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义的全局助手
- en: As you begin to really dig into templates, you'll soon discover how truly great
    template helpers are. You can access data inline and drastically reduce the amount
    of code you need to write.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你真正开始深入研究模板时，你很快会发现模板助手有多么真正出色。你可以内联访问数据，并极大地减少你需要编写的代码量。
- en: You will, however, eventually run into a situation where you find yourself repeating
    the same logic in multiple, in-template helpers. Wouldn't it be great if there
    was a way to create global helpers accessible from any template? Well, Meteor
    has a solution for this too! This recipe will show you how to create global template
    helpers using the `Template.registerHelper` function.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你最终会遇到一个情况，你发现自己正在多个模板助手中重复相同的逻辑。如果有一种方法可以创建任何模板都可以访问的全局助手会怎么样？嗯，Meteor也有解决方案！这个食谱将向你展示如何使用`Template.registerHelper`函数创建全局模板助手。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the codebase from the *Building a smooth interface with Bootstrap*
    recipe, found in this chapter. Please follow that recipe first or download the
    corresponding codebase.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中找到的*Building a smooth interface with Bootstrap*食谱中的代码库。请首先遵循该食谱或下载相应的代码库。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We''re going to make a global random color generator and add random colors
    to all the objects on the screen by performing the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个全局随机颜色生成器，并通过以下步骤将随机颜色添加到屏幕上的所有对象中：
- en: 'Open `templates.html`, found in your `[project root]/client` folder, and make
    the following changes to the color attributes of the `one` template:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于你的 `[项目根]/client` 文件夹中的 `templates.html`，并对 `one` 模板的颜色属性进行以下更改：
- en: '[PRE19]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will also use the `randColor` helper in our `<div>` title to give it a bit
    of (random) color. Inside the `firstTemplate` template, look for and modify the
    `<div>` title as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在 `<div>` 标题中使用 `randColor` 辅助函数，给它一点（随机）颜色。在 `firstTemplate` 模板中，查找并按以下方式修改
    `<div>` 标题：
- en: '[PRE20]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save your changes and start your Meteor app if it isn't already started. As
    you view your Meteor page in your browser, you will notice that the circles have
    all turned black. This is because although we are referencing the global helper,
    we haven't actually created it yet.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，如果还没有启动，请启动你的 Meteor 应用程序。当你用浏览器查看你的 Meteor 页面时，你会注意到所有的圆都变成了黑色。这是因为尽管我们引用了全局辅助函数，但我们还没有真正创建它。
- en: 'So, let''s take care of that. Open `templates.js`, found in your `[project
    root]/client` folder, and add the following function at the bottom:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，让我们来处理这个问题。打开位于你的 `[项目根]/client` 文件夹中的 `templates.js`，并在底部添加以下函数：
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once you save the changes, your page will refresh and the circles will now have
    a random color, as will the title bar of your app. To prove that it is indeed
    using the global `randColor` helper, open another browser window, navigate to
    your page (usually `http://localhost:3000`), and view the results side by side.
    As you click on the page to add circles or refresh the page, the colors will change
    at random and will be different from one browser window to the next, as shown
    in the following screenshot:![How to do it…](img/image00354.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改后，你的页面将刷新，圆现在将具有随机颜色，应用程序的标题栏也是如此。为了证明它确实使用了全局的 `randColor` 辅助函数，请打开另一个浏览器窗口，导航到你的页面（通常是
    `http://localhost:3000`），并查看结果。当你点击页面以添加圆或刷新页面时，颜色将随机变化，并且与下一个浏览器窗口不同，如以下截图所示：![如何做到这一点…](img/image00354.jpeg)
- en: How it works…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Template.registerHelper` function declares a helper that can be seen in
    context with any template. Think of it as a way to declare global functions, accessible
    within the Spacebars syntax.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`Template.registerHelper` 函数声明了一个可以在任何模板上下文中看到的辅助函数。把它想象成一种声明全局函数的方法，这些函数可以在
    Spacebars 语法中使用。'
- en: The first argument of `Template.registerHelper` is a string value, which contains
    the name of our helper (the name to be used to reference it inline, inside our
    templates). When deciding on a name for a global helper, keep in mind that it
    is indeed global. It should therefore be unique, to prevent conflicts, or the
    value could be overridden by a template-specific helper. Our example is very simple,
    so we can get away with `randColor`; however, as you build more sophisticated
    templates, it's a good idea to give your helpers more distinct names. The value
    returned is obviously a randomly selected color, using the same technique that
    we used in the original `firstTemplate` click event handler.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Template.registerHelper` 的第一个参数是一个字符串值，它包含我们辅助函数的名称（在模板内联引用时使用的名称）。在为全局辅助函数选择名称时，请记住它确实是全局的。因此，它应该是唯一的，以防止冲突，或者其值可能会被特定模板的辅助函数覆盖。我们的例子非常简单，所以我们可以使用
    `randColor`；然而，随着你构建更复杂的模板，给你的辅助函数起更独特的名称是个好主意。返回的值显然是随机选择的一种颜色，使用的是我们在原始 `firstTemplate`
    点击事件处理器中使用的相同技术。'
- en: We then used the global helper in two different templates. First, we replaced
    `{{color}}` and `{{border}}` in the circle's `svg` declaration with `{{randColor}}`,
    causing our circles to appear with a random color every time. Finally, we added
    a `style="color:{{randColor}}"` attribute to our `<div>` title, which randomly
    assigns a text color upon page refresh.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后在两个不同的模板中使用了这个全局辅助函数。首先，我们将圆的 `svg` 声明中的 `{{color}}` 和 `{{border}}` 替换为
    `{{randColor}}`，导致我们的圆每次都显示为随机颜色。最后，我们在 `<div>` 标题中添加了 `style="color:{{randColor}}"`
    属性，这样在页面刷新时就会随机分配文本颜色。
- en: There's more…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are obviously some very advanced techniques you can accomplish with global
    helpers, using other template-related methods such as `Template.instance()` and
    `Template.currentData`. All of these can't be covered in this recipe, but we encourage
    you to explore the Meteor documentation to familiarize yourself with what global
    helpers can do.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全局辅助函数，你可以完成一些非常高级的技术，例如使用其他与模板相关的函数，如 `Template.instance()` 和 `Template.currentData`。所有这些内容都无法在本食谱中涵盖，但我们鼓励你探索
    Meteor 文档，以便熟悉全局辅助函数能做什么。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a good overview of the available template utilities, consult the Meteor
    documentation at [http://docs.meteor.com/#/full/templates_api](http://docs.meteor.com/#/full/templates_api).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解可用的模板实用工具的概述，请参阅 Meteor 文档 [http://docs.meteor.com/#/full/templates_api](http://docs.meteor.com/#/full/templates_api)。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Inserting templates with Spacebars* and *Using reactivity with HTML attributes*
    recipes in this chapter
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用 Spacebars 插入模板* 和 *使用 HTML 属性进行响应式操作* 食谱
- en: Creating custom components
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义组件
- en: Adding and using templates in Meteor is a great way to speed up your workflow.
    Using Meteor's built-in content block helpers can further streamline your workflow
    by allowing nested and deferred template calls. In essence, you can combine and
    nest templates to create your own "components". This recipe will show you how
    to build a basic Spacebars custom block helper using `Template.contentBlock`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中添加和使用模板是加快你工作流程的绝佳方式。使用 Meteor 内置的内容块辅助函数可以进一步简化你的工作流程，通过允许嵌套和延迟模板调用。本质上，你可以组合和嵌套模板来创建自己的“组件”。本食谱将向你展示如何使用
    `Template.contentBlock` 构建 Spacebars 自定义块辅助函数。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the codebase from the *Building a smooth interface with Bootstrap*
    recipe found in this chapter. Please follow that recipe first, or download the
    corresponding codebase.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中 *使用 Bootstrap 构建平滑界面* 食谱中的代码库。请首先遵循该食谱，或下载相应的代码库。
- en: How to do it…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Proceed with the following steps to create custom components:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建自定义组件：
- en: 'We need to make the template-specific `shapeCount` helper global so we can
    use it inside our component. In `templates.js`, delete the `shapeCount` function
    found in the `Template.firstTemplate.helpers()` method call, and add the following
    function to the bottom of the page:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将特定于模板的 `shapeCount` 辅助函数全局化，以便我们可以在组件内部使用它。在 `templates.js` 文件中，删除 `Template.firstTemplate.helpers()`
    方法调用中找到的 `shapeCount` 函数，并将以下函数添加到页面底部：
- en: '[PRE22]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we will create our component. We will first create a `navbutton` template,
    which will use the newly created `shapeCount` helper. Create a new template file,
    named `navbar.html`, in your `[project_root]/client` folder. Open this file in
    a text editor and add the following template code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的组件。我们首先创建一个 `navbutton` 模板，它将使用新创建的 `shapeCount` 辅助函数。在你的 `[project_root]/client`
    文件夹中创建一个新的模板文件，命名为 `navbar.html`。在文本编辑器中打开此文件，并添加以下模板代码：
- en: '[PRE23]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To create a custom `navbar` block tag, add the `navbar` template in the same
    file, complete with a `Template.contentBlock` reference, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建自定义的 `navbar` 块标签，将 `navbar` 模板添加到同一文件中，包括 `Template.contentBlock` 引用，如下所示：
- en: '[PRE24]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our component is now complete! Let''s use it in our code. Open `templates.html`
    and completely remove the `<nav>` element block, including the code inside the
    `firstTemplate` template. The only element left after this change will be the
    `<svg>` element. Just above the `<svg>` element, we are going to call our `navbar`
    template using the `{{#[template name]}}` block tag, as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们组件现在已完成！让我们在我们的代码中使用它。打开 `templates.html` 并完全删除 `<nav>` 元素块，包括 `firstTemplate`
    模板中的代码。此更改后，将只剩下 `<svg>` 元素。就在 `<svg>` 元素上方，我们将使用 `{{#[template name]}}` 块标签调用我们的
    `navbar` 模板，如下所示：
- en: '[PRE25]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save all your changes, start your Meteor instance if it isn't already running,
    and view the results in your browser. You will notice that nothing has changed.
    We have the same functionality as before; only now, we have created a custom Spacebars
    component (formally, a custom block helper), and we could add more components
    to the `navbar` tag as needed or enter explicit HTML, for example, replacing `{{>
    navbutton}}` with `<div>{{shapeCount}}</div>` will display the **Shapes collection
    count** without the use of the `navbutton` template, similar to the following
    screenshot (not very pretty, but you get the point):![How to do it…](img/image00355.jpeg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，如果 Meteor 实例尚未运行，请启动它，并在浏览器中查看结果。你会注意到没有任何变化。我们具有与之前相同的功能；但现在，我们已经创建了一个自定义
    Spacebars 组件（正式上称为自定义块辅助工具），并且可以根据需要向 `navbar` 标签添加更多组件或输入显式 HTML，例如，将 `{{> navbutton}}`
    替换为 `<div>{{shapeCount}}</div>` 将会显示 **形状集合计数**，而无需使用 `navbutton` 模板，类似于以下截图（不太美观，但你能理解这个意思）：![如何操作…](img/image00355.jpeg)
- en: 'If you inspect the element in your browser, you will notice that manually entered
    `<div>…</div>` has been inserted in the placeholder block, similar to the following
    example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查浏览器中的元素，你会注意到手动输入的 `<div>…</div>` 已经被插入到占位符块中，类似于以下示例：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The key to building block helpers resides in the `Template.contentBlock` function.
    We created a new `navbar` template and used `{{> Template.contentBlock}}` inside
    that template to specify a placeholder. This placeholder (called a **content**
    **block**) can be specified later, rather than having to be specified explicitly
    inside the `navbar` template. This simple addition of a content block turns our
    `navbar` template into a *component*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 构建块辅助工具的关键在于 `Template.contentBlock` 函数。我们创建了一个新的 `navbar` 模板，并在该模板内部使用了 `{{>
    Template.contentBlock}}` 来指定一个占位符。这个占位符（称为**内容** **块**）可以在稍后指定，而不是必须显式地在 `navbar`
    模板内部指定。这个简单的添加内容块的操作将我们的 `navbar` 模板转换成了一个 *组件*。
- en: Once we created our block helper, along with the template meant to go inside
    the block helper, we added a `Spacebars` block tag with `{{#navbar}}` and the
    ending `{{/navbar}}` calls. Inside this block, we called our new `navbutton` template
    using `{{> navbutton}}`, which is inserted in the `{{> Template.contentBlock}}`
    placeholder. At runtime, all these template functions get executed in order, and
    Blaze renders the actual HTML DOM elements.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了块辅助工具以及要放入块辅助工具中的模板，我们就添加了一个 `Spacebars` 块标签，带有 `{{#navbar}}` 和结束的 `{{/navbar}}`
    调用。在这个块内部，我们使用 `{{> navbutton}}` 调用我们的新 `navbutton` 模板，它被插入到 `{{> Template.contentBlock}}`
    占位符中。在运行时，所有这些模板函数将按顺序执行，Blaze 将渲染实际的 HTML DOM 元素。
- en: There's more…
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Custom block helpers can also utilize the `#if`, `#else`, and `#unless` logic
    through the use of `UI.elseBlock`. Using these commands, you can create reusable,
    dynamic block helpers and templates, further streamlining your development process.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义块辅助工具也可以通过使用 `UI.elseBlock` 来利用 `#if`、`#else` 和 `#unless` 逻辑。使用这些命令，你可以创建可重用、动态的块辅助工具和模板，进一步简化你的开发过程。
- en: Tip
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a thorough walkthrough of all the options available, see the GitHub documentation
    on Spacebars, found at [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解所有选项，请参阅 Spacebars 的 GitHub 文档，位于 [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md)。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Inserting templates with Spacebars* and *Creating customized global helpers*
    recipes in this chapter
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用 Spacebars 插入模板* 和 *创建自定义全局辅助工具* 食谱
- en: Using reactivity with HTML attributes
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反应性 HTML 属性
- en: One of the hidden gems in Meteor is the extremely granular control you have
    over how HTML is rendered. Blaze was designed in such a way that you can modify,
    add, or remove HTML element attributes dynamically without affecting anything
    else in the DOM! This recipe will walk you through the use of dynamic, reactive
    data inside element attributes.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中，隐藏的宝藏之一是你对 HTML 渲染的极细粒度控制。Blaze 是这样设计的，你可以动态地修改、添加或删除 HTML 元素属性，而不会影响
    DOM 中的其他任何内容！本食谱将指导你如何在元素属性中使用动态、反应性数据。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the codebase from the *Creating custom components* recipe, the previous
    recipe in this chapter. Please follow that recipe first or download the corresponding
    codebase.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自 *创建自定义组件* 食谱的代码库，这是本章中的前一个食谱。请首先遵循该食谱或下载相应的代码库。
- en: How to do it…
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Proceed with the following steps to use reactivity with HTML attributes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用HTML属性进行响应性操作：
- en: 'We first need to create a new `navcolor` template. Open `navbar.html` in your
    `[project root]/client` folder and add the following code:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要创建一个新的`navcolor`模板。在您的`[project root]/client`文件夹中打开`navbar.html`并添加以下代码：
- en: '[PRE27]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We now need to add our new template to our `navbar` content block so that we
    can input a new background color and turn it on and off. Open `templates.html`
    (also in the `client` folder) and modify the `firstTemplate` template, adding
    a template call just below the `{{> navbutton}}` call, similar to the following:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要将我们的新模板添加到`navbar`内容块中，以便我们可以输入新的背景颜色并开启或关闭它。打开`templates.html`（同样在`client`文件夹中）并修改`firstTemplate`模板，在`{{>
    navbutton}}`调用下方添加一个模板调用，类似于以下内容：
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'On the very next line, add a `style` attribute to the `<svg>` element so that
    we can change the background color, like so:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，给`<svg>`元素添加一个`style`属性，这样我们就可以更改背景颜色，如下所示：
- en: '[PRE29]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the preceding code, we have set up references to two helper functions: `bgColor`
    and `useBG`. We will now create these global template helpers. Open `templates.js`
    and append the following two functions:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们设置了两个辅助函数的引用：`bgColor`和`useBG`。现在我们将创建这些全局模板辅助函数。打开`templates.js`并添加以下两个函数：
- en: '[PRE30]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we save these changes and open the web console in your browser, we can now
    programmatically change and toggle the background color. In the web console, execute
    the following two lines:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们保存这些更改并打开浏览器中的网络控制台，我们现在可以以编程方式更改和切换背景颜色。在网络控制台中，执行以下两行：
- en: '[PRE31]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'These three things should have changed on your screen:'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 屏幕上应该有以下三个变化：
- en: The background should now be light grey in color
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在背景应该是浅灰色
- en: The checkbox to the top-right of your `navbar` tag should be checked
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您`navbar`标签右上角的复选框应该被勾选
- en: The word **lightgrey** should now appear in the top-right text box
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在右上角的文本框中应该出现**lightgrey**这个词
- en: 'Your screen should now look similar to the following screenshot:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的屏幕现在应该看起来类似于以下截图：
- en: '![How to do it…](img/image00356.jpeg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00356.jpeg)'
- en: 'All that''s left is to hook up events to the checkbox''s and textbox''s `<input>`
    elements. Create a new file named `navbar.js` in your `[project_root]/client`
    folder and add the following `events` handler declarations:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的就是将事件连接到复选框和文本框的`<input>`元素。在您的`[project_root]/client`文件夹中创建一个名为`navbar.js`的新文件，并添加以下`events`处理程序声明：
- en: '[PRE32]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save your changes and your elements will now affect the background. Checking/unchecking
    the checkbox will toggle the background color, and changing the value in the textbox
    will dynamically change the displayed background.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的更改，您的元素现在将影响背景。勾选/取消勾选复选框将切换背景颜色，更改文本框中的值将动态更改显示的背景。
- en: We want to observe the effect this has on the DOM. Open the `developer` panel
    in your browser and locate the `<svg>` element. As you toggle the background on
    and off using the checkbox, observe the attribute list inside the top `<svg>`
    tag. You'll notice that the `style` attribute appears and disappears, depending
    on the state of the checkbox, similar to the following screenshot:![How to do
    it…](img/image00357.jpeg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想观察这将对DOM产生的影响。打开浏览器中的`开发者`面板并定位到`<svg>`元素。当您使用复选框切换背景的开启和关闭时，观察顶部`<svg>`标签内的属性列表。您会注意到，根据复选框的状态，`style`属性会出现和消失，类似于以下截图：![如何操作…](img/image00357.jpeg)
- en: As you can see, the attribute doesn't just become empty. It is removed altogether.
    You will also notice that when this happens, neither the screen nor the elements
    view are refreshing. That's because the DOM is not being rebuilt. The attribute
    is being added and removed, according to the state of `{{bgColor}}`. Similarly,
    when you modify the value in the textbox, nothing else is affected (no screen
    refreshes, or lost states).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，属性不仅仅是变为空。它被完全移除了。您还会注意到，在这种情况下，屏幕或元素视图都没有刷新。这是因为DOM没有被重建。属性是根据`{{bgColor}}`的状态被添加和移除的。同样，当您修改文本框中的值时，其他什么都不会受到影响（没有屏幕刷新，或状态丢失）。
- en: How it works…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: With the introduction of the Blaze templating engine, Meteor stopped manipulating
    strings and started interacting with DOM trees / DOM elements directly. This change
    simplifies the development process in comparison to other templating libraries
    because DOM elements don't have to be re-rendered every time there is a change
    to the HTML.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Blaze模板引擎的引入，Meteor停止了字符串操作，并开始直接与DOM树/DOM元素交互。与其它模板库相比，这种变化简化了开发过程，因为DOM元素不需要在HTML每次更改时都重新渲染。
- en: In the case of the `style` attribute, the only argument inside the attribute
    is a reference to the `bgColor` helper function. If the value from a helper function
    or data context is `null`/`undefined`, and if that value is the only value in
    an attribute, Blaze automatically removes the attribute, rather than rendering
    it with no value in it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在`style`属性的情况下，属性内的唯一参数是对`bgColor`辅助函数的引用。如果辅助函数或数据上下文中的值是`null`/`undefined`，并且该值是属性中的唯一值，Blaze会自动移除该属性，而不是将其渲染为无值。
- en: So, in this case, when the `{{bgColor}}` helper function returned `null` (when
    `Session.useBG` is `false` or `undefined`), Blaze was removing the `style` attribute
    from the `<svg>` element.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，当`{{bgColor}}`辅助函数返回`null`（当`Session.useBG`为`false`或`undefined`时），Blaze会从`<svg>`元素中移除`style`属性。
- en: See also
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考内容
- en: The *Inserting templates with Spacebars* recipe in this chapter
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*使用Spacebars插入模板*食谱
- en: The *Using the Session object* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](part0046.xhtml#aid-1BRPS1 "第4章。创建模型")的*使用Session对象*食谱中，*创建模型*
- en: Using dynamic templates
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动态模板
- en: Meteor has yet another templating trick up its sleeve! In addition to custom
    code blocks, reactive data contexts, and all the other various template niceties,
    Meteor also allows you to dynamically switch between rendered templates. This
    recipe will show you how to dynamically render templates, using the `Template.dynamic`
    helper.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor还有另一项模板技巧！除了自定义代码块、响应式数据上下文以及所有其他各种模板优点外，Meteor还允许你动态地在渲染的模板之间切换。本食谱将展示如何使用`Template.dynamic`辅助函数动态渲染模板。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the codebase from the *Creating custom components* recipe found
    in this chapter. Please follow that recipe first or download the corresponding
    codebase.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中*创建自定义组件*食谱中的代码库。请首先遵循该食谱或下载相应的代码库。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will add a dynamic template that will switch our shapes from circles to
    squares, when rendered. Proceed with the following steps to use dynamic templates:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个动态模板，在渲染时将我们的形状从圆形切换到正方形。按照以下步骤使用动态模板：
- en: 'First, we need to create our alternate template. Inside `templates.html`, located
    in your `[project root]/client` folder, add the following template, just below
    the declaration for the existing `one` template:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建我们的备用模板。在`templates.html`中，位于你的`[项目根]/client`文件夹内，添加以下模板，就在现有`one`模板声明下方：
- en: '[PRE33]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We will need a data context for this template. Fortunately, we can reuse the
    `Shapes` collection. Open `templates.js`, make a copy of the `svgShapes` function,
    and add it to a new `Template.two.helpers()` method call, as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为这个模板提供一个数据上下文。幸运的是，我们可以重用`Shapes`集合。打开`templates.js`，复制`svgShapes`函数，并将其添加到新的`Template.two.helpers()`方法调用中，如下所示：
- en: '[PRE34]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we will add logic to toggle between the `one` and `two` templates, based
    on the `Session.curTemplate` variable. At the bottom of `templates.js`, add the
    following `helpers()` method call:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将根据`Session.curTemplate`变量在`one`和`two`模板之间切换逻辑。在`templates.js`的底部，添加以下`helpers()`方法调用：
- en: '[PRE35]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'All that''s left to do is to add the dynamic template declaration and create
    an easy way to toggle between the templates. Let''s take care of the declaration
    first. Open `templates.html` and modify the double brackets inside the `<svg>`
    element as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的工作就是添加动态模板声明并创建一种简单的方法来在模板之间切换。让我们先处理声明。打开`templates.html`并修改`<svg>`元素内的双括号，如下所示：
- en: '[PRE36]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we will add some toggle buttons and hook up the events to change the value
    of the `Session.curTemplate` variable. Open `navbar.html` and add the following
    template at the bottom:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一些切换按钮并将事件连接到更改`Session.curTemplate`变量的值。打开`navbar.html`并在底部添加以下模板：
- en: '[PRE37]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We need to include the `navshapes` template in our block helper. Open `templates.html`
    and add the following template inclusion just before the `{{/navbar}}` block tag:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在我们的块助手中包含 `navshapes` 模板。打开 `templates.html` 并在 `{{/navbar}}` 块标签之前添加以下模板包含：
- en: '[PRE38]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'One last addition, to hook up the events, and we''re ready to roll. Create
    a `navbar.js` file in your `[project root]/client` folder and add the following
    code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个添加，为了连接事件，我们就可以开始了。在您的 `[项目根]/client` 文件夹中创建一个 `navbar.js` 文件，并添加以下代码：
- en: '[PRE39]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Save all your changes, start your Meteor project if it isn't already running,
    and navigate to your project in a browser (usually `http://localhost:3000`). You
    will see two buttons at the top-right corner of the screen. Click on them, back
    and forth, to see the shapes on the screen toggle between circles and squares,
    similar to the following screenshot:![How to do it...](img/image00358.jpeg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，如果项目尚未运行，请启动您的Meteor项目，并在浏览器中导航到您的项目（通常是 `http://localhost:3000`）。您将在屏幕右上角看到两个按钮。点击它们，来回切换，以查看屏幕上的形状在圆形和正方形之间切换，类似于以下截图：![如何做到这一点...](img/image00358.jpeg)
- en: How it works…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`Template.dynamic` takes a `template` argument and renders the template with
    the appropriate name. Because we make the template argument dynamic and reactive,
    using the `curTemplate` helper, the rendered template will change as the value
    of `Session.curTemplate` changes. This ability to dynamically render templates
    is the basis for the popular Meteor package `iron:router`. It can be used in multiple
    situations where you would like to switch out templates, based on reactive data
    sources.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`Template.dynamic` 接收一个 `template` 参数，并使用适当的名称渲染模板。因为我们通过使用 `curTemplate` 助手使模板参数动态和响应式，所以渲染的模板将随着
    `Session.curTemplate` 的值的变化而变化。这种动态渲染模板的能力是流行的Meteor包 `iron:router` 的基础。它可以用在多个你想根据响应式数据源切换模板的情况中。'
- en: There's more…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Iron Router takes dynamic templates to an entirely new level. The documentation
    for Iron Router can be found at [https://github.com/iron-meteor/iron-router/blob/devel/Guide.md](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Iron Router 将动态模板提升到了全新的水平。Iron Router 的文档可以在 [https://github.com/iron-meteor/iron-router/blob/devel/Guide.md](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md)
    找到。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a multipage application with Iron Router* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章 [使用包定制](part0028.xhtml#aid-QMFO1 "第2章 使用包定制") 的 *使用Iron Router创建多页面应用*
    菜谱，*使用包定制*
- en: The *Creating custom components* recipe in this chapter
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *创建自定义组件* 菜谱
- en: The *Using the Session object recipe* in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第4章 [创建模型](part0046.xhtml#aid-1BRPS1 "第4章 创建模型") 的 *使用Session对象菜谱*，*创建模型*
- en: The *Creating a complete app with Iron Router* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Creating Useful Projects"), *Creating Useful Projects*
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第12章 [创建完整应用与Iron Router](part0088.xhtml#aid-2JTHG1 "第12章 创建有用项目") 的 *使用Iron
    Router创建完整应用* 菜谱，*创建有用项目*
- en: Animating DOM elements
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画DOM元素
- en: Meteor has a very elegant way of rendering DOM elements in our web apps, but
    until now, this hasn't included animations. Fortunately for us, Meteor now supports
    animations, including animations when an element is first added to the DOM. This
    recipe will walk you through how to use standard CSS animation techniques inside
    Meteor.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 有一种非常优雅的方式来渲染我们的Web应用中的DOM元素，但直到现在，这还没有包括动画。幸运的是，现在Meteor支持动画，包括当元素首次添加到DOM时发生的动画。这个菜谱将指导你如何在Meteor中使用标准的CSS动画技术。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the codebase from the *Using dynamic templates* recipe found in
    this chapter. Please follow that recipe first or download the corresponding codebase.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中 *使用动态模板* 菜谱的代码库。请首先遵循该菜谱或下载相应的代码库。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We will animate the shapes from our previous recipe, demonstrating animation
    both before and after the elements are first created and rendered.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将动画化我们之前菜谱中的形状，演示在元素首次创建和渲染之前和之后的动画效果。
- en: Because we used SVG elements instead of DOM elements, we need to modify jQuery
    to be able to use `.addClass` and `.removeClass`. Fortunately, there is a custom
    package available that will add SVG support and add Meteor UI event support at
    the same time.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了SVG元素而不是DOM元素，我们需要修改jQuery以能够使用 `.addClass` 和 `.removeClass`。幸运的是，有一个自定义包可以同时添加SVG支持和Meteor
    UI事件支持。
- en: 'In a terminal window, navigate to the root folder of your project and execute
    the following line:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，导航到你的项目根目录并执行以下行：
- en: '[PRE40]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will install the `animation-hooks` package, which includes support for
    SVG in jQuery.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装`animation-hooks`包，该包包括jQuery对SVG的支持。
- en: 'We will now add a very simple hover animation effect. Open or create a `style.css`
    file in your `[project root]/client/lib/styles` folder and add the following code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加一个非常简单的悬停动画效果。在`[项目根目录]/client/lib/styles`文件夹中打开或创建一个`style.css`文件，并添加以下代码：
- en: '[PRE41]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Save your changes, start your Meteor project if it isn''t already started,
    and navigate to your project URL in a browser (usually `http://localhost:3000`).
    If you don''t have shapes on your screen, click to add some and then hover over
    the shapes. As you hover, you will notice that the shapes will fade out slowly,
    and as you move the mouse away, the shapes will fade in slowly until they return
    to full opacity. Now we will use jQuery to move all the shapes on the screen at
    once. Inside `navbar.html`, add the following template at the bottom:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，如果你的Meteor项目尚未启动，请启动它，并在浏览器中导航到你的项目URL（通常是`http://localhost:3000`）。如果你屏幕上没有形状，请点击添加一些，然后悬停在形状上。当你悬停时，你会注意到形状会慢慢淡出，当你将鼠标移开时，形状会慢慢淡入，直到它们恢复到全不透明度。现在我们将使用jQuery同时移动屏幕上的所有形状。在`navbar.html`中，在底部添加以下模板：
- en: '[PRE42]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Inside `templates.html`, add a call to the new `navoffset` template, just before
    the `navshapes` declaration:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`templates.html`中，在`navshapes`声明之前添加对新`navoffset`模板的调用：
- en: '[PRE43]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We now add the code for the `button` events by modifying `navbar.js`, adding
    the following function at the bottom:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在通过修改`navbar.js`来添加`button`事件的代码，在底部添加以下函数：
- en: '[PRE44]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We also want to add a little bit of polish to our `nav` buttons, so add the
    following CSS to the `style.css` file, at the bottom:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望对我们的`nav`按钮添加一点修饰，所以将以下CSS添加到`style.css`文件中，在底部：
- en: '[PRE45]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Save all these changes and your web page should now contain two new buttons,
    labeled **red** and **blue**. As you click on these buttons alternately, all the
    shapes on the screen will move their location randomly, back and forth diagonally
    across your screen.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有这些更改，现在你的网页应该包含两个新的按钮，分别标记为**红色**和**蓝色**。当你交替点击这些按钮时，屏幕上的所有形状将随机移动其位置，在屏幕上左右对角移动。
- en: 'We will now use the built-in animation hooks, called `_uihooks`, to animate
    shapes as they are added dynamically to the DOM. Open `templates.html` and make
    the following modifications to both the `one` and `two` templates:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用内置的动画钩子，称为`_uihooks`，来动态地将形状添加到DOM中时进行动画处理。打开`templates.html`并对`one`和`two`模板进行以下修改：
- en: '[PRE46]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We have one final step and that is to add the initial *before* state to the
    shapes, via our `.animate` CSS declaration. Open `style.css` and add the following
    declaration at the bottom:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个最后的步骤，那就是通过我们的`.animate`CSS声明将形状的初始*之前*状态添加到形状中。打开`style.css`并在底部添加以下声明：
- en: '[PRE47]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Save your changes and test out the new animations functionality by either adding
    new shapes to the screen (clicking anywhere), or by changing the shapes from circles
    to squares, and back again (clicking on the **one** and **two** buttons). As you
    click, you will see the shape(s) fade in and move into place from the left.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，并通过添加新的形状到屏幕（点击任何地方）或通过将形状从圆形更改为正方形，然后再回到圆形（点击**one**和**two**按钮）来测试新的动画功能。当你点击时，你会看到形状淡入并从左侧移动到位置。
- en: How it works…
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Because Blaze now renders objects according to the DOM, rather than rendering
    according to text-based HTML tags, it is aware of the styles and conditions of
    the created elements, for example, because we added the `opacity:0` style to our
    `:hover` shape elements in `style.css`, elements underneath the mouse will fade
    out and stay faded out, even when we click on / add new shapes. Using jQuery,
    we can programmatically add styles and transformations, as we did in `navbar.js`
    with the `.css()` functions. Blaze will respect these changes as well because
    programmatic changes to the CSS/DOM are remembered, even when new elements are
    added.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Blaze现在根据DOM渲染对象，而不是根据基于文本的HTML标签渲染，它能够了解创建的元素的样式和条件，例如，因为我们已经在`style.css`中添加了`opacity:0`样式到我们的`:hover`形状元素，鼠标下方的元素会淡出并保持淡出状态，即使我们点击/添加新的形状。使用jQuery，我们可以以编程方式添加样式和转换，就像我们在`navbar.js`中使用`.css()`函数所做的那样。Blaze也会尊重这些更改，因为对CSS/DOM的编程更改会被记住，即使添加了新元素。
- en: 'The `_uihooks` declaration contains three event handlers:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`_uihooks`声明包含三个事件处理器：'
- en: '| `insertElement` | This is fired before a DOM node is rendered so that we
    can manipulate its position, map where the node will go when animated, and then
    animate the node as it is rendered. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `insertElement` | 在DOM节点渲染之前触发，这样我们就可以操作其位置，映射节点动画时的位置，然后渲染节点时对其进行动画处理。|'
- en: '| `removeElement` | This is fired before a DOM node is removed. We check to
    see whether there is an outgoing animation and animate the node if so. Otherwise,
    we just remove it. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `removeElement` | 在DOM节点被移除之前触发。我们检查是否有出行的动画，如果有，则对节点进行动画处理。否则，我们直接移除它。|'
- en: '| `moveElement` | This is fired when a DOM node changes the indexed position
    in the DOM. We can add any animations before, and then during the index change,
    to create an animation effect. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `moveElement` | 当DOM节点在DOM中的索引位置发生变化时触发。我们可以在索引变化之前添加任何动画，并在索引变化期间创建动画效果。|'
- en: For our sample, we only need to worry about inserting and removing elements.
    Each element has the CSS `animate` class assigned to it, by virtue of the template,
    which offsets the intended position by (-300,-100). The way we animate is by having
    the element appear on the screen in the offset position (with the `animate` class
    in effect), and then by removing the `animate` class, which triggers a transition/animation
    because the element moves to its intended position. Thanks to `_uihooks` and the
    `insertElement` event handler, we can programmatically remove `class` declarations
    to elements, right after they are initially rendered, causing them to animate.
    This makes the shapes seem to fade in from the top-left. Similarly, we can then
    add them back right before the elements are removed in order to perform an outgoing
    animation.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们只需要关注插入和移除元素。每个元素都通过模板分配了CSS `animate`类，这使得元素偏移到预期的位置（-300,-100）。我们的动画方式是通过让元素在屏幕上以偏移位置（`animate`类生效）出现，然后通过移除`animate`类来触发过渡/动画，因为元素移动到其预期位置。多亏了`_uihooks`和`insertElement`事件处理器，我们可以在元素最初渲染后立即以编程方式移除`class`声明，使它们进行动画。这使得形状看起来像是从左上角淡入。同样，我们可以在元素被移除之前将它们添加回来，以执行出行的动画。
- en: We declare which elements will be affected by wrapping the elements in the `{{#Animate}}…{{/Animate}}`
    block helpers, which causes the `insertElement` and `removeElement` handlers to
    fire on the wrapped elements.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将元素包裹在`{{#Animate}}…{{/Animate}}`块助手中来声明哪些元素会受到影响的，这会导致`insertElement`和`removeElement`处理器在包裹的元素上触发。
- en: There's more…
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'We expect some changes as Meteor continues to improve animation support, although
    the major functionality is already there. Meanwhile, you can walk through how
    `_uihooks` works by adding breakpoints to the client source, in the `packages/appmill:animations-hooks/animation-hooks.js`
    file, similar to the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Meteor继续改进动画支持，我们预计会有一些变化，尽管主要功能已经存在。同时，您可以通过在客户端源中添加断点来了解`_uihooks`的工作方式，在`packages/appmill:animations-hooks/animation-hooks.js`文件中，类似于以下截图：
- en: '![There''s more…](img/image00359.jpeg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/image00359.jpeg)'
- en: You can also get a (slightly) more thorough explanation at [https://github.com/strack/meteor-animation-hooks](https://github.com/strack/meteor-animation-hooks).
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://github.com/strack/meteor-animation-hooks](https://github.com/strack/meteor-animation-hooks)上获得（稍微）更详细的解释。
- en: See also
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using reactivity with HTML attributes* recipe in this chapter
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的*使用响应性HTML属性*配方
