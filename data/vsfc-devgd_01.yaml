- en: Chapter 1. Getting Started with Visualforce
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Visualforce入门
- en: Cloud computing has made significant changes to the IT/software development
    industry. Cloud platforms are one of the important directions of cloud computing.
    Cloud platforms allow the developers to develop apps and run them on the Cloud,
    including platforms for building on-demand applications and **platforms as services**
    (**PaaS**). Salesforce.com has introduced the first on-demand platform called
    Force.com.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算对IT/软件开发行业产生了重大变革。云平台是云计算的重要方向之一。云平台允许开发者开发应用程序并在云上运行它们，包括用于构建按需应用程序和**平台即服务**（**PaaS**）的平台。Salesforce.com推出了第一个按需平台，称为Force.com。
- en: This chapter will introduce you to Visualforce. We will go through the MVC architecture
    and Visualforce. Furthermore, we will look at the architecture of Visualforce
    pages. We will define the advantages of Visualforce pages and will get an idea
    about Visualforce development tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍Visualforce。我们将探讨MVC架构和Visualforce，并进一步了解Visualforce页面的架构。我们将定义Visualforce页面的优势，并对Visualforce开发工具有一个大致的了解。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The MVC model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC模型
- en: Understanding Visualforce
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Visualforce
- en: Visualforce architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visualforce架构
- en: Advantages of Visualforce
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visualforce的优势
- en: Visualforce development tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visualforce开发工具
- en: So let's get started and step into Visualforce.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，进入Visualforce的世界。
- en: The MVC model
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC模型
- en: 'The Force.com platform uses the **Model View Controller** (**MVC**) architectural
    pattern for developing an application. MVC splits the application development
    tools as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com平台使用**模型-视图-控制器**（**MVC**）架构模式来开发应用程序。MVC将应用程序开发工具分为以下几部分：
- en: '**Model**: This defines the structure of the data. In Force.com, objects define
    the data model. Salesforce has designed the platform by mapping every entity to
    some object.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这定义了数据结构。在Force.com中，对象定义了数据模型。Salesforce通过将每个实体映射到某个对象来设计平台。'
- en: '**View**: This defines how the data is represented. In Force.com, page layouts
    and Visualforce pages come under this category.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这定义了数据是如何被表示的。在Force.com中，页面布局和Visualforce页面属于这一类别。'
- en: '**Controller**: This defines the business logic. The rules and actions which
    manipulate the data controls the view. In Force.com, **Apex** classes, triggers,
    workflows, approvals, and validation rules are under this category.![The MVC model](img/9818_01_01.jpg)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这定义了业务逻辑。操纵数据的规则和动作控制视图。在Force.com中，**Apex**类、触发器、工作流、审批和验证规则属于这一类别。![MVC模型](img/9818_01_01.jpg)'
- en: The MVC Architecture
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MVC架构
- en: Understanding Visualforce
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Visualforce
- en: In the Force.com platform, we can develop Force.com applications with custom
    objects and standard objects. Every object has a standard user interface with
    one or more page layouts. But we cannot use standard page layouts for sophisticated
    requirements. Here, Visualforce comes into play.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Force.com平台中，我们可以使用自定义对象和标准对象来开发Force.com应用程序。每个对象都有一个标准用户界面，包含一个或多个页面布局。但是，我们不能使用标准页面布局来满足复杂需求。在这里，Visualforce就派上用场了。
- en: Visualforce is a web-based UI framework, which can be used for building sophisticated,
    attractive, and dynamic custom user interfaces. Visualforce allows the developer
    to use standard web development technologies such as jQuery, JavaScript, CSS,
    and HTML5\. Therefore, we can build rich UIs for any app including mobile apps.
    We'll be discussing about Visualforce with standard web development technologies
    and Visualforce for mobile in more depth later. Similar to HTML, the Visualforce
    framework includes a tag-based markup language.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce是一个基于Web的UI框架，可用于构建复杂、吸引人和动态的自定义用户界面。Visualforce允许开发者使用标准Web开发技术，如jQuery、JavaScript、CSS和HTML5。因此，我们可以为任何应用程序（包括移动应用程序）构建丰富的UI。我们将在后面更深入地讨论使用标准Web开发技术进行Visualforce开发以及Visualforce移动开发。类似于HTML，Visualforce框架包括基于标签的标记语言。
- en: A Visualforce page has two major elements called Visualforce markup and Visualforce
    controller. Visualforce markup consists of Visualforce tags with the prefix `apex:`,
    and there can be HTML tags, JavaScript, or any other standard web development
    code. Visualforce controller consists of a set of instructions to manipulate data
    and schema with the user interaction. It controls the interface as well. A standard
    controller, which is created along with the object can be used as Visualforce
    controller. A standard controller has the same logic and functionality which is
    used in standard pages. But when we need to use a different logic or functionality,
    we can write our own Apex controller class, and we can also write extensions to
    standard controllers or custom controllers using the Apex language. AJAX components,
    expression language formula for actions, and component binding interactions are
    there in Visualforce.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 页面有两个主要元素，称为 Visualforce 标记和 Visualforce 控制器。Visualforce 标记由前缀为
    `apex:` 的 Visualforce 标签组成，其中还可以包含 HTML 标签、JavaScript 或任何其他标准 Web 开发代码。Visualforce
    控制器包含一组指令，用于通过用户交互操作数据和模式。它还控制界面。与对象一起创建的标准控制器可以用作 Visualforce 控制器。标准控制器具有与标准页面中使用的相同逻辑和功能。但是，当我们需要使用不同的逻辑或功能时，我们可以编写自己的
    Apex 控制器类，也可以使用 Apex 语言编写标准控制器或自定义控制器的扩展。Visualforce 中还有 AJAX 组件、动作的表达式语言公式和组件绑定交互。
- en: The Visualforce architecture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visualforce 架构
- en: 'Visualforce is a markup language similar to HTML. Visualforce pages run on
    the Force.com platform and it can integrate with standard web development technologies
    such as JavaScript, jQuery, and styling by CSS. It allows us to build more rich
    and animated UIs. Each page can be identified by a unique page name. Therefore
    a Visualforce page has a unique URL for accessing the page. A developer can create
    a Visualforce page by entering the page name in the address bar, as shown in the
    following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 是一种类似于 HTML 的标记语言。Visualforce 页面在 Force.com 平台上运行，它可以与标准 Web 开发技术如
    JavaScript、jQuery 以及通过 CSS 进行样式化集成。它允许我们构建更丰富和动态的用户界面。每个页面都可以通过一个唯一的页面名称来识别。因此，Visualforce
    页面有一个唯一的 URL 用于访问页面。开发者可以通过在地址栏中输入页面名称来创建一个 Visualforce 页面，如下面的屏幕截图所示：
- en: '![The Visualforce architecture](img/9818_01_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Visualforce 架构](img/9818_01_02.jpg)'
- en: Create a Visualforce page from a URL
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从 URL 创建 Visualforce 页面
- en: 'After creating the page, we can access the page by using the same URL. The
    Visualforce markup has a special set of components which is similar to the tag
    library system of other markups. These components allow us to create complicated
    components with a single tag. These components are processed and rendered on servers
    and finally delivered to the client. This methodology has higher performance and
    enriched functionality when compared to the client-only methods. A Visualforce
    page runs on the platform shown in following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建页面后，我们可以使用相同的 URL 访问页面。Visualforce 标记具有一组特殊的组件，类似于其他标记的标签库系统。这些组件允许我们使用单个标签创建复杂的组件。这些组件在服务器上被处理和渲染，最终交付给客户端。与仅客户端方法相比，这种方法具有更高的性能和更丰富的功能。Visualforce
    页面运行在以下图示所示的平台上：
- en: '![The Visualforce architecture](img/9818_01_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Visualforce 架构](img/9818_01_03.jpg)'
- en: Execution flow while saving Visualforce on a server
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上保存 Visualforce 时的执行流程
- en: 'The preceding digram illustrates that every time a developer saves a Visualforce
    page on a platform, the platform compiles the markup and related controllers.
    On successful compilation, markup is converted into an abstract set of instructions
    that can be understood by the Visualforce renderer. If there are any compilation
    errors, then it stops saving the page and returns the errors to the developer.
    If the saving attempt successfully finished, then the instructions are saved to
    the metadata repository and sent to the Visualforce renderer. The renderer converts
    the instructions into HTML, which can be understood by the browsers, and then
    refreshes the page as shown in the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示说明，每次开发者在平台上保存一个 Visualforce 页面时，平台都会编译标记和相关的控制器。在编译成功后，标记会被转换成 Visualforce
    渲染器能够理解的一组抽象指令。如果有任何编译错误，则停止保存页面并返回错误给开发者。如果保存尝试成功完成，则指令会被保存到元数据仓库并发送到 Visualforce
    渲染器。渲染器将指令转换为浏览器能够理解的 HTML，然后刷新页面，如下面的图示所示：
- en: '![The Visualforce architecture](img/9818_01_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Visualforce 架构](img/9818_01_04.jpg)'
- en: Execution flow of Visualforce page
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Visualforce 页面的执行流程
- en: The preceding diagram illustrates that when a non-developer user requests a
    Visualforce page, the application server retrieves the page from the metadata
    repository and then sends to the Visualforce renderer for HTML conversion. There
    is no compilation because the page has already been compiled into instructions
    during its development.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示说明了当非开发者用户请求Visualforce页面时，应用程序服务器从元数据存储库检索页面，然后将其发送到Visualforce渲染器进行HTML转换。由于页面在开发期间已经被编译成指令，因此不需要编译。
- en: Advantages of Visualforce
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visualforce的优势
- en: 'The following are the advantages of Visualforce for a developer:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Visualforce对开发者的优势：
- en: '**Model-View-Controller development style**: Visualforce adheres to the MVC
    pattern by providing the View of the application in the Force.com platform. A
    View is defined by user interfaces and Visualforce markup. The Visualforce controller
    which can be associated with Visualforce markup takes care of the business logic.
    Therefore, the designer and the developer can work separately, while the designer
    focuses on user interface and the developer focuses on business logic.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器开发风格**：Visualforce通过在Force.com平台上提供应用程序的视图来遵循MVC模式。视图由用户界面和Visualforce标记定义。与Visualforce标记相关联的Visualforce控制器负责业务逻辑。因此，设计师和开发者可以分别工作，设计师专注于用户界面，开发者专注于业务逻辑。'
- en: '**User-friendly development**: A developer (with an administrator profile)
    user can have a Visualforce editor pane at the bottom of every Visualforce page.
    This editor pane is controlled by the **Development Mode** option of the user
    record. This feature allows us to edit and see the resulting page at the same
    time and in the same window. This Visualforce editor has the code-saving feature
    with auto compilation and syntax highlighting.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户友好的开发**：具有管理员配置文件的开发者用户可以在每个Visualforce页面的底部拥有一个Visualforce编辑器面板。此编辑器面板由用户记录的**开发模式**选项控制。此功能允许我们同时在一个窗口中编辑和查看结果页面。此Visualforce编辑器具有代码保存功能，包括自动编译和语法高亮。'
- en: '**A broad set of ready-to-serve Visualforce components**: Visualforce has a
    set of standard components in several categories. There are output components,
    for example, `<apex:outputPanel>`, `<apex:outputField>`, `<apex:outputText>`,
    `<apex:pageBlock>`,and so on. There are input components, for example, `<apex:inputFile>`,
    `<apex:inputField>`, `<apex:inputText>`, `<apex:selectList>`, and so on. These
    input and output components have a feature called data-driven defaults. For an
    example, when we specify the `<apex:inputField>` component in a particular Visualforce
    page, the `<apex:inputField>` tag provides the edit interface for that field with
    data-type-related widgets (for example, the **Date** field has the calendar, and
    the e-mail/phone fields have their particular validations). There are also AJAX
    components, for example, `<apex:actionStatus>`. AJAX components allow the user
    to enhance the level of interactivity for a particular interface.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一系列现成的Visualforce组件**：Visualforce在几个类别中提供了一套标准组件。例如，有输出组件，如`<apex:outputPanel>`、`<apex:outputField>`、`<apex:outputText>`、`<apex:pageBlock>`等。还有输入组件，例如`<apex:inputFile>`、`<apex:inputField>`、`<apex:inputText>`、`<apex:selectList>`等。这些输入和输出组件具有一个称为数据驱动默认值的功能。例如，当我们在一个特定的Visualforce页面中指定`<apex:inputField>`组件时，`<apex:inputField>`标签为该字段提供与数据类型相关的编辑界面的小部件（例如，**日期**字段有日历，而电子邮件/电话字段有它们特定的验证）。还有AJAX组件，例如`<apex:actionStatus>`。AJAX组件允许用户提高特定界面的交互性水平。'
- en: '**Tightly integrated with Salesforce / Extends with custom components**: A
    Visualforce page can have a custom controller as well as a standard controller.
    A standard controller is created while creating the object and can be used for
    the Visualforce controller. A standard controller has the same logic and functionality
    which is used in standard pages. Visualforce pages adhere to these standardized
    methods and functionality. And we can also extend the standard components with
    custom components. For example, we can use an extension class for extending the
    standard controller of a particular Visualforce page. We can create our own Visualforce
    custom components instead of Visualforce in-built components for example, `<apex:inputFile>`,
    `<apex:inputField>`, `<apex:outputField>`, and so on. In the next two chapters
    we will discuss more about Visualforce controllers and Visualforce custom components.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与Salesforce紧密集成/扩展自定义组件**：一个Visualforce页面可以拥有自定义控制器以及标准控制器。标准控制器是在创建对象时创建的，可以用于Visualforce控制器。标准控制器具有与标准页面中使用的相同逻辑和功能。Visualforce页面遵循这些标准化方法和功能。我们还可以使用自定义组件扩展标准组件。例如，我们可以使用扩展类来扩展特定Visualforce页面的标准控制器。我们可以创建自己的Visualforce自定义组件，而不是使用Visualforce内置组件，例如`<apex:inputFile>`、`<apex:inputField>`、`<apex:outputField>`等。在接下来的两章中，我们将讨论更多关于Visualforce控制器和Visualforce自定义组件的内容。'
- en: '**Flexible and customizable with web technologies**: The Visualforce markup
    is more flexible and more customizable through the use of web technologies, for
    example, JavaScript, CSS, jQuery, Flash, and so on because it is eventually rendered
    into HTML. A designer can use the Visualforce tags with these web technologies.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Web技术灵活且可定制**：通过使用Web技术，例如JavaScript、CSS、jQuery、Flash等，Visualforce标记更加灵活和可定制，因为最终它会被渲染成HTML。设计师可以使用Visualforce标签与这些Web技术一起使用。'
- en: Visualforce development tools
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visualforce开发工具
- en: We can edit and view Visualforce pages from the set-up area by navigating to
    **Your Name** | **Setup** | **Develop** | **Pages**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到**您的姓名** | **设置** | **开发** | **页面**来编辑和查看Visualforce页面。
- en: 'But, that''s not the best way to develop Visualforce pages. There are a few
    other ways to build Visualforce pages, which are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这并不是开发Visualforce页面的最佳方式。还有其他几种构建Visualforce页面的方法，具体如下：
- en: '**The Visualforce editor pane**: This is discussed under the advantages of
    Visualforce.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visualforce编辑器面板**：这将在Visualforce的优势部分进行讨论。'
- en: '**The Force.com IDE**: This IDE is used for creating and editing Visualforce
    pages, custom Visualforce components, static resources, and controllers.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Force.com IDE**：这个IDE用于创建和编辑Visualforce页面、自定义Visualforce组件、静态资源和控制器。'
- en: '**The Eclipse plugin for Force.com**: This is same as the Force.com IDE, we
    can use it to create and edit Visualforce pages, custom Visualforce components,
    static resources, and controllers are some of the major features of the Force.com
    IDE.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Force.com的Eclipse插件**：这与Force.com IDE相同，我们可以用它来创建和编辑Visualforce页面、自定义Visualforce组件、静态资源和控制器，这些都是Force.com
    IDE的主要功能之一。'
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter we became familiar with the MVC model and Visualforce. We saw
    the Visualforce architecture and the advantages of Visualforce, and also the various
    Visualforce development tools.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们熟悉了MVC模型和Visualforce。我们了解了Visualforce架构和Visualforce的优势，以及各种Visualforce开发工具。
