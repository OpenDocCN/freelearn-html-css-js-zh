- en: Chapter 7. Animating Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 动画元素
- en: 'A question: if you had the choice of three websites: one static, one with badly
    done animation, and one which has been enhanced with subtle use of animation,
    which would you choose? Well, my hope is the answer to that question should be
    number three: animation can really make a site stand out if done well, or fail
    miserably if done badly!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题：如果你有三个网站的选择：一个静态网站，一个动画做得不好的网站，以及一个通过微妙地使用动画增强的网站，你会选择哪一个？嗯，我的希望是那个问题的答案应该是第三个：如果做得好，动画真的可以使网站脱颖而出，如果做得不好，则可能彻底失败！
- en: 'So far, our content has been relatively static, save for the use of media queries.
    It''s time, though, to take a look at how PostCSS can help make animating content
    a little easier. We''ll begin with a quick recap on the basics of animation, before
    exploring the route to moving away from pure animation, through to SASS, and finally,
    across to PostCSS. We will cover a number of topics throughout this chapter, which
    will include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的内容相对静态，除了使用媒体查询。然而，现在是时候看看PostCSS如何帮助使动画内容变得更容易一些了。我们将在快速回顾动画的基本知识之后，探索从纯动画转向SASS，最终转向PostCSS的路径。在本章中，我们将涵盖多个主题，包括：
- en: 'A recap on the use of jQuery to animate content:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery动画内容的回顾：
- en: Switching to CSS-based animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换到基于CSS的动画
- en: Exploring the use of pre-built libraries such as `Animate.css`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索使用预构建库（如`Animate.css`）的应用
- en: Exploring the options available when making the change to using PostCSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索在切换到使用PostCSS时的可用选项
- en: Working through creating an animation-based demo, using PostCSS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PostCSS创建基于动画的演示
- en: Learning how to optimize animations using PostCSS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用PostCSS优化动画
- en: Let's make a start…!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧…！
- en: Revisiting basic animations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾基本动画
- en: Animation is quickly becoming king in web development, more and more websites
    are using animations to help bring life and keep content fresh. If done correctly,
    they add an extra layer of experience for the end user; done badly, and the website
    will soon lose more custom than water through a sieve!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 动画正迅速成为Web开发的王者，越来越多的网站正在使用动画来帮助使内容生动并保持新鲜。如果做得正确，它们将为最终用户添加一个额外的体验层次；如果做得不好，网站很快就会失去比筛子更多的客户！
- en: Throughout the course of the chapter, we'll take a look at making the change
    from writing standard animation, through to using processors such as SASS, and
    finally, switching to using PostCSS. I can't promise you that we'll be creating
    complex JavaScript-based demos such as the *Caaaat* animation ([http://roxik.com/cat/](http://roxik.com/cat/)—try
    resizing the window!), but we will see that using PostCSS is really easy when
    creating animations for the browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们将探讨从编写标准动画到使用处理器（如SASS），最后切换到使用PostCSS的转变。我不能保证我们会创建像*Caaaat*动画（[http://roxik.com/cat/](http://roxik.com/cat/)—尝试调整窗口大小！）这样的复杂基于JavaScript的演示，但我们将看到，在为浏览器创建动画时使用PostCSS实际上是非常容易的。
- en: To kick off our journey, we'll start with a quick look at the traditional animation—how
    many times have you had to use `.animate()` in jQuery, over the years? Thankfully,
    we have the power of CSS3 to help with simple animations, but there was a time
    when we had to animate content using jQuery.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的旅程，我们将快速回顾传统的动画——这些年来你有多少次不得不在jQuery中使用`.animate()`？幸运的是，我们有CSS3的力量来帮助我们处理简单的动画，但曾经有一段时间，我们必须使用jQuery来动画化内容。
- en: 'As a quick reminder, try running `animate.html` from the `T34 – Basic animation
    using jQuery animate()` folder. It''s not going to set the world on fire, but
    is a nice reminder of times gone by, when we didn''t know any better:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快速提醒，尝试从`T34 – 使用jQuery animate()的基本动画`文件夹中运行`animate.html`。它可能不会让世界着火，但它是一个美好的提醒，让我们想起那些我们不知道更好的时光：
- en: '![Revisiting basic animations](img/BO5194_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![回顾基本动画](img/BO5194_07_01.jpg)'
- en: 'If we take a look at a profile of this animation from within a DOM inspector
    from within a browser such as Firefox, it would look something like this screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从浏览器（如Firefox）的DOM检查器中查看这个动画的轮廓，它看起来可能就像这个截图：
- en: '![Revisiting basic animations](img/BO5194_07_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![回顾基本动画](img/BO5194_07_02.jpg)'
- en: Whilst the numbers aren't critical, the key point here is the two dotted green
    lines, and that the results show a high degree of inconsistent activity. This
    is a good indicator that activity is erratic, with a low frame count, resulting
    in animations that are jumpy and less than 100% smooth.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数字并不关键，但关键点在于两条绿色的虚线，以及结果显示出高度的不一致活动。这是一个很好的指标，表明活动是断断续续的，帧数低，导致动画跳跃且不够 100%
    平滑。
- en: The great thing, though, is that there are options available to help provide
    smoother animations; we'll take a brief look at some of the options available,
    before making the change to using PostCSS. For now though, let's make that first
    step to moving away from using jQuery, beginning with a look at the options available
    for reducing dependency on the use of `.animate()` or jQuery.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，好消息是，有一些选项可以帮助提供更平滑的动画；在转向使用 PostCSS 之前，我们将简要地查看一些可用的选项。现在，让我们迈出第一步，开始减少对
    `.animate()` 或 jQuery 的依赖，从查看减少对 `.animate()` 或 jQuery 的使用选项开始。
- en: Moving away from jQuery
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离开 jQuery
- en: Animating content can be a contentious subject, particularly if jQuery or JavaScript
    is used—if we were to take a straw poll of 100 people and ask which they used,
    it is very likely that we would get mixed answers! A key answer of *it depends*
    is likely to feature at or near the top of the list of responses; many will argue
    that animating content should be done using CSS, while others will affirm that
    JavaScript-based solutions still have value.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 动画内容可能是一个有争议的话题，尤其是如果使用了 jQuery 或 JavaScript——如果我们对 100 个人进行一次简单的民意调查，询问他们使用的是哪种技术，我们可能会得到各种各样的答案！一个关键的回答是“视情况而定”，这很可能会出现在答案列表的前列；许多人会争论说，内容动画应该使用
    CSS 来完成，而其他人则会肯定基于 JavaScript 的解决方案仍然有价值。
- en: 'Leaving aside that…shall we say…lively debate, if we''re looking to move away
    from using jQuery, and in particular `.animate()`, then we have some options available
    to us:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 把那场……我们可以说……热烈的辩论放在一边，如果我们想要摆脱使用 jQuery，特别是 `.animate()`，那么我们有一些选项可供选择：
- en: Upgrade your version of jQuery! Yes—this might sound at odds with the theme
    of this chapter, but the most recent versions of jQuery introduced the use of
    `requestAnimationFrame`, which improved performance, particularly on mobile devices.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级您的 jQuery 版本！是的——这听起来可能与我们本章的主题相矛盾，但 jQuery 的最新版本引入了 `requestAnimationFrame`
    的使用，这提高了性能，尤其是在移动设备上。
- en: A quick and dirty route is to use the jQuery Animate Enhanced plugin, available
    from [http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/);
    although a little old, it still serves a useful purpose. It will (where possible)
    convert `.animate()` calls into CSS3 equivalents; it isn't able to convert all,
    so any that are not converted will remain as `.animate()` calls.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种快速且简单的方法是使用 jQuery Animate Enhanced 插件，可在 [http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/)
    获取；虽然有点过时，但它仍然发挥着有用的作用。它会在可能的情况下将 `.animate()` 调用转换为 CSS3 等效，但无法转换所有调用，因此未转换的调用将保持为
    `.animate()` 调用。
- en: Using the same principle, we can even take advantage of the JavaScript animation
    library, GSAP—the Greensock team have made available a plugin (from [https://greensock.com/jquery-gsap-plugin](https://greensock.com/jquery-gsap-plugin)),
    that replaces `jQuery.animate()` with their own GSAP library. The latter is reputed
    to be 20 times faster than standard jQuery! With a little effort, we can look
    to rework our existing code—in place of using `.animate()`, we can add the equivalent
    CSS3 style(s) into our stylesheet and replace existing calls to `.animate()` with
    either `.removeClass()` or `.addClass()`, as appropriate.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的原理，我们甚至可以利用 JavaScript 动画库 GSAP——Greensock 团队提供了一个插件（来自 [https://greensock.com/jquery-gsap-plugin](https://greensock.com/jquery-gsap-plugin)），该插件用他们自己的
    GSAP 库替换了 `jQuery.animate()`。据说后者比标准的 jQuery 快 20 倍！只要稍加努力，我们就可以重新编写现有的代码——在用
    `.animate()` 代替的情况下，我们可以将等效的 CSS3 样式添加到我们的样式表中，并将现有的 `.animate()` 调用替换为 `.removeClass()`
    或 `.addClass()`，视情况而定。
- en: We can switch to using libraries such as Transit ([http://ricostacruz.com/jquery.transit/](http://ricostacruz.com/jquery.transit/)),
    it still requires the use of jQuery, but gives better performance than using the
    standard `.animate()` command.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以切换到使用库，如 Transit ([http://ricostacruz.com/jquery.transit/](http://ricostacruz.com/jquery.transit/))，它仍然需要使用
    jQuery，但比使用标准的 `.animate()` 命令性能更好。
- en: Another alternative is Velocity JS by Jonathan Shapiro, available from [http://julian.com/research/velocity/](http://julian.com/research/velocity/);
    this has the benefit of not having jQuery as a dependency. There is even talk
    of incorporating all or part of the library into jQuery, as a replacement for
    `.animate()`—for more details, check out the issue log at [https://github.com/jquery/jquery/issues/2053](https://github.com/jquery/jquery/issues/2053).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个替代方案是 Jonathan Shapiro 的 Velocity JS，可在 [http://julian.com/research/velocity/](http://julian.com/research/velocity/)
    获取；这个方案的好处是不依赖于 jQuery。甚至有传言说将库的全部或部分集成到 jQuery 中，作为 `.animate()` 的替代——更多详情，请查看问题日志
    [https://github.com/jquery/jquery/issues/2053](https://github.com/jquery/jquery/issues/2053)。
- en: Many people automatically assume that CSS animations are faster than JavaScript
    (or even jQuery). After all, we don't need to call an external library (jQuery);
    we can use styles that are already baked into the browser, right? The truth is
    not as straightforward as this—in short, the right use of either will depend on
    your requirements and the limits of each method. For example, CSS animations are
    great for simple state changes, but if sequencing is required, then you *may*
    have to resort to using the JavaScript route.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人自动认为 CSS 动画比 JavaScript（甚至 jQuery）更快。毕竟，我们不需要调用外部库（jQuery）；我们可以使用浏览器中已经内置的样式，对吧？但事实并非如此简单——简而言之，正确使用任何一种方法都将取决于你的需求和每种方法的限制。例如，CSS
    动画非常适合简单的状态变化，但如果需要排序，那么你可能不得不求助于使用 JavaScript 路径。
- en: The key, however, is less in the method used, and more in how many frames per
    second are displayed on screen. Most people cannot distinguish above 60FPS—this
    produces a very smooth experience. Anything less than around 25FPS will produce
    blur and occasionally appear jerky—it's up to us to select the best method available,
    that produces the most effective solution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关键不在于使用的方法，而在于屏幕上每秒显示的帧数。大多数人无法区分 60FPS 以上的画面——这会产生非常平滑的体验。任何低于大约 25FPS 的画面都会产生模糊，偶尔还会出现卡顿——这取决于我们选择最佳方法，以产生最有效的解决方案。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To see the difference in frame rate, take a look at [https://frames-per-second.appspot.com/](https://frames-per-second.appspot.com/)—the
    animations on this page can be controlled; it's easy to see why 60FPS produces
    a superior experience!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看帧率的差异，请查看 [https://frames-per-second.appspot.com/](https://frames-per-second.appspot.com/)——这个页面上的动画可以控制；很容易看出为什么
    60FPS 会产生更优越的体验！
- en: So, which route should we take? Well, over the next few pages, we'll take a
    brief look at each of these options. At this point, you may well be asking, "How
    is this relevant to PostCSS though, given that this is the subject of this book?"
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该选择哪条路径呢？好吧，在接下来的几页中，我们将简要地查看这些选项中的每一个。在这个时候，你可能正在想，“这与 PostCSS 有什么关系呢，毕竟这是本书的主题？”
- en: In a nutshell, they are all methods that either improve how animations run,
    or allow us to remove the dependency on `.animate()`, which we know is not very
    efficient! True, some of these alternatives still use jQuery, but the key here
    is that your existing code could be using any or a mix of these methods. Later
    in this chapter, we'll take a look at how we can begin to remove jQuery, and focus
    more on using CSS3 animations, using the PostCSS plugin system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，它们都是改进动画运行方式或允许我们移除对 `.animate()` 依赖的方法，我们知道这并不高效！诚然，一些这些替代方案仍然使用 jQuery，但关键在于你的现有代码可以使用这些方法中的任何一种或它们的组合。在本章的后面部分，我们将探讨如何开始移除
    jQuery，并更多地关注使用 PostCSS 插件系统来使用 CSS3 动画。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A small word of note, all of the demos over the next few pages were run at the
    same time as a YouTube video was being run; this was to help simulate a little
    load and get a more realistic comparison. Running animations under load means
    less graphics processing power is available, which results in a lower FPS count.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，接下来的几页中的所有演示都是在运行 YouTube 视频的同时进行的；这是为了帮助模拟一点负载，以获得更真实的比较。在负载下运行动画意味着可用的图形处理能力更少，这会导致帧率计数降低。
- en: Let's kick off with a look at our first option, the `Transit.js` library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看我们的第一个选项，`Transit.js` 库开始。
- en: Animating content with Transit.js
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Transit.js 动画内容
- en: In an ideal world, any project we build will have as few dependencies as possible;
    this applies equally to JavaScript or jQuery-based content as it does to CSS styling.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个理想的世界里，我们构建的任何项目都将尽可能少地依赖外部库；这同样适用于基于 JavaScript 或 jQuery 的内容，也适用于 CSS 样式。
- en: 'To help with reducing dependencies, we can use libraries such as TransitJS
    or Velocity to construct our animations. The key here is to make use of the animations
    that these libraries create, as a basis for applying styles we can then manipulate
    using `.addClass()` or `.removeClass()`. To see what I mean, let''s explore this
    concept with a simple demo:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助减少依赖，我们可以使用像TransitJS或Velocity这样的库来构建我们的动画。关键在于利用这些库创建的动画，作为应用样式的基础，然后我们可以使用`.addClass()`或`.removeClass()`来操作这些样式。为了说明这一点，让我们通过一个简单的演示来探索这个概念：
- en: 'We''ll start by opening up a copy of `animate.html`—to make it easier, we need
    to change the reference to `square-small` from a class to a selector:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先打开`animate.html`的副本——为了简化，我们需要将`square-small`的引用从类更改为选择器：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, go ahead and add in a reference to the Transit library, immediately before
    the closing `</head>` tag:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`</head>`标签之前立即添加对Transit库的引用：
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Transit library uses a slightly different syntax, so go ahead and update
    the call to `.animate()` as indicated:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Transit库使用稍微不同的语法，所以请按照指示更新对`.animate()`的调用：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the file, then try previewing the results in a browser—if all is well,
    we should see no material change in the demo:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后在浏览器中预览结果——如果一切顺利，我们应该在演示中看到没有实质性的变化：
- en: '![Animating content with Transit.js](img/BO5194_07_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![使用Transit.js进行内容动画](img/BO5194_07_03.jpg)'
- en: 'However, the animation will be significantly smoother—the frame count is higher,
    at 44.28FPS, with fewer dips:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，动画将更加平滑——帧数更高，达到44.28FPS，下降的次数更少：
- en: '![Animating content with Transit.js](img/BO5194_07_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用Transit.js进行内容动画](img/BO5194_07_04.jpg)'
- en: Let's compare this with the same profile screenshot taken for the *Revisiting
    basic animations* section, earlier in this chapter—notice anything?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下本章前面*重新审视基本动画*部分所取的相同配置文件截图——您注意到什么了吗？
- en: 'Profiling browser activity can be complex, but there are only two things we
    need to concern ourselves with here: the FPS value and the state of the green
    line. The FPS value, or Frames Per Second, is over three times higher, and for
    a large part, the green line is more consistent, with fewer, more short-lived
    dips.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 分析浏览器活动可能很复杂，但我们只需要关注两件事：FPS值和绿色线的状态。FPS值，即每秒帧数，是原来的三倍多，而且大部分时间绿色线更加一致，下降的次数更少，持续时间更短。
- en: This means that we have a smoother, more consistent performance; at approximately
    44FPS, the average frame rate is significantly better than using standard jQuery—but
    we're still using jQuery!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们有一个更平滑、更一致的性能；大约44FPS的平均帧率比使用标准的jQuery要好得多——但我们仍然在使用jQuery！
- en: 'There is a difference, though—libraries such as Transit or Velocity convert
    animations, where possible, to CSS3 equivalents—if we take a peek under the covers,
    we can see this in the flesh:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个区别——像Transit或Velocity这样的库会将动画尽可能转换为CSS3等价物——如果我们查看底层，我们可以看到这一点：
- en: '![Animating content with Transit.js](img/BO5194_07_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用Transit.js进行内容动画](img/BO5194_07_05.jpg)'
- en: We can use this to our advantage, by removing the need to use `.animate()` and
    simply use `.addClass()` or `.removeClass()`—we'll see this in action later in
    this chapter, in the *Switching classes using jQuery* section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一点，通过移除使用`.animate()`的需求，直接使用`.addClass()`或`.removeClass()`——我们将在本章后面的*使用jQuery切换类*部分看到这一点。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you would like to compare our simple animation when using Transit or Velocity,
    there are examples available in the code download, as demos `T35A` and `T35B`,
    respectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想比较使用Transit或Velocity时我们的简单动画，代码下载中提供了示例，分别是演示`T35A`和`T35B`。
- en: To take it to the next step, we can use the Velocity library to create a version
    of our demo using plain JavaScript—we'll see how as part of the next demo. Beware
    though—this isn't an excuse to still use JavaScript; as we'll see, there is little
    difference in the frame count!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更进一步，我们可以使用Velocity库创建一个使用纯JavaScript的版本——我们将在下一个演示中看到如何实现。但请注意——这并不是继续使用JavaScript的借口；正如我们将看到的，帧数之间的差异很小！
- en: Animating with plain JavaScript
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用纯JavaScript进行动画
- en: Many developers are used to working with jQuery—after all, it makes it a cinch
    to reference just about any element on a page! Sometimes though, it is preferable
    to work in native JavaScript; this could be for speed. If we only need to support
    newer browsers (such as IE11 or Edge, and recent versions of Chrome or Firefox),
    then adding jQuery as a dependency isn't always necessary.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者习惯于使用jQuery——毕竟，它使得引用页面上的任何元素都变得非常简单！然而，有时在原生JavaScript中工作可能更可取；这可能是为了速度。如果我们只需要支持较新的浏览器（如IE11或Edge，以及Chrome或Firefox的最新版本），那么添加jQuery作为依赖项并不总是必要的。
- en: 'The beauty about libraries such as Transit (or Velocity) means that we don''t
    always have to use jQuery to still achieve the same effect; as we''ll see shortly,
    removing jQuery can help improve matters! Let''s put this to the test, and adapt
    our earlier demo to work without using jQuery:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Transit（或Velocity）等库的优点在于，我们不必总是使用jQuery就能达到相同的效果；正如我们很快将看到的，移除jQuery可以帮助改善情况！让我们来测试一下，并将之前的示例修改为不使用jQuery：
- en: We'll start by extracting a copy of the `T35B` folder from the code download
    that accompanies this book. Save this to the root of our project area.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从本书附带的代码下载中提取`T35B`文件夹的副本。将其保存到我们的项目区域根目录下。
- en: 'Next, we need to edit a copy of `animate.html` within this folder—go ahead
    and remove the link to jQuery, then remove the link to `velocity.ui.min.js`; we
    should be left with this in the `<head>` of our file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要编辑此文件夹内`animate.html`的副本——请移除jQuery的链接，然后移除`velocity.ui.min.js`的链接；我们应该在文件的`<head>`中留下以下内容：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A little further down, alter the `<script>` block as shown:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面一点，按照所示修改`<script>`块：
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file, then preview the results in a browser—if we monitor the performance
    of our demo using a DOM Inspector, we can see a similar frame rate being recorded
    in our demo:![Animating with plain JavaScript](img/BO5194_07_06.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，在浏览器中预览结果——如果我们使用DOM检查器监控我们示例的性能，我们可以在我们的示例中看到类似的帧率：![使用纯JavaScript进行动画](img/BO5194_07_06.jpg)
- en: With jQuery as a dependency no longer in the picture, we can clearly see that
    the frame rate has improved; the downside, though, is that support is reduced
    for some browsers, such as IE8 or 9\. This may not be an issue for your site—both
    Microsoft and the jQuery Core Team have announced changes to drop support for
    `IE8` - `10` and `IE8` respectively, which will help encourage users to upgrade
    to newer browsers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于jQuery作为依赖项不再存在，我们可以清楚地看到帧率有所提高；然而，缺点是，对某些浏览器（如IE8或9）的支持减少了。这可能不会成为你网站的问题——微软和jQuery核心团队都已宣布将停止支持`IE8`
    - `10`和`IE8`，这将有助于鼓励用户升级到较新的浏览器。
- en: It has to be said though, that while using CSS3 is preferable for speed and
    keeping our pages as lightweight as possible, using Velocity does provide a raft
    of extra opportunities that may be of use to your projects. The key here, though,
    is to carefully consider if you really do need them, or whether CSS3 will suffice,
    and allow you to use PostCSS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然说，出于速度和尽可能保持页面轻量化的考虑，使用CSS3是首选，但使用Velocity确实提供了一系列额外的机会，这些机会可能对你的项目有所帮助。不过，关键在于仔细考虑你是否真的需要它们，或者CSS3是否足够，并允许你使用PostCSS。
- en: Switching classes using jQuery
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery切换类
- en: 'At this point, there is one question that comes to mind: what about using class-based
    animation? By this, I mean dropping any dependency on external animation libraries,
    and switching to using plain jQuery with either `.addClass()` or `.removeClass()`
    methods.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，有一个问题浮现在脑海中：关于基于类的动画怎么办？我的意思是，放弃对外部动画库的任何依赖，并切换到使用纯jQuery的`.addClass()`或`.removeClass()`方法。
- en: 'In theory, it sounds like a great idea—we can remove the need to use `.animate()`,
    and simply swap classes as needed, right? Well, it''s an improvement, but it is
    still lower than using a combination of pure JavaScript and switching classes.
    It all boils down to a trade-off between using the ease of jQuery to reference
    elements, against pure JavaScript for speed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上讲，这听起来是个不错的想法——我们可以消除使用`.animate()`的需求，只需根据需要切换类即可，对吧？嗯，这是一个改进，但它仍然低于使用纯JavaScript和切换类的方法。这归结为使用jQuery的便捷性来引用元素与纯JavaScript的速度之间的权衡：
- en: 'We''ll start by opening a copy of `animate.html` from the previous exercise—first,
    go ahead and replace the call to Velocity.JS with this line, within the `<head>`
    of our document:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先打开之前练习中的`animate.html`副本——首先，请在我们文档的`<head>`中用以下行替换对Velocity.JS的调用：
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, remove the code between the `<script>` tags, and replace it with this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，请移除`<script>`标签之间的代码，并用以下内容替换：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the file—if we preview the results in a browser, we should see no apparent
    change in how the demo appears, but the transition is marginally more performant
    than using a combination of jQuery and Transit:![Switching classes using jQuery](img/BO5194_07_07.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件——如果我们在一个浏览器中预览结果，我们应该看到演示看起来没有明显的变化，但过渡比使用jQuery和Transit的组合性能更好：![使用jQuery切换类](img/BO5194_07_07.jpg)
- en: 'The real change in our code, though, will be apparent if we take a peek under
    the covers using a DOM Inspector:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，如果我们使用DOM检查器查看底层代码，真正的代码变化将变得明显：
- en: '![Switching classes using jQuery](img/BO5194_07_08.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery切换类](img/BO5194_07_08.jpg)'
- en: Instead of using `.animate()`, we are using CSS3 animation styles to move our
    square-small `<div>`. Most browsers will accept the use of transition and transform,
    but it is worth running our code through a process such as Autocomplete, to ensure
    we apply the right vendor prefixes to our code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是使用`.animate()`，而是使用CSS3动画样式来移动我们的`square-small <div>`。大多数浏览器都会接受使用过渡和变换，但值得通过像Autocomplete这样的过程运行我们的代码，以确保我们为代码应用正确的供应商前缀。
- en: The beauty of using CSS3 here is that, while it might not suit large, complex
    animations, we can at least begin to incorporate the use of external stylesheets
    such as `Animate.css`, or even use a preprocessor such as SASS to create our styles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用CSS3的优点是，虽然它可能不适合大型、复杂的动画，但我们至少可以开始使用外部样式表，如`Animate.css`，或者甚至使用预处理器如SASS来创建我们的样式。
- en: It's an easy change to make, so without further ado, and as the next step on
    our journey to using PostCSS, let's take a look at this in more detail.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很容易做出的改变，所以无需多言，作为我们使用PostCSS旅程的下一步，让我们更详细地看看这一点。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you would like to create custom keyframe-based animations, then take a look
    at [http://cssanimate.com/](http://cssanimate.com/), which provides a GUI-based
    interface for designing them, and will pipe out the appropriate code when requested.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建基于关键帧的自定义动画，那么请查看[http://cssanimate.com/](http://cssanimate.com/)，它提供了一个基于GUI的界面来设计它们，并在请求时输出适当的代码。
- en: Making use of pre-built libraries
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用预构建库
- en: Up to this point, all of our animations have had one thing in common—they are
    individually created, and stored within the same stylesheet as other styles for
    each project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的动画都有一个共同点——它们是单独创建的，并且存储在每个项目相同样式的同一样式表中。
- en: This will work perfectly well, but we can do better—after all, it's possible
    that we may well create animations that others have already built! Over time,
    we may also build up a series of animations that can form the basis of a library
    that can be reused for future projects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将完美工作，但我们能做得更好——毕竟，我们可能会创建出其他人已经构建的动画！随着时间的推移，我们也可能积累一系列动画，这些动画可以成为库的基础，该库可以用于未来的项目。
- en: A number of developers have already done this. One example of note is the `Animate.css`
    library, created by Dan Eden. It's worth getting to know this library, as we will
    use it later in this book in the guise of the postcss-animation plugin for PostCSS.
    In the meantime, let's run through a quick demo of how it works, as a precursor
    to working with it in PostCSS.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有许多开发者这样做。一个值得注意的例子是由Dan Eden创建的`Animate.css`库。了解这个库是值得的，因为我们在本书中稍后将使用它作为PostCSS的postcss-animation插件。在此期间，让我们快速演示它是如何工作的，作为在PostCSS中使用它的先导。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The images used in this demo are referenced directly from the LoremPixem site,
    as placeholder images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中使用的图像直接引用自LoremPixem网站，作为占位符图像。
- en: 'Let''s make a start:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: We'll start by extracting a copy of the `T37` folder from the code download
    that accompanies this book—save the folder to our project area.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从本书附带的代码下载中提取`T37`文件夹的副本——将文件夹保存到我们的项目区域。
- en: 'Next, open a new file and add the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开一个新文件并添加以下代码：
- en: '[PRE7]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save this as `style.css` in the `css` subfolder within the `T37` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`style.css`，在`T37`文件夹内的`css`子文件夹中。
- en: Go ahead and preview the results in a browser—if all is well, then we should
    see something akin to this screenshot:![Making use of pre-built libraries](img/BO5194_07_09.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中预览结果——如果一切顺利，我们应该看到类似于以下截图的内容：![利用预构建库](img/BO5194_07_09.jpg)
- en: If we run the demo, we should see images run through different types of animation—there
    is nothing special or complicated here; the question is, though, how does it all
    fit in with PostCSS?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行演示，应该会看到图像通过不同类型的动画运行——这里没有什么特别或复杂的地方；然而，问题是，这一切是如何与PostCSS结合起来的？
- en: Well, there's a good reason for this—there will be some developers who have
    used `Animate.css` in the past, and will be familiar with how it works; we will
    also be using the `postcss-animation` plugin later, in *Updating code to use PostCSS*,
    which is based on the `Animate.css` stylesheet library. For those of you who are
    not familiar with the stylesheet library though, let's quickly run through how
    it works, within the context of our demo.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这有一个很好的原因——有些开发者以前使用过`Animate.css`，并且熟悉它是如何工作的；我们稍后也会在*更新代码以使用PostCSS*中使用`postcss-animation`插件，它基于`Animate.css`样式表库。对于那些不熟悉样式表库的你们，让我们快速了解一下它的工作原理，在演示的上下文中。
- en: Dissecting the code for our demo
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析我们的演示代码
- en: The effects used in our demo are quite striking—indeed, one might be forgiven
    for thinking that they required a lot of complex JavaScript!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示中使用的效果非常引人注目——确实，有人可能会认为它们需要大量的复杂JavaScript！
- en: 'This, however, could not be further from the truth—the `Animate.css` file contains
    a number of `@keyframe` based animations, similar to this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这与事实相去甚远——`Animate.css`文件包含了许多基于`@keyframe`的动画，类似于这个：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We pull in the animations using the usual call to the library, within the `<head>`
    section of our code. We can then call any animation by name from within our code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用常规的库调用方法，在代码的`<head>`部分引入动画。然后我们可以在代码中通过名称调用任何动画：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will notice the addition of the `.animated` class in our code—this controls
    the duration and timing of the animation, and is set according to which animation
    name has been added to the code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们在代码中添加了`.animated`类——这控制了动画的持续时间和时机，并按照添加到代码中的动画名称来设置。
- en: The downside of not using JavaScript (or jQuery for that matter) means that
    the animation will only run once when the demo is loaded; we can set it to run
    continuously by adding the `.infinite` class to the element being animated (this
    is part of the Animate library). We can fake a click option in CSS, but it is
    an experimental hack, which is not supported across all browsers—to effect any
    form of control, we really need to use JavaScript (or even jQuery)!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用JavaScript（或jQuery）的缺点是，当演示加载时动画只会运行一次；我们可以通过给被动画化的元素添加`.infinite`类来让它连续运行（这是Animate库的一部分）。我们可以在CSS中模拟点击选项，但这是一种实验性的技巧，并不支持所有浏览器——要实现任何形式的控制，我们实际上需要使用JavaScript（甚至jQuery）！
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested in the details of the hack, then take a look at this response
    on Stack Overflow, at [http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572](http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个技巧的细节感兴趣，那么请查看Stack Overflow上的这个回答，[http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572](http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572)。
- en: 'Okay, onwards we go: we''ve covered the basic use of pre-built libraries, such
    as Animate. It''s time to step up a gear, and make the transition to PostCSS.
    As a start, we will use Gulp as our task runner of choice, with SASS. The latter
    is a perfect choice, as it fits in with the plugin we will use later in this chapter.
    Let''s take a look at what is involved in laying the groundwork for our conversion
    to PostCSS.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，继续前进：我们已经介绍了预构建库的基本用法，例如Animate。现在是时候提升一个档位，过渡到PostCSS。作为开始，我们将使用Gulp作为我们的任务运行器，配合SASS。后者是一个完美的选择，因为它与我们在本章后面将要使用的插件相匹配。让我们看看为我们的PostCSS转换打下基础需要哪些内容。
- en: Switching to using SASS
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向使用SASS
- en: 'As a developer or designer, if our development workflow includes the use of
    SASS, then the temptation is to use mixins such as this to construct our styles:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者或设计师，如果我们的开发工作流程包括使用SASS，那么使用这样的混入函数来构建我们的样式的诱惑是存在的：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's nothing wrong with this, but it will take effort to manage our mixins
    if we need to use more than just a small handful! The easier option is to explore
    using a pre-built animation library, as a way of reducing our development effort.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这并没有什么问题，但如果我们需要使用不仅仅是少量的话，管理我们的混入函数将需要付出努力！更简单的选择是探索使用预构建的动画库，作为减少我们开发工作量的方式。
- en: There are a number of developers who have created mixin libraries to handle
    animations; a perfect example is the SASS port of Animate, by Geoff Graham, which
    is available for download at [https://github.com/geoffgraham/animate.scss](https://github.com/geoffgraham/animate.scss).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开发者创建了用于处理动画的mixin库；一个完美的例子是Geoff Graham的Animate的SASS版本，可在[https://github.com/geoffgraham/animate.scss](https://github.com/geoffgraham/animate.scss)下载。
- en: 'There is something, though, that we have to be mindful of when working with
    mixins—it''s all too easy to use them to manage vendor prefixes, such as this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们与mixin一起工作时，我们必须注意一些事情——使用它们来管理供应商前缀真是太容易了，比如这样：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Although it will add the relevant vendor prefixes when the code is compiled,
    it's **not** considered best practice.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在代码编译时会添加相关的供应商前缀，但这**并不**被认为是最佳实践。
- en: The onus is on us to ensure that each animation includes all of the relevant
    vendor prefixes—with the best will in the world, it's a challenge to keep up!
    There is also the issue of adding rules that won't have any effect—for example,
    there is no point in adding `–o` as a prefix for transition; this prefix is no
    longer needed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的责任是确保每个动画都包含所有相关的供应商前缀——即使我们用心良苦，这也是一个挑战！还有添加不会产生任何效果规则的问题——例如，添加`–o`作为过渡的前缀是没有意义的；这个前缀不再需要。
- en: Fortunately, there is a better way to handle prefixes—we can use Autoprefixer
    (from [https://twitter.com/autoprefixer](https://twitter.com/autoprefixer)) to
    automatically handle vendor prefixes for us. The great thing about Autoprefixer
    is that it uses the Can I Use ([http://www.caniuse.com](http://www.caniuse.com))
    database to keep details up to date.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种更好的方法来处理前缀——我们可以使用Autoprefixer（来自[https://twitter.com/autoprefixer](https://twitter.com/autoprefixer)）来自动为我们处理供应商前缀。Autoprefixer的伟大之处在于它使用Can
    I Use ([http://www.caniuse.com](http://www.caniuse.com))数据库来保持信息的更新。
- en: There are various plugins available that allow us to use task runners such as
    Grunt or Gulp. We can of course use a standalone GUI-based compiler for this purpose,
    but why run something like this when we can tie in much more functionality when
    using a task runner? We can even use any one of several plugins to remove vendor
    prefixes, prior to running a new compilation—this will ensure any redundant prefixes
    are removed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种插件可供使用，允许我们使用任务运行器，如Grunt或Gulp。当然，我们可以使用独立的基于GUI的编译器来完成这个目的，但为什么要在可以使用任务运行器提供更多功能的时候运行这样的东西呢？我们甚至可以使用几个插件中的任何一个来在运行新的编译之前移除供应商前缀——这将确保移除任何冗余的前缀。
- en: With this in mind, let's get practical. For our next demo, we're going to construct
    a simple gallery effect, which showcases the same animations we saw earlier, but
    this time using the SASS version of `Animate.css`. We'll use Gulp as our task
    runner to compile the SASS code, before adding a source map, checking our code
    for consistency, adding vendor prefixes, and so on. You get the idea!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们来实际操作一下。在接下来的演示中，我们将构建一个简单的画廊效果，展示我们之前看到的相同动画，但这次使用`Animate.css`的SASS版本。我们将使用Gulp作为我们的任务运行器来编译SASS代码，然后添加源映射，检查代码的一致性，添加供应商前缀等等。你明白我的意思！
- en: Suffice to say that we can do a lot using a task runner, so without further
    ado, let's get started with constructing our gallery.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，我们可以使用任务运行器做很多事情，所以让我们开始构建我们的画廊吧。
- en: Creating an animated gallery
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个动画画廊
- en: Animating content can be a double-edged sword. Added with care, it can really
    lift a site to the next level. If it is done badly, then patronage of the site
    is likely to drop like a stone!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 动画内容可能是一把双刃剑。如果使用得当，它真的可以将网站提升到下一个层次。如果做得不好，那么网站的访问量可能会急剧下降！
- en: In our last demo, we constructed a simple gallery effect—this was more to show
    off the different types of animated effects we can add, rather than produce something
    that would win awards. Over the next few pages, we'll continue with our demo,
    but this time reconfigure it to use the SASS version of `Animate.css`. We will
    also introduce the use of a task runner to compile our code—as this is a requirement
    for using PostCSS, it seems a perfect point to start using it, as the final part
    of our transition to working with animation and PostCSS.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上一个演示中，我们构建了一个简单的画廊效果——这更多的是为了展示我们可以添加的不同类型的动画效果，而不是制作出能获奖的东西。在接下来的几页中，我们将继续我们的演示，但这次将重新配置它以使用`Animate.css`的SASS版本。我们还将介绍使用任务运行器来编译我们的代码——因为这是使用PostCSS的要求，这似乎是一个开始使用它的完美时机，作为我们过渡到使用动画和PostCSS的最后一部分。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The files for this tutorial are available in the `T38` folder in the accompanying
    code download.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的文件位于附带的代码下载中的 `T38` 文件夹中。
- en: 'Without further ado, let''s add the changes to our previous demo:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，让我们将更改添加到我们之前的演示中：
- en: We need to download the SASS version of Animate—it's available from [https://github.com/geoffgraham/animate.scss/archive/master.zip](https://github.com/geoffgraham/animate.scss/archive/master.zip).
    Go ahead and extract the contents of `Animate.scss-master` into the `src` folder
    at the root of our project area.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要下载 Animate 的 SASS 版本——它可以从 [https://github.com/geoffgraham/animate.scss/archive/master.zip](https://github.com/geoffgraham/animate.scss/archive/master.zip)
    获取。请继续操作，将 `Animate.scss-master` 文件的内容提取到我们项目区域的根目录下的 `src` 文件夹中。
- en: In the `src` folder, rename the `Animate.scss` file to `_animate.scss`—this
    is to indicate that it is a **partial**, which prevents it being compiled as a
    separate file by the SASS compiler.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中，将 `Animate.scss` 文件重命名为 `_animate.scss`——这是为了表明它是一个 **部分**，这防止了
    SASS 编译器将其编译为单独的文件。
- en: In the `src` folder, go ahead and rename it as `style.scss`—this changes it
    to a SASS file, which is required for compilation later in the exercise. We should
    have something akin to this screenshot in our `src` folder:![Creating an animated
    gallery](img/BO5194_07_10.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中，请将其重命名为 `style.scss`——这将其更改为一个 SASS 文件，这在练习的后续编译中是必需的。我们的 `src`
    文件夹中应该有类似以下截图的内容：![创建动画画廊](img/BO5194_07_10.jpg)
- en: 'Go ahead and open up the `style.scss` file. At the bottom, add this line at
    the top of the stylesheet:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请继续打开 `style.scss` 文件。在底部，将此行添加到样式表的顶部：
- en: '[PRE12]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, add the following additional lines at the end of the stylesheet—these
    pull in the animations from the SASS version of `Animate.css`; the timing has
    also been extended to five seconds, as the original example was too quick:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在样式表的末尾添加以下附加行——这些行从 `Animate.css` 的 SASS 版本中引入动画；时间也被延长到五秒，因为原始示例太快了：
- en: '[PRE13]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file, then copy the contents of the `src` folder under `T38` to the
    `src` folder at the root of our project area—we will be compiling this file shortly.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后将 `T38` 文件夹下 `src` 文件夹的内容复制到我们项目区域的根目录下的 `src` 文件夹中——我们很快将编译此文件。
- en: 'In a new file, go ahead and add the following code, then save it as `gulpfile.js`
    to the root of our project area—this will form our gulp file, which we will use
    to compile our code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，请继续添加以下代码，然后将其保存为 `gulpfile.js` 到我们项目区域的根目录——这将形成我们的 gulp 文件，我们将使用它来编译我们的代码：
- en: '[PRE14]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We also need a `package.json` file—this will store details of the plugins we
    will be using. For now, we will limit ourselves to using `gulp-sass`, but this
    will soon change! Go ahead and add the following lines to a new file, saving it
    as `package.json` in the root of our project area:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个 `package.json` 文件——这个文件将存储我们将要使用的插件详情。目前，我们将限制自己使用 `gulp-sass`，但很快就会改变！请继续操作，将以下行添加到一个新文件中，并将其保存为
    `package.json`，位于我们项目区域的根目录：
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The keen-eyed among you should spot that we''ve not installed the gulp-sass
    plugin. Let''s fix that now by firing up a Node.js command prompt, then changing
    the working directory to the project area. Go ahead and run this command from
    the prompt:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 眼尖的你们应该注意到我们没有安装 gulp-sass 插件。现在让我们通过启动一个 Node.js 命令提示符，然后更改工作目录到项目区域来解决这个问题。请从提示符中运行以下命令：
- en: '[PRE16]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At the prompt, enter `gulp` then press Enter—Gulp will now go away and compile
    our file; if all is well, we should see a compiled style sheet appear in the `dest`
    folder of our project area.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入 `gulp` 然后按 Enter 键——Gulp 将现在消失并编译我们的文件；如果一切顺利，我们应该在我们的项目区域的 `dest`
    文件夹中看到一个编译后的样式表。
- en: At this point, try running `animate.html` in a browser—if all is well, we should
    see no change to our gallery effect, but can be safe in the knowledge that we're
    now using the SASS version of `Animate.css`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，尝试在浏览器中运行 `animate.html`——如果一切顺利，我们应该看到我们的画廊效果没有变化，但可以放心，我们现在正在使用 `Animate.css`
    的 SASS 版本。
- en: Our demo has now been converted to using `Animate.scss`—we could easily have
    chosen to use any one of several compilers (such as Koala—[http://www.koala-app.com](http://www.koala-app.com)),
    but instead chose to use Gulp. It acts as a perfect route into making the transition
    to using PostCSS—as we've seen in earlier demos, we've already used a task runner
    in the form of Gulp for this purpose. This allows us to make that gradual transition—when
    all of the SASS elements have been converted, we simply drop the task from within
    our gulp file to complete the transition.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的演示已经转换为使用`Animate.scss`——我们本可以选择使用任何一种编译器（例如Koala—[http://www.koala-app.com](http://www.koala-app.com)），但选择使用Gulp。它作为过渡到使用PostCSS的完美途径——正如我们在早期的演示中所见，我们已经使用Gulp作为任务运行器来完成这个目的。这允许我们逐步过渡——当所有的SASS元素都转换为后，我们只需从gulp文件中删除任务即可完成过渡。
- en: Adding the finishing touches
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加完成 touches
- en: So, what next? We've created a basic gulp task file, which we used to compile
    our SASS code to valid styles.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，接下来是什么？我们已经创建了一个基本的gulp任务文件，我们用它来编译我们的SASS代码到有效的样式。
- en: But this is just a small part of the story; we need to add a lot more to make
    our compilation process useful and ready for conversion to using PostCSS.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是故事的一小部分；我们需要添加更多内容，使我们的编译过程变得有用，并准备好转换为使用PostCSS。
- en: 'Let''s get started:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'The first change we need to make is in the `package.json` file—go ahead and
    add the lines as highlighted:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一个更改是在`package.json`文件中——请立即添加突出显示的行：
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we need to configure our gulp file with some additional tasks—the first
    task is to add references to some additional plugins that we''ve already used
    from earlier in the book. Go ahead and add the following highlighted lines:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置我们的gulp文件以添加一些额外的任务——第一个任务是添加对一些我们在本书早期已经使用过的额外插件的引用。请立即添加以下突出显示的行：
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the additional plugin references added, we now need to add in our extra
    tasks—immediately below the SASS task, add in this task; this manages the linting
    of our code, for consistency:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加了额外的插件引用后，我们现在需要添加额外的任务——在SASS任务下方立即添加此任务；这管理着我们的代码的linting，以确保一致性：
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add this next task immediately below the previous step—this renames the files
    as part of the minification process:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 立即将此任务添加到上一个步骤下方——这将在压缩过程中重命名文件：
- en: '[PRE20]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our next gulp task manages the generation of source maps—this can be done within
    SASS automatically, but using a separate plugin allows flexibility during compilation.
    Go ahead and add this task immediately below the previous one:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的gulp任务负责生成源映射——这可以在SASS中自动完成，但使用单独的插件可以在编译过程中提供灵活性。请立即将此任务添加到上一个任务下方：
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''re almost at the end—go ahead and alter these lines as indicated:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎完成了——请按照指示更改这些行：
- en: '[PRE22]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save the file. Go ahead and fire up a Node.js command prompt, then change the
    working folder to our project area.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。请启动Node.js命令提示符，然后更改工作文件夹到我们的项目区域。
- en: At the prompt, type in `gulp` then press *Enter*—Gulp will go away and compile
    our file.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，键入`gulp`然后按*Enter*——Gulp将退出并编译我们的文件。
- en: If we take a look in the `dest` folder, we should see the same compiled `style.css`
    file, but this time with accompanying minified versions of the source map and
    style sheet:![Adding the finishing touches](img/BO5194_07_11.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看`dest`文件夹，应该会看到相同的编译后的`style.css`文件，但这次还有源映射和样式表的压缩版本：![添加完成 touches](img/BO5194_07_11.jpg)
- en: If we preview the results of our work, we should see no change in functionality
    within the demo, but can be safe in the knowledge that we now have minified versions
    of our files available for use—after all, it is always better to use minified
    files in a production environment!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们预览我们的工作结果，我们应该看到在演示中没有功能上的变化，但可以放心，我们现在有可用的文件压缩版本——毕竟，在生产环境中始终使用压缩文件更好！
- en: We've now laid the groundwork for our conversion to using PostCSS—the keen-eyed
    among you should spot that the plugin reference for PostCSS has already been added
    to our gulp file, ready for the next stage in our conversion process. Everything
    is now in place in our gulp file, save for the SASS task – at the appropriate
    point we will remove the SASS task and replace it with a PostCSS equivalent; this
    will take place in our next exercise. Before we do so, it's worth taking a little
    time to explore what is available within the PostCSS ecosystem—although there
    isn't a great deal on offer, we can still produce usable code for compilation
    within PostCSS.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为我们的PostCSS转换奠定了基础——那些细心的读者应该已经注意到，PostCSS的插件引用已经添加到我们的gulp文件中，为转换过程的下一阶段做好了准备。现在，我们的gulp文件中一切就绪，除了SASS任务——在适当的时候，我们将移除SASS任务，并用PostCSS的等效任务替换它；这将在我们的下一个练习中进行。在我们这样做之前，花点时间探索PostCSS生态系统内可用的功能是值得的——尽管提供的选项不多，我们仍然可以在PostCSS中生成可用的编译代码。
- en: Making the switch to PostCSS
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向使用PostCSS
- en: Okay…it's time to make that change to PostCSS!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧……是时候做出改变，转向PostCSS了！
- en: Before we get stuck into exploring what is available, there is a key question
    that I am sure you will be asking—how come we've been exploring animation using
    JavaScript, when this book is clearly about PostCSS?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索可用的功能之前，有一个关键问题我确信你们会问——既然这本书明显是关于PostCSS的，我们为什么还在探索使用JavaScript进行动画？
- en: 'There is a very good answer for this—not only are we exploring the different
    routes we might take to transition to PostCSS, but at a more basic level, whether
    we can make the change. This might sound contradictory, so let me explain all:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题有一个非常好的答案——我们不仅正在探索可能采取的不同路线以过渡到PostCSS，而且在更基本层面上，我们是否能够进行这种改变。这听起来可能有些矛盾，让我来解释一下：
- en: A key limitation of animation is the FPS count, or Frames Per Second—jQuery's
    standard `.animate()` method is notoriously slow, and has not been optimized for
    speed. The FPS count on our animation at the start of this chapter was significantly
    lower than that of Velocity. The same applies for the alternative Transit library
    that we also covered earlier in this chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的一个关键限制是FPS计数，即每秒帧数——jQuery的标准`.animate()`方法臭名昭著地慢，并且没有针对速度进行优化。本章开头我们的动画的FPS计数显著低于Velocity。同样适用于我们在本章早些时候也介绍过的替代Transit库。
- en: Making the switch to using CSS will improve the frame rate, but CSS-based animation
    is not yet sufficiently powerful to manage complex animations. It means that we
    as developers have to assess any requirements for a project, and weigh up whether
    CSS-based animation will work, or if we have to fall back to using JavaScript-based
    libraries.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 转向使用CSS将提高帧率，但基于CSS的动画还不足以处理复杂的动画。这意味着作为开发者，我们必须评估项目的任何需求，权衡基于CSS的动画是否可行，或者我们是否需要回退到使用基于JavaScript的库。
- en: This translates through to using PostCSS—it may be tempting to use CSS-based
    animation for a project, but this will only work if our animation requirements
    are such that it is not going to result in an overly complex, difficult to manage,
    solution.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于使用PostCSS——对于项目来说，使用基于CSS的动画可能很有吸引力，但这只会在我们的动画需求不会导致过于复杂、难以管理的解决方案时才有效。
- en: Exploring plugin options within PostCSS
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索PostCSS中的插件选项
- en: Assuming the use of CSS3 animations will be suitable for our project, it's at
    this point that we can begin to make the transition to using PostCSS.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 假设CSS3动画适合我们的项目，那么我们现在可以开始过渡到使用PostCSS。
- en: 'If you''re expecting to see an array of plugins, then I''m sorry to disappoint—at
    present, there are only four plugins for use with animations:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们期待看到一系列插件，那么很抱歉让你们失望——目前，只有四个插件可用于动画：
- en: '**Animation**: Available at [https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation),
    this adds `@keyframes` from `Animate.css`. This plugin uses [https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data),
    which hosts the converted animations.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：可在[https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation)找到，这个插件添加了来自`Animate.css`的`@keyframes`。此插件使用[https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data)，它托管了转换后的动画。'
- en: '**PostCSS Easings**: Downloadable from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings),
    this plugin converts easing names from [http://www.easings.net](http://www.easings.net)
    to `cubic-bezier()` equivalent values.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostCSS Easings**：可以从[https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings)下载，这个插件将[http://www.easings.net](http://www.easings.net)上的缓动名称转换为`cubic-bezier()`等效值。'
- en: '**PostCSS Transform Shortcuts**: This plugin allows us to specify individual
    values when creating transform statements—the source for this plugin is available
    from [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostCSS Transform Shortcuts**：此插件允许我们在创建转换语句时指定单个值——此插件的源代码可以从[https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut)获取。'
- en: '**PostCSS MQ Keyframes**: This plugin will move any keyframes from inside media
    queries to the bottom of our CSS file.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostCSS MQ Keyframes**：此插件将任何在媒体查询内部的keyframes移动到我们的CSS文件底部。'
- en: One could be forgiven for wondering what is possible with such a small range
    of plugins! We will add to the list a little later on though. Toward the end of
    the chapter, we will create a version of the `postcss-animation-data` plugin that
    allows us to use the Magic animations from [http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于如此有限的插件范围，人们可能会想知道它能做什么！不过，我们稍后会继续添加到列表中。在章节的末尾，我们将创建一个`postcss-animation-data`插件的版本，允许我们使用来自[http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/)的Magic动画。
- en: 'Okay, let''s put some of these to use: time for a demo!'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始使用一些这些工具：现在是时候进行演示了！
- en: Updating code to use PostCSS
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新代码以使用PostCSS
- en: Although the PostCSS ecosystem doesn't yet have a plentiful selection of animation-based
    plugins, this should not stop us from using it to compile our animation styles.
    To prove this, we're going to modify the jQuery and .add/remove class version
    of our previous demo—we'll use PostCSS to add an animation easing from the `Animate.css`
    library created by Dan Eden.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然PostCSS生态系统目前还没有大量基于动画的插件，但这不应该阻止我们使用它来编译我们的动画样式。为了证明这一点，我们将修改之前演示的jQuery和.add/remove类版本——我们将使用PostCSS从Dan
    Eden创建的`Animate.css`库中添加动画缓动。
- en: The plugin we require is the `postcss-animation` plugin, which is available
    from [https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation)
    and uses the `postcss-animation-data` plugin from [https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data).
    It's a cinch to install the plugin, which uses the same method as all of the other
    plugins we've installed to date.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的插件是`postcss-animation`插件，它可以从[https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation)获取，并使用来自[https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data)的`postcss-animation-data`插件。安装这个插件非常简单，它使用的方法与我们迄今为止安装的所有其他插件相同。
- en: 'Let''s get started on the demo:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始演示：
- en: We'll start by installing the `postcss-animation` plugin—for this, go ahead
    and open a Node.js session, then change the working directory to our project area.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先安装`postcss-animation`插件——为此，请打开一个Node.js会话，然后更改工作目录到我们的项目区域。
- en: 'At the prompt, enter this command and press Enter:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入以下命令并按Enter键：
- en: '[PRE23]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If all is well, we should see the plugin install:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该会看到插件安装成功：
- en: '![Updating code to use PostCSS](img/BO5194_07_12.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![更新代码以使用PostCSS](img/BO5194_07_12.jpg)'
- en: From the code download that accompanies this book, extract and save a copy of
    the contents of the `T39` folder to our project area—we'll use this as a basis
    for converting to PostCSS.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，提取并保存`T39`文件夹的内容到我们的项目区域——我们将以此为基础转换为PostCSS。
- en: 'Open `style.css` from the `css` sub-folder of the tutorial folder, then at
    the bottom, modify the `.move` rule as indicated:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从教程文件夹的`css`子文件夹中打开`style.css`文件，然后在底部，按照指示修改`.move`规则：
- en: '[PRE24]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this file into the `src` folder, then fire up a Node.js command prompt
    and change the working folder to our project area.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存到`src`文件夹中，然后启动Node.js命令提示符，并将工作文件夹更改为我们的项目区域。
- en: At the prompt, enter `gulp` then press Enter—if all is well, we should see these
    files appear in the `dest` folder:![Updating code to use PostCSS](img/BO5194_07_13.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中输入`gulp`然后按Enter键——如果一切顺利，我们应该会在`dest`文件夹中看到这些文件：![更新代码以使用PostCSS](img/BO5194_07_13.jpg)
- en: The last step is to copy the contents of this folder into the `css` folder within
    the `T39` folder.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是将此文件夹的内容复制到`T39`文件夹中的`css`文件夹内。
- en: At this point we're good to test our demo—if we try previewing the results of
    our work, we should see no change in appearance of our demo, but can be safe in
    the knowledge that we're now compiling our code using PostCSS.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经准备好测试我们的演示——如果我们尝试预览我们工作的结果，我们应该看到我们的演示外观没有变化，但可以放心，我们现在正在使用PostCSS编译我们的代码。
- en: Testing our altered code
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的修改后的代码
- en: Although we may not see any change in the appearance of our demo, there will
    clearly be a difference in how it behaves. To view this, we need to take a look
    under the covers of our demo, at the code.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可能看不到我们的演示外观有任何变化，但它的行为肯定会有所不同。为了查看这一点，我们需要查看我们的演示背后的代码。
- en: 'For this demo, we added an animation-name property, and assigned it the name
    `bounce`; when compiled, PostCSS adds in the appropriate `@keyframes` rules to
    the code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们添加了一个动画名称属性，并将其命名为`bounce`；当编译时，PostCSS会在代码中添加适当的`@keyframes`规则：
- en: '![Testing our altered code](img/BO5194_07_14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的修改后的代码](img/BO5194_07_14.jpg)'
- en: 'So, if we were to take a look at the performance, how does it compare? Even
    with the extra animation property assigned, it still pulls a respectable frame
    rate of 48.29FPS, when compared to using standard `.animate()`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们看看性能，它如何比较？即使分配了额外的动画属性，与使用标准的`.animate()`相比，它仍然能拉出一个令人尊重的帧率48.29FPS：
- en: '![Testing our altered code](img/BO5194_07_16.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的修改后的代码](img/BO5194_07_16.jpg)'
- en: This helps reinforce that where possible, we can improve performance by removing
    any dependency on using `.animate()` in our code. The use of CSS styling to animate
    content isn't quite ready to replace JavaScript, but it is slowly getting there!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于加强这样一个观点：在可能的情况下，我们可以通过移除代码中对`.animate()`的任何依赖来提高性能。使用CSS样式来动画化内容还远未准备好取代JavaScript，但它正在慢慢接近！
- en: 'Okay, onwards we go: we''ve briefly looked at the various ways to animate content;
    it''s time to make that final transition to using PostCSS. How many times have
    you seen forms that display the label above, or to the left of, each field? Sure,
    it gets boring after a while, seeing the same old design! It''s easy to change,
    so there is no excuse for not doing so. To prove this, we''re going to use PostCSS
    to slide each label up when that field has focus. Yes, you heard me right…*slide
    up*. Let''s take a look at how we can provide a new take on that venerable piece
    of functionality for any site.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们继续前进：我们简要地探讨了各种动画内容的方法；现在是时候过渡到使用PostCSS了。你见过多少次表单显示每个字段的标签位于上方或左侧的情况？当然，看久了会感到无聊，看到同样的老设计！这很容易改变，所以没有不这么做的理由。为了证明这一点，我们将使用PostCSS在字段获得焦点时将每个标签向上滑动。是的，你没听错…*向上滑动*。让我们看看我们如何为任何网站提供对这个备受推崇的功能的新视角。
- en: Creating a demo in PostCSS
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PostCSS中创建一个演示
- en: As an afterthought to the previous exercise, I posed the question, "How many
    times have you seen forms that display labels above, or to the right of, fields?"
    If I were to collect a dime for each answer, I suspect I would be off on some
    exotic island, rich, and without a care in the world—I've lost count of the number
    of times I've seen such forms, let alone anyone else who uses the Internet!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 作为之前练习的后续思考，我提出了问题：“你见过多少次表单显示标签位于字段上方或右侧的情况？”如果我为每个答案收集一角硬币，我怀疑我可能会在一个异国岛屿上，富有，而且无忧无虑——我已经数不清见过这种表单的次数，更不用说其他使用互联网的人了！
- en: 'There is no excuse for plain, boring forms. To prove this, we''re going to
    create a simple demo using the `postcss-transform-shortcut` plugin by Jonathan
    Neal, available from [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut).
    It''s a straightforward plugin that allows us to specify single properties, which
    the plugin combines into a single line of code within our style sheet. Let''s
    quickly install it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何理由让表单平淡无奇。为了证明这一点，我们将创建一个简单的演示，使用由Jonathan Neal提供的`postcss-transform-shortcut`插件，可在[https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut)获取。这是一个简单的插件，允许我们指定单个属性，该插件将它们组合成我们样式表中的一行代码。让我们快速安装它：
- en: First, go ahead and fire up a Node.js command prompt session, then change the
    working folder to our project area.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，启动一个Node.js命令提示符会话，然后更改工作文件夹到我们的项目区域。
- en: 'At the prompt, enter this command, then press Enter:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符中，输入此命令，然后按Enter键：
- en: '[PRE25]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Node will now install the plugin—it will return back to a flashing prompt when
    this is complete.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node现在将安装插件——当完成时，它将返回到一个闪烁的提示。
- en: There is no need to configure it, although there is a small task we have to
    complete before we can use it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要进行配置，尽管在我们可以使用它之前，我们必须完成一个小任务。
- en: Updating the plugin
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新插件
- en: While researching for this book, I came across an issue in the current release
    (1.0.0), whereby style sheets weren't compiling properly if they had multiple
    rules within; there are occasions when plugins may or may not work for your environment,
    and this is one of them!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在为本书进行研究时，我发现当前版本（1.0.0）中存在一个问题，即如果样式表中有多个规则，则无法正确编译；有时插件可能或可能不会在您的环境中工作，这就是其中之一！
- en: 'Thankfully, this is an easy fix—if we take a look within the `postcss-transform-shortcut`
    folder within the `node_modules` folder in our project area, we should see this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这是一个简单的修复——如果我们查看项目区域`node_modules`文件夹中的`postcss-transform-shortcut`文件夹，我们应该能看到这个：
- en: '![Updating the plugin](img/BO5194_07_17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![更新插件](img/BO5194_07_17.jpg)'
- en: Simply copy the contents of the file at [https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js](https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js)
    and paste straight over the top of `index.js`; this should resolve the issue.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地复制[https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js](https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js)文件的内容，并将其直接粘贴到`index.js`的顶部；这应该可以解决该问题。
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This has been logged as an issue in the developer's GitHub site, at [https://github.com/jonathantneal/postcss-transform-shortcut/issues/4](https://github.com/jonathantneal/postcss-transform-shortcut/issues/4),
    if you would like to see more details about the issue.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经在开发者的GitHub网站上记录为一个问题，在[https://github.com/jonathantneal/postcss-transform-shortcut/issues/4](https://github.com/jonathantneal/postcss-transform-shortcut/issues/4)，如果您想了解更多关于这个问题的细节。
- en: Building our demo
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建我们的演示
- en: Now that we have our updated plugin in place, we can get on with building our
    demo! The next exercise will take the form of a simple credit card form—*I don't*
    suggest you use it in a production environment, as it is purely designed to show
    the animation effects *only*, and does not have any security attached to the form!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了更新的插件，我们可以继续构建我们的演示！下一个练习将是一个简单的信用卡表单——*我不建议*您在生产环境中使用它，因为这个表单纯粹是为了展示动画效果，并且没有与表单相关的任何安全措施！
- en: 'That aside, here''s a screenshot of what we''re going to produce, using PostCSS:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，以下是使用PostCSS将要生成的截图：
- en: '![Building our demo](img/BO5194_07_18.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的演示](img/BO5194_07_18.jpg)'
- en: It's a simple demo, based on a codepen created by Michael Arestad, which you
    can view at [http://codepen.io/MichaelArestad/pen/ohLIa](http://codepen.io/MichaelArestad/pen/ohLIa)—I've
    simplified and reworked the demo to illustrate how we can use PostCSS to compile
    the code into valid CSS styles.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的演示，基于Michael Arestad创建的codepen，您可以在[http://codepen.io/MichaelArestad/pen/ohLIa](http://codepen.io/MichaelArestad/pen/ohLIa)查看——我已经简化并重新制作了这个演示，以展示我们如何使用PostCSS将代码编译成有效的CSS样式。
- en: 'Okay, let''s make a start with setting up our demo:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始设置我们的演示：
- en: We'll start by extracting a copy of the `T40 – Creating a demo in PostCSS` folder
    from the code download that accompanies this book; save it to our project area.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从本书附带的代码下载中提取`T40 – Creating a demo in PostCSS`文件夹的副本；将其保存到我们的项目区域。
- en: From within the folder, move the `package.json` and `gulpfile.js` files up a
    level to the root of our project area.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹内部，将`package.json`和`gulpfile.js`文件移动到项目区域的根目录。
- en: In the `css – completed versions` folder, copy `style – pre-compile version.css`
    to the `src` folder, and rename as `style.css`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`css – completed versions`文件夹中，将`style – pre-compile version.css`复制到`src`文件夹，并重命名为`style.css`。
- en: Next, fire up a Node.js command prompt session, then change the working folder
    to our project area.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动一个Node.js命令提示符会话，然后更改工作文件夹到我们的项目区域。
- en: At the prompt, enter gulp, then press Enter—PostCSS will go away and compile
    our code; if all is well, we should see our compiled style sheet files and `source
    maps` appear in the `dest` folder.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入gulp，然后按Enter键——PostCSS将消失并编译我们的代码；如果一切顺利，我们应该在`dest`文件夹中看到编译后的样式表文件和`source
    maps`。
- en: Copy the contents of the `dest` folder to the `css` folder within the original
    `T40 – Creating a demo in PostCSS` folder.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dest`文件夹的内容复制到原始`T40 – Creating a demo in PostCSS`文件夹中的`css`文件夹。
- en: Go ahead and preview the results—if all is well, we should see something akin
    to the screenshot shown at the start of our exercise.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，先预览一下结果——如果一切顺利，我们应该能看到我们在练习开始时展示的截图类似的内容。
- en: It's a simple demo, but it shows off how we can use animations perfectly—it
    adds a subtle effect to the label, and doesn't spoil the overall use of our form.
    The use of the plugin does raise a couple of useful points, so let's take a moment
    to explore what we've just created in more detail.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的演示，但它展示了我们如何完美地使用动画——它为标签添加了微妙的视觉效果，并没有破坏我们表单的整体使用。使用该插件确实提出了几个有用的观点，所以让我们花点时间更详细地探索我们刚刚创建的内容。
- en: Dissecting our demo in more detail
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更详细地剖析我们的演示
- en: 'The key to a successful plugin in PostCSS is one that follows the *1:1* principle—one
    plugin for one task. The `postcss-transform-shortcut` plugin is no exception:
    it takes the various elements that make up a transition rule, and puts them together
    in the right order. To see what we mean, take a look at these lines from within
    our style sheet before it is compiled:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: PostCSS中成功插件的关键是遵循*1:1*原则——一个插件对应一个任务。`postcss-transform-shortcut`插件也不例外：它将构成过渡规则的各个元素按照正确的顺序组合在一起。为了理解我们的意思，请查看在编译之前的样式表中的这些行：
- en: '![Dissecting our demo in more detail](img/BO5194_07_19.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![更详细地剖析我们的演示](img/BO5194_07_19.jpg)'
- en: 'Where''s our `transform:` statement? Well, when using this plugin, it''s not
    needed—instead, we can simply specify the various attributes, thus:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`transform:`语句在哪里？嗯，当使用这个插件时，它是不需要的——相反，我们只需指定各种属性，如下所示：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The plugin is set to recognize these four attributes and compile them into
    one single rule, as shown in this code excerpt:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 插件被设置为识别这四个属性并将它们编译成一条单独的规则，如下面的代码摘录所示：
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Any gaps in the attributes will be automatically filled in with default values
    from within the plugin. We can even use this plugin as the basis for an equivalent
    for transitions—we will do this toward the end of the next chapter.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 属性中的任何间隙都将自动用插件内的默认值填充。我们甚至可以使用这个插件作为创建等价过渡的基础——我们将在下一章的末尾这样做。
- en: Optimizing our animations
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化我们的动画
- en: When working with animations, there may be occasions when we need to use custom
    effects; one way to achieve this is through the use of `@keyframes`. Trouble is,
    some browsers don't support their use within media queries (yes, I'm looking at
    you, `IE10` and `IE11`!).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理动画时，可能会有需要使用自定义效果的情况；实现这一目标的一种方法是通过使用`@keyframes`。问题是，一些浏览器不支持在媒体查询中使用它们（是的，我在看你们，`IE10`和`IE11`！）。
- en: How does this affect us, I hear you ask? Well, if you're building any responsive
    sites, then this is absolutely something we need to bear in mind; media queries
    form the basic structure for any responsive functionality.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问这会影响到我们什么？嗯，如果你正在构建任何响应式网站，那么这绝对是我们需要牢记的事情；媒体查询构成了任何响应式功能的基本结构。
- en: It's an easy fix though—the developer, Andy Walpole, has created a simple PostCSS
    plugin called `mq-keyframes`, which is available at [https://github.com/TCotton/postcss-mq-keyframes](https://github.com/TCotton/postcss-mq-keyframes).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个简单的修复，但开发者Andy Walpole创建了一个简单的PostCSS插件，名为`mq-keyframes`，可在[https://github.com/TCotton/postcss-mq-keyframes](https://github.com/TCotton/postcss-mq-keyframes)找到。
- en: 'Imagine we have code such as this in our style sheet:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在我们的样式表中我们有这样的代码：
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'All the plugin does is move the code to the bottom of our style sheets, which
    makes it easier to read, and allows IE to continue working correctly:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 插件所做的只是将代码移动到我们的样式表底部，这使得阅读更加容易，并允许IE继续正确工作：
- en: '[PRE29]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is probably one of the simplest plugins to use in PostCSS, particularly
    where animating content is concerned; it's worth using if you have to support
    these versions of Internet Explorer! The plugin can be installed in the same way
    as most other plugins for PostCSS, and does not require any additional attributes
    as part of the configuration process.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是PostCSS中最简单易用的插件之一，尤其是在处理动画内容时；如果你需要支持这些版本的Internet Explorer，那么使用它是有价值的！该插件可以像安装大多数其他PostCSS插件一样安装，并且不需要在配置过程中添加任何额外的属性。
- en: Note
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a challenge, how about trying out the demo available at [http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/](http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/)?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项挑战，不妨尝试一下在[http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/](http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/)可用的演示。
- en: Using our own animation plugin
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用我们自己的动画插件
- en: Throughout the course of this chapter, we've used the small number of animation-based
    plugins that are available for PostCSS, and demonstrated some of the effects possible.
    This is all well and good, but one can't help but feel that this is a little limiting—and
    can we do something about it?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们使用了 PostCSS 可用的少量基于动画的插件，并演示了一些可能的效果。这些都很好，但人们不禁会感到这有点限制——我们能做些什么来改变这种情况吗？
- en: Absolutely, the beauty of PostCSS is that if there is a need for a plugin, then
    we can create something to fill that gap. A perfect example of this is the lack
    of CSS-based animation plugins available; at present, all we have is `postcss-animations`,
    which inserts animations from the `Animate.css` style sheet created by Dan Eden.
    I've used this as a basis for a new plugin—we'll use the same framework, but convert
    it to use the Magic set of animations, available from [http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，PostCSS 的美妙之处在于，如果需要插件，我们就可以创建一些东西来填补这个空白。一个很好的例子是缺乏基于 CSS 的动画插件；目前，我们只有
    `postcss-animations`，它从 Dan Eden 创建的 `Animate.css` 样式表中插入动画。我已经用它作为新插件的基础——我们将使用相同的框架，但将其转换为使用来自
    [http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/)
    的 Magic 动画集。
- en: 'We will cover the construction of plugins in more detail in [Chapter 8](ch08.html
    "Chapter 8. Creating PostCSS Plugins"), *Creating PostCSS Plugins*. Let''s make
    a start:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 8 章[创建 PostCSS 插件](ch08.html "第 8 章。创建 PostCSS 插件")中更详细地介绍插件的构建，*创建 PostCSS
    插件*。让我们开始吧：
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T41` folder, and save the contents to the root of our project area.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书附带的代码下载中，请提取 `T41` 文件夹的副本，并将其内容保存到我们项目区域的根目录中。
- en: Copy the `postcss-animation` and `postcss-animation-data` folders to the `node_modules`
    folder within our project area.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `postcss-animation` 和 `postcss-animation-data` 文件夹复制到我们项目区域的 `node_modules`
    文件夹中。
- en: Copy the `gulpfile.js` and `package.json` files to the root of our project area—if
    any are already present, replace them (or take copies for safekeeping).
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `gulpfile.js` 和 `package.json` 文件复制到我们项目区域的根目录中——如果已经存在，则替换它们（或者保留副本以备安全起见）。
- en: 'Crack open your text editor and add the following code, saving it as `style.css`
    in the `src` folder of our project area:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器，并添加以下代码，将其保存为 `style.css`，位于我们项目区域的 `src` 文件夹中：
- en: '[PRE30]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Fire up a Node.js folder, then change the working folder to our project area.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个 Node.js 文件夹，然后更改工作文件夹到我们的项目区域。
- en: At the prompt, enter `gulp`, then press Enter—PostCSS will go away and compile
    the code; if all is well, we should see the `@keyframes` code added to our compiled
    style sheet (in the `dest` folder), as shown in this screenshot:![Using our own
    animation plugin](img/BO5194_07_20.jpg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入 `gulp`，然后按 Enter 键——PostCSS 将会退出并编译代码；如果一切顺利，我们应该能看到 `@keyframes` 代码被添加到我们的编译样式表中（在
    `dest` 文件夹中），如图所示：![使用我们自己的动画插件](img/BO5194_07_20.jpg)
- en: Although our example only shows the single style, this doesn't matter—any style
    sheet that uses animation-name can be used, provided the animation-name value
    used matches one in the `postcss-animation-data` plugin. There are a few key points,
    though, that we should cover, so let's take a moment to explore these in more
    detail.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的示例只展示了单个样式，但这并不重要——任何使用 animation-name 的样式表都可以使用，只要使用的 animation-name 值与
    `postcss-animation-data` 插件中的某个值匹配。不过，还有一些关键点我们需要讨论，让我们花点时间更详细地探讨这些点。
- en: Exploring the plugin in more detail
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更详细地探索插件
- en: 'Our new plugin is a perfect example of how we can adapt an existing framework
    to use different values—there are a few key points we should note when using this
    plugin:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新插件是我们可以如何适应现有框架以使用不同值的完美例子——在使用此插件时，我们应该注意以下几点：
- en: 'A key point to consider when constructing any plugin: don''t worry about adding
    vendor prefixes. These should be added as part of the compilation stage when the
    plugin is used within your projects; this will take care of any vendor prefixes
    that are required.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建任何插件时需要考虑的一个关键点：不要担心添加供应商前缀。这些前缀应该在插件在项目中使用时作为编译阶段的一部分添加；这将处理所需的任何供应商前缀。
- en: 'At present, the plugin only lists two animation types from the Magic Animations
    library as examples—the full list of original animations is available from the
    Magic Animations GitHub repository at [https://github.com/miniMAC/magic/blob/master/magic.css](https://github.com/miniMAC/magic/blob/master/magic.css).
    We can easily add in any that we need, using the format of `"<name of animation>"
    : "<keyframe to use>"`, as shown in this screenshot:![Exploring the plugin in
    more detail](img/BO5194_07_21.jpg)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '目前，该插件仅列出了来自Magic Animations库的两种动画类型作为示例——原始动画的完整列表可在Magic Animations GitHub仓库中找到，网址为[https://github.com/miniMAC/magic/blob/master/magic.css](https://github.com/miniMAC/magic/blob/master/magic.css)。我们可以轻松地添加我们需要的任何动画，使用格式`"<动画名称>"
    : "<要使用的关键帧>"`，如本截图所示：![探索插件细节](img/BO5194_07_21.jpg)'
- en: As an experiment, how about trying to convert the animations from the Motion
    UI library at [http://zurb.com/playground/motion-ui](http://zurb.com/playground/motion-ui),
    for example? Or we can try the animations for AngularJS at [http://www.justinaguilar.com/animations/#](http://www.justinaguilar.com/animations/#)
    - it's entirely up to you!
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为实验，我们不妨尝试将来自Motion UI库的动画从[http://zurb.com/playground/motion-ui](http://zurb.com/playground/motion-ui)转换过来，例如？或者我们可以尝试AngularJS的动画，网址为[http://www.justinaguilar.com/animations/#](http://www.justinaguilar.com/animations/#)——这完全取决于你！
- en: Alternatively, it's worth applying the same principles to the `postcss-easings`
    plugin available from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings);
    this has some well-known easings built in, but they can easily be replaced. A
    great tool for this purpose is the site at [http://www.cubic-bezier.com](http://www.cubic-bezier.com).
    For example, if we take the `easeInExpo` easing, we create a Bezier curve that
    looks something like this:![Exploring the plugin in more detail](img/BO5194_07_22.jpg)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，将相同的原理应用于从[https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings)提供的`postcss-easings`插件也是值得的；它内置了一些知名的缓动效果，但它们可以很容易地被替换。这个目的的一个很好的工具是[http://www.cubic-bezier.com](http://www.cubic-bezier.com)网站。例如，如果我们取`easeInExpo`缓动效果，我们创建一个看起来像这样的贝塞尔曲线：![探索插件细节](img/BO5194_07_22.jpg)
- en: Note
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This translates to a value of `cubic-bezier(.95,.05,.79,.35)`, which we can
    use in our code. It's worth noting that some sites will show this easing as `(0.05,
    0.795, 0.035)`—[http://cubic-bezier.com/](http://cubic-bezier.com/) only shows
    values to two decimal places.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于`cubic-bezier(.95,.05,.79,.35)`的值，我们可以在我们的代码中使用它。值得注意的是，一些网站会显示这个缓动效果为`(0.05,
    0.795, 0.035)`——[http://cubic-bezier.com/](http://cubic-bezier.com/)只显示到小数点后两位的值。
- en: There are plenty of ways we can extend, modify, or create new plugins—the key
    to any should be that they are kept simple, limited to one task only, and that
    where possible, you should use the PostCSS plugin boilerplate as the basis for
    creating the plugins. The plugin we used in this exercise was created manually—this
    isn't an issue if you are creating it for your own needs, and don't intend to
    publish the plugin. In the next chapter, we will explore how easy it is to create
    something using the boilerplate code—it avoids a lot of issues at a later date!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多方法可以扩展、修改或创建新的插件——任何插件的关键都应该是它们保持简单，仅限于一个任务，并且尽可能使用PostCSS插件模板作为创建插件的基础。在这个练习中我们使用的插件是手动创建的——如果你是为自己的需求创建它，并且不打算发布插件，这并不是一个问题。在下一章中，我们将探讨使用模板代码创建东西有多容易——它避免了将来很多问题！
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Animating content is an almost de facto part of building modern sites – this
    can be something as simple as providing subtle effects on form labels, right through
    to providing a complex background slider. We've covered a lot of useful tips and
    tricks throughout this chapter, so let's take a moment to review what we've learned.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 动画内容几乎是构建现代网站的一个事实上的部分——这可以是从表单标签上提供微妙的视觉效果，到提供复杂的背景滑块。我们在本章中介绍了很多有用的技巧和窍门，所以让我们花点时间回顾一下我们学到了什么。
- en: The theme for this chapter has been about making the transition (sorry, pun
    intended!) from using vanilla CSS or SASS to PostCSS; we kicked off with a quick
    recap of the types of animation available.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题是关于从使用纯CSS或SASS过渡到PostCSS；我们首先快速回顾了可用的动画类型。
- en: This was swiftly followed by a look at some of the methods available for starting
    to make the transition away from standard CSS, such as using prebuilt animation
    libraries, or using CSS3 transitions. We then switched to covering how similar
    animations would look within SASS, so we can compare use of libraries such as
    `Animate.css`, before starting the switch to using PostCSS.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这迅速被查看一些可用于开始过渡到标准 CSS 的方法所跟随，例如使用预构建的动画库，或使用 CSS3 过渡。然后，我们转向介绍在 SASS 中类似动画的样式，这样我们就可以比较使用
    `Animate.css` 等库的方法，然后再开始转向使用 PostCSS。
- en: We started this part of the journey by exploring the various plugins available,
    before converting our code to use PostCSS equivalent styles. We then took things
    up a step, by creating a simple demo using PostCSS, before rounding out the chapter
    with a look at a simple animation plugin created for PostCSS, which is based on
    the Magic Animation set of animations.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过探索可用的各种插件开始了这段旅程，然后转换我们的代码以使用 PostCSS 相当的样式。接着，我们通过创建一个简单的 PostCSS 示例来进一步推进，最后在本章的结尾，我们查看了一个为
    PostCSS 创建的简单动画插件，该插件基于 Magic Animation 动画集。
- en: Phew - we've certainly covered a lot! But our journey doesn't stop there. In
    the next chapter, we'll explore some of the tips and tricks we can use to create
    plugins within PostCSS. No longer are we limited to what is available from others;
    we can now begin to create our own plugins instead...
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们确实已经覆盖了很多内容！但我们的旅程还没有结束。在下一章中，我们将探讨一些我们可以用来在 PostCSS 中创建插件的技巧和窍门。我们不再局限于他人提供的内容；现在我们可以开始创建我们自己的插件了...
