- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The internet is no longer a collection of static websites to be passively consumed.
    The browser (and mobile) user has come to expect a much richer and interactive
    experience. Over the last decade or so, network applications have come to resemble
    desktop applications. Also, recognition of the social characteristics of information
    has inspired the development of new kinds of interfaces and visualizations modeling
    dynamic network states, where the user is viewing change over real time rather
    than fading snapshots trapped in the past.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网不再是被动消费的静态网站的集合。浏览器（和移动设备）用户希望获得更丰富和互动的体验。在过去的十年左右，网络应用程序已经开始类似于桌面应用程序。此外，对信息的社交特性的认识已经激发了新型界面和可视化的发展，这些界面和可视化模拟了动态网络状态，用户可以实时查看变化，而不是被困在过去的静态快照中。
- en: Even though our expectations for software have changed, the tools available
    to us as software developers have not changed much. Computers are faster, and
    multicore chip architectures are common. Data storage is cheaper, as is bandwidth.
    Yet we continue to develop with tools designed before billion-user websites and
    push-button management of cloud-based clusters of virtual machines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们对软件的期望已经改变，但作为软件开发人员可用的工具并没有改变太多。计算机速度更快，多核芯片架构很常见。数据存储更便宜，带宽也更便宜。然而，我们仍然继续使用在十亿用户网站和云端虚拟机群的一键式管理之前设计的工具进行开发。
- en: The development of network applications remains an overly expensive and slow
    process because of this. Developers use different languages, programming styles,
    complicating code maintenance, debugging, and more. Very regularly, scaling issues
    arrive too early, overwhelming the ability of what is often a small and inexperienced
    team. Popular modern software features, such as real-time data, multiplayer games,
    and collaborative editing spaces, demand systems capable of carrying thousands
    of simultaneous connections without bending. Yet we remain restricted to frameworks
    designed to assist us in building CRUD applications, binding a single relational
    database on a single server to a single user running a multipage website in a
    browser on a desktop computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，网络应用程序的开发仍然是一个过于昂贵和缓慢的过程。开发人员使用不同的语言、编程风格，使代码维护、调试等变得复杂。非常经常，扩展问题出现得太早，超出了通常是一个小而经验不足的团队的能力。流行的现代软件功能，如实时数据、多人游戏和协作编辑空间，需要能够承载数千个同时连接而不弯曲的系统。然而，我们仍然局限于旨在帮助我们构建CRUD应用程序的框架，将单个关系数据库绑定到单个服务器上的单个用户，在桌面计算机上的浏览器上运行多页网站。
- en: Node helps developers build more resilient network applications at scale. Built
    on C++ and bundled with Google's V8 engine, Node is fast, and it understands JavaScript.
    Node has brought together the most popular programming language in the world and
    the fastest JavaScript compiler around, and has given easy access to an operating
    system through C++ bindings. Node represents a change in how network software
    is designed and built.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Node帮助开发人员构建更具规模的网络应用程序。Node基于C++构建，并捆绑了Google的V8引擎，速度快，并且理解JavaScript。Node将世界上最流行的编程语言和最快的JavaScript编译器结合在一起，并通过C++绑定轻松访问操作系统。Node代表了网络软件设计和构建方式的变革。
- en: What this book covers
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书内容
- en: '[Chapter 1](ad3a0c29-f1fb-4319-9042-a9f38bb0b53a.xhtml), *Understanding the
    Node Environment, *gives a brief description of the particular problems Node attempts
    to solve, their history and roots in the Unix design philosophy, and Node''s power
    as a systems language. We will also learn how to write optimized, modern JavaScript
    on V8 (the engine powering Node), including a brief tour of the newest features
    of the language that will help you upgrade your code.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](ad3a0c29-f1fb-4319-9042-a9f38bb0b53a.xhtml) *理解Node环境*，简要描述了Node试图解决的特定问题，它们在Unix设计哲学中的历史和根源，以及Node作为系统语言的强大之处。我们还将学习如何在V8（Node的引擎）上编写优化的现代JavaScript，包括对语言最新特性的简要介绍，这将帮助您升级您的代码。'
- en: '[Chapter 2](4cb6b06a-7800-4595-9908-f14d1ced3602.xhtml), *Understanding Asynchronous
    Event-Driven Programming, *digs deep into the fundamental characteristics of Node''s
    design: event-driven, asynchronous programming. By the end of this chapter, you
    will understand how events, callbacks, and timers are used in Node as well as
    how the event loop works to enable high-speed I/O across filesystems, networks,
    and processes. We''ll also learn about modern concurrency modeling constructs,
    from the default Node callback pattern to Promises, Generators, async/await, and
    other flow control techniques.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二章](4cb6b06a-7800-4595-9908-f14d1ced3602.xhtml) *理解异步事件驱动编程*，深入探讨了Node设计的基本特征：事件驱动、异步编程。通过本章的学习，您将了解事件、回调和定时器在Node中的使用，以及事件循环如何实现跨文件系统、网络和进程的高速I/O。我们还将了解现代并发建模构造，从默认的Node回调模式到Promises、Generators、async/await和其他流程控制技术。'
- en: '[Chapter 3](c7665bc9-3f44-4d7c-8318-61f9dfe962b3.xhtml), *Streaming Data Across
    Nodes and Clients, *describes how streams of I/O data are knitted through most
    network software, emitted by file servers or broadcast in response to an HTTP
    GET request. Here, you will learn how Node facilitates the design, implementation,
    and composition of network software, using examples of HTTP servers, readable
    and writable file streams, and other I/O focused Node modules and patterns. You
    will take a deep dive into the Streams implementation, mastering this fundamental
    part of the Node stack.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三章](c7665bc9-3f44-4d7c-8318-61f9dfe962b3.xhtml) *在节点和客户端之间传输数据*，描述了I/O数据流如何通过大多数网络软件编织在一起，由文件服务器发出或者作为对HTTP
    GET请求的响应进行广播。在这里，您将学习Node如何通过HTTP服务器、可读和可写文件流以及其他I/O集中的Node模块和模式的示例来促进网络软件的设计、实现和组合。您将深入了解流的实现，掌握Node堆栈的这一基本部分。'
- en: '[Chapter 4](886e76b5-09f3-4ab0-bb0e-191b2c40c299.xhtml), *Using Node to Access
    the Filesystem, *lays out what you need to know when accessing the filesystem
    with Node, how to create file streams for reading and writing, along with techniques
    for handling file uploads and other networked file operations. You will also implement
    a simple file browsing application using Electron.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](886e76b5-09f3-4ab0-bb0e-191b2c40c299.xhtml) *使用Node访问文件系统*，介绍了在Node中访问文件系统时需要了解的内容，如何创建文件流进行读写，以及处理文件上传和其他网络文件操作的技术。您还将使用Electron实现一个简单的文件浏览应用程序。'
- en: '[Chapter 5](ae24c7b4-7661-4041-8108-15fe453bf8c8.xhtml), *Managing Many Simultaneous
    Client Connections, *shows you how Node helps in solving problems accompanying
    the high-volume and high-concurrency environments that contemporary, collaborative
    web applications demand. Through examples, learn how to efficiently track user
    state, route HTTP requests, handle sessions, and authenticate requests using the
    Redis database and Express web application framework.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ae24c7b4-7661-4041-8108-15fe453bf8c8.xhtml) *管理许多同时的客户端连接*，向您展示了Node如何帮助解决当代协作Web应用程序所需的高容量和高并发环境所伴随的问题。通过示例，学习如何高效地跟踪用户状态，路由HTTP请求，处理会话，并使用Redis数据库和Express
    Web应用程序框架对请求进行身份验证。'
- en: '[Chapter 6](7c71fdd2-8060-4363-9ab3-1c5cdc24c8cf.xhtml), *Creating Real-Time
    Applications, *explores AJAX, Server-Sent-Events, and the WebSocket protocol,
    discussing their pros and cons when building real-time systems, and how to implement
    each using Node. We finish the chapter by building a collaborative document editing
    application.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](7c71fdd2-8060-4363-9ab3-1c5cdc24c8cf.xhtml) *创建实时应用程序*，探讨了AJAX、服务器发送事件和WebSocket协议，在构建实时系统时讨论它们的优缺点，以及如何使用Node实现每个协议。我们通过构建一个协作文档编辑应用程序来结束本章。'
- en: '[Chapter 7](48e16668-9318-4577-b3c0-3f4dbce035d9.xhtml), *Using Multiple Processes, *teaches
    how to distribute clusters of Node processes across multicore processors, and
    other techniques for scaling Node applications. An investigation of the differences
    between programming in single and multithreaded environments leads to a discussion
    on how to spawn, fork, and communicate with child processes in Node, including
    a section on using the PM2 process manager. We also build an analytics tool that
    records, and displays, the mouse actions of multiple, simultaneous clients connected
    through a cluster of web sockets.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](48e16668-9318-4577-b3c0-3f4dbce035d9.xhtml) *使用多个进程*，教授如何在多核处理器上分发Node进程集群，以及其他扩展Node应用程序的技术。对单线程和多线程环境编程的差异进行调查，讨论如何在Node中生成、分叉和与子进程通信，包括使用PM2进程管理器的部分。我们还构建了一个记录和显示多个同时连接的客户端通过一组Web套接字的鼠标操作的分析工具。'
- en: '[Chapter 8,](97a06823-2b25-44a5-9482-86f80d3d28ed.xhtml) *Scaling Your Application, *outlines
    some techniques for detecting when to scale, deciding how to scale, and scaling
    Node applications across multiple servers and cloud services, with examples, including
    how to use RabbitMQ as a message queue, using NGINX to proxy Node servers, and
    using Amazon Web Services in your application. The chapter closes with us building
    a robust customer service application deployed on Heroku, where you will learn
    how to use the Twilio SMS gateway with Node.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](97a06823-2b25-44a5-9482-86f80d3d28ed.xhtml) *扩展您的应用程序*，概述了一些检测何时扩展、如何扩展以及如何在多个服务器和云服务上扩展Node应用程序的技术，包括如何使用RabbitMQ作为消息队列，使用NGINX代理Node服务器，以及在应用程序中使用亚马逊网络服务的示例。本章以我们构建一个部署在Heroku上的强大的客户服务应用程序结束，您将学习如何使用Twilio
    SMS网关与Node配合使用。'
- en: '[Chapter 9](c8e13bc3-e661-441c-9fbc-bfdf6019f5f8.xhtml), *Microservices,* introducesthe
    concept of microservices—small, independent services—and how we got from monolithic
    and 3-Tier stacks to large fleets of independent services whose collaboration
    patterns are dynamic. We''ll learn how to use Seneca and Node to create an autodiscovering
    services mesh, AWS Lambda to create serverless applications infinitely scalable
    in the cloud, and finally, how to create Docker containers and orchestrate their
    deployment with Kubernetes.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](c8e13bc3-e661-441c-9fbc-bfdf6019f5f8.xhtml) *微服务*，介绍了微服务的概念——小型、独立的服务——以及我们是如何从单片和3层堆栈发展到大型独立服务的动态协作模式的。我们将学习如何使用Seneca和Node创建自动发现服务网格，使用AWS
    Lambda在云中创建无限可扩展的无服务器应用程序，最后，如何创建Docker容器并使用Kubernetes编排它们的部署。'
- en: '[Chapter 10](404d3cde-f615-4c63-b789-442e218a1263.xhtml), *Testing Your Application, *explains
    how to implement unit, functional, and integration tests with Node. We will go
    deep, exploring how to use native debugging and testing modules, heap dumps and
    CPU profiling, eventually building test suites with Mocha and Chai. We''ll cover
    mocks, stubs, and spies with Sinon, live debugging of running Node processes with
    Chrome DevTools, and how to use tools like Puppeteer to implement headless testing
    of your UI code.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](404d3cde-f615-4c63-b789-442e218a1263.xhtml) *测试您的应用程序*，解释了如何使用Node实现单元测试、功能测试和集成测试。我们将深入探讨如何使用本机调试和测试模块、堆转储和CPU分析，最终使用Mocha和Chai构建测试套件。我们将涵盖使用Sinon进行模拟、存根和间谍，使用Chrome
    DevTools实时调试运行中的Node进程，以及如何使用Puppeteer实现UI代码的无头测试。'
- en: Appendix A, *Organizing Your Work into Modules, *gives tips on using the npm
    package management system. Here, you will learn how to create, publish, and manage
    packages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 附录A，*将您的工作组织成模块*，提供了使用npm包管理系统的技巧。在这里，您将学习如何创建、发布和管理包。
- en: Appendix B, *Creating your own C++ Add-ons, *provides a brief introduction on
    how to build your own C++ add-ons and how to use them from within Node. We also
    cover the new **NAN (Native Abstractions for Node)** tool and how that can help
    you with writing cross-platform, future-proofed add-ons.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 附录B，*创建自己的C++附加组件*，简要介绍了如何构建自己的C++附加组件以及如何在Node中使用它们。我们还介绍了新的**NAN（Node的本机抽象）**工具以及它如何帮助您编写跨平台、未来证明的附加组件。
- en: What you need for this book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需内容
- en: You will need to have some familiarity with JavaScript, and have a copy of Node
    installed on your development machine or server, Version 9.0 or higher. You should
    know how to install programs on this machine, as you will need to install Redis,
    along with other libraries like Docker. Having Git installed, and learning how
    to clone GitHub repositories, will greatly improve your experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要对JavaScript有一定的了解，并在您的开发机器或服务器上安装Node的副本，版本为9.0或更高。您应该知道如何在这台机器上安装程序，因为您需要安装Redis，以及其他类似Docker的库。安装Git，并学习如何克隆GitHub存储库，将极大地改善您的体验。
- en: You should install RabbitMQ so that you can follow with the examples using message
    queues. The sections on using NGINX to proxy Node servers will, of course, require
    that you can install and use that web server. To build C++ add-ons, you will need
    to install the appropriate compiler on your system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该安装RabbitMQ，以便您可以跟随使用消息队列的示例。当然，使用NGINX代理Node服务器的部分将需要您安装和使用该Web服务器。要构建C++附加组件，您需要在系统上安装适当的编译器。
- en: The examples in this book are built and tested within UNIX-based environments
    (including Mac OS X), but you should be able to run all Node examples on Windows-based
    operating systems as well. You can obtain installers for your system, and binaries,
    from [http://www.nodejs.org](http://www.nodejs.org).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例是在基于UNIX的环境（包括Mac OS X）中构建和测试的，但您也应该能够在基于Windows的操作系统上运行所有Node示例。您可以从[http://www.nodejs.org](http://www.nodejs.org)获取适用于您系统的安装程序和二进制文件。
- en: Who this book is for
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适用对象
- en: This book is for developers who want to build high-capacity network applications,
    such as social networks, collaborative document editing environments, real-time
    data-driven web interfaces, networked games, and other I/O-heavy software. If
    you're a client-side JavaScript developer, reading this book will teach you how
    to become a server-side programmer using a language you already know. If you're
    a C++ hacker, Node is an open source project built using that language, offering
    you an excellent opportunity to make a real impact within a large and growing
    community, even gaining fame, by helping to develop this exciting new technology.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于希望构建高容量网络应用程序的开发人员，例如社交网络、协作文档编辑环境、实时数据驱动的网络界面、网络游戏和其他I/O密集型软件。如果您是客户端JavaScript开发人员，阅读本书将教会您如何使用您已经了解的语言成为服务器端程序员。如果您是C++黑客，Node是使用该语言构建的开源项目，为您提供了一个绝佳的机会，在一个庞大且不断增长的社区中产生真正的影响，甚至通过帮助开发这一激动人心的新技术而获得名声。
- en: This book is also for technical managers and others seeking an explanation of
    the capabilities and design philosophy of Node. The book is filled with examples
    of how Node solves the problems modern software companies are facing in terms
    of high-concurrency, real-time applications pushing enormous volumes of data through
    growing networks. Node has already been embraced by the enterprise, and you should
    consider it for your next project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还适用于技术经理和其他寻求了解Node的能力和设计理念的人。本书充满了Node如何解决现代软件公司在高并发、实时应用程序和通过不断增长的网络传输大量数据方面面临的问题的示例。Node已经被企业所接受，您应该考虑将其用于您的下一个项目。
- en: We are using the bleeding-edge version of Node (9.x at the time of writing).
    This is the only book you need to be ready for in the next few years as Node continues
    its march through the enterprise.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Node的最新版本（写作时为9.x）。这是您需要准备好的唯一一本书，以便在未来几年中随着Node在企业中的持续发展。
- en: Conventions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到一些区分不同信息类型的文本样式。以下是这些样式的一些示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "If
    we take a look at our `find-byte.c` file, we will see that our `render` method
    returns content wrapped in the `View` component".'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下：“如果我们查看我们的`find-byte.c`文件，我们会看到我们的`render`方法返回包装在`View`组件中的内容”。
- en: 'A block of code is set as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式编写：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the Next button moves you to the next screen."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。屏幕上显示的单词，例如菜单或对话框中的单词，会以这种方式出现在文本中：“单击“下一步”按钮会将您移至下一个屏幕。”'
- en: Warnings or important notes appear in a box like this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会以这样的方式出现在框中。
- en: Tips and tricks appear like this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这样的方式出现。
