- en: Chapter 10. Deploying HTML5 Games
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：部署 HTML5 游戏
- en: '*We have created several HTML5 games throughout the book. In this chapter,
    we discuss several approaches through which we can deploy our games to let others
    play them.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在本书中创建了几款 HTML5 游戏。在本章中，我们讨论了几种方法，通过这些方法我们可以部署我们的游戏，让其他人能够玩到它们。*'
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Deploying the game to a web page.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏部署到网页。
- en: Deploying the game as a mobile web app.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏作为移动网页应用程序部署。
- en: Wrapping the game into an OS X app.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏封装成 OS X 应用程序。
- en: Deploying the game to the App Store.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏部署到应用商店。
- en: There are different channels to deploy HTML5 games. We can put the game online
    in a normal web page or deploy it as a mobile web app. Otherwise, we can deploy
    the game on the Chrome Web Store. For native app stores, we have different app
    store options according to the types of the games. We choose desktop or mobile
    app stores to deploy our games. For desktop games, we can deploy the game to the
    Mac App Store or Windows Store. For games for mobile devices, we can deploy them
    to the iOS app store and Android app stores.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 HTML5 游戏有不同的渠道。我们可以在普通网页上发布游戏，或者将其作为移动网页应用程序部署。否则，我们还可以在 Chrome 网络商店部署游戏。对于原生应用程序商店，根据游戏类型我们有不同的选择。我们选择桌面或移动应用程序商店来部署我们的游戏。对于桌面游戏，我们可以将其部署到
    Mac App Store 或 Windows Store。对于移动设备游戏，我们可以将它们部署到 iOS 应用商店和 Android 应用商店。
- en: The most direct approach to deploy HTML5 games to app stores is by using Web
    View components from the target platform to host the HTML file and the related
    assets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将 HTML5 游戏直接部署到应用程序商店的最直接方法是通过目标平台提供的 Web View 组件来托管 HTML 文件和相关资源。
- en: Preparing the deploying materials
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备部署材料
- en: When deploying the game, we usually need to prepare for the store listing. This
    means we need to make the app icon, several screenshots, and game description.
    Some stores may optionally accept a short game play video.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署游戏时，我们通常需要准备商店列表。这意味着我们需要制作应用程序图标、几个截图和游戏描述。某些商店可能可选地接受简短的游戏玩法视频。
- en: Putting the game on the Web
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将游戏放在网上
- en: The requirement of the server depends on the technology we used in the game.
    For games that only involved client-side HTML, CSS, and JavaScript, we can use
    any web hosting, including the static website hosting service. Often, these static
    hosting services allow you to easily upload the website in a ZIP file or via cloud
    storage such as Dropbox.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的需求取决于我们在游戏中使用的技术。对于只涉及客户端 HTML、CSS 和 JavaScript 的游戏，我们可以使用任何网络托管，包括静态网站托管服务。通常，这些静态托管服务允许你轻松地通过
    ZIP 文件或通过云存储（如 Dropbox）上传网站。
- en: Amazon S3 is also an affordable choice for hosting a static website. For example,
    my HTML5 games are hosted on S3 with **Amazon CloudFront** as the Content Delivery
    Network (CDN) to boost the caching and loading performance. You can check out
    a site for HTML5 games at [http://makzan.net/html5-games-list/](http://makzan.net/html5-games-list/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon S3 也是托管静态网站的一个经济实惠的选择。例如，我的 HTML5 游戏托管在 S3 上，使用 **Amazon CloudFront**
    作为内容分发网络 (CDN) 以提升缓存和加载性能。你可以在 [http://makzan.net/html5-games-list/](http://makzan.net/html5-games-list/)
    查看HTML5 游戏网站。
- en: Another popular and free way to host static websites is via the GitHub page.
    GitHub is a service that hosts the Git repository, and it provides every repository
    with a static website hosting feature. You can learn more about it in their guide
    at [https://help.github.com/categories/github-pages-basics/](https://help.github.com/categories/github-pages-basics/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流行的免费托管静态网站的方式是通过 GitHub 页面。GitHub 是一个托管 Git 仓库的服务，并为每个仓库提供静态网站托管功能。你可以在他们的指南中了解更多信息：[https://help.github.com/categories/github-pages-basics/](https://help.github.com/categories/github-pages-basics/)。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some services mentioned in this chapter require you to use Git version control
    to push the code to their server. Git is a code version control system. You may
    learn about it via the online resource at [http://git-scm.com/book/](http://git-scm.com/book/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提到的某些服务要求你使用 Git 版本控制系统将代码推送到他们的服务器。Git 是一个代码版本控制系统。你可以通过在线资源 [http://git-scm.com/book/](http://git-scm.com/book/)
    了解更多。
- en: Hosting the node.js server
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管 node.js 服务器
- en: 'For games that require a server, such as the multiplayer game, we need to host
    the game server. Take our draw-and-guess game as an example; we need a hosting
    that supports the running of the Node.js server. To get a list of hosting that
    supports running Node.js, go to: [https://github.com/joyent/node/wiki/Node-Hosting](https://github.com/joyent/node/wiki/Node-Hosting).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要服务器的游戏，例如多人游戏，我们需要托管游戏服务器。以我们的画猜游戏为例；我们需要一个支持运行 Node.js 服务器的托管服务。要获取支持运行
    Node.js 的托管服务列表，请访问：[https://github.com/joyent/node/wiki/Node-Hosting](https://github.com/joyent/node/wiki/Node-Hosting)。
- en: Some of them, such as Heroku, are free during low usage and charge you after
    your application gets popular and needs to use more server resources. This pricing
    model is good for us to test the game with the public without paying a high price
    for a server renting fee.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些，如 Heroku，在低使用量时是免费的，当您的应用程序变得流行并需要使用更多服务器资源时，您将开始收费。这种定价模式对我们来说在以不支付高昂的服务器租赁费用的情况下测试游戏是很好的。
- en: Deploying as a mobile web app in the home screen
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将移动网页应用部署在首页
- en: We can make the game able to be installed on mobile devices' home screens by
    configuring several `meta` tags.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置几个 `meta` 标签，我们可以使游戏能够在移动设备的首页上安装。
- en: Time for action – adding a meta tag for a mobile web app
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 为移动网页应用添加 meta 标签
- en: 'We will take an audio game as an example to begin with. Let''s perform the
    following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以音频游戏为例开始。让我们执行以下步骤：
- en: Open the `index.html` file in the code editor.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开 `index.html` 文件。
- en: Add the following code within the head section.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在头部部分添加以下代码。
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Test the game on an iOS device or a simulator. To do this, try tapping on the
    **Share** button and then select **Add to Home Screen**. You should see the icon
    and the name of the game. Continue to add the game to the home screen.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 iOS 设备或模拟器上测试游戏。为此，请尝试点击 **分享** 按钮，然后选择 **添加到主屏幕**。您应该看到游戏图标和名称。继续将游戏添加到主屏幕。
- en: Then, open the game from the home screen. It will open in fullscreen mode.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从首页打开游戏。它将以全屏模式打开。
- en: Double-click on the home button to enable the app-switching screen. You will
    be able to see that the app has its own place, similar to a natively installed
    application.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击首页按钮以启用应用程序切换屏幕。您将能够看到应用程序有自己的位置，类似于原生安装的应用程序。
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are developing on Mac, you may use the iOS simulator that comes with
    the free Xcode development IDE from Apple. Simply drag the HTML file into the
    simulator, and you can test your game in mobile Safari.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在 Mac 上进行开发，您可以使用 Apple 免费开发 IDE Xcode 中的 iOS 模拟器。只需将 HTML 文件拖入模拟器，您就可以在移动
    Safari 中测试您的游戏。
- en: '*What just happened?*'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have added several `meta` tags that are recognized by mobile operating systems,
    specifically iOS. The idea of a mobile web app was introduced with the debut of
    the first iPhone in 2007\. We tell the system that our web browser is capable
    of being displayed like an app. Then, the system makes the web page very similar
    to an app to the user's perspective.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了几个被移动操作系统识别的 `meta` 标签，特别是 iOS。移动网页应用的概念是在 2007 年第一代 iPhone 发布时引入的。我们告诉系统我们的网页浏览器能够像应用程序一样显示。然后，系统从用户的角度使网页非常类似于应用程序。
- en: 'The default icon size is 60 x 60\. We can also provide pixel-perfect icons
    by specifying each dimension for the iPhone and iPad:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 默认图标大小为 60 x 60。我们还可以通过指定 iPhone 和 iPad 的每个维度来提供像素完美的图标：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building an HTML5 game into a Mac OS X app
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 HTML5 游戏构建成 Mac OS X 应用程序
- en: In this section, I will show you how we can wrap an HTML5 game with a Web View
    and build it into a native application. This section includes code with other
    programming languages in a different development environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示我们如何使用 Web View 包装 HTML5 游戏并将其构建成原生应用程序。本节包括在不同开发环境中的其他编程语言的代码。
- en: Time for action—putting the HTML5 games into a Mac app
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——将 HTML5 游戏放入 Mac 应用程序
- en: Follow the steps in Mac Xcode. We need a Mac and the Apple Xcode to create a
    Mac OS X app. Download Xcode from the Mac App Store if you haven't got it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 Mac Xcode 中的步骤进行操作。我们需要一台 Mac 和 Apple Xcode 来创建 Mac OS X 应用程序。如果您还没有安装，请从
    Mac App Store 下载 Xcode。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if you don't have a Mac, you can still have a look at how we wrap the Web
    View with an application. The concept is more important than the steps in this
    section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您没有 Mac，您也可以看看我们如何将 Web View 与应用程序包装在一起。概念比本节中的步骤更重要。
- en: Launch Xcode and create a new project. Select **Cocoa Application** under **OS
    X**:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_01.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Xcode并创建一个新项目。在**OS X**下选择**Cocoa Application**：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_01.jpg)
- en: In the Options View, give the name of the game as **Product Name**. **Organization
    Name** can be your name or a company's name. Use a reversed domain as **Organization
    Identifier**. Choose **Objective-C** for this code example. We keep the default
    value for the other options.![Time for action—putting the HTML5 games into a Mac
    app](img/B04290_10_02.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项视图中，将游戏名称作为**产品名称**。**组织名称**可以是你的名字或公司的名字。使用反向域名作为**组织标识符**。选择**Objective-C**作为此代码示例。我们保留其他选项的默认值。![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_02.jpg)
- en: Open the `Main.storyboard` file from the left panel. In the bottom-right panel,
    choose the third tab (which is highlighted in blue in the following screenshot).
    Drag the **Web View** component into the Window View. The Web View should become
    full width and height when you drag and drop it into the view:![Time for action—putting
    the HTML5 games into a Mac app](img/B04290_10_03.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板打开`Main.storyboard`文件。在右下角面板中，选择第三个标签（如下面的截图所示，以蓝色突出显示）。将**Web View**组件拖入窗口视图。当你将其拖放到视图中时，Web
    View应变为全宽和高：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_03.jpg)
- en: At the bottom of the window, there are several icons that configure how you
    can handle the resizing of the app window. Keep the **Web View** selected and
    then select the second icon that pops up a window, as shown in the following screenshot.
    Click on the four spacing icons that are beside the **0** input at the top to
    turn them into solid red lines:![Time for action—putting the HTML5 games into
    a Mac app](img/B04290_10_04.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口底部，有几个图标可以配置你如何处理应用窗口的调整大小。保持**Web View**选中状态，然后选择出现的第二个图标，如图所示。点击顶部**0**输入旁边的四个间距图标，将它们变成实心红色线条：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_04.jpg)
- en: After selecting the four spacings at the top, click on the **Add Constraints**
    button. This tells the Web View to maintain **0** spacing between all the four
    edges when the window resizes.![Time for action—putting the HTML5 games into a
    Mac app](img/B04290_10_05.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部选择四个间距后，点击**添加约束**按钮。这告诉Web View在窗口调整大小时保持所有四个边缘之间的**0**间距。![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_05.jpg)
- en: Then, we set the window size to fit our game. To do this, select the window.
    On the top-right panel, choose the fifth tab. Then, we make the window's size
    exactly 1,300 px width and 600 px height:![Time for action—putting the HTML5 games
    into a Mac app](img/B04290_10_06.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将窗口大小设置为适合我们的游戏。为此，选择窗口。在右上角面板中，选择第五个标签。然后，我们将窗口的大小设置为正好1,300 px宽和600 px高：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_06.jpg)
- en: Then, we enable the **Show Assistant Editor** option in the **View** menu. Keep
    the `Main.storyboard` option on the left and open the `ViewController.h` file
    in the right panel.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在**视图**菜单中启用**显示辅助编辑器**选项。保持左侧的`Main.storyboard`选项，并在右侧面板中打开`ViewController.h`文件。
- en: On the left panel, identify the **Web View** component. Right-click on the component
    and drag it to the interface section in the `ViewController.h` file. This allows
    us to name the component for future reference. Name the Web View component as
    `gameWebView`:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_13.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中，识别**Web View**组件。右键单击组件并将其拖动到`ViewController.h`文件中的界面部分。这允许我们为组件命名以便将来参考。将Web
    View组件命名为`gameWebView`：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_13.jpg)
- en: We have now configured the view. Let's move on to the code. We used the Web
    View component that is part of the WebKit framework. We need to include it in
    the project. To do this, select the **CarGame** project on the left panel. In
    the **Linked Framework and Libraries** section under the **General** tab, click
    on the plus icon to add the WebKit framework:![Time for action—putting the HTML5
    games into a Mac app](img/B04290_10_07.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经配置了视图。让我们继续到代码部分。我们使用了WebKit框架的一部分WebView组件。我们需要将其包含在项目中。为此，在左侧面板中选择**CarGame**项目。在**通用**标签下的**链接框架和库**部分中，点击加号图标以添加WebKit框架：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_07.jpg)
- en: Now, we should see `WebKit.framework` in the **Linked Frameworks and Libraries**
    section:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_08.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该在**链接框架和库**部分看到`WebKit.framework`：![将HTML5游戏放入Mac应用的时间——将HTML5游戏放入Mac应用](img/B04290_10_08.jpg)
- en: 'Click on the `ViewController.m` file and put the following code inside the
    `viewDidLoad` function:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`ViewController.m`文件，并在`viewDidLoad`函数中放入以下代码：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, your `ViewController.m` file should look like the following screenshot:![Time
    for action—putting the HTML5 games into a Mac app](img/B04290_10_09.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的`ViewController.m`文件应该看起来像下面的截图：![将HTML5游戏放入Mac应用的时间](img/B04290_10_09.jpg)
- en: Finally, click on the **Play** button on the top left of the Xcode that is shown
    in the following screenshot:![Time for action—putting the HTML5 games into a Mac
    app](img/B04290_10_10.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击以下截图所示的Xcode左上角的**播放**按钮：![将HTML5游戏放入Mac应用的时间](img/B04290_10_10.jpg)
- en: 'After you click on the Play button, the application will build and open a window
    with our car game running, as shown in the following screenshot:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击播放按钮后，应用程序将构建并打开一个窗口，显示我们的赛车游戏，如下面的截图所示：
- en: '![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_11.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![将HTML5游戏放入Mac应用的时间](img/B04290_10_11.jpg)'
- en: '*What just happened?*'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We just wrapped our game with a native application by using the Web View component.
    We used Xcode and Objective-C to demonstrate the behind-the-scenes scenario of
    wrapping the Web View. You can actually apply the same techniques in other languages
    and platforms, for example, using Swift in iOS or even building Windows applications
    with their Web View components in the Windows platform.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是使用WebView组件将我们的游戏包装在一个本地应用程序中。我们使用Xcode和Objective-C来演示包装WebView背后的场景。实际上，你可以在其他语言和平台上应用相同的技巧，例如在iOS中使用Swift，甚至使用Windows平台上的WebView组件构建Windows应用程序。
- en: Building an HTML5 game into a mobile app with the Web View
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebView将HTML5游戏构建成移动应用
- en: We had a glimpse of how wrapping the game in a Web View works. It's very similar
    to wrapping a Web View into a mobile app. For example, in iOS, we use the Xcode
    and create an iPhone or iPad project to which we add a Web View in the default
    view. Inside the Web View, we load the HTML file by using a similar technique
    in the Mac app section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要了解了将游戏包装在WebView中的工作原理。它与将WebView包装在移动应用中非常相似。例如，在iOS中，我们使用Xcode创建一个iPhone或iPad项目，并在默认视图中添加一个WebView。在WebView内部，我们通过在Mac应用部分中使用类似的技术来加载HTML文件。
- en: For an Android app, we can use Android Studio. Android uses a different programming
    language; it uses Java, but the concept is the same. We create a Web View component
    in the main view and load our HTML5 game via a URL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android应用，我们可以使用Android Studio。Android使用不同的编程语言；它使用Java，但概念是相同的。我们在主视图中创建一个WebView组件，并通过URL加载我们的HTML5游戏。
- en: Please note that we need a certificate to deploy an iOS app into app store.
    To obtain the certificate, we need to join the Apple Developer Program that requires
    an annual fee. For the Mac app, we can distribute the game on our own or deploy
    it to the Mac App Store with a Mac developer certificate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要一个证书才能将iOS应用部署到应用商店。为了获得证书，我们需要加入苹果开发者计划，该计划需要支付年度费用。对于Mac应用，我们可以自行分发游戏，或者使用Mac开发者证书将其部署到Mac
    App Store。
- en: Building with the PhoneGap build
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PhoneGap构建
- en: There is another option to build Android and iPhone apps from web apps—by using
    the PhoneGap build service. The service allows you to upload a ZIP file of the
    web game. Then, it uses Web View to display the HTML, similar to our previous
    Web View examples.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是将Web应用构建成Android和iPhone应用——通过使用PhoneGap构建服务。该服务允许你上传一个包含Web游戏的ZIP文件。然后，它使用WebView来显示HTML，类似于我们之前的WebView示例。
- en: '![Building with the PhoneGap build](img/B04290_10_12.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用PhoneGap构建](img/B04290_10_12.jpg)'
- en: The difference is that PhoneGap provides several hardware resources via its
    JavaScript API. Since our game hasn't used any PhoneGap API, it gives pretty much
    the same result as wrapping the Web View ourselves and building using the PhoneGap.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于PhoneGap通过其JavaScript API提供了几个硬件资源。由于我们的游戏没有使用任何PhoneGap API，它几乎与我们自己包装WebView并使用PhoneGap构建的结果相同。
- en: If you don't have any native programming experience, PhoneGap or a similar cloud
    building service is a good choice. If you are comfortable with native development
    environment, I prefer wrapping the Web View myself. This provides more flexibility
    for future development in case we need to mix native and Web View to make it a
    hybrid application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有任何本地编程经验，PhoneGap或类似的云构建服务是一个不错的选择。如果你对本地开发环境感到舒适，我更喜欢自己包装WebView。这为我们未来的开发提供了更多的灵活性，以防我们需要混合本地和WebView来制作混合应用程序。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Besides a PhoneGap build, there are other services that try to put HTML5 games
    into the native app platform. CocoonJS ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/))
    is another platform for this purpose. Instead of just wrapping the Web View inside
    a native application, CocoonJS tries to convert the canvas drawing API into the
    operating system's OpenGL command to gain further performance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了PhoneGap构建之外，还有其他服务试图将HTML5游戏放入原生应用平台。CocoonJS ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/))
    是为此目的的另一个平台。CocoonJS试图将canvas绘图API转换为操作系统的OpenGL命令，以获得更高的性能。
- en: App store's reviewing process
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用商店的审查流程
- en: There are different review processes per deploying channel. For example, Apple
    often takes 1 to 4 weeks to review the app before allowing it on their app stores.
    On the other hand, Google often takes hours to review apps on the Play Store.
    If you are new to the store, it often takes an extra week to get familiar with
    its configuration tool. So, be ready 4 weeks in advance if you need to push the
    game on the app stores to a deadline, such as a client project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部署渠道都有不同的审查流程。例如，苹果通常在允许其应用商店上架之前，需要1到4周的时间来审查应用程序。另一方面，谷歌通常需要几个小时来审查Play
    Store中的应用程序。如果你是新手，通常需要额外一周的时间来熟悉其配置工具。所以，如果你需要在截止日期前将游戏推上应用商店，比如客户项目，请提前4周做好准备。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We didn't go through the process of uploading our game to app stores because
    their configuration and store listing may change over time. The important thing
    is to have all the material and target builds ready. With all the material ready,
    uploading and configuring for each store shouldn't be a burden.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有详细介绍将游戏上传到应用商店的过程，因为它们的配置和商店列表可能会随时间变化。重要的是要准备好所有材料和目标构建。所有材料准备就绪后，上传和为每个商店配置不应成为负担。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about publishing the game to different platforms.
    Specifically, we discussed static website hosting services to deploy our HTML5
    games. We listed servers that run node.js. We updated our code to work well with
    the home screen web app. We tried to put our HTML5 game into Web View in Xcode.
    We also discussed the building of mobile apps and their review process.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了将游戏发布到不同平台的方法。具体来说，我们讨论了静态网站托管服务来部署我们的HTML5游戏。我们列出了运行node.js的服务器。我们更新了我们的代码，使其与主页面的Web应用兼容。我们尝试将我们的HTML5游戏放入Xcode的Web
    View中。我们还讨论了移动应用的构建及其审查流程。
- en: We discussed different aspects of making HTML5 games with CSS3 and JavaScript
    in nine chapters. We learned how to build a traditional Ping Pong game in DOM
    and built a card-matching game in CSS3 and an Untangle puzzle game with Canvas.
    Then, we explored how to add sounds to the game and created a mini piano musical
    game around it. Next, we discussed saving and loading game statuses by using the
    local storage. We also built a draw-and-guess real-time multiplayer game with
    WebSockets. Then, we created a car game with a physics engine in this chapter.
    Finally, we discussed how we can deploy our HTML5 games to different platforms.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在九个章节中讨论了使用CSS3和JavaScript制作HTML5游戏的不同方面。我们学习了如何在DOM中构建传统的乒乓球游戏，在CSS3中构建匹配卡片游戏，以及使用Canvas构建解谜游戏。然后，我们探讨了如何向游戏中添加声音，并围绕它创建了一个迷你钢琴音乐游戏。接下来，我们讨论了通过使用本地存储来保存和加载游戏状态。我们还使用WebSockets构建了一个实时多人游戏的画图猜谜游戏。然后，在本章中，我们创建了一个带有物理引擎的赛车游戏。最后，我们讨论了如何将我们的HTML5游戏部署到不同的平台。
- en: 'Throughout the book, we built different types of games, and you learned some
    essential techniques that you need to make HTML5 games. The next step is to go
    on and deploy your own games. To help develop your own games, there are some resources
    that can be helpful. The following list gives some useful links for HTML5 game
    development:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们构建了不同类型的游戏，并学习了制作HTML5游戏所需的一些基本技术。下一步是继续并部署你自己的游戏。为了帮助你开发自己的游戏，有一些资源可能会有所帮助。以下列表提供了HTML5游戏开发的一些有用链接：
- en: 'General HTML5:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通用HTML5:'
- en: HTML5 Game Development ([http://www.html5gamedevelopment.com/](http://www.html5gamedevelopment.com/))
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5游戏开发 ([http://www.html5gamedevelopment.com/](http://www.html5gamedevelopment.com/))
- en: HTML5 Rocks ([http://www.html5rocks.com/](http://www.html5rocks.com/))
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 Rocks ([http://www.html5rocks.com/](http://www.html5rocks.com/))
- en: HTML5 game engines
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5游戏引擎
- en: ImpactJS ([http://impactjs.com/](http://impactjs.com/))
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImpactJS ([http://impactjs.com/](http://impactjs.com/))
- en: CreateJS ([http://createjs.com/](http://createjs.com/))
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateJS ([http://createjs.com/](http://createjs.com/))
- en: Phaser ([http://phaser.io/](http://phaser.io/))
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phaser ([http://phaser.io/](http://phaser.io/))
- en: Game sprites and textures
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏精灵和纹理
- en: Lost Garden ([http://lunar.lostgarden.com/labels/free%20game%20graphics.html](http://lunar.lostgarden.com/labels/free%20game%20graphics.html))
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失落的花园 ([http://lunar.lostgarden.com/labels/free%20game%20graphics.html](http://lunar.lostgarden.com/labels/free%20game%20graphics.html))
- en: HasGraphics sprites, textures, and tilesets ([http://hasgraphics.com/category/sprites/](http://hasgraphics.com/category/sprites/))
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HasGraphics 图像、纹理和瓦片集 ([http://hasgraphics.com/category/sprites/](http://hasgraphics.com/category/sprites/))
- en: Subtle Patterns ([http://subtlepatterns.com](http://subtlepatterns.com))
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 细腻图案 ([http://subtlepatterns.com](http://subtlepatterns.com))
