- en: Chapter 7. Implementing PanelBar and TabStrip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：实现 PanelBar 和 TabStrip
- en: 'The PanelBar and TabStrip widgets are special Kendo UI controls for organization
    data, which make it possible for a web page to contain a large amount of content
    but display only one piece of that content at a time. These content sections are
    broken up into panels with the PanelBar widget, or into tabs with the TabStrip
    widget. In both cases, the effect is very similar and is a very useful way of
    keeping a web page from becoming too cluttered. This chapter will explain the
    basics of implementing the PanelBar and TabStrip controls with both HTML and ASP.NET
    MVC, and then illustrate the following features:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PanelBar 和 TabStrip 小部件是用于组织数据的特殊 Kendo UI 控件，使得网页能够包含大量内容，但一次只显示其中的一部分内容。这些内容部分被
    PanelBar 小部件分割成面板，或者被 TabStrip 小部件分割成标签页。在两种情况下，效果都非常相似，并且是保持网页不过于杂乱的一种非常有用的方式。本章将解释使用
    HTML 和 ASP.NET MVC 实现 PanelBar 和 TabStrip 控件的基础知识，然后说明以下功能：
- en: Adding images to PanelBar and TabStrip items
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图片添加到 PanelBar 和 TabStrip 项目中
- en: Adding URLs to PanelBar and TabStrip items
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 URL 添加到 PanelBar 和 TabStrip 项目中
- en: Loading AJAX content with PanelBar and TabStrip
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PanelBar 和 TabStrip 加载 AJAX 内容
- en: Controlling PanelBar and TabStrip animation effects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制 PanelBar 和 TabStrip 动画效果
- en: PanelBar basics
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PanelBar 基础知识
- en: 'The PanelBar widget is the Kendo UI way of implementing an interactive JavaScript
    "accordion" on a web page. This type of control is very useful for displaying
    lists of data that could potentially take up a large amount of screen space, but
    compressing it into a format that still makes sense to users. As an introduction,
    here is a code sample of a basic PanelBar created from a static unordered HTML
    list. This HTML list will be reformatted into an accordion control that displays
    a single area of the list at a time. As you will see, when you run the code sample,
    this allows a large amount of data to be visually compressed into a smaller space.
    It also allows the user to select which area of the list he or she is interested
    in viewing and hides the details of the other sections. This gives a powerful
    demonstration of some of the commonality between Kendo widget implementations:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PanelBar 小部件是 Kendo UI 在网页上实现交互式 JavaScript “折叠”的方式。这种类型的控件对于显示可能占用大量屏幕空间的数据列表非常有用，但将其压缩成对用户仍有意义的格式。作为介绍，这里是一个从静态无序列表
    HTML 创建的基本 PanelBar 的代码示例。此 HTML 列表将被重新格式化为一个折叠控件，一次显示列表的一个区域。正如您将看到的，当运行代码示例时，这允许大量数据在视觉上压缩到更小的空间。它还允许用户选择他们感兴趣查看的列表区域，并隐藏其他部分的详细信息。这展示了
    Kendo 小部件实现之间的一些共同点：
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that I have used the same data as in the last chapter for the Menu control.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在 Menu 控制中使用了与上一章相同的数据。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This source code creates a PanelBar with the same data from the Menu in the
    last chapter. The top-level `<li>` elements in the unordered list all appear as
    actual accordion headings in the output. In this example, just as in the menu
    example, they are **Music**, **Videos**, **Events**, and **News**. Notice that
    each of these top-level elements contains its own name and then can optionally
    contain a nested unordered list (`<ul>`) within itself which becomes the choices
    that appear when that top-level item is selected on the page. Moving down the
    chain, each of the `<li>` elements in the nested list can also contain its own
    `<ul>` list for a further nested menu of options, which is impressive as not all
    accordion implementations can handle this level of nested data. This creates a
    cascading effect where menu options can continue to expand as you move your mouse
    to different options. Also note that the final top-level `<li>` item, `News`,
    is marked with a `disabled` attribute which means that it will still display in
    the output but not be selectable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此源代码创建了一个 PanelBar，其数据与上一章中 Menu 的数据相同。无序列表中的顶级 `<li>` 元素在输出中均显示为实际的折叠标题。在这个例子中，正如菜单示例中一样，它们是
    **音乐**、**视频**、**活动** 和 **新闻**。请注意，这些顶级元素都包含自己的名称，并且可以可选地包含一个嵌套的无序列表 (`<ul>`)，当在页面上选择该顶级项目时，它将显示为选项。向下移动链，嵌套列表中的每个
    `<li>` 元素也可以包含自己的 `<ul>` 列表，以创建进一步嵌套的选项菜单，这在不是所有折叠实现都能处理这种级别嵌套数据的情况下是非常令人印象深刻的。这创建了一个级联效果，其中菜单选项可以随着您将鼠标移动到不同的选项而继续展开。此外，请注意，最终的顶级
    `<li>` 项目 `新闻` 被标记为 `disabled` 属性，这意味着它仍然会在输出中显示，但不能被选择。
- en: 'Here is the output from this code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是此代码的输出：
- en: '![PanelBar basics](img/4346OT_07_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![PanelBar 基础知识](img/4346OT_07_01.jpg)'
- en: The **Videos** panel was clicked before this screenshot was taken so that you
    can see some of the data opened, it normally starts with all of the panels closed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在此截图拍摄之前，点击了**视频**面板，以便您可以看到一些打开的数据，它通常以所有面板都关闭开始。
- en: 'Just as before with the Menu widget, the PanelBar widget does not have to run
    from static HTML, it can be fuelled by a `DataSource` object of either local or
    remote data. Here is the code adapted to use a datasource instead of static HTML:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的菜单小部件一样，PanelBar小部件不必从静态HTML运行，它可以由本地或远程数据的`DataSource`对象提供动力。以下是使用数据源而不是静态HTML的代码修改示例：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: Note that the `DataSource` object can be configured with all the options that
    you have seen in earlier chapters and could just as easily be configured with
    a transport property for remote data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`DataSource`对象可以配置为所有您在早期章节中看到的选项，也可以通过传输属性配置远程数据。
- en: 'In this code sample, we have also implemented a new feature, the `imageUrl`
    property for the **Videos** tab. By specifying the URL of an image in the project,
    the output will show this image next to the tab''s title on the screen, which
    you can see in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码示例中，我们还实现了一个新功能，即**视频**标签页的`imageUrl`属性。通过指定项目中的图像URL，输出将显示屏幕上标签页标题旁边的此图像，您可以在下面的屏幕截图中看到：
- en: '![PanelBar basics](img/4346OT_07_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![PanelBar基础](img/4346OT_07_02.jpg)'
- en: 'To adapt this to use the MVC extension methods, you would create an MVC View
    with this source code in the `cshtml` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要适应使用MVC扩展方法，您需要在`cshtml`文件中创建一个MVC视图，并包含以下源代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note, how in this code sample, we have declared the data statically. It could
    just as easily be gathered from a different source using logic within C# code,
    or even left as part of the JavaScript and retrieved from a remote source across
    HTTP. We can also see here how the image is supplied through ASP.NET MVC syntax
    instead of through the JavaScript in the last example.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 备注，在这个代码示例中，我们已经声明了数据是静态的。它也可以通过C#代码中的逻辑从不同的来源收集，或者甚至作为JavaScript的一部分留下，并通过HTTP从远程源检索。我们还可以看到，这里的图像是通过ASP.NET
    MVC语法而不是通过上一个示例中的JavaScript提供的。
- en: 'The output, as you can see from this screenshot, is identical to the other
    two code samples:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个屏幕截图中，您可以看到输出与另外两个代码示例完全相同：
- en: '![PanelBar basics](img/4346OT_07_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![PanelBar基础](img/4346OT_07_03.jpg)'
- en: This illustrates three unique ways to create a Kendo UI PanelBar widget, just
    like the Menu widget from before, and the differences between them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了创建Kendo UI PanelBar小部件的三种独特方法，就像之前的菜单小部件一样，以及它们之间的区别。
- en: Adding sprite images to PanelBar items
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将精灵图像添加到PanelBar项
- en: We have already seen some examples of how the PanelBar widget can contain an
    `imageUrl` property to display an image next to a section title. It can also use
    a more advanced image option by specifying a sprite image through the `spriteCssClass`
    property. In either case, the image or sprite will appear as an icon to the left
    of the menu item text.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些示例，说明了PanelBar小部件如何包含`imageUrl`属性来显示与部分标题并排的图像。它还可以通过指定`spriteCssClass`属性来使用更高级的图像选项。在两种情况下，图像或精灵都将作为菜单项文本左侧的图标出现。
- en: 'As we have already partially seen, here is an example of using the `imageUrl`
    property to show an icon for the `Videos` menu item:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前部分看到的，以下是一个使用`imageUrl`属性显示`视频`菜单项图标的示例：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'By adding this property, the output now displays the image in the menu:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加此属性，输出现在在菜单中显示图像：
- en: '![Adding sprite images to PanelBar items](img/4346OT_07_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![将精灵图像添加到PanelBar项](img/4346OT_07_04.jpg)'
- en: 'This is how the code sample looks when using MVC syntax:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用MVC语法时的代码示例：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice the `ImageUrl` extension method that adds the image to the output.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，添加到输出中的`ImageUrl`扩展方法。
- en: 'To use a sprite, you would first set the background image of the menu items
    that should display the icons and then indicate a CSS class using the `spriteCssClass`
    property that will specify the pixel offset for each particular icon. Each menu
    item that has a `spriteCssClass` property specified will automatically be decorated
    with the `k-sprite` CSS class so that this is wired up properly. Here is a potential
    example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用精灵，您首先需要设置应显示图标的菜单项的背景图像，然后使用`spriteCssClass`属性指定一个CSS类，该类将指定每个特定图标的像素偏移。每个指定了`spriteCssClass`属性的菜单项将自动装饰上`k-sprite`
    CSS类，以确保正确连接。以下是一个可能的示例：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The CSS section of this sample shows assigning the `background-image` property
    for all of the `k-sprite` class-decorated elements and also designating two sprite
    pixel `background-position` styles. The script section shows the `spriteCssClass`
    property in use which will assign that portion of the sprite's image as the icon
    for that menu item.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的CSS部分显示了为所有`k-sprite`类装饰的元素分配`background-image`属性，并指定了两个精灵像素`background-position`样式。脚本部分显示了正在使用的`spriteCssClass`属性，它将分配精灵图像的相应部分作为该菜单项的图标。
- en: Adding URLs to PanelBar items
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向PanelBar项添加URL
- en: 'So far all of the examples we have seen are PanelBar items that do not perform
    any actions when selected. All that we have to do is add the `url` property to
    the PanelBar item in order to make it navigate when clicked on. So, for any PanelBar
    item where we want to navigate the user to a different page, include a `url` property
    and it will do so:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的所有示例都是当选择时不会执行任何操作的PanelBar项。我们唯一需要做的就是向PanelBar项添加`url`属性，以便在点击时导航。因此，对于任何我们希望将用户导航到不同页面的PanelBar项，包括一个`url`属性，它就会这样做：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Loading AJAX content with PanelBar
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PanelBar加载AJAX内容
- en: 'Instead of embedding all of the content into one page, a PanelBar widget can
    be used to load content from other URLs dynamically using AJAX. This will reduce
    the overall size of the page since only one section of the PanelBar will be loaded
    at a time. It can also allow you to load content from other locations in your
    site that may change independently of the site that contains your PanelBar, which
    can reduce duplicate text or markup. To enable this functionality, use the `contentUrls`
    property of the PanelBar to indicate which sites contain the markup that should
    be placed inside the accordion:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与将所有内容嵌入一个页面不同，可以使用PanelBar小部件通过AJAX动态地从其他URL加载内容。这将减少页面的整体大小，因为一次只会加载PanelBar的一个部分。它还可以允许您从您的站点中的其他位置加载内容，这些位置可能独立于包含您的PanelBar的站点而变化，这可以减少重复文本或标记。要启用此功能，请使用PanelBar的`contentUrls`属性来指示哪些站点包含应放置在手风琴内部的标记：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Secondly, we have to create placeholders in the HTML markup to indicate where
    this AJAX content will appear once it has loaded. All this requires is a structure
    like the following code with `<li>` elements that contain empty `<div>` elements
    which will receive the AJAX content at the appropriate time:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们必须在HTML标记中创建占位符，以指示AJAX内容加载后会出现的位置。这只需要以下代码的结构，其中包含包含空`<div>`元素的`<li>`元素，这些元素将在适当的时间接收AJAX内容：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this combination of markup and JavaScript code, the PanelBar will load
    `content1` for the first tab, `content2` for the second tab, and so on. It is
    a good idea to keep the content on these pages very simple so that it can fit
    into the PanelBar areas without being distorted.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种标记和JavaScript代码的组合，PanelBar将加载第一个标签页的`content1`，第二个标签页的`content2`，依此类推。保持这些页面上的内容非常简单是个好主意，这样它就可以适应PanelBar区域而不会变形。
- en: '![Loading AJAX content with PanelBar](img/4346OT_07_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用PanelBar加载AJAX内容](img/4346OT_07_05.jpg)'
- en: Controlling PanelBar animation effects
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制PanelBar动画效果
- en: 'The animation features of the PanelBar can be controlled through the animation
    property when configuring the PanelBar object in JavaScript. The `animation` property
    can be set to `false` to completely disable all animation effects, or it can be
    configured like the following code sample for specific behaviors:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在JavaScript中配置PanelBar对象时使用动画属性来控制PanelBar的动画功能。可以将`animation`属性设置为`false`以完全禁用所有动画效果，或者可以像以下代码示例那样进行配置以实现特定行为：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only available animation effect for the collapse action is `fadeOut`. For
    the `expand` action, you can choose `expandVertical`, which is the normal action
    for expanding a PanelBar, and `fadeIn` which changes the opacity as it expands.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的唯一折叠动作动画效果是`fadeOut`。对于`expand`动作，可以选择`expandVertical`，这是展开PanelBar的正常动作，以及`fadeIn`，它在展开时改变不透明度。
- en: Introducing the TabStrip widget
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍TabStrip小部件
- en: The TabStrip widget is very similar to the PanelBar widget. In fact, they perform
    nearly the same function except that the PanelBar Widget organizes content into
    panels that are stacked vertically while the TabStrip widget organizes content
    into panels that are stacked horizontally. They are so similar, in fact, that
    we will use nearly the same code to demonstrate both of them. You have already
    seen the PanelBar widget in the preceding sections. Now we will take a look at
    the TabStrip widget and see how it functions within web pages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: TabStrip 小部件与 PanelBar 小部件非常相似。实际上，它们执行的功能几乎相同，只是 PanelBar 小部件将内容组织成垂直堆叠的面板，而
    TabStrip 小部件将内容组织成水平堆叠的面板。它们如此相似，以至于我们将使用几乎相同的代码来演示这两个小部件。你已经在前面几节中看到了 PanelBar
    小部件。现在我们将查看 TabStrip 小部件，并了解它在网页中的功能。
- en: TabStrip basics
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TabStrip 基础
- en: 'The TabStrip widget creates a series of tabs that are used to show only one
    specific section of content at a time. The content within a tab can be almost
    anything, ranging from simple text and markup all the way up to large `<div>`
    sections with enough content to fill an entire web page. You have surely seen
    web pages that have tabs across the top of the screen to organize different types
    of material onto a single web page. The Kendo TabStrip widget is one way to create
    this effect on your own pages. To start, copy the following code into a new HTML
    page and run it in a web browser:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TabStrip 小部件创建了一系列标签，用于一次只显示特定内容的一个部分。标签内的内容可以是几乎所有东西，从简单的文本和标记到足够填充整个网页的 `<div>`
    部分都可以。你肯定见过网页顶部有标签的网页，用于将不同类型的材料组织到单个网页上。Kendo TabStrip 小部件是在自己的页面上创建这种效果的一种方法。首先，将以下代码复制到一个新的
    HTML 页面中，并在网页浏览器中运行它：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For this widget, the markup is required to follow a specific pattern. The TabStrip
    itself must be declared on a `<div>` element that contains an unordered list (`<li>`)
    and a collection of `<div>` elements right after the unordered list. This is all
    evident in the preceding code sample. The unordered list contains all of the tab
    titles. The collection of `<div>` elements contains all of the content that appears
    within each of the tabs in the same order they appear in the markup. This is how
    this particular example appears when run inside of a web browser:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此小部件，标记必须遵循特定的模式。TabStrip 本身必须在包含无序列表 (`<li>`) 和紧随无序列表之后的一组 `<div>` 元素的 `<div>`
    元素上声明。这在上面的代码示例中都很明显。无序列表包含所有标签标题。`<div>` 元素集合包含在每个标签中出现的所有内容，其顺序与在标记中出现的顺序相同。这就是这个特定示例在网页浏览器中运行时的样子：
- en: '![TabStrip basics](img/4346OT_07_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![TabStrip 基础](img/4346OT_07_06.jpg)'
- en: Using TabStrip with a datasource
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据源与 TabStrip 结合
- en: 'Much like the PanelBar, the TabStrip can be configured to use a datasource
    instead of being created on top of existing HTML markup already on a web page.
    To adapt the code sample from the last section into this pattern, replace the
    body of the page with this code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PanelBar 类似，TabStrip 可以配置为使用数据源，而不是在网页上现有的 HTML 标记之上创建。要将上一节中的代码示例适应这种模式，用以下代码替换页面主体：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output from this code is exactly the same as before, except that the **News**
    tab is not disabled since there is not a property to define a disabled element
    using a datasource:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的输出与之前完全相同，只是由于没有属性可以定义使用数据源禁用的元素，因此**新闻**标签没有被禁用：
- en: '![Using TabStrip with a datasource](img/4346OT_07_07.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用数据源与 TabStrip 结合](img/4346OT_07_07.jpg)'
- en: Adding images to the TabStrip widget
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图片添加到 TabStrip 小部件
- en: 'All of the TabStrip tabs so far have only included text. The TabStrip widget,
    however (just like the PanelBar widget), can also contain an `imageUrl` property
    to display an image next to a tab''s title. It can also use a more advanced image
    option by specifying a sprite image through the `spriteCssClass` property. In
    either case, the image or sprite will appear as an icon to the left of the tab''s
    title text. Here is an example of using the `imageUrl` property to show an icon
    for the `Videos` menu item:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有的 TabStrip 标签都只包含文本。然而，TabStrip 小部件（就像 PanelBar 小部件一样），也可以包含一个 `imageUrl`
    属性来在标签的标题旁边显示图片。它还可以通过指定 `spriteCssClass` 属性来使用更高级的图片选项。在任一情况下，图片或精灵都将作为图标出现在标签标题文本的左侧。以下是一个使用
    `imageUrl` 属性来显示 `Videos` 菜单项图标的示例：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By adding this property, the output now displays the image in the menu:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加此属性，输出现在在菜单中显示了图片：
- en: '![Adding images to the TabStrip widget](img/4346OT_07_08.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![将图片添加到 TabStrip 小部件](img/4346OT_07_08.jpg)'
- en: 'This is how the same code sample looks when using MVC syntax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 MVC 语法时，相同的代码示例看起来是这样的：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should be able to notice quite a few similarities to the code we used earlier
    for the PanelBar widget. To use a sprite with the TabStrip, you can follow the
    same procedures as we discussed for the PanelBar.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够注意到与我们之前用于 PanelBar 小部件的代码有很多相似之处。要使用与 TabStrip 一起的精灵，你可以遵循我们之前讨论的 PanelBar
    的相同程序。
- en: Adding URLs to TabStrip tabs
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 TabStrip 标签页添加 URL
- en: To use a TabStrip tab as a hyperlink to another page, you can configure the
    `url` property for that tab and it will take on this role. By doing this, we are
    no longer using the tab to show any content on the page, it simply navigates directly
    to another web page when it is clicked.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 TabStrip 标签页用作指向另一页面的超链接，你可以配置该标签页的 `url` 属性，并承担此角色。通过这样做，我们不再使用标签页在页面上显示任何内容，它只是在点击时直接导航到另一个网页。
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After altering the code in this way, the `News` tab will become a hyperlink
    instead of an actual tab to display content.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式修改代码后，`新闻`标签页将变成一个超链接，而不是实际显示内容的标签页。
- en: Loading AJAX content with TabStrip
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 TabStrip 加载 AJAX 内容
- en: 'To load AJAX content into a tab, we need to indicate the URL for each tab''s
    content in the configuration. This follows the same pattern as the other options
    within the TabStrip, so this should look very familiar to you by now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 AJAX 内容加载到标签页中，我们需要在配置中指定每个标签页内容的 URL。这与 TabStrip 中的其他选项遵循相同的模式，因此现在你应该非常熟悉这种格式：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we run the web page in a browser, it appears like this with the remote
    content loaded dynamically as we click on the tab''s titles:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中运行网页时，它将呈现如下，随着我们点击标签页标题，远程内容会动态加载：
- en: '![Loading AJAX content with TabStrip](img/4346OT_07_10.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用 TabStrip 加载 AJAX 内容](img/4346OT_07_10.jpg)'
- en: Controlling the TabSrip widget's animation effects
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制TabStrip小部件的动画效果
- en: 'The animation effects for the TabStrip widget are exactly the same as for the
    PanelBar widget. They are controlled through the `animation` property when configuring
    the TabStrip object in JavaScript. The `animation` property can be set to `false`
    to completely disable all animation effects, or it can be configured like the
    following code sample for specific behaviors:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: TabStrip 小部件的动画效果与 PanelBar 小部件完全相同。它们通过在 JavaScript 中配置 TabStrip 对象时通过 `animation`
    属性来控制。可以将 `animation` 属性设置为 `false` 以完全禁用所有动画效果，或者可以像以下代码示例那样配置以实现特定行为：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The only available animation effect for the collapse action is `fadeOut`. For
    the `expand` action, you can choose `expand:vertical`, which is the normal action
    for expanding a TabStrip, and `fadeIn` which changes the opacity as it expands.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的折叠动作的唯一动画效果是 `fadeOut`。对于 `expand` 动作，你可以选择 `expand:vertical`，这是展开 TabStrip
    的正常动作，以及 `fadeIn`，它在展开时改变透明度。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The PanelBar widget is a highly configurable JavaScript accordion widget that
    gives you considerable "bang for your buck". For a categorized list of data elements
    that you need to compress into a smaller amount of screen space, the PanelBar
    widget is the perfect choice for your web page. The TabStrip widget is an easy
    JavaScript tab framework that allows you to organize your page content with tabs
    and even load remote content dynamically onto your page when a tab is clicked.
    Both of these great widgets should add useful features to your website.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: PanelBar 小部件是一个高度可配置的 JavaScript 折叠小部件，为你提供了相当大的“物有所值”。对于需要压缩到更小屏幕空间中的分类数据元素列表，PanelBar
    小部件是网页的完美选择。TabStrip 小部件是一个简单的 JavaScript 标签框架，允许你使用标签组织页面内容，甚至在点击标签时动态将远程内容加载到页面上。这两个出色的组件都应该为你的网站添加有用的功能。
- en: In the next chapter, you will learn about the Kendo UI Slider widgets and how
    to use them to collect input from users in a graphically interesting way. The
    slider widgets present an HTML input as a visual bar where the user can drag a
    handle to the desired option instead of typing a number into a field in a form.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解 Kendo UI 滑块小部件及其如何以图形化的方式收集用户输入。滑块小部件将 HTML 输入显示为可视化的条形，用户可以拖动滑块到所需选项，而不是在表单字段中输入数字。
