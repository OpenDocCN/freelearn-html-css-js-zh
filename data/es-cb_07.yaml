- en: Creating Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建类
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Creating a new class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新类
- en: Assigning properties with constructor arguments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构造函数参数分配属性
- en: Defining methods on a class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类上定义方法
- en: Checking the instance type with instanceOf
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 instanceOf 检查实例类型
- en: Using getters to create read-only properties
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用获取器创建只读属性
- en: Using setters to encapsulate values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设置器封装值
- en: Using static methods to work with all instances
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态方法处理所有实例
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Creating and extending similar objects has always been possible with JavaScript's
    prototypical inheritance model. By using the `new` operator and adding prototype
    properties, we can create structures that behave like classes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 的原型继承模型，创建和扩展类似的对象一直是可能的。通过使用 `new` 操作符和添加原型属性，我们可以创建类似类的结构。
- en: ECMAScript 2015 introduced class syntax as a friendlier way to work with prototypical
    inheritance. It has been argued that this *syntactic sugar* is not worth the overhead
    of having two ways to implement OOP structures. However, I would argue that class
    provides a more concise way of expressing the same idea, and is a net benefit.
    As we'll see in this chapter and the next, the class syntax makes it easier to
    express sophisticated OOP relationships.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 2015 引入了类语法，作为一种更友好的方式来处理原型继承。有人认为这种 *语法糖* 不值得拥有两种实现 OOP 结构的方法所带来的开销。然而，我认为类提供了一种更简洁地表达相同想法的方法，并且是一个净收益。正如我们将在本章和下一章中看到的，类语法使得表达复杂的
    OOP 关系变得更加容易。
- en: Creating a new class
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新类
- en: The most fundamental task class can be used for is, of course, creating a new
    class. This recipe shows the simple syntax for defining and instantiating a new
    class.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的任务类可以用作创建一个新的类。本食谱展示了定义和实例化新类的简单语法。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `07-01-create-a-new-class`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `07-01-create-a-new-class` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html`，它从 `main.js` 加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file that defines a new class named `Rocket` and a `main`
    function that creations two instances and logs them out:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新类和一个 `main` 函数，该函数创建两个实例并将它们输出：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/bc310b0e-4ae3-4e57-b9ea-ecc7f407d6cb.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc310b0e-4ae3-4e57-b9ea-ecc7f407d6cb.png)'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `classRocket {}` syntax is the equivalent to creating a function named `Rocket`
    (notice the `constructor` value of the logged object). This means that, in JavaScript,
    instances of `Rocket` can be created with the `new` operator. This creates an
    object based on the prototype.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`classRocket {}` 语法相当于创建一个名为 `Rocket` 的函数（注意已记录对象的 `constructor` 值）。这意味着在 JavaScript
    中，可以使用 `new` 操作符创建 `Rocket` 的实例。这基于原型创建了一个对象。'
- en: We'll see how to make some more interesting objects in future recipes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在未来的食谱中看到如何创建一些更有趣的对象。
- en: Assigning properties with constructor arguments
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用构造函数参数分配属性
- en: Now that we have a new class, it's time to start differentiating instances.
    In this recipe, we'll see how to assign properties when instances are created,
    via constructor arguments.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个新的类，是时候开始区分实例了。在本食谱中，我们将看到如何在创建实例时通过构造函数参数分配属性。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `07-02-assigning-constructor-props`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `07-02-assigning-constructor-props` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html`，它从 `main.js` 加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file that creates a new class named `Rocket`. Add a `constructor`
    method that takes a single argument, `name`, and assigns it to a property of the
    same name in the body of the method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件，创建一个名为`Rocket`的新类。添加一个`constructor`方法，该方法接受一个单一参数`name`，并将其分配给方法体内的同名属性：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `main` function that creates two instances and logs them out with
    their property:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，该函数创建两个实例并使用它们的属性记录它们：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/a4b23e7e-421c-4a1e-83db-2333fe0c711c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4b23e7e-421c-4a1e-83db-2333fe0c711c.png)'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we saw in the previous recipe, the class syntax creates an empty `constructor`
    function if none is defined. A `constructor` is a method that is called immediately
    after a class is instantiated. Here, we create a new `Rocket` instance as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的配方中看到的，类语法如果未定义，将创建一个空的`constructor`函数。`constructor`是一个在类实例化后立即调用的方法。在这里，我们按照以下方式创建一个新的`Rocket`实例：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This means that the name property is actually assigned before that rocket instance
    is returned from the `new` expression and assigned to `saturnV`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着名称属性实际上是在从`new`表达式返回并分配给`saturnV`的`Rocket`实例之前设置的。
- en: In this recipe, we define the `constructor`. The context of the `constructor`
    function, the value of `this`, is the instance of the new object. Therefore, when
    we assign the `name` property of `this`**,** it is set on that new instance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们定义了`constructor`。`constructor`函数的上下文，即`this`的值，是新对象的实例。因此，当我们为`this`的`name`属性赋值时，它是在那个新实例上设置的。
- en: Defining methods on a class
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在类上定义方法
- en: Classes that hold values are not particularly interesting. We also want them
    to be able to have some behaviors that act as interfaces to the outside world.
    In this recipe, we'll see how to add methods to a class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 保存值的类并不特别有趣。我们还想让它们能够有一些行为，这些行为作为对外部世界的接口。在这个配方中，我们将看到如何向类添加方法。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `07-03-defining-methods`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`07-03-defining-methods`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，该文件从`main.js`加载并运行一个`main`函数。
- en: 'Create a `main.js` with a class named `Rocket`, which assigns a `name` property
    upon construction:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含名为`Rocket`的类的`main.js`，在构造函数中分配一个`name`属性：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a method named `takeoff` that accepts an option countdown argument. The
    body of the method should log a message before and after a timeout:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`takeoff`的方法，该方法接受一个选项倒计时参数。方法体应该在超时前后记录一条消息：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a `main` function that creates two instances and then calls their `takeOff`
    methods:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`main`函数，该函数创建两个实例然后调用它们的`takeOff`方法：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see the following output:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/33a85f9f-798b-4a8b-8eb9-bf978e115831.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33a85f9f-798b-4a8b-8eb9-bf978e115831.png)'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Adding methods to the body of a class definition is the same as attaching properties
    to the prototype of a function, with functions as their values. This means that
    those properties are added as properties to the instance of the new object. When
    these methods are called, the context (the value of `this`) is the current instance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在类定义体中添加方法与将属性附加到函数的原型相同，其值是函数。这意味着这些属性作为属性添加到新对象的实例中。当调用这些方法时，上下文（`this`的值）是当前实例。
- en: Checking instance type with instanceOf
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用instanceOf检查实例类型
- en: There are many situations, such as argument validation, where we'll want to
    check the class of an object. Because JavaScript is not statically typed, we can't
    guarantee that a function receives an argument of the correct type before the
    program starts, and we need to check at runtime.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，例如参数验证，我们希望检查对象的类。因为JavaScript不是静态类型，我们无法在程序开始之前保证函数接收正确的类型参数，我们需要在运行时进行检查。
- en: In this recipe, we'll see how to use the `instanceOf` operator to check an object's
    prototype at runtime.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解如何使用`instanceOf`运算符在运行时检查一个对象的原型。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作空间，允许您在浏览器中创建和运行ES模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的开发空间。
- en: Create a new folder named `07-04-checking-with-instanceof`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`07-04-checking-with-instanceof`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，该文件加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` with two identical classes, `Rocket` and `InactiveRocket`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含两个相同类`Rocket`和`InactiveRocket`的`main.js`：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a function named `printRocketType` that uses `instanceOf` to distinguish
    between rocket classes:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`printRocketType`的函数，该函数使用`instanceOf`来区分火箭类：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `main` function that creates rockets of either class and then calls
    `printRocketType` on both of them:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，该函数创建任一类的火箭实例，然后对它们都调用`printRocketType`：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出显示：
- en: '![](img/b6e16b1a-f376-43d2-ba6a-ee3a292ef04a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b6e16b1a-f376-43d2-ba6a-ee3a292ef04a.png)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `instanceOf` operator compares a prototype of the left-hand value with the
    right-hand value. If the two match, the expression is evaluated as true, otherwise
    it evaluates as false. Thus, we can use it in a conditional expression.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`instanceOf`运算符比较左侧值的原型与右侧值。如果两者匹配，表达式将被评估为真，否则评估为假。因此，我们可以在条件表达式中使用它。'
- en: Using getters to create read-only properties
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用getter创建只读属性
- en: We don't always want a property to be writable. In previous recipes, we saw
    how to create a read-only property on an object. In this recipe, we'll see how
    to use the `get` keyword to do this in the context of a class body.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是希望属性可写。在之前的食谱中，我们看到了如何在对象上创建只读属性。在本食谱中，我们将了解如何在类体中使用`get`关键字来完成此操作。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作空间，允许您在浏览器中创建和运行ES模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的开发空间。
- en: Create a new folder named `07-05-getters-read-only`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`07-05-getters-read-only`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个加载并运行来自`main.js`的`main`函数的`index.html`。
- en: 'Create a `main.js` file with the `Rocket` class that defines a read only property:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`Rocket`类并定义只读属性的`main.js`文件：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a `main` function that creates an instance of the `Rocket` class. Read
    from the writable and read-only properties, then try to write to them:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`main`的函数，该函数创建`Rocket`类的实例。从可写和只读属性中读取，然后尝试写入它们：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出显示：
- en: '![](img/ab45130e-2a43-4732-ae74-582d1e6767bb.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab45130e-2a43-4732-ae74-582d1e6767bb.png)'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using the `get` keyword creates a read-only property that has a function for
    a value. We return a string from that function, so that,when the property is read,
    that value is returned. However, because it is read-only, a run-time error is
    thrown when we try to write to it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`get`关键字创建一个具有函数值的只读属性。我们从该函数返回一个字符串，因此，当读取属性时，返回该值。然而，因为它只读，所以当我们尝试写入它时，会抛出一个运行时错误。
- en: Using setters to encapsulate values
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用setter来封装值
- en: In the previous recipe, we saw how to prevent values from being written**.**
    Sometimes however, we don't want to prevent a property from being written to.
    Rather, we want to control how it is written to. In this recipe, we'll see how
    to use `set` to control the writing of a property.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱中，我们看到了如何防止值被写入**。**然而，有时我们不想阻止一个属性被写入。相反，我们希望控制其写入方式。在本食谱中，我们将了解如何使用`set`来控制属性的写入。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `07-06-setters-encapsulate`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`07-06-setters-encapsulate`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，该文件加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` file with a `Rocket` class that writes a ­`_secretName`
    property upon construction:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`Rocket`类并在构造时写入`_secretName`属性的`main.js`文件：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a getter and setter for a `name` property and only update it if the `newValue`
    is a string:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`name`属性添加一个获取器和设置器，并且只有当`newValue`是一个字符串时才更新它：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a `main` function that tries to set the `name` property to different
    values:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个尝试将`name`属性设置为不同值的`main`函数：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/8d8e478c-b257-494d-aa9d-a90d328834d0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d8e478c-b257-494d-aa9d-a90d328834d0.png)'
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like the `get` keyword, the `set` keyword calls a function property when a property
    is written to. Instead of setting the value directly, we are able to perform a
    type check. If the `newValue` is a string, it is written as normal. Otherwise,
    we log an error, and do not set the value of the secret property.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与`get`关键字一样，`set`关键字在写入属性时调用一个函数属性。我们不是直接设置值，而是能够执行类型检查。如果`newValue`是一个字符串，它将按正常方式写入。否则，我们记录一个错误，并且不设置秘密属性的值。
- en: Obviously, `_secretName` can be written directly. This has to be solved through
    documentation. Users of a library should only be using the public interface. They
    deviate at their own risk!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`_secretName`可以直接编写。这必须通过文档来解决。库的用户应该只使用公共接口。他们自行承担风险！
- en: Using static methods to work with all instances
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态方法处理所有实例
- en: It can be a good idea to organize methods on a class, rather than on an instance
    of a class. One example is the **Manager** pattern. This pattern is useful when
    an object is expensive to create, or will be reused a lot.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法组织在类上，而不是类的实例上可能是一个好主意。一个例子是**管理器**模式。当对象创建成本高昂或将被大量重用时，此模式非常有用。
- en: In this recipe, we'll see how to use the `static` keyword to create a map for
    reusing instances of the `Rocket` class.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将看到如何使用`static`关键字为`Rocket`类的实例创建一个映射。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参阅前两章。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的工作区。
- en: Create a new folder named `07-07-static-methods-on-all-instances`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`07-07-static-methods-on-all-instances`的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个`index.html`，该文件加载并运行来自`main.js`的`main`函数。
- en: 'Create a `main.js` file with an empty object `rocketMap` and a class `Rocket`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含空对象`rocketMap`和类`Rocket`的`main.js`文件：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a static method named `find` that looks up rockets by string on the
    `Rocket` class:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`find`的静态方法，该方法通过字符串在`Rocket`类中查找火箭：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a construction that assigns a name property, and assigns the instance to
    the `rocketMap`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个分配名称属性的构造函数，并将实例分配给`rocketMap`：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `main` function that compares created instances of `Rocket` with results
    of the static `find` method:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个比较`Rocket`类创建的实例与静态`find`方法结果的`main`函数：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output displayed:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出显示：
- en: '![](img/7d33985f-1875-4932-8915-a60acc4726ff.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7d33985f-1875-4932-8915-a60acc4726ff.png)'
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The static keyword means that the function will be a property of the `Rocket` class,
    rather than an instance. This is the same as setting a function property directly
    on a function, rather than on its prototype. Thus, we call the function as a property
    of the class, not an instance.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 静态关键字意味着该函数将成为`Rocket`类的属性，而不是一个实例。这与直接在函数上设置函数属性，而不是在其原型上设置相同。因此，我们将该函数称为类的属性，而不是实例的属性。
