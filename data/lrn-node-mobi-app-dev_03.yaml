- en: Chapter 3. Creating an API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建API
- en: No matter how sophisticated your backend is, it will most likely be of no use
    unless you can make its services available to your clients in some way. The most
    common way to do so is through an **Application Programming Interface** (**API**)—a
    set of well-defined access methods for your backend. Through this, you allow clients
    to request data, perform calculations, and request other services offered by it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的后端有多复杂，除非您以某种方式使其服务对客户可用，否则它很可能没有用处。最常见的方法是通过**应用程序编程接口**（**API**）——一组为您的后端定义的明确定义的访问方法。通过这种方式，您允许客户端请求数据，执行计算，并请求其提供的其他服务。
- en: In this chapter, we will look at how to construct such an API according to the
    widely used **Representational State Transfer** (**REST**) architecture. We will
    cover the theoretical basics of REST and then see how to implement its condensed
    version using Node.js according to our needs. We will round up by accessing the
    API via a REST client in order to see how it works in action.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何根据广泛使用的**表述状态转移**（**REST**）架构构建这样的API。我们将介绍REST的理论基础，然后看看如何根据我们的需求使用Node.js实现其简化版本。最后，我们将通过REST客户端访问API，以了解其实际运行方式。
- en: Learning outcomes of the RESTful API
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful API的学习成果
- en: After reading this chapter, you will understand what a RESTful API is and how
    it is structured. You will also have gained a thorough understanding of how to
    define data access points in Node.js and work with these through a REST client.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您将了解什么是RESTful API以及它的结构。您还将彻底了解如何在Node.js中定义数据访问点，并通过REST客户端使用这些数据。
- en: RESTing easy
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻松REST
- en: One of the greatest challenges of the Internet age has always been to make networked
    services talk to each other in a uniform and efficient manner. It is the reason
    behind why we have developed a plethora of communications protocols that we depend
    on today, such as the all-important TCP/IP stack. Protocols like these make formal
    communication between applications a straightforward process, at least as far
    as the actual bytes on the wire are concerned.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网时代最大的挑战之一始终是使网络化服务以统一和高效的方式相互通信。这就是为什么我们今天依赖于诸如至关重要的TCP/IP协议栈等通信协议的原因。这些协议使应用程序之间的正式通信过程变得简单，至少就实际的数据字节而言是这样。
- en: However, there is no single de facto specification for how applications should
    communicate data abstractions to each other. Raw TCP/IP only understands the exchange
    of data packets; it knows nothing about abstractions such as customers, orders
    or products. To raise the abstraction level and build an interface that allows
    intuitive communication with our backend, we will have to rely on a custom implementation
    of one or more architectural patterns in order to get what we want. Today, there
    are several such patterns in wide usage. You may already be familiar with terms
    such as SOAP, WSDL, and perhaps even our target here—REST.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，没有单一的事实规范规定应用程序应如何相互通信数据抽象。原始的TCP/IP只理解数据包的交换；它对于顾客、订单或产品等抽象一无所知。为了提高抽象级别并构建一个允许与我们的后端直观通信的接口，我们将不得不依赖于一个或多个架构模式的自定义实现，以便获得我们想要的结果。今天，有几种广泛使用的这种模式。您可能已经熟悉诸如SOAP、WSDL，甚至我们在这里的目标——REST等术语。
- en: It's all hypermedia
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这都是超媒体
- en: REST is an architectural pattern where two or more applications exchange resources
    among themselves through a set of operations on these resources. The resources
    are sets of data types that all the involved applications, such as products, customers,
    and so on, know about. For example, a client application can either ask a server
    application to give it a list of all the resources of a given kind that it stores,
    or ask the server to register a new instance of a given resource in its database.
    All such operations are communicated only by using the standard HTTP protocol,
    which makes the process both intuitive and easy to implement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: REST是一种架构模式，其中两个或多个应用程序通过一组对这些资源的操作来交换资源。这些资源是所有涉及的应用程序（例如产品、客户等）都知道的数据类型集。例如，客户端应用程序可以要求服务器应用程序提供其存储的特定类型的所有资源的列表，或者要求服务器在其数据库中注册给定资源的新实例。所有这些操作都仅通过使用标准的HTTP协议进行通信，这使得该过程既直观又易于实现。
- en: At the heart of the RESTful communication are the common HTTP verbs—**GET**,
    **POST**, **PUT**, and **DELETE**. In terms of the popular **CRUD** (**Create/Read/Update/Delete**)
    acronym, **C** corresponds to **POST**, **R** to **GET**, **U** to **PUT**, and
    finally **D** to, well, **DELETE**. If you are familiar with HTTP, you will already
    know that these verbs represent different request types sent between two HTTP-speaking
    applications. For example, when you type `www.google.com` in the URL field of
    your browser and press the *Enter* key, the browser will issue a `GET` request
    to the server the URL is bound to, asking it to return whatever data is located
    at server. Typically, this data is in a standard format such as **HTML**, **XML**,
    or **JSON**. In the same way, when you fill out a form on a webpage and press
    the **submit** button (or its equivalent), a request is sent to the server through
    a `POST` request, which carries the request data that you entered for the server
    to process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在RESTful通信的核心是常见的HTTP动词——**GET**、**POST**、**PUT**和**DELETE**。就流行的**CRUD**（**创建/读取/更新/删除**）首字母缩写而言，**C**对应于**POST**，**R**对应于**GET**，**U**对应于**PUT**，最后**D**对应于，嗯，**DELETE**。如果您熟悉HTTP，您将已经知道这些动词代表两个HTTP应用程序之间发送的不同请求类型。例如，当您在浏览器的URL字段中键入`www.google.com`并按下*Enter*键时，浏览器将向URL绑定的服务器发出一个`GET`请求，要求其返回服务器上的任何数据。通常，这些数据以标准格式（如**HTML**、**XML**或**JSON**）呈现。同样，当您在网页上填写表单并按下**提交**按钮（或其等效物）时，通过`POST`请求将请求数据发送到服务器，服务器将处理您输入的请求数据。
- en: 'As mentioned before, REST functions by using these verbs to communicate operations
    on various resources that the involved parties know about. For example, in our
    case, we may want to tell a server the following by using the RESTful requests:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，REST通过使用这些动词来通信涉及方知道的各种资源的操作。例如，在我们的情况下，我们可能想通过使用RESTful请求来告诉服务器以下内容：
- en: Fetch all the products that are available on the server (the verb is `GET`)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取服务器上所有可用的产品（动词是`GET`）
- en: Fetch the product with an ID of `abcd1234` (the verb is `GET`)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取具有ID`abcd1234`的产品（动词是`GET`）
- en: Place a new order with a product named `abcd1234` for a customer with an ID
    of `xyz456` (the verb is `POST`)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为具有ID`xyz456`的客户下一个名为`abcd1234`的产品（动词是`POST`）的新订单
- en: Update the price of the product with an ID of `abcd1234` to 500 million dollars
    (the verb is `PUT`)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将具有ID`abcd1234`的产品的价格更新为5亿美元（动词是`PUT`）
- en: Delete the product with an ID of `abcd1234` since nobody is buying it anymore
    (the verb is `DELETE`)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除具有ID`abcd1234`的产品，因为没有人再购买它（动词是`DELETE`）
- en: 'By convention, REST uses the following common base URL structure for requests
    operating on a given resource (elements in the brackets are optional):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，REST使用以下常见的基本URL结构来操作给定资源（方括号中的元素是可选的）：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For our product example, a RESTful base URL for this resource is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的产品示例，此资源的RESTful基本URL如下：
- en: '`http://myserver.com/myapi/v1/products`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://myserver.com/myapi/v1/products`'
- en: In the following section, we will demonstrate how such actions are carried out
    in practice using the HTTP verbs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将演示如何使用HTTP动词实际执行这些操作。
- en: GET
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GET
- en: In the context of REST, a GET request always indicates a retrieval operation.
    Thus, we say that the GET requests are the only non-mutating ones among the common
    verbs, since they do not change the state of the associated resource on the server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST的上下文中，GET请求总是表示检索操作。因此，我们说GET请求是常见动词中唯一的非变异请求，因为它们不会改变服务器上关联资源的状态。
- en: 'In REST, there are two standard GET operations that any API should ideally
    implement:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST中，任何API理想情况下都应该实现两种标准的GET操作：
- en: GET all
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有
- en: 'The following are the key features of the GET all operation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是GET所有操作的关键特征：
- en: It sends a blank GET request to the base URL for the resource
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向资源的基本URL发送一个空的GET请求
- en: It returns all the resources of a given type
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回给定类型的所有资源
- en: An example of resources that are given by the GET all operation is `http://myserver.com/myapi/v1/products`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GET all操作提供的资源示例是`http://myserver.com/myapi/v1/products`。
- en: GET by ID
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按ID获取
- en: 'The following are the key features of the GET by ID operation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是按ID操作的关键特征：
- en: It returns the resource with the specific ID
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它返回具有特定ID的资源
- en: An example of this type of operation is `http://myserver.com/myapi/v1/products/abcd1234`
    (using the path parameters) or `http://myserver.com/myapi/v1/products?id=abcd1234`
    (using the query parameters)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种操作的示例是`http://myserver.com/myapi/v1/products/abcd1234`（使用路径参数）或`http://myserver.com/myapi/v1/products?id=abcd1234`（使用查询参数）
- en: Whether you should use path parameters or query parameters is entirely up to
    you, and it is not mandated by the REST conventions. Here, and for the remainder
    of the book, we will use query parameters, since this is the normal HTTP way of
    doing things and a bit easier to understand and implement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用路径参数还是查询参数完全取决于您，并且不是REST约定所要求的。在这里以及本书的其余部分，我们将使用查询参数，因为这是正常的HTTP操作方式，而且更容易理解和实现。
- en: POST
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POST
- en: POST requests are used in order to create new instances of a given resource.
    Normally, a conventional REST server will provide documentation about the fields
    of the resource that you need to specify for the creation to succeed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: POST请求用于创建给定资源的新实例。通常，传统的REST服务器将提供关于需要指定以使创建成功的资源字段的文档。
- en: PUT
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PUT
- en: PUT is used in order to create or update a resource. It works almost identically
    to POST, with the exception that if you supply a resource ID with your request,
    the server will first find that specific resource and then replace each field
    of that resource with the equivalent field in your request.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: PUT用于创建或更新资源。它的工作方式几乎与POST相同，唯一的区别是，如果您在请求中提供资源ID，服务器将首先查找该特定资源，然后用请求中相应字段替换该资源的每个字段。
- en: 'For example, consider a situation where your server has a resource of the product
    type, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑这样一种情况，您的服务器有一个产品类型的资源，如下所示：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s suppose that you submit a `PUT` request with the following form data:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您提交了一个带有以下表单数据的`PUT`请求：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The same resource will have the following state on the server after the transaction
    concludes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在交易结束后，相同的资源将在服务器上具有以下状态：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: DELETE
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DELETE
- en: DELETE is used in order to, well, delete a resource on the server. All you need
    to do is supply the resource ID in your request. For example, sending a `DELETE`
    request to `http://myserver.com/myapi/v1/products/abcd1234` will delete the product
    with an ID of `abcd1234` on the server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DELETE用于删除服务器上的资源。您只需在请求中提供资源ID即可。例如，向`http://myserver.com/myapi/v1/products/abcd1234`发送`DELETE`请求将删除服务器上ID为`abcd1234`的产品。
- en: Building a RESTful API with Node.js
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js构建RESTful API
- en: Now that we have covered the basics of REST, let's put it into practice and
    build an API for `OrderBase`, which was constructed in the previous chapter. If
    you have not done so already, please take a moment to review the code that we
    wrote there in order to make sure that you understand what happens between our
    API and the database in this example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了REST的基础知识，让我们将其付诸实践，并为上一章中构建的`OrderBase`构建一个API。如果您还没有这样做，请花一点时间回顾我们在那里编写的代码，以确保您了解我们的API与此示例中的数据库之间发生了什么。
- en: Setting up the RESTful API
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置RESTful API
- en: 'Start with creating a workspace for our server. On your drive, create a folder
    named `order_api`, step into this folder, and create and execute the file named
    `api.js`. Finally, open a terminal and execute the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个工作区为我们的服务器。在您的驱动器上，创建一个名为`order_api`的文件夹，进入此文件夹，并创建并执行名为`api.js`的文件。最后，打开终端并执行以下操作：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we saw in the previous chapter, this will give you a few questions to answer
    in order to bootstrap the Node.js server. When the questions ask you for the entry
    point, be sure to specify `api.js`, since this is the main file that your server
    configuration will be read from.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，这将给您一些问题需要回答，以便引导Node.js服务器。当问题询问您入口点时，请务必指定`api.js`，因为这是您的服务器配置将从中读取的主文件。
- en: 'Next, you will need to import the database interface module that we created
    in [Chapter 2](ch02.html "Chapter 2. Configuring Persistence with MongoDB"), *Configuring
    Persistence with MongoDB*. To do so, first install the `mongodb` driver:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要导入我们在[第2章](ch02.html "第2章。使用MongoDB配置持久性")中创建的数据库接口模块，*使用MongoDB配置持久性*。为此，首先安装`mongodb`驱动程序：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, you can import the module itself in two ways:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以以两种方式导入模块本身：
- en: Copy and paste the `database.js` file from the previous chapter into the current
    directory and add `var database = require('./database');` to the top of your `api.js`
    file
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`database.js`文件从上一章复制并粘贴到当前目录，并将`var database = require('./database');`添加到您的`api.js`文件的顶部。
- en: Add `var database = require([pathToDatabase])` to the top of your `api.js` file,
    where `[pathToDatabase]` is the full system path to your `database.js` file
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的`api.js`文件顶部添加`var database = require([pathToDatabase])`，其中`[pathToDatabase]`是您的`database.js`文件的完整系统路径
- en: Once this is done, open the `api.js` file. Let's start adding some code for
    our API.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开`api.js`文件。让我们开始为我们的API添加一些代码。
- en: The HTTP module
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP模块
- en: The first thing we will need is a way to actually open up the Node.js instance
    to the network and enable it to communicate over the HTTP protocol, since this
    will be the core driver of our API's functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要一种方法来实际打开Node.js实例到网络，并使其能够通过HTTP协议进行通信，因为这将是我们API功能的核心驱动程序。
- en: 'In order to achieve this, we will include the standard HTTP module in our server.
    Add the following line to the top of your `api.js` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将在服务器中包含标准的HTTP模块。将以下行添加到您的`api.js`文件的顶部：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will cause Node.js to load the HTTP module, a powerful component that can
    be used to listen for and process HTTP requests as well as send responses to the
    clients.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致Node.js加载HTTP模块，这是一个强大的组件，可用于监听和处理HTTP请求，以及向客户端发送响应。
- en: 'Now, with the module in place, let''s hotwire Node.js to start listening and
    respond to simple HTTP requests. Add the following to your file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了模块，让我们让Node.js开始监听并响应简单的HTTP请求。将以下内容添加到您的文件中：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's it! If this is your first time using the HTTP module, you may be surprised
    at how simple this setup is. It is not everyday that you write a fully functioning
    HTTP server in seven lines of code! Node.js is just that good.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！如果这是您第一次使用HTTP模块，您可能会对这个设置有多简单感到惊讶。不是每天你都会用七行代码编写一个完全功能的HTTP服务器！Node.js就是这么好。
- en: 'Let''s give the server a run to make sure that it is working alright. Open
    your favorite browser and navigate to *http://localhost:8080*. You will see the
    following line of text:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行服务器，确保它工作正常。打开您喜欢的浏览器，导航到*http://localhost:8080*。您将看到以下文本行：
- en: '**I am a fledgling API, and I am alright**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**我是一个新生的API，我很好**'
- en: All is well. We are now ready to start making our API do something more interesting
    than just show the same text over and over. However, let's take a closer look
    first at how the HTTP module actually works and services requests.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都很好。我们现在准备开始让我们的API做一些比一遍又一遍显示相同文本更有趣的事情。但是，首先让我们更仔细地看看HTTP模块实际上是如何工作和服务请求的。
- en: Dissecting the HTTP server
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解剖HTTP服务器
- en: 'Looking at our server code, we are really just doing the following two things:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的服务器代码，我们实际上只做以下两件事：
- en: Configuring the event loop for our server is what it should do whenever an HTTP
    request comes in. This is done by invoking the `http.createServer()` method, which
    takes a callback function as a parameter, which will be executed for each incoming
    request.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的服务器配置事件循环是每当有HTTP请求进来时应该做的事情。这是通过调用`http.createServer()`方法来完成的，该方法将一个回调函数作为参数，该函数将对每个传入的请求执行。
- en: Bind the server to a given network port in the host machine and start listening
    for incoming connections on that port.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器绑定到主机机器上的给定网络端口，并开始监听该端口上的传入连接。
- en: 'The interesting bit of the first item is the callback function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项中有趣的部分是回调函数：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method takes two arguments, `req` and `res`. As you may have guessed, they
    refer to the HTTP *request* and the associated *response*. The `req` parameter
    will contain all the data associated with the incoming HTTP request, such as origin,
    headers, payload, cookies, and more. The `res` parameter is the HTTP response,
    which will be emitted back to the caller when the method is returned.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受两个参数，`req`和`res`。您可能已经猜到，它们指的是HTTP *请求*和相关的*响应*。`req`参数将包含与传入的HTTP请求相关的所有数据，例如来源、标头、有效负载、cookie等。`res`参数是HTTP响应，当方法返回时将被发送回调用者。
- en: You may wonder why the response is passed as a parameter to a function that
    obviously handles incoming requests. This is a matter of design. The `res` parameter
    is actually created outside the function and passed to it so that you can do what
    modifications you see fit to it before the HTTP module takes control again, finalizes
    it, and sends it back to the sender.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么响应作为参数传递给显然处理传入请求的函数。这是一个设计问题。`res`参数实际上是在函数外部创建的，并传递给它，以便您可以在HTTP模块再次控制之前对其进行任何修改，最终确定它，并将其发送回发送者。
- en: 'In our function, we do only the following two things:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的函数中，我们只做以下两件事：
- en: We set the response code of the response to *200*, indicating a successful request
    cycle.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将响应的响应代码设置为*200*，表示成功的请求周期。
- en: We append a string to the body (that is, the payload) of the response`—"I am
    a fledgling API, and I am alright"`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将一个字符串附加到响应的主体（即有效载荷）中 - “我是一个新生的API，我很好”。
- en: That's it as regards handling and responding to requests (really!).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 就处理和响应请求而言，就是这样了！
- en: Let's put this to use and start returning something more interesting.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把它用起来，开始返回一些更有趣的东西。
- en: Returning JSON
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回JSON
- en: Normally, REST APIs will support serving data in several different formats,
    such as JSON and XML. For the sake of simplicity, we will only focus on JSON here.
    This makes sense in the context of what we have seen so far, where everything
    high and low is JavaScript - and JSON-oriented anyway.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，REST API将支持以几种不同的格式提供数据，比如JSON和XML。为了简单起见，我们只关注JSON。在我们迄今为止所看到的上下文中，这是有道理的，因为高低一切都是JavaScript
    - 而且本来就是面向JSON的。
- en: 'Thankfully, returning a JSON object to our caller is almost trivial; we just
    need to make a few adjustments inside our callback function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，向我们的调用者返回一个JSON对象几乎是微不足道的；我们只需要在回调函数中做一些调整：
- en: Specify the content type of the response as JSON
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定响应的内容类型为JSON
- en: Convert the JSON object that we want to send back to a string
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们要发送回去的JSON对象转换为一个字符串
- en: 'The first adjustment is done by modifying the `Content-Type` header of our
    response. In your code, you have the following code line:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个调整是通过修改响应的`Content-Type`头部来完成的。在您的代码中，您有以下代码行：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can change this to the following code line:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将其更改为以下代码行：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This additional parameter, passed to the `writeHead()` method, is a JSON object
    with custom values for headers in the response object. If you don't specify headers,
    the HTTP module will generally set sensible defaults, but you should always be
    explicit when you are certain about what a header should be set to. Here, we want
    to make it clear to the client that we are sending them a JSON object as a response,
    and we set the `Content-Type` header accordingly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`writeHead()`方法的这个额外参数是一个JSON对象，其中包含响应对象中头部的自定义值。如果您不指定头部，HTTP模块通常会设置合理的默认值，但是当您确定一个头部应该设置为什么时，您应该始终明确。在这里，我们希望向客户端明确地表明我们正在发送一个JSON对象作为响应，并相应地设置`Content-Type`头部。
- en: 'To address the second item, let''s first add a JSON object to send back to
    the client. After the `res.writeHead()` method, add the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第二个问题，让我们首先添加一个要发送回客户端的JSON对象。在`res.writeHead()`方法之后，添加以下内容：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we need to turn this JSON object into a string in order to package it
    into the response. To do so, we can use the native Javascript `JSON.stringify()`
    method. As expected, this method takes a JSON object and returns a string representation
    of that object. Modify the following line:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将这个JSON对象转换为一个字符串，以便将其打包到响应中。为此，我们可以使用原生的Javascript `JSON.stringify()`
    方法。正如预期的那样，这个方法接受一个JSON对象，并返回该对象的字符串表示。修改以下行：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Change the preceding line to the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的行更改为以下内容：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We''re done! Save your changes, restart the Node.js instance (just close and
    start it again), and refresh your browser window for the server. You will see
    the text:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！保存您的更改，重新启动Node.js实例（只需关闭并重新启动它），并刷新服务器的浏览器窗口。您将看到以下文本：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We now have a full-fledged, JSON-serving HTTP server ticking. It's about time
    that we got down to the serious stuff.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完整的、提供JSON的HTTP服务器在运行。是时候认真对待这件事了。
- en: Implementing our GET handlers
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们的GET处理程序
- en: Let's begin by implementing basic GET methods for our resources. You may recall
    that we mentioned before that a good REST API should at least implement two of
    them—GET by ID and GET all. Since we like to be standards-compliant, that is what
    we will use here.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为我们的资源实现基本的GET方法开始。您可能还记得我们之前提到过，一个良好的REST API至少应该实现其中的两个 - 按ID获取和获取所有。由于我们喜欢符合标准，这就是我们将在这里使用的。
- en: Implementing a router
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现路由器
- en: Our first order of business is to provide a way for our Node.js instance to
    differentiate between the different URLs that it receives requests for. Until
    now, our server only had to handle requests to its root URL (`http://localhost:8080/`),
    but in order to do something more interesting, we want to be able to generate
    custom responses for more specific URLs, such as `http://localhost:8080/api/products`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要任务是为我们的Node.js实例提供一种区分它接收到的请求的不同URL的方法。到目前为止，我们的服务器只需要处理对其根URL（`http://localhost:8080/`）的请求，但为了做一些更有趣的事情，我们希望能够为更具体的URL生成定制的响应，比如`http://localhost:8080/api/products`。
- en: Fortunately, Node.js again provides an out-of-the-box way to achieve this—the
    URL module.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，Node.js再次提供了一种开箱即用的方法来实现这一点 - URL模块。
- en: 'Add the following just after the `var http = require(''http'');` line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`var http = require('http');`行之后添加以下内容：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will import the URL module. We can now use it to break down the incoming
    requests and take action depending on how their URLs are structured.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导入URL模块。我们现在可以使用它来分解传入的请求，并根据它们的URL结构采取行动。
- en: 'Modify the `http.createServer()` call to look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将`http.createServer()`调用修改为以下内容：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that we introduced two new methods, `findAllProducts` and `findProductById`.
    These are utility methods, which we will define separately. Along with them, we
    will define some generic helper methods to help make data access less cumbersome
    for us. Go ahead and add the following before the `createServer()` call:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们引入了两个新方法，`findAllProducts` 和 `findProductById`。这些是实用方法，我们将单独定义它们。除此之外，我们将定义一些通用的辅助方法，以帮助我们减少数据访问的繁琐性。在`createServer()`调用之前添加以下内容：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The generic methods are straightforward. They simply make use of the MongoDB
    interface that we created in [Chapter 2](ch02.html "Chapter 2. Configuring Persistence
    with MongoDB"), *Configuring Persistence with MongoDB*, in order to retrieve either
    all the documents from a specific collection, or just a single document by its
    ID. The specific product methods make use of these generic methods in order to
    find products in this fashion.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通用方法很简单。它们只是利用我们在[第2章](ch02.html "第2章。使用MongoDB配置持久性")中创建的MongoDB接口，以便从特定集合中检索所有文档，或者仅通过其ID检索单个文档。特定的产品方法利用这些通用方法以此方式查找产品。
- en: For the sake of brevity, we do not implement similar methods for the customer
    and order here; they are identical to the ones used for the product. Just change
    the name of the resource and add appropriate paths inside the `createServer()`
    method. You can see the complete example in the source code accompanying the book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们在这里不为客户和订单实现类似的方法；它们与用于产品的方法相同。只需更改资源的名称，并在`createServer()`方法中添加适当的路径。您可以在附带书籍的源代码中看到完整的示例。
- en: Implementing our POST handlers
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现我们的POST处理程序
- en: 'We will now move on to adding handlers to create new instances of a resource.
    To do so, we need to distinguish not only between the URLs, but also between the
    request types. Modify your `createServer()` invocation so that it looks like the
    following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续添加处理程序以创建资源的新实例。为此，我们不仅需要区分URL，还需要区分请求类型。修改您的`createServer()`调用，使其看起来像下面这样：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note that we have introduced another handler method, `insertProduct()`. We
    define it, along with its corresponding generic method, like we did before:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们引入了另一个处理程序方法`insertProduct()`。我们定义它，以及与之对应的通用方法，就像之前一样：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Again, the implementation of this functionality for the other resources is the
    same, with the exception of the name. We do not replicate them here.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于其他资源的此功能的实现方式相同，唯一的区别是名称。我们在这里不再重复。
- en: Implementing the DELETE and PUT handlers
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现DELETE和PUT处理程序
- en: Handling DELETE and PUT is analogous to handling a GET and POST request respectively,
    with the exception of the method being changed. Thus, we recommend that you refer
    to the accompanying source code to see the full implementation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 处理DELETE和PUT与处理GET和POST请求类似，唯一的区别是方法的改变。因此，我们建议您参考附带的源代码以查看完整的实现。
- en: Testing the API
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试API
- en: Until now, we have used a normal browser to poke at our API and see what it
    returns. However, this is far from optimal. Most browsers only make it easy to
    send GET requests, whereas an HTML form or something similar to it is needed in
    order to send POST requests. Let's not even get started with the DELETE and PUT
    requests.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用普通浏览器来调用我们的API并查看返回的内容。然而，这远非最佳选择。大多数浏览器只能轻松发送GET请求，而发送POST请求需要使用HTML表单或类似的东西。更不用说DELETE和PUT请求了。
- en: To test the REST API, it is a much better idea to use a dedicated REST client,
    which will give you more options, make it easier to send requests, and thoroughly
    analyze responses. A very popular (and free) tool is Postman, which is a Chrome
    extension. It runs on all major operating systems. You can download it for free
    from [https://www.getpostman.com/](https://www.getpostman.com/). The install process
    is very straightforward, and it will not be covered here.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试REST API，最好使用专用的REST客户端，这将为您提供更多选项，使发送请求更容易，并彻底分析响应。一个非常流行（并且免费）的工具是Postman，它是一个Chrome扩展程序。它可以在所有主要操作系统上运行。您可以从[https://www.getpostman.com/](https://www.getpostman.com/)免费下载。安装过程非常简单，这里不再介绍。
- en: 'Once you have installed Postman, start it up. Let''s post away at our API.
    First, let''s try asking the backend to send us all the products that it currently
    stores. Enter the products'' root URL in Postman''s URL field, make sure that
    GET is selected among the methods in the combobox to the right, and then click
    on the **Send** button. You should get something that looks like the following
    screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Postman后，启动它。让我们向我们的API发送请求。首先，让我们尝试要求后端向我们发送当前存储的所有产品。在Postman的URL字段中输入产品的根URL，确保在右侧的组合框中选择GET，然后点击**发送**按钮。您应该会得到类似以下截图的内容：
- en: '![Testing the API](img/B04653_03_01.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![测试API](img/B04653_03_01.jpg)'
- en: 'Now, let''s try to POST a new product to the backend. Keep the same URL, but
    change the method to POST in the combobox to the right. Next, add some data before
    sending; select **Raw** from the button group under the URL field and enter the
    following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试向后端POST一个新产品。保持相同的URL，但在右侧的组合框中将方法更改为POST。然后，在发送之前添加一些数据；在URL字段下的按钮组中选择**原始**，并输入以下内容：
- en: '![Testing the API](img/B04653_03_02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![测试API](img/B04653_03_02.jpg)'
- en: 'Click on **Send** to fire off the request (note how much easier this is than
    using a plain browser). Finally, let''s pull all the products again in order to
    make sure that the new product was indeed added:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**发送**以发送请求（注意这比使用普通浏览器要容易得多）。最后，让我们再次获取所有产品，以确保新产品确实已添加：
- en: '![Testing the API](img/B04653_03_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![测试API](img/B04653_03_03.jpg)'
- en: That's it! Our API is working, and we are ready to start moving towards some
    serious usage.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们的API正在运行，我们准备开始朝着严肃的使用迈进。
- en: Moving forward
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前进
- en: In this chapter, we studied the bare bones and built our API from scratch by
    using only the functionality provided by the core Node.js modules themselves.
    We did this in order to show you how Node.js works in reality and to avoid binding
    you to any given framework that already does the things that we implemented here,
    in case you use another one in your own career.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了最基本的知识，并通过仅使用核心Node.js模块提供的功能从头开始构建了我们的API。我们这样做是为了向您展示Node.js在现实中的工作方式，并避免将您绑定到已经实现我们在这里实现的功能的任何给定框架，以防您在自己的职业生涯中使用其他框架。
- en: 'That being said, as an addendum, we would still like to point you to some frameworks
    that we ourselves recommend in order to build powerful APIs quickly with Node.js:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，作为附言，我们仍然想向您指出一些我们自己推荐的框架，以便快速使用Node.js构建强大的API：
- en: '**Express.js**: Express is a framework that can be used to build robust, complete
    web applications using Node.js. It comes with a host of powerful features, including
    an advanced router, which makes it very easy to handle incoming requests based
    on the URL (forget about the switch and if statements like we did here), extract,
    parse, and validate data, connect to external data sources, and much more.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express.js**：Express是一个可以用来使用Node.js构建强大、完整的Web应用程序的框架。它具有许多强大的功能，包括高级路由器，使得根据URL处理传入请求非常容易（忘掉我们在这里使用的switch和if语句），提取、解析和验证数据，连接到外部数据源等等。'
- en: Express.js is largely seen as the de facto framework for Node.js, and it has
    a large community and plugins available for it, making it easy to find help and
    extra functionality as needed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js在很大程度上被视为Node.js的事实框架，并且有一个庞大的社区和可用的插件，使得很容易找到所需的帮助和额外功能。
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on this framework, visit [http://expressjs.com/](http://expressjs.com/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此框架的更多信息，请访问[http://expressjs.com/](http://expressjs.com/)。
- en: '**Loopback.js**: This was developed by the same team that created Express.js.
    Loopback.js is an Express.js derivative, which is designed solely for the creation
    of APIs. It comes with a powerful terminal interface, where you can quickly create
    and modify resources, relations between resources, security, and much more. Loopback
    automatically generates full RESTful APIs for your resources, which means that
    you have to write almost no code for cases, such as the examples that we looked
    at in this chapter.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Loopback.js**：这是由创建Express.js的同一团队开发的。Loopback.js是Express.js的派生版本，专门用于创建API。它配备了一个强大的终端界面，您可以在其中快速创建和修改资源、资源之间的关系、安全性等等。Loopback会自动生成资源的完整RESTful
    API，这意味着您几乎不需要为本章中我们所看到的例子等情况编写任何代码。'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about this framework, visit [http://loopback.io](http://loopback.io)/.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此框架的更多信息，请访问[http://loopback.io](http://loopback.io)/。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You should now have a good understanding of the basic concepts of RESTful APIs
    as well as how you can implement them using Node.js and access them from a network.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对RESTful API的基本概念有了很好的理解，以及如何使用Node.js实现它们并从网络访问它们。
- en: In the next chapter, we will continue improving our API and show how to secure
    it in order to prevent unauthorized access to your resources.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续改进我们的API，并展示如何对其进行安全保护，以防止未经授权访问您的资源。
