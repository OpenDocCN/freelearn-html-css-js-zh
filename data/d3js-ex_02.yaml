- en: Chapter 2. Selections and Data Binding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。选择和数据绑定
- en: In this chapter, you will learn how to use D3.js to select and manipulate the
    DOM of an HTML page based upon data. Rendering of visuals in D3.js takes a declarative
    approach, where you inform D3.js of how to visualize a piece of data instead of
    imperatively programming exactly how to draw the visual and iterate across the
    data. This process is referred to as **selection** and **data binding** in the
    D3.js nomenclature.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用 D3.js 根据数据选择和操作 HTML 页面的 DOM。D3.js 中的视觉渲染采用声明式方法，其中你告知 D3.js 如何可视化数据片段，而不是命令式地编程如何绘制视觉并遍历数据。这个过程在
    D3.js 术语中被称为 **选择** 和 **数据绑定**。
- en: To demonstrate how D3.js can be used to create DOM elements driven by data,
    we will progress through a number of examples that demonstrate creating DIV elements
    to display various arrays of integer values. We will first examine how selection
    can be used to extract the existing DOM elements, and how D3.js is used to associate
    the data to each DOM element. Then we will examine the ways to instruct D3.js
    to create new DOM elements from the data. That will be followed by discussing
    the procedure for updating the existing elements, and for removing visual elements
    when particular data items are removed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示如何使用 D3.js 创建由数据驱动的 DOM 元素，我们将通过一系列示例来演示如何创建 DIV 元素以显示各种整数值数组。我们首先将检查如何使用选择来提取现有的
    DOM 元素，以及 D3.js 如何将数据关联到每个 DOM 元素。然后我们将探讨指导 D3.js 从数据中创建新 DOM 元素的方法。接下来，我们将讨论更新现有元素以及当特定数据项被移除时移除视觉元素的过程。
- en: 'We will focus purely upon the HTML DOM elements, and will progress to using
    SVG in later chapters. Specifically, we will progress through the following topics
    in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于 HTML DOM 元素，并在后面的章节中介绍 SVG 的使用。具体来说，在本章中我们将探讨以下主题：
- en: Using D3.js selections to modify DOM elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 选择器修改 DOM 元素
- en: Modifying the style of DOM elements using D3.js selectors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 选择器修改 DOM 元素的样式
- en: Binding data to the DOM using `.data()`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.data()` 将数据绑定到 DOM
- en: Using `.enter()` for creating DOM elements from new data items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.enter()` 从新数据项创建 DOM 元素
- en: Updating the existing DOM elements based upon the changes in data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据数据变化更新现有 DOM 元素
- en: Using `.exit()` to remove DOM elements when the associated data is no longer
    to be visualized
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.exit()` 在关联数据不再需要可视化时移除 DOM 元素
- en: A laundry list of tips on performing data binding with D3.js
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 进行数据绑定的技巧清单
- en: D3.js selections
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D3.js 选择器
- en: At its core, D3.js is about selection, which is a process of finding and creating
    DOM elements that visualize data. At a simple level, a selection can just be a
    means of finding and manipulating elements in the DOM that already exist. However,
    D3.js selections can also be used for explicitly creating new elements in the
    DOM as well as for implicitly creating and removing DOM elements based upon the
    changes in an underlying data model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，D3.js 是关于选择，这是一个寻找和创建可视化数据的 DOM 元素的过程。在简单层面上，选择可以仅仅是一种在 DOM 中查找和操作已存在元素的手段。然而，D3.js
    选择器也可以用来显式创建 DOM 中的新元素，以及根据底层数据模型的变化隐式创建和删除 DOM 元素。
- en: In [Chapter 1](ch01.html "Chapter 1. Getting Started with D3.js"), *Getting
    Started with D3.js*, we saw a simple example of selection in which we used selection
    to make a D3.js version of the canonical Hello World application. Now we will
    dive deeper into the power of selections. We will look at two examples of selecting
    a DOM element and changing its style.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。D3.js 入门") 中，我们看到了一个简单的选择示例，其中我们使用选择来制作 D3.js 版本的经典
    Hello World 应用程序。现在我们将更深入地探讨选择的力量。我们将查看两个选择 DOM 元素并更改其样式的示例。
- en: Changing the style of a DOM element
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改 DOM 元素的样式
- en: In this first example, we will create a page with four `div` elements, each
    with a unique ID. We will then use D3.js to find the first `div` tag, and change
    its background color.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个示例中，我们将创建一个包含四个 `div` 元素的页面，每个 `div` 元素都有一个唯一的 ID。然后我们将使用 D3.js 找到第一个
    `div` 标签，并更改其背景颜色。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.1): [http://goo.gl/EnAQBc](http://goo.gl/EnAQBc)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.1): [http://goo.gl/EnAQBc](http://goo.gl/EnAQBc)'
- en: 'The `body` tag of the document contains the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的 `body` 标签包含以下代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result of this preceding code is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的结果如下：
- en: '![Changing the style of a DOM element](img/B04230_02_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![更改 DOM 元素的样式](img/B04230_02_01.jpg)'
- en: This example uses the `d3.select()` function, which returns the first element
    in the DOM that matches the given tag—in this case, `'DIV'`. The result of `d3.select()`
    is a D3.js object representing the DOM element that was identified and the data
    that D3.js has associated with that element.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `d3.select()` 函数，它返回 DOM 中与给定标签匹配的第一个元素——在这种情况下，是 `'DIV'`。`d3.select()`
    的结果是代表已识别的 DOM 元素及其数据的 D3.js 对象。
- en: This concept in D3.js is referred to as a **selector**. The function `d3.select()`
    always represents a single DOM element or a null value if the element is not found.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 D3.js 中，这个概念被称为 **选择器**。函数 `d3.select()` 总是代表单个 DOM 元素，如果找不到元素，则返回 null 值。
- en: A selector has methods such as `.style()`, which can be used to change the CSS
    style properties of the underlying element, attributes using `.attr()`, and the
    text property using the `.text()` function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器有如 `.style()` 这样的方法，可以用来更改底层元素的 CSS 样式属性，使用 `.attr()` 更改属性，以及使用 `.text()`
    函数更改文本属性。
- en: In this case, we use the `.style()` function to set the `background-color` property
    of the DIV elements style to `lightblue`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用 `.style()` 函数将 DIV 元素的 `background-color` 属性样式设置为 `lightblue`。
- en: Changing the style of multiple items
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改多个项目的样式
- en: To select multiple items in the DOM, we can use the `d3.selectAll()` function.
    The result is a selector which can represent multiple DOM elements that match
    the criteria.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 DOM 中选择多个项目，我们可以使用 `d3.selectAll()` 函数。结果是选择器，它可以表示匹配特定标准的多个 DOM 元素。
- en: 'To demonstrate, we will change the single line of the D3.js code in our previous
    example to the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将之前示例中的单行 D3.js 代码更改为以下内容：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As a result of this, the call to `.selectAll()` will represent each of the
    four `div` elements in the document. The call to `.style()` will be applied to
    each of the DOM element represented, which results in the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`.selectAll()` 的调用将代表文档中的每个四个 `div` 元素。`.style()` 的调用将应用于每个表示的 DOM 元素，从而产生以下输出：
- en: '![Changing the style of multiple items](img/B04230_02_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![更改多个项目的样式](img/B04230_02_02.jpg)'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.2): [http://goo.gl/61p8Nv](http://goo.gl/61p8Nv)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.2): [http://goo.gl/61p8Nv](http://goo.gl/61p8Nv)'
- en: This demonstrates one of the advantages of using D3.js for selection. Chained
    function calls will be applied to all DOM elements resulting from a D3.js selection.
    Therefore, we do not need to explicitly iterate through all the items. This saves
    us from excessive coding, and helps in reducing the potential of errors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了使用 D3.js 进行选择的一个优点。链式函数调用将被应用于由 D3.js 选择产生的所有 DOM 元素。因此，我们不需要显式地遍历所有项目。这节省了我们大量的编码工作，并有助于减少潜在的错误。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, by default, the items in a selector are fixed at the time of the
    creation of the D3.js selector. If we were to add another `div` after the selection,
    then the elements in the existing selector will not have the new `div` tag added.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，默认情况下，选择器中的项目在创建 D3.js 选择器时是固定的。如果我们选择之后添加另一个 `div`，则现有选择器中的元素将不会添加新的 `div`
    标签。
- en: 'The parameter passed to the functions `d3.select()` and `d3.selectAll()` can
    also include various CSS rules as part of the query. As an example, to select
    all the elements with a specific ID, prepend the parameter with `#`. The following
    example selects only those DOM elements whose id is `div2`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `d3.select()` 和 `d3.selectAll()` 函数的参数也可以包括查询的一部分 CSS 规则。例如，要选择所有具有特定 ID
    的元素，请将参数以 `#` 开头。以下示例仅选择那些 ID 为 `div2` 的 DOM 元素：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This results in the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Changing the style of multiple items](img/B04230_02_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![更改多个项目的样式](img/B04230_02_03.jpg)'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.3): [http://goo.gl/TC4Yox](http://goo.gl/TC4Yox)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.3): [http://goo.gl/TC4Yox](http://goo.gl/TC4Yox)'
- en: Note that this selection will return all the DOM elements which have the ID
    `div2`, be they `div` or other types of DOM elements. This example only has `div`
    tags, so that is all that we will retrieve. Moreover, it is bad practice to have
    identical ID values on a page. But the way in which the query functions is viable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此选择将返回所有具有 ID `div2` 的 DOM 元素，无论它们是 `div` 还是其他类型的 DOM 元素。此示例只有 `div` 标签，所以我们只会检索这些。此外，在页面上使用相同的
    ID 值是不良的做法。但查询的方式是可行的。
- en: 'If we want to ensure that this query returns only `div` elements, then we can
    use the following query, which places the type of the element before the hash
    symbol:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想确保此查询只返回 `div` 元素，则可以使用以下查询，它将元素的类型放在井号符号之前：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding query has the following result:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询的结果如下：
- en: '![Changing the style of multiple items](img/B04230_02_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![更改多个项目的样式](img/B04230_02_04.jpg)'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.4): [http://goo.gl/xVwV1O](http://goo.gl/xVwV1O)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.4): [http://goo.gl/xVwV1O](http://goo.gl/xVwV1O)'
- en: Now let's examine the scenario where we would like to apply a different style
    to each DOM element in the selector. To do this, we can pass an accessor function
    to the `.style()` instead of a value. For example, the following code will alternate
    the color of the background of the `div` tags between `lightblue` and `lightgray`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来分析一个场景，其中我们希望为选择器中的每个 DOM 元素应用不同的样式。为此，我们可以将访问器函数传递给 `.style()` 而不是值。例如，以下代码将在
    `div` 标签的背景颜色之间交替 `lightblue` 和 `lightgray`。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code results in the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生以下输出：
- en: '![Changing the style of multiple items](img/B04230_02_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![更改多个项目的样式](img/B04230_02_05.jpg)'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.5): [http://goo.gl/PdohHx](http://goo.gl/PdohHx)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.5): [http://goo.gl/PdohHx](http://goo.gl/PdohHx)'
- en: Accessor functions are commonly used through D3.js. An accessor function has
    two parameters, the first of which represents the datum that has been associated
    by D3.js to the DOM element (we'll come back to this later in the chapter). The
    second parameter represents the 0-based array position of the DOM element in the
    result of the selection.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器函数通常通过 D3.js 使用。访问器函数有两个参数，第一个参数代表 D3.js 与 DOM 元素关联的数据（我们将在本章后面回到这一点）。第二个参数代表在选择结果的
    0 基数数组位置中的 DOM 元素。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The second parameter of an accessor function is optional.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器函数的第二个参数是可选的。
- en: The return value of the selector function is another selector (or the same selector)
    in many cases. This allows us to chain the method calls together. We can do this
    to conveniently set multiple styles on all the DOM elements represented by the
    selector.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器函数的返回值在许多情况下是另一个选择器（或相同的选择器）。这允许我们将方法调用链在一起。我们可以这样做，以便方便地为选择器表示的所有 DOM 元素设置多个样式。
- en: 'As an example, the following code first sets the background color, and then
    sets the width of each DIV to an increasing value:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码首先设置背景颜色，然后设置每个 DIV 的宽度为递增值：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output for the preceding code will be as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![Changing the style of multiple items](img/B04230_02_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![更改多个项目的样式](img/B04230_02_06.jpg)'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.6): [http://goo.gl/ukFFYL](http://goo.gl/ukFFYL)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.6): [http://goo.gl/ukFFYL](http://goo.gl/ukFFYL)'
- en: 'Multiple style properties can also be set in a single call to `.style()` by
    passing a hash of property names and values. The following has the same result
    as the previous example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个 `.style()` 调用中也可以设置多个样式属性，通过传递一个包含属性名称和值的哈希表。以下示例与上一个示例具有相同的结果：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.7): [http://goo.gl/17FVJs](http://goo.gl/17FVJs). The image of the
    output is omitted as it is a duplicate of the previous bl.ock.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.7): [http://goo.gl/17FVJs](http://goo.gl/17FVJs)。输出图像被省略，因为它与上一个
    bl.ock 相同。'
- en: D3.js and data binding
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D3.js 和数据绑定
- en: The example in the previous section relied upon the elements that already exist
    in the DOM. Normally, in D3.js we would start with a set of data, and then build
    visualizations based on this data. We would also want to change the visualization
    as the data changes as a result of either adding more data items, removing some
    or all of them, or changing the properties of the existing objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个章节中的示例依赖于 DOM 中已经存在的元素。通常，在 D3.js 中，我们会从一个数据集开始，然后根据这些数据构建可视化。我们还想在数据发生变化时更改可视化，无论是添加更多数据项、删除一些或全部数据，还是更改现有对象的属性。
- en: This process of managing mapping of data to visual elements is often referred
    to as **binding of data**, and in terms of the D3.js nomenclature, it is referred
    to as a **data join** (do not confuse this with an SQL join). Binding in D3.js
    is performed by using the `.data()` function of a selector.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 管理数据到视觉元素映射的过程通常被称为**数据绑定**，在 D3.js 术语中，它被称为**数据连接**（不要与 SQL 连接混淆）。D3.js 中的绑定是通过选择器的
    `.data()` 函数执行的。
- en: Let's dive in, and examine a few examples of binding data in some detail.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨，并详细检查一些数据绑定示例。
- en: Data binding
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据绑定
- en: Binding of data can be one of the hardest things for someone new to D3.js to
    get used to. Even for somebody who uses other languages and frameworks that provide
    data binding, the way in which D3.js binds data is a little different, and getting
    to know how it does so will save a lot of time down the road. Therefore, we will
    take the time to examine it in detail as it is essential for creating effective
    D3.js visualizations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于D3.js的新手来说，数据绑定可能是最难适应的事情之一。即使是那些使用其他提供数据绑定的语言和框架的人，D3.js绑定数据的方式也略有不同，了解它是如何做到的将节省很多时间。因此，我们将花时间详细检查它，因为它对于创建有效的D3.js可视化至关重要。
- en: In D3.js, we drive the visualization of data through binding using the following
    functions of a selector.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在D3.js中，我们通过以下选择器的函数使用绑定来驱动数据的可视化。
- en: '| Function | Purpose |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 目的 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.data()` | Specifies the data to be used to drive the visualization |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `.data()` | 指定用于驱动可视化的数据 |'
- en: '| `.enter()` | Returns a selector representing the new items to be displayed
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `.enter()` | 返回一个表示将要显示的新项的选择器 |'
- en: '| `.exit()` | Returns a selector representing the items that are no longer
    to be displayed |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `.exit()` | 返回一个表示不再显示的项的选择器 |'
- en: This pattern in which test functions are used is so ingrained in the D3.js code
    that it is often referred to as the **enter**/**update**/**exit** pattern or **general
    update** pattern. It provides a powerful means of declaratively telling D3.js
    how you want the dynamic data to be displayed, and to let D3.js handle the rendering.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种使用测试函数的模式在D3.js代码中如此根深蒂固，以至于通常被称为**进入**/**更新**/**退出**模式或**通用更新**模式。它提供了一种强大的声明性方式来告诉D3.js你希望如何显示动态数据，并让D3.js处理渲染。
- en: We will come back to these details of the specifics of enter/update/exit in
    a little bit. For now, let's start by examining our selection example from earlier
    in the chapter, where we selected all the `div` objects in the document. This
    will help us understand the basis of how a selector facilitates the rendering
    process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后回到这些关于进入/更新/退出的具体细节。现在，让我们先从本章早期的一个选择示例开始，其中我们选择了文档中的所有`div`对象。这将帮助我们理解选择器如何促进渲染过程的基础。
- en: 'We will use a slight variant on the `d3.selectAll()` function from the previous
    example. Here, we will assign the result to a variable named `selector`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前示例中`d3.selectAll()`函数的一个轻微变体。在这里，我们将结果分配给一个名为`selector`的变量：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.8): [http://goo.gl/etDgJV](http://goo.gl/etDgJV). The output is not
    shown as the code does give results visually different from the previous examples.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.8): [http://goo.gl/etDgJV](http://goo.gl/etDgJV)。输出没有显示，因为代码给出了与之前示例不同的视觉结果。'
- en: There are two other subtle differences in this preceding statement from the
    previous examples. The first is that we select the body DOM element, and the second
    is that we chain a call to `.selectAll()` for the div tags.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个先前的语句与之前的例子之间有两个细微的差别。第一个是我们选择了body DOM元素，第二个是我们对div标签链式调用了`.selectAll()`。
- en: Using this pattern of a function chain, we are instructing D3.js to select all
    the `div` tags that are a child of the `body` tag. This chaining of select function
    calls allows us to navigate through the HTML document to look for tags in specific
    places, and as we will see shortly, specify where to put the new visual elements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种函数链的模式，我们指示D3.js选择所有作为`body`标签子标签的`div`标签。这种选择函数调用的链式调用使我们能够遍历HTML文档以查找特定位置上的标签，并且正如我们将很快看到的，指定放置新视觉元素的位置。
- en: 'To help conceptualize a selector, I believe that a selector can be thought
    of as a collection of mappings between the DOM elements and the data that D3.js
    has associated with those element(s). I find it useful to mentally picture a selector
    with diagrams such as the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助概念化选择器，我认为可以将选择器视为D3.js与那些元素关联的数据之间的映射集合。我发现用以下之类的图表来心理想象选择器是有用的：
- en: '![Data binding](img/B04230_02_07.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_07.jpg)'
- en: The orange part in the preceding diagram represents the overall selector that
    results from our selection. This selector contains four items represented by white,
    rounded rectangles, one for each `div`, and which we can think of as being numbered
    from 0 through 3.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图中的橙色部分代表我们选择的结果的整体选择器。这个选择器包含四个由白色、圆形矩形表示的项目，每个`div`一个，我们可以将其视为从0到3编号。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not confuse a selector with an array—the individual elements in this diagram
    cannot be accessed using `[]`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将选择器与数组混淆——这个图中的单个元素不能使用 `[]` 访问。
- en: The ordering is important as we will see when we update the data. By default,
    the ordering depends on how the identified DOM elements are ordered in the DOM
    at the point of selection (in this case, children of the `body` tag).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 排序很重要，正如我们更新数据时将看到的，默认情况下，排序取决于在选择的点DOM元素在DOM中的顺序（在这种情况下，`body` 标签的子元素）。
- en: Each item in a selector can then be thought of as consisting of two other objects.
    The first is the actual DOM element that was identified by the selection, represented
    by a blue square in the preceding diagram. Inside that square in the image is
    the DOM element type (`div`), and the value of its `id` property.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器中的每个项目可以被认为由两个其他对象组成。第一个是实际由选择器识别的DOM元素，在前面的图中用蓝色方块表示。在这个方块内部是DOM元素类型（`div`），以及其
    `id` 属性的值。
- en: The second is the datum that D3.js has associated with that DOM element, represented
    by the green square. In this case, there is no data that is bound at this point
    by D3.js, so the data for each is null (or empty in the diagram). This is because
    these DOM elements were created in HTML and not with D3.js, and hence there is
    no associated datum.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是与该DOM元素关联的D3.js数据，用绿色方块表示。在这种情况下，D3.js没有绑定任何数据，因此每个的数据都是null（或图中的空）。这是因为这些DOM元素是在HTML中创建的，而不是使用D3.js创建的，因此没有关联的数据。
- en: Let's change that and bind some data to these `div` tags. We do this by chaining
    a call to `.data()` immediately following the selection functions. This function
    is passed a collection of values or objects, and it informs D3.js that you want
    to associate each datum with a specific visual representation created by the function
    calls that follow.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变这一点，并将一些数据绑定到这些 `div` 标签上。我们通过在选择函数之后立即链式调用 `.data()` 来做这件事。这个函数传递一个值或对象的集合，并通知D3.js你想要将每个数据与由后续函数调用创建的特定视觉表示关联起来。
- en: 'To demonstrate this, let''s modify the code to the following, binding the array
    of integers to the `div` tags:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们修改代码如下，将整数数组绑定到 `div` 标签上：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.9): [http://goo.gl/h1O1wX](http://goo.gl/h1O1wX). The output is omitted
    from the book as it is not visually different from the previous example.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.9): [http://goo.gl/h1O1wX](http://goo.gl/h1O1wX)。输出被省略，因为与上一个示例在视觉上没有区别。'
- en: The result of chaining the call to `.data()` tells D3.js that for each item
    identified in the selector, the datum at the same index in the data should be
    assigned. In this example, this does not change the visual. It simply assigns
    a datum to each `div` element.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`.data()` 调用的链式调用结果告诉D3.js，对于选择器中识别的每个项目，数据中相同索引处的数据应该被分配。在这个例子中，这并没有改变视觉。它只是将数据分配给每个
    `div` 元素。'
- en: 'To check this, let''s examine the result using the developer tools. If you
    right-click on **A** in the browser, and select inspect item, the tools will open.
    Next, open the properties panel, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这一点，让我们使用开发者工具检查结果。如果你在浏览器中右键点击 **A**，然后选择检查元素，工具将打开。接下来，打开属性面板，如下面的截图所示：
- en: '![Data binding](img/B04230_02_08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_08.jpg)'
- en: The highlighted red rectangle in the preceding screenshot shows that the `div`
    tag now has a `__data__` property, and its value is `10`. This is how D3.js binds
    data to the visuals, by creating this property on the DOM element and assigning
    the datum. If you examine the three other `div` tags, you will see that they all
    have this property and the associated value.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中的突出显示的红色矩形表明，`div` 标签现在有一个 `__data__` 属性，其值为 `10`。这就是D3.js通过在DOM元素上创建这个属性并分配数据来绑定数据到视觉的方式。如果你检查其他三个
    `div` 标签，你会看到它们都具有这个属性和相关的值。
- en: 'Using the visual for our selector, we get the following values:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的选择器的视觉，我们得到以下值：
- en: '![Data binding](img/B04230_02_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_09.jpg)'
- en: 'Now you might ask what happens if the count of items in the call to `.data()`
    does not equal the amount of items in the selector? Let''s take a look at those
    scenarios, starting with the case of fewer data items than the selected DOM elements:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会问，如果在调用 `.data()` 时项目的数量不等于选择器中的项目数量会发生什么？让我们看看这些场景，从选择器中DOM元素数量少于数据项的情况开始：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.10): [http://goo.gl/89NReN](http://goo.gl/89NReN). The output has
    been omitted again, since the visual did not change.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.10): [http://goo.gl/89NReN](http://goo.gl/89NReN)。输出再次被省略，因为视觉没有变化。'
- en: If you open the Developer tools after running this example, and examine the
    properties for each of our `div` tags, you will notice that the first three have
    a `__data__` property with the values assigned. The fourth tag does not have the
    property added. This is because D3.js iterates through the items in the data,
    assigning them one by one, and any extra DOM elements in the selector are ignored.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此示例后打开开发者工具，并检查每个 `div` 标签的属性，你会注意到前三个有一个带有分配值的 `__data__` 属性。第四个标签没有添加属性。这是因为
    D3.js 遍历数据中的项目，逐个分配它们，并且忽略选择器中的任何额外 DOM 元素。
- en: 'Conceptually, the selector then looks like following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，选择器看起来如下：
- en: '![Data binding](img/B04230_02_10.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_10.jpg)'
- en: 'Now let''s change the code to have more data items than the DOM elements:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将代码修改为比 DOM 元素更多的数据项：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.11): [http://goo.gl/CvuxNJ](http://goo.gl/CvuxNJ). The output has
    been omitted again since the visual did not change.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.11): [http://goo.gl/CvuxNJ](http://goo.gl/CvuxNJ). 由于视觉没有变化，输出再次被省略。'
- en: Examining the resulting DOM in the Developer tools, you can see that there are
    still only four `div` elements, with `10` through `40` assigned respectively.
    There is no new visual created for the extra data item.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者工具中检查生成的 DOM，你可以看到仍然只有四个 `div` 元素，分别分配了 `10` 到 `40` 的值。没有为额外的数据项创建新的视觉元素。
- en: '![Data binding](img/B04230_02_11.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_11.jpg)'
- en: Why is a visual not created in this case? It is because the call to `.data()`
    assigns data only to the existing visual elements in the selector. Since `.data()`
    iterates the items passed to it, it stops at the last item, and the extra DOM
    elements are ignored.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在这种情况下没有创建视觉元素？这是因为 `.data()` 的调用只将数据分配给选择器中现有的视觉元素。由于 `.data()` 遍历它传递的项目，它会在最后一个项目处停止，并且忽略选择器中的额外
    DOM 元素。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will examine how we add visuals for these stray data items in the next section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何为这些散乱的数据项添加视觉元素。
- en: 'There is one more case that I think is worth examining. The examples so far
    for `.data()` have had pre-existing `div` tags in the document. Let''s now try
    binding some data items when there are no existing `div` tags. The body of code
    for this is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为还有一个情况值得探讨。到目前为止的 `.data()` 示例都使用了文档中预先存在的 `div` 标签。现在让我们尝试在没有现有 `div` 标签的情况下绑定一些数据项。这个代码的主体如下：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.12): [http://goo.gl/5gsEGe](http://goo.gl/5gsEGe). The output has
    been omitted as there are no visuals.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.12): [http://goo.gl/5gsEGe](http://goo.gl/5gsEGe). 输出已被省略，因为没有视觉元素。'
- en: 'This does not create any DOM elements, since we do not chain any functions
    to create them after `.data()`. However, the variable selector is a valid selector
    with three items. In our visual, it would look like the following diagram, where
    the blue squares are empty:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会创建任何 DOM 元素，因为我们没有在 `.data()` 之后链式调用任何函数来创建它们。然而，变量选择器是一个有效的选择器，有三个项目。在我们的视觉中，它看起来像以下图表，其中蓝色方块是空的：
- en: '![Data binding](img/B04230_02_12.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![数据绑定](img/B04230_02_12.jpg)'
- en: 'If you take a look at the output created on the console, you will see that
    this selector indeed has an array of three items:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看控制台创建的输出，你会看到这个选择器确实有一个包含三个项目的数组：
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output does not necessarily show the data, but it does demonstrate that
    the selector consists of three items. Our conceptual model shows more, but it
    is only a conceptual model after all, and intended for understanding and not for
    representing the underlying data structures.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 输出不一定显示数据，但它确实表明选择器由三个项目组成。我们的概念模型显示更多，但毕竟它只是一个概念模型，旨在理解和表示底层数据结构，而不是实际的数据结构。
- en: Now let's see how we instruct D3.js to create some visuals for the data items
    to fill in those blue squares, and put something on the screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们如何指导 D3.js 为数据项创建一些视觉元素来填充那些蓝色方块，并将它们显示在屏幕上。
- en: Specifying the entering elements with .enter()
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .enter() 指定进入元素
- en: To create visuals with D3.js, we need to call the `.enter()` method of the selector
    after the call to `.data()`. Then we chain the other method calls to append one
    or more DOM elements, and normally, also call various functions for setting the
    properties of those DOM elements.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 D3.js 创建视觉元素，我们需要在调用 `.data()` 方法之后调用选择器的 `.enter()` 方法。然后我们将其他方法调用链式连接起来，以添加一个或多个
    DOM 元素，并且通常还会调用各种函数来设置这些 DOM 元素的属性。
- en: 'To exemplify the use of `.enter()`, let''s take a look at the last example
    from the previous section, where we started without any `div` tags in the body
    and used D3.js to bind three integers:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 `.enter()` 的用法，让我们看看上一节中的最后一个示例，其中我们从页面的 `div` 标签开始，并使用 D3.js 绑定了三个整数：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now using the selector variable, we call the `.enter()` function and assign
    it to a variable named `entering`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过选择器变量，我们调用 `.enter()` 函数并将其分配给一个名为 `entering` 的变量：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The value of `entering` will represent the new items in the selector that need
    to be created. `selector` did not have any `div` tags selected, and since we bound
    to three items, this variable represents the three new items in the selector that
    need to be created.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`entering` 的值将代表选择器中需要创建的新项目。`selector` 没有选择任何 `div` 标签，并且因为我们绑定了三个项目，所以这个变量代表选择器中需要创建的三个新项目。'
- en: 'We can then use the entering value and call functions to specify how to render
    the visuals for each item:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用进入值并调用函数来指定每个项目的视觉渲染方式：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.13): [http://goo.gl/HFdspR](http://goo.gl/HFdspR).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.13): [http://goo.gl/HFdspR](http://goo.gl/HFdspR).'
- en: 'After execution, the value of `selector` contains three items, with both values
    assigned and the DOM elements created:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，`selector` 的值包含三个项目，其中值已分配并且 DOM 元素已创建：
- en: '![Specifying the entering elements with .enter()](img/B04230_02_13.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 指定进入元素](img/B04230_02_13.jpg)'
- en: 'The resulting output on the page will be as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上生成的输出将如下所示：
- en: '![Specifying the entering elements with .enter()](img/B04230_02_14.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 指定进入元素](img/B04230_02_14.jpg)'
- en: 'Examining the resulting DOM, we see that three `div` tags have been created:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 检查生成的 DOM，我们看到创建了三个 `div` 标签：
- en: '![Specifying the entering elements with .enter()](img/B04230_02_15.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 指定进入元素](img/B04230_02_15.jpg)'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I will leave it as an exercise for you to examine the properties of these elements
    for verifying the creation of the `__data__` property and assignment of the values.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把这个作为练习留给你，检查这些元素的属性以验证 `__data__` 属性的创建和值的分配。
- en: Adding new items using .enter()
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .enter() 添加新项目
- en: Now that we have created DOM elements from data without any existing visuals,
    let's change the code to update the data by adding a new datum upon the press
    of a button.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从数据中创建了没有现有视觉的 DOM 元素，让我们修改代码，通过按按钮添加新数据来更新数据。
- en: In D3.js, data which need new visuals created are said to be in a state referred
    to as *entering*. After calling `.data()`, we can call the `.enter()` method on
    that same resulting selector. This method identifies the items in the selector
    that are entering, and hence require visuals to be created. We then simply chain
    methods on the result of `.enter()` to tell D3.js how each data item should be
    visualized.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 D3.js 中，需要创建新视觉数据的称为 *entering* 状态的数据。在调用 `.data()` 之后，我们可以在同一个结果选择器上调用 `.enter()`
    方法。此方法识别选择器中进入的项目，因此需要创建视觉元素。然后我们只需在 `.enter()` 的结果上链式调用方法，告诉 D3.js 每个数据项应该如何可视化。
- en: Let's change our code a little bit to demonstrate this in action.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改一下代码，以展示这一过程。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.14): [http://goo.gl/TuVYQu](http://goo.gl/TuVYQu)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.14): [http://goo.gl/TuVYQu](http://goo.gl/TuVYQu)'
- en: 'This code makes a few modifications to the previous example. First we add a
    button that can be pressed. This button will call a function named `render()`
    and pass an array of four values to it, the first three of which are identical
    in value. There also exists a new datum at the end:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码对前面的示例进行了一些修改。首先我们添加了一个按钮，可以按下。此按钮将调用名为 `render()` 的函数，并向它传递一个包含四个值的数组，其中前三个值相同。在末尾还有一个新的数据项：
- en: '[PRE16]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The render function itself does the selection and creation of the new visual
    elements, but it uses the values passed to the function instead of a hard-coded
    array of values.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`render` 函数本身执行选择和创建新视觉元素的操作，但它使用传递给函数的值而不是硬编码的值数组。'
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When the page is first loaded, we call render, telling it to create elements
    in a different array.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面首次加载时，我们调用 `render`，告诉它在一个不同的数组中创建元素。
- en: '[PRE18]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The initial page that is loaded will contain the following content:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 加载的初始页面将包含以下内容：
- en: '![Adding new items using .enter()](img/B04230_02_16.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 添加新项目](img/B04230_02_16.jpg)'
- en: 'When we press the button we call render again, but pass it four values. This
    results in the content on the page changing as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下按钮时，我们再次调用 `render`，但传递四个值。这导致页面上的内容如下所示：
- en: '![Adding new items using .enter()](img/B04230_02_17.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 添加新项目](img/B04230_02_17.jpg)'
- en: 'This may appear as if the previously existing `div` tags were replaced with
    four new ones, but what happens is actually more subtle. The second time that
    `render()` is called, the call to `.selectAll(''div'')` creates a selector that
    has three items, each of which has DOM elements and their bound data:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是之前存在的`div`标签被四个新的标签替换了，但实际上发生的事情要微妙得多。当第二次调用`render()`时，对`.selectAll('div')`的调用创建了一个有三个项目的选择器，每个项目都有DOM元素和它们绑定的数据：
- en: '![Adding new items using .enter()](img/B04230_02_18.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 添加新项目](img/B04230_02_18.jpg)'
- en: Then, `.data([10, 20, 30, 40])` is executed. D3.js iterates this array, and
    it compares the value of each datum to the item in the selector at the same index.
    In this case, the items at positions 0, 1, and 2 have the values `10`, `20`, and
    `30`, which are each equal to the values at the same position in the data. Therefore,
    D3.js does not do anything to these items. But the fourth value, `40`, does not
    have an associated item in the selector.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`.data([10, 20, 30, 40])`被执行。D3.js遍历这个数组，并将每个数据项的值与选择器中相同索引的项目进行比较。在这种情况下，位置0、1和2的项目具有`10`、`20`和`30`的值，这些值分别等于数据中相同位置上的值。因此，D3.js对这些项目没有任何操作。但是第四个值`40`在选择器中没有关联的项目。
- en: '![Adding new items using .enter()](img/B04230_02_19.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 添加新项目](img/B04230_02_19.jpg)'
- en: 'Therefore, D3.js will create a new item in the selector for the datum 40, and
    then apply the functions for creating the visuals, resulting in the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，D3.js将为数据40在选择器中创建一个新项目，然后应用创建视觉的函数，结果如下：
- en: '![Adding new items using .enter()](img/B04230_02_20.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .enter() 添加新项目](img/B04230_02_20.jpg)'
- en: D3.js has left the first three items (and their DOM elements) untouched, and
    added new DOM elements for just the `40` datum.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js保留了前三个项目（及其DOM元素）不变，并为只有`40`数据项添加了新的DOM元素。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One thing to point out in this example is that I did not set the ID property,
    and hence the conceptual selector does not show the property.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有一点需要指出的是，我没有设置ID属性，因此概念选择器没有显示该属性。
- en: Updating values
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新值
- en: Now let's look at an example where we change the value of several of the items
    in our data. In this case, we do not want to remove and insert a new visual in
    the DOM, but to simply update the properties in the DOM to represent a change
    in the underlying values.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一个例子，我们改变数据中几个项目的值。在这种情况下，我们不想在DOM中删除和插入一个新的视觉元素，而是简单地更新DOM中的属性以表示底层值的改变。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An example of an update like this could be the price of a stock that needs to
    be updated.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这种更新的一个例子可能是需要更新的股票价格。
- en: 'To demonstrate this, let''s make a quick change to the previous example, where
    when we click the button, we will now execute the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们快速修改之前的例子，当我们点击按钮时，我们现在将执行以下操作：
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.15): [http://goo.gl/nyUrRL](http://goo.gl/nyUrRL)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.15): [http://goo.gl/nyUrRL](http://goo.gl/nyUrRL)'
- en: 'On pressing the button, we get the following result:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 按下按钮后，我们得到以下结果：
- en: '![Updating values](img/B04230_02_21.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![更新值](img/B04230_02_21.jpg)'
- en: Nothing has changed on the page! Shouldn't the page be displaying 20, 30, and
    50?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上没有任何变化！难道页面不应该显示20、30和50吗？
- en: 'This gets into some of the subtleties of D3.js data binding. Let''s step through
    this to explain this result:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到D3.js数据绑定的一些微妙之处。让我们逐步解释这个结果：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The call to `.selectAll(''div'')` identifies the three `div` tags when the
    page was loaded:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，`.selectAll('div')`的调用识别了三个`div`标签：
- en: '![Updating values](img/B04230_02_22.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![更新值](img/B04230_02_22.jpg)'
- en: 'Following that, the call to `.data()` binds new values to each item in the
    selector:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，对 `.data()` 的调用将新值绑定到选择器中的每个项目：
- en: '![Updating values](img/B04230_02_23.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![更新值](img/B04230_02_23.jpg)'
- en: D3.js has changed the bound values, but all the items were reused, and hence,
    are not tagged as entering. Therefore, the following statement results in an empty
    set of entering items.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js已经改变了绑定的值，但是所有项目都被重用了，因此没有被标记为进入。因此，以下语句的结果是一个空的进入项目集。
- en: '[PRE21]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As a result, the chained methods are not executed, and the DOM elements are
    not updated.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，链式方法没有被执行，DOM元素也没有被更新。
- en: 'How do we fix this? It''s actually quite simple: we need to handle both, the
    case of entering elements and the case of the already existing ones. To do this,
    change the render function to the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？实际上非常简单：我们需要处理进入元素和已存在元素的情况。为此，将渲染函数更改为以下内容：
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The only difference is that we have added the following line:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的不同之处在于我们添加了以下行：
- en: '[PRE23]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we chain methods to the original selector, the chained functions will
    be applied to all the items in the selector that are neither entering nor exiting
    (we cover exiting in the next section). And the result is what we expected:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将方法链接到原始选择器时，链接的函数将应用于选择器中既不是进入也不是退出的所有项目（我们将在下一节中介绍退出）。结果是我们所期望的：
- en: '![Updating values](img/B04230_02_24.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![更新值](img/B04230_02_24.jpg)'
- en: Removing items with .exit()
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .exit() 移除项目
- en: Now let's discuss how visuals change when items are removed from the collection
    of bound data. To handle exit, we simply need to use the `.exit()` function on
    the result of `.data()`. The return value of `.exit()` is a collection of the
    selector items which D3.js has determined need removal from the visualization
    based upon the change in data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来讨论当从绑定数据的集合中移除项目时，视觉如何变化。为了处理退出，我们只需要在`.data()`的结果上使用`.exit()`函数。`.exit()`的返回值是D3.js根据数据变化确定需要从可视化中移除的项目选择器集合。
- en: 'To demonstrate the removal of items, we will make a couple of simple modifications
    to the previous example. First, let''s change the button code to render the following
    array upon clicking:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示项目的移除，我们将对之前的示例进行一些简单的修改。首先，让我们更改按钮代码，以便在点击时渲染以下数组：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When we execute the page with this change, we get the following result:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行这个更改后的页面时，我们得到以下结果：
- en: '![Removing items with .exit()](img/B04230_02_25.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .exit() 移除项目](img/B04230_02_25.jpg)'
- en: Conceptually, we would have expected the resulted as a page with just 5 and
    15, and not 5, 15, and 30.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，我们本应期望得到一个只有5和15的页面，而不是5、15和30。
- en: 'The reason for this result is again because of the way that D3.js handles data
    binding. When we call `.data()` with the updated data, D3.js attempts to reconcile
    the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结果的原因再次是因为D3.js处理数据绑定的方式。当我们调用`.data()`并使用更新后的数据时，D3.js试图解决以下问题：
- en: '![Removing items with .exit()](img/B04230_02_26.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .exit() 移除项目](img/B04230_02_26.jpg)'
- en: 'Since all that `.data()` does is update the bound value in each item of the
    selector, and since there are fewer values than the selector items, we get the
    following selector as a result:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`.data()`所做的只是更新选择器中每个项目的绑定值，并且由于值比选择器项目少，所以我们得到以下选择器作为结果：
- en: '![Removing items with .exit()](img/B04230_02_27.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .exit() 移除项目](img/B04230_02_27.jpg)'
- en: We then call our code to handle the enter and update states. In this case, there
    are no entering items, whereas items at positions 0 and 1 are scheduled for update.
    Hence, the first two div tags get new text values, and the third div is left unchanged
    in the DOM.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用我们的代码来处理进入和更新状态。在这种情况下，没有进入的项目，而位置0和1的项目被安排进行更新。因此，前两个div标签获得新的文本值，第三个div在DOM中保持不变。
- en: 'All that we have to do to fix this is make a call to `.exit()`, and use the
    results of this call to remove those items from the DOM. We can modify `render()`
    to the following, which gives us our desired result:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们只需要调用`.exit()`，并使用这个调用的结果从DOM中移除这些项目。我们可以将`render()`修改如下，这样我们就得到了期望的结果：
- en: Note
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (2.16): [http://goo.gl/IkIjGY](http://goo.gl/IkIjGY)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (2.16): [http://goo.gl/IkIjGY](http://goo.gl/IkIjGY)'
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The only change is the addition of the last two lines. Now when we press the
    button, we get the desired result:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的改变是最后两行的添加。现在当我们按下按钮时，我们得到期望的结果：
- en: '![Removing items with .exit()](img/B04230_02_28.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![使用 .exit() 移除项目](img/B04230_02_28.jpg)'
- en: A few notes for the wise about the general update pattern
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于一般更新模式的几点注意事项
- en: To close this chapter, I'd like to emphasize several points about managing visuals
    based upon data using D3.js. I believe these will definitely help you avoid problems
    in learning D3.js. Having come from other development platforms where data binding
    works in a different manner, I definitely struggled with these issues, and I want
    to pass along the insights that have I have learned to save you a lot of stress.
    It's kind of a long list, but I believe it to be very valuable.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这一章，我想强调一些关于使用D3.js基于数据管理视觉的要点。我相信这绝对会帮助你避免在学习D3.js时遇到问题。由于我从其他开发平台（在这些平台上数据绑定以不同的方式工作）过来，我确实遇到了这些问题，我想分享我所学到的见解，以节省你很多压力。这有点长，但我相信它非常有价值。
- en: A visualization is almost always based upon data, and is not just coded explicitly.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化几乎总是基于数据，而不仅仅是显式编码。
- en: Normally, a D3.js application, on page load, will perform a `.selectAll()` on
    the document for the DOM elements that would represent data. Often, the result
    of this selection does not have any elements, as the page was just loaded.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，D3.js 应用程序在页面加载时会对文档执行 `.selectAll()`，以表示数据的 DOM 元素。通常，这个选择的结果没有任何元素，因为页面刚刚加载。
- en: A call is then made to `.data()` to bind data to the selector that results from
    the selection.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后调用 `.data()` 将数据绑定到选择的结果选择器。
- en: '`.data()` iterates across the datum that are passed to it, and ensures that
    there are items in the selector to correlate the datum to the visuals. The value
    of the datum is copied into this item. DOM elements are not created by the call
    to `.data()`.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.data()` 遍历传递给它的数据值，并确保选择器中有项目可以关联数据到视觉上。数据值的值被复制到这个项目上。DOM 元素不是通过 `.data()`
    调用创建的。'
- en: Data in many apps changes dynamically over time without reloading the page,
    either by user interaction or through code that updates the data based upon other
    events. You would want to update the visualization when this happens. Therefore,
    you will need to call `.data()` multiple times.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多应用程序中，数据会随着时间动态变化，而无需重新加载页面，无论是通过用户交互还是通过基于其他事件的代码更新数据。当这种情况发生时，你希望更新可视化。因此，你需要多次调用
    `.data()`。
- en: If the number of items in the data is more than the number of items in the selector
    it is applied to, then more selector items will be created at the end of the selector.
    These will be marked as in a state referred to as entering. These will be accessible
    using the `.enter()` function on the selector. You then chain the function calls
    to create DOM elements for each new item in the selector.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据中的项目数量多于应用到的选择器中的项目数量，那么在选择器的末尾将创建更多的选择器项。这些项将被标记为进入状态。你可以通过选择器的 `.enter()`
    函数访问它们。然后，你可以链式调用函数来为选择器中的每个新项目创建 DOM 元素。
- en: If the number of items in the data is less than the number of items in the selector,
    then selector items will be removed from the end of the selector. These will be
    marked as exiting. These selector items will be available through a call to the
    `.exit()` function. These DOM elements will not be removed from the DOM automatically,
    and you will need to make a call to `.remove()` to make this so.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据中的项目数量少于选择器中的项目数量，那么选择器的末尾将移除选择器项。这些项将被标记为退出状态。这些选择器项可以通过调用 `.exit()` 函数获得。这些
    DOM 元素不会自动从 DOM 中移除，你需要调用 `.remove()` 来实现这一点。
- en: To optimize this process, D3.js really only concerns itself with ensuring the
    number of items in the selector matches the number of datum that you specify with
    `.data()`.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了优化这个过程，D3.js 实际上只关注确保选择器中的项目数量与通过 `.data()` 指定的数据量相匹配。
- en: The data associated with a selector item is by value and not reference. Hence,
    `.data()` copies data into the `__data__` property on the DOM element. On subsequent
    calls to `.data()`, there is no comparison performed between the datum and the
    value of the `__data__` property.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与选择器项关联的数据是通过值而不是引用。因此，`.data()` 方法会将数据复制到 DOM 元素的 `__data__` 属性上。在随后的 `.data()`
    调用中，不会对数据值与 `__data__` 属性的值进行比较。
- en: To update data, you write code to chain methods for generating DOM on the result
    of a selection, in addition to code that chains on the `.enter()` and `.exit()`
    functions.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新数据，你需要编写代码来链式调用生成 DOM 的方法，这些方法基于选择的结果，以及链式调用 `.enter()` 和 `.exit()` 函数的代码。
- en: If a new datum has the same value as is already associated to a selector item,
    D3.js does not care. Even though the values have not changed, you will be rendering
    it again, but reusing the DOM elements. You will need to provide your own facilities
    to manage not setting the properties again if the data is the same, so as to optimize
    the browser re-rendering the elements.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新的数据值与已关联到选择器项的值相同，D3.js 并不关心。即使值没有改变，你仍然会重新渲染它，但会重用 DOM 元素。你需要提供自己的设施来管理在数据相同的情况下不再次设置属性，以优化浏览器重新渲染元素。
- en: If you have 1,000,000 data items, and then change just one and call `.data()`
    again, D3.js will inherently force you to loop through all the 1,000,000 items.
    There will likely be visual updates to just one set of visuals, but your application
    will make the effort to iterate through everything every time. However, if you
    have 1,000,000 data items, you probably should be looking at another means of
    summarizing your data before visualizing it.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一百万个数据项，然后只更改其中一个并再次调用 `.data()`，D3.js 将固有的迫使你遍历所有一百万个项。可能只有一组视觉元素会进行视觉更新，但你的应用程序每次都会努力遍历所有内容。然而，如果你有一百万个数据项，你可能在可视化之前应该寻找另一种总结数据的方法。
- en: D3.js optimizes around the reuse of visual elements. The assumption is that
    a visualization will only be periodically making updates to the exiting items,
    and that addition or removal of items will be relatively infrequent. Hence, the
    general update pattern would consist of exit, update, and exit, and not comparing
    data.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 优化了视觉元素的复用。其假设是一个可视化只会定期更新现有项目，并且添加或删除项目相对较少。因此，一般的更新模式将包括退出、更新和退出，而不是比较数据。
- en: Normally, the rule of thumb is that one or two thousand data items and the associated
    visuals are handled pretty effectively by D3.js.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，经验法则是，一千或两千个数据项及其相关视觉元素可以通过 D3.js 非常有效地处理。
- en: Well, that's quite a long list. But as we progress through this book, all the
    examples will follow these guidelines. By the end, these will be second nature.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这是一个相当长的列表。但随着我们通过这本书的进展，所有示例都将遵循这些指南。到那时，这些将变得习以为常。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered many examples to demonstrate how you can create
    data-driven visualizations using D3.js. We started with examples of the D3.js
    concept of selectors, using them to select elements from within the DOM, and discussed
    how selectors are used to map data items to the visuals that D3.js creates. We
    then examined several scenarios of binding new data, updating data, and removing
    data from a D3.js visualization.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过许多示例展示了如何使用 D3.js 创建数据驱动的可视化。我们从 D3.js 的选择器概念示例开始，使用它们从 DOM 中选择元素，并讨论了选择器是如何用于将数据项映射到
    D3.js 创建的视觉元素。然后，我们检查了绑定新数据、更新数据和从 D3.js 可视化中删除数据的好几种场景。
- en: Throughout this chapter, the visuals that we created with D3.js were pure HTML
    objects, primarily `div` tags. Although we changed the size of these `div` tags,
    the background color, and included text within them, the examples are a very basic
    form of graphical representation.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 D3.js 创建的视觉元素是纯 HTML 对象，主要是 `div` 标签。尽管我们改变了这些 `div` 标签的大小、背景颜色，并在其中包含了文本，但示例只是图形表示的一种非常基本的形式。
- en: In the next chapter, we will start to get significantly more graphical by changing
    the focus of the examples towards working with SVG, creating real graphics (not
    just HTML `div` tags), and setting a framework for the rich visualizations that
    we will create later in the book.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过将示例的重点转向处理 SVG、创建真实图形（而不仅仅是 HTML `div` 标签）以及为我们在本书后面创建的丰富可视化设置框架，开始显著增加图形内容。
