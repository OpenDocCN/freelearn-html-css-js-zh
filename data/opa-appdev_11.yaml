- en: Chapter 11. Developing a Social Mobile Application – LiveRoom
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 开发社交移动应用 – LiveRoom
- en: In this chapter, we will build a social mobile web application that we call
    LiveRoom. LiveRoom offers functionality similar to a forum. Users can login and
    post discussions and messages; they can also sign in with their Facebook account.
    The application will be able to support both mobile devices and desktop browsers.
    The following is a screenshot of LiveRoom and the source code is available at
    [https://github.com/winbomb/opapackt/tree/master/liveroom](https://github.com/winbomb/opapackt/tree/master/liveroom)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个名为 LiveRoom 的社交移动Web应用。LiveRoom 提供类似于论坛的功能。用户可以登录并发布讨论和消息；他们也可以使用Facebook账户登录。该应用将支持移动设备和桌面浏览器。以下是LiveRoom的截图，源代码可在[https://github.com/winbomb/opapackt/tree/master/liveroom](https://github.com/winbomb/opapackt/tree/master/liveroom)找到。
- en: '![Developing a Social Mobile Application – LiveRoom](img/3749OS_11_01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![开发社交移动应用 – LiveRoom](img/3749OS_11_01.jpg)'
- en: Project structure
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'First, let''s have a look at the project structure. It''s a classical Opa project
    structure; we can create a similar structure with the following command line:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下项目结构。这是一个经典的Opa项目结构；我们可以使用以下命令行创建一个类似的结构：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Project structure](img/3749OS_11_02.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![项目结构](img/3749OS_11_02.jpg)'
- en: '`liveroom.opa`: The entry point of the application. It declares the database,
    dispatches the requests, and starts the web server.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liveroom.opa`: 应用的入口点。它声明数据库，分发请求，并启动Web服务器。'
- en: '`login.opa`: The login module. It shows the login page, handles the `UserContext`
    when the user logs in and logs out, and connects to Facebook when the user tries
    to sign in with Facebook.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login.opa`: 登录模块。它显示登录页面，处理用户登录和注销时的 `UserContext`，并在用户尝试使用Facebook登录时连接到Facebook。'
- en: '`model.opa`: The data model of the application. It defines data models and
    deals with database reading and writing.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model.opa`: 应用的数据模型。它定义数据模型并处理数据库的读写操作。'
- en: '`view.opa`: The UI (user interface). It shows the pages, maps what we fetch
    from the database into XHTML, and then shows them on the page. And moreover, it
    gets the user''s input and tries to insert data into the database through the
    `Model` module.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view.opa`: 用户界面（UI）。它显示页面，将我们从数据库中获取的内容映射到XHTML，然后在页面上显示它们。此外，它获取用户的输入，并尝试通过
    `Model` 模块将数据插入数据库。'
- en: '`style.css`: The external style sheet. It''s registered when the web server
    starts, so we can use styles in this file application scope.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css`: 外部样式表。它在Web服务器启动时注册，因此我们可以在应用程序范围内使用此文件中的样式。'
- en: To compile and run the application, type `make run`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行应用，请输入 `make run`。
- en: Authorizing a user
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权用户
- en: In this section, we will discuss how to make a simple sign in and sign out system
    that is an essential part of this forum and a subset of functionality that is
    frequently needed for other types of websites as well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何创建一个简单的登录和注销系统，这是本论坛的一个基本部分，也是其他类型网站经常需要的功能子集。
- en: Signing in and signing out
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录和注销
- en: 'For simplicity, we do not provide a sign up process for the application. Users
    who input a non-blank username and password can log in to the system. `Model.auth`
    returns `{none}` if authorization fails, otherwise it returns `{user}`, where
    user is a value of type `User.t` containing information about the current user.
    Only signed in users will be able to create topics and post messages. This section
    will show you what you should do when users sign in. The following code fragment
    demonstrates the sign in, the code can be found in the `login.opa` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们不提供应用的注册流程。输入非空用户名和密码的用户可以登录系统。如果授权失败，`Model.auth` 返回 `{none}`，否则返回 `{user}`，其中用户是包含当前用户信息的类型
    `User.t` 的值。只有已登录的用户才能创建主题和发布消息。本节将展示用户登录时应执行的操作。以下代码片段演示了登录过程，代码可以在 `login.opa`
    文件中找到：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The type `Login.user` is a sum type: `{unlogged}` means the current user has
    not signed in; `{Usert.t user}` means the current user has signed in and user
    information is stored in this record. As we can see from the second line, `UserContext`
    is used to manage the login state. `UserContext` is a high-level mechanism based
    on cookies. It is used to associate values with each client. The user''s data
    stored in `UserContext` can only be accessed and modified by the user who owns
    this data. For most of our needs, we only need to use the following functions
    supplied by `UserContext`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 类型 `Login.user` 是一个联合类型：`{unlogged}` 表示当前用户尚未登录；`{Usert.t user}` 表示当前用户已登录，并且用户信息存储在此记录中。从第二行我们可以看到，`UserContext`
    用于管理登录状态。`UserContext` 是基于 cookie 的高级机制，用于将值与每个客户端关联。存储在 `UserContext` 中的用户数据只能由拥有此数据的使用者访问和修改。对于我们的大多数需求，我们只需要使用
    `UserContext` 提供的以下函数。
- en: Use the `UserContext.make` function to create a `UserContext` with a default
    value; this is what we do in the second line.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `UserContext.make` 函数创建一个带有默认值的 `UserContext`；这就是我们在第二行所做的事情。
- en: Use the `UserContext.change` function to change the current state of the `UserContext`
    for this user. Note that in line nine of the previous code, we changed the state
    to `~{user}` after a successful authorization.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `UserContext.change` 函数更改此用户的 `UserContext` 当前状态。注意，在前面的代码的第 9 行，我们在成功授权后更改了状态为
    `~{user}`。
- en: 'Use the `UserContext.remove` function to remove the current value. The following
    code removes the value when a user signs out:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `UserContext.remove` 函数移除当前值。以下代码在用户注销时移除值：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `UserContext.get` function to get the current value of the `UserContext`.
    The following code uses this function to get the name of the current signed in
    user:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `UserContext.get` 函数获取 `UserContext` 的当前值。以下代码使用此函数获取当前已登录用户的姓名：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is how we can implement a default user login. However, we can also allow
    the user to finish signing in with his or her Facebook or Twitter account.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们实现默认用户登录的方式。然而，我们也可以允许用户使用其 Facebook 或 Twitter 账户完成登录。
- en: Signing in with Facebook
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Facebook 登录
- en: 'Opa provides the modules FbAuth and Twitter to connect with Facebook and Twitter
    respectively. In the login page of LiveRoom, there is a link button that allows
    the user to sign in with Facebook. There are some additional steps required to
    authenticate with Facebook, and it is beyond the scope of this book to go into
    all the details of authenticating with Facebook, since we instead want to focus
    on the Opa language. Those who would like to know more about Facebook authentication
    should review the following excellent tutorial: [https://github.com/akoprow/opa-devcamp-facebook](https://github.com/akoprow/opa-devcamp-facebook).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Opa 提供了 FbAuth 和 Twitter 模块，分别用于连接 Facebook 和 Twitter。在 LiveRoom 的登录页面中，有一个链接按钮，允许用户使用
    Facebook 登录。与 Facebook 进行身份验证需要一些额外的步骤，但这本书的范围不包括所有关于 Facebook 身份验证的细节，因为我们更希望专注于
    Opa 语言。那些想了解更多关于 Facebook 身份验证的人应该查看以下优秀的教程：[https://github.com/akoprow/opa-devcamp-facebook](https://github.com/akoprow/opa-devcamp-facebook)。
- en: 'Note that you should replace the x''s in `login.opa` with your real data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你应该将 `login.opa` 中的 x 替换为你的真实数据：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`App_id` and `app_key` are identical, and `app_secret` should not be shared
    with anyone.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`App_id` 和 `app_key` 是相同的，而 `app_secret` 不应与任何人共享。'
- en: The application
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序
- en: 'LiveRoom is all about posting topics and messages. When users sign in, they
    can start discussions by creating new topics. The newly created topics will be
    shown in the list of most recent discussions, namely the latest discussions list.
    If a user clicks on a topic, he/she will enter the discussion and get a list of
    messages related to the topic. If he/she has signed in, he/she will be able to
    post a message related to the topic that he/she selected, or comment on an existing
    message. The following figure shows the data model of topic, message, and comment:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: LiveRoom 主要关于发布主题和消息。当用户登录时，他们可以通过创建新主题来开始讨论。新创建的主题将显示在最新讨论列表中，即最新讨论列表。如果用户点击一个主题，他/她将进入讨论并获取与该主题相关的消息列表。如果用户已登录，他/她将能够发布与所选主题相关的消息，或对现有消息进行评论。以下图显示了主题、消息和评论的数据模型：
- en: '![The application](img/3749OS_11_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序](img/3749OS_11_03.jpg)'
- en: 'And here are the type definitions in Opa:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Opa 中的类型定义：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With these data model definitions in place, we can declare our database `liveroom`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些数据模型定义到位后，我们可以声明我们的数据库 `liveroom`：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The database path `next_id` is an integer holding the max topic id; this is
    a solution to simulate an auto-increment key that MongoDB does not natively support.
    The `topics` path stores the topics that the users users create. The primary key
    is the topic's id.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库路径`next_id`是一个整数，持有最大主题id；这是模拟MongoDB原生不支持的自增键的解决方案。`topics`路径存储用户创建的主题。主键是主题的id。
- en: Listing topics
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出主题
- en: 'On the main page of LiveRoom, we will display recently discussed topics that
    were fetched from the database. In Opa this is an easy task. The following function
    query retrieves a specified page of topics:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在LiveRoom的主页上，我们将显示从数据库中检索到的最近讨论的话题。在Opa中，这是一个简单的任务。以下函数查询检索指定页面的主题：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Really simple, isn''t it? As we have discussed in [Chapter 7](ch07.html "Chapter 7. Working
    with Databases"), *Working with Databases*, we can read data from the database
    by using a database path such as `/liveroom/topics`. The statements in square
    brackets are querying conditions. The query result `topics` is a dbset, we convert
    it into iteration in the next line, so we can loop the result in the following
    way:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很简单，不是吗？正如我们在[第7章](ch07.html "第7章。与数据库一起工作")中讨论的，*与数据库一起工作*，我们可以通过使用数据库路径（如`/liveroom/topics`）从数据库中读取数据。方括号中的语句是查询条件。查询结果`topics`是一个dbset，我们在下一行将其转换为迭代，这样我们就可以以下面的方式循环结果：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is exactly what we do in the user interface code. Please refer to `list_topics`
    in the module View for details. To list messages and comments, you will also need
    to use similar code. First, we fetch a topic from the database for a given id:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们在用户界面代码中所做的。请参阅模块View中的`list_topics`以获取详细信息。要列出消息和评论，您也需要使用类似的代码。首先，我们根据给定的id从数据库中检索一个主题：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then iterate on messages and comments in the module View to convert them
    into XHTML and display them on the page. The code is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在模块View中的消息和评论上进行迭代，将它们转换为XHTML并在页面上显示。代码如下：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Check the function `show_messages` in the module View for the complete code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看模块View中的`show_messages`函数以获取完整的代码。
- en: Creating a topic
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主题
- en: 'One of the most important use cases of LiveRoom is creating a topic. When users
    have signed in, they will be able to create a topic by clicking on **new topic**
    on the main page. This will navigate users to a topic creating page where they
    can input the title and content. When users click on the **create** button, the
    function `add_topic` will be invoked:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: LiveRoom最重要的用例之一是创建一个主题。当用户登录后，他们可以通过点击主页上的**新主题**来创建一个主题。这将导航用户到一个创建主题的页面，在那里他们可以输入标题和内容。当用户点击**创建**按钮时，将调用`add_topic`函数：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `add_topic` function first creates a record of type `Topic.t` from the
    user''s input. It then tries to insert the topic into the database by calling
    the `Model.insert` function defined as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_topic`函数首先从用户的输入中创建一个类型为`Topic.t`的记录。然后，它尝试通过调用如下定义的`Model.insert`函数将主题插入到数据库中：'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Because there is no auto-increment id in MongoDB, we use the `next_id` function
    to get a unique identifier. The function returns `{none}` if it fails, otherwise
    it returns `some(id)`, where `id` is the next identifier. In the `next_id` function,
    we use the Mongo API `MongoCommands.findAndUpdateOpa` to perform an atomic operation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MongoDB中没有自增id，我们使用`next_id`函数来获取一个唯一的标识符。如果函数失败，则返回`{none}`，否则返回`some(id)`，其中`id`是下一个标识符。在`next_id`函数中，我们使用Mongo
    API `MongoCommands.findAndUpdateOpa`执行原子操作：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Posting messages and comments
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布消息和评论
- en: As we can tell from the data type `Topic.t` that we use to store messages in
    a string map inside a topic, we need a string key to access or update a message.
    In LiveRoom, we use `{topic id}_{system time}_{random string}` as a key. After
    inserting a message, some other fields, such as reply, need to be updated too.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们用来在主题内部字符串映射中存储消息的数据类型`Topic.t`可以看出，我们需要一个字符串键来访问或更新一条消息。在LiveRoom中，我们使用`{topic
    id}_{system time}_{random string}`作为键。在插入消息后，还需要更新一些其他字段，例如回复。
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To post a comment, just append a new item to the list of comments for a given
    topic id and the message key:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要发表评论，只需将一个新项目追加到给定主题id和消息键的评论列表中：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Designing for mobile devices
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为移动设备设计
- en: 'To make sure whether our LiveRoom application is supported on mobile devices,
    we have to do a little more work. A viewport metatag needs to be put into the
    `<head>` tag of the page:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的LiveRoom应用程序在移动设备上得到支持，我们不得不做更多的工作。需要在页面的`<head>`标签中添加一个viewport元标签：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here we use `Resource.full_page` to embed the `viewport` meta tag into our page.
    A detailed description of this function can be found online ([http://doc.opalang.org](http://doc.opalang.org)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `Resource.full_page` 将 `viewport` 元标签嵌入我们的页面。关于此函数的详细描述可以在网上找到([http://doc.opalang.org](http://doc.opalang.org))。
- en: Next, we need to import `bootstrap.responsive` to help our application to be
    more responsive.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要导入 `bootstrap.responsive` 以帮助我们的应用更加响应式。
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can find more information about responsive Bootstrap classes on the Bootstrap
    home page: [http://twitter.github.io/bootstrap/scaffolding.html#responsive](http://twitter.github.io/bootstrap/scaffolding.html#responsive)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Bootstrap 主页上找到更多关于响应式 Bootstrap 类的信息：[http://twitter.github.io/bootstrap/scaffolding.html#responsive](http://twitter.github.io/bootstrap/scaffolding.html#responsive)
- en: 'In our LiveRoom application, we use the responsive Bootstrap class `hide-phone`
    to hide the column `last poster` on mobile phones when listing the topics as there
    may not be enough width. The following code shows how we can do that:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 LiveRoom 应用中，我们使用响应式 Bootstrap 类 `hide-phone` 来隐藏在列出主题时移动手机上的 `最后发布者` 列，因为可能没有足够的宽度。以下代码展示了我们如何做到这一点：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can find the code in the function `main` of `view.opa`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `view.opa` 的 `main` 函数中找到代码。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we described how to write a social mobile web application in
    Opa. First, we talked about the user authorization procedure; we used `UserContext`
    to maintain the login state for a given client. We also mentioned how to connect
    with Facebook in Opa. In the next section, we discussed in detail how to implement
    LiveRoom, this included reading data from the database and displaying it in the
    webpage, and inserting user submitted topics, messages, and comments into the
    database. Please refer to the source code to review the complete code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们描述了如何在 Opa 中编写一个社交移动网页应用。首先，我们讨论了用户授权流程；我们使用 `UserContext` 来维护特定客户端的登录状态。我们还提到了如何在
    Opa 中连接到 Facebook。在下一节中，我们详细讨论了如何实现 LiveRoom，这包括从数据库读取数据并在网页中显示它，以及将用户提交的主题、消息和评论插入到数据库中。请参考源代码以查看完整的代码。
