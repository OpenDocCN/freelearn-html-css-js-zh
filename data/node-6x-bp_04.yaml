- en: Chapter 4. Dont Take a Photograph, Make It – An App for Photographers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。不要拍照，制作它-摄影师的应用程序
- en: In this chapter, we will discuss a topic much discussed in the Node.js community
    around the world–image manipulation using the Node.js architecture and cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Node.js社区在全球范围内广泛讨论的一个话题-使用Node.js架构和云进行图像处理。
- en: As we have seen in the previous chapter, we have two ways to store images and
    files, using a hard disk on our server or directly to the cloud. In [Chapter 03](ch03.html
    "Chapter 3.  Building a Multimedia Application"), *Building a Multimedia Application*,
    we used the approach of uploading directly to our server, storing the images on
    the hard drive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，我们有两种方式来存储图像和文件，一种是在服务器上使用硬盘，另一种是直接存储到云中。在[第03章](ch03.html "第3章。构建多媒体应用程序")中，*构建多媒体应用程序*，我们使用了直接上传到服务器的方法，将图像存储在硬盘上。
- en: In this chapter, we will use a server in the cloud to store and manipulate images
    in our Photobook application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用云中的服务器来存储和处理我们相册应用程序中的图像。
- en: We will use a service called Cloudinary to store and manipulate the images.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为Cloudinary的服务来存储和处理图像。
- en: 'In this chapter, we will cover these topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to set up an MVC application using generator-express
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用generator-express设置MVC应用程序
- en: How to install the cloudinary npm module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装cloudinary npm模块
- en: Implementing the Materialize.css framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Materialize.css框架
- en: How to upload images to the cloud and save meta-data on MongoDB
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何上传图像到云并在MongoDB上保存元数据
- en: How to use Global variables with dot files
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用点文件中的全局变量
- en: Setting up a Cloudinary account and creating folders
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Cloudinary帐户并创建文件夹
- en: How to upload images using the Cloudinary API
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Cloudinary API上传图像
- en: How to render templates using URL parameters in the Cloudinary API
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Cloudinary API中的URL参数呈现模板
- en: What we are building
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建的内容
- en: 'At the end of this chapter, we will have created the following sample application,
    a robust and scalable photobook:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将创建以下示例应用程序，一个强大而可扩展的相册：
- en: '![What we are building](img/image_04_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![我们正在构建的内容](img/image_04_001.jpg)'
- en: Home screen of the photobook application
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相册应用程序的主屏幕
- en: Creating the baseline applications
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基线应用程序
- en: In this chapter, we will use a slightly modified version of the `express-generator`
    that we used in previous chapters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用稍微修改过的`express-generator`的版本，这是我们在之前章节中使用的。
- en: This generator is called `generator-express`; it is heavily based on `express
    generator`, but with a few more features.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器叫做`generator-express`；它在`express generator`的基础上进行了大量的改进。
- en: 'Here are the steps for our installation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们安装的步骤：
- en: 'Open the terminal/shell and type:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a folder called `chapter04`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter04`的文件夹。
- en: 'Open your terminal/shell within the `chapter04` folder and type the following
    command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter04`文件夹中打开您的终端/ shell，并输入以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, fill the questions in this order:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下顺序填写问题：
- en: Choose `N`, we already created the project folder in *step 2*
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`N`，我们已经在*步骤2*中创建了项目文件夹
- en: Choose `MVC` for application type
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`MVC`作为应用程序类型
- en: Choose `Swig` for template engine
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`Swig`作为模板引擎
- en: Choose `None` for CSS preprocessor
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`None`作为CSS预处理器
- en: Choose `None` for database (later in the chapter, we will set up the database
    manually)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`None`作为数据库（在本章后面，我们将手动设置数据库）
- en: Choose `Gulp` for LiveReload and other stuff
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择`Gulp`进行LiveReload和其他内容
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't worry about `Gulp`, if you never heard about it. Later in the book, we
    will see and explain some building tools.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心`Gulp`，如果你从未听说过它。在本书的后面，我们将看到并解释一些构建工具。
- en: 'At the end of the generator, we have the following structure of directories:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成器的最后，我们有以下目录结构：
- en: '![Creating the baseline applications](img/image_04_002.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![创建基线应用程序](img/image_04_002.jpg)'
- en: Application folder structure
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序文件夹结构
- en: Changing the application structure
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改应用程序结构
- en: Unlike the example we used in Chapter 1, *Building a Twitter-Like Application
    Using the MVC Design Pattern*, we will not make major changes to the current structure;
    we will only change the `views` folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在第1章中使用的示例不同，*使用MVC设计模式构建类似Twitter的应用程序*，我们不会对当前的结构进行重大更改；我们只会更改`views`文件夹。
- en: 'As the sample application, there will be a book of pictures; we will add a
    folder named book in the `views` folder:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例应用程序，将有一本图片书；我们将在`views`文件夹中添加一个名为book的文件夹：
- en: Create a folder called `book` inside the `app/views` folder.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`文件夹中创建一个名为`book`的文件夹。
- en: Now we will create a configuration file for the Cloudinary service. Later in
    the chapter, we will discuss all the details about Cloudinary; for now, just create
    a new file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将为Cloudinary服务创建一个配置文件。在本章后面，我们将讨论有关Cloudinary的所有细节；现在，只需创建一个新文件。
- en: Create a file called `.env` at the root folder.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根文件夹中创建一个名为`.env`的文件。
- en: Now, we have the necessary basis to move forward.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有必要的基础来继续前进。
- en: Adding Node modules to deal with images and the Cloudinary cloud service
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加处理图像和Cloudinary云服务的Node模块
- en: Now we will add the necessary modules to our application in the `package.json`
    file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`package.json`文件中为我们的应用程序添加必要的模块。
- en: 'Add the following highlighted lines of code to the `package.json` file:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下突出显示的代码行添加到`package.json`文件中：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With just a few modules, we can build a very robust and scalable application.
    Let''s describe each one:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只需几个模块，我们就可以构建一个非常强大和可扩展的应用程序。让我们描述每一个：
- en: '| Module name | Description | More information |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | 描述 | 更多信息 |'
- en: '| `cloudinary` | Cloud service to store and pipeline image and video files
    | [https://www.npmjs.com/package/cloudinary](https://www.npmjs.com/package/cloudinary)
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `cloudinary` | 用于存储和管道图像和视频文件的云服务 | [https://www.npmjs.com/package/cloudinary](https://www.npmjs.com/package/cloudinary)
    |'
- en: '| `connect-multiparty` | Middleware to accept multipart form upload | [https://www.npmjs.com/package/connect-multiparty](https://www.npmjs.com/package/connect-multiparty)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `connect-multiparty` | 用于接受多部分表单上传的中间件 | [https://www.npmjs.com/package/connect-multiparty](https://www.npmjs.com/package/connect-multiparty)
    |'
- en: '| `dotenv` | Load environment variables | [https://www.npmjs.com/package/dotenv](https://www.npmjs.com/package/dotenv)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `dotenv` | 加载环境变量 | [https://www.npmjs.com/package/dotenv](https://www.npmjs.com/package/dotenv)
    |'
- en: '| `jugglingdb` | Cross–database ORM | [https://www.npmjs.com/package/jugglingdb](https://www.npmjs.com/package/jugglingdb)
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `jugglingdb` | 跨数据库ORM | [https://www.npmjs.com/package/jugglingdb](https://www.npmjs.com/package/jugglingdb)
    |'
- en: '| `jugglingdb-mongodb` | MongoDB connector | [https://www.npmjs.com/package/jugglingdb-mongodb](https://www.npmjs.com/package/jugglingdb-mongodb)
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `jugglingdb-mongodb` | MongoDB连接器 | [https://www.npmjs.com/package/jugglingdb-mongodb](https://www.npmjs.com/package/jugglingdb-mongodb)
    |'
- en: Creating the book controller
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建书籍控制器
- en: We will follow the same generator code pattern that the generator suggests;
    one of the advantages of using this generator is that we already have the MVC
    pattern at our disposal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循生成器建议的相同生成器代码模式；使用此生成器的优势之一是我们已经可以使用MVC模式。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, you can download the example files from the Packpub website, or directly
    from the GitHub book repository.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以从Packpub网站或直接从GitHub书库下载示例文件。
- en: Create a file called `books.js` inside the `controllers` folder.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`文件夹中创建一个名为`books.js`的文件。
- en: 'Add the following code to the `book.js` file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`book.js`文件中：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s explain some important points about the previous code example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一些关于前面代码示例的重要点：
- en: 'In order to use the Cloudinary API inside our views, we need to pass the `cloudinary`
    variable to our views:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在视图中使用Cloudinary API，我们需要将`cloudinary`变量传递给我们的视图：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For best practices when using `multipartMiddleware`, we need to clean up each
    file that we upload to the cloud:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`multipartMiddleware`时，为了最佳实践，我们需要清理上传到云中的每个文件：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Later we will discuss more about the Cloudinary API.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们将讨论更多关于Cloudinary API的内容。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that when you use the multipart connect, it by default loads the image
    to a folder on your hard drive, so you should always delete all the files loaded
    in your application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您使用多部分连接时，默认情况下会将图像加载到硬盘上的文件夹中，因此您应该始终删除应用程序中加载的所有文件。
- en: Creating the book model file
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建书籍模型文件
- en: The procedure for creating models for this application is very similar to what
    we have seen in previous chapters; almost every module's **ORM/ODM** has a very
    similar operation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为此应用程序创建模型的过程与我们在前几章中看到的非常相似；几乎每个模块的**ORM/ODM**都有非常相似的操作。
- en: 'Let''s see how to create the model for the book object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何为书籍对象创建模型：
- en: 'Create a file called `book.js` inside `app/models` and place the following
    code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`文件夹中创建一个名为`book.js`的文件，并放入以下代码：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we are using MongoDB to store the book model. Also remember that you
    must have your local MongoDB up and running before starting the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用MongoDB来存储书籍模型。还记得在启动应用程序之前必须使本地MongoDB运行起来。
- en: Adding a CSS framework to the application
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向应用程序添加CSS框架
- en: In all the chapters of this book, we will always use the most up to date technologies,
    as we have seen in previous chapters with the use of the new Bootstrap (Alpha
    Release).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有章节中，我们将始终使用最新的技术，就像在前几章中使用新的Bootstrap（Alpha Release）一样。
- en: In this chapter in particular, we will use a design pattern known as `Material
    Design`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在本章中，我们将使用一种称为`Material Design`的设计模式。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can read more about the design material at [https://www.google.com/design/spec/material-design/introduction.html](https://www.google.com/design/spec/material-design/introduction.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.google.com/design/spec/material-design/introduction.html](https://www.google.com/design/spec/material-design/introduction.html)上阅读更多关于设计材料的信息。
- en: For this, we'll use a simple `CSS` framework called `Materialize.css`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用一个名为`Materialize.css`的简单`CSS`框架。
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more information about Materialize at this link: [http://materializecss.com/](http://materializecss.com/).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接找到有关Materialize的更多信息：[http://materializecss.com/](http://materializecss.com/)。
- en: 'Replace all of the content from the `app/views/layout.swig` file with the following
    lines of code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`app/views/layout.swig`文件中的所有内容：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To avoid CSS conflict, clean up your `public/css/style.css` file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免CSS冲突，请清理您的`public/css/style.css`文件。
- en: Refactoring the views folder
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构视图文件夹
- en: 'Now we will make a small change to the `app/views` folder and add some more
    files:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将对`app/views`文件夹进行一些小改动并添加一些文件：
- en: 'First off, let''s edit `app/views/index.js`. Replace the original code with the
    following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们编辑`app/views/index.js`。用以下代码替换原始代码：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a file called `add-photo.swig` and add the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`add-photo.swig`的文件，并添加以下代码：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then create a file called `books.swig` and add this code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个名为`books.swig`的文件，并添加以下代码：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a file called `posted-photo.swig` and add the following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`posted-photo.swig`的文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating the .env.js file
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建.env.js文件
- en: 'At this point, we will create the `env.js` file; this file verifies the configurations
    of the Cloudinary service. Create a file called `env.js` inside the `config` folder
    and place the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将创建`env.js`文件；此文件验证了Cloudinary服务的配置。在`config`文件夹中创建一个名为`env.js`的文件，并放入以下代码：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we have a fully configured application; however, we still need to create
    an account on the Cloudinary service.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完全配置的应用程序；但是，我们仍然需要在Cloudinary服务上创建一个帐户。
- en: Creating and configuring a Cloudinary account
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置Cloudinary账户
- en: 'Cloudinary is a cloud service used to store and manipulate images and video
    files; you can find more information about Cloudinary services at [http://cloudinary.com](http://cloudinary.com):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudinary是用于存储和处理图像和视频文件的云服务；您可以在[http://cloudinary.com](http://cloudinary.com)找到有关Cloudinary服务的更多信息：
- en: Go to [https://cloudinary.com/users/register/free](https://cloudinary.com/users/register/free)
    and register for a free account.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://cloudinary.com/users/register/free](https://cloudinary.com/users/register/free)并注册一个免费帐户。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the end of the register form, you can set up a name for your cloud. We chose
    `n6b` (Node.js 6 Blueprints); choose your own name.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册表单的末尾，您可以为您的云设置一个名称。我们选择了`n6b`（Node.js 6蓝图）；选择您自己的名称。
- en: Copy the data (`Environment variable`) from your account right onto your dashboard
    panel, as shown in the following screenshot:![Creating and configuring a Cloudinary
    account](img/image_04_003.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的帐户中复制数据（`环境变量`）并将其直接放到仪表板面板上，如下面的屏幕截图所示：![创建和配置Cloudinary帐户](img/image_04_003.jpg)
- en: Cloudinary dashboard panel
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudinary仪表板面板
- en: 'Now update the following code with your own credentials in the `.env.js` file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`.env.js`文件中使用您自己的凭据更新以下代码：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How Cloudinary works
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloudinary的工作原理
- en: Besides we storing files on Cloudinary, we can use a powerful API to manipulate
    and transform images, apply effects, resize, and do a lot more things without
    using any software on our machine.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在Cloudinary上存储文件之外，我们还可以使用强大的API来操作和转换图像，应用效果，调整大小，以及在我们的机器上不使用任何软件做更多的事情。
- en: 'Let''s go back to the `books.js` controller to check what we used. We extracted
    the extra code inside the promises function to focus on the highlighted lines
    of code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`books.js`控制器，查看我们使用了什么。我们从promises函数中提取了额外的代码，以便专注于突出显示的代码行：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here we set up a folder, `folder: req.body.category`, to store our images,
    and overwrite the default `public_id: req.files.image.originalFilename` to use
    the image name. This is a good practice since the API provides us a `public_id`
    with a random string–nothing wrong but very useful. For example, see a link such
    as this: `http://res.cloudinary.com/demo/image/upload/mydog.jpg`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们设置了一个文件夹，`folder: req.body.category`，用于存储我们的图像，并覆盖了默认的`public_id: req.files.image.originalFilename`，以使用图像名称。这是一个很好的做法，因为API为我们提供了一个带有随机字符串的`public_id`——没有错，但非常有用。例如，查看这样的链接：`http://res.cloudinary.com/demo/image/upload/mydog.jpg`'
- en: 'Instead of this: [http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg](http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这个：[http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg](http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg)。
- en: The commented `eager` property gives the ability to transform the image and
    generate a new image with all the eager options. In this case, we can save a transformed
    image with *280px* of width, *200px* of height, crop with fill content, and if
    we have some faces in the picture, the thumbnail will be centered on the face.
    It's a very useful feature to save image profiles.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的`eager`属性使我们能够转换图像并生成一个带有所有急切选项的新图像。在这种情况下，我们可以保存一个宽度为*280px*，高度为*200px*的转换图像，裁剪填充内容，如果图片中有一些脸，缩略图将居中显示在脸上。这是一个非常有用的功能，可以保存图像配置文件。
- en: 'You can use any transform combination on the upload method; here''s an example
    of the `JSON` returned by the API:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上传方法上使用任何转换组合；以下是API返回的`JSON`的示例：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note the highlighted code with the URL transformation:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意带有URL转换的突出显示的代码：
- en: '`c_thumb,g_face,h_100,w_150`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`c_thumb,g_face,h_100,w_150`'
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find more about the Cloudinary upload API at the following link: [http://cloudinary.com/documentation/node_image_upload](http://cloudinary.com/documentation/node_image_upload).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关Cloudinary上传API的更多信息：[http://cloudinary.com/documentation/node_image_upload](http://cloudinary.com/documentation/node_image_upload)。
- en: Running the application
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Now it''s time to execute the application and upload some photos:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候执行应用程序并上传一些照片了：
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端/Shell并输入以下命令：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Go to `http://localhost:3000/books` and you will see the following screen:![Running
    the application](img/image_04_004.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/books`，您将看到以下屏幕：![运行应用程序](img/image_04_004.jpg)
- en: Books screen
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍屏幕
- en: Uploading and showing images
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传和显示图像
- en: 'Now let''s insert some images and check the behavior of our application:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们插入一些图像，并检查我们应用程序的行为：
- en: Go to `http://localhost:3000/books/add`, and fill in the form:![Uploading and
    showing images](img/image_04_005.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/books/add`，并填写表单：![上传和显示图像](img/image_04_005.jpg)
- en: Upload form
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上传表单
- en: 'Add the following information:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下信息：
- en: 'Title: **Image Sample 02**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 标题：**图像示例02**
- en: 'File: choose the sample02.jpg file.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：选择sample02.jpg文件。
- en: 'Category: **cities**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：**城市**
- en: 'Description: **Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
    do eiusmod tempor incididunt ut labore et dolore magna aliqua.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 描述：**Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua.**
- en: Let's check our MongoDB to see what happens before we go further.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的MongoDB，看看在我们继续之前发生了什么。
- en: Open your `RoboMongo` and select the first object:![Uploading and showing images](img/image_04_006.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`RoboMongo`并选择第一个对象：![上传和显示图像](img/image_04_006.jpg)
- en: Screenshot from MongoDB (RoboMongo)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 来自MongoDB（RoboMongo）的屏幕截图
- en: Tip
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you must select the right database from the left-hand panel menu.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须从左侧面板菜单中选择正确的数据库。
- en: When we upload an image, the API returns a JSON with all information related
    to that image. We store this JSON as an image property with our books model, inside
    MongoDB, as we can see in the previous image.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们上传一张图片时，API会返回一个包含与该图片相关的所有信息的JSON。我们将这个JSON存储为我们的书籍模型的图像属性，存储在MongoDB中，正如我们在之前的图片中所看到的。
- en: Repeat *Step 1* with *Sample02* through *Sample06*.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过*Sample02*至*Sample06*重复*步骤1*。
- en: Checking the MongoDb picture collection
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查MongoDb图片集合
- en: 'Let''s see the picture collection on MongoDB:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在MongoDB上看一下图片集合：
- en: Open RoboMongo and select the right database form the left panel.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开RoboMongo并从左侧面板中选择正确的数据库。
- en: Open the `collections` folder and double-click on **Picture collections**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`collections`文件夹，双击**图片集合**。
- en: On the top–right of the panel, click on the `view results in table mode` icon.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面板的右上方，单击`以表格模式查看结果`图标。
- en: 'Now you can see the following screenshot on the **RoboMongo** interface:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在**RoboMongo**界面上看到以下屏幕截图：
- en: '![Checking the MongoDb picture collection](img/image_04_007.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![检查MongoDb图片集合](img/image_04_007.jpg)'
- en: Screenshot from the picture collection
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 来自图片集合的屏幕截图
- en: Creating folders in the Cloudinary dashboard
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Cloudinary仪表板中创建文件夹
- en: 'As previously mentioned, we set up folders (`folder: req.body.category`). In
    this case, the folder name will be the category name. To better organize our images
    in the cloud, as we did this programmatically, we need to create them directly
    in Cloudinary dashboard:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '如前所述，我们设置了文件夹（`folder: req.body.category`）。在这种情况下，文件夹名称将是类别名称。为了更好地在云中组织我们的图像，就像我们以编程方式做的那样，我们需要直接在Cloudinary仪表板中创建它们：'
- en: Log in to your Cloudinary account.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Cloudinary帐户。
- en: Go to [https://cloudinary.com/console/media_library](https://cloudinary.com/console/media_library):![Creating
    folders in the Cloudinary dashboard](img/image_04_008.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://cloudinary.com/console/media_library](https://cloudinary.com/console/media_library)：![在Cloudinary仪表板中创建文件夹](img/image_04_008.jpg)
- en: Create folder screenshot
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件夹截图
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't worry about the other images on the Cloudinary dashboard; they are the
    default in every account. You can delete them if you want.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心Cloudinary仪表板上的其他图像；它们是每个帐户中的默认图像。如果您愿意，可以删除它们。
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `animals`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的输入字段（文件夹名称）并创建一个名为`animals`的文件夹。
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `cities`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的输入字段（文件夹名称）并创建一个名为`cities`的文件夹。
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `nature`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的输入字段（文件夹名称）并创建一个名为`nature`的文件夹。
- en: 'You can see all the categories created at the top of the images, as the following
    screenshot shows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在图像顶部看到所有创建的类别，如下面的截图所示：
- en: '![Creating folders in the Cloudinary dashboard](img/image_04_009.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![在Cloudinary仪表板中创建文件夹](img/image_04_009.jpg)'
- en: Categories screenshot
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 类别截图
- en: 'Now when you choose a category, you see only the images belonging to that category,
    in this case `animals`, as shown in the following image:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当您选择一个类别时，您只会看到属于该类别的图像，例如`animals`，如下图所示：
- en: '![Creating folders in the Cloudinary dashboard](img/image_04_010.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![在Cloudinary仪表板中创建文件夹](img/image_04_010.jpg)'
- en: Screenshot from the animals folder
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 动物文件夹的截图
- en: 'This is a more effective way to organize all your photos, and you can create
    several albums, for example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更有效的组织所有照片的方式，您可以创建几个相册，例如：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: URL transformation rendering
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL转换渲染
- en: 'As part of Cloudinary API, we can manipulate the images just by using the URL
    parameter settings, as we did on the books page:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Cloudinary API的一部分，我们可以通过使用URL参数设置来操纵图像，就像我们在书籍页面上所做的那样：
- en: Go to `http://localhost:3000/books`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:3000/books`。
- en: 'Open your web inspector and check the rendered code for the first image; you
    will see the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Web检查器并检查第一张图像的呈现代码；您将看到以下代码：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The API creates the `img` tag and applies the object properties defined in
    `app/views/books.swig` as URL parameters, as we can see in the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: API创建`img`标签，并应用`app/views/books.swig`中定义的对象属性作为URL参数，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| **Object property** | **URL parameter** |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| **对象属性** | **URL参数** |'
- en: '| width: *280* | `w_280` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| width: *280* | `w_280` |'
- en: '| height: *200* | `h_200` |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| height: *200* | `h_200` |'
- en: '| crop: *fill* | `c_fill` |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| crop: *fill* | `c_fill` |'
- en: '| quality: *80* | `q_80` |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| quality: *80* | `q_80` |'
- en: '| effect:brightness:*20* | `e_brightness:20` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| effect:brightness:*20* | `e_brightness:20` |'
- en: '| Radius: 5 | `r_5` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 半径：5 | `r_5` |'
- en: The curly brackets and safe filter `{{... | safe}}` are tags from the `Swig`
    template engine for rendering the variable safely on the view.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号和安全过滤器`{{... | safe}}`是`Swig`模板引擎的标记，用于在视图上安全地呈现变量。
- en: 'Also, we can directly use the `img` tag, as you can see in the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以直接使用`img`标签，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Adding a direct link to the original image
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加原始图像的直接链接
- en: 'We can also use the API to generate the original image link without applying
    any transformation:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用API生成原始图像链接，而不应用任何转换：
- en: 'Open `app/views/books.swig` and add the following highlighted code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/books.swig`并添加以下突出显示的代码：
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now when we click on the `link to original image`, we can see the full image
    in another browser window:![Adding a direct link to the original image](img/image_04_011.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当我们点击`链接到原始图像`时，我们可以在另一个浏览器窗口中看到完整的图像：![添加原始图像的直接链接](img/image_04_011.jpg)
- en: Screenshot from the Books page with original image link
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 带有原始图像链接的书籍页面截图
- en: It is important to note that we also use a simple `colorbox` from the `Materialize.css`
    framework, so when we hover the mouse over an image, we can see an icon that shows
    the image at full size.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们还使用了`Materialize.css`框架中的简单`colorbox`，因此当我们将鼠标悬停在图像上时，我们可以看到一个图标，显示全尺寸的图像。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have arrived at the end of another chapter. With this chapter, we finished
    a series of four chapters addressing the MVC pattern of software development with
    Node.js.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了另一章的结尾。通过这一章，我们完成了一系列四章，讨论了使用Node.js进行软件开发的MVC模式。
- en: In this chapter, we saw how to build an application for uploading and manipulating
    images using a cloud service, and also show how to apply effects, such as brightness
    and border radius. In addition, we saw how to build a simple image gallery using
    a simple interface framework, **Materialize.css**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何构建一个使用云服务上传和操作图像的应用程序，还展示了如何应用效果，如亮度和边框半径。此外，我们还看到了如何使用简单的界面框架**Materialize.css**构建简单的图像库。
- en: We explored a different way to use an ORM module and save all the information
    about the images directly in MongoDB in JSON format.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了一种不同的使用ORM模块的方式，并直接以JSON格式将所有有关图像的信息保存在MongoDB中。
- en: In the next chapter, we will see how to build a web application using Node and
    the Firebase cloud service.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用Node和Firebase云服务构建Web应用程序。
