- en: Chapter 8. Creating Pages and Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。创建页面和事件
- en: '[Chapter 7](part0050.xhtml#aid-1FLS42 "Chapter 7. Posting Content"), *Posting
    Content*, covered the posting of content. We gave an interface to user to send
    text and images to our database. Later, these resources were shown as a message
    feed on the home page. In this chapter, we will learn how to create pages and
    events that are attached to these pages. Here is the plan that we are going to
    follow:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0050.xhtml#aid-1FLS42 "第7章。发布内容")，*发布内容*，涵盖了发布内容。我们为用户提供了一个界面，可以将文本和图像发送到我们的数据库。稍后，这些资源将显示为主页上的消息源。在本章中，我们将学习如何创建页面和附加到这些页面的事件。以下是我们将要遵循的计划：'
- en: Refactoring the API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构API
- en: Adding a form to create pages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加创建页面的表单
- en: Creating a record in the database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中创建记录
- en: Showing the currently added pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前添加的页面
- en: Showing a specific page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示特定页面
- en: Posting a comment to a page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面上发布评论
- en: Showing comments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示评论
- en: Managing events attached to a particular page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理附加到特定页面的事件
- en: Refactoring the API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构API
- en: If you check the files that you ended up with in the previous chapter, you will
    see that the `backend/API.js` file is quite big. It will get more and more difficult
    to work with. We are going to refactor this part of our system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查上一章结束时得到的文件，您会发现`backend/API.js`文件非常大。随着工作的进行，它将变得越来越难处理。我们将重构系统的这一部分。
- en: 'We have a bunch of helper methods that are used all over the route handlers.
    Functions such as `response`, `error`, and `getDatabaseConnection` may be placed
    in an external module. We will create a new `api` folder under the `backend` directory.
    The newly created `helpers.js` file will host all these utility functions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一堆辅助方法，它们在整个路由处理程序中都被使用。诸如`response`、`error`和`getDatabaseConnection`之类的函数可以放在一个外部模块中。我们将在`backend`目录下创建一个新的`api`文件夹。新创建的`helpers.js`文件将承载所有这些实用函数：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will skip the implementation of the functions so that we don't bloat the
    chapter with the code that we already saw. We also copied a few variables used
    by the methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过函数的实现，以免用已经看到的代码膨胀本章。我们还复制了一些方法使用的变量。
- en: 'The next step of our refactoring is the extraction of all the route handlers
    into their own methods. So far, the file is structured as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重构的下一步是将所有路由处理程序提取到它们自己的方法中。到目前为止，文件的结构如下：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The whole structure is a bunch of route definitions and their respective handlers.
    We often have a `switch` statement that checks the type of the request. In practice,
    every function (`req`, `res`) can be represented by an independent module. Again,
    we are not going to paste the content of all the created files, but we will talk
    about the final result. After the refactoring, we will have the following structure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 整个结构是一堆路由定义及其相应的处理程序。我们经常有一个`switch`语句来检查请求的类型。实际上，每个函数(`req`，`res`)都可以由一个独立的模块表示。再次强调，我们不会粘贴所有创建的文件的内容，但我们会谈论最终结果。重构后，我们将有以下结构：
- en: '![Refactoring the API](img/image00181.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![重构API](img/image00181.jpeg)'
- en: 'The number of lines in `API.js` decreased significantly. Now, we have just
    the route''s definition and its handlers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`API.js`中的行数显著减少。现在，我们只有路由的定义及其处理程序：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The functions that the new files export are still the same. The only thing
    that you should consider is the helper functions. You have to provide them in
    all the new modules. For example, the `friends.js` file contains the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件导出的函数仍然是相同的。您唯一需要考虑的是辅助函数。您必须在所有新模块中提供它们。例如，`friends.js`文件包含以下内容：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check out the files that came with this chapter for the complete source code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章附带的文件以获取完整的源代码。
- en: Adding a form to create pages
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加创建页面的表单
- en: Every user in our social network should be able to browse and create pages.
    This is a completely new functionality. So, we will need a new route and controller.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们社交网络中的每个用户都应该能够浏览和创建页面。这是一个全新的功能。因此，我们需要一个新的路由和控制器。
- en: 'Let''s start by updating `frontend/js/app.js`, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从更新`frontend/js/app.js`开始，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Just above the default handler, we will register a route that creates an instance
    of a new controller called `Pages`. We will make sure that the visitor is logged
    in before seeing the page. In the same file, at the top, we will add `var Pages
    = require('./controllers/Pages');`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就在默认处理程序的上方，我们将注册一个路由，创建一个名为`Pages`的新控制器的实例。我们将确保访问者在看到页面之前已登录。在同一文件中，顶部我们将添加`var
    Pages = require('./controllers/Pages');`。
- en: 'Let''s dive into the `controllers/Page.js` file and see how you can bootstrap
    the controller:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们深入研究`controllers/Page.js`文件，看看如何引导控制器：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `onrender` function is still empty, but we will fill it in the next few
    sections. The template that stands behind this page is located in `frontend/tpl/pages.html`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onrender`函数仍然是空的，但我们将在接下来的几节中填充它。支持此页面的模板位于`frontend/tpl/pages.html`中：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code looks similar to the one used in the previous chapter when we created
    the UI to add content. We have placeholders for successful and error messages.
    There are two variables, `title` and `description`, and a button dispatching the
    `create` event.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来类似于上一章中创建UI以添加内容时使用的代码。我们有成功和错误消息的占位符。有两个变量，`title`和`description`，以及一个分派`create`事件的按钮。
- en: Creating a record in the database
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据库中创建记录
- en: 'Let''s continue and handle the situation where the user presses the **Create**
    button. After the user performs this action, we have to get the content of the
    text areas and submit a request to the backend. So, we need a new model. Let''s
    call it `Pages.js` and save it under the `models` directory:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续处理用户按下**创建**按钮的情况。用户执行此操作后，我们必须获取文本区域的内容并向后端提交请求。因此，我们需要一个新的模型。让我们称之为`Pages.js`并将其保存在`models`目录下：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We already talked about the `FormData` interface in the previous chapter. The
    API endpoint that we are going to use is `/api/pages`. This is the URL where we
    will send a `POST` request.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中讨论了`FormData`接口。我们将要使用的API端点是`/api/pages`。这是我们将发送`POST`请求的URL。
- en: 'Now that we have the form displayed and the model ready for backend communication,
    we can continue with the code in our controller. The `onrender` handler is the
    right place to listen to the `create` event:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经显示了表单，并且模型已准备好进行后端通信，我们可以继续在控制器中编写代码。`onrender`处理程序是监听`create`事件的正确位置：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The initialization of the model is at the top. After fetching the data filled
    by the user, we will call the `create` method of the model and handle the response
    afterwards. If something goes wrong, our application displays an error message.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的初始化在顶部。在获取用户填写的数据之后，我们将调用模型的`create`方法，并在之后处理响应。如果出现问题，我们的应用程序会显示错误消息。
- en: 'The last step in this section is updating the API so that we can keep the data
    in our database. There is still no route that matches `/api/pages`. So, let''s
    add one:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的最后一步是更新API，以便我们可以将数据保留在我们的数据库中。仍然没有与`/api/pages`匹配的路由。因此，让我们添加一个：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We refactored the API so that the code that will process the requests goes
    to the new `/backend/api/pages.js` file. In the first few lines, there are shortcuts
    to our helper methods:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重构了API，以便处理请求的代码转到新的`/backend/api/pages.js`文件。在前几行中，有我们的辅助方法的快捷方式：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the code that creates a new record in a new `pages` collection. It
    may look a little long, but a major part of the same is already covered in [Chapter
    7](part0050.xhtml#aid-1FLS42 "Chapter 7. Posting Content"), *Posting Content*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在新的`pages`集合中创建新记录的代码。它可能看起来有点长，但其中的大部分内容已经在[第7章](part0050.xhtml#aid-1FLS42
    "第7章。发布内容")中涵盖了，*发布内容*：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The creating and browsing of pages is a feature reserved only for the logged
    in users. The first few lines of the exported function check whether the current
    visitor has a valid session. The frontend sends a `POST` request without a file,
    but we will still require the `formidable` module because it has a nice programming
    interface and is easy to use. Every page should have a title and a description,
    and we will check whether they exist. If everything is okay, we will create a
    new record in the database by using the well-known `getDatabaseConnection` function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和浏览页面是仅供已登录用户使用的功能。导出函数的前几行检查当前访问者是否有有效的会话。前端发送一个不带文件的`POST`请求，但我们仍然需要`formidable`模块，因为它具有良好的编程接口并且易于使用。每个页面都应该有标题和描述，我们将检查它们是否存在。如果一切正常，我们将使用众所周知的`getDatabaseConnection`函数在数据库中创建新记录。
- en: Showing the currently added pages
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前添加的页面
- en: 'It is nice that we started keeping the created pages in the database. However,
    it will also be great to show the pages to the users so that they can visit them
    and add comments. In order to do that, we have to modify our API so that it returns
    the page information. If you look at the preceding code, you will see that there
    is a `GET` case that was left empty. The following codes gets all the pages, sorts
    them by date, and sends them to the browser:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴我们开始将创建的页面保存在数据库中。但是，向用户显示页面，以便他们可以访问并添加评论也将是很好的。为了做到这一点，我们必须修改我们的API，以便返回页面信息。如果您查看前面的代码，您会发现有一个留空的`GET`情况。以下代码获取所有页面，按日期排序，并将它们发送到浏览器：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Before sending the JSON object to the frontend, we will delete the ID of the
    creator. The name of the user is already there and it is a good practice to keep
    these IDs only in the backend.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在将JSON对象发送到前端之前，我们将删除创建者的ID。用户的名称已经存在，将这些ID仅保留在后端是一个很好的做法。
- en: 'After a quick restart, the Node.js server returns the created pages when we
    visit `/api/pages`. Let''s move forward and update the `controllers/Pages.js`
    file in the client side of our app. In the `onrender` handler, we will append
    the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 快速重启后，当我们访问`/api/pages`时，Node.js服务器将返回创建的页面。让我们继续前进，并更新我们应用程序客户端的`controllers/Pages.js`文件。在`onrender`处理程序中，我们将追加以下代码：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will wrap the newly added logic in a function because we have to go through
    the same things when a new page is created. The model does most of the job. We
    will simply assign an array of objects to a `pages` variable. This variable is
    used in the template of the component—`frontend/tpl/pages.html`—as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将新添加的逻辑封装在一个函数中，因为当创建新页面时，我们必须经历相同的事情。模型完成了大部分工作。我们将简单地将对象数组分配给`pages`变量。此变量在组件的模板—`frontend/tpl/pages.html`—中使用如下：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the next section, you will learn how to show only a particular page. The
    link that we added in this code forwards the user to a new address. This link
    is a URL that contains the information for only one page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何仅显示特定页面。我们在此代码中添加的链接将用户转发到新地址。此链接是一个包含仅一个页面信息的URL。
- en: Showing a specific page
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示特定页面
- en: 'Again, to show a specific page, we need to update our API. We have the code
    that returns all the pages, but there is no solution if you want to return only
    one of the pages. We will use the ID of the page for sure. So, here is a new route
    that can be added to `backend/API.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，要显示特定页面，我们需要更新我们的API。我们有返回所有页面的代码，但如果要返回其中一个页面，则没有解决方案。我们肯定会使用页面的ID。因此，这里是一个可以添加到`backend/API.js`的新路由：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should keep in mind that the order of the routes is important. The one
    that contains the ID of the page should be above the one that shows the list of
    the pages. Otherwise, the application will proceed with listing a new URL all
    the time, but we will keep the same handler. If there are any dynamic parts in
    the address, our router sends an additional parameter to the function. So in `backend/api/pages.js`,
    we will change `module.exports = function(req, res)` to `module.exports = function(req,
    res, params)`. In the same file, we will fetch all the pages from the database.
    In this case, we want the code to be modified so that the function returns only
    one record that matches the ID that was passed in the URL. So far, our MongoDB
    query looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该记住路由的顺序很重要。包含页面ID的路由应该在显示页面列表的路由之上。否则，应用程序将不断列出新的URL，但我们将保持相同的处理程序。如果地址中有任何动态部分，我们的路由器会向函数发送一个额外的参数。因此，在`backend/api/pages.js`中，我们将`module.exports
    = function(req, res)`更改为`module.exports = function(req, res, params)`。在同一个文件中，我们将从数据库中获取所有页面。在这种情况下，我们希望修改代码，使得函数只返回与URL中传递的ID匹配的一条记录。到目前为止，我们的MongoDB查询看起来是这样的：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In practice, we have no criteria. Now, let''s change the preceding code to
    the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们没有标准。现在，让我们将前面的代码更改为以下内容：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: By defining a `query` variable, we make the response of this API method conditional.
    It depends on the existence of the ID in the URL. If there is any such ID, it
    still returns an array of objects, but there is only one item inside.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义一个`query`变量，我们使得这个API方法的响应是有条件的。它取决于URL中ID的存在。如果有任何这样的ID，它仍然返回一个对象数组，但里面只有一个项目。
- en: 'In the frontend, we can use the same approach, or in other words, the same
    controller that covers both the cases—showing all the pages and showing only one
    page. We register a new route handler that forwards the user to the same `Pages`
    controller, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们可以使用相同的方法，或者换句话说，相同的控制器来处理两种情况——显示所有页面和仅显示一个页面。我们注册一个新的路由处理程序，将用户转发到相同的`Pages`控制器，如下所示：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This time, we passed the configuration during the initialization of the controller.
    The setting of values in the `data` property creates variables that are later
    available inside the component and its template. In our case, `pageId` will be
    accessible via `this.get(''pageId'')`. If the variable does not exist, then we
    are in the mode that shows all the pages. The following lines display the title
    and the description of a single page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，在控制器初始化期间传递了配置。在`data`属性中设置值会创建稍后在组件及其模板中可用的变量。在我们的情况下，`pageId`将通过`this.get('pageId')`访问。如果变量不存在，那么我们处于显示所有页面的模式。以下行显示单个页面的标题和描述：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The model that we used so far performs the `POST` and `GET` requests, but we
    can''t use them in this case. They are reserved for other functionalities. We
    need another method that accepts the ID of the page. This is why we will add a
    new `getPage` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的模型执行`POST`和`GET`请求，但在这种情况下我们不能使用它们。它们是为其他功能保留的。我们需要另一种接受页面ID的方法。这就是为什么我们将添加一个新的`getPage`函数：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We do not have any data to send. We have only a different endpoint URL. The
    ID of the page is appended at the end of the `/api/pages` string. This section
    started with changes in the backend so that we know that the API returns an array
    of one element. The rest is setting `pageTitle` and `pageDescription`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有任何数据要发送。我们只有一个不同的终端URL。页面的ID附加在`/api/pages`字符串的末尾。这一部分始于后端的更改，以便我们知道API返回一个元素的数组。其余部分是设置`pageTitle`和`pageDescription`。
- en: 'In the template, we use the same pattern. You can check whether `pageId` exists
    and this will be enough to find out whether we have to show one or many pages:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们使用相同的模式。您可以检查`pageId`是否存在，这就足以判断我们是否需要显示一个页面还是多个页面：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After changing `frontend/tpl/pages.html`, we have a unique URL for every page.
    However, a page displayed with a static title and description is not very interesting
    for the users. Let's add a comments section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改`frontend/tpl/pages.html`之后，我们为每个页面都有了一个唯一的URL。然而，一个具有静态标题和描述的页面对于用户来说并不是很有趣。让我们添加一个评论部分。
- en: Posting a comment to a page
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布评论到页面
- en: 'Before reaching the part where we send and process an HTTP request, we have
    to provide a user interface to create a comment. We will add a form just below
    the title and description of the page in `frontend/tpl/pages.html`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送和处理HTTP请求的部分之前，我们必须提供一个用户界面来创建评论。我们将在`frontend/tpl/pages.html`中的页面标题和描述下方添加一个表单：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The event that is dispatched after clicking on the button is `add-comment`.
    The `Pages` controller should handle it and fire a request to the backend.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮后触发的事件是`add-comment`。`Pages`控制器应该处理它并向后端发送请求。
- en: 'If you stop and think a bit about how the comments look, you will notice that
    they are similar to the regular user posts that are visible in the user''s feed.
    So, instead of creating a new collection or storing complex data structures in
    the `pages` collection, we will save our comments as regular posts. For the code
    on the client side, this means one more use case of the `ContentModel` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你停下来思考一下评论的外观，你会注意到它们与用户在用户动态中看到的常规用户帖子相似。因此，我们将把评论保存为常规帖子，而不是在`pages`集合中创建新的集合或存储复杂的数据结构。对于客户端的代码来说，这意味着`ContentModel`类的一个更多的用例：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The usage of the model is the same except for one thing—we send an additional
    `pageId` variable. We need something to distinguish the posts made in the home
    page and those made as comments. The API will still not save `pageId`. So, we
    have to make a little update in `backend/api/content.js`, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的使用方式是相同的，除了一个事情——我们发送了一个额外的`pageId`变量。我们需要一些东西来区分在主页上发布的帖子和作为评论发布的帖子。API仍然不会保存`pageId`。因此，我们必须在`backend/api/content.js`中进行一点更新，如下所示：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the user is making a comment, the record in the database will contain the
    `pageId` property. This is enough to keep the comments away from the home page.
    Also, from another point of view, it is enough to display only the comments for
    a particular page.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户发表评论时，数据库中的记录将包含“pageId”属性。这足以使评论远离主页。另外，从另一个角度来看，这足以仅显示特定页面的评论。
- en: Showing the comments
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示评论
- en: 'We should update the API method that returns the pages as objects. Along with
    the title and description, we have to present a new `comments` property. Let''s
    open `backend/api/pages.js` and create a function to fetch comments:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该更新返回页面作为对象的API方法。除了标题和描述，我们还必须呈现一个新的“comments”属性。让我们打开“backend/api/pages.js”并创建一个函数来获取评论：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The key moment in the preceding method is the forming of the MongoDB query.
    This is the place where we filter the posts and fetch only those that are made
    for the page that matches the passed ID. The following is the updated code corresponding
    to the `GET` request:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述方法中的关键时刻是形成MongoDB查询。这是我们过滤帖子并仅获取与传递的ID匹配的页面所做的地方。以下是对“GET”请求的更新代码：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There are two types of responses. The first one is used when we have an ID added
    to the URL or, in other words, when we show information about a page. In this
    case, we have to also fetch the comments. In the other case, we do not need the
    comments because we will be displaying only the list. Checking whether `params.id`
    exists is enough to decide which type of response to send.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的响应。第一种是当我们在URL中添加了ID时使用，换句话说，当我们显示有关页面的信息时。在这种情况下，我们还必须获取评论。在另一种情况下，我们不需要评论，因为我们将仅显示列表。检查“params.id”是否存在足以决定发送哪种类型的响应。
- en: 'Once the backend starts returning the comments, we will write the code that
    shows them in the browser. In `frontend/js/controllers/Pages.js`, we will set
    the title and description of the page. We can directly pass the `comments` array
    to the template and loop over the post, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦后端开始返回评论，我们将编写代码在浏览器中显示它们。在“frontend/js/controllers/Pages.js”中，我们将设置页面的标题和描述。我们可以直接将“comments”数组传递给模板，并循环遍历帖子，如下所示：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We wrapped the calling of `model.getPage` in a function so that we can fire
    it again once a new comment is added.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将“model.getPage”的调用包装在一个函数中，以便我们可以在添加新评论后再次触发它。
- en: 'Here is a small update in the template needed to display the posts below the
    form:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板中需要显示帖子下方的小更新：
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Managing events attached to a particular page
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理附加到特定页面的事件
- en: The last feature that we will add in this chapter is the events attached to
    some of the created pages. So far, we have comments that are actually normal posts
    kept in the `content` collection. We will extend the implementation and create
    another type of post. These posts will still have a `pageId` property so that
    they are different from the feed's posts. However, we will introduce an `eventDate`
    variable.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将添加的最后一个功能是与一些创建的页面相关联的事件。到目前为止，我们有评论，实际上是保存在“content”集合中的普通帖子。我们将扩展实现并创建另一种类型的帖子。这些帖子仍然具有“pageId”属性，以便它们与动态源的帖子不同。但是，我们将引入一个“eventDate”变量。
- en: 'In the frontend, we need a new URL. We should keep the same pattern that contains
    the ID of the page. This is important because we want to display the events in
    the right place and we don''t want to mix them with the list of the pages. Here
    is the new route registration:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们需要一个新的URL。我们应该保持包含页面ID的相同模式。这很重要，因为我们希望在正确的位置显示事件，而不希望将它们与页面列表混在一起。以下是新的路由注册：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The template of the `Pages` controller should surely be changed. We need to
    support two views. The first one shows a form and comments, and the second one
    shows a form and a list of events. The `showEvents` variable will tell us which
    variant to render:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “Pages”控制器的模板肯定需要更改。我们需要支持两种视图。第一个显示一个表单和评论，第二个显示一个表单和事件列表。 “showEvents”变量将告诉我们要呈现哪种变体：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In order to switch between the views, we added two additional links. While we
    are checking the comments, we will see **View events**, and when we jump to the
    events, we will see **View comments**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图之间切换，我们添加了两个额外的链接。当我们检查评论时，我们将看到**查看事件**，当我们跳转到事件时，我们将看到**查看评论**。
- en: 'The `controllers/Pages.js` file needs a solid update, too. Most importantly,
    we need to add a handler of the `add-event` event that comes from the template.
    It is fired when the user presses the button in the new event form. It looks like
    this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “controllers/Pages.js”文件也需要进行实质性更新。最重要的是，我们需要添加一个来自模板的“add-event”事件处理程序。当用户在新事件表单中按下按钮时触发它。它看起来像这样：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It is similar to adding a comment, but for the additional `eventDate` property.
    It should also be set as a property of the object that goes to the `content` collection:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于添加评论，但是对于额外的“eventDate”属性。它也应该被设置为去“content”集合的对象的属性：
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Another change in the same frontend controller is with regard to showing the
    list of events (posts) in the template. When we get the title and description
    of the page, we know that we will receive a `comments` property. The backend will
    be updated in a minute, but we will assume that we will also have an `events`
    property. So, we will simply send the array to the template:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同一前端控制器的另一个更改是关于在模板中显示事件（帖子）列表。当我们获取页面的标题和描述时，我们知道我们将收到一个“comments”属性。后端将在一分钟内更新，但我们将假设我们还将有一个“events”属性。因此，我们将简单地将数组发送到模板：
- en: '[PRE33]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the backend, we have already fetched the records from the `content` collection
    that belongs to the current page. The problem is that the records are now a mixture
    of comments and events. The `getComments` function that we added in the previous
    section can be changed to `getPageItems`, and the implementation of it basically
    looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们已经从属于当前页面的“content”集合中获取了记录。问题在于记录现在是评论和事件的混合体。我们在上一节中添加的“getComments”函数可以更改为“getPageItems”，其实现基本上如下所示：
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We formed the two different `events` and `comments` arrays. Based on the existence
    of `eventDate`, we will fill them with records. Just before executing the callback,
    we will sort the events by date, showing the earlier event first. The last thing
    that we will do is use `getPageItem`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们形成了两个不同的`events`和`comments`数组。根据`eventDate`的存在，我们将用记录填充它们。在执行回调之前，我们将按日期对事件进行排序，先显示较早的事件。我们要做的最后一件事是使用`getPageItem`：
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we extended our social network. Every customer is now able
    to create their own pages and leave comments there or create events related to
    the page. A bunch of new components were added to our architecture. We successfully
    reused the code from the previous chapters, which is good if we want to keep our
    codebase small.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们扩展了我们的社交网络。现在每个客户都能够创建自己的页面，在那里留下评论或创建与页面相关的活动。我们的架构中添加了许多新组件。我们成功地重用了前几章的代码，这对于保持我们的代码库较小是很好的。
- en: In [Chapter 9](part0063.xhtml#aid-1S2JE1 "Chapter 9. Tagging, Sharing, and Liking"),
    *Tagging, Sharing, and Liking*, we will discuss the tagging, liking, and sharing
    of posts.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](part0063.xhtml#aid-1S2JE1 "第9章。标记、分享和点赞")*标记、分享和点赞*中，我们将讨论帖子的标记、点赞和分享。
