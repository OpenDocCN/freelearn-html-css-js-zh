- en: Chapter 5. Pie Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。饼图
- en: 'In this chapter, you will learn how to plot pie charts and explore their various
    options. We will then examine how to put multiple pies inside a chart. After that,
    we will find out how to create a donut chart. We will then end the chapter by
    sketching a chart that contains all the series types that we have learned so far—column,
    line, and pie. In this chapter, we will be covering the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何绘制饼图并探索它们的各种选项。然后我们将检查如何在图表中放置多个饼。之后，我们将找出如何创建环形图。然后我们将通过绘制包含我们迄今为止所学的所有系列类型的图表来结束本章——柱状图、折线图和饼图。在本章中，我们将涵盖以下主题：
- en: Understanding the relationship between chart, pie, and series
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解图表、饼图和系列之间的关系
- en: Plotting simple pie charts – single series
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制简单的饼图 – 单个系列
- en: Plotting multiple pies in a chart – multiple series
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表中绘制多个饼 – 多个系列
- en: Preparing a donut chart – multiple series
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备环形图 – 多个系列
- en: Building a chart with multiple series types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多种系列类型构建图表
- en: Understanding the `startAngle` and `endAngle` options
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`startAngle`和`endAngle`选项
- en: Creating a simplified version of the stock picking wheel chart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建简化版的股票选择轮图表
- en: Understanding the relationship between chart, pie, and series
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解图表、饼图和系列之间的关系
- en: 'Pie charts are simple to plot: they have no axes to configure and all they
    need is data with categories. Generally, the term **pie chart** refers to a chart
    with a single pie series. In Highcharts, a chart can handle multiple pie series.
    In this case, a chart can display more than one pie: each pie is associated with
    a series of data. Instead of showing multiple pies, Highcharts can display a donut
    chart that is basically a pie chart with multiple concentric rings lying on top
    of each other. Each concentric ring is a pie series, similar to a stacked pie
    chart. We will first learn how to plot a chart with a single pie, and then later
    on in the chapter we will explore plotting with multiple pie series in separate
    pies and a donut chart.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图绘制简单：它们没有轴需要配置，只需要带有类别的数据。通常，术语**饼图**指的是只有一个饼系列图表。在Highcharts中，一个图表可以处理多个饼系列。在这种情况下，一个图表可以显示多个饼：每个饼都与一系列数据相关联。而不是显示多个饼，Highcharts可以显示一个环形图，它基本上是一个有多个同心圆叠加的饼图。每个同心圆是一个饼系列，类似于堆叠饼图。我们首先将学习如何绘制单个饼的图表，然后在本章后面我们将探讨在单独的饼和环形图中使用多个饼系列进行绘制。
- en: Plotting simple pie charts – single series
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制简单的饼图 – 单个系列
- en: 'In this chapter, we are going to use video gaming data supplied by **vgchartz**
    ([www.vgchartz.com](http://www.vgchartz.com)). The following is the pie chart
    configuration, and the data is the number of games sold in 2011 according to publishers,
    based on the top 100 games sold. Wii Sports is taken out of the dataset because
    it is free with the Wii console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用由**vgchartz**提供的视频游戏数据（[www.vgchartz.com](http://www.vgchartz.com)）。以下是一个饼图配置，数据是根据出版商基于2011年销量前100的游戏销售数量。Wii
    Sports被从数据集中去除，因为它与Wii游戏机捆绑免费：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is a simple pie chart screenshot with the first data point (Nintendo) starting
    at the 12 o'clock position. The first slice always starts at the 12 o'clock position
    unless we specify a different start point with the `startAngle` option, which
    we will explore later in the chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的饼图截图，第一个数据点（任天堂）从12点钟位置开始。除非我们使用`startAngle`选项指定不同的起始点，否则第一片总是从12点钟位置开始，我们将在本章后面探讨这一点。
- en: '![Plotting simple pie charts – single series](img/7451OS_05_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![绘制简单的饼图 – 单个系列](img/7451OS_05_01.jpg)'
- en: Configuring the pie with sliced off sections
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置带有切割部分的饼图
- en: 'We can improve the previous pie chart to include values in the labels and word
    wrap some of the long names of the publishers. The following is the configuration
    code for the pie series. The `allowPointSelect` option allows the users to interact
    with the chart by clicking on the data points. As for the pie series, this is
    used for slicing off a section of the pie chart (see the following screenshot).
    The `slicedOffset` option is used to adjust how far the section is sliced off
    from the pie chart. For word wrap labels, we set the labels style, `dataLabels.style.width`,
    to 140 pixels wide:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将之前的饼图改进，包括标签中的值和换行一些出版商的长名称。以下是为饼系列配置的代码。`allowPointSelect`选项允许用户通过点击数据点与图表进行交互。至于饼系列，这用于从饼图中切割掉一个部分（见以下截图）。`slicedOffset`选项用于调整从饼图中切割部分的距离。对于换行标签，我们将标签样式`dataLabels.style.width`设置为140像素宽：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Additionally, we would like to slice off the largest section in the initial
    display; its label is shown in bold type font. To do that, we will need to change
    the largest data point into object configuration as shown in the following screenshot.
    Then we put the `sliced` property into the object and change from the default,
    `false`, to `true`, which forces the slice to part from the center. Furthermore,
    we set `dataLabels` with the assignment of the `fontWeight` option to overwrite
    the default settings:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望在初始显示中切掉最大的部分；其标签以粗体字体显示。为此，我们需要将最大的数据点转换为对象配置，如下面的截图所示。然后我们将`sliced`属性放入对象中，并将默认值`false`更改为`true`，这迫使切片从中心切掉。此外，我们通过将`fontWeight`选项分配给`dataLabels`来覆盖默认设置：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the chart with the refined labels:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表显示了经过精炼的标签：
- en: '![Configuring the pie with sliced off sections](img/7451OS_05_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![配置带有切掉切片的饼图](img/7451OS_05_02.jpg)'
- en: 'As mentioned earlier, the `slicedOffset` option has also pushed the sliced
    off section further than the default distance, which is 10 pixels. The `slicedOffset`
    option applies to all the sliced off sections, which means that we cannot control
    the distance of individually parted sections. It is also worth noticing that the
    connectors (the lines between the slice and the data label) become crooked as
    a result of that. In the next example, we demonstrate that the `sliced` property
    can be applied to as many data points as we want, and remove the `slicedOffset`
    option to resume the default settings to show the difference. The following chart
    illustrates this with three parted slices, by repeating the data object settings
    (Nintendo) for two other points:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`slicedOffset`选项也将切掉的部分推得更远，默认距离为10像素。`slicedOffset`选项适用于所有切掉的部分，这意味着我们无法控制单独分开的部分的距离。还值得注意的是，由于这个原因，连接线（切片和数据标签之间的线条）变得弯曲。在下一个示例中，我们演示了`sliced`属性可以应用于我们想要的任意多个数据点，并移除`slicedOffset`选项以恢复默认设置以显示差异。以下图表通过重复数据对象设置（Nintendo）为其他两个点，展示了三个分开的切片：
- en: '![Configuring the pie with sliced off sections](img/7451OS_05_08.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![配置带有切掉切片的饼图](img/7451OS_05_08.jpg)'
- en: 'Notice that the connectors go back to being smooth lines. However, there is
    another interesting behavior for the `sliced` option. For those slices with `sliced`
    as the default setting (`false`), only one of them can be sliced off. For instance,
    the user clicks on the **Others** section and it moves away from the chart. Then,
    clicking on **Activision** will slice off the section and the **Others** section
    moves back towards the center, whereas the three configured `sliced: true` sections
    maintain their parted positions. In other words, with the `sliced` option set
    to `true`, this enables its state to be independent of others with the `false`
    setting.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '注意到连接线又变回了平滑的线条。然而，对于`sliced`选项，还有一个有趣的行为。对于默认设置为`false`的`sliced`选项的切片，只有一个可以被切掉。例如，用户点击**其他**部分，它会从图表中移开。然后，点击**Activision**将切片切掉，**其他**部分会向中心移动，而三个配置为`sliced:
    true`的部分保持它们分开的位置。换句话说，将`sliced`选项设置为`true`，这使得它的状态可以独立于设置为`false`的其他部分。'
- en: Applying a legend to a pie chart
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图例应用到饼图中
- en: So far, the chart contains large numbers, and it is difficult to really comprehend
    how much larger one section is than the other. We can print all the labels in
    percentages. Let's put all the publisher names inside a legend box and print the
    percentage values inside each slice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，图表包含大量数字，很难真正理解一个部分比另一个部分大多少。我们可以打印所有标签的百分比。让我们将所有出版商名称放入图例框中，并在每个切片中打印百分比值。
- en: 'The plotting configuration is redefined as follows. To enable the legend box,
    we set `showInLegend` to `true`. Then, we set the data labels'' font color and
    style to bold and white respectively, and change the `formatter` function slightly
    to use the `this.percentage` variable that is only available for the pie series.
    The `distance` option is the distance between the data label and the outer edge
    of the pie. A positive value will shift the data label outside of the edge and
    a negative value will do the same in the opposite direction:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图配置重新定义为以下内容。要启用图例框，我们将`showInLegend`设置为`true`。然后，我们将数据标签的字体颜色和样式分别设置为粗体和白色，并稍微修改`formatter`函数以使用仅适用于饼图系列的`this.percentage`变量。`distance`选项是数据标签与饼图外边缘之间的距离。正值将数据标签移出边缘，负值将数据标签移向相反方向：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, for the legend box, we add in some padding as there are more than a few
    legend items, and set the legend box closer to the pie, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于图例框，由于图例项较多，我们添加了一些填充，并将图例框设置得更靠近饼图，如下所示：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is another presentation of the chart:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对图表的另一种展示：
- en: '![Applying a legend to a pie chart](img/7451OS_05_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![将图例应用于饼图](img/7451OS_05_03.jpg)'
- en: Plotting multiple pies in a chart – multiple series
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图表中绘制多个饼图 – 多个系列
- en: With pie charts, we can do something more informative by displaying another
    pie chart side by side to compare data. This can be done by simply specifying
    two series configurations in the series array.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用饼图，我们可以通过并排显示另一个饼图来比较数据，从而提供更多信息。这可以通过在系列数组中简单地指定两个系列配置来完成。
- en: 'We can continue to use the previous example for the chart on the left-hand
    side and we create a new category series from the same dataset, but this time
    grouped by platforms. The following is the series configuration for doing so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续使用左侧图表的先前示例，并从相同的数据集中创建一个新的类别系列，但这次是按平台分组。以下是这样做的系列配置：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, we use a new option, `center`, to position the pie chart. The
    option contains an array of two percentage values—the first is the ratio of the
    x position to the whole container width, whereas the second percentage value is
    the y ratio. The default value is `['50%', '50%']`, which is in the middle of
    the container. In this example, we specify the first percentage values as `'25%'`
    and `'75%'`, which are in the middle of the left- and the right-hand halves respectively.
    We set the size for the pie series to 75 percent with `plotOptions.pie.size`.
    This ensures that both pies are the same size, otherwise the left hand pie will
    appear smaller.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们使用了一个新的选项`center`来定位饼图。该选项包含一个包含两个百分比值的数组——第一个是x位置与整个容器宽度的比例，而第二个百分比值是y比例。默认值是`['50%',
    '50%']`，位于容器中间。在这个例子中，我们将第一个百分比值指定为`'25%'`和`'75%'`，分别位于左右两半的中间。我们使用`plotOptions.pie.size`将饼图系列的大小设置为75%，这确保了两个饼图大小相同，否则左侧的饼图将显得更小。
- en: 'In the second series, we will choose to display the pie chart with percentage
    data labels instead of unit values. The following is the screenshot of a chart
    with double pies:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二系列中，我们将选择显示带有百分比数据标签的饼图，而不是单位值。以下是一个双饼图的截图：
- en: '![Plotting multiple pies in a chart – multiple series](img/7451OS_05_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![在图表中绘制多个饼图 – 多个系列](img/7451OS_05_04.jpg)'
- en: On the surface, this is not much different to plotting two separate pie charts
    in an individual `<div>` tag, apart from sharing the same title. The main benefit
    is that we can combine different series type presentations under the same chart.
    For instance, let's say we want to present the distribution in ratio in pie series
    directly above each group of multiple column series. We will learn how to do this
    later in the chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，这与在单个`<div>`标签中绘制两个独立的饼图没有太大区别，除了共享相同的标题。主要好处是我们可以在同一图表下结合不同的系列类型展示。例如，假设我们想在多个列系列组上方直接展示饼图系列的比例分布。我们将在本章后面学习如何做到这一点。
- en: Preparing a donut chart – multiple series
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备环形图 – 多个系列
- en: Highcharts offers another type of pie chart, a **donut chart**. It has the effect
    of drilling down on a category to create subcategories, and is a convenient way
    of viewing data in greater detail. This drill-down effect can be applied on multiple
    levels. In this section, we will create a simple donut chart that has an outer
    ring of subcategories (game titles) that align with the inner categories (publishers).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 提供了另一种类型的饼图，即**环形图**。它具有钻取类别以创建子类别的效果，是查看更详细数据的便捷方式。这种钻取效果可以应用于多个级别。在本节中，我们将创建一个简单的环形图，它有一个与内部类别（发行商）对齐的外环子类别（游戏标题）。
- en: 'For the sake of simplicity, we will only use the top three games publishers
    for the inner pie chart. The following is the series array configuration for the
    donut chart:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们只将使用前三个游戏发行商作为内部饼图。以下是环形图的系列数组配置：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, we have two series—the inner pie series, or the **Publishers**, and the
    outer ring series, or the **Titles**. The **Titles** series has all the data for
    the subcategories together, and it aligns with the **Publisher** series. The order
    is such that the values of the subcategories for the **Nintendo** category are
    before the subcategory data for **Electronic Arts,** and so on (see the order
    of data arrays in the **Title** series).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有两个系列——内部饼图系列，或**出版商**，以及外部环系列，或**标题**。**标题**系列包含所有子类别的数据，并且与**出版商**系列对齐。顺序是这样的，**任天堂**类别的子类别值在**艺电**的子类别数据之前，依此类推（参见**标题**系列中的数据数组顺序）。
- en: 'Each data point in the subcategories series is declared as a data point object
    for assigning the color in a similar range to their main category. This can be
    achieved by following the Highcharts demo to fiddle with the color brightness:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 子类别系列中的每个数据点都被声明为一个数据点对象，以便将颜色分配到与它们的主要类别相似的范围。这可以通过遵循Highcharts演示来调整颜色亮度：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Basically, what this does is to use the main category color value to create
    a `Color` object and then adjust the color code with the brightness parameter.
    This parameter is derived from the ratio of the subcategory value. We rewrite
    this example into a function known as `colorBrightness`, and call it in the chart
    configuration:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这个功能是使用主要类别的颜色值来创建一个`Color`对象，然后通过亮度参数调整颜色代码。这个参数是从子类别值的比率中得出的。我们将这个示例重写成一个名为`colorBrightness`的函数，并在图表配置中调用它：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The next part is to specify which series goes to the inner pie and which goes
    to the outer ring. The `innerSize` option is used by the outer series, **Title**,
    to create an inner circle. As a result, the **Title** series forms a donut/concentric
    ring. The value for the `innerSize` option can be either in pixels or percentage
    values of the plot area size.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分是指定哪个系列进入内部饼图，哪个进入外部环。外部系列使用`innerSize`选项，**标题**创建一个内部圆圈。因此，**标题**系列形成一个环形的饼图。`innerSize`选项的值可以是像素或绘图区域大小的百分比值。
- en: The final part is to decorate the chart with data labels. Obviously, we want
    to position the data labels of the inner charts to be over the inner pie, so we
    assign a negative value to the `dataLabels.distance` option. Instead of printing
    long values, we define `formatter` to convert them into units of millions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的部分是用数据标签装饰图表。显然，我们希望将内部图表的数据标签定位在内部饼图的上方，因此我们将`dataLabels.distance`选项赋值为负值。我们不是打印长值，而是定义`formatter`将它们转换为百万单位。
- en: 'The following is the display of the donut chart:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的显示是饼图的展示：
- en: '![Preparing a donut chart – multiple series](img/7451OS_05_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![准备饼图 – 多系列](img/7451OS_05_05.jpg)'
- en: 'Note that it is not mandatory to put a pie chart in the center of a donut chart.
    It is just the presentation style of this example. We can have multiple concentric
    rings instead. The following chart is exactly the same example as mentioned earlier,
    with the addition of the `innerSize` option to the inner series of **Publishers**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在饼图中心放置饼图不是强制性的。这只是本例的展示风格。我们可以有多个同心环。下面的图表与前面提到的示例完全相同，只是为**出版商**的内部系列添加了`innerSize`选项：
- en: '![Preparing a donut chart – multiple series](img/7451OS_05_09.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![准备饼图 – 多系列](img/7451OS_05_09.jpg)'
- en: We can even further complicate the donut chart by introducing a third series.
    We plot the following chart in three layers. The code is simply extended from
    the example with another series and includes more data. The source code and the
    demo are available at [http://joekuan.org/Learning_Highcharts/](http://joekuan.org/Learning_Highcharts/).
    The two outer series use the `innerSize` option. As the inner pie will become
    even smaller and will not have enough space for the labels, we therefore enable
    the legend box for the innermost series with the `showInLegend` option.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以通过引入第三个系列来进一步复杂化饼图。我们在三个层次上绘制以下图表。代码简单地从示例中扩展了另一个系列并包含了更多数据。源代码和演示可在[http://joekuan.org/Learning_Highcharts/](http://joekuan.org/Learning_Highcharts/)找到。两个外部系列使用`innerSize`选项。由于内部饼图将变得甚至更小，并且没有足够的空间放置标签，因此我们通过`showInLegend`选项启用最内部系列的图例框。
- en: '![Preparing a donut chart – multiple series](img/7451OS_05_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![准备饼图 – 多系列](img/7451OS_05_06.jpg)'
- en: Building a chart with multiple series types
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多系列类型的图表
- en: 'So far, we have learned about the line, column, and pie series types. It''s
    time to bring all these different series presentations together in a single chart.
    In this section, we will use the annual data from 2008 through 2011 to plot three
    different kinds of series type: column, line, and pie. The column type represents
    the yearly number of games sold for each type of gaming console. The pie series
    shows the annual number of gaming consoles sold for each vendor. The last one
    is the spline series type that discloses how many new game titles there are released
    in total for all the consoles each year.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了线形、柱形和饼图系列类型。现在是时候将这些不同的系列展示方式汇总到一个图表中。在本节中，我们将使用2008年至2011年的年度数据来绘制三种不同类型的系列：柱形、线形和饼图。柱形类型表示每种游戏机每年的销量。饼图系列显示了每个供应商每年销售的年度游戏机数量。最后一个是样条图系列，它揭示了每年所有游戏机总共发布了多少新游戏标题。
- en: 'In order to ensure the whole graph uses the same color scheme for each type
    of gaming console, we have to manually assign a color code for each data point
    in the pie charts and the columns series:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保整个图表使用相同的颜色方案来表示每种游戏机类型，我们必须手动为饼图和柱形系列中的每个数据点分配一个颜色代码：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then decorate the chart in a more funky way. First, we give the chart a
    dark background with a color gradient:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们以更酷的方式装饰图表。首先，我们给图表添加一个深色背景和颜色渐变：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we need to shift the columns to the right-hand side, so that we have
    enough room for an image (described later) that we are going to put in the top
    left-hand corner:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将柱形向右移动，以便为（稍后描述的）要放置在右上角的照片留出足够的空间：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The next task is to make enough space for the pie charts to locate them above
    the columns. This can be accomplished by introducing the `maxPadding` option on
    both y axes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是为饼图留出足够的空间，以便将它们放置在柱形上方。这可以通过在两个y轴上引入`maxPadding`选项来实现：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Each pie series is displayed separately and aligned to the top of the columns,
    as well as with the year category. This is done by adjusting the pie chart''s
    `center` option in the series array. We also want to reduce the display size for
    the pie series, as there are other types of series to share within the chart.
    We will use the `size` option and set the value in percentages. The percentage
    value is the diameter of the pie series compared to the size of the plot area:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个饼图系列单独显示，并与其对应的柱形顶部以及年份类别对齐。这是通过调整系列数组中饼图的`center`选项来实现的。我们还想减小饼图系列的显示尺寸，因为图表中还有其他类型的系列需要共享。我们将使用`size`选项并设置百分比值。百分比值是饼图系列的直径与绘图区域大小的比例：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The spline series is defined to correspond to the opposite y axis. To make
    the series clearly associated with the second axis, we apply the same color scheme
    for the line, axis title, and labels:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 样条图系列被定义为对应于相反的y轴。为了使系列与第二个轴明显关联，我们应用相同的颜色方案来绘制线条、轴标题和标签：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We use the `renderer.image` method to insert the image into the chart and make
    sure that the image has a higher `zIndex`, so that the axis line does not lie
    at the top of the image. Instead of including a PNG image, we use an SVG image.
    This way the image stays sharp and avoids the pixelation effect when the chart
    is resized:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`renderer.image`方法将图像插入到图表中，并确保图像具有更高的`zIndex`，这样轴线就不会位于图像的顶部。我们不是包含一个PNG图像，而是使用SVG图像。这样，图像在图表缩放时保持清晰，避免了像素化效果：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the final look of the graph with a Pac-Man SVG image to give
    a gaming theme to the chart:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在图表中添加了Pac-Man SVG图像的最终图形，以给图表增添游戏主题：
- en: '![Building a chart with multiple series types](img/7451OS_05_07.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![构建多系列类型的图表](img/7451OS_05_07.jpg)'
- en: Creating a stock picking wheel
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建股票选择轮
- en: 'A stock picking wheel chart is a designer financial chart created by Investors
    Intelligence ([http://www.investorsintelligence.co.uk/wheel/](http://www.investorsintelligence.co.uk/wheel/)),
    and the chart provides an interactive way to visualize both the overall and detailed
    performance of major shares from a market index. The following is a screenshot
    of the chart:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 股票选择轮图表是由投资者智能（[http://www.investorsintelligence.co.uk/wheel/](http://www.investorsintelligence.co.uk/wheel/））设计的一种金融图表，该图表提供了一种交互式的方式来可视化市场指数中主要股票的整体和详细表现。以下是该图表的截图：
- en: '![Creating a stock picking wheel](img/7451OS_05_10.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![创建股票选择轮图表](img/7451OS_05_10.jpg)'
- en: Basically, it is an open-ended donut chart. Each slice represents a blue chip
    company and all the slices have equal width. The slices are divided into different
    color bands (from red, to orange, green, and blue) based on the share performance
    score. When the user hovers the mouse over a company name, a bigger slice appears
    at the gap of the donut chart with the company name and detailed performance information.
    Although this impressive chart is implemented in Adobe Flash, we are going to
    push our luck to see whether Highcharts can produce a lookalike cousin in this
    section. We will focus on the donut chart and leave the middle charts as an exercise
    for you later.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是一个开口的环形图。每个切片代表一家蓝筹股公司，所有切片的宽度都相等。根据股价表现分数，切片被分为不同的颜色带（从红色到橙色、绿色和蓝色）。当用户将鼠标悬停在某个公司名称上时，环形图缺口处会出现一个更大的切片，并显示该公司的详细业绩信息。尽管这个令人印象深刻的图表是用
    Adobe Flash 实现的，但我们还是想尝试看看 Highcharts 是否能在本节中产生一个类似的外观。我们将专注于环形图，并将中间图表留作你稍后的练习。
- en: Understanding startAngle and endAngle
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 startAngle 和 endAngle
- en: 'Before we start plotting a Stock Picking Wheel chart, we need to know how to
    create an open-ended donut chart. The options `startAngle` and `endAngle` can
    make a pie chart split open in any size and direction. However, we need to familiarize
    ourselves with these options before plotting the actual chart. By default, the
    starting position for the first slice is at 12 o''clock, which is regarded as
    0 degrees for the `startAngle` option. The `startAngle` option starts from the
    origin and moves in a clockwise direction to `endAngle`. Let''s make a simple
    pie chart with `startAngle` and `endAngle` assigned to `30` and `270` respectively:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始绘制股票选择轮图表之前，我们需要知道如何创建一个开口的环形图。`startAngle` 和 `endAngle` 选项可以使饼图在任何大小和方向上分裂。然而，在绘制实际图表之前，我们需要熟悉这些选项。默认情况下，第一个切片的起始位置在
    12 点钟，这被认为是 `startAngle` 选项的 0 度。`startAngle` 选项从原点开始，顺时针移动到 `endAngle`。让我们制作一个简单的饼图，将
    `startAngle` 和 `endAngle` 分别设置为 `30` 和 `270`：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code produces the following chart. Note that although the pie
    area for the series data becomes smaller, the data will still be proportionally
    adjusted:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下图表。请注意，尽管系列数据的饼图面积变小了，但数据仍然会按比例调整：
- en: '![Understanding startAngle and endAngle](img/7451OS_05_11.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![理解 startAngle 和 endAngle](img/7451OS_05_11.jpg)'
- en: 'In order to display a gap at the right-hand side of the pie, the `endAngle`
    option needs to be handled slightly differently. For `endAngle` to end up above
    the `startAngle` option, that is, the `endAngle` option goes round and passes
    the origin at 0 degrees, the `endAngle` value has to exceed 360, not start from
    0 degrees again. Let''s set the `startAngle` and `endAngle` values to 120 and
    420 respectively and increase the `innerSize` value to form a donut chart. Here
    is the new configuration:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在饼图的右侧显示一个间隙，`endAngle` 选项需要稍作不同的处理。为了使 `endAngle` 选项最终位于 `startAngle` 选项之上，即
    `endAngle` 选项绕过原点并在 0 度处通过，`endAngle` 的值必须超过 360，而不是再次从 0 度开始。让我们将 `startAngle`
    和 `endAngle` 的值分别设置为 120 和 420，并将 `innerSize` 值增加以形成一个环形图。以下是新的配置：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see the `endAngle` option goes past the origin and ends above the `startAngle`
    option. See the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `endAngle` 选项超过了原点，并在 `startAngle` 选项之上结束。请看以下截图：
- en: '![Understanding startAngle and endAngle](img/7451OS_05_12.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![理解 startAngle 和 endAngle](img/7451OS_05_12.jpg)'
- en: Creating slices for share symbols
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建股票符号的切片
- en: 'So far, we have successfully created the general shape of the stock picking
    wheel chart. The next task is to populate financial data labels on each slice
    with equal size. Instead of having a hundred shares from the FTSE index like the
    original chart, we will use the Dow Jones Industrial Average instead, which is
    composed of 30 major shares. First, we generate a series data array with share
    symbols in descending order of percentage change:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功地创建了股票选择轮图表的一般形状。下一个任务是给每个切片填充等大小的财务数据标签。而不是像原始图表那样使用 FTSE 指数的一百只股票，我们将使用道琼斯工业平均指数，它由
    30 只主要股票组成。首先，我们生成一个按百分比变化降序排列的股票符号数据数组：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We set the y-axis value to 1 for each share symbol in order to make it the same
    size for all the slices. Then, we evaluate the positive and negative gradual color
    change based on the ratio between the percentage change of those shares and the
    overall maximum and minimum values respectively. We then apply this ratio value
    to the `colorBrightness` method (which we have discussed previously) to achieve
    the gradual change effect.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个份额符号的y轴值设置为1，以便使所有切片的大小相同。然后，我们根据这些股份的百分比变化与整体最大值和最小值之间的比率来评估正负渐变色变化。然后，我们将这个比率值应用到我们之前讨论过的`colorBrightness`方法上，以实现渐变效果。
- en: 'As for the label rotation, since we know where to put each share symbol and
    what rotation to apply in advance, we can compute the label rotation based on
    the company''s share symbol position from the `startAngle`. The orientation for
    the `dataLabel` is different to the `startAngle`, which starts with the 3 o''clock
    position as 0 degrees (because we read text horizontally). With the `startAngle`
    as 120 degrees, we can easily calculate the `dataLabel` rotation for the first
    slice as 30 degrees (we add another 5 degrees for the `dataLabel` to appear in
    the middle of the slice) and each slice is another 10 degrees of rotation more
    than the previous slice. The following illustrates the logic of this computation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 至于标签旋转，因为我们事先知道每个份额符号的位置和应该应用的旋转角度，我们可以根据公司的份额符号位置从`startAngle`计算标签旋转。`dataLabel`的朝向与`startAngle`不同，它以3点钟位置为0度（因为我们水平阅读文本）。以`startAngle`为120度，我们可以轻松计算出第一个切片的`dataLabel`旋转为30度（我们再增加5度以便`dataLabel`位于切片的中间），每个切片比前一个切片多旋转10度。以下说明了这种计算的逻辑：
- en: '![Creating slices for share symbols](img/7451OS_05_13.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![创建份额符号的切片](img/7451OS_05_13.jpg)'
- en: 'Our next task is to remove the connector and move the default `dataLabel` position
    (which is outside the slice) towards the center of the pie chart. We achieve that
    by setting the `connectorWidth` value to zero and assigning the `distance` option
    to a negative value to drag the `dataLabel` towards the center of the chart, such
    that the label is placed inside the slice. Here is the `plotOptions.pie` config:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的任务是移除连接线并将默认的`dataLabel`位置（位于切片外部）移动到饼图的中心。我们通过将`connectorWidth`值设置为零并将`distance`选项设置为负值来实现这一点，这样就可以将`dataLabel`拖向图表的中心，使得标签位于切片内部。以下是`plotOptions.pie`配置：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows the result of rotating labels along the slice''s
    orientation for a stock picking wheel effect:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了旋转标签以实现股票选择轮效果的切片方向：
- en: '![Creating slices for share symbols](img/7451OS_05_14.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![创建份额符号的切片](img/7451OS_05_14.jpg)'
- en: Creating shapes with Highcharts' renderer
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Highcharts的渲染器创建形状
- en: The final missing piece for this experiment is to display an arc showing share
    symbol details when users hover the pointer over a slice. To do that, we make
    use of the Highcharts renderer engine, which provides a set of APIs to draw various
    shapes and text in the chart. In this exercise, we call the method `arc` to create
    a dynamic slice and position it inside the gap.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实验最后缺失的部分是在用户将指针悬停在切片上时显示一个显示份额符号详细信息的弧线。为了做到这一点，我们使用了Highcharts渲染器引擎，它提供了一套API来在图表中绘制各种形状和文本。在这个练习中，我们调用`arc`方法来创建一个动态切片并将其定位在间隙内。
- en: 'Since this is triggered by a user action, the process has to be performed inside
    an event handler. The following is the event handler code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是由用户操作触发的，因此该过程必须在事件处理程序内部执行。以下是事件处理程序代码：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the mouse over event, we first extract the triggered data point object from
    the `'this'` keyword inside the handler according to the Highcharts API documentation.
    From that, we can propagate down to restore the `renderer` object. Then, we create
    a group object with the renderer call `g( )` and then call the object method `add`
    to insert it into the chart. This group handling object enables us later to gather
    multiple SVG elements into one group for easier handling.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在鼠标悬停事件中，我们首先根据Highcharts API文档从处理程序内部的`'this'`关键字中提取触发数据点对象。从那里，我们可以向下传播以恢复`renderer`对象。然后，我们使用渲染器的`g()`调用创建一个组对象，然后调用该对象的方法`add`将其插入到图表中。这个组处理对象使我们能够后来将多个SVG元素组合成一个组，以便更容易处理。
- en: We then call the arc method to generate a slice with the chart's x and y center
    location evaluated from the chart plot dimension. We also specify the `innerRadius`
    parameter with a nonzero value (70) to make the arc emerge as a donut chart slice.
    Then, we chain the call with `css` for the same color as the point object and
    chain the `add` method to the group. Then, we create a textbox with stock details
    inside the new arc; the call is chained in the same manner with `css` and `add`
    to the same group.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后调用弧线方法来生成一个带有图表的 x 和 y 中心位置的切片，该位置是通过评估图表的绘图维度得到的。我们还指定了`innerRadius`参数，并赋予一个非零值（70），以便使弧线呈现出甜甜圈图表的切片效果。然后，我们使用`css`将调用与点对象相同的颜色链式调用，并将`add`方法链接到组上。接着，我们在新弧线内部创建一个包含股票详情的文本框；调用以相同的方式通过`css`和`add`链接到同一个组。
- en: 'For the mouse out event, we can take advantage of the group object. Instead
    of removing each element individually, we can simply call the `destroy` method
    on the group object. The following screenshot shows the new slice in display:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于鼠标移出事件，我们可以利用组对象。我们不需要逐个删除每个元素，只需在组对象上调用`destroy`方法即可。以下截图显示了新切片的显示效果：
- en: '![Creating shapes with Highcharts'' renderer](img/7451OS_05_15.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Highcharts 渲染器创建形状](img/7451OS_05_15.jpg)'
- en: 'So we have created a Highcharts look-alike of the stock picking wheel, and
    this proves how versatile Highcharts can be. However, for the sake of simplicity,
    this exercise omits some complexity, which compromises the finished look. In fact,
    if we push Highcharts hard enough, we can finish with a chart that looks even
    closer to the original. The following is such an example, with several color bands
    and color gradients on each slice:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们创建了一个类似 Highcharts 的股票选择轮，这证明了 Highcharts 的多功能性。然而，为了简化，这个练习省略了一些复杂性，这影响了最终的外观。实际上，如果我们足够努力地使用
    Highcharts，我们可以完成一个看起来甚至更接近原始图表的图表。以下是一个这样的例子，其中每个切片都有几个颜色带和颜色渐变：
- en: '![Creating shapes with Highcharts'' renderer](img/7451OS_05_16.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Highcharts 渲染器创建形状](img/7451OS_05_16.jpg)'
- en: The online demo can be found at [http://joekuan.org/demos/ftse_donut](http://joekuan.org/demos/ftse_donut).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在线演示可以在[http://joekuan.org/demos/ftse_donut](http://joekuan.org/demos/ftse_donut)找到。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to outline a pie chart and its variant,
    the donut chart. We also sketched a chart that included all the series types we
    have learned so far.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何绘制饼图及其变体甜甜圈图。我们还绘制了一个包含我们迄今为止所学所有系列类型的图表。
- en: In the next chapter, we will explore the Highcharts APIs that are responsible
    for making a dynamic chart, such as using AJAX queries to update the chart content,
    accessing components in Highcharts objects, exporting charts to SVG, and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨负责创建动态图表的 Highcharts API，例如使用 AJAX 查询更新图表内容、访问 Highcharts 对象中的组件、将图表导出为
    SVG 等等。
