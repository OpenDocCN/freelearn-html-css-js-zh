- en: Chapter 4. Building a Chatroulette
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：构建 Chatroulette
- en: The best way to master MediaStream and PeerJS is by building real-world applications,
    which is what we will do in this chapter. A chatroulette is a website that pairs
    random site visitors together for webcam and text-based conversation. Discussing
    how to build a chatroulette will help us to study PeerJS and PeerServer in depth,
    as it requires us to integrate PeerServer with Express. We will also add media
    controls to our site in order to pause/resume local MediaStream and allow the
    user to choose their desired microphone/webcam, which will help us to study MediaStream
    even more in depth. We will be actually creating a chatroulette that only allows
    the users of a particular country to chat, which would require an extra step of
    verification before connecting to the PeerServer; therefore, taking us even deeper
    into the integration of PeerServer into Express.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建实际的应用程序来掌握 MediaStream 和 PeerJS 是最好的方法，这正是我们在本章将要做的。Chatroulette 是一个网站，将随机网站访问者配对进行视频和基于文本的对话。讨论如何构建
    Chatroulette 将帮助我们深入学习和研究 PeerJS 和 PeerServer，因为它需要我们将 PeerServer 与 Express 集成。我们还将向我们的网站添加媒体控制功能，以便暂停/恢复本地
    MediaStream，并允许用户选择他们想要的麦克风/摄像头，这将帮助我们更深入地学习 MediaStream。我们将实际创建一个只允许特定国家用户聊天的
    Chatroulette，这需要在连接到 PeerServer 之前进行额外的验证步骤；因此，这将使我们更深入地了解 PeerServer 与 Express
    的集成。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Running your own instance of PeerServer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行自己的 PeerServer 实例
- en: Creating a custom PeerServer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义 PeerServer
- en: Integrating PeerServer with Express
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 PeerServer 与 Express 集成
- en: Verify users for connecting to PeerServer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证用户以连接到 PeerServer
- en: Finding the IP address and country of a user connected to the server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找连接到服务器的用户的 IP 地址和国家
- en: Allowing the user to use a microphone and webcam directly on the webpage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户在网页上直接使用麦克风和摄像头
- en: Discussing the requirements for building a completely working chatroulette
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论构建完全工作的 Chatroulette 的需求
- en: Creating your own PeerServer
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的 PeerServer
- en: Before we start building a chatroulette, let's see how to run our own instance
    of PeerServer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建 Chatroulette 之前，让我们看看如何运行我们自己的 PeerServer 实例。
- en: PeerServer is available as an npm package on npm cloud. Let's create a custom
    PeerServer and use it with the PeerJS application that we built in our previous
    chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PeerServer 作为 npm 云上的 npm 包提供。让我们创建一个自定义 PeerServer 并将其与我们在上一章中构建的 PeerJS 应用程序一起使用。
- en: First create a directory named `Custom-PeerServer` and place `app.js` and `package.json`
    files in it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为 `Custom-PeerServer` 的目录，并将 `app.js` 和 `package.json` 文件放入其中。
- en: 'In the `package.json` file, place the following code and run the `npm install`
    command to download the PeerServer package:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `package.json` 文件中，放置以下代码并运行 `npm install` 命令以下载 PeerServer 包：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At the time of writing, the latest version of PeerServer is 0.2.8\. Here, we
    will also download the `express` package, as we will need to demonstrate how to
    integrate PeerServer with Express.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，PeerServer 的最新版本是 0.2.8。在这里，我们还将下载 `express` 包，因为我们需要演示如何将 PeerServer
    与 Express 集成。
- en: PeerServer package provides a library to create a custom PeerServer or integrate
    PeerServer with Express and also an executable file to directly create our own
    instance of PeerServer without any customization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PeerServer 包提供了一组库来创建自定义的 PeerServer 或将 PeerServer 与 Express 集成，同时也提供了一个可执行文件，可以直接创建我们的
    PeerServer 实例，无需任何定制。
- en: Run PeerServer from shell
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 shell 运行 PeerServer
- en: 'If you want to directly run your own instance of PeerServer from shell without
    any customization, then run the following command in the `Custom-PeerServer/node_modules/peer/bin`
    directory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想直接从 shell 运行自己的 PeerServer 实例而不进行任何定制，请在 `Custom-PeerServer/node_modules/peer/bin`
    目录中运行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It should now print the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该会打印以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This confirms that `PeerServer` is running. To test whether the `PeerServer`
    instance is working or not, go to the `index.html` file of the application that
    we created in our previous chapter and replace the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了 `PeerServer` 正在运行。为了测试 `PeerServer` 实例是否正常工作，请转到我们在上一章中创建的应用程序的 `index.html`
    文件，并替换以下代码：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code will be replaced with the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将被以下代码替换：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now run the application and it should work as usual.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，它应该像往常一样工作。
- en: Using PeerServer library
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PeerServer 库
- en: PeerServer library is used to create a custom PeerServer. The PeerServer library
    also allows us to integrate PeerServer with the Express server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PeerServer库用于创建自定义PeerServer。PeerServer库还允许我们将PeerServer与Express服务器集成。
- en: Creating custom PeerServer
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义PeerServer
- en: 'Here is an example code that demonstrates how to create your own custom PeerServer.
    Place the following code in the `app.js` file and run the `node app.js` command
    to start the server:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例代码，演示了如何创建自己的自定义PeerServer。将以下代码放置在`app.js`文件中，并运行`node app.js`命令以启动服务器：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the first two lines of the code create the custom PeerServer. We then
    attached event handlers that will be triggered when a user connects or disconnects
    from PeerServer. A custom PeerServer doesn't provide an API to check whether a
    peer is allowed to connect to PeerServer or not. It just allows us to do something
    after the peer is connected or when the peer disconnects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，代码的前两行创建了自定义PeerServer。然后我们附加了事件处理器，当用户连接到或从PeerServer断开连接时将触发这些处理器。自定义PeerServer不提供检查对等方是否被允许连接到PeerServer的API。它只是允许我们在对等方连接后或对等方断开连接时执行某些操作。
- en: 'To test whether the custom PeerServer is working or not, go to the `index.html`
    file of the application that we created in the previous chapter and replace the
    following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试自定义PeerServer是否正常工作，请转到我们在上一章创建的应用程序的`index.html`文件，并替换以下代码：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code will be replaced with the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将被替换为以下代码：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now run the application and it should work as usual.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，它应该像往常一样工作。
- en: Integrating PeerServer with the Express server
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将PeerServer与Express服务器集成
- en: We can also integrate PeerServer with the Express server, that is, a particular
    path of the Express server will provide the signaling service. The main advantage
    of integrating PeerServer with the Express server is that we can check whether
    a peer is allowed to connect to PeerServer or not, and if it is not allowed, then
    we can stop the peer from using it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将PeerServer与Express服务器集成，即Express服务器的特定路径将提供信令服务。将PeerServer与Express服务器集成的优点在于，我们可以检查对等方是否被允许连接到PeerServer，如果不允许，则可以阻止对等方使用它。
- en: 'Here is an example code that demonstrates how to integrate PeerServer with
    the Express server. Place the following code in the `app.js` file and run the
    `node app.js` command to start the server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例代码，演示了如何将PeerServer与Express服务器集成。将以下代码放置在`app.js`文件中，并运行`node app.js`命令以启动服务器：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we are using a middleware provided by the `PeerServer` library to integrate
    PeerServer with Express. Here, PeerServer is made available on the `/signaling`
    path. You can use any path you want to.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`PeerServer`库提供的中间件将PeerServer与Express集成。在这里，PeerServer在`/signaling`路径上可用。你可以使用任何你想要的路径。
- en: The `PeerServer` library doesn't provide any way to check whether the peer is
    allowed to connect to PeerServer or not, so we are using our own technique, that
    is, we are attaching another middleware on top of the `ExpressPeerServer` middleware,
    which performs this check. Although this technique may seem fine, if our custom
    middleware stops the request from proceeding further, then PeerServer fires the
    `connection` and `disconnect` events and destroys the `Peer` instance on the frontend.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeerServer`库不提供任何方法来检查对等方是否被允许连接到PeerServer，因此我们使用自己的技术，即在`ExpressPeerServer`中间件之上附加另一个中间件，该中间件执行此检查。尽管这种技术看起来不错，但如果我们的自定义中间件阻止请求进一步进行，那么PeerServer将触发`connection`和`disconnect`事件，并在前端销毁`Peer`实例。'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about PeerServer at [https://www.npmjs.com/package/peer](https://www.npmjs.com/package/peer).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.npmjs.com/package/peer](https://www.npmjs.com/package/peer)了解更多关于PeerServer的信息。
- en: Creating a chatroulette
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天室轮盘赌
- en: The chatroulette that we will build is only for people residing in India, that
    is, a peer cannot connect to the PeerServer if the IP address of the peer doesn't
    resolve to India. We added this filter to make the website a little more complex
    to code so that you can learn how to check whether a user is allowed to connect
    to PeerServer or not.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的聊天室轮盘赌仅面向居住在印度的人，也就是说，如果对等方的IP地址无法解析为印度，则对等方无法连接到PeerServer。我们添加了这个过滤器，使网站代码更加复杂，这样你就可以学习如何检查用户是否被允许连接到PeerServer。
- en: We will use a single server that will serve webpages and also act as a PeerServer,
    that is, we will integrate PeerServer with the Express server.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个服务器，该服务器将提供网页服务并充当PeerServer，也就是说，我们将PeerServer与Express服务器集成。
- en: We won't get into designing the frontend of our chatroulette. We will only be
    concentrating on building the architecture and functionalities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涉及设计聊天roulette的前端。我们只会专注于构建架构和功能。
- en: 'The exercise files for this chapter contain two directories: `Chatroulette`
    and `Custom-PeerServer`. In the `Chatroulette` directory, there are two directories:
    `Initial` and `Final`. In the `Final` directory, you will find the complete chatroulette
    source code. In the `Initial` directory, you will only find the HTML code for
    our chatroulette. The `Initial` directory is to help you quickly get started with
    building the chatroulette.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的练习文件包含两个目录：`Chatroulette`和`Custom-PeerServer`。在`Chatroulette`目录中，有两个子目录：`Initial`和`Final`。在`Final`目录中，你可以找到完整的聊天roulette源代码。在`Initial`目录中，你只能找到我们聊天roulette的HTML代码。`Initial`目录是为了帮助你快速开始构建聊天roulette。
- en: You will place the code related to the frontend functionality of the site in
    the `Initial/public/js/main.js` file and you will place the code related to the
    server side functionality in the `Initial/app.js` file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把与网站前端功能相关的代码放置在`Initial/public/js/main.js`文件中，并将与服务器端功能相关的代码放置在`Initial/app.js`文件中。
- en: Building the backend
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建后端
- en: 'Our site will basically contain three URL end points: a root path for serving
    the home page, the `/find` path to find the ID of a free user for chatting, and
    finally the `/signaling` path that serves as the end point for PeerServer.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网站将基本包含三个URL端点：一个根路径用于服务主页，`/find`路径用于查找聊天用户的ID，最后是作为PeerServer端点的`/signaling`路径。
- en: Every user will have a unique ID that is generated by PeerServer. For a user
    to retrieve the ID of another free user using the `/find` URL, they must be first
    be connected to PeerServer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都将有一个由PeerServer生成的唯一ID。为了使用`/find` URL检索另一个空闲用户的ID，用户必须首先连接到PeerServer。
- en: The server will maintain two different arrays, that is, the first array contains
    IDs of the users connected to PeerServer and the second array contains IDs of
    the users that need a partner to chat.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将维护两个不同的数组，即第一个数组包含连接到PeerServer的用户ID，第二个数组包含需要聊天伙伴的用户ID。
- en: 'Let''s get started with building our backend. Place the following code in the
    `app.js` file to create our web server and serve the home page of our site:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建我们的后端。将以下代码放置在`app.js`文件中，以创建我们的Web服务器并服务我们网站的主页：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here we are serving the `index.html` file as our home page. Run the `node app.js`
    command to start the server. I am assuming that you are running `node.js` on the
    localhost, so open the `http://localhost:8080/` URL on the browser to see the
    home page. The home page should look similar to the following image:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在作为主页服务`index.html`文件。运行`node app.js`命令来启动服务器。我假设你在本地主机上运行`node.js`，所以请在浏览器中打开`http://localhost:8080/`
    URL以查看主页。主页应该看起来类似于以下图像：
- en: '![Building the backend](img/B05154_04_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![构建后端](img/B05154_04_01.jpg)'
- en: 'The following are the different elements of the home page:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们主页的不同元素：
- en: At the top of the home page, we will display the status of the `PeerServer`
    connection, `DataConnection`, and `MediaConnection`.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主页顶部，我们将显示`PeerServer`连接状态、`DataConnection`和`MediaConnection`的状态。
- en: Then we will display a video element and message box. `MediaStream` of the remote
    peer will be rendered on the video element.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将显示一个视频元素和消息框。远程对等方的`MediaStream`将在视频元素上渲染。
- en: Then we have drop-down boxes for the user to select a microphone and webcam
    that they want to use if they have multiple microphones or webcams connected to
    their computer.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们有下拉框，用户可以选择他们想要使用的麦克风和摄像头，如果他们的计算机连接了多个麦克风或摄像头。
- en: Then we have checkboxes that allow the users to pause or resume their audio
    and video.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们有复选框，允许用户暂停或恢复他们的音频和视频。
- en: Finally, we have a button that allows the user to disconnect from the current
    user and chat with another user.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有一个按钮，允许用户断开与当前用户的连接，并与另一个用户聊天。
- en: Every interactive element in the HTML page has an ID associated with it. While
    coding the frontend of the website, we will be using their IDs to get their reference.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: HTML页面中的每个交互元素都有一个与之关联的ID。在编写网站的前端时，我们将使用它们的ID来获取它们的引用。
- en: 'Now let''s create our signaling server. Here is the code for this. Place it
    in the `app.js` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的信令服务器。以下是相应的代码。将其放置在`app.js`文件中：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is how the code works:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何代码工作的：
- en: Before the user can connect to PeerServer, we will find the country to which
    the IP address of the user belongs. We will find the IP address using the `request-ip`
    module and resolve the IP address to the country using the `geoip-lite` module.
    If the country is `IN` or the country name couldn't be resolved, then we will
    allow the user to connect to PeerServer by triggering the next middleware, otherwise
    we will stop them by sending an empty response.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户能够连接到PeerServer之前，我们将找到用户IP地址所属的国家。我们将使用`request-ip`模块找到IP地址，并使用`geoip-lite`模块将IP地址解析为国家。如果国家是`IN`或国家名称无法解析，则通过触发下一个中间件允许用户连接到PeerServer，否则通过发送空响应来阻止他们。
- en: When a user connects to PeerServer, we will add the ID of the user in the `connected_users`
    array that maintains a list IDs if the users that are connected to PeerServer.
    Similarly, when the user disconnects from the PeerServer, we will remove the ID
    of the user from the `connected_users` array.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户连接到PeerServer时，我们将用户的ID添加到`connected_users`数组中，该数组维护着连接到PeerServer的用户ID列表。同样，当用户从PeerServer断开连接时，我们将用户的ID从`connected_users`数组中移除。
- en: 'Now let''s define route for the `/find` path using which a user can find another
    user who is free to chat. The following is the code for this. Place this code
    in the `app.js` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义一个用于`/find`路径的路由，用户可以通过这个路径找到可以聊天的人。以下是这个功能的代码。将此代码放置在`app.js`文件中：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is how the code works:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的工作原理：
- en: The `waiting_users` array holds the IDs of the users who are free and looking
    for a partner to chat to.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waiting_users`数组保存着寻找聊天伙伴的用户ID。'
- en: When a user makes a request to the `/find` path, the route handler first checks
    whether the user is connected to PeerServer or not by checking whether the user
    ID is present in the `connected_users` array.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户向`/find`路径发起请求时，路由处理程序首先检查用户是否已连接到PeerServer，通过检查用户ID是否存在于`connected_users`数组中。
- en: If the user is not connected to PeerServer, then it sends an HTTP 404 error.
    If the user is connected to PeerServer, then it checks whether the user's ID is
    present in the `waiting_list` array. If not, it adds in the array and proceeds.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户未连接到PeerServer，则发送HTTP 404错误。如果用户已连接到PeerServer，则检查用户的ID是否存在于`waiting_list`数组中。如果不在此数组中，则将其添加到数组中并继续。
- en: Now it checks whether any other user ID is also present in the `waiting_list`
    array, and if yes, then it sends the first user ID in the list and then removes
    all user IDs from the `waiting_list` array. If it doesn't find any other user
    ID in the `waiting_list` array, then it simply sends `404 error`.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在它检查`waiting_list`数组中是否还有其他用户ID，如果有，则发送列表中的第一个用户ID，然后从`waiting_list`数组中删除所有用户ID。如果没有在`waiting_list`数组中找到其他用户ID，则简单地发送`404错误`。
- en: Now we are done building the backend of our website. Before we get into building
    the frontend of our site, make sure that you restart the server with the latest
    code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了网站后端的构建。在我们开始构建网站的前端之前，请确保使用最新代码重启服务器。
- en: Building the frontend
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建前端
- en: 'First of all, as soon as the home page loads, we need to find the microphones
    and webcams connected to the user computer and list them so that the user can
    choose the desired device. The following is the code to do this. Place this code
    in the `main.js` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，当主页加载时，我们需要找到连接到用户电脑的麦克风和摄像头，并将它们列出，以便用户可以选择所需的设备。以下是实现这一功能的代码。将此代码放置在`main.js`文件中：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here we are retrieving the audio and video input devices using `MediaStream.getSources`
    and populating the `<select>` tags so that the user can choose an option.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`MediaStream.getSources`检索音频和视频输入设备，并填充`<select>`标签，以便用户可以选择选项。
- en: 'As soon as the home page loads, we also need to create a `Peer` instance. Here
    is the code to do this. Place this code in the `main.js` file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当主页加载时，我们还需要创建一个`Peer`实例。以下是实现这一功能的代码。将此代码放置在`main.js`文件中：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is how the code works:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的工作原理：
- en: First we declared five global variables. `peer` will hold reference for the
    `Peer` instance, `dc` will hold reference for `DataConnection`, `mc` will hold
    reference for `MediaConnection`, `ms` will hold reference for the local `MediaStream`,
    and `rms` will hold reference for the remote `MediaStream`.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们声明了五个全局变量。`peer`将保存`Peer`实例的引用，`dc`将保存`DataConnection`的引用，`mc`将保存`MediaConnection`的引用，`ms`将保存本地`MediaStream`的引用，而`rms`将保存远程`MediaStream`的引用。
- en: Then, as soon as the page finished loading, we connected to PeerServer, creating
    a `Peer` instance and attaching event handlers for the `disconnected`, `connection`,
    and `call` event handlers.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，页面加载完成后，我们连接到PeerServer，创建一个`Peer`实例，并附加`disconnected`、`connection`和`call`事件处理程序。
- en: Then we made sure that in case a peer gets disconnected from PeerServer due
    to some reason, then it automatically tries to connect to PeerServer.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们确保如果由于某些原因节点从PeerServer断开连接，它将自动尝试重新连接到PeerServer。
- en: If another peer tries to establish `DataConnection` with us, then we will only
    accept it if there is no other `DataConnection` currently established, otherwise
    we will reject it. After accepting `DataConnection`, we attached the event handlers
    for the `data` and `close` events to print the incoming messages in the chat box,
    and clear all messages in the chat box if `DataConnection` is closed.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果另一个节点试图与我们建立`DataConnection`，那么我们只有在没有其他`DataConnection`当前建立的情况下才会接受它。接受`DataConnection`后，我们将附加`data`和`close`事件处理程序，以便在聊天框中打印传入的消息，并在`DataConnection`关闭时清除聊天框中的所有消息。
- en: Similarly, if another peer tries to establish `MediaConnection` with us, we
    will only accept it if there is no other `MediaConnection` currently established,
    otherwise we will reject it. After accepting the `MediaConnection`, we will attach
    the event handler for the `stream` event so that when remote `MediaStream` arrives,
    we can display it.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，如果另一个节点试图与我们建立`MediaConnection`，我们只有在没有其他`MediaConnection`当前建立的情况下才会接受它。接受`MediaConnection`后，我们将附加`stream`事件处理程序，以便当远程`MediaStream`到达时，我们可以显示它。
- en: In the preceding code, we are waiting for another peer to establish `DataConnection`
    and `MediaConnection` with us.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在等待另一个节点与我们建立`DataConnection`和`MediaConnection`。
- en: 'Now let''s write a code to find a free peer and establish `DataConnection`
    and `MediaConnection` with it. The following is the code for this. Place this
    code in the `main.js` file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写代码来查找一个空闲节点，并与它建立`DataConnection`和`MediaConnection`。以下是实现此功能的代码。请将此代码放置在`main.js`文件中：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This code is long but easy to understand. Here is how the code works:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码虽然很长，但很容易理解。以下是代码的工作原理：
- en: First we defined a `ajaxRequestObject()` function that just returns an AJAX
    object and hides browser differences by creating an AJAX object.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们定义了一个`ajaxRequestObject()`函数，该函数仅返回一个AJAX对象，并通过创建AJAX对象来隐藏浏览器差异。
- en: Then we defined the `connectToNextPeer()` method that makes requests for a free
    ID from the `/next` path, and if found, it establishes `DataConnection` and `MediaConnection`
    with this peer. It also attaches the necessary event handlers that are same as
    the previous code.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了`connectToNextPeer()`方法，该方法从`/next`路径请求一个空闲ID，如果找到，则与该节点建立`DataConnection`和`MediaConnection`。它还附加了与之前代码相同的事件处理程序。
- en: While retrieving `MediaStream`, it uses the device selected by the user in the
    dropdown.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在检索`MediaStream`时，它使用用户在下拉列表中选择的设备。
- en: Before calling the other peer, it sets the `enabled` property to `true` or `false`,
    depending on whether the checkbox is checked or not respectively.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用其他节点之前，它根据复选框是否被选中将`enabled`属性设置为`true`或`false`。
- en: Finally, we set a timer that calls the `connectToNext()` peer once in every
    four second if the peer is connected to PeerServer, and `MediaConnection` or `DataConnection`
    is currently not established with another peer.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，如果节点已连接到PeerServer，并且与另一个节点之间尚未建立`MediaConnection`或`DataConnection`，我们将设置一个计时器，每四秒调用一次`connectToNext()`节点。
- en: 'Now we need to write code to send the message to a connected peer when the
    user presses the *Enter* key on the text input fields of the message box. Here
    is the code to do this. Place this code in the `main.js` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写代码，当用户在消息框的文本输入字段中按下*Enter*键时，向连接的节点发送消息。以下是实现此功能的代码。请将此代码放置在`main.js`文件中：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, at first, we are checking whether `DataConnection` is established or not.
    If `DataConnection` is currently established, then we will send a message to the
    connected peer and also display the message in the message box.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先检查`DataConnection`是否已建立。如果`DataConnection`当前已建立，那么我们将向连接的节点发送消息，并在消息框中显示该消息。
- en: 'Now we need to write the code to pause or resume audio and video when the user
    toggles the checkboxes. The following is the code to do this. Place this code
    in the `main.js` file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写代码以在用户切换复选框时暂停或恢复音频和视频。以下是实现此功能的代码。请将此代码放置在`main.js`文件中：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here we are achieving this functionality by assigning `true` or `false` to the
    enabled property of the tracks.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过将 `true` 或 `false` 分配给 tracks 的 enabled 属性来实现这一功能。
- en: 'We need to close `MediaConnection` and `DataConnection` and find another user
    for chatting when the user clicks on the **Next User** button. The following is
    the code to do this. Place this code in the `main.js` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **Next User** 按钮时，我们需要关闭 `MediaConnection` 和 `DataConnection` 并找到另一个用户进行聊天。以下是要执行此操作的代码。将此代码放置在
    `main.js` 文件中：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If there is any `MediaConnection` or `DataConnection` currently established,
    then we are closing it. Then we will call the `connectToNextPeer()` method to
    establish `MediaConnection` and `DataConnection`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前已建立任何 `MediaConnection` 或 `DataConnection`，则我们将关闭它们。然后我们将调用 `connectToNextPeer()`
    方法来建立 `MediaConnection` 和 `DataConnection`。
- en: 'Now we finally need to display the status of the peer-to-peer connection and
    PeerServer connection. Here is the code to do this. Place this code in the `main.js`
    file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们最终需要显示对等连接和 PeerServer 连接的状态。以下是执行此操作的代码。将此代码放置在 `main.js` 文件中：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here we are checking and updating the status every `4` seconds.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们每 `4` 秒检查和更新一次状态。
- en: Testing the website
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试网站
- en: To test the chatroulette website we just created, first make sure that the server
    is running and then open the `http://localhost:8080/` URL in two different tabs,
    browsers, or devices.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们刚刚创建的 chatroulette 网站，首先确保服务器正在运行，然后在两个不同的标签页、浏览器或设备中打开 `http://localhost:8080/`
    URL。
- en: Now you will see that both of them automatically get connected and are able
    to chat with each other.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到它们自动连接，并且能够相互聊天。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to build a chatroulette using our own instance of
    PeerServer that is integrated with Express. The website we build had almost all
    the features that a chatroulette should have. You can now add features such as
    screen sharing, connecting users of particular a gender with each other, connecting
    users of a particular age, integrating captcha to prevent spam, and other features
    of your choice.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用与 Express 集成的 PeerServer 实例构建 chatroulette。我们构建的网站几乎具有 chatroulette
    应有的所有功能。现在您可以添加屏幕共享、将特定性别的用户相互连接、将特定年龄的用户相互连接、集成 captcha 以防止垃圾邮件以及其他您选择的功能。
- en: At the time of writing, the WebRTC team is working on an API that allows you
    to retrieve a stream from a screen for screen sharing. As this API is still under
    development, you can use browser plugins to retrieve a stream from a screen. You
    can find more about retrieving a stream from a screen using the plugins at [https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/](https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，WebRTC 团队正在开发一个 API，允许您从屏幕中检索流以实现屏幕共享。由于此 API 仍在开发中，您可以使用浏览器插件从屏幕中检索流。您可以在
    [https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/](https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/)
    上找到更多关于使用插件从屏幕中检索流的信息。
- en: In the next chapter, we will discuss bidirectional communication between the
    client and the server in real time using WebSockets.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论客户端和服务器之间使用 WebSockets 的实时双向通信。
