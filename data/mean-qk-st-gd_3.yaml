- en: Building a RESTful API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建RESTful API
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: CRUD operations using ExpressJS' route methods
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ExpressJS的路由方法进行CRUD操作
- en: CRUD operations with Mongoose
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mongoose进行CRUD操作
- en: Using Mongoose query builders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mongoose查询构建器
- en: Defining document instance methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义文档实例方法
- en: Defining static model methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义静态模型方法
- en: Writing middleware functions for Mongoose
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Mongoose编写中间件函数
- en: Writing custom validators for Mongoose's schemas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Mongoose的模式编写自定义验证器
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ExpressJS和Mongoose构建RESTful API来管理用户
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个IDE、Visual Studio Code、Node.js和MongoDB。您还需要安装Git，以便使用本书的Git存储库。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[https://goo.gl/73dE6u](https://goo.gl/73dE6u)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/73dE6u](https://goo.gl/73dE6u)'
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Representation State Transfer** (**REST**) is an architectural style that
    the web was built on. More specifically, the HTTP 1.1 protocol standards were
    built using the REST principles. REST provides a representation of a resource.
    **URLs** (**Uniform Resource Locator**) are used to define the location of a resource
    and tell the browser where it is located.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示状态转移**（**REST**）是Web建立的一种架构风格。更具体地说，HTTP 1.1协议标准是使用REST原则构建的。REST提供了资源的表示。**URL**（**统一资源定位符**）用于定义资源的位置并告诉浏览器它的位置。'
- en: A RESTful API is a web service API that adheres to this architectural style.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是遵循这种架构风格的Web服务API。
- en: 'The most commonly used HTTP verbs or methods are: `POST, GET, PUT,` and `DELETE`.
    These methods are the basis for persistent storage and are known as **CRUD** operations
    (**Create, Read, Update, and Delete**).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的HTTP动词或方法是：`POST, GET, PUT,`和`DELETE`。这些方法是持久存储的基础，并被称为**CRUD**操作（**创建、读取、更新和删除**）。
- en: In this chapter, the recipes will be focused on building a RESTful API using
    the REST architectural style with ExpressJS and Mongoose.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点放在使用ExpressJS和Mongoose构建RESTful API上的配方上。
- en: CRUD operations using ExpressJS' route methods
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ExpressJS的路由方法进行CRUD操作
- en: 'ExpressJS'' router has equivalent methods to handle HTTP methods. In other
    words, the HTTP methods `POST`, `GET`, `PUT`, and `DELETE` can be handled by this
    code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS的路由器具有等效的方法来处理HTTP方法。换句话说，可以通过此代码处理`POST`、`GET`、`PUT`和`DELETE`这些HTTP方法：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s good to think of every URL as a noun and because of that a verb can act
    on it. In fact, HTTP methods are also known as HTTP verbs. If we think about them
    as verbs, when a request is made to our RESTful API, they can be understood as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个URL视为名词是很好的，因此动词可以对其进行操作。事实上，HTTP方法也被称为HTTP动词。如果我们将它们视为动词，当对我们的RESTful API进行请求时，它们可以被理解为：
- en: Post a user
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布用户
- en: Get a user
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户
- en: Update a user
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户
- en: Delete a user.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户。
- en: In the **MVC** (**model-view-controller**) architectural pattern, controllers
    are in charge of transforming input to something a model or view can understand.
    In other words, they transform input into actions or commands and sends them to
    the model or view to update accordingly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在**MVC**（**模型-视图-控制器**）架构模式中，控制器负责将输入转换为模型或视图可以理解的内容。换句话说，它们将输入转换为操作或命令，并将其发送到模型或视图以相应地进行更新。
- en: ExpressJS' route methods usually act as controllers. They just get input from
    a client such as a request from the browser, and then converts the input to actions.
    These actions are then sent to the model, which is the business logic of your
    application, such as a mongoose model, or to a view (a ReactJS client application)
    to update.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ExpressJS的路由方法通常充当控制器。它们只是从浏览器等客户端获取输入，然后将输入转换为操作。然后将这些操作发送到模型，这是应用程序的业务逻辑，例如mongoose模型，或者发送到视图（ReactJS客户端应用程序）进行更新。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Keeping in mind that we can invoke an action over a resource using HTTP methods,
    we will see how to build a RESTful API web service based on those concepts. Before
    you start, create a new `package.json` file with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们可以使用HTTP方法对资源进行操作，我们将看到如何基于这些概念构建RESTful API Web服务。在开始之前，请使用以下代码创建一个新的`package.json`文件：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, install the dependencies by opening a terminal and running this line
    of code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下代码来安装依赖项：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Build a RESTful API with an in-memory database or an array of objects that
    will contain a list of users. We will allow CRUD operations using HTTP methods
    to add a new user, get a user or list of users, update a user''s data, and delete
    a user:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内存数据库或包含用户列表的对象数组构建RESTful API。我们将允许使用HTTP方法进行CRUD操作，包括添加新用户、获取用户或用户列表、更新用户数据和删除用户：
- en: Create a new file named `restfulapi.js`
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`restfulapi.js`的新文件
- en: 'Import the packages that we need and create an ExpressJS application:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们需要的包并创建一个ExpressJS应用程序：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Define an in-memory database:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义内存数据库：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a model which will contain functions for making CRUD operations:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含用于进行CRUD操作的函数的模型：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a request handler for the `post` method that will be used as a `Create`
    operation. A new user will be added to the `data` array:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`post`方法添加一个请求处理程序，该处理程序将用作`Create`操作。将新用户添加到`data`数组中：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a request handler for the `get` method that will be used as a `Read` or
    `Retrieve` operation. If an `id` is given, look for the user in the `data` array.
    However, If the given `id` is `"all"`, it will return the whole list of users:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`get`方法添加一个请求处理程序，该处理程序将用作`Read`或`Retrieve`操作。如果给定`id`，则在`data`数组中查找用户。但是，如果给定的`id`是`"all"`，它将返回整个用户列表：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a request handler for the `put` method that will be used as an `Update`
    operation. An `id` needs to be provided in order to update a specific user in
    the `data` array:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`put`方法添加一个请求处理程序，该处理程序将用作`Update`操作。需要提供一个`id`来更新`data`数组中的特定用户：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a request handler for the `delete` method that will be used as a `Delete`
    operation. It will look for the user in the `data` array and remove it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`delete`方法添加一个请求处理程序，该处理程序将用作`Delete`操作。它将在`data`数组中查找用户并将其删除：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start your application listening on port `1337` for new connections:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序监听端口`1337`以进行新连接：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Open a Terminal and run this code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行此代码：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's test it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来测试一下...
- en: 'To make it simple, create a script that will request and make CRUD operations
    on our RESTful API server:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，创建一个脚本，将在我们的RESTful API服务器上请求并执行CRUD操作：
- en: Create a new file named `test-restfulapi.js`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`test-restfulapi.js`的新文件。
- en: 'Add the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the file.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Open a new Terminal and run this code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端并运行此代码：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our RESTful API application will be running locally on port `1337`. When running
    the test code, it will connect to it and make several requests using different
    HTTP methods to create a user, retrieve a user, update a user, and delete a user.
    All the operations will be logged in the Terminal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的RESTful API应用程序将在本地端口`1337`上运行。运行测试代码时，它将连接到它并使用不同的HTTP方法进行多个请求，以创建用户，检索用户，更新用户和删除用户。所有操作将在终端中记录。
- en: 'If you prefer to test it yourself, you can replace all the code inside the
    `test` function, and use the `r` function to make custom requests. For instance,
    to create a new user called `Smith`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢自己测试，可以替换`test`函数内的所有代码，并使用`r`函数进行自定义请求。例如，要创建一个名为`Smith`的新用户：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: CRUD operations with Mongoose
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mongoose进行CRUD操作
- en: One of many reasons why developers opt to use Mongoose instead of the official
    MongoDB driver for Node.js is that it allows you to create data structures with
    ease by using schemas and also because of the built-in validation. MongoDB is
    a document-oriented database, meaning that the structure of the documents varies.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员选择使用Mongoose而不是Node.js的官方MongoDB驱动程序的许多原因之一是，它允许您通过使用模式轻松创建数据结构，并且还因为内置验证。MongoDB是一种面向文档的数据库，这意味着文档的结构是多样化的。
- en: In the MVC architectural pattern, Mongoose is often used for creating models
    that shape or define data structures.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC架构模式中，Mongoose通常用于创建塑造或定义数据结构的模型。
- en: 'This is how a typical Mongoose schema would be defined and then compiled into
    a model:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是典型的Mongoose模式的定义方式，然后编译成模型：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Model names should be in singular since Mongoose will make them plural and lowercase
    them when saving the collection to the database. For instance, if the model is
    named "User", it will be saved as a collection named "users" in MongoDB. Mongoose
    includes an internal dictionary to pluralize common names. That means if your
    model's name is a common name, such as "Person", it will be saved in MongoDB as
    a collection named "people".
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 模型名称应该是单数，因为Mongoose在将集合保存到数据库时会将它们变成复数并将它们转换为小写。例如，如果模型名为“User”，它将以“users”的名称保存在MongoDB中。Mongoose包含一个内部字典来将常见名称变为复数形式。这意味着如果您的模型名称是一个常见名称，比如“Person”，它将在MongoDB中保存为一个名为“people”的集合。
- en: 'Mongoose allows the following types to define a schema''s path or document
    structure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose允许使用以下类型来定义模式的路径或文档结构：
- en: String
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Number
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: Boolean
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Array
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Date
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: Buffer
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲区
- en: Mixed
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合
- en: Objectid
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Objectid
- en: Decimal128
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Decimal128
- en: 'A schema type can be declared by using directly the global constructor function
    for `String`, `Number`, `Boolean`, `Buffer`, and `Date`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过直接使用`String`、`Number`、`Boolean`、`Buffer`和`Date`的全局构造函数来声明模式类型：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These schema types are also available under an object called `SchemaTypes`
    in the exported `mongoose` object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式类型也可以在导出的`mongoose`对象中的名为`SchemaTypes`的对象下使用：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Schema types can be declared using an object as a property that gives you more
    control over the specific schema type. Take the following code, for example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用对象作为属性来声明模式类型，从而更好地控制特定的模式类型。例如，看下面的代码：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Schema types can also be arrays. For instance, if we want a field to define
    what are the things the user likes in an array of strings, you could use this
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 模式类型也可以是数组。例如，如果我们想要一个字段来定义用户喜欢的事物的字符串数组，可以使用以下代码：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To learn more about schema types, visit the official Mongoose documentation
    website: [http://mongoosejs.com/docs/schematypes.html](http://mongoosejs.com/docs/schematypes.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关模式类型的更多信息，请访问官方Mongoose文档网站：[http://mongoosejs.com/docs/schematypes.html](http://mongoosejs.com/docs/schematypes.html)。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see how to define a schema and perform CRUD operation
    on the database collection. First, ensure that you have MongoDB installed and
    it''s running. As an alternative, if you prefer, a MongoDB **DBaaS** (**Database
    as a Service**) instance in the cloud will also do. Before you start, create a
    new `package.json` file with the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将看到如何定义模式并对数据库集合执行CRUD操作。首先确保已安装MongoDB并且正在运行。作为替代方案，如果您愿意，在云中也可以使用MongoDB
    **DBaaS**（**数据库即服务**）实例。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行此代码来安装依赖项：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Define a user schema that will contain user''s first name, last name, and an
    array of strings that define the things the user likes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个用户模式，其中包含用户的名字、姓氏和定义用户喜欢的事物的字符串数组：
- en: Create a new file named `mongoose-models.js`
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mongoose-models.js`的新文件
- en: 'Include the Mongoose NPM module. Then, create a connection to MongoDB:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含Mongoose NPM模块。然后，创建与MongoDB的连接：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Define a schema:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compile the schema into a model:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define a function that will be used for adding new users:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于添加新用户的函数：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define a function that will be used for retrieving a user from the collection
    of users by its `id`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于通过其`id`从用户集合中检索用户的函数：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define a function that will remove the user from the collection of users by
    its `id`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个函数，将通过其`id`从用户集合中删除用户：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define an event listener that will perform CRUD operations once the there is
    a connection to the database. First, add a new user and save it. Then, retrieve
    the same user using its `id`. Next, modify the user''s properties and save it.
    Finally, remove the user from the collection by its `id`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个事件监听器，一旦连接到数据库，就会执行CRUD操作。首先，添加一个新用户并保存它。然后，使用其`id`检索相同的用户。接下来，修改用户的属性并保存。最后，通过其`id`从集合中删除用户：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save the file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Open a Terminal and run this code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行此代码：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Executing the previous command in the Terminal, if successful, would display
    something similar to the following, for instance, a code such as this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中执行前一个命令，如果成功，将显示类似于以下内容，例如，类似于这样的代码：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装MongoDB*部分'
- en: Using Mongoose query builders
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mongoose查询构建器
- en: 'Every Mongoose model has static helper methods to do several kinds of operations,
    such as retrieving a document. When a callback is passed to these helper methods,
    the operation is executed immediately:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Mongoose模型都有静态辅助方法来执行多种操作，比如检索文档。当这些辅助方法传递一个回调时，操作会立即执行：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Otherwise, if there is no defined callback, a *query builder interface* is
    returned, which can be later executed:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果没有定义的回调函数，将返回一个*查询构建器接口*，稍后可以执行：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Queries also have a `.then` function which can be used as a `Promise`. When
    `.then` is called, it first executes the query internally with `.exec` which then
    returns a `Promise`. This allows us to use `async/await` as well. Inside a `async`
    function, for instance:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 查询还有一个`.then`函数，可以作为`Promise`使用。当调用`.then`时，它首先使用`.exec`内部执行查询，然后返回一个`Promise`。这使我们也可以使用`async/await`。例如，在`async`函数内部：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'There are two ways that we can make a query. One is by providing a JSON object
    that is used as a condition and the other way allows you to create a query using
    chaining syntax. The chaining syntax will feel more comfortable to developers
    who are more familiar with SQL databases. For example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行查询的两种方式。一种是提供一个作为条件使用的JSON对象，另一种方式允许您使用链接语法创建查询。链接语法将更适合熟悉SQL数据库的开发人员。例如：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build up queries using chaining syntax and using `async/await`
    functions. First, ensure that you have MongoDB installed and it''s running. As
    an alternative, if you prefer, a MongoDB DBaaS instance in the cloud will also
    do. Before you start, create a new `package.json` file with the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将使用链接语法和`async/await`函数构建查询。首先确保已安装MongoDB并且正在运行。作为替代方案，如果您愿意，云中的MongoDB
    DBaaS实例也可以。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行来安装依赖项：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new file named `chaining-queries.js`
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chaining-queries.js`的新文件
- en: 'Include the Mongoose NPM module. Then, create a new connection:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含Mongoose NPM模块。然后，创建一个新连接：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a schema:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Compile the schema into a model:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译模式为模型：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once connected to the database, add a new document to the collection of users.
    Then, using chaining syntax, query for the recently created user. Additionally,
    use the `select` method to restrict which fields are retrieved from the document:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到数据库后，向用户集合添加一个新文档。然后，使用链接语法查询最近创建的用户。此外，使用`select`方法限制从文档中检索哪些字段：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Save the file
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: See also
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装MongoDB*部分'
- en: Defining document instance methods
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义文档实例方法
- en: Documents have their own built-in instance methods such as `save` and `remove`.
    However, we can write our own instance methods as well.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 文档有自己的内置实例方法，如`save`和`remove`。但是，我们也可以编写自己的实例方法。
- en: 'Documents are instances of models. They can be explicitly created:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是模型的实例。它们可以被显式创建：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Or they can be the result of a query:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它们可以是查询的结果：
- en: '[PRE43]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Document instance methods are defined in the schema. All schemas have a method
    called `method` which allows you to define custom instance methods.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 文档实例方法在模式中定义。所有模式都有一个名为`method`的方法，允许您定义自定义实例方法。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will define a schema and custom document instance methods
    for modifying and reading document properties. First, ensure that you have MongoDB
    installed and it''s running. As an alternative, if you prefer, a MongoDB DBaaS
    instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将为修改和读取文档属性定义模式和自定义文档实例方法。首先确保已安装MongoDB并且正在运行。作为替代方案，如果您愿意，云中的MongoDB
    DBaaS实例也可以。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行此代码来安装依赖项：
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new file named `document-methods.js`
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`document-methods.js`的新文件
- en: 'Include the Mongoose NPM module. Then, create a new connection to MongoDB:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含Mongoose NPM模块。然后，创建一个到MongoDB的新连接：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Define a schema:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Define a document instance method for setting a user''s first name and last
    name from a string containing their full name:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个文档实例方法，用于从包含其全名的字符串中设置用户的名和姓：
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Define a document instance method for getting a user''s full name concatenating
    the `firstName` and `lastName` properties:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于获取用户全名的文档实例方法，将`firstName`和`lastName`属性连接起来：
- en: '[PRE49]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Define a document instance method named `loves` that will expect one argument
    that will add to the `likes` array of strings:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`loves`的文档实例方法，该方法将期望一个参数，该参数将添加到字符串数组`likes`中：
- en: '[PRE50]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Define a document instance method named `dislikes` which will remove one thing
    previous liked by the user from the `likes` array:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`dislikes`的文档实例方法，该方法将从`likes`数组中移除用户之前喜欢的一件事：
- en: '[PRE51]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Compile the schema into a model:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE52]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once Mongoose is connected to the database, create a new user and use `setFullName`
    method to populate the fields `firstName` and `lastName`, then use the `loves`
    method to populate the `likes` array. Next, use chaining syntax to query for the
    user in the collection and use the `dislikes` method to remove `"snakes"` from
    the `likes` array:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Mongoose连接到数据库，创建一个新用户并使用`setFullName`方法填充`firstName`和`lastName`字段，然后使用`loves`方法填充`likes`数组。接下来，使用链式语法在集合中查询用户，并使用`dislikes`方法从`likes`数组中移除`"snakes"`：
- en: '[PRE53]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Save the file.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Open a Terminal and run this code:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行此代码：
- en: '[PRE54]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Document instance methods can also be defined using the `methods`, schema property.
    For instance:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 文档实例方法也可以使用`methods`模式属性进行定义。例如：
- en: '[PRE55]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装MongoDB*部分'
- en: Defining static model methods
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义静态模型方法
- en: Models have built-in static methods such as `find`, `findOne`, and `findOneAndRemove`.
    Mongoose allow us to define custom static model methods as well. Static model
    methods are defined in the schema in the same way as document instance methods
    are.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 模型具有内置的静态方法，如`find`、`findOne`和`findOneAndRemove`。Mongoose还允许我们定义自定义静态模型方法。静态模型方法与文档实例方法的定义方式相同，都是在模式中定义的。
- en: Schemas have a property called `statics` which is an object. All the methods
    defined inside the `statics` object are passed to the model. Static model methods
    can also be defined by calling the `static` schema method.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 模式有一个名为`statics`的属性，它是一个对象。`statics`对象内定义的所有方法都会传递给模型。静态模型方法也可以通过调用`static`模式方法进行定义。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will define a schema and custom static model method for
    expanding your model''s capabilities. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将定义一个模式和自定义静态模型方法，以扩展模型的功能。首先确保已安装MongoDB并且正在运行。或者，如果您愿意，云中的MongoDB DBaaS实例也可以。在开始之前，请使用以下代码创建一个新的`package.json`文件：
- en: '[PRE56]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE57]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Define a static model method called `getByFullName` that will allow you to
    search for a specific user using their full name:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为`getByFullName`的静态模型方法，允许您使用其全名搜索特定用户：
- en: Create a new file named `static-methods.js`
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`static-methods.js`的新文件
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括Mongoose NPM模块并创建到MongoDB的新连接：
- en: '[PRE58]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Define a schema:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE59]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Define `getByFullName` static model method:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`getByFullName`静态模型方法：
- en: '[PRE60]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Compile the schema into a model:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE61]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Once connected, create a new user and save it. Then, use the `getByFullName`
    static model method to look for the user in the collection of users using their
    full name:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦连接，创建一个新用户并保存。然后，使用`getByFullName`静态模型方法通过其全名在用户集合中查找用户：
- en: '[PRE62]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Save the file
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run this code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行此代码：
- en: '[PRE63]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Static model methods can also be defined using the `statics` schema property.
    For instance:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 静态模型方法也可以使用`statics`模式属性进行定义。例如：
- en: '[PRE64]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: See also
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装MongoDB*部分'
- en: Writing middleware functions for Mongoose
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Mongoose编写中间件函数
- en: Middleware functions in Mongoose are also called `hooks`. There are two types
    of hooks `pre hooks` and `post hooks`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose中的中间件函数也称为`hooks`。有两种类型的钩子`pre hooks`和`post hooks`。
- en: 'The difference, between `pre hooks` and post hooks, is pretty simple. `pre
    hooks` are called before a method is called, and `post hooks` are called after.
    For example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`pre hooks`和`post hooks`之间的区别非常简单。`pre hooks`在方法调用之前调用，而`post hooks`在方法调用之后调用。例如：'
- en: '[PRE65]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'And later on, once the connection is made to the database, within an `async`
    function:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，一旦与数据库建立连接，在`async`函数内：
- en: '[PRE66]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Once the `save` method is called, the `pre hook` is executed first. After the
    document is saved, the `post hook` is then executed. In the previous example,
    it will display in the Terminal output the following text:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用`save`方法，将首先执行`pre hook`。文档保存后，将执行`post hook`。在上一个示例中，终端输出将显示以下文本：
- en: '[PRE67]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'There are four different types of middleware functions in Mongoose: document
    middleware, model middleware, aggregate middleware, and query middleware. All
    of them are defined on the schema level. The difference is, when the hooks are
    executed, the context of`this` refers to the document, model, the aggregation
    object, or the query object.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose中有四种不同类型的中间件函数：文档中间件、模型中间件、聚合中间件和查询中间件。它们都在模式级别上定义。区别在于，当钩子被执行时，`this`的上下文是文档、模型、聚合对象或查询对象。
- en: All types of middleware support pre and post hooks
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类型的中间件都支持预先和后续钩子
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will see how three of these types of middleware functions
    work in Mongoose:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到Mongoose中这三种类型的中间件函数是如何工作的：
- en: Document middleware
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档中间件
- en: Model middleware
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型中间件
- en: Query middleware
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询中间件
- en: 'First, ensure that you have MongoDB installed and it''s running. As an alternative,
    if you prefer, a MongoDB DBaaS instance in the cloud will also do. Before you
    start, create a new `package.json` file with the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保您已安装MongoDB并且正在运行。或者，如果您愿意，云中的MongoDB DBaaS实例也可以。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE68]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行来安装依赖项：
- en: '[PRE69]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How to do it...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In document middleware functions, the context of `this` refers to the document.
    A document has the following built-in methods and you can define `hooks` for them:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档中间件函数中，`this`的上下文指的是文档。文档具有以下内置方法，您可以为它们定义`hooks`：
- en: '`init`: This is called internally, immediately after a document is returned
    from MongoDB. Mongoose uses setters for marking the document as modified or which
    fields of the document were modified. `init` initializes the document without
    setters.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init`：这是在从MongoDB返回文档后立即内部调用的。Mongoose使用setter标记文档是否已修改或文档的哪些字段已修改。`init`初始化文档而不使用setter。'
- en: '`validate`: This executes built-in and custom set validation rules for the
    document.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`：执行文档的内置和自定义验证规则。'
- en: '`save`: This saves the document in the database.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save`：将文档保存到数据库中。'
- en: '`remove`: This removes the document from the database.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：从数据库中删除文档。'
- en: Document middleware functions
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档中间件函数
- en: 'Create `pre` and `post` hooks for the document built-in methods:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为文档内置方法创建预先和后续钩子：
- en: Create a new file named `1-document-middleware.js`
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`1-document-middleware.js`的新文件
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含Mongoose NPM模块并创建到您的MongoDB的新连接：
- en: '[PRE70]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Define a schema:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE71]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Add a `pre` and `post` hook for the `init` document method:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`init`文档方法添加`pre`和`post`钩子：
- en: '[PRE72]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Add a `pre` and `post` hook for the `validate` document method:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`validate`文档方法添加`pre`和`post`钩子：
- en: '[PRE73]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Add a `pre` and `post` hook for the `save` document method:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`save`文档方法添加`pre`和`post`钩子：
- en: '[PRE74]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add a `pre` and `post` hook for the `remove` document method:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`remove`文档方法添加`pre`和`post`钩子：
- en: '[PRE75]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Compile the schema into a model:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE76]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Once a new connection is established, create a document and perform some basic
    operations such as saving, retrieving, and deleting the document:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦建立新连接，创建一个文档并执行一些基本操作，如保存、检索和删除文档：
- en: '[PRE77]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Save the file
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE78]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'On the terminal, the output should display:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上，输出应该显示：
- en: '[PRE79]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: When you save a document, it first triggers the `validation` hooks that ensure
    that the fields pass the rules set by built-in validation rules or custom rules.
    In your code, the fields are marked as required. Then it will trigger the `save`
    hooks. After, using a model method to retrieve the recently created user from
    the database, once the document is retrieved, it triggers the `init` hooks. Finally,
    removing the document from the database triggers the `remove` hooks.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当您保存一个文档时，首先触发`validation`钩子，以确保字段通过内置验证规则或自定义规则设置的规则。在您的代码中，字段被标记为必需的。然后它将触发`save`钩子。之后，使用模型方法从数据库中检索最近创建的用户时，一旦检索到文档，它将触发`init`钩子。最后，从数据库中删除文档将触发`remove`钩子。
- en: 'Within the hooks, you can interact with the document. For instance, the following
    `save` pre hook will modify the fields `firstName` and `lastName` to make them
    upper-cased strings:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在钩子中，您可以与文档交互。例如，以下`save`预钩子将修改`firstName`和`lastName`字段，使它们成为大写字符串：
- en: '[PRE80]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The same way, we can throw an error within the hook to prevent the next ones
    from being executed. For instance:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以在钩子中抛出错误，以防止下一个钩子被执行。例如：
- en: '[PRE81]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Query middleware functions are defined exactly as document middleware functions
    are. However, the context of `this` doesn''t not refer to the document but instead
    to the query object. Query middleware functions are only supported in the following
    model and query functions:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中间件函数的定义方式与文档中间件函数完全相同。但是，`this`的上下文不是指文档，而是指查询对象。查询中间件函数仅受支持于以下模型和查询函数：
- en: '`count`: Counts the number of document that match a specific query condition'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`：计算符合特定查询条件的文档数量'
- en: '`find`: Returns an array of documents that match a specific query condition'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find`：返回符合特定查询条件的文档数组'
- en: '`findOne`: Return a document that matches a specific query condition'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findOne`：返回符合特定查询条件的文档'
- en: '`findOneAndRemove`: Similar to `findOne`. However, after a document is found,
    it is removed'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findOneAndRemove`：类似于`findOne`。但是，在找到文档后，它会被删除'
- en: '`findOneAndUpdate`: Similar to `findOne` but once a document matching a specific
    query condition is found, the document can also be updated'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findOneAndUpdate`：类似于`findOne`，但是一旦找到符合特定查询条件的文档，还可以更新文档'
- en: '`update`: Update one or more documents that match a certain query condition'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：更新符合特定查询条件的一个或多个文档'
- en: Query middleware functions
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询中间件函数
- en: 'Create pre and post hooks for query built-in methods:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为查询内置方法创建预先和后续钩子：
- en: Create a new file named `2-query-middleware.js`
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`2-query-middleware.js`的新文件
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含Mongoose NPM模块并创建到您的MongoDB的新连接：
- en: '[PRE82]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Define a schema:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模式：
- en: '[PRE83]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Define pre and post hooks for the `count`, `find`, `findOne`, and `update`
    methods:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`count`、`find`、`findOne`和`update`方法定义预先和后续钩子：
- en: '[PRE84]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Compile the schema into a model:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE85]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Once the connection to the database is successfully made, create a document,
    save it, and use the methods for which we defined hooks for:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功连接到数据库，创建一个文档，保存它，并使用我们为其定义了钩子的方法：
- en: '[PRE86]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Save the file
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE87]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'On the terminal, the output should display something similar to:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上，输出应该显示类似于：
- en: '[PRE88]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Finally, there is only one model instance method that supports hooks:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只有一个模型实例方法支持钩子：
- en: '`insertMany`: This validates an array of documents and saves them in the database
    only if all the documents in the array passed validation'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertMany`：这会验证一个文档数组，并且只有当数组中的所有文档都通过验证时才会保存到数据库中'
- en: As you probably guessed, a model middleware function is also defined in the
    same way as query middleware methods and document middleware methods are.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经猜到，模型中间件函数也是以与查询中间件方法和文档中间件方法相同的方式定义的。
- en: Model middleware functions
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型中间件函数
- en: 'Create a `pre` and `post` hook for the `insertMany` model instance method:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 为`insertMany`模型实例方法定义`pre`和`post`钩子：
- en: Create a new file named `3-model-middleware.js`
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`3-model-middleware.js`的新文件
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括Mongoose NPM模块并创建到您的MongoDB的新连接：
- en: '[PRE89]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Define a schema:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义模式：
- en: '[PRE90]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Define `pre` and `post` hooks for the `insertMany` model method:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`insertMany`模型方法定义`pre`和`post`钩子：
- en: '[PRE91]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Compile the schema into a model:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE92]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Once a connection to the database was established, use the `insertMany` method
    to insert two documents at once:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦建立了与数据库的连接，就可以使用`insertMany`方法一次插入两个文档：
- en: '[PRE93]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save the file
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE94]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'On the Terminal, the output should display:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上，输出应该显示：
- en: '[PRE95]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: There's more...
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It''s useful to mark the fields as required to avoid having "null" values being
    saved in the database. An alternative is to set default values for the fields
    that are not explicitly defined in the creation time of the document. For instance:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 将字段标记为必填项很有用，以避免在数据库中保存“null”值。另一种选择是为在文档创建时未明确定义的字段设置默认值。例如：
- en: '[PRE96]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: When a new document is created, if no path or property `name` is assigned, then
    it will assign the default value defined in the schema type option `default`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新文档时，如果未分配路径或属性`name`，则它将分配模式类型选项`default`中定义的默认值。
- en: The schema type `default` option can also be a function. The value returned
    by calling this function is assigned as the default value.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 模式类型`default`选项也可以是一个函数。调用此函数返回的值将被分配为默认值。
- en: 'Sub-documents or arrays can also be created by just adding brackets when defining
    the schema type. For instance:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 子文档或数组也可以通过在定义模式类型时添加括号来创建。例如：
- en: '[PRE97]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: When a new document is created, it will expect an array of strings in the `wishes`
    property or path. If no array is provided, then the default values will be used
    to create the document.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新文档时，它将期望`wishes`属性或路径中的字符串数组。如果未提供数组，则将使用默认值来创建文档。
- en: See also
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装MongoDB*部分'
- en: Writing custom validators for Mongoose's schemas
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Mongoose的模式编写自定义验证器
- en: Mongoose has several built-in validation rules. For instance, if you define
    a property with a schema type of `string` and set it as `required`, two validation
    rules will be executed, one that checks for the property to be a valid `string`
    and another one for checking that the property is not `null` or `undefined`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose有几个内置验证规则。例如，如果您使用模式类型为`string`并将其设置为`required`来定义属性，则将执行两个验证规则，一个用于检查属性是否为有效的`string`，另一个用于检查属性是否不为`null`或`undefined`。
- en: Custom validation rules and custom error validation messages can also be defined
    in Mongoose for having more control on how and when certain properties are accepted
    before they can be saved in the database.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose还可以在Mongoose中定义自定义验证规则和自定义错误验证消息，以便更好地控制何时以及何时接受某些属性，然后才能将其保存到数据库中。
- en: 'Validation rules are defined in the schema. All schema types have a built-in
    validator `required` which means it cannot contain `undefined` or `null` values.
    The `required` validator can be of type `boolean`, a `function`, or an `array`.
    For example:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 验证规则在模式中定义。所有模式类型都有一个内置验证器`required`，这意味着它不能包含`undefined`或`null`值。`required`验证器可以是`boolean`、`function`或`array`类型。例如：
- en: '[PRE98]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'String schema types have the following built-in validators:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串模式类型具有以下内置验证器：
- en: '`enum`: This states that the string can only have the value specified in the
    `enum` array. For instance:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enum`：这表示字符串只能具有`enum`数组中指定的值。例如：'
- en: '[PRE99]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '`match`: This uses `RegExp` to test the value. For instance, to allow values
    that start with `www`:'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match`：这使用`RegExp`来测试值。例如，允许以`www`开头的值：'
- en: '[PRE100]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '`maxlength`: This defines the maximum length that a string can have.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxlength`：这定义了字符串的最大长度。'
- en: '`minlength`: This defines the minimum length that a string can have. For instance,
    to allow only strings between `5` and `20` characters:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minlength`：这定义了字符串的最小长度。例如，只允许`5`和`20`个字符之间的字符串：'
- en: '[PRE101]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Number schema types have two built-in validators:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 数字模式类型有两个内置验证器：
- en: '`min`: This defines the minimum value that a number can have.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min`：这定义了数字的最小值。'
- en: '`max`: This defines the maximum value that a number can have. For instance,
    to allow only numbers between `18` and `100`:'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`：这定义了数字的最大值。例如，只允许`18`和`100`之间的数字：'
- en: '[PRE102]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Undefined values pass all validators without error. If you want to throw an
    error if a value is `undefined`, do not forget to use the `required` validator
    to `true`
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 未定义的值可以通过所有验证器而不出错。如果要在值为`undefined`时抛出错误，请不要忘记将`required`验证器设置为`true`
- en: 'When built-in validators sometimes do not satisfy your requirements or you
    wish to perform complex validation rules, you have an option or property called
    `validate.` This accepts an object that has two properties, `validator` and `message,`
    that allow us to write custom validators:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 当内置验证器有时无法满足您的要求，或者您希望执行复杂的验证规则时，您有一个名为`validate`的选项或属性。这个选项接受一个具有两个属性`validator`和`message`的对象，允许我们编写自定义验证器：
- en: '[PRE103]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Getting ready
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see how to use custom validation rules to ensure that
    a certain field matches or fulfils a defined rule. First, ensure that you have
    MongoDB installed and it''s running. As an alternative, if you prefer, a MongoDB
    DBaaS instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将看到如何使用自定义验证规则来确保某个字段匹配或满足定义的规则。首先确保您已安装MongoDB并且它正在运行。或者，如果您愿意，云中的MongoDB
    DBaaS实例也可以。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE104]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE105]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a user schema and ensure that all user names are of type string, have
    a minimum length of six characters, have a maximum length of 20 characters, match
    a regular expression, and are required:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个用户模式，并确保所有用户名都是字符串类型，最小长度为六个字符，最大长度为20个字符，匹配正则表达式，并且是必需的：
- en: Create a new file named `custom-validation.js`
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`custom-validation.js`的新文件
- en: 'Include the Mongoose NPM module and create a new connection to the database:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括Mongoose NPM模块，并创建与数据库的新连接：
- en: '[PRE106]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Define a schema including validation rules for the `username` field:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包括`username`字段的验证规则的模式：
- en: '[PRE107]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Compile the schema into a model:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模式编译成模型：
- en: '[PRE108]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Once a connection with the database is established, create a new document with
    invalid fields and use the `validateSync` document method to trigger the validation
    built-in and custom methods:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦与数据库建立连接，创建一个带有无效字段的新文档，并使用`validateSync`文档方法来触发内置和自定义方法的验证：
- en: '[PRE109]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Save the file
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Open a Terminal and run:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行：
- en: '[PRE110]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'On the Terminal, the output should display:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端上，输出应显示：
- en: '[PRE111]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: See also
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，*安装NPM包*部分'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section **Installing MongoDB**'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack简介*，**安装MongoDB**部分'
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ExpressJS和Mongoose构建RESTful API来管理用户
- en: In this recipe, you will build a RESTful API that will allow the creation of
    new users, log in, display user information, and delete a user's profile. Furthermore,
    you will learn how to build a NodeJS REPL with a client API that you can use to
    interact with your server's RESTful API.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将构建一个RESTful API，允许创建新用户、登录、显示用户信息和删除用户配置文件。此外，您还将学习如何构建一个带有客户端API的NodeJS
    REPL，您可以使用它与服务器的RESTful API进行交互。
- en: 'A **REPL** (**Read-Eval-Print Loop**) is like an interactive shell where you
    can execute commands one after another. For instance, the Node.js REPL can be
    opened by running this command in your terminal:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**REPL**（**Read-Eval-Print Loop**）类似于一个交互式shell，您可以依次执行命令。例如，可以通过在终端中运行此命令来打开Node.js
    REPL：'
- en: '[PRE112]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Here, the `-i` flag stands for interactive. Now, you can execute the JavaScript
    code that gets evaluated piece by piece in a new context.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-i`标志代表交互式。现在，您可以执行JavaScript代码，该代码将逐段在新上下文中进行评估。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe will be focused on showing the integration of Mongoose with ExpressJS
    using what was seen in previous recipes. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将重点介绍Mongoose与ExpressJS的集成，使用了之前教程中所见的内容。首先确保您已安装MongoDB并且它正在运行。或者，如果您愿意，云中的MongoDB
    DBaaS实例也可以。在开始之前，创建一个新的`package.json`文件，其中包含以下代码：
- en: '[PRE113]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行此代码来安装依赖项：
- en: '[PRE114]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Firstly, create a file named `server.js` that will include two middleware functions.
    One that configures a session and the other that makes sure that there is a connection
    to the MongoDB before allowing any route to be called. Then, we mount our API
    routes to a specific path:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`server.js`的文件，其中包含两个中间件函数。一个配置会话，另一个确保在允许调用任何路由之前有一个与MongoDB的连接。然后，我们将我们的API路由挂载到特定路径：
- en: Create a new file named `server.js`
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`server.js`的新文件
- en: 'Include the required libraries. Then, initialize a new ExpressJS application
    and create a connection to MongoDB:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括所需的库。然后，初始化一个新的ExpressJS应用程序，并创建与MongoDB的连接：
- en: '[PRE115]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Use the `body-parser` middleware to parse the request body as JSON:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`body-parser`中间件将请求体解析为JSON：
- en: '[PRE116]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Define an ExpressJS middleware function that will ensure your web application
    is connected to MongoDB first before allowing next route handlers to be executed:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个ExpressJS中间件函数，确保您的Web应用在允许执行下一个路由处理程序之前首先连接到MongoDB：
- en: '[PRE117]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Configure `express-session` middleware to store sessions in the Mongo database
    instead of storing in memory:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`express-session`中间件以将会话存储在Mongo数据库中，而不是存储在内存中：
- en: '[PRE118]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Mount the API controller to the `"/api"` route:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将API控制器挂载到`"/api"`路由：
- en: '[PRE119]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Listen on port 1773 for new connections:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听端口1773以进行新连接：
- en: '[PRE120]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Save the file
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Then, create a new directory named `api`. Next, create the model or business
    logic of your application. Define a schema for users with static and instance
    methods that will allow a user to signup, login, logout, get profile data, change
    their password, and remove their profile:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`api`的新目录。接下来，创建应用程序的模型或业务逻辑。为用户定义一个包含静态和实例方法的模式，这些方法将允许用户注册、登录、注销、获取配置文件数据、更改密码和删除其配置文件：
- en: Create a new file named `model.js` in the `api` directory
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`api`目录中创建一个名为`model.js`的新文件
- en: 'Include the Mongoose NPM module and also the `crypto` NodeJS module that will
    be used to generate a hash for the user passwords:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括Mongoose NPM模块，还包括将用于生成用户密码哈希的`crypto` NodeJS模块：
- en: '[PRE121]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Define the schema:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义模式：
- en: '[PRE122]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Define a static model method for `login`:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`login`定义一个静态模型方法：
- en: '[PRE123]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Define a static model method for `signup`:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`signup`定义一个静态模型方法：
- en: '[PRE124]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Define a document instance method for `changePass`:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`changePass`定义一个文档实例方法：
- en: '[PRE125]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Compile the Mongoose schema into a model and export it:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Mongoose模式编译为模型并导出它：
- en: '[PRE126]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Save the file
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Finally, define a controller that will transform the request body to actions
    that our model can understand. Then export it as an ExpressJS router that contains
    all API paths:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定义一个控制器，将请求体转换为模型可以理解的操作。然后将其导出为包含所有API路径的ExpressJS路由：
- en: Create a new file named `controller.js` in the `api` folder
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`api`文件夹中创建一个名为`controller.js`的新文件
- en: 'Import `model.js` and initialize a new ExpressJS Route:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`model.js`并初始化一个新的ExpressJS路由：
- en: '[PRE127]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Define a request handler to check if a user is logged in and another request
    handler to check if the user is not logged in:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个请求处理程序，检查用户是否已登录，另一个请求处理程序检查用户是否未登录：
- en: '[PRE128]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Define a `post` request method to handle requests to `"/login"` endpoint:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`post`请求方法来处理对`"/login"`端点的请求：
- en: '[PRE129]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Define a `post` request method to handle requests to `"/logout"` endpoint:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`post`请求方法来处理对`"/logout"`端点的请求：
- en: '[PRE130]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Define a `post` request method to handle requests to `"/signup"` endpoint:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`post`请求方法来处理对`"/signup"`端点的请求：
- en: '[PRE131]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Define a `get` request method to handle requests to `"/profile"` endpoint:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`get`请求方法来处理对`"/profile"`端点的请求：
- en: '[PRE132]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Define a `put` request method to handle requests to `"/changepass"` endpoint:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`put`请求方法来处理对`"/changepass"`端点的请求：
- en: '[PRE133]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Define a delete request method to handle requests to `"/delete"` endpoint:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`delete`请求方法来处理对`"/delete"`端点的请求：
- en: '[PRE134]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Export the route:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出路由：
- en: '[PRE135]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Save the file
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: Let's test it...
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来测试一下...
- en: 'You have built a RESTful API that allows users to subscribe or sign up, log
    in, log out, get their profile, and delete their profile. These actions can be
    performed by making HTTP requests to the server. We will build now a small NodeJS
    REPL and client API that could allow you to interact with your RESTful API server
    with plain JavaScript functions:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经构建了一个RESTful API，允许用户订阅或注册、登录、注销、获取其个人资料和删除其个人资料。这些操作可以通过向服务器发出HTTP请求来执行。现在我们将构建一个小型的NodeJS
    REPL和客户端API，可以让您使用纯JavaScript函数与您的RESTful API服务器进行交互：
- en: Move to the root of your project directory and create a new file named `client-repl.js`.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到项目目录的根目录，并创建一个名为`client-repl.js`的新文件。
- en: 'Include the `node-fetch` NPM module that will allow making HTTP request to
    the server. Include as well, the `repl` and `vm` Node.js modules that will allow
    you to create an interactive Node.js REPL:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括`node-fetch` NPM模块，允许向服务器发出HTTP请求。还包括`repl`和`vm` Node.js模块，允许您创建交互式Node.js
    REPL：
- en: '[PRE136]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Define a variable that will later contain the session ID from the cookie once
    the user is logged-in. The cookie will be used to allow the server recognize the
    logged in user for actions such as getting information about your profile or changing
    password:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个变量，稍后将包含来自cookie的会话ID，一旦用户登录。该cookie将用于让服务器识别已登录用户，以执行诸如获取有关您的个人资料或更改密码的操作：
- en: '[PRE137]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Define a helper function named `query` that will allow to make HTTP requests
    to the server. The `credentials` options, allows to send and receive cookies from
    and to the server. We define the `headers` that will tell the server the content
    type of the request body that will be sent as JSON content:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`query`的辅助函数，允许向服务器发出HTTP请求。`credentials`选项允许从服务器发送和接收cookie。我们定义了`headers`，告诉服务器请求体的内容类型将以JSON内容发送：
- en: '[PRE138]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Define a method that will allow users to sign up:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户注册的方法：
- en: '[PRE139]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Define a method that will allow users to log in:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户登录的方法：
- en: '[PRE140]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Define a method that will allow users to log out:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户注销的方法：
- en: '[PRE141]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Define a method that will allow users to get their profile:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户获取其个人资料的方法：
- en: '[PRE142]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Define a method that will allow users to change their password:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户更改密码的方法：
- en: '[PRE143]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Define a method that will allow users to delete their profile:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许用户删除其个人资料的方法：
- en: '[PRE144]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Use the start method from the REPL exported object to start a new REPL server.
    We will specify the eval method to execute JavaScript code using the VM module,
    then, if a Promise is returned, it will wait for the Promise to be resolved before
    allowing the user to input more commands or type more JavaScript code in the REPL.
    We will also specify also the writer method that will pretty-print the result
    of calling the previously defined methods:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL导出对象的start方法启动新的REPL服务器。我们将指定eval方法使用VM模块执行JavaScript代码，然后，如果返回Promise，它将等待Promise解析后才允许用户输入更多命令或在REPL中输入更多JavaScript代码。我们还将指定writer方法，用于漂亮打印调用先前定义方法的结果：
- en: '[PRE145]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Add the previously defined methods to the context of the REPL server where
    the JavaScript code will be executed:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将先前定义的方法添加到REPL服务器的上下文中，JavaScript代码将在其中执行：
- en: '[PRE146]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Save the file
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Now you can run on a terminal your RESTful API server:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在终端上运行您的RESTful API服务器：
- en: '[PRE147]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'And in a different terminal, run the NodeJS REPL application that you just
    created:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，运行您刚刚创建的NodeJS REPL应用程序：
- en: '[PRE148]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'In the REPL, you can execute JavaScript code and you have also access to the
    exported methods. For instance, you can execute the following JavaScript code
    line by line in your REPL:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在REPL中，您可以执行JavaScript代码，并且还可以访问导出的方法。例如，您可以在REPL中逐行执行以下JavaScript代码：
- en: '[PRE149]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: How it works...
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Your RESTful API server will accept requests for the following paths:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 您的RESTful API服务器将接受以下路径的请求：
- en: '`POST/users/login`: If a username does not exist in the `users` collection
    in MongoDB, an error message is sent to the client. Otherwise, it returns a welcome
    message.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/login`：如果在MongoDB的`users`集合中不存在用户名，则向客户端发送错误消息。否则，它会返回欢迎消息。'
- en: '`POST/users/logout`: This destroys the session ID.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/logout`：这将销毁会话ID。'
- en: '`POST/users/signup`: This creates a new username with the defined password.
    However, an error will be sent to the client if the username or password does
    not pass the validation. It will also send an error message to the client when
    the username already exists.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/signup`：这将使用定义的密码创建一个新的用户名。但是，如果用户名或密码未通过验证，则会向客户端发送错误消息。当用户名已存在时，它还会向客户端发送错误消息。'
- en: '`GET/users/profile`: If the user is logged in, the user information is sent
    to the client. Otherwise, an error message is sent to the client.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET/users/profile`：如果用户已登录，则会向客户端发送用户信息。否则，会向客户端发送错误消息。'
- en: '`PUT/users/changepass/`: This will change the current logged-in user''s password.
    However, if the user is not logged-in, an error message is sent to the client.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT/users/changepass/`：这将更改当前已登录用户的密码。但是，如果用户未登录，则会向客户端发送错误消息。'
- en: '`DELETE/users/delete`: This will remove a logged-in user''s profile from the
    collection `users` in MongoDB. The session will be destroyed and a confirmation
    message is sent to the client. If the user is not logged-in, an error message
    is sent to the client'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE/users/delete`：这将从MongoDB的`users`集合中删除已登录用户的个人资料。会话将被销毁，并向客户端发送确认消息。如果用户未登录，则向客户端发送错误消息。'
- en: See also
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack,* section *Installing NPM Packages*'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1章，MERN Stack简介，安装NPM包部分
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack*, section *Installing MongoDB*'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1章，MERN Stack简介，安装MongoDB部分
