- en: Chapter 10. Working with APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用API
- en: During the creation process of an application, in today's dynamic living and
    working environments, connecting your mobile application to a backend will facilitate
    the process of data storage and connection of data to companion web applications,
    which will provide users with enhanced capabilities and a satisfactory experience.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的动态生活和工作环境中，创建应用程序的过程中，将您的移动应用程序连接到后端，将有助于数据存储的过程，并将数据连接到伴随的Web应用程序，这将为用户提供增强的功能和令人满意的体验。
- en: Introducing a backend into your project can be facilitated through the use of
    the `Parse.com` REST API. Parse offers an easy-to-use, straightforward, and scalable
    platform, which can be implemented within an application based on the Ionic framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`Parse.com` REST API，可以将后端引入到项目中。Parse提供了一个易于使用、直接、可扩展的平台，可以在基于Ionic框架的应用程序中实现。
- en: As we go through this chapter, we will start off by setting up a Parse backend
    and an Ionic project. After this, we will create a connection between them to
    achieve our desired effect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先设置Parse后端和Ionic项目。之后，我们将创建它们之间的连接，以实现我们想要的效果。
- en: Setting up Parse
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置解析
- en: The first step that is required to get this project up and running is to visit
    [www.parse.com](http://www.parse.com) and create an account or log in to that
    site if you already have an account. In the free plan, you will get a file storage
    of 20 GB, a database storage of 20 GB, and the ability to transfer up to 2 TB
    of data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将此项目启动并运行所需的第一步是访问[www.parse.com](http://www.parse.com)并创建一个帐户，或者如果您已经有一个帐户，则登录到该网站。在免费计划中，您将获得20GB的文件存储、20GB的数据库存储和最多2TB的数据传输能力。
- en: 'If you''re using `Parse.com` for the first time, you will be welcomed by the
    following screen:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次使用`Parse.com`，您将会看到以下屏幕：
- en: '![Setting up Parse](img/B04653_10_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![设置解析](img/B04653_10_01.jpg)'
- en: 'Let''s name the app `Ionic-ToDo`. Once the app has been created, you will see
    the following screen if this is the first application that you created with Parse.
    Make sure that you note down the **Application ID** and **REST API Key**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将应用命名为`Ionic-ToDo`。一旦应用程序创建完成，如果这是您使用Parse创建的第一个应用程序，您将看到以下屏幕。确保记下**应用程序ID**和**REST
    API密钥**：
- en: '![Setting up Parse](img/B04653_10_02.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![设置解析](img/B04653_10_02.jpg)'
- en: 'The next part involves proceeding to the **Data Browser**. In this view, click
    on **Add Class** in the sidebar. The role of a class is to store data in the Parse
    application instance. In our case, we will name the class `Todo` and choose **Custom**
    as the class type:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分涉及前往**数据浏览器**。在此视图中，点击侧边栏中的**添加类**。类的作用是在Parse应用实例中存储数据。在我们的情况下，我们将类命名为`Todo`，并选择**自定义**作为类类型：
- en: '![Setting up Parse](img/B04653_10_03.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![设置解析](img/B04653_10_03.jpg)'
- en: 'To finalize the class creation process, click on **Create Class**, and you
    will have your class ready. In the data browser, you''ll see that your newly created
    class already has some properties:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成类创建过程，请点击**创建类**，然后您的类就准备好了。在数据浏览器中，您会看到您新创建的类已经有一些属性：
- en: '`objectId`: This is a unique ID that represents an individual `Todo` item in
    the collection'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objectId`：这是代表集合中单个`Todo`项目的唯一ID'
- en: '`createdAt`: This tells us when the `Todo` item was added to Parse'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createdAt`：这告诉我们`Todo`项目何时添加到Parse中'
- en: '`updatedAt`: This tells us when the `Todo` item was last updated'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updatedAt`：这告诉我们`Todo`项目上次更新的时间'
- en: 'In order to personalize the `Todo` application and allow for the creation of
    to-dos, we need a custom property to hold the contents of a `Todo` item. In the
    Data Browser, click on **+Col**, and the following dialog box will pop up:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了个性化`Todo`应用程序并允许创建待办事项，我们需要一个自定义属性来保存`Todo`项目的内容。在数据浏览器中，点击**+Col**，将弹出以下对话框：
- en: '![Setting up Parse](img/B04653_10_04.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![设置解析](img/B04653_10_04.jpg)'
- en: For this property, we will choose **String** as the type of column and input
    `todo-content` in the name field. Conclude this process by clicking on **Create
    Column**, and we are done!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此属性，我们将选择**字符串**作为列的类型，并在名称字段中输入`todo-content`。通过点击**创建列**来完成此过程，我们完成了！
- en: Once we have the class ready, we can start creating our Ionic app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦类准备好，我们就可以开始创建我们的Ionic应用程序。
- en: Setting up the Ionic project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Ionic项目
- en: 'We will create the Ionic app by running the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过运行以下命令来创建Ionic应用：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a blank Ionic starter app named `whichapp`, which will give
    us the necessary setup that is required to connect the Parse service to our project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`whichapp`的空白Ionic起始应用程序，这将为我们提供连接Parse服务到我们项目所需的设置。
- en: Connecting Parse to our project
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接Parse到我们的项目
- en: In order to connect the Parse data to our project, we will need to create an
    **AngularJS** service that performs the necessary CRUD operations to interact
    with the Parse REST API.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Parse数据连接到我们的项目，我们需要创建一个执行必要的CRUD操作以与Parse REST API交互的**AngularJS**服务。
- en: 'The code editor of our choice is Atom, the GitHub open source editor. Start
    by adding the project folder to Atom by navigating to it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的代码编辑器是Atom，GitHub开源编辑器。通过导航到Atom并将项目文件夹添加到其中开始：
- en: '**File** | **Add Project Folder**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件** | **添加项目文件夹**'
- en: 'Create a file named `services.js` with the following path:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`services.js`的文件，并使用以下路径：
- en: '**www** | **js** | **services.js**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**www** | **js** | **services.js**'
- en: 'Start by connecting the `services`. Define the `service` as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先连接`services`。定义`service`如下：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At this stage, our factory object `Todo` is an empty object, and we will need
    to add the necessary `Parse.com` API methods to it. It's important to note that
    the hostname is `https://api.parse.com` in all cases. `/1/` means that we are
    using version 1 of the API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们的工厂对象`Todo`是一个空对象，我们需要向其中添加必要的`Parse.com` API方法。重要的是要注意，在所有情况下主机名都是`https://api.parse.com`。`/1/`表示我们正在使用API的第一个版本。
- en: 'The following is the factory object with the five required methods:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具有五个必需方法的工厂对象：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also need to declare the `PARSE_CREDENTIALS` `value` service, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要声明`PARSE_CREDENTIALS` `value`服务，如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace `yourappid` and `yourrestapikey` with your previously noted application
    ID and REST API key respectively.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用您之前记录的应用程序ID和REST API密钥替换`yourappid`和`yourrestapikey`。
- en: Defining app states
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义应用程序状态
- en: 'In order to connect the different apps'' functions, we will need to define
    some states for our app, which are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接不同应用程序的功能，我们需要为我们的应用程序定义一些状态，如下所示：
- en: '`todos`: This lists all the to-do items'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`todos`：列出所有待办事项'
- en: '`createTodo`: This allows users to create a new to-do item'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createTodo`：允许用户创建新的待办事项'
- en: '`editTodo`: This allows users to update a to-do item'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`editTodo`：允许用户更新待办事项'
- en: 'The app states are defined in the `app.js` file named `whichfile`, which is
    available at the following path:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序状态在名为`whichfile`的`app.js`文件中定义，该文件位于以下路径：
- en: '**www** | **js** | **app.js**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**www** | **js** | **app.js**'
- en: 'Replace the existing `app.js` code with the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换现有的`app.js`代码：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating controllers and templates
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器和模板
- en: 'Once you have defined the states, you need to create the controllers and provide
    a template for each of them. Since we would like to edit and create tasks in a
    list view, we will define the following three controllers:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您定义了状态，您需要为每个控制器创建模板。由于我们希望在列表视图中编辑和创建任务，我们将定义以下三个控制器：
- en: '`TodoListController`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoListController`'
- en: '`TodoCreationController`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoCreationController`'
- en: '`TodoEditController`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoEditController`'
- en: 'In order to implement the controllers, we will need to create a new file entitled
    `controllers.js`, which should be available at the following path:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现控制器，我们需要创建一个名为`controllers.js`的新文件，该文件应位于以下路径：
- en: '**www** | **js** | **controllers.js**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**www** | **js** | **controllers.js**'
- en: 'In this file, we will declare all our controllers `whichcontrollers`, which
    will be done with the help of the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将声明所有我们的控制器`whichcontrollers`，这将通过以下代码完成：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For each controller, we require templates to present the controllers. We will
    start off with the `todo` list controller, which uses `ion-list` to display all
    the items in the `todo` list. In order to start off with this process, we will
    create a new folder in `www`, which will be named views. Within the views folder,
    we then need to design three new HTML files named create-`todo.html`, `edit-todo.html`,
    and `todos.html`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个控制器，我们需要模板来呈现控制器。我们将从`todo`列表控制器开始，它使用`ion-list`来显示`todo`列表中的所有项目。为了开始这个过程，我们将在`www`中创建一个名为views的新文件夹。在views文件夹中，我们需要设计三个新的HTML文件，分别命名为create-`todo.html`，`edit-todo.html`和`todos.html`。
- en: 'For `todos.html`, we need to declare the `ion-list` UI element as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`todos.html`，我们需要声明`ion-list`UI元素如下：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The creation of a new `todo` list is presented with a text area and an **Add**
    button. When you click on this button, the `$scope.create()` method gets called.
    Navigate to **create** | **todo.html**. This should be presented in the code as
    follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过文本区域和**添加**按钮呈现了一个新的`todo`列表的创建。当您点击此按钮时，将调用`$scope.create()`方法。导航到**create**
    | **todo.html**。代码应如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The ability of editing a `todo` list is a necessary feature in any to-do list
    app, and in our project, we will create an `edit-todo.html` file that allows the
    modification of an existing to-do item, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`todo`列表的能力是任何待办事项列表应用程序中必不可少的功能，在我们的项目中，我们将创建一个`edit-todo.html`文件，允许修改现有的待办事项，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Testing our application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的应用程序
- en: At this stage, we have produced the basic functionality of our application and
    we are ready to test the application in the browser.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经完成了应用程序的基本功能，并准备在浏览器中测试应用程序。
- en: 'On your terminal, navigate to the project directory. Once you''re in the project
    folder, run the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端上，导航到项目目录。一旦您在项目文件夹中，运行以下命令：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you execute the command, your browser will automatically load live screenshots
    of the application running in Android and iOS side by side. The screen will look
    like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行命令时，您的浏览器将自动加载Android和iOS并排运行的应用程序的实时截图。屏幕将如下所示：
- en: '![Testing our application](img/B04653_10_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的应用程序](img/B04653_10_05.jpg)'
- en: At this stage, once you add new items, they might not show up instantly within
    your application and you will be required to refresh the page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，一旦您添加新项目，它们可能不会立即显示在您的应用程序中，您需要刷新页面。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: When connecting the app to APIs, the topics that we covered in this chapter
    are just the tip of the iceberg as regards the possibilities. There are endless
    opportunities available if you wish to extend such an application, from the perspective
    of the UI to the API extensibility.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 连接应用程序到API时，本章涵盖的主题只是冰山一角，关于可能性还有很多。如果您希望扩展这样的应用程序，从UI到API的可扩展性来看，有无尽的机会可用。
- en: First, we can provide an option of deleting or archiving the completed to-do
    lists. We can also add an option of a pull-to-refresh feature in order to update
    lists of to-do items. From the point of view of user experience, we can add more
    interactive controls, such as swiping to the left or right to mark a to-do item
    as a completed task. The basis of the knowledge that we have built in this chapter
    will make you familiar with the necessary concepts that are required to take on
    more complex tasks, which will be faced by us in the next chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以提供删除或归档已完成的待办事项列表的选项。我们还可以添加下拉刷新功能，以更新待办事项列表。从用户体验的角度来看，我们可以添加更多的交互控件，比如向左或向右滑动以标记待办事项为已完成任务。本章中建立的知识基础将使您熟悉下一章中将面临的更复杂任务所需的必要概念。
